<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>汇编语言学习-寄存器</title>
      <link href="/2021/10/01/hui-bian-yu-yan-xue-xi-ji-cun-qi/"/>
      <url>/2021/10/01/hui-bian-yu-yan-xue-xi-ji-cun-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h1><h2 id="第二章-寄存器"><a href="#第二章-寄存器" class="headerlink" title="第二章 寄存器"></a>第二章 寄存器</h2><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><ol><li><p><strong>使用debug指令，将上面的程序段写入内存，逐条执行，观察每条指令执行后，CPU中相关寄存器中的内容变化。</strong></p><p> 输入指令<br> <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211001094702.png" alt="20211001094702"></p><p> 修改cs ip 使用r指令<br> <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211001094920.png" alt="20211001094920"></p><p> 执行程序 使用t指令<br> <code>具体的过程就不截图了，是ax bx ip 三个寄存器之间值的变化</code></p></li><li><p><strong>利用了三条指令计算2的八次方</strong></p><pre class=" language-text"><code class="language-text">mov ax,1add ax,axjmp 2000:0003</code></pre><p>也是通过t 命令运行程序并观察寄存器中值的变化。</p></li><li><p><strong>查看内存中的内容</strong><br>查看主板上面的内容，我是没看见。不知道是不是因为使用的是DOSbox的原因<br> <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211001102449.png" alt="20211001102449"></p></li><li><p><strong>向内存从B8100H 开始的单元中填写数据</strong></p><p>我盲猜，作者想让读者观察到的显示是有的内存地址(ROM)不能写，有的内存地址可以写</p><p>按照书上面写的8086PC机内存地址的空间分配图来说，b8100属于显存地址空间。<br>我输入过程中的感觉很奇怪，这里面的数据会自己变化</p><p>这里按道理来说b810:0000这个存储单元中存放的应该是20H才对，不知道为什么为了30H<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211001103438.png" alt="20211001103438"></p><p>同样都是使用d指令来查询内存中的内容，按道理来说1和2处显示的应该一样才对，3和4就刚好是一样的？？？<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211001103918.png" alt="20211001103918"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更新博客主题</title>
      <link href="/2021/09/30/geng-xin-bo-ke-zhu-ti/"/>
      <url>/2021/09/30/geng-xin-bo-ke-zhu-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="更新博客主题"><a href="#更新博客主题" class="headerlink" title="更新博客主题"></a>更新博客主题</h1><p>保研之后，除了规划一下下一步的研究生学习生活，在无意中逛其他大神的博客的时候，无意间发现了这个非常好看的主题。于是就抽空更换了一下，因为之前自己在<code>GitHub page</code>上搭建过一次，这次遇到的困难并不算多。</p><h2 id="遇到的问题以及待办"><a href="#遇到的问题以及待办" class="headerlink" title="遇到的问题以及待办"></a>遇到的问题以及待办</h2><ul><li><p>长时间不写markdown了，以至于很多插件都不太会用了，</p></li><li><p>之前文章中的代码高亮问题，也不知道是因为插件bug的原因，就是代码块好像必须要用小写才行。也懒得改之前的了，<code>后面的文章一定要按照小写的来</code>。</p></li><li><p>之前文章中的目录就不需要了，这个主题有方便的目录</p></li></ul><h3 id="计划继续完善的东西"><a href="#计划继续完善的东西" class="headerlink" title="计划继续完善的东西"></a>计划继续完善的东西</h3><ul><li><input disabled="" type="checkbox"> 在gitee上面搭建一份一样的博客</li><li><input disabled="" type="checkbox"> 还是希望深入接触一下hexo博客，后面还是希望能增添一些属于自己的东西，毕竟是自己的博客嘛</li><li><input disabled="" type="checkbox"> 这段时间反正也是比较闲，就尽量把每天学到的内容总结一下，写上来把，也算是督促自己了</li><li><input disabled="" type="checkbox"> 主页当中的图片大小会影响到下面博客文章的展示排版</li><li><input disabled="" type="checkbox"> 主页轮播图中有的图片不显示，因为他直接把md文章前面写的那些img文件拼接到cdn后面了。后面有机会看着改一下。</li><li><input disabled="" type="checkbox"> 友情链接，那几个图片显示不了，也不知道是不是跨域问题。</li><li><input checked="" disabled="" type="checkbox"> 不知道他这个目录是怎么显示的，有的有，有的没有。搞清楚一下。<strong>文章TOC设置</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 瞎搞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客主题 </tag>
            
            <tag> 待办 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>研究生预备学习</title>
      <link href="/2021/09/30/yan-jiu-sheng-yu-bei-xue-xi-qing-dan/"/>
      <url>/2021/09/30/yan-jiu-sheng-yu-bei-xue-xi-qing-dan/</url>
      
        <content type="html"><![CDATA[<h1 id="研究生预备学习"><a href="#研究生预备学习" class="headerlink" title="研究生预备学习"></a>研究生预备学习</h1><h2 id="情况介绍"><a href="#情况介绍" class="headerlink" title="情况介绍"></a>情况介绍</h2><p>  不管是运气还是个人实力，最终还是被保研到了本校网络空间安全学院继续学习。自己也选择了最开始选择网安专业最希望自己成为的那种人（二进制逆向），也找了学院里面做相关研究的导师。但是自己在本科期间并没有很好的基础。所以决定利用大四的时间，多学习一些基础的知识，以应对繁重科研压力的研究生生活</p><h2 id="主要阅读的书籍清单"><a href="#主要阅读的书籍清单" class="headerlink" title="主要阅读的书籍清单"></a>主要阅读的书籍清单</h2><h3 id="基础书籍"><a href="#基础书籍" class="headerlink" title="基础书籍"></a>基础书籍</h3><ul><li><input disabled="" type="checkbox"> 汇编语言 王爽</li><li><input disabled="" type="checkbox"> 逆向工程核心原理</li><li><input disabled="" type="checkbox"> 程序是怎样跑起来的</li></ul><h3 id="进阶书籍"><a href="#进阶书籍" class="headerlink" title="进阶书籍"></a>进阶书籍</h3><p>还在想~~</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习计划 </tag>
            
            <tag> 感想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构--线性表</title>
      <link href="/2021/07/02/shu-ju-jie-gou-xian-xing-biao-1/"/>
      <url>/2021/07/02/shu-ju-jie-gou-xian-xing-biao-1/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>直接放代码了，题目就是王道2022线性表那节的题目。</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 线性表.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。</span><span class="token comment" spellcheck="true">//</span><span class="token macro property"># <span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"># <span class="token directive keyword">define</span> LIST_INIT_SIZE 100 </span><span class="token comment" spellcheck="true">// 线性表存储空间的初始分配量</span><span class="token macro property"># <span class="token directive keyword">define</span> LISTINCREMENT 10</span><span class="token comment" spellcheck="true">//线性表存储空间的分配增量</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> elem<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存储空间基址</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前长度</span>    <span class="token keyword">int</span> listsize<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前分配的存储容量(以sizeof(int)为单位)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>SqList<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    初始化创建*/</span>bool <span class="token function">InitList_Sq</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>elem <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>LIST_INIT_SIZE <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> LIST_INIT_SIZE <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    L<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>listsize <span class="token operator">=</span> LIST_INIT_SIZE<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">ListPrint_Sq</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">printf_s</span><span class="token punctuation">(</span><span class="token string">"该顺序表为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> L<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf_s</span><span class="token punctuation">(</span><span class="token string">"%d->"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">printf_s</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    在固定位置插入元素*/</span>bool <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//在顺序线性表L中第i个位置之前插入新的元素e</span>    <span class="token comment" spellcheck="true">//i的合法值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span>L<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">></span> L<span class="token punctuation">.</span>listsize<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前存储空间已满，增加分配</span>        <span class="token keyword">int</span><span class="token operator">*</span> newbase <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>listsize <span class="token operator">+</span> LISTINCREMENT<span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>newbase<span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span>OVERFLOW<span class="token punctuation">)</span><span class="token punctuation">;</span>        L<span class="token punctuation">.</span>elem <span class="token operator">=</span> newbase<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//新基址</span>        L<span class="token punctuation">.</span>listsize  <span class="token operator">=</span> L<span class="token punctuation">.</span>listsize <span class="token operator">+</span> LISTINCREMENT<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> q <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//q为插入位置</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>L<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p <span class="token operator">>=</span> q<span class="token punctuation">;</span> <span class="token operator">--</span>p<span class="token punctuation">)</span>        <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//插入位置的元素后移</span>    <span class="token operator">*</span>q <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token operator">++</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    删除固定位置的元素*/</span>bool <span class="token function">ListDelete_Sq</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//在顺序线性表L中删除第i个元素，并用e返回值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span>L<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//被删除元素的位置</span>    e <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> q <span class="token operator">=</span> L<span class="token punctuation">.</span>elem <span class="token operator">+</span> L<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token operator">++</span>p<span class="token punctuation">;</span> p <span class="token operator">&lt;=</span> q<span class="token punctuation">;</span> <span class="token operator">++</span>p<span class="token punctuation">)</span> <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//被删除元素之后的元素左移</span>    <span class="token operator">--</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    删除顺序表中最小的元素 √*/</span>bool <span class="token function">ListDeleteMin_Sq</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">)</span> <span class="token operator">||</span> L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">printf_s</span><span class="token punctuation">(</span><span class="token string">"长度为零"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> q <span class="token operator">=</span> L<span class="token punctuation">.</span>elem <span class="token operator">+</span> L<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> L<span class="token punctuation">.</span>elem<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> tag <span class="token operator">=</span> L<span class="token punctuation">.</span>elem<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> p <span class="token operator">&lt;=</span> q<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">&lt;</span> <span class="token operator">*</span>tag<span class="token punctuation">)</span> tag <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    e <span class="token operator">=</span> <span class="token operator">*</span>tag<span class="token punctuation">;</span>    <span class="token operator">*</span>tag <span class="token operator">=</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    顺序表逆置 √*/</span>bool <span class="token function">ListReverse_Sq</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> temp<span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token operator">*</span>q<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// C++不允许空指针，定义只是定义int*,定义了并没有实际的指向。习惯上一定要进行初始指针的初始化操作。</span>    temp <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//也或者在这里直接用int类型的test即可。</span>    <span class="token keyword">int</span> test<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> L<span class="token punctuation">.</span>length<span class="token operator">/</span> <span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">;</span>        q <span class="token operator">=</span> L<span class="token punctuation">.</span>elem <span class="token operator">+</span> L<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span>        test <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>        <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>        <span class="token operator">*</span>q <span class="token operator">=</span> test<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    删除顺序表中所有值为x的元素 √     ----无论是有序表还是无序表用这个都行，有序表可以先找到所有的元素，然后一起移动，但是从时间复杂度上面来讲是一样的    从逻辑上讲，2这个值的确被删除了    但是从存储的结构上讲，2这个值还在存储空间里，只不过在逻辑上，这个位置已经是不合法的了。(改变了顺序表的长度)*/</span>bool <span class="token function">ListDeleValue</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">!=</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>length <span class="token operator">=</span> k<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    删除值在s和t之间的节点 √    跟上面的方法很像了*/</span>bool <span class="token function">ListDeleValueBetween</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">></span> t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf_s</span><span class="token punctuation">(</span><span class="token string">"请检查参数设置\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">&lt;</span>s <span class="token operator">||</span> <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">></span> t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>length <span class="token operator">=</span> k<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    删除有序线性表中所有的重复值*/</span>bool <span class="token function">ListDeleteDuplicateValueInOrder</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>length <span class="token operator">=</span> k<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    SqList test<span class="token punctuation">;</span>    <span class="token function">InitList_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//测试删除最小的元素</span>    <span class="token comment" spellcheck="true">//int tag;</span>    <span class="token comment" spellcheck="true">//ListDeleteMin_Sq(test, tag);</span>    <span class="token comment" spellcheck="true">//printf_s("%d", tag);</span>    <span class="token comment" spellcheck="true">//测试元素逆序</span>    <span class="token comment" spellcheck="true">//ListReverse_Sq(test);</span>    <span class="token comment" spellcheck="true">//ListPrint_Sq(test);</span>    <span class="token comment" spellcheck="true">//测试删除所有值为x的元素</span>    <span class="token comment" spellcheck="true">//ListDeleValue(test, 2);</span>    <span class="token comment" spellcheck="true">//ListPrint_Sq(test);</span>    <span class="token comment" spellcheck="true">//测试删除区间内的值</span>    <span class="token comment" spellcheck="true">//ListDeleValueBetween(test,2, 5);</span>    <span class="token comment" spellcheck="true">//ListPrint_Sq(test);</span>    <span class="token comment" spellcheck="true">//测试删除有序表中的重复值</span>    <span class="token function">ListDeleteDuplicateValueInOrder</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListPrint_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单</span><span class="token comment" spellcheck="true">// 调试程序: F5 或调试 >“开始调试”菜单</span><span class="token comment" spellcheck="true">// 入门使用技巧: </span><span class="token comment" spellcheck="true">//   1. 使用解决方案资源管理器窗口添加/管理文件</span><span class="token comment" spellcheck="true">//   2. 使用团队资源管理器窗口连接到源代码管理</span><span class="token comment" spellcheck="true">//   3. 使用输出窗口查看生成输出和其他消息</span><span class="token comment" spellcheck="true">//   4. 使用错误列表窗口查看错误</span><span class="token comment" spellcheck="true">//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目</span><span class="token comment" spellcheck="true">//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斐波拉契数列时间复杂度分析</title>
      <link href="/2021/06/30/fei-bo-la-qi-shu-lie-shi-jian-fu-za-du-fen-xi/"/>
      <url>/2021/06/30/fei-bo-la-qi-shu-lie-shi-jian-fu-za-du-fen-xi/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E6%96%90%E6%B3%A2%E6%8B%89%E5%A5%91%E6%95%B0%E5%88%97%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90">斐波拉契数列时间复杂度分析</a><ul><li><a href="#%E9%80%92%E5%BD%92%E7%89%88">递归版</a><ul><li><a href="#%E8%AF%81%E6%98%8E1">证明1</a></li><li><a href="#%E8%AF%81%E6%98%8E2">证明2</a></li></ul></li></ul></li></ul><h1 id="斐波拉契数列时间复杂度分析"><a href="#斐波拉契数列时间复杂度分析" class="headerlink" title="斐波拉契数列时间复杂度分析"></a>斐波拉契数列时间复杂度分析</h1><h2 id="递归版"><a href="#递归版" class="headerlink" title="递归版"></a>递归版</h2><p>递归版本的时间复杂度分析，真的不知道怎么分析，需要根据<code>f(n) = f(n-1) + f(n-2)</code>推出通解。这显然是个数学问题。<br>不知道为什么他们会给出这结果，难道不管通项公式的后一项了？</p><p>通项公式如下:<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210630173631.png" alt="20210630173631"></p><h3 id="证明1"><a href="#证明1" class="headerlink" title="证明1"></a>证明1</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210630173802.png" alt="20210630173802"></p><h3 id="证明2"><a href="#证明2" class="headerlink" title="证明2"></a>证明2</h3><p>还是看不太懂，为什么要给加法加个1呢？<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210630174145.png" alt="20210630174145"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实训day11</title>
      <link href="/2021/06/23/shi-xun-day11/"/>
      <url>/2021/06/23/shi-xun-day11/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#test">Test</a></li><li><a href="#%E4%BD%9C%E4%B8%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0">作业功能实现</a><ul><li><a href="#%E4%BF%AE%E6%94%B9%E4%BB%A3%E7%A0%81%E6%80%9D%E8%B7%AF">修改代码思路</a></li><li><a href="#%E9%97%AE%E9%A2%98">问题</a></li></ul></li></ul><h1 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h1><p>关于git 中rebase和merge的区别<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210621145651.png" alt="20210621145651"></p><h1 id="作业功能实现"><a href="#作业功能实现" class="headerlink" title="作业功能实现"></a>作业功能实现</h1><ul><li><input checked="" disabled="" type="checkbox"> 增加时间搜索</li><li><input checked="" disabled="" type="checkbox"> 增加时间更新修改</li><li><input checked="" disabled="" type="checkbox"> 增加个人页面 并且展示当前登录用户的名称和此用户的个人信息，增加修改</li><li><input disabled="" type="checkbox"> (扩展)用户可以自定义上传头像更新 实现退出效果</li></ul><h2 id="修改代码思路"><a href="#修改代码思路" class="headerlink" title="修改代码思路"></a>修改代码思路</h2><ul><li><input disabled="" type="checkbox"> 更改前端代码，增加相应的板块</li><li><input disabled="" type="checkbox"> Mapper 添加相应的查询</li><li><input disabled="" type="checkbox"> Controller接口</li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li><p><input checked="" disabled="" type="checkbox">  用户更新里面的时间输入框无法渲染,就像是个普通的input, —-是不是跟js代码的渲染顺序有关系？？？？</p><pre><code>在回调函数里面继续写js代码就行啦</code></pre></li><li><p><input checked="" disabled="" type="checkbox">  在用户个人页面把详细的信息以pojo对应的方式传进去</p></li><li><p><input checked="" disabled="" type="checkbox">  修改了代码后记得重新打包哦！！！  否则上传到服务器的包还是之前的jar包，就会恼火很长时间。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 国信安 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode7/8-找链表交点/合并有序链表</title>
      <link href="/2021/06/15/leetcode78-zhao-lian-biao-jiao-dian-he-bing-you-xu-lian-biao/"/>
      <url>/2021/06/15/leetcode78-zhao-lian-biao-jiao-dian-he-bing-you-xu-lian-biao/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#leetcode7-%E6%89%BE%E9%93%BE%E8%A1%A8%E4%BA%A4%E7%82%B9">leetcode7-找链表交点</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a><ul><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li><li><a href="#%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90">复杂度分析</a></li></ul></li></ul></li><li><a href="#leetcode8-%E5%90%88%E5%B9%B6%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8">leetcode8-合并有序链表</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-1">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF-1">思路</a><ul><li><a href="#%E4%BB%A3%E7%A0%81-1">代码</a></li><li><a href="#%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-1">复杂度分析</a></li></ul></li></ul></li></ul><h1 id="leetcode7-找链表交点"><a href="#leetcode7-找链表交点" class="headerlink" title="leetcode7-找链表交点"></a>leetcode7-找链表交点</h1><p>这个题目又没有好好审题，我以为的交点可以是这样的</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210615113259.png" alt="20210615113259"></p><p>没想到交点以后的所有节点应该都是重合的！</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210615113350.png" alt="20210615113350"></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>如果有相交的结点D的话,每条链的头结点先走完自己的链表长度,然后回头走另外的一条链表,那么两结点一定为相交于D点,因为这时每个头结点走的距离是一样的,都是 AD + BD + DC,而他们每次又都是前进1,所以距离相同,速度又相同,固然一定会在相同的时间走到相同的结点上,即D点。</p><ul><li><p>如果不相交 ： 如果不相交的话 假设两个链表长度不相等 一个为A 一个为B ，指针第一次走完A会去走B,另一个走完B再去走A，两个指针走的路程都是A+B。会同时为NULL 跳出循环</p></li><li><p>如果不相交且链表长度相等: 那么一个指针走A,一个指针走B，它俩同时走到NULL，相等，跳出循环</p></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-C"><code class="language-C">struct ListNode *getIntersectionNode(struct ListNode *headA, struct ListNode *headB) &#123;    struct ListNode* A, * B;    A = headA;    B = headB;    while(A!=B)&#123;        A = A == NULL ? headB : A->next;        B = B == NULL ? headA : B->next;    &#125;    return A;&#125;</code></pre><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度 <code>O(N)</code> 最差依次访问一遍 <code>A+B</code> 中的所有节点 <br><br>空间复杂度 <code>O(1)</code> 就用两个指针</p><h1 id="leetcode8-合并有序链表"><a href="#leetcode8-合并有序链表" class="headerlink" title="leetcode8-合并有序链表"></a>leetcode8-合并有序链表</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><pre class=" language-C"><code class="language-C">输入两个递增排序的链表，合并这两个链表并使新链表中的节点仍然是递增排序的。示例1：输入：1->2->4, 1->3->4输出：1->1->2->3->4->4来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</code></pre><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>leetcode的题解</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210615164632.png" alt="20210615164632"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class=" language-C"><code class="language-C">struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2)&#123;    struct ListNode* a, *b,*c,*d;    a = l1;    b = l2;    d = c = (struct ListNode*)malloc(sizeof(struct ListNode));    while(a&&b)&#123;        if(a->val < b->val) &#123;            c->next = a;            a = a->next;            c = c->next;        &#125;        else if(a->val>=b->val)&#123;            c->next = b;            b = b->next;            c = c->next;        &#125;    &#125;    if(a == NULL) c->next = b;    else c->next = a;    return d->next;&#125;</code></pre><h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度 <code>O(M+N)</code> M为l1链表的长度 N为l2链表的长度 <br><br>空间复杂度 O(1)</p>]]></content>
      
      
      <categories>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode5-反向输出链表</title>
      <link href="/2021/06/14/leetcode5-fan-xiang-shu-chu-lian-biao/"/>
      <url>/2021/06/14/leetcode5-fan-xiang-shu-chu-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="反向输出链表"><a href="#反向输出链表" class="headerlink" title="反向输出链表"></a>反向输出链表</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre><code>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。 示例 1：输入：head = [1,3,2]输出：[2,3,1] 限制：0 &lt;= 链表长度 &lt;= 10000</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>第一遍遍历找到一共的个数</li><li>malloc</li><li>倒序赋值</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-C"><code class="language-C">//反序打印链表int* reversePrint(struct ListNode* head, int* returnSize) &#123;    //第一遍遍历获取数目    int num = 0;    struct ListNode* temp = head;    while (temp)    &#123;        num++;        temp = temp->next;    &#125;    int* ret = (int*)malloc(num * sizeof(int));    memset(ret, -1, num * sizeof(int));        temp = head;    int i = 1;    while (temp)    &#123;        ret[num - i] = temp->val;        i++;        temp = temp->next;    &#125;    *returnSize = num;    return ret;&#125;</code></pre><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度 O(n)<br>空间复杂度 O(n)</p><h2 id="优秀思路"><a href="#优秀思路" class="headerlink" title="优秀思路"></a>优秀思路</h2><p>差不多跟我一样</p><pre class=" language-C"><code class="language-C">int* reversePrint(struct ListNode* head, int* returnSize)&#123;    struct ListNode *p = head;    int n = 0;    while(p != NULL) &#123;        p = p->next;        n++;    &#125;    int *arr = (int *)malloc(sizeof(int) * n);    struct ListNode *q = head;    *returnSize = n;    for(int i = n - 1; i >= 0; i--)&#123;        arr[i] = q->val;        q = q->next;    &#125;    return arr;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode6-判断链表中是否存在环</title>
      <link href="/2021/06/14/leetcode6-pan-duan-lian-biao-zhong-shi-fou-cun-zai-huan/"/>
      <url>/2021/06/14/leetcode6-pan-duan-lian-biao-zhong-shi-fou-cun-zai-huan/</url>
      
        <content type="html"><![CDATA[<h1 id="leetcode6-判断链表中是否存在环"><a href="#leetcode6-判断链表中是否存在环" class="headerlink" title="leetcode6-判断链表中是否存在环"></a>leetcode6-判断链表中是否存在环</h1><p>这道题感觉很难嗷！ 但是确实是属于简单题的行列( 我是fw )，全程都在看解析。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h3><p>本方法需要读者对「Floyd 判圈算法」（又称龟兔赛跑算法）有所了解。</p><p>假想「乌龟」和「兔子」在链表上移动，「兔子」跑得快，「乌龟」跑得慢。当「乌龟」和「兔子」从链表上的同一个节点开始移动时，如果该链表中没有环，那么「兔子」将一直处于「乌龟」的前方；如果该链表中有环，那么「兔子」会先于「乌龟」进入环，并且一直在环内移动。等到「乌龟」进入环时，由于「兔子」的速度快，它一定会在某个时刻与乌龟相遇，即套了「乌龟」若干圈。</p><p>作者：LeetCode-Solution<br>链接：<a href="https://leetcode-cn.com/problems/linked-list-cycle/solution/huan-xing-lian-biao-by-leetcode-solution/">https://leetcode-cn.com/problems/linked-list-cycle/solution/huan-xing-lian-biao-by-leetcode-solution/</a><br>来源：力扣（LeetCode）</p><pre class=" language-c"><code class="language-c">bool <span class="token function">hasCycle</span><span class="token punctuation">(</span><span class="token keyword">struct</span> ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> head<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> fast <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>slow <span class="token operator">!=</span> fast<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> fast<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：<code>O(N)</code>，其中 N 是链表中的节点数。</p><ul><li><p>当链表中不存在环时，快指针将先于慢指针到达链表尾部，链表中每个节点至多被访问两次。</p></li><li><p>当链表中存在环时，每一轮移动后，快慢指针的距离将减小一。而初始距离为环的长度，因此至多移动 N 轮。</p></li></ul></li><li><p>空间复杂度：<code>O(1)</code> 我们只使用了两个指针的额外空间。</p></li></ul><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p>用哈希表来存储所有已经访问过的节点。每次我们到达一个节点，如果该节点已经存在于哈希表中，则说明该链表是环形链表，否则就将该节点加入哈希表中。重复这一过程，直到我们遍历完整个链表即可。</p><p>重要的是哈希表的原理<br>知乎的文章： 具体还是你后面去看看相应的源码，会比较方便一些。</p><p><a href="https://zhuanlan.zhihu.com/p/144296454">https://zhuanlan.zhihu.com/p/144296454</a></p><h4 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：<code>O(N)</code>，其中 <code>N</code> 是链表中的节点数。最坏情况下我们需要遍历每个节点一次。</p></li><li><p>空间复杂度：<code>O(N)</code>，其中 <code>N</code> 是链表中的节点数。主要为哈希表的开销，最坏情况下我们需要将每个节点插入到哈希表中一次。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode4-删除链表节点</title>
      <link href="/2021/06/11/leetcode4-shan-chu-lian-biao-jie-dian/"/>
      <url>/2021/06/11/leetcode4-shan-chu-lian-biao-jie-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="leecode4-删除链表节点"><a href="#leecode4-删除链表节点" class="headerlink" title="leecode4-删除链表节点"></a>leecode4-删除链表节点</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>说明：文章中的优秀思路均来自优秀题解的第一个，之所以截图是因为懒。。</p><pre class=" language-C"><code class="language-C">给定单向链表的头指针和一个要删除的节点的值，定义一个函数删除该节点。返回删除后的链表的头节点。注意：此题对比原题有改动示例 1:输入: head = [4,5,1,9], val = 5输出: [4,1,9]解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -> 1 -> 9.示例 2:输入: head = [4,5,1,9], val = 1输出: [4,5,9]解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -> 5 -> 9.来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/shan-chu-lian-biao-de-jie-dian-lcof著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这里借鉴了前面看到优秀思路中的<strong>虚拟节点 virtualNode</strong> ,即在头节点head前再增加一个虚拟节点，可以避免讨论 <strong>tag</strong> 节点是否是头节点的情况。最后统一返回 <strong>virtualNode-&gt;next</strong></p><ul><li>遍历链表找到值相等的节点</li><li>保留节点的前驱节点 <strong>prev</strong></li><li>前驱节点 <strong>prev</strong> 指向删除节点 <strong>tag</strong> 的下一节点</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-C"><code class="language-C">struct ListNode* deleteNode(struct ListNode* head, int val) &#123;    struct ListNode* tag = head, * prev=NULL;    struct ListNode* virtualNode = (ListNode*)malloc(sizeof(ListNode));    virtualNode->next = head;    virtualNode->val = -1;    prev = virtualNode;    while (tag->next)    &#123;        if (tag->val == val) break;        prev = tag;        tag = tag->next;    &#125;    prev->next = tag->next;    return virtualNode->next;&#125;</code></pre><h2 id="优秀思路"><a href="#优秀思路" class="headerlink" title="优秀思路"></a>优秀思路</h2><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>如果理解递归很困难，可以采用一种叫做<strong>坚定信念</strong>的理解方式。即假设<strong>deleteNode返回的值就是对应节点的下一个节点</strong>，那下面这个java版的递归就不难理解了。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210611093444.png" alt="20210611093444"></p>]]></content>
      
      
      <categories>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>py如何根据字符串来创建对应的类</title>
      <link href="/2021/06/11/py-ru-he-gen-ju-zi-fu-chuan-lai-chuang-jian-dui-ying-de-lei/"/>
      <url>/2021/06/11/py-ru-he-gen-ju-zi-fu-chuan-lai-chuang-jian-dui-ying-de-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="py如何根据字符串来创建对应的类"><a href="#py如何根据字符串来创建对应的类" class="headerlink" title="py如何根据字符串来创建对应的类"></a>py如何根据字符串来创建对应的类</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>py的反射原理，简单来说，反射就是能实现动态地调用方法\实例化对象。</p><p>举个例子:<br></p><p>创建一个学生类Student的对象 person1、创建一个老师类Teacher的对象person1</p><pre class=" language-py"><code class="language-py">person1 = Student(name="张三")orperson1 = Teacher(name="张三")</code></pre><p>试想一下，假如，你并不是先前(在写程序之前)就知道这个person1的身份到底是学生还是老师，那你该如何创建这个对象？</p><p>或者说你要 <strong>根据这个人的输入: 职业:老师,姓名:张三</strong> 来动态的创建对象。</p><p>这里就要用到py的反射</p><p>对应到web路由可能更容易理解。详细请看 <a href="https://www.liujiangblog.com/course/python/48">https://www.liujiangblog.com/course/python/48</a></p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>在本次实训的过程中，由于是基线检查，但是对于每个审查条目的规则(存储在数据库)是不一样的。</p><p>关键的是，所用的validator中预制的规则rule无法满足特定的需求。然后，除了使用他文档中的规则意外，我根据他自定义规则的写法，自定义如下三种规则</p><ul><li>AuditRule-判断前后集合是否一致</li><li>AuditRuleInclude-判断前面集合是否是后面集合的子集</li><li>AuditRuleSame-判断两个字符串是否相等。</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">AuditRule</span><span class="token punctuation">(</span>Rule<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    TestCode:        rules = &amp;#123;"age": AuditRule('test,test')&amp;#125;        req = &amp;#123;"age": 'test,test'&amp;#125;        print(validate(req, rules,return_info=True))    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> string<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>        Rule<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>string <span class="token operator">=</span> string        self<span class="token punctuation">.</span>value <span class="token operator">=</span> string<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arg<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> arg <span class="token keyword">is</span> None<span class="token punctuation">:</span>            arg <span class="token operator">=</span> <span class="token string">"Null"</span>            self<span class="token punctuation">.</span>set_error<span class="token punctuation">(</span><span class="token string">"excepted get |"</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>string <span class="token operator">+</span> <span class="token string">"| but get |"</span> <span class="token operator">+</span> arg<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"|"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        exit_value_list <span class="token operator">=</span> arg<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 判断两个集合是否一样  前面是否是后面的子集</span>        self<span class="token punctuation">.</span>set_error<span class="token punctuation">(</span><span class="token string">"excepted get |"</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>string <span class="token operator">+</span> <span class="token string">"| but get |"</span> <span class="token operator">+</span> arg<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"|"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> set<span class="token punctuation">(</span>exit_value_list<span class="token punctuation">)</span> <span class="token operator">==</span> set<span class="token punctuation">(</span>self<span class="token punctuation">.</span>value<span class="token punctuation">)</span></code></pre><p>其实，我所用的validator这个包，就已经利用了反射。因为他就是根据我输入的字符串，去动态地翻译和创建成对应的类。所以我也想实现根据数据库中存储的规则，来动态地创建。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210611161640.png" alt="20210611161640"></p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><h3 id="使用的函数"><a href="#使用的函数" class="headerlink" title="使用的函数"></a>使用的函数</h3><p>我就只用到了<strong>getattr</strong>函数。其对应的文档解释如下:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">getattr</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> name<span class="token punctuation">,</span> default<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># known special case of getattr</span>    <span class="token triple-quoted-string string">"""    getattr(object, name[, default]) -> value        Get a named attribute from an object; getattr(x, 'y') is equivalent to x.y.    When a default argument is given, it is returned when the attribute doesn't    exist; without it, an exception is raised in that case.    """</span>    <span class="token keyword">pass</span></code></pre><h3 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h3><ul><li><p>创建package rules 将自定义的三个类分别以.py的形式放进去</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210611162135.png" alt="20210611162135"></p></li><li><p>在package中创建rules.py的文件，将自定义类，导入。<strong>第一行不要也可以</strong></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210611162237.png" alt="20210611162237"></p></li><li><p>在要使用的文件中，以<strong>from rules import rules as Custom</strong>的形式导入</p></li><li><p>编写相应的代码</p><pre class=" language-py"><code class="language-py">  for item in results:  if item[3].startswith("Audit"):      rules[item[0]] = getattr(Custom, item[3])(item[2])  else:      rules[item[0]] = item[1] + ":" + item[2]</code></pre></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>它对应的原理通过debug我猜测如下:<br>通过 <code>from rules import rules as Custom</code> 的方式其实是已经创建了<code>Custom</code>这个对象，其拥有三个自定义类的属性。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210611162753.png" alt="20210611162753"></p><p>然后通过<code>getattr</code>得到字符串对应的属性(类),并通过后面括号里面的字符串进行实例化。</p>]]></content>
      
      
      <categories>
          
          <category> 反射 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode3-反转链表II</title>
      <link href="/2021/06/10/leetcode3-fan-zhuan-lian-biao-ii/"/>
      <url>/2021/06/10/leetcode3-fan-zhuan-lian-biao-ii/</url>
      
        <content type="html"><![CDATA[<p>目录:</p><ul><li><a href="#%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8ii">反转链表II</a><ul><li><a href="#%E6%8F%8F%E8%BF%B0">描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a><ul><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li><li><a href="#%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90">复杂度分析</a></li></ul></li><li><a href="#%E4%BC%98%E7%A7%80%E6%80%9D%E8%B7%AF">优秀思路</a><ul><li><a href="#%E6%96%B9%E6%B3%951">方法1:</a><ul><li><a href="#%E4%BB%A3%E7%A0%81-1">代码</a></li><li><a href="#%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90">时间复杂度分析</a></li></ul></li><li><a href="#%E6%96%B9%E6%B3%95%E4%BA%8C">方法二</a><ul><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li><li><a href="#%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-1">时间复杂度分析</a></li></ul></li></ul></li></ul></li></ul><h1 id="反转链表II"><a href="#反转链表II" class="headerlink" title="反转链表II"></a>反转链表II</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><pre><code>给你单链表的头指针 head 和两个整数 left 和 right ，其中 left &lt;= right 。请你反转从位置 left 到位置 right 的链表节点，返回 反转后的链表 。 示例 1：输入：head = [1,2,3,4,5], left = 2, right = 4输出：[1,4,3,2,5]示例 2：输入：head = [5], left = 1, right = 1输出：[5] 提示：链表中节点数目为 n1 &lt;= n &lt;= 500-500 &lt;= Node.val &lt;= 5001 &lt;= left &lt;= right &lt;= n</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>左端节点不是起始节点</li></ol><ul><li>找到左端点的前一个节点 <strong>leftpointer_1</strong> + 左端点 <strong>leftpointer</strong></li><li>反转从左端点开始的 <strong>righ-left</strong> 个节点,并保留右端点 <strong>prev</strong>、右端点的下一个节点 <strong>rightpointer_1</strong></li><li>左端节点 <strong>leftpointer</strong> 的next指向右端点的下一个节点 <strong>rightpointer_1</strong></li><li>左端点的前一个节点 <strong>leftpointer_1</strong> 的next指向右端点 </li><li><strong>返回 head 头节点</strong></li></ul><ol start="2"><li>左端节点是起始节点(head)</li></ol><ul><li>左端点的前一个节点 <strong>leftpointer_1</strong> 为 <strong>null</strong></li><li>反转从左端点开始的 <strong>righ-left</strong> 个节点,并保留右端点 <strong>prev</strong>、右端点的下一个节点 <strong>rightpointer_1</strong></li><li>左端节点 <strong>leftpointer</strong> 的next指向右端点的下一个节点 <strong>rightpointer_1</strong></li><li><strong>返回右端节点 <strong>prev</strong></strong></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-C"><code class="language-C">struct ListNode* reverseBetween(struct ListNode* head, int left, int right) &#123;    struct ListNode* leftpointer_1, * rightpointer_1;    leftpointer_1 = rightpointer_1 = head;    int leftmove = left - 2;    int rigthmove = right - left;    int temp = rigthmove;    if (temp == 0 || temp < 0) return head;    if (leftmove == -1) leftpointer_1 = NULL;    else    &#123;        while (leftmove > 0 && leftpointer_1->next)        &#123;            leftpointer_1 = leftpointer_1->next;            leftmove--;        &#125;    &#125;    struct ListNode* prev = leftpointer_1;    struct ListNode* curr, * leftpointer;    if (leftpointer_1)     curr = leftpointer = leftpointer_1->next;    else curr = leftpointer = head;    while (curr && temp >= 0) &#123;        struct ListNode* next = curr->next;        curr->next = prev;        prev = curr;        curr = next;        temp--;        rightpointer_1 = curr;    &#125;    if (leftpointer_1) &#123;        leftpointer_1->next = prev;        leftpointer->next = rightpointer_1;        return head;    &#125;    else &#123;        leftpointer->next = rightpointer_1;        return prev;    &#125;&#125;</code></pre><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度 O(N) 其中 N 是链表总节点数。最坏情况下，需要遍历整个链表。<br>空间复杂度 O(1) 只使用到常数个变量</p><h2 id="优秀思路"><a href="#优秀思路" class="headerlink" title="优秀思路"></a>优秀思路</h2><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1:"></a>方法1:</h3><p>与我们的方法非常类似，但在编码的过程中，采用了虚拟头节点的方式，避免了左端点是否是起始点的分类讨论。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210610143526.png" alt="20210610143526"></p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class=" language-C"><code class="language-C">struct ListNode *reverseBetween(struct ListNode *head, int left, int right) &#123;    // 因为头节点有可能发生变化，使用虚拟头节点可以避免复杂的分类讨论    struct ListNode *dummyNode = malloc(sizeof(struct ListNode));    dummyNode->val = -1;    dummyNode->next = head;    struct ListNode *pre = dummyNode;    // 第 1 步：从虚拟头节点走 left - 1 步，来到 left 节点的前一个节点    // 建议写在 for 循环里，语义清晰    for (int i = 0; i < left - 1; i++) &#123;        pre = pre->next;    &#125;    // 第 2 步：从 pre 再走 right - left + 1 步，来到 right 节点    struct ListNode *rightNode = pre;    for (int i = 0; i < right - left + 1; i++) &#123;        rightNode = rightNode->next;    &#125;    // 第 3 步：切断出一个子链表（截取链表）    struct ListNode *leftNode = pre->next;    struct ListNode *curr = rightNode->next;    // 注意：切断链接    pre->next = NULL;    rightNode->next = NULL;    // 第 4 步：同第 206 题，反转链表的子区间    reverseLinkedList(leftNode);    // 第 5 步：接回到原来的链表中    pre->next = rightNode;    leftNode->next = curr;    return dummyNode->next;&#125;作者：LeetCode-Solution链接：https://leetcode-cn.com/problems/reverse-linked-list-ii/solution/fan-zhuan-lian-biao-ii-by-leetcode-solut-teyq/来源：力扣（LeetCode）</code></pre><h4 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h4><p>时间复杂度 O(N) 其中 N 是链表总节点数。最坏情况下，需要遍历整个链表。<br>空间复杂度 O(1) 只使用到常数个变量</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210610144049.png" alt="20210610144049"></p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><pre class=" language-C"><code class="language-C">struct ListNode *reverseBetween(struct ListNode *head, int left, int right) &#123;    // 因为头节点有可能发生变化，使用虚拟头节点可以避免复杂的分类讨论    struct ListNode *dummyNode = malloc(sizeof(struct ListNode));    dummyNode->val = -1;    dummyNode->next = head;    struct ListNode *pre = dummyNode;    for (int i = 0; i < left - 1; i++) &#123;        pre = pre->next;    &#125;    struct ListNode *cur = pre->next;    struct ListNode *next;    for (int i = 0; i < right - left; i++) &#123;        next = cur->next;        cur->next = next->next;        next->next = pre->next;        pre->next = next;    &#125;    return dummyNode->next;&#125;作者：LeetCode-Solution链接：https://leetcode-cn.com/problems/reverse-linked-list-ii/solution/fan-zhuan-lian-biao-ii-by-leetcode-solut-teyq/来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</code></pre><h4 id="时间复杂度分析-1"><a href="#时间复杂度分析-1" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h4><p>时间复杂度 O(N) 其中 N 是链表总节点数。最坏情况下，需要遍历整个链表。<br>空间复杂度 O(1) 只使用到常数个变量</p>]]></content>
      
      
      <categories>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode2-反转链表</title>
      <link href="/2021/06/08/leetcode2-fan-zhuan-lian-biao/"/>
      <url>/2021/06/08/leetcode2-fan-zhuan-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。</p><pre class=" language-c"><code class="language-c">示例<span class="token punctuation">:</span>输入<span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">-></span><span class="token number">2</span><span class="token operator">-></span><span class="token number">3</span><span class="token operator">-></span><span class="token number">4</span><span class="token operator">-></span><span class="token number">5</span><span class="token operator">-></span><span class="token constant">NULL</span>输出<span class="token punctuation">:</span> <span class="token number">5</span><span class="token operator">-></span><span class="token number">4</span><span class="token operator">-></span><span class="token number">3</span><span class="token operator">-></span><span class="token number">2</span><span class="token operator">-></span><span class="token number">1</span><span class="token operator">-></span><span class="token constant">NULL</span> 限制：<span class="token number">0</span> <span class="token operator">&lt;=</span> 节点个数 <span class="token operator">&lt;=</span> <span class="token number">5000</span>来源：力扣（LeetCode）链接：https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>fan<span class="token operator">-</span>zhuan<span class="token operator">-</span>lian<span class="token operator">-</span>biao<span class="token operator">-</span>lcof</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>链表没有节点</li><li>链表只有一个节点</li><li>链表有两个节点</li><li>链表有三个及三个以上的节点</li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/%E7%94%A8ipad%E6%8A%8A%E6%80%9D%E8%B7%AF%E7%9A%84%E5%9B%BE%E7%94%BB%E5%9C%A8%E8%BF%99.png" alt="用ipad把思路的图画在这"></p><h3 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h3><p>由于只用遍历一遍链 <br><br>时间复杂度为<strong>O(n) n 为链表的长度</strong> <br><br>以上代码，<strong>分配的空间不会随着处理数据量的变化而变化，因此得到空间复杂度为 O空间复杂度为O(1</strong>)</p><h2 id="优秀思路"><a href="#优秀思路" class="headerlink" title="优秀思路"></a>优秀思路</h2><p>这次优秀思路其实跟我思路差不多，但是优秀思路的代码写的要更简洁。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210608172423.png" alt="20210608172423"></p><h2 id="我思路的代码"><a href="#我思路的代码" class="headerlink" title="我思路的代码"></a>我思路的代码</h2><pre class=" language-C"><code class="language-C">struct ListNode* reverseList(struct ListNode* head) &#123;    ListNode* first,*second,*third;        // 0个节点    if (head == NULL) return NULL;    // 1个节点    if (head->next == NULL) return head;    // 2个节点    if (head->next->next == NULL) &#123;        first = head;        second = head->next;        first->next = NULL;        second->next = first;        return second;    &#125;    // 3个以上的节点    first = head;    second = head->next;    third = head->next->next;        while (1) &#123;        second->next = first;        if (third == NULL) break;        first = second;        second = third;        third = third->next;    &#125;    //把第一个节点的next指向null    head->next = NULL;    //返回头节点    return second;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>validator使用</title>
      <link href="/2021/06/08/validator-shi-yong/"/>
      <url>/2021/06/08/validator-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="validator使用"><a href="#validator使用" class="headerlink" title="validator使用"></a>validator使用</h1><p>看清楚使用的是哪个包，去找相应的文档就行。</p><p>我使用的是这个validator包 :<a href="https://github.com/CSenshi/Validator">https://github.com/CSenshi/Validator</a></p><p>网上的教程很多都是 <a href="https://github.com/mansam/validator.py%EF%BC%8C%E6%89%80%E4%BB%A5%E5%9C%A8%E7%9C%8B%E4%BA%86%E6%96%87%E6%A1%A3%E5%92%8C%E6%BA%90%E7%A0%81%E4%B9%8B%E5%90%8E%EF%BC%8C%E6%8A%8A%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86%E4%B8%80%E4%B8%8B%E3%80%82">https://github.com/mansam/validator.py，所以在看了文档和源码之后，把使用方法整理一下。</a></p><p>本来是要整理一下，但是发现人家文档写的很清楚了。</p><p>链接：<a href="https://github.com/CSenshi/Validator">https://github.com/CSenshi/Validator</a></p>]]></content>
      
      
      <categories>
          
          <category> 包使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实训day6-day10</title>
      <link href="/2021/06/07/shi-xun-day6-10/"/>
      <url>/2021/06/07/shi-xun-day6-10/</url>
      
        <content type="html"><![CDATA[<h1 id="实训总结"><a href="#实训总结" class="headerlink" title="实训总结"></a>实训总结</h1><p>总体来说这一周相较于上一周来说没有学到太多东西，最有收获的还是初步地应用了一下反射，还有就是关于编码的简洁性。</p><p>诸如向安全组审核的东西，不过是读文件审核再写回数据库，可以说没有什么难度，只是工作的过程相对来说要繁琐一些，要去跟英文的文档做一个对应，复制粘贴本地安全组中的说明内容等等。</p><h1 id="circular-import"><a href="#circular-import" class="headerlink" title="circular import"></a>circular import</h1><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210607095716.png" alt="20210607095716"></p><h1 id="RFC"><a href="#RFC" class="headerlink" title="RFC"></a>RFC</h1><p>RFC（Request For Comments）意即“请求评论”，包含了关于Internet的几乎所有重要的文字资料</p><h1 id="用户权限分配"><a href="#用户权限分配" class="headerlink" title="用户权限分配"></a>用户权限分配</h1><p>或者直接去微软的网站上面翻译：<br><a href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/dn221963%28v%3dws.11%29">https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/dn221963%28v%3dws.11%29</a></p><h2 id="对应中文"><a href="#对应中文" class="headerlink" title="对应中文"></a>对应中文</h2><table><thead><tr><th>常量值</th><th>组策略</th></tr></thead><tbody><tr><td>SeNetworkLogonRight</td><td>从网络访问此计算机</td></tr><tr><td>SeBackupPrivilege</td><td>备份文件和目录</td></tr><tr><td>SeChangeNotifyPrivilege</td><td>绕过遍历检查</td></tr><tr><td>SeSystemtimePrivilege</td><td>更改系统时间</td></tr><tr><td>SeCreatePagefilePrivilege</td><td>创建一个页面文件</td></tr><tr><td>SeDebugPrivilege</td><td>调试程序</td></tr><tr><td>SeRemoteShutdownPrivilege</td><td>从远程系统强制关机</td></tr><tr><td>SeAuditPrivilege</td><td>管理审核安全日志</td></tr><tr><td>SeIncreaseQuotaPrivilege</td><td>信任计算机和用户帐户可以执行委派</td></tr><tr><td>SeIncreaseBasePriorityPrivilege</td><td>提高计划优先级</td></tr><tr><td>SeLoadDriverPrivilege</td><td>加载和卸载设备驱动程序</td></tr><tr><td>SeBatchLogonRight</td><td>作为批处理作业登录</td></tr><tr><td>SeServiceLogonRight</td><td>拒绝作为服务登录</td></tr><tr><td>SeInteractiveLogonRight</td><td>本地登录</td></tr><tr><td>SeSecurityPrivilege</td><td>管理审核和安全日志</td></tr><tr><td>SeSystemEnvironmentPrivilege</td><td>修改固件环境值</td></tr><tr><td>SeProfileSingleProcessPrivilege</td><td>配置文件单一进程</td></tr><tr><td>SeSystemProfilePrivilege</td><td>配置文件系统性能</td></tr><tr><td>SeAssignPrimaryTokenPrivilege</td><td>创建令牌对象</td></tr><tr><td>SeRestorePrivilege</td><td>还原文件和目录</td></tr><tr><td>SeShutdownPrivilege</td><td>关闭系统</td></tr><tr><td>SeTakeOwnershipPrivilege</td><td>取得文件或其他对象的所有权</td></tr><tr><td>SeUndockPrivilege</td><td>从扩展坞上移除计算机</td></tr><tr><td>SeManageVolumePrivilege</td><td>执行卷维护任务</td></tr><tr><td>SeRemoteInteractiveLogonRight</td><td>允许通过远程桌面服务登录</td></tr><tr><td>SeImpersonatePrivilege</td><td>身份验证后模拟客户端</td></tr><tr><td>SeCreateGlobalPrivilege</td><td>创建全局对象</td></tr><tr><td>SeIncreaseWorkingSetPrivilege</td><td>增加进程工作集</td></tr><tr><td>SeTimeZonePrivilege</td><td>更改时区</td></tr><tr><td>SeCreateSymbolicLinkPrivilege</td><td>创建符号链接</td></tr><tr><td>SeDelegateSessionUserImpersonatePrivilege</td><td>信任计算机和用户帐户可以执行委派</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 国信安实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-1-单链表输出倒数第k个节点</title>
      <link href="/2021/06/06/leetcode1-dan-lian-biao-shu-chu-dao-shu-di-k-ge-jie-dian/"/>
      <url>/2021/06/06/leetcode1-dan-lian-biao-shu-chu-dao-shu-di-k-ge-jie-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="单链表输出倒数第k个节点"><a href="#单链表输出倒数第k个节点" class="headerlink" title="单链表输出倒数第k个节点"></a>单链表输出倒数第k个节点</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>遍历得到链表的节点个数</li><li>再根据节点个数和k得到目标节点的正向序号</li><li>遍历链表找到该节点</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="单链表版"><a href="#单链表版" class="headerlink" title="单链表版"></a>单链表版</h4><pre class=" language-C"><code class="language-C">struct ListNode &#123;    int val;    struct ListNode* next;&#125;;struct ListNode* getKthFromEnd(struct ListNode* head, int k) &#123;    int all = 0;    ListNode* temp = head;    while (temp->next)    &#123;        all++;        temp = temp->next;    &#125;    all = all + 1;//加上最后一个节点    int num = all - k + 1;    if (num < 1) return NULL;    else    &#123;        temp = head;        while (num != 1)        &#123;            temp = temp->next;            num--;        &#125;        return temp;    &#125;&#125;int main()&#123;    ListNode *ahead, *after, *head, *result, *temp;    ahead = (struct ListNode*)malloc(sizeof(ListNode));    ahead->val = 1;    head = ahead;    for (int i = 1; i < 7; i=i+1) &#123;        after = (struct ListNode*)malloc(sizeof(ListNode));        after->val = i + 1;        after->next = NULL;        ahead->next = after;        ahead = after;    &#125;    temp = head;    while (1) &#123;        printf_s("%d->", temp->val);        if (temp->next==NULL) &#123;            printf_s("\n%s", "跳出循环");            break;        &#125;        temp = temp->next;    &#125;        result = getKthFromEnd(head, 1);    if (result->next) &#123;        printf_s("\n%d->%d", result->val, result->next->val);//这里有可能result没有next节点    &#125;    else         printf_s("\n%d", result->val);&#125;</code></pre><h4 id="双链表版"><a href="#双链表版" class="headerlink" title="双链表版"></a>双链表版</h4><pre class=" language-C"><code class="language-C">//双向链表版struct ListNode &#123;    int val;    struct ListNode* next;//前向指针    struct ListNode* previous;//后向指针&#125;;struct ListNode* getKthFromEnd(struct ListNode* head, int k) &#123;    ListNode* temp = head;    while (temp->next)    &#123;        temp = temp->next;    &#125;    if (k < 1) return NULL;    else    &#123;        while (k != 1)        &#123;            temp = temp->previous;            k--;        &#125;        return temp;    &#125;&#125;int main()&#123;    ListNode* ahead, * after, * head, * result, * temp;    ahead = (struct ListNode*)malloc(sizeof(ListNode));    ahead->val = 1;    ahead->previous = NULL;    head = ahead;    //temp = ahead;    for (int i = 1; i < 7; i = i + 1) &#123;        after = (struct ListNode*)malloc(sizeof(ListNode));        after->val = i + 1;        after->next = NULL;        after->previous = ahead;                ahead->next = after;        ahead = after;    &#125;    temp = head;    while (1) &#123;        printf_s("%d->", temp->val);        if (temp->next == NULL) &#123;            printf_s("\n%s", "跳出循环");            break;        &#125;        temp = temp->next;    &#125;    result = getKthFromEnd(head, 2);    if (result->next) &#123;        printf_s("\n%d->%d", result->val, result->next->val);//这里有可能result没有next节点    &#125;    else        printf_s("\n%d", result->val);&#125;</code></pre><h2 id="优秀解题思路"><a href="#优秀解题思路" class="headerlink" title="优秀解题思路"></a>优秀解题思路</h2><ul><li>初始化两个指针a,b 指向头节点</li><li>b指针先往前走k个节点</li><li>a,b指针同时向前走，直到b为空指针</li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class=" language-C"><code class="language-C">struct ListNode* getKthFromEnd(struct ListNode* head, int k)&#123;    struct ListNode *prev, *cur;    prev = head;    cur = head;    for(k=k-1;k>0;k--)&#123;        cur = cur->next;    &#125;    while(cur->next != NULL)&#123;        prev = prev->next;        cur = cur->next;    &#125;    return prev;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实训day5</title>
      <link href="/2021/06/04/shi-xun-day5/"/>
      <url>/2021/06/04/shi-xun-day5/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring入门4"><a href="#Spring入门4" class="headerlink" title="Spring入门4"></a>Spring入门4</h1><p>项目代码:<a href="https://gitee.com/laobameishijia/guoxinan-practical-training">https://gitee.com/laobameishijia/guoxinan-practical-training</a></p><ul><li><a href="#spring%E5%85%A5%E9%97%A84">Spring入门4</a><ul><li><a href="#%E7%AE%80%E5%8D%95%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%E5%AE%9E%E7%8E%B0">简单登录页面实现</a><ul><li><a href="#%E9%A2%84%E6%9C%9F%E6%95%88%E6%9E%9C">预期效果</a></li><li><a href="#%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF">实现思路</a></li><li><a href="#%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B">实现过程</a><ul><li><a href="#%E5%88%9B%E5%BB%BA%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3%E5%B9%B6%E5%AE%9E%E7%8E%B0">创建服务接口，并实现</a></li><li><a href="#%E5%86%99%E5%A5%BDmapper%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2">写好mapper,进行数据查询</a></li><li><a href="#%E6%8E%A7%E5%88%B6%E5%99%A8%E6%B3%A8%E5%86%8C%E6%9C%8D%E5%8A%A1%E4%BC%A0%E5%8F%82">控制器注册服务，传参</a></li></ul></li></ul></li><li><a href="#springboot%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C">Springboot数据校验</a><ul><li><a href="#%E6%90%9E%E6%B8%85%E6%A5%9A%E4%BB%80%E4%B9%88%E6%98%AF%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B">搞清楚什么是面向切面编程</a></li><li><a href="#%E5%AE%9E%E4%BD%93%E7%B1%BB----%E5%86%99%E4%B8%8A%E7%9B%B8%E5%85%B3%E6%B3%A8%E8%A7%A3">实体类—-写上相关注解</a></li><li><a href="#%E6%A0%A1%E9%AA%8C%E7%B1%BB----%E6%A3%80%E9%AA%8C%E6%95%B0%E6%8D%AE%E6%8A%9B%E5%87%BA%E5%BC%82%E5%B8%B8%E7%94%B1%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%B1%BB%E8%BF%9B%E8%A1%8C%E5%A4%84%E7%90%86">校验类—-检验数据、抛出异常,由异常处理类进行处理</a></li><li><a href="#%E6%8E%A7%E5%88%B6%E5%99%A8----%E5%B0%86%E5%89%8D%E7%AB%AF%E4%BC%A0%E5%85%A5%E6%95%B0%E6%8D%AE%E4%BC%A0%E7%BB%99%E6%A0%A1%E9%AA%8C%E7%B1%BB%E8%BF%9B%E8%A1%8C%E6%A0%A1%E9%AA%8C">控制器—-将前端传入数据传给校验类进行校验</a></li></ul></li><li><a href="#springboot%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8">Springboot全局异常</a><ul><li><a href="#%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%B1%BB">异常处理类</a></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8--%E4%BB%A5%E7%99%BB%E5%BD%95%E5%BC%82%E5%B8%B8%E4%B8%BA%E4%BE%8B">自定义异常–以登录异常为例</a></li><li><a href="#%E5%9C%A8%E6%9C%8D%E5%8A%A1%E4%B8%AD%E6%8A%9B%E5%87%BA%E5%BC%82%E5%B8%B8">在服务中抛出异常</a></li></ul></li><li><a href="#spring%E6%8B%A6%E6%88%AA%E5%99%A8">Spring拦截器</a><ul><li><a href="#%E7%99%BB%E5%BD%95%E6%8B%A6%E6%88%AA%E5%99%A8">登录拦截器</a></li><li><a href="#%E6%B3%A8%E5%86%8C%E6%8B%A6%E6%88%AA%E5%99%A8">注册拦截器</a></li></ul></li></ul></li></ul><h2 id="简单登录页面实现"><a href="#简单登录页面实现" class="headerlink" title="简单登录页面实现"></a>简单登录页面实现</h2><h3 id="预期效果"><a href="#预期效果" class="headerlink" title="预期效果"></a>预期效果</h3><ul><li>登录成功，进入主页—登录成功</li><li>登录失败：告诉用户具体错误–用户不存在、密码不正确、登录失败</li><li>退出登录，提示用户是否退出，点击是删除session退出登录。</li></ul><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><ul><li>处理持久层—(操作数据库的Mapper)的代码：查询—findByName(String adminName) 找不到—提示用户不存在</li><li>处理登录业务逻辑(服务Service)—-实现登录失败、密码不正确几种情况的逻辑。</li><li>控制层—-路由控制、结果返回</li><li>表现层(视图、网页)—-ajax异步请求、Session保留会话</li></ul><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210605102000.png" alt="20210605102000"></p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="创建服务接口，并实现"><a href="#创建服务接口，并实现" class="headerlink" title="创建服务接口，并实现"></a>创建服务接口，并实现</h4><p>接口：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LoginService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 用户登录     * @param admin     * @return     */</span>    JsonData <span class="token function">login</span> <span class="token punctuation">(</span>Admin admin<span class="token punctuation">,</span> HttpSession session<span class="token punctuation">)</span><span class="token punctuation">;</span>    JsonData <span class="token function">exit</span> <span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>实现：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">LoginService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> AdminMapper mapper<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span>  JsonData <span class="token function">login</span><span class="token punctuation">(</span>Admin admin<span class="token punctuation">,</span> HttpSession session<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//数据校验</span>                <span class="token comment" spellcheck="true">//从数据库中查数据</span>        Admin dbAdmin <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">findoneByName</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span><span class="token function">getAdminName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dbAdmin <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//说明用户不存在</span><span class="token comment" spellcheck="true">//            return new JsonData(1001,"用户不存在");</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LoginException</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">"用户不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//判断状态</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dbAdmin<span class="token punctuation">.</span><span class="token function">getAdminStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>dbAdmin<span class="token punctuation">.</span><span class="token function">getAdminStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            return new JsonData(1001,"用户被锁定,联系管理员");</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LoginException</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token string">"用户被锁定,联系管理员"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//判断密码正确</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dbAdmin<span class="token punctuation">.</span><span class="token function">getAdminPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span><span class="token function">getAdminPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            return new JsonData(1001,"密码错误");</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LoginException</span><span class="token punctuation">(</span><span class="token number">1003</span><span class="token punctuation">,</span><span class="token string">"密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//存到session</span>        session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"adminName"</span><span class="token punctuation">,</span>admin<span class="token punctuation">.</span><span class="token function">getAdminName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//更新用户最后登录时间</span>        dbAdmin<span class="token punctuation">.</span><span class="token function">setLastLoginTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Timestamp</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//dbAdmin没有问题</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dbAdmin<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>dbAdmin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonData</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"登录正常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span>  JsonData <span class="token function">exit</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonData</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"退出正常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="写好mapper-进行数据查询"><a href="#写好mapper-进行数据查询" class="headerlink" title="写好mapper,进行数据查询"></a>写好mapper,进行数据查询</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 主要用来操作数据库，增删改查 */</span><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AdminMapper</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 查询所有数据     */</span>    List<span class="token operator">&lt;</span>Admin<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Admin<span class="token operator">></span> <span class="token function">fineByParam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"param"</span><span class="token punctuation">)</span> MyParam param<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     *增加     * @param admin     */</span>    <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span> Admin admin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 真删除     */</span>    <span class="token keyword">void</span> <span class="token function">deleteTrue</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"delete"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 更新     * @param admin     */</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span> Admin admin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 软删除     * @param id     */</span>    <span class="token keyword">void</span> <span class="token function">deleteFalse</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 查询单条数据     * @param id     */</span>    Admin <span class="token function">findone</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 通过用户名查询对应的用户     * @param name     * @return     */</span>    Admin <span class="token function">findoneByName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 批量插入     */</span>    <span class="token keyword">int</span> <span class="token function">insertBatch</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"adminList"</span><span class="token punctuation">)</span> List<span class="token operator">&lt;</span>Admin<span class="token operator">></span> adminList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 批量删除     * @param adminList     * @return     */</span>    <span class="token keyword">int</span> <span class="token function">deleteBatch</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"adminList"</span><span class="token punctuation">)</span> List<span class="token operator">&lt;</span>Admin<span class="token operator">></span> adminList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="控制器注册服务，传参"><a href="#控制器注册服务，传参" class="headerlink" title="控制器注册服务，传参"></a>控制器注册服务，传参</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginController</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> LoginServiceImpl loginService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/page"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"login"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/verify"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span><span class="token comment" spellcheck="true">//不需要进行页面跳转而是直接返回数据。</span>    <span class="token comment" spellcheck="true">//添加了@ResponseBody注解的方法，返回值会通过HTTP响应主体直接发送给浏览器。</span>    <span class="token keyword">public</span> JsonData <span class="token function">verifyLogin</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span> Admin admin<span class="token punctuation">,</span> BindingResult result<span class="token punctuation">,</span> HttpSession session<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//数据校验</span>        <span class="token comment" spellcheck="true">//获取所有错误</span>        ValidatorUtil<span class="token punctuation">.</span><span class="token function">showMsg</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> loginService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>admin<span class="token punctuation">,</span> session<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/exit"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span><span class="token comment" spellcheck="true">//不需要进行页面跳转而是直接返回数据。</span>    <span class="token comment" spellcheck="true">//添加了@ResponseBody注解的方法，返回值会通过HTTP响应主体直接发送给浏览器。</span>    <span class="token keyword">public</span> JsonData <span class="token function">exit</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> loginService<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="Springboot数据校验"><a href="#Springboot数据校验" class="headerlink" title="Springboot数据校验"></a>Springboot数据校验</h2><h3 id="搞清楚什么是面向切面编程"><a href="#搞清楚什么是面向切面编程" class="headerlink" title="搞清楚什么是面向切面编程"></a>搞清楚什么是面向切面编程</h3><p>AOP技术利用一种称为“横切”的技术，剖解开封装对象的内部，将影响多个类的公共行为封装到一个可重用的模块中，并将其命名为Aspect切面。所谓的切面，简单来说就是与业务无关，却为业务模块所共同调用的逻辑，将其封装起来便于减少系统的重复代码，降低模块的耦合度，有利用未来的可操作性和可维护性。</p><p>例如：银行系统的取款流程和查询余额的流程</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210605095214.png" alt="20210605095214"></p><p>hibernate validator 加几个注释，由后端检验<br>一般来说，Web应用都是前后端都会对数据进行校验，前端一般是用js正则进行校验，后端主要是对传入接口的数据进行校验，不能对一些无效的数据产生返回。</p><h3 id="实体类—-写上相关注解"><a href="#实体类—-写上相关注解" class="headerlink" title="实体类—-写上相关注解"></a>实体类—-写上相关注解</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Admin</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>  <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"用户名不能为空！"</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> String adminName<span class="token punctuation">;</span>  <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"密码不能为空"</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> String adminPwd<span class="token punctuation">;</span>  <span class="token keyword">private</span> Long adminPhone<span class="token punctuation">;</span>  <span class="token keyword">private</span> Timestamp lastLoginTime<span class="token punctuation">;</span>  <span class="token keyword">private</span> Timestamp createTime<span class="token punctuation">;</span>  <span class="token keyword">private</span> Timestamp updateTime<span class="token punctuation">;</span>  <span class="token keyword">private</span> Integer adminStatus<span class="token punctuation">;</span>  <span class="token keyword">private</span> Integer isDeleted<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="校验类—-检验数据、抛出异常-由异常处理类进行处理"><a href="#校验类—-检验数据、抛出异常-由异常处理类进行处理" class="headerlink" title="校验类—-检验数据、抛出异常,由异常处理类进行处理"></a>校验类—-检验数据、抛出异常,由异常处理类进行处理</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidatorUtil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 展示错误信息     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showMsg</span><span class="token punctuation">(</span>BindingResult result<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>ObjectError<span class="token operator">></span> allErrors <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getAllErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ObjectError error <span class="token operator">:</span> allErrors<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span>  <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="控制器—-将前端传入数据传给校验类进行校验"><a href="#控制器—-将前端传入数据传给校验类进行校验" class="headerlink" title="控制器—-将前端传入数据传给校验类进行校验"></a>控制器—-将前端传入数据传给校验类进行校验</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidatorUtil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 展示错误信息     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showMsg</span><span class="token punctuation">(</span>BindingResult result<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>ObjectError<span class="token operator">></span> allErrors <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getAllErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ObjectError error <span class="token operator">:</span> allErrors<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span>  <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="Springboot全局异常"><a href="#Springboot全局异常" class="headerlink" title="Springboot全局异常"></a>Springboot全局异常</h2><p>着重去理解异常类抛出和处理的顺序。抛出了哪个是由哪个类处理，往调用者抛出????</p><p>SpringBoot中有一个<code>ControllerAdvice</code>的注解，使用该注解表示开启了全局异常的捕获，我们只需在自定义一个方法使用<code>ExceptionHandler</code>注解然后定义捕获异常的类型即可对这些捕获的异常进行统一的处理。非常方便后续异常的分类处理以及代码维护</p><h3 id="异常处理类"><a href="#异常处理类" class="headerlink" title="异常处理类"></a>异常处理类</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyExceptionAdvice</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**     * 专门用于处理登录异常     * @param e     * @return     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>LoginException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> JsonData <span class="token function">loginExceptionHandler</span><span class="token punctuation">(</span>LoginException e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonData</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> JsonData  <span class="token function">exceptionHandler</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//记录异常日志</span>        <span class="token comment" spellcheck="true">//异常日志对于系统非常重要</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonData</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="自定义异常–以登录异常为例"><a href="#自定义异常–以登录异常为例" class="headerlink" title="自定义异常–以登录异常为例"></a>自定义异常–以登录异常为例</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer code<span class="token punctuation">;</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">LoginException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">LoginException</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Integer <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCode</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMsg</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="在服务中抛出异常"><a href="#在服务中抛出异常" class="headerlink" title="在服务中抛出异常"></a>在服务中抛出异常</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">LoginService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> AdminMapper mapper<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span>  JsonData <span class="token function">login</span><span class="token punctuation">(</span>Admin admin<span class="token punctuation">,</span> HttpSession session<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//数据校验</span>                <span class="token comment" spellcheck="true">//从数据库中查数据</span>        Admin dbAdmin <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">findoneByName</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span><span class="token function">getAdminName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dbAdmin <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//说明用户不存在</span><span class="token comment" spellcheck="true">//            return new JsonData(1001,"用户不存在");</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LoginException</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">"用户不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//判断状态</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dbAdmin<span class="token punctuation">.</span><span class="token function">getAdminStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>dbAdmin<span class="token punctuation">.</span><span class="token function">getAdminStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            return new JsonData(1001,"用户被锁定,联系管理员");</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LoginException</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token string">"用户被锁定,联系管理员"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//判断密码正确</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dbAdmin<span class="token punctuation">.</span><span class="token function">getAdminPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span><span class="token function">getAdminPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            return new JsonData(1001,"密码错误");</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LoginException</span><span class="token punctuation">(</span><span class="token number">1003</span><span class="token punctuation">,</span><span class="token string">"密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//存到session</span>        session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"adminName"</span><span class="token punctuation">,</span>admin<span class="token punctuation">.</span><span class="token function">getAdminName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//更新用户最后登录时间</span>        dbAdmin<span class="token punctuation">.</span><span class="token function">setLastLoginTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Timestamp</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//dbAdmin没有问题</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dbAdmin<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>dbAdmin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonData</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"登录正常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span>  JsonData <span class="token function">exit</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonData</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"退出正常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="Spring拦截器"><a href="#Spring拦截器" class="headerlink" title="Spring拦截器"></a>Spring拦截器</h2><p>应用的例子：在用户没有登录的时候，无法进入系统中的其他页面。</p><p>原理：<br>对每一个请求进行审查，如果满足要求，则放行；不满足要求，重定向到其他页面。<br><strong>需要注意的是，要严格审查逻辑，放行登录页面和静态资源，不要产生无限循环的情况。</strong></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210605103735.png" alt="20210605103735"></p><h3 id="登录拦截器"><a href="#登录拦截器" class="headerlink" title="登录拦截器"></a>登录拦截器</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 登录拦截器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 前置方法     * @param request     * @param response     * @param handler     * @return     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断是否登录</span>        <span class="token comment" spellcheck="true">//判断session</span>        <span class="token comment" spellcheck="true">//没有登录重定向到登录页面、登录了，定向到index页面</span>        <span class="token comment" spellcheck="true">//先去获取session对象</span>        HttpSession session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取登录的标记</span>        String adminName <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"adminName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断session的值是否为null</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>adminName <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果没有登录，这里就产生了循环，因为默认是拦截所有请求，所以就变成了无限次的重定向，</span>            <span class="token comment" spellcheck="true">//浏览器出现了too many redirect</span>            response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"/login/page"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false拦截、true放行</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 后置方法     * @param request     * @param response     * @param handler     * @param modelAndView     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="注册拦截器"><a href="#注册拦截器" class="headerlink" title="注册拦截器"></a>注册拦截器</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SystemConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 专门用来注册拦截器的     * @param registry     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoginInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//拦截所有的请求</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//放行方法</span>                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/login/**"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//放行css</span>                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/static/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 国信安实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实训day4</title>
      <link href="/2021/06/03/shi-xun-day4/"/>
      <url>/2021/06/03/shi-xun-day4/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#spring%E5%85%A5%E9%97%A83">Spring入门3</a><ul><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF-mybatis">什么是 MyBatis</a><ul><li><a href="#%E5%8E%9F%E7%90%86%E5%9B%BE">原理图</a></li><li><a href="#mtbatis%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2">MtBatis进行数据查询</a></li></ul></li><li><a href="#springboot%E6%9F%A5%E6%89%BE%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E7%9A%84%E9%A1%BA%E5%BA%8F">SpringBoot查找静态资源的顺序</a></li><li><a href="#mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84%E5%AD%97%E6%AE%B5%E7%B1%BB%E5%9E%8Bvarchar%E5%92%8Cchar%E7%9A%84%E4%B8%BB%E8%A6%81%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%E5%93%AA%E7%A7%8D%E5%AD%97%E6%AE%B5%E7%9A%84%E6%9F%A5%E6%89%BE%E6%95%88%E7%8E%87%E8%A6%81%E9%AB%98%E4%B8%BA%E4%BB%80%E4%B9%88">MySQL数据库中的字段类型varchar和char的主要区别是什么？哪种字段的查找效率要高，为什么</a></li></ul></li></ul><h1 id="Spring入门3"><a href="#Spring入门3" class="headerlink" title="Spring入门3"></a>Spring入门3</h1><p>Java体系操作数据库的框架：</p><ul><li>全ORM: Hibernate，JPA 完全隔离sql语句，不写sql即可实现相应的数据库操作。相对半ORM来说执行速度会慢一点。</li><li>半ORM：Mybatis 隔离sql和java语句，java和 sql是分开的。更适合web项目的开发</li></ul><h2 id="什么是-MyBatis"><a href="#什么是-MyBatis" class="headerlink" title="什么是 MyBatis"></a>什么是 MyBatis</h2><p>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以对配置和原生Map使用简单的 XML 或注解，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。</p><h3 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210603114409.png" alt="20210603114409"></p><h3 id="MtBatis进行数据查询"><a href="#MtBatis进行数据查询" class="headerlink" title="MtBatis进行数据查询"></a>MtBatis进行数据查询</h3><ul><li>导入依赖 maven包</li><li>配置数据源 确定数据库的类型、账号、密码</li><li>Mybatis相关文件的创建</li></ul><p>1.创建实体类<br>数据库中的表 — 类<br>数据库表中的字段  — 类属性<br>数据            – 对象<br>2.创建接口 AdminMapper<br>3.创建对应的映射文件 Xml<br>4.配置mybatis 指定映射文件的位置、打印sql语句等<br>5.扫描接口  在启动类上面扫描<br>6.单元测试 去test目录下的Tests进行</p><h2 id="SpringBoot查找静态资源的顺序"><a href="#SpringBoot查找静态资源的顺序" class="headerlink" title="SpringBoot查找静态资源的顺序"></a>SpringBoot查找静态资源的顺序</h2><p>先从resources &gt; static &gt; public<br>如果在这几个文件夹中任意一个文件中找到静态资源，就不会再去其他的文件夹查找。都没有，就会直接抛出404.</p><h2 id="MySQL数据库中的字段类型varchar和char的主要区别是什么？哪种字段的查找效率要高，为什么"><a href="#MySQL数据库中的字段类型varchar和char的主要区别是什么？哪种字段的查找效率要高，为什么" class="headerlink" title="MySQL数据库中的字段类型varchar和char的主要区别是什么？哪种字段的查找效率要高，为什么"></a>MySQL数据库中的字段类型varchar和char的主要区别是什么？哪种字段的查找效率要高，为什么</h2><p><strong>区别一，定长和变长</strong><br>char 表示定长，长度固定，varchar表示变长，即长度可变，当所插入的字符串超出它们的长度时，视情况来处理，如果是严格模式，则会拒绝插入并提示错误信息，如果是宽松模式，则会截取然后插入。如果插入的字符串长度小于定义长度时，则会以不同的方式来处理，如char（10），表示存储的是10个字符，无论你插入的是多少，都是10个，如果少于10个，则用空格填满。而varchar（10），小于10个的话，则插入多少个字符就存多少个。varchar怎么知道所存储字符串的长度呢？实际上，对于varchar 字段来说，需要使用一个（如果字符串长度小于255）或两个字节（长度大于255）来存储字符串的长度。<br><strong>区别之二</strong><br>存储的容量不同对char来说，最多能存放的字符个数 255，和编码无关。而varchar呢，最多能存放 65532 个字符。VARCHAR的最大有效长度由最大行大小和使用的字符集确定。整体最大长度是65,532 字节，最大有效长度是 65532 字节，在varchar存字符串的时候，第一个字节是空的，不存任何的数据，然后还需要两个字节来存放字符串的长度。所以有效长度就是 65535 - 1 - 2= 65532</p>]]></content>
      
      
      <categories>
          
          <category> 国信安实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实训day3</title>
      <link href="/2021/06/02/shi-xun-day3/"/>
      <url>/2021/06/02/shi-xun-day3/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#spring%E5%85%A5%E9%97%A82">Spring入门2</a><ul><li><a href="#mvc%E6%A8%A1%E5%BC%8Fmodeviewcontroller">MVC模式(mode\view\controller)</a><ul><li><a href="#mvc%E5%8E%9F%E7%90%86%E5%9B%BE">MVC原理图</a></li></ul></li><li><a href="#springmvc%E6%98%AF%E4%BB%80%E4%B9%88">springMVC是什么</a><ul><li><a href="#%E5%8E%9F%E7%90%86%E5%9B%BE">原理图</a></li></ul></li><li><a href="#spring-thymeleaf">spring thymeleaf</a><ul><li><a href="#%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB">动静分离</a></li></ul></li><li><a href="#spring%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91">Spring接口开发</a><ul><li><a href="#%E7%B1%BB%E4%B8%8A%E7%9A%84%E6%B3%A8%E8%A7%A3">类上的注解</a></li><li><a href="#%E6%96%B9%E6%B3%95%E4%B8%8A%E7%9A%84%E6%B3%A8%E8%A7%A3">方法上的注解</a></li><li><a href="#%E5%8F%82%E6%95%B0%E6%B3%A8%E8%A7%A3">参数注解</a></li></ul></li></ul></li></ul><h1 id="Spring入门2"><a href="#Spring入门2" class="headerlink" title="Spring入门2"></a>Spring入门2</h1><h2 id="MVC模式-mode-view-controller"><a href="#MVC模式-mode-view-controller" class="headerlink" title="MVC模式(mode\view\controller)"></a>MVC模式(mode\view\controller)</h2><p>详见博客 <a href="https://www.cnblogs.com/xiaoxi/p/6164383.html">https://www.cnblogs.com/xiaoxi/p/6164383.html</a></p><h3 id="MVC原理图"><a href="#MVC原理图" class="headerlink" title="MVC原理图"></a>MVC原理图</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210602172050.png" alt="20210602172050"></p><p>M-Model 模型（完成业务逻辑：有javaBean构成，service+dao+entity）</p><p>V-View 视图（做界面的展示  jsp，html……）</p><p>C-Controller 控制器（接收请求—&gt;调用模型—&gt;根据结果派发页面）</p><h2 id="springMVC是什么"><a href="#springMVC是什么" class="headerlink" title="springMVC是什么"></a>springMVC是什么</h2><p>　　springMVC是一个MVC的开源框架，springMVC=struts2+spring，springMVC就相当于是Struts2加上sring的整合，但是这里有一个疑惑就是，springMVC和spring是什么样的关系呢？这个在百度百科上有一个很好的解释：意思是说，springMVC是spring的一个后续产品，其实就是spring在原有基础上，又提供了web应用的MVC模块，可以简单的把springMVC理解为是spring的一个模块（类似AOP，IOC这样的模块），网络上经常会说springMVC和spring无缝集成，其实springMVC就是spring的一个子模块，所以根本不需要同spring进行整合。</p><h3 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210602172227.png" alt="20210602172227"></p><p>第一步:用户发起请求到前端控制器（DispatcherServlet）</p><p>第二步：前端控制器请求处理器映射器（HandlerMappering）去查找处理器（Handle）：通过xml配置或者注解进行查找</p><p>第三步：找到以后处理器映射器（HandlerMappering）像前端控制器返回执行链（HandlerExecutionChain）</p><p>第四步：前端控制器（DispatcherServlet）调用处理器适配器（HandlerAdapter）去执行处理器（Handler）</p><p>第五步：处理器适配器去执行Handler</p><p>第六步：Handler执行完给处理器适配器返回ModelAndView</p><p>第七步：处理器适配器向前端控制器返回ModelAndView</p><p>第八步：前端控制器请求视图解析器（ViewResolver）去进行视图解析</p><p>第九步：视图解析器像前端控制器返回View</p><p>第十步：前端控制器对视图进行渲染</p><p>第十一步：前端控制器向用户响应结果</p><h2 id="spring-thymeleaf"><a href="#spring-thymeleaf" class="headerlink" title="spring thymeleaf"></a>spring thymeleaf</h2><p>详见 <a href="https://developer.aliyun.com/article/769977">https://developer.aliyun.com/article/769977</a></p><p>模板引擎在web领域的主要作用：让网站实现界面和数据分离，这样大大提高了开发效率，让代码重用更加容易。</p><h3 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h3><p>对于传统jsp或者其他模板来说，没有一个模板引擎的后缀为.html，就拿jsp来说jsp的后缀为.jsp,它的本质就是将一个html文件修改后缀为.jsp，然后在这个文件中增加自己的语法、标签然后执行时候通过后台处理这个文件最终返回一个html页面。</p><p>浏览器无法直接识别.jsp文件，需要借助网络(服务端)才能进行访问；而Thymeleaf用html做模板可以直接在浏览器中打开。开发者充分考虑html页面特性，将Thymeleaf的语法通过html的标签属性来定义完成，这些标签属性不会影响html页面的完整性和显示。如果通过后台服务端访问页面服务端会寻找这些标签将服务端对应的数据替换到相应位置实现动态页面！大体区别可以参照下图</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210602173047.png" alt="20210602173047"></p><p>上图的意思就是如果直接打开这个html那么浏览器会对th等标签忽视而显示原始的内容。如果通过服务端访问那么服务端将先寻找th标签将服务端储存的数据替换到对应位置。具体效果可以参照下图,下图即为一个动静结合的实例。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210602173204.png" alt="20210602173204"></p><h2 id="Spring接口开发"><a href="#Spring接口开发" class="headerlink" title="Spring接口开发"></a>Spring接口开发</h2><p>做如下区分的目的：方便后续代码的扩展和维护</p><h3 id="类上的注解"><a href="#类上的注解" class="headerlink" title="类上的注解"></a>类上的注解</h3><p>Stererotype.Component标记Spring中普通组件<br>Stererotype.Controller 控制器<br>Stererotype.Service服务层对象、处理业务逻辑<br>Stererotype. Repository持久层对象、操作数据库<br>Web.bin.annotation.RestController web控制器，返回json数据</p><h3 id="方法上的注解"><a href="#方法上的注解" class="headerlink" title="方法上的注解"></a>方法上的注解</h3><p>@RequsetMapping 路由控制返回数据<br>@GetMapping get请求获取用户数据<br>@PostMapping 获取数据<br>@PutMapping 更新数据<br>@DeleteMapping 删除数据</p><h3 id="参数注解"><a href="#参数注解" class="headerlink" title="参数注解"></a>参数注解</h3><p>@RequestParam required参数是否必传、name别名(前端看到的)、defaultValue:默认值 (这个name很奇怪，不知道怎么用的)</p>]]></content>
      
      
      <categories>
          
          <category> 国信安实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/06/01/hello-world/"/>
      <url>/2021/06/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>实训day1-day2</title>
      <link href="/2021/06/01/shi-xun-day1-day2/"/>
      <url>/2021/06/01/shi-xun-day1-day2/</url>
      
        <content type="html"><![CDATA[<h1 id="实训day1-day2"><a href="#实训day1-day2" class="headerlink" title="实训day1-day2"></a>实训day1-day2</h1><p>目录:</p><ul><li><a href="#%E5%AE%9E%E8%AE%ADday1-day2">实训day1-day2</a><ul><li><a href="#git%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8">git工具的使用</a><ul><li><a href="#%E5%85%B3%E4%BA%8Egit%E7%9A%84%E5%8E%9F%E7%90%86">关于git的原理</a></li><li><a href="#git-%E5%B7%A5%E4%BD%9C%E6%B5%81">git 工作流</a></li><li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8push%E4%B9%8B%E5%89%8D%E9%9C%80%E8%A6%81%E8%BF%9B%E8%A1%8Cpull">为什么在<code>push</code>之前需要进行<code>pull</code></a></li><li><a href="#git%E5%A4%84%E7%90%86%E5%86%B2%E7%AA%81">git处理冲突</a></li></ul></li><li><a href="#spring%E9%A1%B9%E7%9B%AE%E5%85%A5%E9%97%A8">spring项目入门</a><ul><li><a href="#java%E5%8F%8D%E5%B0%84">java反射</a></li><li><a href="#%E6%80%9D%E8%80%83">思考</a><ul><li><a href="#spring-ioc">Spring IOC</a></li><li><a href="#spring-%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5di">Spring 依赖注入DI</a></li></ul></li></ul></li></ul></li></ul><h2 id="git工具的使用"><a href="#git工具的使用" class="headerlink" title="git工具的使用"></a>git工具的使用</h2><h3 id="关于git的原理"><a href="#关于git的原理" class="headerlink" title="关于git的原理"></a>关于git的原理</h3><p>找到了一篇博客对于git的原理以及存储讲解的非常清楚</p><p><a href="https://zhaohuabing.com/post/2019-01-21-git/">https://zhaohuabing.com/post/2019-01-21-git/</a></p><h3 id="git-工作流"><a href="#git-工作流" class="headerlink" title="git 工作流"></a>git 工作流</h3><p>你的本地仓库由 git 维护的三棵“树”组成。第一个是你的 <code>工作目录</code>，它持有实际文件；第二个是 <code>缓存区（Index）</code>，它像个缓存区域，临时保存你的改动；最后是 <code>HEAD</code>，指向你最近一次提交后的结果。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210601113100.png" alt="20210601113100"></p><h3 id="为什么在push之前需要进行pull"><a href="#为什么在push之前需要进行pull" class="headerlink" title="为什么在push之前需要进行pull"></a>为什么在<code>push</code>之前需要进行<code>pull</code></h3><p>如果项目只有一个人，那无所谓。但是一般情况下，项目中都会有许多项目成员，在我们将自己的<code>分支 1</code> 合并到 <code>主分支 master</code>时，<code>主分支master</code>有可能已经发生改变(即成员2将自己的<code>分支2</code>合并到<code>主分支 master</code>之后<code>push</code>),此时如果直接<code>push</code>，会导致成员2所修改的部分被覆盖。</p><p>而在这之前进行<code>pull</code>操作，会把远程分支于本地分支进行合并。然后再进行<code>push</code></p><p>git可能会在这种情况下，禁止你进行push操作</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210601113613.png" alt="20210601113613"></p><h3 id="git处理冲突"><a href="#git处理冲突" class="headerlink" title="git处理冲突"></a>git处理冲突</h3><p>git并不能智能化地解决不同开发者修改同一个文件的情况。如果不同开发者对同一文件进行了修改，那么这个冲突的过程，必须要手动解决，然后再次提交。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210601114236.png" alt="20210601114236"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210601114412.png" alt="20210601114412"></p><p>日志</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210601114336.png" alt="20210601114336"></p><h2 id="spring项目入门"><a href="#spring项目入门" class="headerlink" title="spring项目入门"></a>spring项目入门</h2><p>  基础的创建项目+运行web项目 没什么可以说的</p><h3 id="java反射"><a href="#java反射" class="headerlink" title="java反射"></a>java反射</h3><p>具体去看博客:<a href="https://www.cnblogs.com/chanshuyi/p/head_first_of_reflection.html">https://www.cnblogs.com/chanshuyi/p/head_first_of_reflection.html</a></p><p><strong>反射就是在运行时才知道要操作的类是什么，并且可以在运行时获取类的完整构造，并调用对应的方法。</strong><br>一般情况下，我们使用某个类时必定知道它是什么类，是用来做什么的。于是我们直接对这个类进行实例化，之后使用这个类对象进行操作。</p><pre class=" language-java"><code class="language-java">Apple apple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//直接初始化，「正射」</span>apple<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>而反射则是一开始并不知道我要初始化的类对象是什么，自然也无法使用 new 关键字来创建对象了。<br>这时候，我们使用 JDK 提供的反射 API 进行反射调用：</p><pre class=" language-java"><code class="language-java">Class <span class="token class-name">clz</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.chenshuyi.reflect.Apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Method method <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"setPrice"</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Constructor constructor <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Object object <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面两段代码的执行结果，其实是完全一样的。但是其思路完全不一样，第一段代码在未运行时就已经确定了要运行的类（Apple），而第二段代码则是在运行时通过字符串值才得知要运行的类（com.chenshuyi.reflect.Apple）</p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>为什么在浏览器中输入<a href="http://localhost:8080/index%E5%B0%B1%E8%83%BD%E5%A4%9F%E8%AE%BF%E9%97%AE%E5%88%B0%E5%AF%B9%E5%BA%94%E7%9A%84IndexController%E4%B8%AD%E7%9A%84index%E6%96%B9%E6%B3%95%EF%BC%9F">http://localhost:8080/index就能够访问到对应的IndexController中的index方法？</a></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Lakers win"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>简单来说，就是在运行时，浏览器通过获取<code>/index</code>找到了IndexController这个类（可能是Spring容器在启动之前或者之后创建好的），然后调用方法index，向前端返回 Lakers win</p><h4 id="Spring-IOC"><a href="#Spring-IOC" class="headerlink" title="Spring IOC"></a>Spring IOC</h4><p>详见博客：<a href="https://www.cnblogs.com/ysocean/p/7466217.html">https://www.cnblogs.com/ysocean/p/7466217.html</a></p><p>IOC-Inversion of Control，即控制反转。它不是什么技术，而是一种设计思想。</p><p>&emsp;&emsp;传统的创建对象的方法是直接通过 new 关键字，而 spring 则是通过 IOC 容器来创建对象，也就是说我们将创建对象的控制权交给了 IOC 容器。我们可以用一句话来概括 IOC：</p><p>&emsp;&emsp;IOC 让程序员不在关注怎么去创建对象，而是关注与对象创建之后的操作，把对象的创建、初始化、销毁等工作交给spring容器来做。</p><p>项目加载时会扫描有注解<code>@RestController、@Controller、@Service、@Component</code>的类，通过反射创建这些类的对象放入Spring的容器 **(hashMap:key =》value —–indexController 名字 =》indexController的对象)**，需要使用的时候通过key直接取出来使用。</p><h4 id="Spring-依赖注入DI"><a href="#Spring-依赖注入DI" class="headerlink" title="Spring 依赖注入DI"></a>Spring 依赖注入DI</h4><p>详见：<a href="http://c.biancheng.net/view/4253.html">http://c.biancheng.net/view/4253.html</a></p><p>依赖注入（Dependency Injection，DI）和控制反转含义相同，它们是从两个角度描述的同一个概念。</p><p>当某个 Java 实例需要另一个 Java 实例时，传统的方法是由调用者创建被调用者的实例（例如，使用 new 关键字获得被调用者实例），而使用 Spring 框架后，被调用者的实例不再由调用者创建，而是由 Spring 容器创建，这称为控制反转。</p><p>Spring 容器在创建被调用者的实例时，会自动将调用者需要的对象实例注入给调用者，这样，调用者通过 Spring 容器获得被调用者实例，这称为依赖注入。</p><p>依赖注入主要有两种实现方式，分别是属性 setter 注入和构造方法注入。</p>]]></content>
      
      
      <categories>
          
          <category> 国信安实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>篮球比赛数据统计</title>
      <link href="/2021/05/28/lan-qiu-bi-sai-shu-ju-tong-ji/"/>
      <url>/2021/05/28/lan-qiu-bi-sai-shu-ju-tong-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h1><table><thead><tr><th>日期</th><th>比赛名称</th><th>得分</th></tr></thead><tbody><tr><td>2019.5.中旬</td><td>学院院内赛-基准方中篮球赛(学院内不同年级组成的队伍)</td><td>具体数据忘了，但是场均应该能有个六七分，一共打了三场，大一非土木</td></tr><tr><td>2019.4.19</td><td>学工部篮球赛</td><td>17分、九投八中、一个三分、一个二加一</td></tr><tr><td>2021.5.9</td><td>Scuba(学校各个学院之间比赛)</td><td>对阵外国语 只得3分 三分六投一中，两个失误</td></tr><tr><td>2021.5.22</td><td>Scuba</td><td>对阵商学院、0分、两个失误</td></tr><tr><td>2021.5.28</td><td>Scuba</td><td>对阵软件 10分、五次启动走步、0助攻、中投3中2、两个上篮、一个二加一</td></tr></tbody></table><h1 id="记录没有别的目的，一方面是留念，但更多地是激励，希望自己能永远对🏀充满热情。—-2021-5-28"><a href="#记录没有别的目的，一方面是留念，但更多地是激励，希望自己能永远对🏀充满热情。—-2021-5-28" class="headerlink" title="记录没有别的目的，一方面是留念，但更多地是激励，希望自己能永远对🏀充满热情。—-2021.5.28"></a>记录没有别的目的，一方面是留念，但更多地是激励，希望自己能永远对🏀充满热情。—-2021.5.28</h1>]]></content>
      
      
      <categories>
          
          <category> 数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大学篮球 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>grafana iframe嵌入不显示的问题</title>
      <link href="/2021/05/26/grafana-iframe-qian-ru-bu-xian-shi-de-wen-ti/"/>
      <url>/2021/05/26/grafana-iframe-qian-ru-bu-xian-shi-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="grafana-iframe嵌入不显示的问题"><a href="#grafana-iframe嵌入不显示的问题" class="headerlink" title="grafana iframe嵌入不显示的问题"></a>grafana iframe嵌入不显示的问题</h1><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p><code>grafana\grafana\conf</code>目录下有两个配置文件<code>defaults.ini</code>、<code>sample.ini</code></p><ul><li><code>defaults.ini</code> 这个才是grafana服务器真正运行时的配置文件</li><li><code>sample.ini</code> 只是个样例，别改错了</li></ul><h2 id="开启匿名登录"><a href="#开启匿名登录" class="headerlink" title="开启匿名登录"></a>开启匿名登录</h2><p>修改<code>grafana\grafana\conf</code>目录下的<code>defaults.ini</code>文件中的 <code>[auth.anonymous]中的enabled = true</code></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210528084634.png" alt="20210528084634"></p><h2 id="允许浏览器渲染iframe"><a href="#允许浏览器渲染iframe" class="headerlink" title="允许浏览器渲染iframe"></a>允许浏览器渲染iframe</h2><p>修改上述文件中的<code>allow_embedding = true</code></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210528085103.png" alt="20210528085103"></p><h1 id="windows-server重启grafana服务"><a href="#windows-server重启grafana服务" class="headerlink" title="windows server重启grafana服务"></a>windows server重启grafana服务</h1><p>由于grafana在运行之后已经被当作一个服务，可以在服务管理页面对其进行重启</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210528085716.png" alt="20210528085716"></p><h1 id="不显示的原因"><a href="#不显示的原因" class="headerlink" title="不显示的原因"></a>不显示的原因</h1><p>grafana服务器响应头里面有一个<code>X-Frame-Options:deny</code></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210528085945.png" alt="20210528085945"></p><h2 id="X-Frame-Options"><a href="#X-Frame-Options" class="headerlink" title="X-Frame-Options"></a>X-Frame-Options</h2><p>The X-Frame-Options HTTP 响应头是用来给浏览器 指示允许一个页面 可否在 <code>&lt;frame&gt;, &lt;iframe&gt;, &lt;embed&gt; 或者 &lt;object&gt;</code> 中展现的标记。站点可以通过确保网站没有被嵌入到别人的站点里面，从而避免 clickjacking 攻击。</p><p>有三个可能值</p><pre><code>X-Frame-Options: denyX-Frame-Options: sameoriginX-Frame-Options: allow-from https://example.com/</code></pre><p>如果设置为 deny，不光在别人的网站 frame 嵌入时会无法加载，在同域名页面中同样会无法加载。另一方面，如果设置为sameorigin，那么页面就可以在同域名页面的 frame 中嵌套。</p><ul><li>deny <br><br>表示该页面不允许在 frame 中展示，即便是在相同域名的页面中嵌套也不允许。</li><li>sameorigin <br><br>表示该页面可以在相同域名页面的 frame 中展示。</li><li>allow-from url <br><br>表示该页面可以在指定来源的 frame 中展示。</li></ul><h2 id="修改之后，grafana服务器的响应头里不再包含这个字段"><a href="#修改之后，grafana服务器的响应头里不再包含这个字段" class="headerlink" title="修改之后，grafana服务器的响应头里不再包含这个字段"></a>修改之后，grafana服务器的响应头里不再包含这个字段</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210528091108.png" alt="20210528091108"><br>就可以显示了<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210528091142.png" alt="20210528091142"></p>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> grafana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用github托管网页，用到的工具总结</title>
      <link href="/2021/05/26/li-yong-github-tuo-guan-wang-ye-yong-dao-de-gong-ju-zong-lan/"/>
      <url>/2021/05/26/li-yong-github-tuo-guan-wang-ye-yong-dao-de-gong-ju-zong-lan/</url>
      
        <content type="html"><![CDATA[<h2 id="待做"><a href="#待做" class="headerlink" title="待做"></a>待做</h2><ul><li><input checked="" disabled="" type="checkbox"> 更改网页中js文件的cdn路径</li><li><input checked="" disabled="" type="checkbox"> 添加头像或者壁纸，看看作者的标语和文字是如何切换的</li><li><input disabled="" type="checkbox"> 想办法关一下背景音乐</li><li><input disabled="" type="checkbox"> 分析原因Travis 中运行hexo deloy总是<code>remote: Invalid username or password.fatal: Authentication failed fo</code></li><li><input checked="" disabled="" type="checkbox"> 续费腾讯的对象存储cos，方便传输图片</li><li><input disabled="" type="checkbox"> 将csdn上面的文件转过来</li></ul><h2 id="每一部分的作用详见首页-文章-Hexo主题LiveForCode介绍"><a href="#每一部分的作用详见首页-文章-Hexo主题LiveForCode介绍" class="headerlink" title="每一部分的作用详见首页 文章 Hexo主题LiveForCode介绍"></a>每一部分的作用详见首页 文章 Hexo主题LiveForCode介绍</h2><ul><li>Travis 就是方便部署hexo博客，不用每次自己在本地运行hexo deploy在上传GitHub, 检测到设定分支有push操作后，Travis会启动虚拟机帮你完成hexo generate和deploy的操作。关于这部分的配置参数，可以参考main分支的.travis.yml文件</li><li>LeanCloud 通过api把评论、留言、文章数据统计放到数据库里面，进入博客的时候，会再次请求数据库把这些数据显示在网页上。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210527113453.png" alt="20210527113453"></li><li>Algolia 搜索操作，会统计博客文章的标题和url相对路径。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210527113220.png" alt="20210527113220"></li><li>jsDelivr 免费的cdn加速。</li></ul><h2 id="利用github托管网页，用到的工具总结"><a href="#利用github托管网页，用到的工具总结" class="headerlink" title="利用github托管网页，用到的工具总结"></a>利用github托管网页，用到的工具总结</h2><h3 id="Hexo-博客框架"><a href="#Hexo-博客框架" class="headerlink" title="Hexo(博客框架)"></a>Hexo(博客框架)</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="Travis-CI-方便对博客更改，自动渲染"><a href="#Travis-CI-方便对博客更改，自动渲染" class="headerlink" title="Travis CI(方便对博客更改，自动渲染)"></a>Travis CI(方便对博客更改，自动渲染)</h3><p>Travis CI 提供的是持续集成服务（Continuous Integration，简称 CI）。它绑定 Github 上面的项目，只要有新的代码，就会自动抓取。然后，提供一个运行环境，执行测试，完成构建，还能部署到服务器。</p><p>持续集成指的是只要代码有变更，就自动运行构建和测试，反馈运行结果。确保符合预期以后，再将新代码”集成”到主干。</p><p>持续集成的好处在于，每次代码的小幅变更，就能看到运行结果，从而不断累积小的变更，而不是在开发周期结束时，一下子合并一大块代码。</p><h3 id="Valine-一款快速、简洁且高效的无后端评论系统。"><a href="#Valine-一款快速、简洁且高效的无后端评论系统。" class="headerlink" title="Valine - 一款快速、简洁且高效的无后端评论系统。"></a>Valine - 一款快速、简洁且高效的无后端评论系统。</h3><p>Valine 诞生于2017年8月7日，是一款基于LeanCloud的快速、简洁且高效的无后端评论系统。</p><p>理论上支持但不限于静态博客，目前已有Hexo、Jekyll、Typecho、Hugo、Ghost 等博客程序在使用Valine。</p><h3 id="LeanCloud-（数据库-—评论、留言、文章数据统计"><a href="#LeanCloud-（数据库-—评论、留言、文章数据统计" class="headerlink" title="LeanCloud （数据库)—评论、留言、文章数据统计"></a>LeanCloud （数据库)—评论、留言、文章数据统计</h3><p>LeanCloud（原 AVOS Cloud） 是针对移动应用的一站式云端服务，专注于为应用开发者提供工具和平台。提供包括LeanStorage 数据存储、LeanMessage 通信服务、LeanAnalytics 统计分析、LeanModules 拓展模块等四大类型的后端云服务，加速应用开发。</p><h3 id="Algolia-Search-数据库-–文章标签、分类统计"><a href="#Algolia-Search-数据库-–文章标签、分类统计" class="headerlink" title="Algolia Search(数据库)–文章标签、分类统计"></a>Algolia Search(数据库)–文章标签、分类统计</h3><p>可以使用 GitHub 或者 Google 账户直接登录，注册后的 14 天内拥有所有功能（包括收费类别的）。之后若未续费会自动降级为免费账户，免费账户总共有 10,000 条记录，每月有 100,000 的可以操作数</p><h3 id="jsDelivr–js文件的cdn-free"><a href="#jsDelivr–js文件的cdn-free" class="headerlink" title="jsDelivr–js文件的cdn free"></a>jsDelivr–js文件的cdn free</h3><p>CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。——百度百科</p>]]></content>
      
      
      <categories>
          
          <category> 待办 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo主题LiveForCode介绍</title>
      <link href="/2020/08/01/hexo-zhu-ti-liveforcode-jie-shao/"/>
      <url>/2020/08/01/hexo-zhu-ti-liveforcode-jie-shao/</url>
      
        <content type="html"><![CDATA[<p><a href="https://hexo.io/zh-cn/">Hexo</a> 是高效的静态站点生成框架，他基于 <a href="https://nodejs.org/en/">Node.js</a>。通过 Hexo 你可以轻松地使用 <a href="https://daringfireball.net/projects/markdown/">Markdown</a> 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 <a href="https://hexo.io/zh-cn/docs/tag-plugins.html">标签插件</a> 来快速的插入特定形式的内容。在这篇文章中，假定你已经成功安装了 Hexo，并使用 Hexo 提供的命令创建了一个站点。  </p><blockquote><p>你可以访问 <a href="https://hexo.io/zh-cn/docs/">Hexo 的文档</a> 了解如何安装 Hexo  </p></blockquote><p>在 Hexo 中有两份主要的配置文件，其名称都是 <code>_config.yml</code>。其中，一份位于 Hexo 根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br>为了描述方便，在以下说明中，将前者称为 <strong>站点配置文件</strong> ， 后者称为 <strong>主题配置文件</strong> 。  </p><h2 id="主题预览"><a href="#主题预览" class="headerlink" title="主题预览"></a>主题预览</h2><p><a href="https://www.notes.worstone.cn/">Hexo - Live For Code</a>  </p><h2 id="安装Live-For-Code"><a href="#安装Live-For-Code" class="headerlink" title="安装Live For Code"></a>安装Live For Code</h2><p>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至 Hexo 根目录的 themes 目录下，然后修改下配置文件即可。具体到 LiveForCode 来说，安装步骤如下。  </p><h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><p>如果你熟悉 Git，建议你使用 <code>克隆最新版本</code> 的方式，之后的更新可以通过 <code>git pull</code> 来快速更新，而不用再次下载压缩包替换。  </p><ol><li><p>克隆最新版本<br>在终端窗口下，定位到 Hexo 站点目录下。使用 Git Checkout 代码：  </p><pre class=" language-shell"><code class="language-shell">cd your-hexo-sitegit clone https://github.com/first19326/hexo-liveforcode</code></pre><p>将克隆下来的文件夹中的 <code>LiveForCode</code> 文件夹移动至站点的 <code>themes</code> 目录下，并将 <code>source</code> 文件夹中的 <code>about</code>、<code>category</code>、<code>comment</code>、<code>donate</code>、<code>friend</code> 以及 <code>tag</code> 文件夹移动至 Hexo 站点目录下的 <code>source</code> 文件夹中。这些文件夹分别对应着 <strong>关于</strong> 、 <strong>标签</strong> 、 <strong>留言板</strong> 、 <strong>赞赏</strong> 、 <strong>友情链接</strong> 以及 <strong>分类</strong> 页面，其中的 <code>index.md</code> 中的内容为各个页面显示的内容，大家可以根据自己的情况进行修改。  </p></li><li><p>下载稳定版本<br>前往 LiveForCode 版本发布页面。<br>选择你所需要的版本，下载 Download 区域下的 Source Code (zip) 到本地。<br>解压所下载的压缩包，并将解压后的文件夹中的 <code>LiveForCode</code> 文件夹移动至站点的 <code>themes</code> 目录下，并将 <code>source</code> 文件夹中的 <code>about</code>、<code>category</code>、<code>comment</code>、<code>donate</code>、<code>friend</code> 以及 <code>tag</code> 文件夹移动至 Hexo 站点目录下的 <code>source</code> 文件夹中。这些文件夹分别对应着 <strong>关于</strong> 、 <strong>标签</strong> 、 <strong>留言板</strong> 、 <strong>赞赏</strong> 、 <strong>友情链接</strong> 以及 <strong>分类</strong> 页面，其中的 <code>index.md</code> 中的内容为各个页面显示的内容，大家可以根据自己的情况进行修改。  </p></li></ol><h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>与所有 Hexo 主题启用的模式一样。当 克隆/下载 完成后，打开 <strong>站点配置文件</strong> ，找到 theme 字段，并将其值更改为 <code>LiveForCode</code>。  </p><pre class=" language-yml"><code class="language-yml">theme: LiveForCode</code></pre><p>到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前，我们最好使用 <code>hexo clean</code> 来清除 Hexo 的缓存。  </p><h3 id="验证主题"><a href="#验证主题" class="headerlink" title="验证主题"></a>验证主题</h3><p>首先启动 Hexo 本地站点，并开启调试模式（即加上 –debug），整个命令是 <code>hexo s --debug</code>。 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。<br>当命令行输出中提示出： <code>INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code> 此时即可使用浏览器访问 <code>http://localhost:4000</code>，检查站点是否正确运行。  </p><h2 id="站点设定"><a href="#站点设定" class="headerlink" title="站点设定"></a>站点设定</h2><p>在 <strong>站点配置文件</strong> 中，我修改了标签归档页面、分类归档页面以及文章归档页面的路径，如果大家使用默认的路径，则需要修改 <strong>主题配置文件</strong> 中的菜单设置。  </p><pre class=" language-yml"><code class="language-yml">tag_dir: tagarchive_dir: archivecategory_dir: category</code></pre><h2 id="主题设定"><a href="#主题设定" class="headerlink" title="主题设定"></a>主题设定</h2><p>由于 <strong>主题配置文件</strong> 可能有所改动，就不在这里给大家详细说明，我会在 <strong>主题配置文件</strong> 中添加适当的注释，麻烦大家参考页面以及注释内容进行修改。  </p><h2 id="404-页面设定"><a href="#404-页面设定" class="headerlink" title="404 页面设定"></a>404 页面设定</h2><p>主题中有相应的 <code>404</code> 错误页面，是单独的静态页面，没有添加到模板中。在使用主题的时候，需要大家将其中的 <strong>返回首页</strong> 的跳转链接 <code>https://notes.worstone.cn</code> 替换为自己网站的地址。<br>404 错误页面在主题文件夹 <code>LiveForCode</code> 中的 <code>source</code> 文件夹中。  </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>buttons<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reload();<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>刷新页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://notes.worstone.cn<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_self<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>返回首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h2 id="第三方服务"><a href="#第三方服务" class="headerlink" title="第三方服务"></a>第三方服务</h2><h3 id="Algolia-Search"><a href="#Algolia-Search" class="headerlink" title="Algolia Search"></a>Algolia Search</h3><p>1.前往 <a href="https://www.algolia.com/">Algolia</a> 注册页面，注册一个新账户。 可以使用 GitHub 或者 Google 账户直接登录，注册后的 14 天内拥有所有功能（包括收费类别的）。之后若未续费会自动降级为免费账户，免费账户总共有 10,000 条记录，每月有 100,000 的可以操作数。注册完成后，创建一个新的 Index，这个 Index 将在后面使用。<br>2.Index 创建完成后，此时这个 Index 里未包含任何数据。 接下来需要安装 <code>Hexo Algolia</code> 扩展，这个扩展的功能是搜集站点的内容并通过 API 发送给 Algolia。前往站点根目录，执行命令安装：  </p><pre class=" language-shell"><code class="language-shell">npm install --save hexo-algolia</code></pre><p>3.编辑 <strong>站点配置文件</strong> ，新增以下配置：  </p><pre class=" language-yml"><code class="language-yml">algolia:  applicationID: 'applicationID'  apiKey: 'apiKey'  indexName: '...'</code></pre><p>注：这里的 applicationID 为 <code>Search-Only API Key</code><br>4.当配置完成，在站点根目录下执行一下命令更新 Index。请注意观察命令的输出。  </p><pre class=" language-shell"><code class="language-shell">export HEXO_ALGOLIA_INDEXING_KEY=Admin API Keyhexo algolia</code></pre><p>5.Hexo Algolia 命令设置选项  </p><pre><code>Options:  --dry-run       Does not push content to Algolia (default: false).  --flush         Resets the Algolia index before starting the indexation (default: false).  --indexing-key  An algolia API key with add/delete records permissions.                      It should be different than the search-only API key configured in _config.yml.  --layouts       A comma-separated list of page layouts to index (default: &quot;page&quot;).</code></pre><p>说明：<br><code>--flush</code> 如果是 <code>false</code> 则每一次都会直接添加内容到 Algolia 相关的 Index 中，如果不是第一次提交，则将其设置为 <code>true</code><br><code>--layouts</code> 如果使用默认设置，提交的时候会将分类归档、标签归档、赞赏、留言板等页面内容提交到 Algolia， 在搜索的时候，将会搜索到分类归档、标签归档、赞赏、留言板等页面内容，建议使用时将其设置为 <code>post</code>。  </p><pre class=" language-shell"><code class="language-shell">hexo algolia --flush true --layouts post</code></pre><h3 id="设置-RSS"><a href="#设置-RSS" class="headerlink" title="设置 RSS"></a>设置 RSS</h3><p>1.安装 <code>Hexo-Feed</code> 插件。前往站点根目录，执行命令安装：  </p><pre class=" language-shell"><code class="language-shell">npm install --save hexo-generator-feed</code></pre><p>2.根据个人需求，编辑 <strong>站点配置文件</strong> ：  </p><pre class=" language-yml"><code class="language-yml">feed:  type: atom  path: atom.xml  limit: 10</code></pre><h3 id="文章数据统计"><a href="#文章数据统计" class="headerlink" title="文章数据统计"></a>文章数据统计</h3><p>文章数据统计基于 <code>Valine.js</code> 插件实现。<br>实现方式：在文章列表页面加载 <code>Valine.js</code>， 只要 Valine 配置项中的 <code>el</code> 元素不存在即不会加载评论框相关内容。  </p><p>1.文章评论数统计<br>Valine 会自动查找页面中 class 值为 <code>valine-comment-count</code> 的元素，获取其 <code>data-xid</code> 为查询条件。并将得到的值填充到其 class 的值为 <code>valine-comment-count</code> 的元素里：  </p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- data-xid 将作为查询条件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>valine-comment-count<span class="token punctuation">"</span></span> <span class="token attr-name">data-xid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;Your/Path/Name<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><p>2.文章阅读量统计<br>Valine 从 <code>v1.2.0</code> 开始支持文章阅读量统计。  </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Valine</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    el<span class="token punctuation">:</span> <span class="token string">'#vcomments'</span><span class="token punctuation">,</span>    <span class="token operator">...</span>    visitor<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 阅读量统计</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>如果开启了阅读量统计，Valine 会自动检测 LeanCloud 应用中是否存在 <code>Counter</code> 类，如果不存在会自动创建，无需手动创建。<br>Valine 会自动查找页面中 class 值为 <code>leancloud_visitors</code> 的元素，获取其 <code>id</code> 为查询条件。并将得到的值填充到其 class 的值为 <code>leancloud-visitors-count</code> 的子元素里：  </p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- id 将作为查询条件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;Your/Path/Name<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>leancloud_visitors<span class="token punctuation">"</span></span> <span class="token attr-name">data-flag-title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Your Article Title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>leancloud-visitors-count<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><h3 id="评论列表"><a href="#评论列表" class="headerlink" title="评论列表"></a>评论列表</h3><p>评论功能使用的是 <code>Valine.js</code> 插件，配置详情请参见 <a href="https://valine.js.org/">Valine</a>。  </p><blockquote><p>特别说明 <strong>主题配置文件</strong> 中的 Valine 的 <code>appId</code> 与 <code>appKey</code> 请大家自行配置自己的参数。如果评论数据提交到我的 LeanCloud 工作空间，我并不能保证数据的完整性。  </p></blockquote><h3 id="赞赏页面"><a href="#赞赏页面" class="headerlink" title="赞赏页面"></a>赞赏页面</h3><p>赞赏页面使用了 <a href="https://github.com/Kaiyuan/sponsor-page">Sponsor Page</a>，并做了相关修改使其适应博客样式。感兴趣的小伙伴自行去了解吧。  </p><h3 id="音乐播放器"><a href="#音乐播放器" class="headerlink" title="音乐播放器"></a>音乐播放器</h3><p>音乐播放器功能是使用 <code>APlayer.js</code> 以及 <code>Meting.js</code> 实现，配置详情参见 <a href="https://aplayer.js.org/#/home">APlayer</a>、<a href="https://github.com/metowolf/MetingJS">Meting</a>。<br>主题中有两种实现方式，一种是 <code>APlayer.js</code> 结合 <code>Meting.js</code> 的实现方式，另外一种是 <code>APlayer.js</code> 单独的实现方式，两种实现方式各有优缺点：<br>第一种实现方式配置简单，并且可以从各个音乐平台解析音乐。由于是从各个平台解析，故而不是特别稳定，并且在 <code>IE</code> 浏览器中需要特殊设置。<br>第二种实现方式配置相对复杂，需要单独提供音乐相关信息，但是十分稳定，且对于 <code>IE</code> 浏览器也可兼容，无需特殊配置。<br>主题中默认以 <strong>第一种实现方式</strong> 实现，第二种实现方式为备选方案，在第一种实现方式出现问题的时候，可以切换到第二种实现方式，保证网站的稳定运行。<br>针对第二种实现方式需要 <strong>注意</strong> 的地方：<br><code>APlayer.js</code> 是基于 <code>HTML 5 Audio</code> 实现的一款音乐播放器插件，故而支持的音频格式有限，包括：<code>MP3</code>、<code>Wav</code> 以及 <code>Ogg</code> 格式，并且不同浏览器对这三种音频格式的支持也各有不同，详细信息大家参考 <a href="https://www.runoob.com/html/html5-audio.html">HTML5 Audio(音频)</a>。如果音频格式不支持，可以通过音频转换工具进行格式转换。<br><code>APlayer.js</code> 是通过 <code>XMLHttpRequest</code> 获取歌词文件，所以存在 <strong>跨域</strong> 问题。可以考虑将歌词文件放在主题文件夹 <code>LiveForCode</code> 的 <code>source</code> 文件夹下（ <strong>注意</strong> ：这里的 <code>source</code> 文件夹不是 <code>Hexo</code> 站点目录下的 <code>source</code> 文件夹），解决跨域的问题。由于 <code>jsDelivr</code> 在响应请求的时候，会添加 <code>access-control-allow-origin: *</code> 的响应标头信息，故而不存在跨域问题，也可以使用这种方式。不过需要注意的是，<code>jsDelivr</code> 对资源的大小有所限制，不可以超过 <strong>50M</strong> 。<br><code>APlayer.js</code> 获取到歌词后会将歌词中的空白行去掉，由于是单行显示歌词，所以有译文的双行歌词，只会显示下面一行歌词，可以将译文歌词拼接在歌词原文的后面解决这个问题。  </p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="关于-jQuery-版本"><a href="#关于-jQuery-版本" class="headerlink" title="关于 jQuery 版本"></a>关于 jQuery 版本</h3><p>mCustomScroll 目前暂不支持 <code>jQuery3.5</code> 以及以上版本，否则会导致代码块中的滚动条失效。  </p><h3 id="Position-fixed-定位问题"><a href="#Position-fixed-定位问题" class="headerlink" title="Position: fixed 定位问题"></a>Position: fixed 定位问题</h3><p>由于背景动画的 <code>z-index</code> 为 <code>-1</code>，导致在IE浏览器中，菜单等多处 <code>position: fixed</code> 样式的部件出现闪烁抖动的问题，所以默认在IE浏览器中关闭了背景动画。如果是高版本IE，例如IE11则可在设置 -&gt; Internet选项 -&gt; 高级，将浏览中的’使用平滑滚动’选项勾掉，也可以解决这个问题。  </p><h3 id="关于-Github-Page-的使用"><a href="#关于-Github-Page-的使用" class="headerlink" title="关于 Github Page 的使用"></a>关于 Github Page 的使用</h3><p>详情请参见 <a href="https://hexo.io/zh-cn/docs/github-pages">将 Hexo 部署到 GitHub Pages</a>。<br>Github Page 支持设置自己的域名，建议在 Hexo 主题的 source 文件夹下新增一个 CNAME 的文件，将自己的域名配置进去，否则每次提交的时候会覆盖掉相关域名设置。<br>在域名的解析设置中，可以使用 CNAME 解析方式，也可以使用 A记录 的方式。如果是 A记录 的方式，则需要检索当前 Github Page 对应的服务器 IP 地址。  </p><h3 id="关于-CDN"><a href="#关于-CDN" class="headerlink" title="关于 CDN"></a>关于 CDN</h3><p>CDN 可以在阿里云购买相关的 CDN 服务器，效果肯定是更好，这里使用的是 <a href="https://www.jsdelivr.com/">jsDelivr</a> 免费的 CDN 加速服务。但是有一个弊端，如果修改代码的时候没有Github的相关版本信息，则很容易读取到 jsDelivr 的缓存数据，而不是修改后的最新代码。至于这个缓存时间，我也拿捏不准。不过免费而且效果不错的东西，大家就不要要求太多了。  </p><h2 id="阶段计划"><a href="#阶段计划" class="headerlink" title="阶段计划"></a>阶段计划</h2><p>1.使用 Vue.js 重构项目<br>2.整理模板的样式文件<br>3.加入 Pjax，优化页面加载速度<br>4.补充国际化支持语言<br>5.考虑是否加入黑夜模式  </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>由于我还是一名小白，可能还有很多问题无法解决，这个主题也可能存在很多不尽如人意的地方，在细节方面我也会尽力地去修改，也欢迎大家提出自己的问题，以及主题的相关建议，也欢迎大家提交代码。如果觉得这个主题不错，欢迎大家去使用。当然了，如果能赞赏我一下，我也是不介意的。(●ˇ∀ˇ●)  </p><p>这个主题可定制的地方目前可能比较少，欢迎大家修改，也希望这个主题能够越来越好看，也希望越来越多的人能够喜欢。  </p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/01/01/helloworld/"/>
      <url>/2020/01/01/helloworld/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
