<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>毕设-Fuzz-AFLGo源码阅读-5</title>
      <link href="/2022/02/21/bi-she-fuzz-aflgo-yuan-ma-yue-du-5/"/>
      <url>/2022/02/21/bi-she-fuzz-aflgo-yuan-ma-yue-du-5/</url>
      
        <content type="html"><![CDATA[<h1 id="AFLGo源码阅读"><a href="#AFLGo源码阅读" class="headerlink" title="AFLGo源码阅读"></a>AFLGo源码阅读</h1><ul><li><a href="#aflgo%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">AFLGo源码阅读</a><ul><li><a href="#%E6%8C%89%E7%85%A7main%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84%E9%A1%BA%E5%BA%8F">按照Main函数中的顺序</a><ul><li><a href="#setup_signal_handlers">setup_signal_handlers</a></li><li><a href="#check_asan_opts">check_asan_opts()</a></li><li><a href="#fix_up_sync--%E4%B8%8D%E7%9F%A5%E9%81%93%E5%85%B7%E4%BD%93%E7%94%A8%E9%80%94">fix_up_sync()–不知道具体用途</a></li><li><a href="#save_cmdlineargc-argv">save_cmdline(argc, argv)</a></li><li><a href="#fix_up_bannerargvoptind">fix_up_banner(argv[optind])</a></li><li><a href="#check_if_tty">check_if_tty()</a></li><li><a href="#get_core_count">get_core_count()</a></li><li><a href="#bind_to_free_cpu">bind_to_free_cpu()</a></li><li><a href="#check_crash_handling">check_crash_handling()</a></li><li><a href="#check_cpu_governor">check_cpu_governor()</a></li><li><a href="#setup_post">setup_post()</a></li><li><a href="#setup_shm">setup_shm()</a></li><li><a href="#init_count_class16">init_count_class16()</a></li><li><a href="#setup_dirs_fds">setup_dirs_fds()</a></li><li><a href="#read_testcases">read_testcases()</a></li><li><a href="#load_auto">load_auto()</a></li><li><a href="#pivot_inputs">pivot_inputs()</a><ul><li><a href="#c%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86">C语言知识</a></li></ul></li><li><a href="#load_extras">load_extras()</a></li><li><a href="#find_timeout">find_timeout()</a></li><li><a href="#detect_file_args">detect_file_args()</a><ul><li><a href="#c%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86-1">C语言知识</a></li></ul></li><li><a href="#setup_stdio_file">setup_stdio_file()</a></li><li><a href="#check_binary">check_binary()</a></li><li><a href="#get_qemu_argv">get_qemu_argv()</a></li><li><a href="#perform_dry_run">perform_dry_run()</a><ul><li><a href="#calibrate_case">calibrate_case()</a><ul><li><a href="#count_bytes">count_bytes()</a></li><li><a href="#update_bitmap_score">update_bitmap_score()</a></li><li><a href="#minimize_bits">minimize_bits()</a></li></ul></li></ul></li><li><a href="#cull_queue">cull_queue()</a><ul><li><a href="#mark_as_redundant">mark_as_redundant</a></li></ul></li><li><a href="#show_init_stats">show_init_stats()</a></li><li><a href="#find_start_position">find_start_position()</a></li><li><a href="#write_stats_file">write_stats_file()</a></li><li><a href="#save_auto">save_auto()</a></li><li><a href="#fuzz_one--while%E5%BE%AA%E7%8E%AF">fuzz_one &amp;&amp; while循环</a><ul><li><a href="#calculate_score">calculate_score()</a></li><li><a href="#common_fuzz_stuff">common_fuzz_stuff()</a></li><li><a href="#run_target">run_target()</a><ul><li><a href="#c-%E7%9F%A5%E8%AF%86">C 知识</a><ul><li><a href="#%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81">进程状态</a></li><li><a href="#setitimer">setitimer</a></li></ul></li></ul></li><li><a href="#save_if_interesting">save_if_interesting</a></li></ul></li><li><a href="#write_bitmap">write_bitmap()</a></li><li><a href="#write_stats_file-1">write_stats_file()</a></li><li><a href="#stop_fuzzing">stop_fuzzing:</a></li></ul></li><li><a href="#aflgo%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0">AFLgo命令行启动参数</a></li><li><a href="#linux%E5%91%BD%E4%BB%A4">Linux命令</a></li><li><a href="#%E5%8F%82%E8%80%83">参考</a></li></ul></li></ul><h2 id="按照Main函数中的顺序"><a href="#按照Main函数中的顺序" class="headerlink" title="按照Main函数中的顺序"></a>按照Main函数中的顺序</h2><h3 id="setup-signal-handlers"><a href="#setup-signal-handlers" class="headerlink" title="setup_signal_handlers"></a>setup_signal_handlers</h3><p>初始化各种信号量</p><p>终止进程的、超时的等等</p><h3 id="check-asan-opts"><a href="#check-asan-opts" class="headerlink" title="check_asan_opts()"></a>check_asan_opts()</h3><p>通过检查环境变量中的值来判断–检查ASAN设置</p><h3 id="fix-up-sync-–不知道具体用途"><a href="#fix-up-sync-–不知道具体用途" class="headerlink" title="fix_up_sync()–不知道具体用途"></a>fix_up_sync()–不知道具体用途</h3><p>没理解</p><h3 id="save-cmdline-argc-argv"><a href="#save-cmdline-argc-argv" class="headerlink" title="save_cmdline(argc, argv)"></a>save_cmdline(argc, argv)</h3><p>用<code>orig_cmdline</code>保存复制当前命令行</p><h3 id="fix-up-banner-argv-optind"><a href="#fix-up-banner-argv-optind" class="headerlink" title="fix_up_banner(argv[optind])"></a>fix_up_banner(argv[optind])</h3><p>根据最后一个参数设置标头(banner)?</p><h3 id="check-if-tty"><a href="#check-if-tty" class="headerlink" title="check_if_tty()"></a>check_if_tty()</h3><p>检查是不是在终端运行</p><h3 id="get-core-count"><a href="#get-core-count" class="headerlink" title="get_core_count()"></a>get_core_count()</h3><p>从系统文件中获取cpu核的相关信息</p><h3 id="bind-to-free-cpu"><a href="#bind-to-free-cpu" class="headerlink" title="bind_to_free_cpu()"></a>bind_to_free_cpu()</h3><p>把进程绑定在具体的内核上？</p><h3 id="check-crash-handling"><a href="#check-crash-handling" class="headerlink" title="check_crash_handling()"></a>check_crash_handling()</h3><p>保证core dumps不会进入程序, 否则会增加将崩溃信息通过waitpid传递给fuzzer的延迟。</p><h3 id="check-cpu-governor"><a href="#check-cpu-governor" class="headerlink" title="check_cpu_governor()"></a>check_cpu_governor()</h3><p>要把CPU频率调节的算法(可能忽视fuzz产生的短进程)关了，以提高aflgo-fuzz的效率。</p><h3 id="setup-post"><a href="#setup-post" class="headerlink" title="setup_post()"></a>setup_post()</h3><p>不理解</p><h3 id="setup-shm"><a href="#setup-shm" class="headerlink" title="setup_shm()"></a>setup_shm()</h3><p>配置共享内存和<code>virgin_bits</code>, 并且将共享内存的首地址赋值给<code>trace_bits</code>.</p><h3 id="init-count-class16"><a href="#init-count-class16" class="headerlink" title="init_count_class16()"></a>init_count_class16()</h3><p>之所以用左移是为了加快速度</p><p>最终初始化是下面这个样子。16位一个<br>        0-0 ….      128-0  -256个元素   :0-1-2-4-8-16-32-64-128<br>      ⬇ 0-1 ….<br>        0-2 ….<br>        0-2 ….<br>        0-4 ….<br>        0-4 ….<br>        ………….<br>        0-128….    128-128         一共 65536个 16bit</p><h3 id="setup-dirs-fds"><a href="#setup-dirs-fds" class="headerlink" title="setup_dirs_fds()"></a>setup_dirs_fds()</h3><ol><li><p>flock 了 out_dir_fd</p></li><li><p>创建了跟下面有关的目录</p><ul><li>queue </li><li>crashes</li><li>hangs<br>…. </li></ul></li><li><p>还创建其他的fd(/dev/null&amp;/dev/urandom)方便后续使用</p></li></ol><h3 id="read-testcases"><a href="#read-testcases" class="headerlink" title="read_testcases()"></a>read_testcases()</h3><p>从<code>input directory</code>中读取所有的测试用例，检测测试用例的大小，以及是否已经完成了<code>deterministic fuzzing</code>阶段，然后添加到queue中。</p><p>初始化</p><ul><li>queued_at_start  Total number of initial inputs</li><li>last_path_time   Time for most recent path (ms)</li></ul><h3 id="load-auto"><a href="#load-auto" class="headerlink" title="load_auto()"></a>load_auto()</h3><p>加载自动生成的附加组件</p><h3 id="pivot-inputs"><a href="#pivot-inputs" class="headerlink" title="pivot_inputs()"></a>pivot_inputs()</h3><ul><li>首先检查是不是之前跑过的<ul><li>如果是的话，看一下id是不是一致。<ul><li>id一致, 要改变对应entry的depth</li></ul></li><li>如果不是，就起新名字 <code>id:%06u,orig:%s</code></li><li>然后就是重新命名文件，并且更改<code>q-&gt;fname=nfn</code></li></ul></li></ul><h4 id="C语言知识"><a href="#C语言知识" class="headerlink" title="C语言知识"></a>C语言知识</h4><p>strrchr和strchr类似，但是从右向左找字符c，找到字符c第一次出现的位置就返回，函数名中间多了一个字母r可以理解为Right-to-left。</p><h3 id="load-extras"><a href="#load-extras" class="headerlink" title="load_extras()"></a>load_extras()</h3><p>这个没看懂是干啥的。<br>跟这些有关，但是不知道具体在fuzz的过程中起到了什么作用</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct extra_data &#123;  u8* data;                           &#x2F;* Dictionary token data            *&#x2F;  u32 len;                            &#x2F;* Dictionary token length          *&#x2F;  u32 hit_cnt;                        &#x2F;* Use count in the corpus          *&#x2F;&#125;;static struct extra_data* extras;     &#x2F;* Extra tokens to fuzz with        *&#x2F;static u32 extras_cnt;                &#x2F;* Total number of tokens read      *&#x2F;static struct extra_data* a_extras;   &#x2F;* Automatically selected extras    *&#x2F;static u32 a_extras_cnt;              &#x2F;* Total number of tokens available *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="find-timeout"><a href="#find-timeout" class="headerlink" title="find_timeout()"></a>find_timeout()</h3><p>只有在Resuming an older fuzzing job的情况下，才会使用。</p><p>从状态目录中读取文件名, 并把<code>exec_timeout :</code>后面的值复制给<code>exec_tmout</code>, 将timeout_given赋值为3.</p><h3 id="detect-file-args"><a href="#detect-file-args" class="headerlink" title="detect_file_args()"></a>detect_file_args()</h3><p>根据参数@@后面带的东西，更改文件名. 看的也不是很懂。</p><h4 id="C语言知识-1"><a href="#C语言知识-1" class="headerlink" title="C语言知识"></a>C语言知识</h4><p>定义函数：char * getcwd(char * buf, size_t size);</p><p>函数说明：getcwd()会将当前的工作目录绝对路径复制到参数buf 所指的内存空间，参数size 为buf 的空间大小。</p><p>注：<br>1、在调用此函数时，buf 所指的内存空间要足够大。若工作目录绝对路径的字符串长度超过参数size 大小，则返回NULL，errno 的值则为ERANGE。<br>2、倘若参数buf 为NULL，getcwd()会依参数size 的大小自动配置内存(使用malloc())，如果参数size 也为0，则getcwd()会依工作目录绝对路径的字符串程度来决定所配置的内存大小，进程可以在使用完次字符串后利用free()来释放此空间。</p><h3 id="setup-stdio-file"><a href="#setup-stdio-file" class="headerlink" title="setup_stdio_file()"></a>setup_stdio_file()</h3><p>如果没有用-f指定输出文件的话, 那就用默认的<code>.cur_input</code>创建</p><h3 id="check-binary"><a href="#check-binary" class="headerlink" title="check_binary()"></a>check_binary()</h3><p>具体代码没看。。</p><p>检查目标二进制文件是否存在，以及它是否是shell脚本。确保可以进行afl的插桩。</p><h3 id="get-qemu-argv"><a href="#get-qemu-argv" class="headerlink" title="get_qemu_argv()"></a>get_qemu_argv()</h3><p>不知道干啥的</p><h3 id="perform-dry-run"><a href="#perform-dry-run" class="headerlink" title="perform_dry_run()"></a>perform_dry_run()</h3><p>简单的把所有的测试用例都提前运行一遍，确保程序像预期的那样运行。如果不是的话，会有一些相应的提示。</p><h4 id="calibrate-case"><a href="#calibrate-case" class="headerlink" title="calibrate_case()"></a>calibrate_case()</h4><p>测试一个entry，看看是不是有覆盖率、新的路径的添加等等变量是否正常工作啥的。</p><p>关于<code>entry</code>属性里面的<code>var_behavior</code>的理解: 因为在<code>calibrate</code>的阶段中，是没有发生变异的，那么如果测试用例在经过不同次数的执行后，产生了不一样的<code>path</code>。那么就把这个<code>entry</code>标记为<code>variable</code>。<strong>这个属性并没有影响到后续的其他步骤</strong>。根据注释，应该只是简单的标注，方便能找到吧。</p><h5 id="count-bytes"><a href="#count-bytes" class="headerlink" title="count_bytes()"></a>count_bytes()</h5><p>数一下有多少个字节不为零, 8位代表一个path, 不同的命中次数可能会导致8位中不同位置的bit置1</p><h5 id="update-bitmap-score"><a href="#update-bitmap-score" class="headerlink" title="update_bitmap_score()"></a>update_bitmap_score()</h5><p>当某个entry触发了新的path, 我们要与之前的同样触发这个path的”最优”的entry进行一个比较。看看到底谁更优秀。</p><p>所谓的<code>top_rated[]</code> 就是 <code>a minimal set of paths that trigger all the bits seen in the bitmap so far.</code></p><h5 id="minimize-bits"><a href="#minimize-bits" class="headerlink" title="minimize_bits()"></a>minimize_bits()</h5><p>把<code>trace_bits</code>压缩为一个占用空间更小的数组。1位代表一个<code>path</code>现在。所以刚好是分配了<code>MAP_SIZE&gt;&gt;3</code>的空间。</p><h3 id="cull-queue"><a href="#cull-queue" class="headerlink" title="cull_queue()"></a>cull_queue()</h3><p><code>top_rated[i]</code> 代表的就是发现路径序号为i的最优entry(fav_factor最小的) 而且<strong>关键的是top_rated[i] 指针指向的是queue中的特定的entry</strong>。所以在将<code>top_rated[i]-&gt;favored = 1 </code>时，原来<code>queue</code>中的<code>entry</code>的<code>favored</code>也同样被设置为1</p><p>值得注意的是，并不是说<code>top_rated[]</code>中所有的<code>entry</code>都是<code>favored</code>的。当且仅当你发现的<code>path</code>是你之前<code>entry</code>都没有发现过的情况下，这个<code>entry</code>才会被设置为<code>favored</code></p><blockquote><p>我觉得这里有个值得深思的地方，程序这样设计的话，test_case的顺序会影响到其是否会被设置为favored. 这种随机性会不会对框架整体的性能产生一定的影响。</p></blockquote><h4 id="mark-as-redundant"><a href="#mark-as-redundant" class="headerlink" title="mark_as_redundant"></a>mark_as_redundant</h4><p>把对应的<code>entry</code>标记为<code>redundant</code>，其间还会创建一些目录，至于什么作用没看懂。</p><h3 id="show-init-stats"><a href="#show-init-stats" class="headerlink" title="show_init_stats()"></a>show_init_stats()</h3><p>显示统计数据 Total calibration cycles\max_bits\min_bits\exec_us\len等等</p><p>根据平均运行时间重新设置一个<code>timeout_given</code></p><h3 id="find-start-position"><a href="#find-start-position" class="headerlink" title="find_start_position()"></a>find_start_position()</h3><p>当要恢复程序进程的时候，从<code>fuzzer_stats</code>目录的文件的文件名中读取相应的位置。</p><h3 id="write-stats-file"><a href="#write-stats-file" class="headerlink" title="write_stats_file()"></a>write_stats_file()</h3><p>把用到的基本状态信息都写入到状态文件中，这些变量都会在终端页面显示中用到。</p><h3 id="save-auto"><a href="#save-auto" class="headerlink" title="save_auto()"></a>save_auto()</h3><p>自动保存生成的extras，这个跟token有关系，但没看懂token到底有什么作用。</p><h3 id="fuzz-one-amp-amp-while循环"><a href="#fuzz-one-amp-amp-while循环" class="headerlink" title="fuzz_one &amp;&amp; while循环"></a>fuzz_one &amp;&amp; while循环</h3><p>接下来是循环中的函数</p><ul><li><p>首先在进入循环之前, 要先cull_queue, 把favor的entry标记出来</p></li><li><p>判断queue_cur是否为空</p><ul><li>如果为空的话，说明是第一次进入循环。进行必要的初始化。</li></ul></li><li><p>然后就是fuzz_one</p><ul><li>判断在当下的队列中，是否含有 <code>favored\non-fuzzed</code> 的<code>entry</code>，如果有那么会<strong>以99%的概率跳过那些已经被fuzz过或者不是favored</strong>的<code>entry</code>.</li><li>如果没有上面所说的那种类型的<code>entry</code> 会以75%跳过not fuzzed ，以95%跳过fuzzed的<code>entry</code>。 </li><li>然后将test case中的内容映射到内存中，这样文件中的位置直接就有对应的内存地址，对文件的读写可以直接用指针来做而不需要<code>read</code>\<code>write</code>函数。</li><li>如果最初的calibration阶段失败了, 那现在要重新来一遍。</li><li><code>trimming</code>阶段，<strong>这个阶段的作用，没看懂</strong>。 不明白为什么这个函数会调用run_taget</li><li>计算entry分数</li><li>看看是否要跳过<code>deterministic</code>变异阶段<ul><li>如果skip_deterministic设置为1、或者entry fuzzed或者entry-&gt;passed_det设置为1)</li><li>如果执行路径校验将其置于该主实例的范围之外，则跳过确定性模糊处理。</li></ul></li><li>按照以下阶段进行变异 <ul><li>simple bitflip</li><li>arithmetic</li><li>interst</li><li>dictionary</li><li>havoc</li><li>splice<blockquote><p>当然在这些变异阶段中, 大多都是每变异一次就进行<code>common_fuzz_stuff</code>。 还有很多为了保证程序效率(比如: 当变异出现的结果在之前的变异阶段已经被运行过的时候可以跳过、当对于某个字节的变异没有出现效果，那在以后的变异阶段就不会变异该字节了-相当于认为该字节对于提高程序效果没有太大的意义)</p></blockquote></li></ul></li></ul><p>循环结束后，回对sync_fuzzer进行一个操作，这个可以后面再看。</p></li></ul><h4 id="calculate-score"><a href="#calculate-score" class="headerlink" title="calculate_score()"></a>calculate_score()</h4><p>计算得分,跟得分有关的因素</p><ul><li><code>exec_us</code> 和<code>avg_execc_us</code>的大小关系, <code>exec_us</code>相对越小, 得分肯定就越高</li><li><code>bitmap_size</code>(发现的路径数) 和 <code>avg_bitmap_size</code>大小关系, <code>bitmap_size</code>相对越高, 得分越高</li><li><code>handicap</code> 某个<code>testcase</code>可能是在程序运行的末尾才发现, 然后被添加到队列中。而这个时候，队列中前面的<code>entry</code>很有可能已经运行了很多<code>cycle</code>. 所以，这部分<strong>后来添加到队列中</strong>的<code>entry</code>得分更高。</li><li><code>depth</code> 原文 <em>under the assumption that fuzzing deeper test cases is more likely to reveal stuff that can’t be discovered with traditional fuzzers.</em> <code>depth</code>的值越大，得分也就越高。也就是说, 一些变异的<code>entry</code>较大可能会是后面才添加进来的。所以假设越往后添加进来的越高。<strong>这个要跟上面的handicap相区别，depth反映的是队列中的entry数量, handicap是整体队列变异的cycle</strong></li><li><code>cooling_schedule</code> 基于距离的模拟退火算法, 距离越近的随着时间的推移, <code>power_factor</code>会越来越高. 相对应的得分也就越高. <code>perf_score *= power_factor</code> </li></ul><blockquote><p>具体的得分，跟确定性变异阶段的时间没有关系，得分越高，随机性变异阶段的时间也就越长。</p></blockquote><h4 id="common-fuzz-stuff"><a href="#common-fuzz-stuff" class="headerlink" title="common_fuzz_stuff()"></a>common_fuzz_stuff()</h4><p>把经过变异修改的文件重新写入testcase, 然后在进行<code>run_target()</code>。接着运行<code>save_if_interesting()</code>判断是否对变异的testcase进行统计或者其他操作</p><h4 id="run-target"><a href="#run-target" class="headerlink" title="run_target()"></a>run_target()</h4><ul><li>第一种情况: 独自运行exec, 等待子进程结束</li><li>第二种情况: 通过管道和forkserver通信，forkserver fork出一个子进程进行fuzz，将子进程的状态写入通道。 父进程再通过通道中的信息, 对程序状态进行返回。<strong>当然在子进程进行fuzz的过程中 trace_bits会发生更新</strong></li></ul><h5 id="C-知识"><a href="#C-知识" class="headerlink" title="C 知识"></a>C 知识</h5><h6 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h6><ul><li>WIFSIGNALED(status)为非0 表明进程异常终止 <strong>用来判断crash</strong></li><li>WIFSTOPPED(status)为非0 表明进程处于暂停状态 <strong>用来判断fork server是否正常进行, 此时因为fork server是处于循环当中，所以对应的状态是处于暂停。</strong></li><li>WTERMSIG(status) 获取程序退出的信号(比如:<code>SIGKILL</code>)</li></ul><h6 id="setitimer"><a href="#setitimer" class="headerlink" title="setitimer"></a>setitimer</h6><p>关于这个，详细的内容网上都有。 但是没搞清楚这个时间定时到底是阻塞的还是非阻塞的。？？</p><h4 id="save-if-interesting"><a href="#save-if-interesting" class="headerlink" title="save_if_interesting"></a>save_if_interesting</h4><p>看一下当前的testcase是否触发了新的路径, 如果触发了新的路径，需要把这个testcase添加到当前的队列里面。并且要在queue中以<code>(&quot;%s/queue/id:%06u,%llu,%s&quot;, out_dir, queued_paths, get_cur_time() - start_time ,describe_op(hnb))</code>这样的形式命名。</p><p>根据<code>run_target()</code>的返回值，处理timeout、crash、error的情况</p><h3 id="write-bitmap"><a href="#write-bitmap" class="headerlink" title="write_bitmap()"></a>write_bitmap()</h3><p>把当前共享内存中的bitmap写到文件中去</p><h3 id="write-stats-file-1"><a href="#write-stats-file-1" class="headerlink" title="write_stats_file()"></a>write_stats_file()</h3><p>更新状态文件中的数据</p><h3 id="stop-fuzzing"><a href="#stop-fuzzing" class="headerlink" title="stop_fuzzing:"></a>stop_fuzzing:</h3><p>程序的终止是需要用户自己按下<code>ctrl+c</code> 循环不会自己退出</p><p>对占有的内存空间进行释放, 退出程序</p><h2 id="AFLgo命令行启动参数"><a href="#AFLgo命令行启动参数" class="headerlink" title="AFLgo命令行启动参数"></a>AFLgo命令行启动参数</h2><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>i</td><td>输入目录</td></tr><tr><td>o</td><td>输出目录</td></tr><tr><td>M</td><td>master sync ID</td></tr><tr><td>S</td><td>master sync ID</td></tr><tr><td>f</td><td>目标文件</td></tr><tr><td>x</td><td>字典目录</td></tr><tr><td>t</td><td>超时时间设定</td></tr><tr><td>m</td><td>内存限制</td></tr><tr><td>d</td><td>是否跳过确定性变异阶段</td></tr><tr><td>B</td><td>加载bitmap</td></tr><tr><td>C</td><td>Crash模式</td></tr><tr><td>T</td><td>banner</td></tr><tr><td>Q</td><td>QEMU模式</td></tr><tr><td>z</td><td>模拟退火算法选定</td></tr><tr><td>c</td><td>退火算法的运行时间</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Required parameters:  -i <span class="token function">dir</span>        - input directory with <span class="token builtin class-name">test</span> cases  -o <span class="token function">dir</span>        - output directory <span class="token keyword">for</span> fuzzer findingsDirected fuzzing specific settings:  -z schedule   - temperature-based power schedules                  <span class="token punctuation">&#123;</span>exp, log, lin, quad<span class="token punctuation">&#125;</span> <span class="token punctuation">(</span>Default: exp<span class="token punctuation">)</span>  -c min        - <span class="token function">time</span> from start when SA enters exploitation                  <span class="token keyword">in</span> secs <span class="token punctuation">(</span>s<span class="token punctuation">)</span>, mins <span class="token punctuation">(</span>m<span class="token punctuation">)</span>, hrs <span class="token punctuation">(</span>h<span class="token punctuation">)</span>, or days <span class="token punctuation">(</span>d<span class="token punctuation">)</span>Execution control settings:  -f <span class="token function">file</span>       - location <span class="token builtin class-name">read</span> by the fuzzed program <span class="token punctuation">(</span>stdin<span class="token punctuation">)</span>  -t msec       - <span class="token function">timeout</span> <span class="token keyword">for</span> each run <span class="token punctuation">(</span>auto-scaled, <span class="token number">50</span>-1000 ms<span class="token punctuation">)</span>  -m megs       - memory limit <span class="token keyword">for</span> child process <span class="token punctuation">(</span><span class="token number">50</span> MB<span class="token punctuation">)</span>  -Q            - use binary-only instrumentation <span class="token punctuation">(</span>QEMU mode<span class="token punctuation">)</span>Fuzzing behavior settings:  -d            - quick <span class="token operator">&amp;</span> dirty mode <span class="token punctuation">(</span>skips deterministic steps<span class="token punctuation">)</span>  -n            - fuzz without instrumentation <span class="token punctuation">(</span>dumb mode<span class="token punctuation">)</span>  -x <span class="token function">dir</span>        - optional fuzzer dictionary <span class="token punctuation">(</span>see README<span class="token punctuation">)</span>Other stuff:  -T text       - text banner to show on the <span class="token function">screen</span>  -M / -S <span class="token function">id</span>    - distributed mode <span class="token punctuation">(</span>see parallel_fuzzing.txt<span class="token punctuation">)</span>  -C            - crash exploration mode <span class="token punctuation">(</span>the peruvian rabbit thing<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Linux命令"><a href="#Linux命令" class="headerlink" title="Linux命令"></a>Linux命令</h2><ul><li><p><strong>export</strong></p><p>为shell变量或函数设置导出属性。它们会成为环境变量, 可以在脚本中访问它们，尤其是脚本中调用的子进程需要时。</p></li><li><p><strong>echo</strong></p><p>echo命令 用于在shell中打印shell变量的值，或者直接输出指定的字符串。linux的echo命令，在shell编程中极为常用, 在终端下打印变量value的时候也是常常用到的，因此有必要了解下echo的用法echo命令的功能是在显示器上显示一段文字，一般起到一个提示的作用。</p></li><li><p><strong>mkdir</strong></p><p>创建目录</p></li><li><p><strong>cat</strong></p><p>连接多个文件并打印到标准输出</p></li><li><p><strong>cut</strong></p><p>cut命令用来显示行中的指定部分，删除文件中指定字段。说明：该命令有两项功能，其一是用来显示文件的内容，它依次读取由参数 file 所指 明的文件，将它们的内容输出到标准输出上；其二是连接两个或多个文件，如cut fl f2 &gt; f3将把文件 fl 和 f2 的内容合并起来，然后通过输出重定向符“&gt;”的作用，将它们放入文件 f3 中。</p></li><li><p><strong>rev</strong></p><p>将文件内容以字符为单位反序输出—也就是每行的字符都到过来</p></li><li><p><strong>cp</strong></p><p>将源文件或目录复制到目标文件或目录中</p></li><li><p><strong>pushd&amp;&amp;popd</strong></p><p>倒可以简单地把这个命令理解为切换/再换回来目录的命令。</p></li><li><p><strong>chmod</strong></p><p>用来变更文件或目录的权限</p></li><li><p><strong>mv</strong></p><p>mv命令 用来对文件或目录重新命名，或者将文件从一个目录移到另一个目录中。source表示源文件或目录，target表示目标文件或目录。如果将一个文件移到一个已经存在的目标文件中，则目标文件的内容将被覆盖</p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://rk700.github.io/2018/01/04/afl-mutations/">http://rk700.github.io/2018/01/04/afl-mutations/</a></li><li><a href="https://rk700.github.io/2017/12/28/afl-internals/#%E5%88%86%E6%94%AF%E4%BF%A1%E6%81%AF%E7%9A%84%E5%88%86%E6%9E%90">https://rk700.github.io/2017/12/28/afl-internals/#%E5%88%86%E6%94%AF%E4%BF%A1%E6%81%AF%E7%9A%84%E5%88%86%E6%9E%90</a></li><li><a href="https://paper.seebug.org/496/#_2">https://paper.seebug.org/496/#_2</a></li><li><a href="https://bbs.pediy.com/thread-265936.htm#msg_header_h1_2">https://bbs.pediy.com/thread-265936.htm#msg_header_h1_2</a>  </li><li><a href="https://paper.seebug.org/1732/#afl-afl-asc">https://paper.seebug.org/1732/#afl-afl-asc</a></li><li><a href="https://www.anquanke.com/post/id/250540#h2-5">https://www.anquanke.com/post/id/250540#h2-5</a></li><li><a href="https://linux.cmsblogs.cn/">https://linux.cmsblogs.cn/</a>    —-查询linux命令的网站</li></ol>]]></content>
      
      
      <categories>
          
          <category> 毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
            <tag> AFLGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国政府与经济发展</title>
      <link href="/2022/01/20/zhong-guo-zheng-fu-yu-jing-ji-fa-zhan/"/>
      <url>/2022/01/20/zhong-guo-zheng-fu-yu-jing-ji-fa-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="中国政府与经济发展"><a href="#中国政府与经济发展" class="headerlink" title="中国政府与经济发展"></a>中国政府与经济发展</h1><p>探究中国经济的发展，不能割裂开政府的作用。因为在我国，政府不但影响蛋糕的分配，也参与蛋糕的生产。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220120193437.png" alt="财税与政府行为"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220123192820.png" alt="土地财政与土地金融"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="关于债务到底在中国经济发展中起到了什么作用？"><a href="#关于债务到底在中国经济发展中起到了什么作用？" class="headerlink" title="关于债务到底在中国经济发展中起到了什么作用？"></a>关于债务到底在中国经济发展中起到了什么作用？</h3><p>举个例子，假如说</p><ul><li>A用100买了B的某个产品</li><li>B用这100支付给了C作为孩子上学的学费</li><li>C又用100发给了A作为工资</li></ul><p>那在这个过程中，经济发展了吗？</p><p>再比如</p><ul><li>A用100买了B的某个产品</li><li>B用这100支付给了C, 因为B之前欠C 100</li><li>C又用100发给了A作为工资</li></ul><p>在这个过程中，流通的钱还是100, 但是B已经还清了自己的债务。那这个过程中经济发展了吗？</p><blockquote><p>我觉得从自己举出的这个例子中，并不是很能看出过程中是否有社会财富的积累。</p></blockquote><hr><p>关于债务在经济发展中的作用，我在知乎上找到了一个非常形象的描述。</p><p>作者的主页 <a href="https://www.zhihu.com/people/he-jia-lei-80">https://www.zhihu.com/people/he-jia-lei-80</a></p><p><strong>现代世界经济发展，主要是靠债务驱动，通过扩大信贷来扩大整个市场。</strong></p><p>怎么理解这句话呢？我们回过头看看贵金属货币时期，社会的经济规模直接取决于贵金属的总量，想想看，本来有一块地方，有丰富的资源，但因为没有足够的贵金属货币，所以只能晾在那，贵金属的开采量限制了经济的发展。</p><p>后来犹太人就发明了债务货币化，简单来讲就是以贵金属货币或贵金属本位纸币为锚，利用存款派生来撬动整个市场规模，我就直接拿现代的例子来解释说明吧：现在有个菜农，还有一个建筑师，菜农想要请建筑师建一个房子，需要100万元，但菜农没那么多钱于是找银行申请贷款，贷款了100万通过电子转账给建筑师，这时候银行并不需要真的用到100万的现金，只需要在账户上操作下，这时候建筑师的电子账户瞬间多了100万，于是他给菜农建了一套房子，而菜农接下来的30年时间为了还款，于是不停的种菜卖菜，而建筑师因为有了100万的收入于是每天都找菜农买菜（也是通过电子转账），30年过后，债务还清了。</p><p>而这债务从发生到消亡的过程，社会上多了一个价值100万的房子，跟总值100万的菜，总共200万的产值（GDP），数倍于债务本身的产值。</p><h4 id="经济发展"><a href="#经济发展" class="headerlink" title="经济发展"></a>经济发展</h4><p>就当代经济而言，发展的含义相当丰富复杂。发展总是与发达、与工业化、与现代化、与增长之间交替使用。 一般来说，经济发展包括三层含义：<br>1.经济量的增长，即一个国家或地区产品和劳务的增加，它构成了经济发展的物质基础；<br>2.经济结构的改进和优化，即一个国家或地区的技术结构、产业结构、收入分配结构、消费结构以及人口结构等经济结构的变化；<br>3.经济质量的改善和提高，即一个国家和地区经济效益的提高、经济稳定程度、卫生健康状况的改善、自然环境和生态平衡以及政治、文化和人的现代化进程。<br>经济发展是通过经济结构的改进和优化、经济质量的改善和提高达到经济量的增长。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220123200009.png" alt="图解GDP"></p>]]></content>
      
      
      <categories>
          
          <category> 财经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中国经济发展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设-Fuzz-AFLGo源码阅读-4</title>
      <link href="/2022/01/19/bi-she-fuzz-aflgo-yuan-ma-yue-du-4/"/>
      <url>/2022/01/19/bi-she-fuzz-aflgo-yuan-ma-yue-du-4/</url>
      
        <content type="html"><![CDATA[<h1 id="毕设-Fuzz-AFLGo源码阅读-4"><a href="#毕设-Fuzz-AFLGo源码阅读-4" class="headerlink" title="毕设-Fuzz-AFLGo源码阅读-4"></a>毕设-Fuzz-AFLGo源码阅读-4</h1><h2 id="AFLGo在AFL的基础上的改进"><a href="#AFLGo在AFL的基础上的改进" class="headerlink" title="AFLGo在AFL的基础上的改进"></a>AFLGo在AFL的基础上的改进</h2><p>添加了模拟退火算法, 根据种子距离目标节点的距离来</p><h3 id="1-具体的距离目标taget的距离是怎么计算的"><a href="#1-具体的距离目标taget的距离是怎么计算的" class="headerlink" title="1. 具体的距离目标taget的距离是怎么计算的"></a>1. 具体的距离目标taget的距离是怎么计算的</h3><h3 id="2-模拟退火算法-是如何逐步退火？-amp-amp-是怎么挑选种子的？"><a href="#2-模拟退火算法-是如何逐步退火？-amp-amp-是怎么挑选种子的？" class="headerlink" title="2. 模拟退火算法, 是如何逐步退火？&amp;&amp; 是怎么挑选种子的？"></a>2. 模拟退火算法, 是如何逐步退火？&amp;&amp; 是怎么挑选种子的？</h3><p>AFL 的calculate_score函数是对 seed 进行打分，打分的分数决定对 seed fuzzing的时间长度，按照直觉来说，距离越近的 seed，有更大的概率能够到达目标点，则应该分配更多的时间给这些 seed。但是这样就会陷入上面所说的局部最优的困局里，于是 AFLGo 采用时间作为一个划分阶段的 metric，当 fuzzing 的时间在预定的时间内时，让时间较为公平的分配给每个 seed 上，当 fuzzing 时间超过了预定的时间后，时间就集中分配给哪些距离较近的 seed 上。这样可以在前期避免还未广泛探索就过度集中的局部最优的情况。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++"> u64 cur_ms &#x3D; get_cur_time(); u64 t &#x3D; (cur_ms - start_time) &#x2F; 1000;&#x2F;&#x2F; 计算当前运行时间 double progress_to_tx &#x3D; ((double) t) &#x2F; ((double) t_x * 60.0);&#x2F;&#x2F; 进度条，距离利用阶段的比例还有多少 double T; &#x2F;&#x2F;TODO Substitute functions of exp and log with faster bitwise operations on integers&#x2F;&#x2F; 这里根据fuzzing前的选项选择冷却时间的模型，是log函数，还是线性，还是指数等等 switch (cooling_schedule) &#123;   case SAN_EXP:     T &#x3D; 1.0 &#x2F; pow(20.0, progress_to_tx);     break;   case SAN_LOG:     &#x2F;&#x2F; alpha &#x3D; 2 and exp(19&#x2F;2) - 1 &#x3D; 13358.7268297     T &#x3D; 1.0 &#x2F; (1.0 + 2.0 * log(1.0 + progress_to_tx * 13358.7268297));     break;   case SAN_LIN:     T &#x3D; 1.0 &#x2F; (1.0 + 19.0 * progress_to_tx);     break;   case SAN_QUAD:     T &#x3D; 1.0 &#x2F; (1.0 + 19.0 * pow(progress_to_tx, 2));     break;   default:     PFATAL (&quot;Unkown Power Schedule for Directed Fuzzing&quot;); &#125; double power_factor &#x3D; 1.0; if (q-&gt;distance &gt; 0) &#123;    &#x2F;&#x2F; 首先归一化距离   double normalized_d &#x3D; 0; &#x2F;&#x2F; when &quot;max_distance &#x3D;&#x3D; min_distance&quot;, we set the normalized_d to 0 so that we can sufficiently explore those testcases whose distance &gt;&#x3D; 0.   if (max_distance !&#x3D; min_distance)     normalized_d &#x3D; (q-&gt;distance - min_distance) &#x2F; (max_distance - min_distance);   if (normalized_d &gt;&#x3D; 0) &#123;       double p &#x3D; (1.0 - normalized_d) * (1.0 - T) + 0.5 * T;&#x2F;&#x2F; 计算p值，由距离和时间共同决定       power_factor &#x3D; pow(2.0, 2.0 * (double) log2(MAX_FACTOR) * (p - 0.5));&#x2F;&#x2F; 最后根据p值计算得到factor，   &#125;&#x2F;&#x2F; else WARNF (&quot;Normalized distance negative: %f&quot;, normalized_d); &#125; perf_score *&#x3D; power_factor;&#x2F;&#x2F; 乘上factor得到最后的score<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>也就是说，得分score计算的公式是由距离和时间共同决定的，你要搞清楚，<strong>并不是每一次fuzz都会选择score分数最高的种子，而是分配更多的havoc时间给这样的seed</strong>。刚开始种子是比较公平的分配到每个seed，这类似–无差别探索阶段。后来，当预定的时间已过。距离较近的seed就会拥有更高的分数，从而在固定的时间段内占有更长时间的havoc，以增加到达taget的几率。</p></blockquote><h3 id="3-一个是函数距离，一个是基本块之间的距离，这两个距离之间是如何作用的呢？"><a href="#3-一个是函数距离，一个是基本块之间的距离，这两个距离之间是如何作用的呢？" class="headerlink" title="3. 一个是函数距离，一个是基本块之间的距离，这两个距离之间是如何作用的呢？"></a>3. 一个是函数距离，一个是基本块之间的距离，这两个距离之间是如何作用的呢？</h3><p>先看一下什么叫做控制流图</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220207203351.png" alt="控制流图CFG(Control Flow Graph)"></p><p>这两个是从源码角度分析的</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220207211040.png" alt="函数距离计算公式"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220207211712.png" alt="BB-Distance距离计算公式"></p><blockquote><p>结合的地方<br>Also, for each basic block in control flow graph of current function, we collect all functions it calls using <code>BBcalls.txt</code>. Among these functions that have <code>cg_distance</code>, AFLGO get the minimum of these and set <code>bb_distance</code> to it.</p></blockquote><p>下面这两个估计是从论文角度分析的，那可能源码在实现上和论文有一定的区别。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220207212823.png" alt="函数层面距离计算"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220207212850.png" alt="基本块层面距离计算"></p><h3 id="4-我应该怎么设计我的算法？"><a href="#4-我应该怎么设计我的算法？" class="headerlink" title="4. 我应该怎么设计我的算法？"></a>4. 我应该怎么设计我的算法？</h3><p>四个阶段</p><p>基于距离的模拟退火算法</p><ul><li>无差别探索阶段 Undifferentiated Exploration</li><li>短路径优先阶段 Short Path Priority</li></ul><p>基于基本块距离的模拟退火算法</p><ul><li>长路径探索    Long Path Exploration</li><li>长路径优先    Long Path Priority</li></ul><ol><li>设置<code>bb_passed</code> 记录当前种子经过的基本块的数量</li><li>设置<code>is_longpathexploration</code> 当前这个种子是不是在长路径探索阶段被探索过</li></ol><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="calibrate-case-函数"><a href="#calibrate-case-函数" class="headerlink" title="calibrate_case 函数"></a>calibrate_case 函数</h3><p>里面 this calculates cur_distance这个看不懂啊，has_new_bits函数中包括了下面计算max_distance和min_distance的代码，为什么这里又再次包含了一遍。</p><h3 id="程序中所谓的seed到底是什么？"><a href="#程序中所谓的seed到底是什么？" class="headerlink" title="程序中所谓的seed到底是什么？"></a>程序中所谓的seed到底是什么？</h3><p><strong>是不同的测试文件</strong>，不是像你像的那样，从这个测试文件中读取内容然后再将一条条的内容进行测试</p><h3 id="为什么按照步骤执行ReadMe中的测试步骤，却不能生成dot文件呢？"><a href="#为什么按照步骤执行ReadMe中的测试步骤，却不能生成dot文件呢？" class="headerlink" title="为什么按照步骤执行ReadMe中的测试步骤，却不能生成dot文件呢？"></a>为什么按照步骤执行ReadMe中的测试步骤，却不能生成dot文件呢？</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220221171732.png" alt="无法生成dot文件"></p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h3><p>Sudo 的全称为：super user do。 顾名思义：干超级用户才能干的事！所以Sudo最常用的功能就是提升一个命名的执行权限。</p><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>向量（Vector）是一个封装了动态大小数组的顺序容器（Sequence Container）。跟任意其它类型容器一样，它能够存放各种类型的对象。可以简单的认为，向量是一个能够存放任意类型的动态数组。</p><h3 id="程序是如何保留debug信息的呢？"><a href="#程序是如何保留debug信息的呢？" class="headerlink" title="程序是如何保留debug信息的呢？"></a>程序是如何保留debug信息的呢？</h3>]]></content>
      
      
      <categories>
          
          <category> 毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
            <tag> AFLGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OneToOne-1</title>
      <link href="/2022/01/06/onetoone-1/"/>
      <url>/2022/01/06/onetoone-1/</url>
      
        <content type="html"><![CDATA[<h1 id="OneToOne-1"><a href="#OneToOne-1" class="headerlink" title="OneToOne-1"></a>OneToOne-1</h1><p>比赛时间：2022/1/4</p><p>不知不觉，已经到了大四上学期结束的时候了。跟狗子的单挑也从大一持续到了现在。 这学期的单挑，真的是没赢过啊。确实是有机会赢，但是自己没有把握住。虽然自己矮十几厘米，但是我还算比较有韧性把。很多时候，我都会怀疑自己会输。可总是会咬牙坚持到最后。尤其是最近刚刚打过的这次。</p><p>5局3胜制，我开局以0比2落后。面对比自己高比自己壮的人，我很难不产生一种要服输的心理。三分真的算是我位数不多的得分手段了，如果三分球投不进，我真的很难赢。我不断在心里默默地给自己加油，鼓励自己坚持下去。果然，连续翻了2局。</p><p>最后一局，也是打到了10比10平(11分制)。首先的球权是在我手里，但是我没有把握住机会。不知道为什么，在习惯了以三分作为自己的得分手段之后，以前我非常擅长的中距离变得非常陌生。没办法判断到底什么时机是合适的出手机会。所以啊，还是要继续努力才行。生活中比较庆幸地也是有这样的朋友把，大家就不断互相进步。</p><p>其实把，想赢的心理在我心中一直都有。只不过，确实有的时候会动摇。你会怀疑自己到底能不能赢。就像在面对生活中的困难一样，我觉得正常的人可能都会质疑自己是否能挺过难关，是否能真正地坚持下去。但无疑，坚持下去大多时候会有一个比自己预期要好的结果。就像这次单挑一样，0比2落后，我真的怀疑自己了。但是我心里告诉自己，一定要坚持下去，没有结束，凭什么就这么服输，三分不可能一直投不进。</p><p>我经常会以这些看似鸡汤话鼓励一些在生活中过的不那么如意的人，<strong>有些人总是会说: 只不过是你运气好罢了。</strong> 我觉得他们说的很正确，之所以我有今天的价值观，无非是在我的经历中，坚持下去的做法带来了较多积极的效果。 即使是这样，我仍不觉得我鼓励别人积极乐观地生活是错的，因为我觉得，坚持下去的结果总比放弃的结果好。<strong>哪怕你这次说我没有站在你的角度上思考问题，下次我还是会这么鼓励你。</strong></p><p>回想一下，从刚上大学到现在，坚持练球的过程真的带给我很多生活中的道理。从习惯性一个人为了自己的目标努力，到不因为眼前的困难而放弃，到如何在别人的嘲笑下依旧坚持自己，再到学会把眼光放得长远。我不知道是不是每个打球的人都能体会到这些，但显然善于体味生活的人一定会从中得到很多属于自己的故事。</p><p><strong>我的高中班主任曾经说我打球的原因，就是想耍帅。</strong>但事实是，我经常性地自己练球。 也并没有因此获得什么可以拿的出手的成绩。 可这些并没有影响到我对于篮球的喜爱。 还是那句话，我不是为了打败谁，也不是想成为像NBA球星一样的人物。 我的目标很简单：就是完成自己给自己设定的目标，也许这个目标在有些人看来不值一提。 可是我相信，慢慢地努力，总会达到我想要的效果。现实也正是如此。</p><p>很幸运，我遇到了篮球。要真的追想的话，也不知道具体自己什么时间就喜欢上了篮球。那种不求任何结果，慢慢享受打球过程和眼看着自己慢慢进步的感觉真的很美妙。 可惜，我在我专业课程的学习上并没有这种劲头。 我也喜欢，但没有那种痴迷式的喜欢。 造成的结果也清楚， 我只是比一部分人做得好，但成为不了那种比绝大部分人做得好的人。 哪怕我自己清楚这一点， 还是跟篮球一样， 我不是为了要比谁强，比谁更优秀，我只是像完成自己对自己设定的目标。</p><hr><p>老早就想写这样的总结了，还是往后拖了几天…. 也不知道自己写了点啥， 反正就当给生活留个纪念吧</p>]]></content>
      
      
      <categories>
          
          <category> 篮球 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OneToOne </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大四上学期总结</title>
      <link href="/2022/01/06/da-si-shang-xue-qi-zong-jie/"/>
      <url>/2022/01/06/da-si-shang-xue-qi-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>既然是学期总结，那总得说点自己的进步和值得记忆的事情吧。</p><p>首先。还是没有找到女朋友，<strong>一 我接触的女生确实不多</strong>，有的时候，我也很纳闷，在接触的女生中就没有一个可以使自己心动的？ 前端时间，一个关系非常好的女同学向我表白，但我真的是没有男女的情感在里面。于是我拒绝了她，不过好在大家的关系也并没有因此显的很尴尬。<strong>二 我并没有很想谈恋爱</strong> 我有我自己的生活，习惯了一个人做事情，反倒不太习惯两个人。 <strong>三 缺乏勇气</strong>  我必须承认自己是一个缺乏勇气的人，在路上看到有些稍微心动的女生，不敢上去要个微信。也许要了也是白要，我总是这样告诉自己。</p><p>接着。就是保研，这个东西确实是个惊喜吧，也确实有运气成分再里面。 我并不认为自己和优秀能扯上关系，至少在学习方面是这样的。</p><p>然后。自己把三分球慢慢地练出来了，也找到了算是比较合适的训练方法。虽然命中率还是不稳定，有的时候还是比较准的。</p><p>还有。 学着去看书，以前我总觉得看书没啥用，在静下心来去阅读一些书籍的生活，才发现，书真的是跟优秀人交流非常好的方式。如果你的生活中没有一些很厉害的人能和你交流，我觉得看他写的书，多多少少还是有些收获的。那就不能不提我看书最大的一个收获就是:<strong>不要轻易地下结论，无论是对人还是对事。</strong> 因为感觉很多事情，远远比我想象中的要复杂，或者即使它很简单，在执行的过程中依然会遇到各种非常难以解决和调和的问题。 另外就是哲学家真的很厉害，尤其是罗素*–ps 看过&lt;幸福之路&gt;，虽然没记住多少，心灵还是很受震撼的*</p><p>emm。 结交了一个非常优秀的朋友，人长得又高又帅。努力拼搏，对自己未来有规划。不像俺，没啥清晰的目标，还不如人家勤奋。</p><p>最后。 2021年的最后一天去欢乐谷体验了一把大摆锤。就是那种摆上去又把你摆下来的，不得不说，要不是没有我朋友鼓励，我还真的不敢坐。也算是挑战了自己一把，不过我还是暗暗发誓：我再也不做了。</p><p>至于活动方面，参与过学校人大换届选举，也当过核酸检测的志愿者。这些活动也更加证实我从书中获得的收获—:<strong>不要轻易地下结论，无论是对人还是对事。</strong> 动不动就开始吐槽和埋怨，既不利于事情的解决，也容易陷入片面思考的误区。</p><p>至于照片，寒假有空就把自己手机当中的照片整理一下把。</p>]]></content>
      
      
      <categories>
          
          <category> 学期总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大四上 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大四上寒假计划</title>
      <link href="/2022/01/06/da-si-shang-han-jia-ji-hua/"/>
      <url>/2022/01/06/da-si-shang-han-jia-ji-hua/</url>
      
        <content type="html"><![CDATA[<p>寒假计划</p><ul><li><input disabled="" type="checkbox"> 力量训练–争取每一次都做到训练的标准，而不是消耗性的运动</li><li><input disabled="" type="checkbox"> 毕设一定要稳步推进</li><li><input disabled="" type="checkbox"> 学会做更多的菜，尝试去做蛋糕</li><li><input disabled="" type="checkbox"> 多跟着奶奶置办一些年货</li><li><input disabled="" type="checkbox"> 去走动亲戚，尤其是那种好几年都没回来过的。<strong>不要找一些冠冕堂皇的借口，其实你就是懒！</strong></li><li><input disabled="" type="checkbox"> 不要跟家里人生气，争取一次都不要</li><li><input disabled="" type="checkbox"> 再配一副眼镜，去体育公园打打球</li><li><input disabled="" type="checkbox"> 买到自己想要的新年衣服</li><li><input disabled="" type="checkbox"> 留意一下家里有没有什么合适的女朋友 😀~~~ (？！我劝你好自为之)</li></ul><p>暂时就是这些，希望寒假回来的时候，能都打上√</p>]]></content>
      
      
      <categories>
          
          <category> 寒假计划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大四上 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设-Fuzz-AFLGo源码阅读-3</title>
      <link href="/2022/01/02/bi-she-fuzz-aflgo-yuan-ma-yue-du-3/"/>
      <url>/2022/01/02/bi-she-fuzz-aflgo-yuan-ma-yue-du-3/</url>
      
        <content type="html"><![CDATA[<h1 id="毕设-Fuzz-AFLGo源码阅读-3"><a href="#毕设-Fuzz-AFLGo源码阅读-3" class="headerlink" title="毕设-Fuzz-AFLGo源码阅读-3"></a>毕设-Fuzz-AFLGo源码阅读-3</h1><h2 id="AFL框架"><a href="#AFL框架" class="headerlink" title="AFL框架"></a>AFL框架</h2><h3 id="共享内存中的bitmap结构-amp-amp-forkserver机制"><a href="#共享内存中的bitmap结构-amp-amp-forkserver机制" class="headerlink" title="共享内存中的bitmap结构 &amp;&amp; forkserver机制"></a>共享内存中的bitmap结构 &amp;&amp; forkserver机制</h3><p>不太好描述，就直接放图上来了。  —其他的都写到注释里面了</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220118215515.jpg" alt="共享内存中的bitmap结构&amp;&amp;forkserver机制"></p><h2 id="Linux-C"><a href="#Linux-C" class="headerlink" title="Linux C"></a>Linux C</h2><h3 id="进程之间的信号是如何进行传递的"><a href="#进程之间的信号是如何进行传递的" class="headerlink" title="进程之间的信号是如何进行传递的"></a>进程之间的信号是如何进行传递的</h3><p>直接看下面的链接把</p><p><a href="https://www.bookstack.cn/read/linux-c/5016547c13b140cc.md#6b906b">https://www.bookstack.cn/read/linux-c/5016547c13b140cc.md#6b906b</a></p><h3 id="控制台和终端的关系"><a href="#控制台和终端的关系" class="headerlink" title="控制台和终端的关系"></a>控制台和终端的关系</h3><p><a href="https://www.cnblogs.com/sparkdev/p/11460821.html">https://www.cnblogs.com/sparkdev/p/11460821.html</a></p><p>在计算机里，把那套直接连接在电脑上的键盘和显示器就叫做控制台。而终端是通过串口连接上的，不是计算机自身的设备，而控制台是计算机本身就有的设备，一个计算机只有一个控制台。计算机启动的时候，所有的信息都会显示到控制台上，而不会显示到终端上。这同样说明，控制台是计算机的基本设备，而终端是附加设备。计算机操作系统中，与终端不相关的信息，比如内核消息，后台服务消息，都可以显示到控制台上，但不会显示到终端上。比如在启动和关闭 Linux 系统时，我们可以在控制台上看到很多的内核信息(下图来自 vSphere Client 中的 “Virtual Machine Console”)</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220103170553.png" alt="控制台"></p><p>现在终端和控制台都由硬件概念，逐渐演化成了软件的概念。<strong>简单的说，能直接显示系统消息的那个终端称为控制台，其他的则称为终端(控制台也是一个终端)。或者我们在平时的使用中压根就不区分 Linux 中的终端与控制台。</strong></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220103171552.png" alt="Linux上的终端"></p><h3 id="dev-urandom-dev-null"><a href="#dev-urandom-dev-null" class="headerlink" title="/dev/urandom /dev/null"></a>/dev/urandom /dev/null</h3><p>一个是随机数生成器, 另一个相当于空文件, 所有定向到这个地方的输入都会消失。</p>]]></content>
      
      
      <categories>
          
          <category> 毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
            <tag> AFLGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设-Fuzz-AFLGo源码阅读-2</title>
      <link href="/2021/12/22/bi-she-fuzz-aflgo-yuan-ma-yue-du-2/"/>
      <url>/2021/12/22/bi-she-fuzz-aflgo-yuan-ma-yue-du-2/</url>
      
        <content type="html"><![CDATA[<h1 id="毕设-Fuzz-AFLGo源码阅读-2"><a href="#毕设-Fuzz-AFLGo源码阅读-2" class="headerlink" title="毕设-Fuzz-AFLGo源码阅读-2"></a>毕设-Fuzz-AFLGo源码阅读-2</h1><h2 id="AFL框架"><a href="#AFL框架" class="headerlink" title="AFL框架"></a>AFL框架</h2><h3 id="共享内存中的bitmap结构"><a href="#共享内存中的bitmap结构" class="headerlink" title="共享内存中的bitmap结构"></a>共享内存中的bitmap结构</h3><p>TODO</p><h3 id="forkserver机制"><a href="#forkserver机制" class="headerlink" title="forkserver机制"></a>forkserver机制</h3><p>TODO </p><h2 id="Linux-C"><a href="#Linux-C" class="headerlink" title="Linux C"></a>Linux C</h2><h3 id="read-amp-amp-write"><a href="#read-amp-amp-write" class="headerlink" title="read &amp;&amp; write"></a>read &amp;&amp; write</h3><p>看这个书，这个上面写的很详细</p><p><a href="https://www.bookstack.cn/read/linux-c/c917e635f91d4a4f.md">https://www.bookstack.cn/read/linux-c/c917e635f91d4a4f.md</a></p><h3 id="itimerval"><a href="#itimerval" class="headerlink" title="itimerval"></a>itimerval</h3><p> <a href="https://beachboyy.blog.csdn.net/article/details/35569229?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-3.fixedcolumn&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-3.fixedcolumn">参考</a></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct itimerval &#123;    struct timeval it_interval; &#x2F;* 计时器重启动的间歇值 *&#x2F;    struct timeval it_value;    &#x2F;* 计时器安装后首先启动的初始值 *&#x2F;&#125;; struct timeval &#123;    long tv_sec;                &#x2F;* 秒 *&#x2F;    long tv_usec;               &#x2F;* 微妙(1&#x2F;1000000) *&#x2F;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码实现的功能：3秒钟后启动定时器，然后每隔1秒钟向终端打印count的递增值，当count到10时程序退出。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;stdio.h&gt;#include &lt;time.h&gt;#include &lt;sys&#x2F;time.h&gt;#include &lt;stdlib.h&gt;#include &lt;signal.h&gt;  static int count &#x3D; 0;  void set_timer()&#123;struct itimerval itv;  itv.it_value.tv_sec &#x3D; 3;    &#x2F;&#x2F;timer start after 3 seconds lateritv.it_value.tv_usec &#x3D; 0;  itv.it_interval.tv_sec &#x3D; 1;itv.it_interval.tv_usec &#x3D; 0;  setitimer(ITIMER_REAL,&amp;itv,NULL);&#125;  void signal_handler(int m)&#123;count ++;printf(&quot;%d\n&quot;,count);&#125;  int main()&#123;signal(SIGALRM,signal_handler);set_timer();while(count &lt; 10);exit(0);return 0; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="setsid"><a href="#setsid" class="headerlink" title="setsid()"></a>setsid()</h3><p>setsid主要是重新创建一个session,子进程从父进程继承了SessionID、进程组ID和打开的终端,子进程如果要脱离父进程，不受父进程控制，我们可以用这个setsid命令</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211223200534.png" alt="setsid ping 127.0.0.1"></p><p>可以发现即使我们按下<code>ctrl+c</code> ping命令依然在执行，也就是说ping命令脱离了父进程shell的控制。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211223200711.png" alt="ps -ef | grep ping"></p><h3 id="dup2"><a href="#dup2" class="headerlink" title="dup2"></a>dup2</h3><p>去看csdn这篇博客 <a href="https://blog.csdn.net/silent123go/article/details/71108501">https://blog.csdn.net/silent123go/article/details/71108501</a></p><p>从shell中运行一个进程，默认会有3个文件描述符存在(0、１、2)，0与进程的标准输入相关联，１与进程的标准输出相关联，2与进程的标准错误输出相关联，一个进程当前有哪些打开的文件描述符可以通过/proc/进程ID/fd目录查看。</p><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>很清楚</p><p><a href="https://www.bookstack.cn/read/linux-c/f72a2171d262cc79.md#783frj">https://www.bookstack.cn/read/linux-c/f72a2171d262cc79.md#783frj</a></p><h3 id="builtin-expect"><a href="#builtin-expect" class="headerlink" title="__builtin_expect"></a>__builtin_expect</h3><p>链接：<a href="https://www.jianshu.com/p/2684613a300f">https://www.jianshu.com/p/2684613a300f</a></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define likely(x) __builtin_expect(!!(x), 1) &#x2F;&#x2F;x很可能为真       #define unlikely(x) __builtin_expect(!!(x), 0) &#x2F;&#x2F;x很可能为假if(likely(value))  &#x2F;&#x2F;等价于 if(value)if(unlikely(value))  &#x2F;&#x2F;也等价于 if(value)example上面的代码中 gcc 编译的指令会预先读取 y &#x3D; -1 这条指令，这适合 x 的值大于 0 的概率比较小的情况。如果 x 的值在大部分情况下是大于 0 的，就应该用 likely(x &gt; 0)，这样编译出的指令是预先读取 y &#x3D; 1 这条指令了。这样系统在运行时就会减少重新取指了int x, y; if(unlikely(x &gt; 0))    y &#x3D; 1; else     y &#x3D; -1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><h3 id="fprintf"><a href="#fprintf" class="headerlink" title="fprintf"></a>fprintf</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211224190553.png" alt="fprintf"></p><h2 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h2><h3 id="零碎的知识"><a href="#零碎的知识" class="headerlink" title="零碎的知识"></a>零碎的知识</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220102144443.png" alt="mov指令"></p><p><a href="https://www.cnblogs.com/lsgxeva/p/11176000.html">深入浅出GNU X86-64 汇编</a></p><p><a href="https://www.cnblogs.com/yanghong-hnu/p/4705755.html">bss段，data段、text段、堆(heap)和栈(stack)</a></p><h3 id="XMM寄存器组"><a href="#XMM寄存器组" class="headerlink" title="XMM寄存器组"></a>XMM寄存器组</h3><p>除了我们已经讨论过的寄存器，现代处理器还有一些扩展。这些扩展体现在电路上，指令集上，有时候也会扩展一些很有用的寄存器。比较著名的扩展叫作 SSE (Streaming SIMD Extensions)，该扩展加入了新的 xmm 寄存器集合：xmm0，xmm1，…，xmm15。这些寄存器为 128 位宽，常用于两种任务：</p><ul><li>浮点数运算；以及</li><li>SIMD 指令集(这种指令一条指令可以操作多条数据)<br>常用的 mov 指令没有办法操作 xmm 寄存器。movq 指令可以代替用来拷贝 xmm 寄存器的低位(128 位中的低 64 位)，操作数的其中一个可以也是 xmm 寄存器，或者通用寄存器，或者内存(也得是 64 位)。</li></ul><p>为了填满 xmm 寄存器，你有两个选择：movdqa 和 movdqu。前者可以解释为“ move aligned double quad word”，移动两个对齐的 qword。后者是未对齐的版本。</p>]]></content>
      
      
      <categories>
          
          <category> 毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
            <tag> AFLGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设-Fuzz-AFLGo源码阅读-1</title>
      <link href="/2021/12/15/bi-she-fuzz-aflgo-yuan-ma-yue-du-1/"/>
      <url>/2021/12/15/bi-she-fuzz-aflgo-yuan-ma-yue-du-1/</url>
      
        <content type="html"><![CDATA[<h1 id="AFLGo源码阅读-1"><a href="#AFLGo源码阅读-1" class="headerlink" title="AFLGo源码阅读-1"></a>AFLGo源码阅读-1</h1><p>首先还是要从基础的C语言语句开始补起。</p><h2 id="AFL-代码覆盖率及其相关概念"><a href="#AFL-代码覆盖率及其相关概念" class="headerlink" title="AFL-代码覆盖率及其相关概念"></a>AFL-代码覆盖率及其相关概念</h2><p>原文：<a href="https://www.freebuf.com/vuls/197672.html">https://www.freebuf.com/vuls/197672.html</a></p><h3 id="1-代码覆盖率（Code-Coverage）"><a href="#1-代码覆盖率（Code-Coverage）" class="headerlink" title="1. 代码覆盖率（Code Coverage）"></a>1. 代码覆盖率（Code Coverage）</h3><p>代码覆盖率是一种度量代码的覆盖程度的方式，也就是指源代码中的某行代码是否已执行；对二进制程序，还可将此概念理解为汇编代码中的某条指令是否已执行。其计量方式很多，但无论是GCC的GCOV还是LLVM的SanitizerCoverage，都提供函数（function）、基本块（basic-block）、边界（edge）三种级别的覆盖率检测，更具体的细节可以参考LLVM的官方文档。</p><h3 id="2-基本块（Basic-Block）"><a href="#2-基本块（Basic-Block）" class="headerlink" title="2. 基本块（Basic Block）"></a>2. 基本块（Basic Block）</h3><p>缩写为BB，指一组顺序执行的指令，BB中第一条指令被执行后，后续的指令也会被全部执行，每个BB中所有指令的执行次数是相同的，也就是说一个BB必须满足以下特征：</p><ul><li>只有一个入口点，BB中的指令不是任何跳转指令的目标。</li><li>只有一个退出点，只有最后一条指令使执行流程转移到另一个BB</li></ul><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211222151025.png" alt="基本块"></p><h3 id="3-边（edge）"><a href="#3-边（edge）" class="headerlink" title="3. 边（edge）"></a>3. 边（edge）</h3><p>我们可以将程序看成一个控制流图（CFG），图的每个节点表示一个基本块，而edge就被用来表示在基本块之间的转跳。知道了每个基本块和跳转的执行次数，就可以知道程序中的每个语句和分支的执行次数，从而获得比记录BB更细粒度的覆盖率信息。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211222151136.png" alt="CFG"></p><h3 id="4-元组（tuple）"><a href="#4-元组（tuple）" class="headerlink" title="4. 元组（tuple）"></a>4. 元组（tuple）</h3><p>具体到AFL的实现中，使用二元组(branch_src, branch_dst)来记录当前基本块 + 前一基本块 的信息，从而获取目标的执行流程和代码覆盖情况，伪代码如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">cur_location <span class="token operator">=</span> <span class="token operator">&lt;</span>COMPILE_TIME_RANDOM<span class="token operator">></span><span class="token punctuation">;</span>           <span class="token comment">//用一个随机数标记当前基本块</span>shared_mem<span class="token punctuation">[</span>cur_location <span class="token operator">^</span> prev_location<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>     <span class="token comment">//将当前块和前一块异或保存到shared_mem[]</span>prev_location <span class="token operator">=</span> cur_location <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>              <span class="token comment">//cur_location右移1位区分从当前块到当前块的转跳</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>实际插入的汇编代码，如下图所示，首先保存各种寄存器的值并设置ecx/rcx，然后调用__afl_maybe_log，这个方法的内容相当复杂，这里就不展开讲了，但其主要功能就和上面的伪代码相似，用于记录覆盖率，放入一块共享内存中。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211222151618.png" alt="IDA中的汇编代码"></p><blockquote><p>关于这个过程后续肯定要弄的非常清楚才行， 因为要添加一个基于基本块覆盖率的模拟退火算法，这样的扩展应该加在什么地方，以及怎么实现都需要把这个过程弄清楚。</p></blockquote><h2 id="C-知识"><a href="#C-知识" class="headerlink" title="C 知识"></a>C 知识</h2><h3 id="C-预处理"><a href="#C-预处理" class="headerlink" title="C 预处理"></a>C 预处理</h3><p>C 预处理器不是编译器的组成部分，但是它是编译过程中一个单独的步骤。简言之，C 预处理器只不过是一个文本替换工具而已，它们会指示编译器在实际编译之前完成所需的预处理。我们将把 C 预处理器（C Preprocessor）简写为 CPP。</p><p>所有的预处理器命令都是以井号（#）开头。它必须是第一个非空字符，为了增强可读性，预处理器指令应从第一列开始。下面列出了所有重要的预处理器指令：</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211215211258.png" alt="预处理指令列表"></p><p>其他的详见菜鸟教程。<br><a href="https://www.runoob.com/cprogramming/c-preprocessors.html">https://www.runoob.com/cprogramming/c-preprocessors.html</a></p><h3 id="C-C-中-volatile-关键字详解"><a href="#C-C-中-volatile-关键字详解" class="headerlink" title="C/C++ 中 volatile 关键字详解"></a>C/C++ 中 volatile 关键字详解</h3><p>C/C++ 中的 volatile 关键字和 const 对应，用来修饰变量，通常用于建立语言级别的 memory barrier。这是 BS 在 “The C++ Programming Language” 对 volatile 修饰词的说明：</p><blockquote><p>A volatile specifier is a hint to a compiler that an object may change its value in ways not specified by the language so that aggressive optimizations must be avoided.</p></blockquote><p>volatile 关键字是一种类型修饰符，用它声明的类型变量表示可以被某些编译器未知的因素更改，比如：操作系统、硬件或者其它线程等。遇到这个关键字声明的变量，编译器对访问该变量的代码就不再进行优化，从而可以提供对特殊地址的稳定访问。声明时语法：int volatile vInt; 当要求使用 volatile 声明的变量的值的时候，<strong>系统总是重新从它所在的内存读取数据</strong>，即使它前面的指令刚刚从该处读取过数据。而且读取的数据立刻被保存。例如:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">volatile</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> a <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">// 其他代码，并未明确告诉编译器，对 i 进行过操作</span><span class="token keyword">int</span> b <span class="token operator">=</span> i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>volatile 指出 i 是随时可能发生变化的，每次使用它的时候必须从 i的地址中读取，因而编译器生成的汇编代码会重新从i的地址读取数据放在 b 中。而<strong>优化</strong>做法是，由于编译器发现两次从 i读数据的代码之间的代码没有对 i 进行过操作，它会自动把上次读的数据放在 b 中。而不是重新从 i 里面读。这样以来，如果 i是一个寄存器变量或者表示一个端口数据就容易出错，所以说<strong>volatile 可以保证对特殊地址的稳定访问</strong>。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="程序处理中的控制流图和调用图"><a href="#程序处理中的控制流图和调用图" class="headerlink" title="程序处理中的控制流图和调用图"></a>程序处理中的控制流图和调用图</h3><h4 id="控制流图–Control-Flow-Graph"><a href="#控制流图–Control-Flow-Graph" class="headerlink" title="控制流图–Control Flow Graph"></a>控制流图–Control Flow Graph</h4><p>控制流图(Control Flow Graph, CFG)也叫控制流程图，是一个过程或程序的抽象表现，是用在编译器中的一个抽象数据结构，由编译器在内部维护，代表了一个程序执行过程中会遍历到的所有路径。它用图的形式表示一个过程内所有基本块执行的可能流向, 也能反映一个过程的实时执行过程。Frances E. Allen于1970年提出控制流图的概念。此后，控制流图成为了编译器优化和静态分析的重要工具。</p><p>原文：<br>In a control-flow graph each node in the graph represents a basic block, i.e. a straight-line piece of code without any jumps or jump targets; jump targets start a block, and jumps end a block. Directed edges are used to represent jumps in the control flow. There are, in most presentations, two specially designated blocks: the entry block, through which control enters into the flow graph, and the exit block, through which all control flow leaves.<br>译文：<br>在控制流图中，图中的每个节点代表一个基本块，即一段没有任何跳转或跳转目标的直线代码；跳转目标开始一个块，而跳转结束一个块。有向边用来表示控制流中的跳转。在大多数演示中，有两个特别指定的块：入口块，控制通过它进入流程图；出口块，所有控制流通过它离开。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211219105935.png" alt="控制流图的几种结构"></p><p><strong>特点</strong>:</p><ul><li>控制流程图是过程导向的</li><li>控制流程图显示了程序执行过程中可以遍历的所有路径</li><li>控制流程图是一个有向图</li><li>CFG 中的边描述控制流路径，节点描述基本块</li><li>每个控制流图都存在2个指定的块：Entry Block(输入块)，Exit Block(输出块)</li></ul><h4 id="函数调用图-Function-Call-Graph"><a href="#函数调用图-Function-Call-Graph" class="headerlink" title="函数调用图 Function Call Graph"></a>函数调用图 Function Call Graph</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211219111655.png" alt="函数调用图"></p><h3 id="插桩怎么实现"><a href="#插桩怎么实现" class="headerlink" title="插桩怎么实现"></a>插桩怎么实现</h3><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="make-和-make-install-的区别"><a href="#make-和-make-install-的区别" class="headerlink" title="make 和 make install 的区别"></a>make 和 make install 的区别</h3><p>简单来说，make 是编译，make install 是安装。</p><p>总结：linux编译安装中configure、make和make install各自的作用</p><p>./configure是用来检测你的安装平台的目标特征的。比如它会检测你是不是有CC或GCC，并不是需要CC或GCC，它是个shell脚本。</p><p>make是用来编译的，它从Makefile中读取指令，然后编译。</p><p>make install是用来安装的，它也从Makefile中读取指令，安装到指定的位置。</p><p>1、configure</p><p>这一步一般用来生成 Makefile，为下一步的编译做准备，你可以通过在 configure 后加上参数来对安装进行控制，比如代码:./configure –prefix=/usr上面的意思是将该软件安装在 /usr 下面，执行文件就会安装在 /usr/bin.同时一些软件的配置文件你可以通过指定 –sys-config= 参数进行设定。有一些软件还可以加上 –with、–enable、–without、–disable 等等参数对编译加以控制，你可以通过允许 ./configure –help 察看详细的说明帮助。</p><p>2、make</p><p>这一步就是编译，大多数的源代码包都经过这一步进行编译（当然有些perl或Python编写的软件需要调用perl或python来进行编译）。如果 在 make 过程中出现 error ，你就要记下错误代码（注意不仅仅是最后一行），然后你可以向开发者提交 bugreport（一般在 INSTALL 里有提交地址），或者你的系统少了一些依赖库等，这些需要自己仔细研究错误代码。make 的作用是开始进行源代码编译，以及一些功能的提供，这些功能由他的 Makefile 设置文件提供相关的功能，比如 make install 一般表示进行安装，make uninstall 是卸载，不加参数就是默认的进行源代码编译。<br>make 是 Linux 开发套件里面自动化编译的一个控制程序，他通过借助 Makefile 里面编写的编译规范进行自动化的调用 gcc 、ld 以及运行某些需要的程序进行编译的程序。一般情况下，他所使用的 Makefile 控制代码，由 configure 这个设置脚本根据给定的参数和系统环境生成。</p><p>3、make install</p><p>这条命令来进行安装（当然有些软件需要先运行 make check 或 make test来进行一些测试），这一步一般需要你有 root 权限（因为要向系统写入文件）</p><blockquote><p>作者：cuteximi_1995 链接：<a href="https://www.jianshu.com/p/c70afbbf5172">https://www.jianshu.com/p/c70afbbf5172</a> 来源：简书</p></blockquote><h3 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h3><p>Makefile给我的感觉，就好像是另一种编程语言一样。</p>]]></content>
      
      
      <categories>
          
          <category> 毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
            <tag> AFLGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设-Fuzz-论文1</title>
      <link href="/2021/12/09/bi-she-fuzz-lun-wen-1/"/>
      <url>/2021/12/09/bi-she-fuzz-lun-wen-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Directed-Greybox-Fuzzing"><a href="#Directed-Greybox-Fuzzing" class="headerlink" title="Directed Greybox Fuzzing"></a>Directed Greybox Fuzzing</h1><p>第一次完全从头看到尾的十六页的论文, 一方面是为了清楚AFLGo实现的原理, 另一方面是为开题报告积累一些材料. 后面, 还需要再把介绍AFL框架的论文看一遍. 因为AFLGo是以其为基础进行扩展的. 那想要了解地更深入, 就不可避免地要把基础搞懂.</p><p>这篇论文读下来, 发现AFLGo是在AFL的基础上添加了模拟退火算法. 其他的,因为看论文的时间过去了一段时间, 居然就都忘记了.</p><p>AFL重要的设计思想因为没有论文只能是去看项目中的txt, 很多东西也是看不太懂. 只能慢慢地硬啃了……</p>]]></content>
      
      
      <categories>
          
          <category> 毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设-Fuzz-8</title>
      <link href="/2021/12/06/bi-she-fuzz-8/"/>
      <url>/2021/12/06/bi-she-fuzz-8/</url>
      
        <content type="html"><![CDATA[<h1 id="NoteBook阅读"><a href="#NoteBook阅读" class="headerlink" title="NoteBook阅读"></a>NoteBook阅读</h1><h1 id="Parser"><a href="#Parser" class="headerlink" title="Parser"></a>Parser</h1><p>最近看的部分都是语法部分的, 从开始我们通过<strong>语法来表述各种语言</strong>. 到后面<strong>用设计好的语法来生成字符串.</strong></p><p>但是呢, 其实也可以反过来. 就是先给一个字符串, 用这个字符串分解成语法部分—也就是前面所说的<code>the derivation tree of that string</code>.然后我们再用这个tree去生成其他的测试数据.</p><blockquote><p>不过看了后面的例子, 他的意思是这样的. 我先已经有一个语法了, 但是呢, 这个语法的效果不是很好. 那么我们就需要从样本数据中提取模板. 然后在反过头去修改我们的语法. 这样可以使产生的数据更符合我们的要求. 换句话说, 就是有效的数据占比要更大.</p></blockquote><p><strong>这部分后面的代码就不看了. 我觉得我当下的重点, 也并不是完全读懂所有的代码逻辑. 而是清楚并了解fuzz相关的背景知识, 然后再去针对性的看论文和代码. 这样效率会更高一点吧.</strong></p><hr><p>看到后面这个部分的时候, 我突然感觉对于之前语法结构的理解有一些偏差.</p><p><code>noterminal</code> <code>terminal</code> <code>symbol</code>之间的关系和区别</p><p>原文中是这么说:</p><p>In the above expression, the rule <code>&lt;expr&gt;</code> : <code>[&lt;expr&gt; + &lt;expr&gt;, &lt;expr&gt; - &lt;expr&gt;, &lt;integer&gt;] </code> corresponds to how the nonterminal <code>&lt;expr&gt;</code> might be expanded. The expression <code>&lt;expr&gt; + &lt;expr&gt;</code> corresponds to one of the alternative choices. We call this an alternative expansion for the nonterminal <code>&lt;expr&gt;</code>. Finally, in an expression <code>&lt;expr&gt; + &lt;expr&gt;</code>, each of <code>&lt;expr&gt;</code>, <code>+</code>, and <code>&lt;expr&gt;</code> are symbols in that expansion. A symbol could be either a nonterminal or a terminal symbol based on whether its expansion is available in the grammar.</p><hr>]]></content>
      
      
      <categories>
          
          <category> 毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设-Fuzz-9</title>
      <link href="/2021/12/06/bi-she-fuzz-9/"/>
      <url>/2021/12/06/bi-she-fuzz-9/</url>
      
        <content type="html"><![CDATA[<h1 id="NoteBook阅读"><a href="#NoteBook阅读" class="headerlink" title="NoteBook阅读"></a>NoteBook阅读</h1><h2 id="Probabilistic-Grammar-Fuzzing"><a href="#Probabilistic-Grammar-Fuzzing" class="headerlink" title="Probabilistic Grammar Fuzzing"></a>Probabilistic Grammar Fuzzing</h2><p>我们可以根据我们的需要去生成测试数据, 可以给某个<code>expansion</code>很高的权重, 这样的话, 在生成的数据过程中, 这个<code>expansion</code>被选择的概率就很高. 最终数据中的占比也就比较高.</p><blockquote><p>下面原文的意思也就是上面所说的</p></blockquote><h3 id="Synopsis"><a href="#Synopsis" class="headerlink" title="Synopsis"></a>Synopsis</h3><p>To <a href="Importing.ipynb">use the code provided in this chapter</a>, write</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> fuzzingbook<span class="token punctuation">.</span>ProbabilisticGrammarFuzzer <span class="token keyword">import</span> <span class="token operator">&lt;</span>identifier<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>and then make use of the following features.</p><p>A <em>probabilistic</em> grammar allows to attach individual <em>probabilities</em> to production rules.  To set the probability of an individual expansion <code>S</code> to the value <code>X</code> (between 0 and 1), replace it with a pair</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span>S<span class="token punctuation">,</span> opts<span class="token punctuation">(</span>prob<span class="token operator">=</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>If we want to ensure that 90% of phone numbers generated have an area code starting with <code>9</code>, we can write:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> Grammars <span class="token keyword">import</span> US_PHONE_GRAMMAR<span class="token punctuation">,</span> extend_grammar<span class="token punctuation">,</span> opts<span class="token operator">>></span><span class="token operator">></span> PROBABILISTIC_US_PHONE_GRAMMAR<span class="token punctuation">:</span> Grammar <span class="token operator">=</span> extend_grammar<span class="token punctuation">(</span>US_PHONE_GRAMMAR<span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token operator">>></span><span class="token operator">></span>       <span class="token string">"&lt;lead-digit>"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">>></span><span class="token operator">></span>                           <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span>                           <span class="token punctuation">(</span><span class="token string">"9"</span><span class="token punctuation">,</span> opts<span class="token punctuation">(</span>prob<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>                       <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A <code>ProbabilisticGrammarFuzzer</code> will extract and interpret these options.  Here is an example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> probabilistic_us_phone_fuzzer <span class="token operator">=</span> ProbabilisticGrammarFuzzer<span class="token punctuation">(</span>PROBABILISTIC_US_PHONE_GRAMMAR<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span>probabilistic_us_phone_fuzzer<span class="token punctuation">.</span>fuzz<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'(918)925-2501'</span><span class="token punctuation">,</span> <span class="token string">'(981)925-0792'</span><span class="token punctuation">,</span> <span class="token string">'(934)995-5029'</span><span class="token punctuation">,</span> <span class="token string">'(955)999-7801'</span><span class="token punctuation">,</span> <span class="token string">'(964)927-0877'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>As you can see, the large majority of area codes now starts with <code>9</code>.</p><h3 id="Learning-Probabilities-from-Samples"><a href="#Learning-Probabilities-from-Samples" class="headerlink" title="Learning Probabilities from Samples"></a>Learning Probabilities from Samples</h3><p>对于<code>expasion</code>的权重来讲, 必须要通过人工设定. 我们可以通过学习样本数据来设定这样的权重.</p><p>Probabilities need not be set manually all the time.  They can also be <em>learned</em> from other sources, notably by counting <em>how frequently individual expansions occur in a given set of inputs</em>.  This is useful in a number of situations, including:</p><ol><li>Test <em>common</em> features.  The idea is that during testing, one may want to focus on frequently occurring (or frequently used) features first, to ensure correct functionality for the most common usages.</li><li>Test <em>uncommon</em> features.  Here, the idea is to have test generation focus on features that are rarely seen (or not seen at all) in inputs.  This is the same motivation as with <a href="GrammarCoverageFuzzer.ipynb">grammar coverage</a>, but from a probabilistic standpoint.</li><li>Focus on specific <em>slices</em>.  One may have a set of inputs that is of particular interest (for instance, because they exercise a critical functionality, or recently have discovered bugs).  Using this learned distribution for fuzzing allows us to <em>focus</em> on precisely these functionalities of interest.</li></ol><h3 id="Lessons-Learned"><a href="#Lessons-Learned" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h3><ul><li>By specifying probabilities, one can steer fuzzing towards input features of interest.</li><li>Learning probabilities from samples allows one to focus on features that are common or uncommon in input samples.</li><li>Learning probabilities from a subset of samples allows one to produce more similar inputs.</li></ul>]]></content>
      
      
      <categories>
          
          <category> 毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设-Fuzz-7</title>
      <link href="/2021/12/05/bi-she-fuzz-7/"/>
      <url>/2021/12/05/bi-she-fuzz-7/</url>
      
        <content type="html"><![CDATA[<h1 id="NoteBook阅读"><a href="#NoteBook阅读" class="headerlink" title="NoteBook阅读"></a>NoteBook阅读</h1><h2 id="Grammar-Coverage"><a href="#Grammar-Coverage" class="headerlink" title="Grammar Coverage"></a>Grammar Coverage</h2><p>在之前, 按照语法去去扩展生成字符串的时候, <strong>总是把各种扩展被选择的可能性相等化</strong>. 但是呢, 对于产生详细的综合性测试数据来说, <strong>更看重种类的最大化.(不一次又一次地重复相同的扩展)</strong></p><p>所以, 这小节就是为了解决这个问题. 当然, 在我们上一节的扩展中, 我们使用了<code>maxcost</code>和<code>mincost</code>两种方法, 也确实在一定程度上, 增大了种类的多样性,同时也避免了无限扩展的发生. 可能这一节会对这个问题展开更详细地解答把.</p><blockquote><p>毕竟从理论上来说, 更多地对产生输入数据路径的覆盖(<code>更高的语法覆盖率</code>)理论上会产生更高的<code>代码覆盖率</code>, 也就更有可能触发新的bug. 这也是这部分工作的意义</p></blockquote><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211205200902.png" alt="三种方法的效果对比"></p><h3 id="Synopsis"><a href="#Synopsis" class="headerlink" title="Synopsis"></a>Synopsis</h3><p>This chapter introduces <code>GrammarCoverageFuzzer</code>, an efficient grammar fuzzer extending <code>GrammarFuzzer</code> from the <a href="GrammarFuzzer.ipynb">chapter on efficient grammar fuzzing</a>.  It strives to <em>cover all expansions at least once,</em> thus ensuring coverage of functionality.</p><p>In the following example, for instance, we use <code>GrammarCoverageFuzzer</code> to produce an expression. We see that the resulting expression <strong>covers all digits and all operators in a single expression.</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">>></span> <span class="token string">'-(2 + 3) * 4.5 / 6 - 2.0 / +8 + 7 + 3'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Lessons-Learned"><a href="#Lessons-Learned" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h3><ul><li>Achieving <em>grammar coverage</em> quickly results in a large variety of inputs.</li><li>Duplicating grammar rules allows to cover elements in specific <em>contexts</em>.–这个点,我是真的不太理解, 相当于复制了很多副本进来. 这样就能实现很覆盖语法路径?</li><li>Achieving grammar coverage can help in obtaining <em>code coverage</em>.—这个东西, 要具体问题具体分析, 在有些问题上面, 语法覆盖率和代码覆盖率是正相关. 但并不代表所有的问题都是这样.</li></ul>]]></content>
      
      
      <categories>
          
          <category> 毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设-Fuzz-6</title>
      <link href="/2021/12/03/bi-she-fuzz-6/"/>
      <url>/2021/12/03/bi-she-fuzz-6/</url>
      
        <content type="html"><![CDATA[<h1 id="NoteBook阅读"><a href="#NoteBook阅读" class="headerlink" title="NoteBook阅读"></a>NoteBook阅读</h1><h2 id="GrammarFuzzer"><a href="#GrammarFuzzer" class="headerlink" title="GrammarFuzzer"></a>GrammarFuzzer</h2><p>这一小节讲的是, 将字符串的表现形式变成了树结构. 方便查找和更改</p><p>并且呢, 我们优化了之前根据语法生成数据的方法, ***(按照之前的方法生成测试数据,会发现大部分测试数据非常长,并没有很大的意义) *** 因为 <strong>如果不对非终止符的最大和最小值进行限制的话, 会分别导致无限循环和测试数据种类不全的问题</strong>.</p><p>之前算法的问题:</p><p>The problem of potentially infinite expansion is only one of the problems with <code>simple_grammar_fuzzer()</code>.  More problems include:</p><ol><li><p><em>It is inefficient</em>.  With each iteration, this fuzzer would go search the string produced so far for symbols to expand.  This becomes inefficient as the production string grows.— 效率比较低, 因为每次扩展的时候, 要搜素字符串去寻找相应的扩展symbol-(<code>前面算法里面加了很多正则匹配提取字符串的</code>), 字符串一长效率自然就低下来了. 不过, python中存储字符串的结构是什么? 应该是列表, 这样的话 肯定是不如树的遍历来的快一些.-(<code>不是很清楚到底是因为什么原因导致了, 生成测试字符串效率变高, 但无疑从结果的角度上面看的话, 改进之后的遍历方式确实要比之前快多了</code>)</p></li><li><p><em>It is hard to control.</em>  Even while limiting the number of symbols, it is still possible to obtain very long strings – and even infinitely long ones, as discussed above.—很难控制, 容易生成很长的字符串</p></li></ol><p>统一生成50个测试数据的话:</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211204154412.png" alt="改进前-Average time: 0.24"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211204154543.png" alt="改进后-Average time: 0.06"></p><blockquote><p>就感觉这一小节都在讲如何构建这个树结构, 以及采用何种策略拓展节点.(在设置的最大最小值的范围内)</p></blockquote><p><strong>The key idea in this chapter, namely expanding until a limit of symbols is reached, and then always choosing the shortest path, stems from Luke</strong></p><h3 id="Lessons-Learned"><a href="#Lessons-Learned" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h3><ul><li><em>Derivation trees</em> are important for expressing input structure</li><li><em>Grammar fuzzing based on derivation trees</em> <ol><li>is much more efficient than string-based grammar fuzzing,</li><li>gives much better control over input generation, and</li><li>effectively avoids running into infinite expansions.</li></ol></li></ul><h3 id="BNF语法"><a href="#BNF语法" class="headerlink" title="BNF语法"></a>BNF语法</h3><p>在上一小节中同样也用过BNF还有EBNF(BNF的一种增强型)</p><p>作者：不是Zoe<br>链接：<a href="https://www.zhihu.com/question/27051306/answer/579820547">https://www.zhihu.com/question/27051306/answer/579820547</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><p>BNF是John Backus 在20世纪90年代提出的用以简洁描述一种编程语言的语言。</p><p>基本结构为：<code>&lt;non-terminal&gt; ::= &lt;replacement&gt;</code> non-terminal意为非终止符，就是说我们还没有定义完的东西，还可以继续由右边的replacement，也就是代替物来进一步解释、定义。</p><p>举个例子：在中文语法里，一个句子一般由“主语”、“谓语”和“宾语”组成，主语可以是名词或者代词，谓语一般是动词，宾语可以使形容词，名词或者代词。那么“主语”、“谓语”和“宾语”就是非终止符，因为还可以继续由“名词”、“代词”、“动词”、“形容词”等替代。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">例1. &lt;句子> ::= &lt;主语>&lt;谓语>&lt;宾语>例2. &lt;主语> ::= &lt;名词>|&lt;代词>例3. &lt;谓语>::=&lt;动词>例4. &lt;宾语>::=&lt;形容词>|&lt;名词>|&lt;代词>例5. &lt;代词>::=&lt;我>例6. &lt;动词>::=&lt;吃>例7. &lt;动词>::=&lt;喜欢>例8. &lt;名词>::=&lt;车>例9. &lt;名词>::=&lt;肉><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上，在<code>::=</code>左边的就是<code>non-terminal</code>非终止符，右边的就是<code>replacement</code>，可以是一系列的非终止符，如例1中的<code>replacement</code>便是后面例234左边的非终止符，也可以是终止符，如例56789的右边，找不到别的符号来进一步代替。因此，终止符永远不会出现在左边。一旦我们看到了终止符，这个描述过程就结束了。</p><h3 id="py高阶用法"><a href="#py高阶用法" class="headerlink" title="py高阶用法"></a>py高阶用法</h3><h4 id="可变参数-amp-amp-关键字参数"><a href="#可变参数-amp-amp-关键字参数" class="headerlink" title="可变参数&amp;&amp;关键字参数"></a>可变参数&amp;&amp;关键字参数</h4><p><strong>可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple</strong>,而<strong>关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>test<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token operator">**</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>test1<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"test"</span><span class="token punctuation">,</span>name1<span class="token operator">=</span><span class="token string">"test1"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'name1'</span><span class="token punctuation">:</span> <span class="token string">'test1'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>除了函数的传参, 在赋值的语句中也会出现可选参数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a b c"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span><span class="token operator">*</span>d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a b c d"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a b c <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> a b c d <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="repr-函数"><a href="#repr-函数" class="headerlink" title="repr() 函数"></a>repr() 函数</h4><p>repr() 函数将对象转化为供解释器读取的形式。<br><strong>参数</strong><br>object – 对象。<br><strong>返回值</strong><br>返回一个对象的 string 格式。</p><blockquote><p>这个函数有一说一, 还是不理解到底用处是啥. 有的时候传参不加repr(a)会说a缺少某个属性, 但是repr(a)按照上面的理解的话, 也只是变成了一个字符串. 那为什么就莫名其妙不缺少这个属性了.~~</p></blockquote><h4 id="递归加循环的写法"><a href="#递归加循环的写法" class="headerlink" title="递归加循环的写法"></a>递归加循环的写法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">all_terminals</span><span class="token punctuation">(</span>tree<span class="token punctuation">:</span> DerivationTree<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token punctuation">(</span>symbol<span class="token punctuation">,</span> children<span class="token punctuation">)</span> <span class="token operator">=</span> tree    <span class="token keyword">if</span> children <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token comment"># This is a nonterminal symbol not expanded yet</span>        <span class="token keyword">return</span> symbol    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token comment"># This is a terminal symbol</span>        <span class="token keyword">return</span> symbol    <span class="token comment"># This is an expanded symbol:</span>    <span class="token comment"># Concatenate all terminal symbols from all children</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>all_terminals<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> children<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="any-函数"><a href="#any-函数" class="headerlink" title="any()函数"></a>any()函数</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211203211320.png" alt="any函数"></p><h4 id="集合set"><a href="#集合set" class="headerlink" title="集合set()"></a>集合set()</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span>b<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span>c<span class="token operator">=</span> a<span class="token operator">|</span>b <span class="token comment"># 把a b集合拼接在一起,不重复的那种</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="print"><a href="#print" class="headerlink" title="print()"></a>print()</h4><blockquote><p>我这是来学习fuzz的? 还是在重新学习python的详细编程?</p></blockquote><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211204152407.png" alt="print()"></p>]]></content>
      
      
      <categories>
          
          <category> 毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动漫-进击的巨人</title>
      <link href="/2021/12/01/dong-man-jin-ji-de-ju-ren/"/>
      <url>/2021/12/01/dong-man-jin-ji-de-ju-ren/</url>
      
        <content type="html"><![CDATA[<p>本篇是在网上找到的, 自认为相对评价客观而且质量较高的. 原封不动的复制下来的. 即使是看了这篇文章, 仍然还是有很多问题我没有理解. </p><p>作者 杨宸<br><a href="https://www.artforum.com.cn/slant/13455">https://www.artforum.com.cn/slant/13455</a></p><p>一直以来, 我都认为只有文学作品才能达到这种高度. 现在才发现动漫也是文学作品. </p><ul><li><p><input checked="" disabled="" type="checkbox">  什么是决断主义? 什么是心理主义?</p><p>A: 这些应该也是日本动漫作品类型的分类, 也没查到很具体的定义.</p></li><li><p><input checked="" disabled="" type="checkbox">  斯德哥尔摩综合症在现实生活中体现的例子?</p><p>A: 这个感觉一句话概况的很好, <strong>人是可以被驯服的</strong> 人性能承受的恐惧是一条脆弱的底线，人在恐惧、饥饿面前一点点的被奴化，并非不想反抗，只是在特定环境下，失去了反抗的能力以及思维。</p></li><li><p><input checked="" disabled="" type="checkbox">  什么是世界系? 什么是幸存系?</p><p>A: 这两个是动漫作品的分类.<strong>“世界系”</strong> 所描述的作品群的特征是，“以故事主人公（我）和他所牵挂的女主角（你）的二人关系为中心，将小的日常性（你和我）的问题与‘世界的危机’、‘这个世界的终结’等抽象且非日常的大问题直接连接起来，舍弃一切中间具体的（社会性的）说明描写。”<br><strong>“幸存系”</strong> 以在特定战斗空间内发生的“生死斗争”为基本模式，“不战斗就会死”的幸存感弥漫其中，《死亡笔记》（2003-2006）、《反叛的鲁路修》（2006）便是其中的典型。</p></li></ul><p>其实, 我之前理解这部作品想传递的价值观非常简单. 是人类在面对未知世界不断探索的精神, 是在面对危险和内心极大恐惧时咬牙前行的勇气, 是在战争双方残酷战场上闪耀的微茫的人性的光辉, 是为了守护心爱的人奋不顾身的爱情, 是为了保全同胞不惜牺牲自己的友情. 结果, 作者却在第四季,一个接一个的打破了我之前想象好的所有的价值观. </p><ul><li>人类并没有灭绝. 反倒是壁内的各位被洗脑之后, 赶到了一个岛上自己封闭. 因为之前残暴的历史, 至今被人们甚至是自己的同胞视为恶魔.被无情的当作工具.</li><li>三笠和艾伦好像是个悲剧. 艾伦居然在说, 三笠是简单的把自己视为要守护的主人. 这一点真的是我最不能接受的. 那个曾经为了家人和朋友战斗的高大形象, 瞬间崩塌. 最后还让三笠等自己个十年?, 撒小孩子脾气. 真是~~. 无数次的保护, 换来的难道只是自己心爱的人说自己只是个奴隶? 如果预料到这, 艾伦还不如早点死了.</li><li>曾经调查军团各位战友的慷慨赴死到底是为了什么? 他们自认为是为了人类的生存事业而死, 但到最后换来是发动地鸣毁灭世界. 那么多人的牺牲, 在我看来,毫无意义.先是被始祖巨人洗脑, 再后来是被艾伦戏耍. 这难道就是棋子吗?</li><li>还有就像是傻子一样的艾伦, 最开始是因为自己妈妈被巨人吃掉, 到后来是因为他自己控制巨人把自己妈妈吃掉. 我真醉了………</li></ul><h1 id="进击的巨人"><a href="#进击的巨人" class="headerlink" title="进击的巨人"></a>进击的巨人</h1><p>致2000年后的你<br>2021.07.17 • 杨宸论《进击的巨人》结局为何失败</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211201110133.png" alt="《进击的巨人》TV版最终季剧照，2021"></p><p>漫画《进击的巨人》于4月9日完结后，关于大结局的讨伐之声便不绝于耳。神剧烂尾、结局崩坏是大部分读者给出的评价。诚然如此，不过，在大结局造成的创伤后应激反应平复之后，更值得追问的问题也许是，《巨人》的结局为何“失败”？或者说，在何种意义上，《巨人》的结局“失败”了？本文希望回到《巨人》的整体创作以及它侧身其中之特定的历史与现实，以穿透这一“失败”之本质，这也是今天我们还要谈论这部漫画的意义所在。</p><p>2009年，23岁的年轻人谏山创（Isayama Hajime）开始连载他的出道作《进击的巨人》，四年之后，《巨人》迎来了动画化，并迅速成为当季霸主，人气一路飞飙。到2020年，《巨人》漫画已经售出超9000万册。对于《巨人》的成功，Wit Studio动画公司的精良制作和泽野弘之（Sawano Hiroyuki）那磅礴悲壮的配乐功不可没，但更重要的是，谏山创为《巨人》打造的“世界”及萦绕其上的“谜团”。</p><p>一言蔽之，《进击的巨人》讲述了如同家畜般被“豢养”在三堵巨大高墙之内的人类与墙外不断捕食人类的巨人相抗争的故事。在“那一天”，因玛丽亚之墙被铠甲巨人和超大型巨人攻破，主角艾伦·耶格尔眼睁睁看着自己的母亲被巨人吞噬。人类家园沦丧，悲愤的艾伦发誓“要把它们全部驱逐出去，一匹不留”，而后他与青梅竹马的三笠、好友阿明加入了以探索墙外世界、与巨人斗争为己任的调查兵团。整个故事便围绕着艾伦及其所属的调查兵团展开。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211201110308.png" alt="《进击的巨人》TV版第一季剧照，2013"></p><p>乍一看，《巨人》几乎集齐了既往少年漫画必备的所有要素：庞大的世界观、中二感爆棚的主角、精彩绝伦的战斗场面（得益于“立体机动装置”带来的滑翔战斗模式）、伙伴间的羁绊……而且随着剧情展开，观众发现主角的身世没那么简单——“天选之子”，这更是少年漫主角的“标配”。然而，使《巨人》与此前《火影忍者》、《死神》、《海贼王》等主流少年漫区别开来的，却是其剧情的“残酷”。</p><p>和同时期引发热潮的《权力的游戏》类似，在《巨人》中，人命如草芥，死亡可以随时降临到任何人头上，而且是以极其残酷的方式。你认为可能是重要人物的角色，或许下一秒就被巨人掰断了脊骨，一口口嚼碎。《巨人》非常着力于刻画人类面对巨人时的恐惧，并以死前狰狞扭曲的表情来展现这种残酷之直观。即便是带领调查兵团取得诸多战果的大英雄埃尔文团长，在主动迎向猿巨人而英勇赴死的那一刻，脸上仍然非常明显地流露出了对于死亡的惧怖。《巨人》的生存哲学正是建立在这种死亡的直观之上：“<strong>那些勇敢的死者、那些可悲的死者，我们之所以能这么想，正是因为我们是生者。我们会死在这里，将意义托付给下一个生者，这就是与这个残酷世界抗争的唯一手段！</strong>”</p><p>在这个意义上，《巨人》可以被归入日本评论家宇野常宽（Uno Tsunehiro）所称的“幸存系”作品序列之中。宇野常宽认为，在2001年前后，日本出现了一种新的故事类型，这类故事以在特定战斗空间内发生的“生死斗争”为基本模式，“不战斗就会死”的幸存感弥漫其中，《死亡笔记》（2003-2006）、《反叛的鲁路修》（2006）便是其中的典型。因为1999年高见广春（Takami Koshun）的小说《大逃杀》可以被视为其先驱，所以这类故事又被称为“大逃杀系”。幸存系/大逃杀系的兴起在日本国内有着明确的现实动因：为了应对泡沫经济破灭后的“平成不况”，日本首相小泉纯一郎在21世纪初开始进行新自由主义的结构性改革。小泉改革的风格颇类当年的撒切尔夫人，力倡小政府，推行私有化。其中最著名的事件，便是小泉不惜冒巨大政治风险解散众议院也要将日本的邮政系统民营化。如此一来，国民生活被一股脑推给市场，虽然经济逐步复苏，但贫富差距也随之越拉越大。置身于这般弱肉强食的残酷市场竞争机制之中，年轻人可以无忧躺在床上看动漫打游戏当个家里蹲御宅族的日子一去不返，“不战斗/奋斗就会死”成为了年轻人的紧箍咒。用我们熟悉的话来说，2001年之后的日本年轻人，已经不再能够悠闲地躺平，只得参与到疯狂的内卷之中。</p><p>日本的情况其实内在于晚期资本主义的全球化进程之中。这也是为什么作为全球化进程副产品的9·11恐怖袭击可以被宇野常宽指认为“大逃杀”的现实开端。于是，正如麦克弗森（C. B. Macpherson）曾提示我们说，霍布斯提出“一切人对一切人的战争”的自然状态不过是对资本主义早期市场的隐喻那样，作为晚期资本主义文化逻辑的外显，一切人对一切人的“大逃杀”兴起了。</p><p>《巨人》无疑是这一思路的延续，然而，它还提供了更为激动人心的东西——它许诺了一个“外部”，一个“墙外的世界”，作为退离大逃杀状态的出口。而对这个出口的探索则与对“世界之谜”的解答相绑定：“为什么那天妈妈会被巨人吃掉”？巨人到底从何而来？墙外的世界是什么样子？……《巨人》最核心的价值——“进击”的“自由”——便是基于对这个既作为解释又作为解决的“墙外世界”之信念，所有的幸福和崇高，皆来源于此：那是得以理解我们为何不得不大逃杀的自由，那是可以免于大逃杀之恐怖残酷的自由，那是不必经历大逃杀也能昂首挺胸堂堂正正地“生活”下去的自由。</p><p>怀揣着这样的自由之信念，《巨人》在漫画第91话/动画最终季迎来了其最大的转折。</p><p>“海那边有自由。”</p><p>“不，海那边有敌人。”</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211201110345.png" alt="《进击的巨人》TV版第一季和最终季主海报对比：左边第一季海报上是艾伦面对袭来的铠甲巨人（莱纳），右边最终季海报是马莱战士莱纳面对袭来的进击的巨人（艾伦），视角完全反转.​"></p><p>在进入最后的“马莱篇”之前，巨人之谜已大半揭开：所谓巨人全是由与恶魔签订契约的尤弥尔之子民艾尔迪亚人变化而来。艾尔迪亚人曾凭借巨人之力屠戮过全世界。但到初代雷伊斯王时，由于厌倦了战争，王带领艾尔迪亚人退守帕拉迪岛，立下不战之誓，筑起三道高墙，消除民众记忆，从此与世隔绝。而另一部分滞留在大陆的艾尔迪亚人，则在大国马莱的统治下成为劣等民族，要么被用作无脑的战争怪兽，要么凭自己的努力成为马莱的战士，赢得荣誉马莱人的身份。作为惩罚，马莱不断将艾尔迪亚人流放到帕拉迪岛变成只会吞噬人类的无脑巨人，而为了夺取艾尔迪亚人掌握的始祖巨人之力以及帕拉迪岛上的资源，马莱派出战斗小队破坏玛丽亚之墙，则引发了所有的故事。</p><p>于是，在离开帕拉迪岛进入马莱篇之后，谏山创开始“自掘坟墓”，将作为《巨人》核心的自由之绝对价值给相对化了。这种相对化表现在叙述技法上，是从此前的艾尔迪亚视角转变为了（或曰增加了）马莱视角，而在主题上则是把“世界之谜”具体化为了“政治之谜”。</p><p>此前动不动就大喊大叫、情感波动巨大的中二主角艾伦，到了最终季“断裂”般地变为沉默寡言、高深莫测、独断专行的艾主席。他不动声色地推行着自己的隐秘计划，甚至不惜发动“地鸣”，让众多超大型巨人涉海而过，屠戮马莱无辜百姓。此前，观众都是通过艾伦的艾尔迪亚视角来观看巨人以及望向“墙外世界”，《巨人》的自由正是建立在这样的绝对观视之上。而到这里，无法进入艾主席视角的观众，只得通过此前的“敌人”马莱人的视角来观看似乎已然化身为恶魔的艾主席。在这样自反性的二阶观察之下，自由的绝对价值被瓦解了。调查兵团诸士兵的“死”开始变得不再那么崇高，甚至变得“可笑”，因为他们曾被认为是为了人类而牺牲，到头来却发现，他们不过是为两个民族/种族的继续相互屠戮作了炮灰。</p><p>而这种视角转变的基础，则是《巨人》通过引入民族国家议题，将对“世界真相”的本体论探寻降落为了对“世界难题”的政治性解决。这个难题首先在于：<strong>如果一个民族/种族可能会对另一个民族/种族构成威胁，那么如何处理这二者之间的关系？</strong> 该难题还有一个隐含的问题：<strong>如何处理这两个民族/种族之间的历史债务？</strong> 在此基础上，《巨人》通过“某族人可以把自己变为巨人”这样一个科幻般的设定，把这个难题推到了极端，构成了一个“政治绝境”：<strong>如果一个民族/种族的存在必定会对另一个民族/种族造成伤害，如何处理它们之间的关系？</strong> 在这种落实之下，曾经作为绝对独立的主体之自我实现的问题，立马被转变为了相对的主体间性问题，而且它还被牢牢地束缚在政治性的关系（甚至是你死我活的生死斗争）之中。于是，“世界”被瓦解了，取而代之的是民族国家的视域。</p><p>不过，这种“自掘坟墓”非但没有将《巨人》葬埋，反而开掘出了《巨人》在深度上超越以往同类型作品的可能性。</p><p>按照宇野常宽的论说，<strong>幸存系直接联系着决断主义的倾向</strong>，这是相对于1990年代“世界系”作品的心理主义倾向而言的。由日本评论家东浩纪（Azuma Hiroki）提出的世界系乃是一种越过社会、国家、历史，将自我与世界直接勾连的叙事想象力。这里的世界，用社会学家宫台真司（Miyadai Shinji）的话说，<strong>并非处于自我意识掌控之外的那个现实世界，而是被自我意识所标记的“世界”</strong>。换言之，<strong>世界系故事通过为自我所标记的“世界”来对自我进行无条件地认可，这样一种循环论证使世界系的主体获得了一种心理主义的完足感</strong>。典型代表便是1995年由庵野秀明监督的TV版动画《新世纪福音战士》（EVA）。宫台真司认为，EVA中世界之谜是作为自我之谜而存在的，对世界之谜的解决（人类补完）由是通过对自我之谜的解决（主人公碇真嗣内心的补完）来完成。因此，EVA的世界系实际上标记了一个“自我的时代”。</p><p>当然，<strong>世界系</strong>的出现本身也是晚期资本主义的文化逻辑在日本具体化的结果。在1990年代平成不况和奥姆真理教事件的冲击之下，其时的日本年轻人如同EVA的主人公碇真嗣一般，抱持着对父亲/社会的极大不信任感，并且意识到，在这个宏大叙事已然崩解的社会中，做出任何决断必然会伤害到他人，于是他们宁愿蜷缩在自己的岛宇宙之中，通过做一个躺平的死宅来实现某种抗拒。然而，如前文所述，2001年之后，这样的躺平不再可能。<strong>年轻人不得不在大逃杀之中成为一个决断主义者</strong>。不过，正如宇野常宽所提示的，决断主义并非对世界系的否定，毋宁说，它恰恰是接受了世界系的前提：<strong>做出决断，必定会伤害他人。但仍然要做出决断。这是被抛入残酷市场竞争机制之后的必然选择。每个人都选择自己想要尊奉的“神”，并通过将自己之神赋予超越异己诸神的普遍性来合理化自己的决断。但是这种普遍性只是虚妄。</strong> 换言之， <strong>决断主义者拥有的只是相对的真理，然而它被要求作为一种绝对真理来进行决断，由是伤害（对其他相对真理/小叙事的排斥）便不可避免。</strong> 在此基础上，幸存系既包含着决断主义，也包含着对互相伤害的决断主义之克服。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211201110628.png" alt="《死亡笔记》动画剧照，2006-2007."></p><p>但是怎么克服呢？回到心理主义的世界系吗？宇野常宽用大逃杀系作品《死亡笔记》的主人公夜神月来象征决断主义，并指出——碇真嗣无法阻止夜神月。</p><p>沿着这个思路，我们也许可以将《巨人》在马莱篇开始展开的剧情，视为探寻终结决断主义游戏的尝试。</p><p>前面说过，《巨人》的核心价值建立在对作为解释和解决的“墙外世界”之绝对信念之上，绝对信念导出了绝对自由。然而这种赖以建立“《巨人》大厦”的基础价值，在“墙外世界”被具象化之后，便被解释为了一种相对自由。换言之，决断主义主张的绝对价值被相对化了。通常的少年动漫，往往以几个稳固的核心价值（比如，正义、善良、自由、友爱、和平）为基础，并在此基础上展开主人公的成长故事，主人公的成长同时构成对这些作为基础的先验价值的习得和实践过程，因此无论故事世界如何被颠倒、角色们怎么打得天花乱坠，都不会动摇作品基础的核心价值，反而会强化它。这种教育主义的风格在少年动漫中比比皆是，《火影忍者》、《死神》、《海贼王》皆如此，更低龄向的作品更是以一种中世纪道德剧的作风将核心价值与人物进行直接对应（比如在《数码宝贝》中，八神太一对应勇气、石田大和对应友情等）。然而，在《巨人》这里，作为作品基础的核心价值被动摇了，这正是《巨人》超越此前教育主义少年动漫的地方：将自足的幻想世界祛魅化为一种决断主义并使之相对化。</p><p>但决断主义并不惧怕相对化。毋宁说，决断主义未能自觉的实质在于： <strong>重要的是决断本身，而非决断的内容。因此决断会给他人带来的伤害才根本不在考虑之列。</strong> 所以，即便使之相对化，把“未能自觉”变为“自觉”，仍然无法改变决断主义重在“决断”的立场。那么问题就变成了，通过怎样的相对化来终结决断主义的基础：大逃杀。</p><p>《巨人》的回答是：把它落实为政治问题。落实为政治问题，既是《巨人》将“解释”相对化的方法，也是它探索“解决”的方向。它通过引入两个民族国家（艾尔迪亚与马莱）以巨人之力（仿佛巨量的核武器）为核心的历史与当前的纷争，打开了一个朝向现实世界的窗口，通过这个窗口，当下的现实议题：历史债务问题、种族问题、民族国家问题开始涌入。《巨人》从对“外部”的追求开始，到后来发现不存在“外部”，“外部”就是“内部”，这使得它将问题变成了“外部”的实现，必须通过“内部”来完成。换言之，《巨人》将对大逃杀的解决放到了一个政治框架之中。<strong>这意味着要完成对决断主义的终结，必须要实现对历史债务与现实政治的覆写。</strong></p><p><strong>但这是一部漫画能完成的事情吗？</strong></p><p>《巨人》所能做的只是将作为决断主义者的艾伦摆到了一个主权者的位置上，并通过设定打开窗口让无法以“爽文”方式轻松解决的现实政治议题涌入。在这个意义上，艾伦不是鲁路修，艾伦比鲁路修难多了。</p><p>在终局之前，《巨人》最大的意义在于做出了这样一种努力的“姿态”：在这里，现实不是作为隐喻，而是作为无法消化的硬核，作为必须填补的空白，作为实在界朝向亚文化的想象力崩塌，而亚文化的想象力必须以某种方式“接住”它。</p><p>这就是《巨人》结局不失败的重要条件：以至少说得过去的方式，“接住”它，“解决”它。解决方式有上策有下策，要么谏山创确实聪明绝顶，想出了政治家们都无法想出的解决现实政治问题的方法，要么学习《反叛的鲁路修》和《守望者》，通过让主人公背负罪恶构造一种负面的共同体来维持脆弱的和平，要么利用关于巨人之力的剧情设定，在“巨人之力”这一“解释”之内完成对现实问题的想象性解决。总的来说，两条路：要么老实解决“政治之谜”，要么将“政治之谜”重新还原为“世界之谜”。无论好坏，在这两条路上，大致都能获得一个说得过去的结果。</p><p><strong>但《巨人》的失败就在于：谏山创没有选择任何一条解决路径，而径直跑回心理主义了！</strong></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211201111015.png" alt="《进击的巨人》TV版最终季剧照，2021."></p><p>最终话《朝向那棵树》中，与艾伦青梅竹马的三笠斩下了决断主义主权者艾伦的头颅。一切真相揭开：主权者艾伦在马莱篇中对三笠冷脸恶语相加，到头来面具拿下，不过是他在傲娇，“不要啊！那种事情不要啊！我希望三笠在我死之后还想着我，至少持续十年吧！” <strong>而他悍然发动地鸣灭世计划，不是要解决什么政治问题，只是希望三笠、阿明等好友通过阻止他来留下好名声，成为世界的英雄，就是说，他屠戮生灵，就是为了给好友留笔遗产，为了对好友的“爱”。</strong> 这一切，都发生在他拥有了看到过去未来的能力之后，而这一能力 <strong>非但没有让他拥有相对于过去未来因果律的自由，反而使得他成为了这一因果律的奴隶，他朝向一个既定的结果，按部就班地“自由”迈去。</strong>在这一过程中，作为“世界之谜”的巨人始祖尤弥尔与巨人之力被以一个长达两千年的<strong>斯德哥尔摩综合征</strong>(百度百科讲的很详细)之爱轻易打发掉。在这个意义上，艾伦与尤弥尔构成镜像，他们都透过“爱”来获得某种“解脱”。</p><p>谏山创曾言明受到过1980年代的美国漫画《守望者》（Watchmen）的影响。在《守望者》的结局中，曼哈顿博士通过背负屠杀各国人民的罪恶，成为世界共同的敌人来实现美苏的和解，这一制造负面共同体的解决方案，带有明显的冷战色彩。但这种解决方案在后世仍然不断被借用。大逃杀系作品《反叛的鲁路修》的结局便是如此。但《巨人》明显地认识到了这种解决的虚妄，但它也想不出或者不愿去想出一个解决。所以它干脆撒手不管回到自我之中。就此看来，碇真嗣并不用去阻止夜神月，面具揭开，碇真嗣就是夜神月。</p><p><strong>心理主义者通过解决自我之谜来解决世界之谜，决断主义者通过（试图）解决世界之谜来解决自我之谜，而伪装成决断主义者的心理主义者则比较实在，世界的归世界，自己的归自己，我只管活我的，世界，去他妈的。</strong></p><p><strong>在这一点上，《巨人》的结局失败了，它的失败在于承认了我们在现实结构面前的绝对无能。但在另一点上，它或许又成功了，它意识到无论如何我们都无法解决“世界之谜”，我们能解决的只有自己</strong>。于是，在《巨人》崩坏的结局处，我们似乎能看到对一种友爱的小共同体的倡导。而这恰是后来大火的《鬼灭之刃》等动画的基础。但这能构成一种新的解决方案吗？</p><p>宫台真司在1990年代曾提出“<strong>永无终结的日常</strong>”这一说法，后来被广泛引用，它同时构成了对无法期待一种变革的消费社会之平静的绝望的象喻：<strong>只要某种基础性的结构仍然继续存续，那么即便经历了大地震和核灾难，“日常”也一样永无终结。</strong>而这种基础性的结构，正是《巨人》所不愿面对的那个带来了大逃杀的“世界”。</p><p>1993年，日本漫画家冈崎京子（Okazaki Kyoko）在其作品《河畔》中借用威廉·吉布森“平坦的战场”的说法，来描述“永无终结的日常”的感受：“从一开始就丧失一切的孩子们。已经拥有一切，而为这些事必须放弃一切的孩子们。无力的王子与公主。没有深度、一片平坦像是舞台背景般的战场。他/她们绝不会有什么波涛汹涌的人生，只是持续驻足在短暂的永恒当中。”</p><p>如今，基础结构仍未改变，但“平坦的战场”似乎消失了。</p><p>《巨人》以“致2000年后的你”为开始，而它的结局则是在告诉公元2000年之后的你：</p><p><strong>我们知道我们只得不停地战斗，只是我们不知道我们的“战场”究竟位于何处。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 动漫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进击的巨人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设-Fuzz-5</title>
      <link href="/2021/11/30/bi-she-fuzz-5/"/>
      <url>/2021/11/30/bi-she-fuzz-5/</url>
      
        <content type="html"><![CDATA[<h1 id="Notebook阅读"><a href="#Notebook阅读" class="headerlink" title="Notebook阅读"></a>Notebook阅读</h1><h2 id="Grammars"><a href="#Grammars" class="headerlink" title="Grammars"></a>Grammars</h2><p>首先就是要讲, 为什么我们需要语法来规范测试数据的生成. 在之前的讲解中, 相比我们也已经很清楚了, 依靠随机生成的测试数据几乎没有几个符合程序输入(假设程序对输入的数据有严格的限制的话). <strong>为了提高生成测试数据的效率, 必须要采用语法对生成测试数据的过程进行限制.</strong></p><blockquote><p>Compilers and Web browsers, of course, are not only domains where grammars are needed for testing, but also domains where grammars are well-known. Our claim in this book is that grammars can be used to generate almost any input, and our aim is to empower you to do precisely that.–浏览器和编译器是比较常见的需要用语法进行规范测试的两种领域. 但是我们的目的是要用语法精准的生成任何你想要的输入数据.</p></blockquote><h3 id="如何构建语法"><a href="#如何构建语法" class="headerlink" title="如何构建语法"></a>如何构建语法</h3><p>语法是一个非终止符和代替扩张list的一个映射<br><strong>A grammar is defined as a mapping of nonterminal symbols to lists of alternative expansions</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> US_PHONE_GRAMMAR<span class="token punctuation">:</span> Grammar <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">>></span><span class="token operator">></span>     <span class="token string">"&lt;start>"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;phone-number>"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span>     <span class="token string">"&lt;phone-number>"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"(&lt;area>)&lt;exchange>-&lt;line>"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span>     <span class="token string">"&lt;area>"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;lead-digit>&lt;digit>&lt;digit>"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span>     <span class="token string">"&lt;exchange>"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;lead-digit>&lt;digit>&lt;digit>"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span>     <span class="token string">"&lt;line>"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;digit>&lt;digit>&lt;digit>&lt;digit>"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span>     <span class="token string">"&lt;lead-digit>"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">,</span> <span class="token string">"9"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span>     <span class="token string">"&lt;digit>"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"0"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">,</span> <span class="token string">"9"</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据语法生成数据就是首先从<code>start</code>标签开始, 将<code>start</code>标签用后面的<code>phone-number</code>替换–(<strong>如果start对应多个非终止符号的话, 那就是随机挑一个非终止符号进行替换</strong>), 再用<code>(&lt;area&gt;)&lt;exchange&gt;-&lt;line&gt;</code>替换<code>phone-number</code>(<strong>如果phone-number对应多个非终止符号的话, 那就是随机挑一个非终止符号进行替换</strong>), 重复操作, 直到后面没有非终止符号为止. (<strong>当然, 像digit这种并没有对应非终止符号的, 也是同样随机挑一个就行</strong>)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span>simple_grammar_fuzzer<span class="token punctuation">(</span>US_PHONE_GRAMMAR<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'(692)449-5179'</span><span class="token punctuation">,</span> <span class="token string">'(519)230-7422'</span><span class="token punctuation">,</span> <span class="token string">'(613)761-0853'</span><span class="token punctuation">,</span> <span class="token string">'(979)881-3858'</span><span class="token punctuation">,</span> <span class="token string">'(810)914-5475'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大体的思路上就是这些, 后面讲述的内容. 是<strong>如何更好更快地构建语法</strong>, 因为不可能说所有的语法规则都依靠人工构建. 需要让语法变得非常方便添加\方便加入一些更符合输入数据的限制.</p><h3 id="Lessons-Learned"><a href="#Lessons-Learned" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h3><ul><li>Grammars are powerful tools to express and produce syntactically valid inputs.</li><li>Inputs produced from grammars can be used as is, or <strong>used as seeds for mutation-based fuzzing.</strong></li><li>Grammars can be extended with character classes and operators to make writing easier.</li></ul><h3 id="py高阶用法"><a href="#py高阶用法" class="headerlink" title="py高阶用法"></a>py高阶用法</h3><h4 id="1-zip-longest"><a href="#1-zip-longest" class="headerlink" title="1 zip_longest"></a>1 zip_longest</h4><p>1、zip_longest需要导入itertools模块，且使用的时候需要指定一个填充值fillvalue。</p><p>2、当有可迭代对象遍历完，但其他对象还没有的时候，缺少的相应元素就会使用填充值进行填充。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> itertools <span class="token keyword">import</span> zip_longesta <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> num1<span class="token punctuation">,</span> num2 <span class="token keyword">in</span> zip_longest<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> fillvalue<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token comment"># 0 1</span><span class="token comment"># 1 2</span><span class="token comment"># 2 3</span><span class="token comment"># 3 4</span><span class="token comment"># 4 5</span><span class="token comment"># 5 6</span><span class="token comment"># 6 7</span><span class="token comment"># 7 8</span><span class="token comment"># 8 -1</span><span class="token comment"># 9 -1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-kwargs"><a href="#2-kwargs" class="headerlink" title="2 **kwargs"></a>2 **kwargs</h4><p><code>**kwargs</code> 允许你将不定长度的键值对, 作为参数传递给一个函数。 如果你想要在一个函数里处理带名字的参数, 你应该使用<code>**kwargs</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">greet_me</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> kwargs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125; == &#123;1&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> greet_me<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"yasoob"</span><span class="token punctuation">)</span>name <span class="token operator">==</span> yasoob<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-作用域和命名空间"><a href="#3-作用域和命名空间" class="headerlink" title="3 作用域和命名空间"></a>3 作用域和命名空间</h4><p>详见菜鸟教程 <a href="https://www.runoob.com/python3/python3-namespace-scope.html">https://www.runoob.com/python3/python3-namespace-scope.html</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">reachable_nonterminals</span><span class="token punctuation">(</span>grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">,</span>                           start_symbol<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> START_SYMBOL<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Set<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    reachable <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_find_reachable_nonterminals</span><span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> symbol<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">nonlocal</span> reachable <span class="token comment"># 这里用到了nonlocal</span>        reachable<span class="token punctuation">.</span>add<span class="token punctuation">(</span>symbol<span class="token punctuation">)</span>        <span class="token keyword">for</span> expansion <span class="token keyword">in</span> grammar<span class="token punctuation">.</span>get<span class="token punctuation">(</span>symbol<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> nonterminal <span class="token keyword">in</span> nonterminals<span class="token punctuation">(</span>expansion<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> nonterminal <span class="token keyword">not</span> <span class="token keyword">in</span> reachable<span class="token punctuation">:</span>                    _find_reachable_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> nonterminal<span class="token punctuation">)</span>    _find_reachable_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> start_symbol<span class="token punctuation">)</span>    <span class="token keyword">return</span> reachable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-set"><a href="#4-set" class="headerlink" title="4 set()"></a>4 set()</h4><p>set() 函数创建一个无序不重复元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>x <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'runoob'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'google'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">,</span> y<span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 重复的被删除</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">&amp;</span> y         <span class="token comment"># 交集</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'o'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">|</span> y         <span class="token comment"># 并集</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">-</span> y         <span class="token comment"># 差集</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-typing-Optional"><a href="#5-typing-Optional" class="headerlink" title="5 typing.Optional"></a>5 typing.Optional</h4><p><a href="https://blog.csdn.net/qq_44683653/article/details/108990873#:~:text=Python%20%E5%A4%A9%E7%94%9F%E4%B8%8D%E6%94%AF%E6%8C%81%20Option%20%E7%B1%BB%E5%9E%8B%EF%BC%8C%20typing%20%E6%9C%89%E4%B8%AA%20Optional%20%2C,%5B%20%28int%29%20-%3E%20Any%5D%27%20%28matched%20generic%20type%20%27Optiona">csdn</a></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211202112803.png" alt="typing.Optional"></p><blockquote><p>我觉得这几个函数写的非常好,简洁明了. 有些地方看的不是很懂,看来py的很多高级的用法并没有掌握到.</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>说实在的, 这一部分的思想是比较简单的, 但是在代码实现上, 确实用到了很多之前在写python程序时没有用到的写法,而且从代码书写的思路和简洁性上面来说, 比之前写的代码高了不知道几个档次. 再一次让我感觉到了, 原来写出来的代码可以这么写. 所以我在前面把这些方法都总结了下来, 包括后面的这些代码, 希望以后你可以多多的借鉴.  当然这也只是其中的一部分而已.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">def_used_nonterminals</span><span class="token punctuation">(</span>grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">,</span> start_symbol<span class="token punctuation">:</span>                           <span class="token builtin">str</span> <span class="token operator">=</span> START_SYMBOL<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Tuple<span class="token punctuation">[</span>Optional<span class="token punctuation">[</span>Set<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                                        Optional<span class="token punctuation">[</span>Set<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>       <span class="token triple-quoted-string string">"""Return a pair (`defined_nonterminals`, `used_nonterminals`) in `grammar`.    In case of error, return (`None`, `None`)."""</span>    <span class="token comment"># 这里为什么用元组呢? 是因为元组没有办法被删除嘛?</span>    defined_nonterminals <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    used_nonterminals <span class="token operator">=</span> <span class="token punctuation">&#123;</span>start_symbol<span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> defined_nonterminal <span class="token keyword">in</span> grammar<span class="token punctuation">:</span>        defined_nonterminals<span class="token punctuation">.</span>add<span class="token punctuation">(</span>defined_nonterminal<span class="token punctuation">)</span>        expansions <span class="token operator">=</span> grammar<span class="token punctuation">[</span>defined_nonterminal<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>expansions<span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>defined_nonterminal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": expansion is not a list"</span><span class="token punctuation">,</span>                  <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>expansions<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>defined_nonterminal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": expansion list empty"</span><span class="token punctuation">,</span>                  <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span>        <span class="token keyword">for</span> expansion <span class="token keyword">in</span> expansions<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>expansion<span class="token punctuation">,</span> <span class="token builtin">tuple</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                expansion <span class="token operator">=</span> expansion<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>expansion<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>defined_nonterminal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span>                      <span class="token operator">+</span> <span class="token builtin">repr</span><span class="token punctuation">(</span>expansion<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": not a string"</span><span class="token punctuation">,</span>                      <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span>            <span class="token keyword">for</span> used_nonterminal <span class="token keyword">in</span> nonterminals<span class="token punctuation">(</span>expansion<span class="token punctuation">)</span><span class="token punctuation">:</span>                used_nonterminals<span class="token punctuation">.</span>add<span class="token punctuation">(</span>used_nonterminal<span class="token punctuation">)</span>    <span class="token keyword">return</span> defined_nonterminals<span class="token punctuation">,</span> used_nonterminals<span class="token keyword">def</span> <span class="token function">reachable_nonterminals</span><span class="token punctuation">(</span>grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">,</span>                           start_symbol<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> START_SYMBOL<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Set<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    reachable <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_find_reachable_nonterminals</span><span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> symbol<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">nonlocal</span> reachable        reachable<span class="token punctuation">.</span>add<span class="token punctuation">(</span>symbol<span class="token punctuation">)</span>        <span class="token keyword">for</span> expansion <span class="token keyword">in</span> grammar<span class="token punctuation">.</span>get<span class="token punctuation">(</span>symbol<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> nonterminal <span class="token keyword">in</span> nonterminals<span class="token punctuation">(</span>expansion<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> nonterminal <span class="token keyword">not</span> <span class="token keyword">in</span> reachable<span class="token punctuation">:</span>                    _find_reachable_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> nonterminal<span class="token punctuation">)</span>    _find_reachable_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> start_symbol<span class="token punctuation">)</span>    <span class="token keyword">return</span> reachable<span class="token keyword">def</span> <span class="token function">unreachable_nonterminals</span><span class="token punctuation">(</span>grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">,</span>                             start_symbol<span class="token operator">=</span>START_SYMBOL<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Set<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> grammar<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> reachable_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> start_symbol<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">opts_used</span><span class="token punctuation">(</span>grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Set<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    used_opts <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> symbol <span class="token keyword">in</span> grammar<span class="token punctuation">:</span>        <span class="token keyword">for</span> expansion <span class="token keyword">in</span> grammar<span class="token punctuation">[</span>symbol<span class="token punctuation">]</span><span class="token punctuation">:</span>            used_opts <span class="token operator">|</span><span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>exp_opts<span class="token punctuation">(</span>expansion<span class="token punctuation">)</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> used_opts<span class="token keyword">def</span> <span class="token function">is_valid_grammar</span><span class="token punctuation">(</span>grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">,</span>                     start_symbol<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> START_SYMBOL<span class="token punctuation">,</span>                      supported_opts<span class="token punctuation">:</span> Set<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Check if the given `grammar` is valid.       `start_symbol`: optional start symbol (default: `&lt;start>`)       `supported_opts`: options supported (default: none)"""</span>    defined_nonterminals<span class="token punctuation">,</span> used_nonterminals <span class="token operator">=</span> \        def_used_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> start_symbol<span class="token punctuation">)</span>    <span class="token keyword">if</span> defined_nonterminals <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> used_nonterminals <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token comment"># Do not complain about '&lt;start>' being not used,</span>    <span class="token comment"># even if start_symbol is different</span>    <span class="token keyword">if</span> START_SYMBOL <span class="token keyword">in</span> grammar<span class="token punctuation">:</span>        used_nonterminals<span class="token punctuation">.</span>add<span class="token punctuation">(</span>START_SYMBOL<span class="token punctuation">)</span>    <span class="token keyword">for</span> unused_nonterminal <span class="token keyword">in</span> defined_nonterminals <span class="token operator">-</span> used_nonterminals<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>unused_nonterminal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": defined, but not used"</span><span class="token punctuation">,</span>              <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>    <span class="token keyword">for</span> undefined_nonterminal <span class="token keyword">in</span> used_nonterminals <span class="token operator">-</span> defined_nonterminals<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>undefined_nonterminal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": used, but not defined"</span><span class="token punctuation">,</span>              <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>    <span class="token comment"># Symbols must be reachable either from &lt;start> or given start symbol</span>    unreachable <span class="token operator">=</span> unreachable_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> start_symbol<span class="token punctuation">)</span>    msg_start_symbol <span class="token operator">=</span> start_symbol    <span class="token keyword">if</span> START_SYMBOL <span class="token keyword">in</span> grammar<span class="token punctuation">:</span>        unreachable <span class="token operator">=</span> unreachable <span class="token operator">-</span> \            reachable_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> START_SYMBOL<span class="token punctuation">)</span>        <span class="token keyword">if</span> start_symbol <span class="token operator">!=</span> START_SYMBOL<span class="token punctuation">:</span>            msg_start_symbol <span class="token operator">+=</span> <span class="token string">" or "</span> <span class="token operator">+</span> START_SYMBOL    <span class="token keyword">for</span> unreachable_nonterminal <span class="token keyword">in</span> unreachable<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>unreachable_nonterminal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": unreachable from "</span> <span class="token operator">+</span> msg_start_symbol<span class="token punctuation">,</span>              <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>    used_but_not_supported_opts <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>supported_opts<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        used_but_not_supported_opts <span class="token operator">=</span> opts_used<span class="token punctuation">(</span>            grammar<span class="token punctuation">)</span><span class="token punctuation">.</span>difference<span class="token punctuation">(</span>supported_opts<span class="token punctuation">)</span>        <span class="token keyword">for</span> opt <span class="token keyword">in</span> used_but_not_supported_opts<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>                <span class="token string">"warning: option "</span> <span class="token operator">+</span>                <span class="token builtin">repr</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span> <span class="token operator">+</span>                <span class="token string">" is not supported"</span><span class="token punctuation">,</span>                <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>    <span class="token keyword">return</span> used_nonterminals <span class="token operator">==</span> defined_nonterminals <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>unreachable<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设-Fuzz-4</title>
      <link href="/2021/11/27/bi-she-fuzz-4/"/>
      <url>/2021/11/27/bi-she-fuzz-4/</url>
      
        <content type="html"><![CDATA[<h1 id="NoteBook阅读"><a href="#NoteBook阅读" class="headerlink" title="NoteBook阅读"></a>NoteBook阅读</h1><h2 id="Mutation-Analyze"><a href="#Mutation-Analyze" class="headerlink" title="Mutation Analyze"></a>Mutation Analyze</h2><p>关于ast–<code>Abstract Syntax Trees</code> 可算是找到一篇讲的非常清楚的博客了. 看了之后自己又调试了一遍代码,清楚多了</p><p><a href="https://www.cnblogs.com/qiulinzhang/p/14258626.html">https://www.cnblogs.com/qiulinzhang/p/14258626.html</a></p><p>清楚这个之后,再去搞清楚这一小节写的代码逻辑,想必应该要轻松不少了.</p><h3 id="7-A-Simple-mutator-for-Function"><a href="#7-A-Simple-mutator-for-Function" class="headerlink" title="7 A Simple mutator for Function"></a>7 A Simple mutator for Function</h3><p>总算搞清楚这个代码的逻辑了</p><ul><li><p>第一开始初始化的时候,并没有直接修改源代码,只是做了一个统计. 看一下需要变异的节点有多少个</p></li><li><p>后面provoke generate_mutant函数将location传递进来的时候才会发生突变. 换句话说, 这个location的具体含义是要在第几个变异节点发生变异</p></li><li><p>在 generate_mutant函数中<code>mutant_ast = self.pm.mutator_object(location).visit(ast.parse(self.pm.src))  # copy</code>中的<code>ast.parse(self.pm.src)</code>就是每一次都把源代码解析的ast对象传递进去, 目的就是为了控制变量. 这样就能获取到每一个单个突变位置的突变. 最后再利用diff库中的函数进行与原始版本的比较.</p></li></ul><p><strong>作者把类中的函数分开来讲解,确实在对单个函数的说明上起到了一定的作用.但是对于类整体的功能理解上, 还是有一定的影响</strong></p><p>我把单独的代码整合到了一起去看代码的逻辑, 终于清晰了不少</p><h4 id="整合代码"><a href="#整合代码" class="headerlink" title="整合代码"></a>整合代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MuFunctionAnalyzer</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"__iter__"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> PMIterator<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> log<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fn <span class="token operator">=</span> fn        self<span class="token punctuation">.</span>name <span class="token operator">=</span> fn<span class="token punctuation">.</span>__name__        src <span class="token operator">=</span> inspect<span class="token punctuation">.</span>getsource<span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token comment"># 获取源码</span>        self<span class="token punctuation">.</span>ast <span class="token operator">=</span> ast<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>src<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>src <span class="token operator">=</span> ast<span class="token punctuation">.</span>unparse<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ast<span class="token punctuation">)</span>  <span class="token comment"># normalize</span>        self<span class="token punctuation">.</span>mutator <span class="token operator">=</span> self<span class="token punctuation">.</span>mutator_object<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>nmutations <span class="token operator">=</span> self<span class="token punctuation">.</span>get_mutation_count<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>un_detected <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>mutants <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>log <span class="token operator">=</span> log    <span class="token keyword">def</span> <span class="token function">mutator_object</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> locations<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> StmtDeletionMutator<span class="token punctuation">(</span>locations<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>mutants<span class="token punctuation">.</span>append<span class="token punctuation">(</span>m<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">finish</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>        <span class="token keyword">def</span> <span class="token function">get_mutation_count</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>mutator<span class="token punctuation">.</span>visit<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ast<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutator<span class="token punctuation">.</span>count        <span class="token keyword">class</span> <span class="token class-name">StmtDeletionMutator</span><span class="token punctuation">(</span>ast<span class="token punctuation">.</span>NodeTransformer<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mutate_location<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>mutate_location <span class="token operator">=</span> mutate_location        <span class="token keyword">def</span> <span class="token function">mutation_visit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> ast<span class="token punctuation">.</span>Pass<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">def</span> <span class="token function">mutable_visit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># statements start at line no 1</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>count <span class="token operator">==</span> self<span class="token punctuation">.</span>mutate_location<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"进行替换"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutation_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>generic_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">visit_Return</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"visit_Return"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Delete</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Assign</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_AnnAssign</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_AugAssign</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Raise</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Assert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Global</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Nonlocal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Expr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Pass</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Break</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Continue</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">PMIterator</span><span class="token punctuation">(</span>PMIterator<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pm<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>pm <span class="token operator">=</span> pm        self<span class="token punctuation">.</span>idx <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> self<span class="token punctuation">.</span>idx        <span class="token keyword">if</span> i <span class="token operator">>=</span> self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>nmutations<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>finish<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">raise</span> StopIteration<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>idx <span class="token operator">+=</span> <span class="token number">1</span>        mutant <span class="token operator">=</span> Mutant<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">,</span> self<span class="token punctuation">.</span>idx<span class="token punctuation">,</span> log<span class="token operator">=</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>log<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>register<span class="token punctuation">(</span>mutant<span class="token punctuation">)</span>        <span class="token keyword">return</span> mutant<span class="token keyword">class</span> <span class="token class-name">Mutant</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pm<span class="token punctuation">,</span> location<span class="token punctuation">,</span> log<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>pm <span class="token operator">=</span> pm        <span class="token comment">#print(pm)</span>        self<span class="token punctuation">.</span>i <span class="token operator">=</span> location        self<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"%s_%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>i<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_src <span class="token operator">=</span> <span class="token boolean">None</span>        self<span class="token punctuation">.</span>tests <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>detected <span class="token operator">=</span> <span class="token boolean">False</span>        self<span class="token punctuation">.</span>log <span class="token operator">=</span> log    <span class="token keyword">def</span> <span class="token function">generate_mutant</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">:</span>        mutant_ast <span class="token operator">=</span> self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>mutator_object<span class="token punctuation">(</span>            location<span class="token punctuation">)</span><span class="token punctuation">.</span>visit<span class="token punctuation">(</span>ast<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># copy</span>        <span class="token keyword">return</span> ast<span class="token punctuation">.</span>unparse<span class="token punctuation">(</span>mutant_ast<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">src</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>_src <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_src <span class="token operator">=</span> self<span class="token punctuation">.</span>generate_mutant<span class="token punctuation">(</span>self<span class="token punctuation">.</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_src    <span class="token keyword">def</span> <span class="token function">diff</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>difflib<span class="token punctuation">.</span>unified_diff<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>src<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                              self<span class="token punctuation">.</span>src<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                              fromfile<span class="token operator">=</span><span class="token string">'original'</span><span class="token punctuation">,</span>                                              tofile<span class="token operator">=</span><span class="token string">'mutant'</span><span class="token punctuation">,</span>                                              n<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>下面是运行代码, 还有一些解释性的语句, 自认为已经比较清楚了.</p></blockquote><h4 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">test <span class="token operator">=</span> MuFunctionAnalyzer<span class="token punctuation">(</span>triangle<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test.nmutations:"</span><span class="token punctuation">,</span>test<span class="token punctuation">.</span>nmutations<span class="token punctuation">)</span><span class="token keyword">for</span> m <span class="token keyword">in</span> test<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"=======这是第%d次变异===================="</span> <span class="token operator">%</span> m<span class="token punctuation">.</span>i<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"原始代码："</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>mutant<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>src<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"在固定节点变异之后的代码"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>src<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"========================================\n"</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>运行结果<span class="token punctuation">:</span>visit_Returnvisit_Returnvisit_Returnvisit_Returnvisit_Returntest<span class="token punctuation">.</span>nmutations<span class="token punctuation">:</span> <span class="token number">5</span>__iter__<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>这是第<span class="token number">1</span>次变异<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>原始代码：<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span>在固定节点变异之后的代码visit_Return进行替换visit_Returnvisit_Returnvisit_Returnvisit_Return<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>这是第<span class="token number">2</span>次变异<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>原始代码：<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span>在固定节点变异之后的代码visit_Returnvisit_Return进行替换visit_Returnvisit_Returnvisit_Return<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>这是第<span class="token number">3</span>次变异<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>原始代码：<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span>在固定节点变异之后的代码visit_Returnvisit_Returnvisit_Return进行替换visit_Returnvisit_Return<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>这是第<span class="token number">4</span>次变异<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>原始代码：<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span>在固定节点变异之后的代码visit_Returnvisit_Returnvisit_Returnvisit_Return进行替换visit_Return<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>这是第<span class="token number">5</span>次变异<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>原始代码：<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span>在固定节点变异之后的代码visit_Returnvisit_Returnvisit_Returnvisit_Returnvisit_Return进行替换<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-Evaluating-Mutations"><a href="#8-Evaluating-Mutations" class="headerlink" title="8 Evaluating Mutations"></a>8 Evaluating Mutations</h3><p>涉及到了两个函数</p><ul><li><p><code>__enter__()</code>:The <strong>enter</strong>() function is called when the with block is entered. <em><strong>It creates the mutant as a Python function and places it in the global namespace</strong></em>, such that the assert statement executes the mutated function rather than the original.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>log<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'->\t%s'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    c <span class="token operator">=</span> <span class="token builtin">compile</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>src<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'&lt;mutant>'</span><span class="token punctuation">,</span> <span class="token string">'exec'</span><span class="token punctuation">)</span>    <span class="token builtin">eval</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 创建全局的变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>__exit__()</code>:The <strong>exit</strong>() function checks whether an exception has occurred (i.e., the assertion failed, or some other error was raised); if so, it marks the mutation as detected. Finally, it restores the original function definition.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_value<span class="token punctuation">,</span> traceback<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>log<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&lt;-\t%s'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">if</span> exc_type <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>detected <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>log<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Detected %s"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_value<span class="token punctuation">)</span>    <span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>fn <span class="token comment"># 因为突变把原来函数给改变了嘛,所以后面又重新把它恢复成原来的样子了</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>log<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>其他的倒是不难理解了</p><h3 id="9-Mutator-for-Modules-and-Test-Suites"><a href="#9-Mutator-for-Modules-and-Test-Suites" class="headerlink" title="9 Mutator for Modules and Test Suites"></a>9 Mutator for Modules and Test Suites</h3><h4 id="问题"><a href="#问题" class="headerlink" title="问题:"></a>问题:</h4><ul><li><p><code>self.mutator.visit(self.ast)</code>  这个函数调用的是AdvMutator里面mutable_visit函数???? 为什么会是这样呢?</p><p>A: 你懵了吗, 之前不是探讨过这个问题吗. 并不是self.mutator.visit(self.ast)调用的这个函数, 而是其调用的函数调用的.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">visit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Visit a node."""</span>    method <span class="token operator">=</span> <span class="token string">'visit_'</span> <span class="token operator">+</span> node<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__    visitor <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> method<span class="token punctuation">,</span> self<span class="token punctuation">.</span>generic_visit<span class="token punctuation">)</span>     <span class="token comment"># 这个函数先访问你自定义的节点visit方法,</span>    <span class="token comment"># 如果没有的话, 就递归访问子节点, </span>    <span class="token comment"># 也就是说, 是你自定义的节点visit_XXXX方法调用的mutable_visit. </span>    <span class="token comment"># 你可以再去看看上面</span>    <span class="token keyword">return</span> visitor<span class="token punctuation">(</span>node<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>__dict__</code> 在py中,到底起什么样的作用呢? 为什么这个可以实现全局调用?</p><p>A: Python 类提供了 <strong>dict</strong> 属性。需要注意的一点是，该属性可以用类名或者类的实例对象来调用，用类名直接调用 __dict__，会输出该由类中所有类属性组成的字典；而使用类的实例对象调用 __dict__，会输出由类中所有实例属性组成的字典。</p></li><li><p><input checked="" disabled="" type="checkbox">  runtest函数中细节还要再理解</p><p>A: 是unittest类里面的内容, 下次的时候可以再去百度看.</p></li><li><p><input checked="" disabled="" type="checkbox">  再了解一下unittest</p><p>A: 就是一个测试类, 也记不住, 下次用到在百度看把</p></li></ul><h4 id="合成代码"><a href="#合成代码" class="headerlink" title="合成代码"></a>合成代码</h4><blockquote><p>按照我的理解的话, 这一小节的内容, 就是为了<strong>把第8小节中的变异之后函数运行问题做了简化, 其实本质上还是之前的内容.</strong> 过程中用到了<code>unittest</code>这个模块</p></blockquote><p>还是一样的做法, 把代码们先弄到一起</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MuProgramAnalyzer</span><span class="token punctuation">(</span>MuFunctionAnalyzer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> AdvPMIterator<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>ast <span class="token operator">=</span> ast<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>src<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>src <span class="token operator">=</span> ast<span class="token punctuation">.</span>unparse<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ast<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>changes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>mutator <span class="token operator">=</span> self<span class="token punctuation">.</span>mutator_object<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>nmutations <span class="token operator">=</span> self<span class="token punctuation">.</span>get_mutation_count<span class="token punctuation">(</span><span class="token punctuation">)</span>         self<span class="token punctuation">.</span>un_detected <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">mutator_object</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> locations<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> AdvStmtDeletionMutator<span class="token punctuation">(</span>self<span class="token punctuation">,</span> locations<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_mutation_count</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>s        self<span class="token punctuation">.</span>mutator<span class="token punctuation">.</span>visit<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ast<span class="token punctuation">)</span> <span class="token comment"># 这个函数调用的是AdvMutator里面mutable_visit函数???? 为什么会是这样呢?</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutator<span class="token punctuation">.</span>count      <span class="token keyword">class</span> <span class="token class-name">AdvMutator</span><span class="token punctuation">(</span>Mutator<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> analyzer<span class="token punctuation">,</span> mutate_locations<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>mutate_locations <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">if</span> mutate_locations <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">else</span> mutate_locations        self<span class="token punctuation">.</span>pm <span class="token operator">=</span> analyzer    <span class="token keyword">def</span> <span class="token function">mutable_visit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># statements start at line no 1</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutation_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">AdvStmtDeletionMutator</span><span class="token punctuation">(</span>AdvMutator<span class="token punctuation">,</span> StmtDeletionMutator<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> analyzer<span class="token punctuation">,</span> mutate_locations<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        AdvMutator<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> analyzer<span class="token punctuation">,</span> mutate_locations<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">mutation_visit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        index <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># there is only one way to delete a statement -- replace it by pass</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>mutate_locations<span class="token punctuation">:</span>  <span class="token comment"># counting pass</span>            self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>changes<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>count<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>generic_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment"># get matching changes for this pass</span>            mutating_lines <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> idx<span class="token punctuation">)</span>                                 <span class="token keyword">for</span> <span class="token punctuation">(</span>count<span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>mutate_locations<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>count<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token keyword">in</span> mutating_lines<span class="token punctuation">:</span>                <span class="token keyword">return</span> ast<span class="token punctuation">.</span>Pass<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> self<span class="token punctuation">.</span>generic_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">AdvPMIterator</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pm<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>pm <span class="token operator">=</span> pm        self<span class="token punctuation">.</span>idx <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> self<span class="token punctuation">.</span>idx        <span class="token keyword">if</span> i <span class="token operator">>=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>changes<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> StopIteration<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token comment"># there could be multiple changes in one mutant</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>changes<span class="token punctuation">)</span><span class="token comment"># </span>        <span class="token keyword">return</span> AdvMutant<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">,</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>changes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">AdvMutant</span><span class="token punctuation">(</span>Mutant<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pm<span class="token punctuation">,</span> locations<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>pm <span class="token operator">=</span> pm        self<span class="token punctuation">.</span>i <span class="token operator">=</span> locations        self<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"%s_%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>name<span class="token punctuation">,</span>                               <span class="token string">'_'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> self<span class="token punctuation">.</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_src <span class="token operator">=</span> <span class="token boolean">None</span>            <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> test_module<span class="token punctuation">)</span><span class="token punctuation">:</span>        test_module<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>            self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> import_code<span class="token punctuation">(</span>            self<span class="token punctuation">.</span>src<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token keyword">return</span> MutantTestRunner<span class="token punctuation">(</span>self<span class="token punctuation">,</span> test_module<span class="token punctuation">)</span>            <span class="token keyword">def</span> <span class="token function">generate_mutant</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> locations<span class="token punctuation">)</span><span class="token punctuation">:</span>        mutant_ast <span class="token operator">=</span> self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>mutator_object<span class="token punctuation">(</span>            locations<span class="token punctuation">)</span><span class="token punctuation">.</span>visit<span class="token punctuation">(</span>ast<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># copy</span>        <span class="token keyword">return</span> ast<span class="token punctuation">.</span>unparse<span class="token punctuation">(</span>mutant_ast<span class="token punctuation">)</span>           <span class="token keyword">def</span> <span class="token function">src</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>_src <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_src <span class="token operator">=</span> self<span class="token punctuation">.</span>generate_mutant<span class="token punctuation">(</span>self<span class="token punctuation">.</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_src      <span class="token keyword">class</span> <span class="token class-name">MutantTestRunner</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mutant<span class="token punctuation">,</span> test_module<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>mutant <span class="token operator">=</span> mutant        self<span class="token punctuation">.</span>tm <span class="token operator">=</span> test_module    <span class="token keyword">def</span> <span class="token function">runTest</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> tc<span class="token punctuation">)</span><span class="token punctuation">:</span>        suite <span class="token operator">=</span> unittest<span class="token punctuation">.</span>TestSuite<span class="token punctuation">(</span><span class="token punctuation">)</span>        test_class <span class="token operator">=</span> self<span class="token punctuation">.</span>tm<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>tc<span class="token punctuation">]</span>        <span class="token keyword">for</span> f <span class="token keyword">in</span> test_class<span class="token punctuation">.</span>__dict__<span class="token punctuation">:</span>            <span class="token keyword">if</span> f<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'test_'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                suite<span class="token punctuation">.</span>addTest<span class="token punctuation">(</span>test_class<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span>        runner <span class="token operator">=</span> unittest<span class="token punctuation">.</span>TextTestRunner<span class="token punctuation">(</span>verbosity<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> failfast<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> ExpectTimeout<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                res <span class="token operator">=</span> runner<span class="token punctuation">.</span>run<span class="token punctuation">(</span>suite<span class="token punctuation">)</span>                <span class="token keyword">if</span> res<span class="token punctuation">.</span>wasSuccessful<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>mutant<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>un_detected<span class="token punctuation">.</span>add<span class="token punctuation">(</span>self<span class="token punctuation">)</span>                <span class="token keyword">return</span> res        <span class="token keyword">except</span> SyntaxError<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Syntax Error (%s)'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>mutant<span class="token punctuation">.</span>name<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Unhandled exception during test execution'</span><span class="token punctuation">)</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-The-Problem-of-Equivalent-Mutants"><a href="#10-The-Problem-of-Equivalent-Mutants" class="headerlink" title="10 The Problem of Equivalent Mutants"></a>10 The Problem of Equivalent Mutants</h3><p>在替换的过程中, 有可能会产生这种情况: 替换过后相当于没有替换. 并不会产生错误. 替换掉了一个无关紧要的语句. 把这种情况称为<code>equivalent mutants</code></p><p>要解决这个问题, 文章中说了两个方法</p><h4 id="10-1-Statistical-Estimation-of-Number-of-Equivalent-Mutants"><a href="#10-1-Statistical-Estimation-of-Number-of-Equivalent-Mutants" class="headerlink" title="10.1 Statistical Estimation of Number of Equivalent Mutants"></a>10.1 Statistical Estimation of Number of Equivalent Mutants</h4><p>利用正态分布</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211130104504.png" alt="Statistical Estimation"></p><h4 id="10-2-Statistical-Estimation-of-the-Number-of-Immortals-by-Chao’s-Estimator"><a href="#10-2-Statistical-Estimation-of-the-Number-of-Immortals-by-Chao’s-Estimator" class="headerlink" title="10.2 Statistical Estimation of the Number of Immortals by Chao’s Estimator"></a>10.2 Statistical Estimation of the Number of Immortals by Chao’s Estimator</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211130104746.png" alt="Chao&#39;s Estimator"></p><p>Note that these <strong>immortal mutants</strong> are somewhat different from the traditional equivalent mutants in that the mortality depends on the oracle used to distinguish variant behavior. That is, if one uses a fuzzer that relies on errors thrown to detect killing, <em>it will not detect mutants that produce different output but does not throw an error</em>. Hence, the <strong>Chao1</strong> estimate will essentially be <strong>the asymptote value of mutants the fuzzer can detect</strong> if it is given an infinite amount of time.</p><h3 id="Synopsis"><a href="#Synopsis" class="headerlink" title="Synopsis"></a>Synopsis</h3><p>This chapter introduces two methods of running <em>mutation analysis</em> on subject programs. The first class <code>MuFunctionAnalyzer</code> targets individual functions. Given a function <code>gcd</code> and two test cases evaluate, one can run mutation analysis on the test cases as follows —<code>第7小节</code></p><p>The second class <code>MuProgramAnalyzer</code> targets standalone programs with test suites. Given a program <code>gcd</code> whose source code is provided in <code>gcd_src</code> and the test suite is provided by <code>TestGCD</code>, one can evaluate the mutation score of <code>TestGCD</code> as follows</p><blockquote><p>个人感觉这两种方式的差距, 并没有很大. 甚至好像没什么区别-可能是我菜吧😥-🤣</p></blockquote><p>The <strong>mutation score</strong> thus obtained is a better indicator of the quality of a given test suite than pure coverage.</p><h3 id="Lessons-Learned"><a href="#Lessons-Learned" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h3><p>为什么做这个, 怎么做, 这种方法有什么局限.又应该怎么改进.</p><blockquote><p>不得不说,作者的思路真的很清晰了.</p></blockquote><ul><li>We have learned why structural coverage is insufficient to evaluate the quality of test suites.</li><li>We have learned how to use Mutation Analysis for evaluating test suite quality.</li><li>We have learned the limitations of Mutation Analysis – Equivalent and Redundant mutants, and how to estimate them.</li></ul>]]></content>
      
      
      <categories>
          
          <category> 毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美食篇-7-东北菜</title>
      <link href="/2021/11/26/mei-shi-pian-7-dong-bei-cai/"/>
      <url>/2021/11/26/mei-shi-pian-7-dong-bei-cai/</url>
      
        <content type="html"><![CDATA[<h1 id="美食"><a href="#美食" class="headerlink" title="美食"></a>美食</h1><p>这次还是我和两个舍友,来的应该是第四次了把.</p><ul><li>地三鲜</li><li>溜肉段–这个居然时炸的,真醉了~~</li><li>饺子–韭菜鸡蛋\牛肉萝卜</li><li>锅包肉–我真快吃腻了,而且感觉没有上次在江安这边点的外卖(也是东北菜)好吃.</li></ul><p>![1]](<a href="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QQ%E5%9B%BE%E7%89%8720211126220221.jpg">https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QQ图片20211126220221.jpg</a>)</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QQ%E5%9B%BE%E7%89%8720211126220234.jpg" alt="2"></p>]]></content>
      
      
      <categories>
          
          <category> 美食 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 成都 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设-Fuzz-3</title>
      <link href="/2021/11/22/bi-she-fuzz-3/"/>
      <url>/2021/11/22/bi-she-fuzz-3/</url>
      
        <content type="html"><![CDATA[<h1 id="NoteBook阅读"><a href="#NoteBook阅读" class="headerlink" title="NoteBook阅读"></a>NoteBook阅读</h1><h2 id="SearchBasedFuzzer"><a href="#SearchBasedFuzzer" class="headerlink" title="SearchBasedFuzzer"></a>SearchBasedFuzzer</h2><p>我们先不去对代码实现细节进行掌握, 先去掌握思想.</p><p>什么是基于搜索的测试? 为什么要用这种方式? 原话: <em><strong>Sometimes we are not only interested in fuzzing as many as possible diverse program inputs, but in deriving specific test inputs that achieve some objective, such as reaching specific statements in a program.</strong></em> 要产生特定的测试数据,从而到达程序中特定的位置.</p><p>这样的方式需要我们做哪些工作?</p><ul><li>首先,你要明确你要生成的数据类型和范围. <em>Maybe XML\String\Int etc. a-z\1-10</em></li><li>其次, 要定义在搜索空间内的适应度函数, 也就是你要能评价搜索到的数据距离目标的距离</li><li>然后, 定义搜索算法. 即按照什么样的方式\以何种顺序在搜索空间中搜素.<ul><li><strong>Hillclimbing</strong> 搜素范围规模不大.<em><strong>个人感觉根梯度下降非常相似,只不过在这里是离散的.</strong></em></li><li><strong>Genetic Algorithm</strong>搜素范围规模较大.<em><strong>结合了自然选择和种群进化的生物理论.</strong></em></li></ul></li></ul><h3 id="两个主要的算法"><a href="#两个主要的算法" class="headerlink" title="两个主要的算法"></a>两个主要的算法</h3><p>The <strong>hillclimbing algorithm</strong> itself is very simple: </p><ol><li>Take a random starting point</li><li>Determine fitness value of all neighbours</li><li>Move to neighbour with the best fitness value</li><li>If solution is not found, continue with step 2</li></ol><p>The <strong>GA emulates natural evolution</strong> with the following process:</p><ul><li>Create an initial population of random chromosomes</li><li>Select fit individuals for reproduction</li><li>Generate new population through reproduction of selected individuals</li><li>Continue doing so until an optimal solution has been found, or some other limit has been reached.</li></ul><blockquote><p>当然在具体的应用中, 还要设计到如何设计突变/如何选择种群/如何利用父代产生子代. 这些都需要跟实际情况相结合.</p></blockquote><h3 id="需要了解的一些背景知识"><a href="#需要了解的一些背景知识" class="headerlink" title="需要了解的一些背景知识"></a>需要了解的一些背景知识</h3><p>Python 源码到机器码的过程，以 CPython 为例，编译过程如下：</p><ul><li>将源代码解析为解析树（Parser Tree）</li><li>将解析树转换为抽象语法树（Abstract Syntax Tree）</li><li>将抽象语法树转换到控制流图（Control Flow Graph）</li><li>根据流图将字节码（bytecode）发送给虚拟机（ceval）</li></ul><p>可以使用以下模块进行操作：</p><ul><li>ast 模块可以控制抽象语法树的生成和编译</li><li>py-compile 模块能够将源码换成字节码（编译），保存在 <strong>pycache</strong> 文件夹，以 .pyc 结尾（不可读）</li><li>dis 模块通过反汇编支持对字节码的分析（可读）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设-Fuzz-2</title>
      <link href="/2021/11/21/bi-she-fuzz-2/"/>
      <url>/2021/11/21/bi-she-fuzz-2/</url>
      
        <content type="html"><![CDATA[<h1 id="NoteBook阅读"><a href="#NoteBook阅读" class="headerlink" title="NoteBook阅读"></a>NoteBook阅读</h1><ul><li><input checked="" disabled="" type="checkbox"> 这一部分还是要再看看代码才行</li></ul><h2 id="Greybox-Fuzzing"><a href="#Greybox-Fuzzing" class="headerlink" title="Greybox Fuzzing"></a>Greybox Fuzzing</h2><h3 id="Blackbox-Mutation-base-Fuzzer"><a href="#Blackbox-Mutation-base-Fuzzer" class="headerlink" title="Blackbox Mutation-base Fuzzer"></a>Blackbox Mutation-base Fuzzer</h3><p>在这个测试里面,似乎只要是在population里面的seed,在权重上是一样的,换句话说就是被挑选的概率是一样的.</p><p>不过,按照我的理解, 按说这个权重应该是要变化的,可能在后面的讲解中会讲到吧</p><h3 id="Greybox-Mutation-base-Fuzzer"><a href="#Greybox-Mutation-base-Fuzzer" class="headerlink" title="Greybox Mutation-base Fuzzer"></a>Greybox Mutation-base Fuzzer</h3><p>我丢,从代码的角度上来看的话,灰盒测试无非是把<code>代码覆盖率</code>当成了加入<code>population</code>的一个准则</p><blockquote><p>原话: If we reach new coverage,add inp to population and its coverage to population_coverage</p></blockquote><h3 id="Boosted-Greybox-Fuzzer"><a href="#Boosted-Greybox-Fuzzer" class="headerlink" title="Boosted Greybox Fuzzer"></a>Boosted Greybox Fuzzer</h3><p>果不其然, 这个增强版的就用到了<code>energy</code>,也就是上面所讲的权重,它用了一个函数来计算.</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211121205144.png" alt="计算权重的公式"></p><p>这个指数后面文章所取的值是5</p><p>❓我不太清楚是, <code>coverage</code>只是一个数字, 如果只是数字的话, 那如何衡量路径呢? 因为即使是路径不同, <code>coveraige</code>也有可能是一样的.</p><blockquote><p>emm,很明显,<code>coverage</code>应该不仅仅是数字,他应该是<code>(执行函数名,行数)</code>这样的结构组成的😨</p></blockquote><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211121210348.png" alt="Boosted"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211121210407.png" alt="Original"></p><p>把<code>energy</code>分配给哪些执行次数相对较少的路径上, 以期再获得其他路径.</p><blockquote><p>The exponential power schedule shaves some of the executions of the “high-frequency path” off and adds them to the lower-frequency paths. The path executed least often is either not at all exercised using the traditional power schedule or it is exercised much less often.</p></blockquote><p><em><strong>Summary</strong></em>. By fuzzing seeds more often that exercise low-frequency paths, we can explore program paths in a much more efficient manner.</p><h2 id="Directed-Greybox-Fuzzing"><a href="#Directed-Greybox-Fuzzing" class="headerlink" title="Directed Greybox Fuzzing"></a>Directed Greybox Fuzzing</h2><p>本章用了一个迷宫来做案例, 迷宫的正确解恰恰对应于程序运行过程中运行次数最少的.</p><p>然后, 如何去评价一个路径的好坏, 本章节中采用了将程序调用图转换为有向图, 然后计算<code>路径最终节点</code>与<code>目标节点-出口</code>之间的距离.很显然这个距离越小, 说明距离<code>目标节点-出口</code>越近, 也就越接近出口.</p><p><em><strong>Summary</strong></em>. After pre-computing the function-level distance to the target, we can develop a power schedule that assigns more energy to a seed with a smaller average function-level distance to the target. By normalizing seed distance values between the minimum and maximum seed distance, we can further boost the directed power schedule.</p><blockquote><p>这部分说实话,真的没看懂..😥😥😥😥</p></blockquote><h2 id="Lessons-Learned"><a href="#Lessons-Learned" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h2><ul><li>A <em>greybox fuzzer</em> generates thousands of inputs per second. Pre-processing and lightweight instrumentation <ul><li>allows to maintain the efficiency <em>during</em> the fuzzing campaign, and </li><li>still provides enough information to control progress and slightly steer the fuzzer.</li></ul></li><li>The <em>power schedule</em> allows to steer/control the fuzzer. For instance,<ul><li>Our <a href="#Fuzzer-Boosting">boosted greybox fuzzer</a> spends more energy on seeds that exercise “unlikely” paths. The hope is that the generated inputs exercise even more unlikely paths. This in turn increases the number of paths explored per unit time.</li><li>Our <a href="#Directed-Greybox-Fuzzing">directed greybox fuzzer</a> spends more energy on seeds that are “closer” to a target location. The hope is that the generated inputs get even closer to the target.</li></ul></li><li>The <em>mutator</em> defines the fuzzer’s search space. <a href="GreyboxFuzzer.ipynb#A-First-Attempt">Customizing the mutator</a> for the given program allows to reduce the search space to only relevant inputs. In a couple of chapters, we’ll learn about <a href="GreyboxGrammarFuzzer.ipynb">dictionary-based, and grammar-based mutators</a> to increase the ratio of valid inputs generated.</li></ul><p>从这也可以看出来,评价函数确实很重要. 虽然实现的目的都是一样的, 但是就实验的效果来看的话, 却是相差很远.</p><h2 id="Next-Steps"><a href="#Next-Steps" class="headerlink" title="Next Steps"></a>Next Steps</h2><p>Our aim is still to sufficiently cover functionality, such that we can trigger as many bugs as possible.  To this end, we focus on two classes of techniques:</p><ol><li><p>Try to cover as much <em>specified</em> functionality as possible.  Here, we would need a <em>specification of the input format,</em> distinguishing between individual input elements such as (in our case) numbers, operators, comments, and strings – and attempting to cover as many of these as possible.  We will explore this as it comes to <a href="GrammarFuzzer.ipynb">grammar-based testing</a>, and especially in <a href="GreyboxGrammarFuzzer.ipynb">grammar-based mutations</a>.</p></li><li><p>Try to cover as much <em>implemented</em> functionality as possible.  The concept of a “population” that is systematically “evolved” through “mutations” will be explored in depth when discussing <a href="SearchBasedFuzzer.ipynb">search-based testing</a>.  Furthermore, <a href="SymbolicFuzzer.ipynb">symbolic testing</a> introduces how to systematically reach program locations by solving the conditions that lie on their paths.</p></li></ol><p>These two techniques make up the gist of the book; and, of course, they can also be combined with each other.  As usual, we provide runnable code for all.  Enjoy!</p><blockquote><p>从这里的描述来看, <code>specified functionality</code> 和 <code>implemented functionality</code> 是不同的两个概念</p></blockquote><hr><p>看到现在的话,其实作者的思路,我们大概也清楚的知道了一些</p><ul><li><ol><li>我们只是简单地随机产生字符串</li></ol></li><li><ol start="2"><li>紧接着, 我们不满足于仅仅产生随机的字符串, 进而使用了<code>coverage</code>—<code>measure the effectiveness of different test generation techniques, but also to guide test generation towards code coverage.</code></li></ol></li><li><ol start="3"><li>有了<code>coverage</code>之后, 还不行, 因为总有一些路径几乎不被执行, 相反一些路径被执行的次数却很多. 倒也不是说这样不好, 只是 <code>By fuzzing seeds more often that exercise low-frequency paths, we can explore program paths in a much more efficient manner.</code> 所以又引入了 <code>Power Schedules</code><blockquote><p><strong>We call the likelihood with which a seed is chosen from the population as the seed’s energy.</strong> Throughout a fuzzing campaign, we would like to prioritize seeds that are more promising. Simply said, we do not want to waste energy fuzzing non-progressive seeds. <em><strong>We call the procedure that decides a seed’s energy as the fuzzer’s <strong>power schedule</strong></strong></em>. For instance, AFL’s schedule assigns more energy to seeds that are shorter, that execute faster, and yield coverage increases more often. </p></blockquote></li></ol></li><li><ol start="4"><li>但是有了这些还是不行, 因为虽然产生的随机字符串有了一定的质量, 但是在语法上, 还是比较欠缺.<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211121212317.png" alt="针对HtmlParser产生的字符串"></li></ol><blockquote><p>The greybox fuzzer executes much more complicated inputs, many of which include special characters such as opening and closing brackets and chevrons (i.e., &lt;, &gt;, [, ]). Yet, many important keywords, such as <html> are still missing.</p></blockquote><p>  所以,下面一章就要将<code>grammars</code>的部分了</p></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设-Fuzz-1</title>
      <link href="/2021/11/19/bi-she-fuzz-1/"/>
      <url>/2021/11/19/bi-she-fuzz-1/</url>
      
        <content type="html"><![CDATA[<h2 id="Fuzzer"><a href="#Fuzzer" class="headerlink" title="Fuzzer"></a>Fuzzer</h2><p>这是在GitHub上,找到的一个在线的书籍,讲解Fuzz的<br><a href="https://hub.gke2.mybinder.org/user/uds-se-fuzzingbook-ktofhf06/notebooks/docs/notebooks/Fuzzer.ipynb">https://hub.gke2.mybinder.org/user/uds-se-fuzzingbook-ktofhf06/notebooks/docs/notebooks/Fuzzer.ipynb</a></p><p>简单来说, 就是随机生成字符串, 在接受输入的地方及进行测试. 并且对程序崩溃的原因进行整理.</p><p>发现的问题就包括了缓冲区溢出/缺少错误输入的检查/极端值的验证等常见的错误</p><h3 id="Generic-Checker-泛型检测器"><a href="#Generic-Checker-泛型检测器" class="headerlink" title="Generic Checker(泛型检测器)"></a>Generic Checker(泛型检测器)</h3><h4 id="Memory-Accesses"><a href="#Memory-Accesses" class="headerlink" title="Memory Accesses"></a>Memory Accesses</h4><p><strong>LLVM Address Sanitizer</strong> which detects a whole set of potentially dangerous memory safety violations. 将这个嵌入到c程序中,并进行编译, 当访问越界的地址时, 会提示报错, 被给出一个详细的说明.</p><p>![报错示意图]](<a href="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211119145215.png">https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211119145215.png</a>)</p><p>HeartBleed bug 就是这么被测试出来的. OpenSSl库里面的漏洞</p><h4 id="Information-Leak"><a href="#Information-Leak" class="headerlink" title="Information Leak"></a>Information Leak</h4><p>信息泄露可能不仅仅出现访问非法的地址, 同样有可能出现在合法地址中. 如果合法地址中包含了不应该泄露的敏感信息. 这种情况下, <code>Address Sanitizer</code>不会报错, 因为访问的是”合法”地址.</p><p>要应对这样的问题, 需要检查返回的字符串中, 是否包含了不应该出现的信息</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211119151350.png" alt="信息泄露检查"></p><h3 id="定制检查"><a href="#定制检查" class="headerlink" title="定制检查"></a>定制检查</h3><p>充分地利用assertion, 检查重要函数的input和result. 充分使用assertion可以提高检测到泛型检查器无法检查到的错误.</p><h4 id="Check-the-integrity-of-complex-data-structures"><a href="#Check-the-integrity-of-complex-data-structures" class="headerlink" title="Check the integrity of complex data structures"></a>Check the integrity of complex data structures</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211119152317.png" alt="检查数据结构"></p><p>这个具体的检查,感觉就好像是编程中的问题, 要在改变重要数据结构前后, 都要验证数据结构的合法性. <code>. Whenever an element is added or deleted, all these consistency checks are run automatically.</code></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211119155255.png" alt="repOK()类型的检测"></p><p>虽然这些检测 <code>documents all the assumptions and checks them as well</code> 仅仅针对于我们个人写的程序和问题, 但是可以帮助我们找到问题, 同时也能帮助其他程序员理解我们的代码并避免错误.</p><h3 id="Fuzzing-结构"><a href="#Fuzzing-结构" class="headerlink" title="Fuzzing 结构"></a>Fuzzing 结构</h3><ul><li><code>Fuzzer</code> 作为<code>fuzzers</code>的一个基类 </li><li><code>Runner</code> 作为运行程序和检测的一个基类</li></ul><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211120152158.png" alt="Fuzzer"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211120152415.png" alt="Runner"></p><h3 id="Lesson-Learned"><a href="#Lesson-Learned" class="headerlink" title="Lesson Learned"></a>Lesson Learned</h3><ul><li>Randomly generating inputs (“fuzzing”) is a simple, cost-effective way to quickly test arbitrary programs for their robustness.</li><li>Bugs fuzzers find are mainly due to errors and deficiencies in input processing.</li><li>To catch errors, have as many consistency checkers as possible.</li></ul><h2 id="Mutation-Based-Fuzzing"><a href="#Mutation-Based-Fuzzing" class="headerlink" title="Mutation-Based Fuzzing"></a>Mutation-Based Fuzzing</h2><p>这是上一本在结尾时推荐出来的<br><a href="https://hub.gke2.mybinder.org/user/uds-se-fuzzingbook-whv6pm2k/notebooks/docs/notebooks/MutationFuzzer.ipynb">https://hub.gke2.mybinder.org/user/uds-se-fuzzingbook-whv6pm2k/notebooks/docs/notebooks/MutationFuzzer.ipynb</a></p><p>最初所生产出来的模糊字符串, 很多都是无效的. 在测验的过程中, 很快就被程序拒绝了. 现在提出的方法叫 <strong>基于突变的Fuzz</strong>, 要在现有输入上做微小的改动, 使其仍然保持有效性. </p><p>看到后面还得需要去在补前面的<code>Code Coverage</code>的定义😱😱😱😱</p><hr><h2 id="已补完😀😀"><a href="#已补完😀😀" class="headerlink" title="已补完😀😀"></a>已补完😀😀</h2><p>在知道这个Code Coverage之后呢, 我们就可以把<strong>通过检测以及Code Coverage有上升/或者从未出现过</strong>的fuzz字符串保存下来.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MutationCoverageFuzzer</span><span class="token punctuation">(</span>MutationFuzzer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>coverages_seen <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># Now empty; we fill this with seed in the first fuzz runs</span>        self<span class="token punctuation">.</span>population <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> runner<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Run function(inp) while tracking coverage.           If we reach new coverage,           add inp to population and its coverage to population_coverage        """</span>        result<span class="token punctuation">,</span> outcome <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run<span class="token punctuation">(</span>runner<span class="token punctuation">)</span>        new_coverage <span class="token operator">=</span> <span class="token builtin">frozenset</span><span class="token punctuation">(</span>runner<span class="token punctuation">.</span>coverage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> outcome <span class="token operator">==</span> Runner<span class="token punctuation">.</span>PASS <span class="token keyword">and</span> new_coverage <span class="token keyword">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>coverages_seen<span class="token punctuation">:</span>            <span class="token comment"># We have new coverage</span>            self<span class="token punctuation">.</span>population<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>inp<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>coverages_seen<span class="token punctuation">.</span>add<span class="token punctuation">(</span>new_coverage<span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>The nice thing about this strategy is that, applied to larger programs, it will happily explore one path after the other – covering functionality after functionality. All that is needed is a means to capture the coverage.</p></blockquote><h3 id="Lessons-Learned"><a href="#Lessons-Learned" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h3><ul><li>Randomly generated inputs are frequently invalid – and thus exercise mostly input processing functionality.</li><li>Mutations from existing valid inputs have much higher chances to be valid, and thus to exercise functionality beyond input processing.</li></ul><h2 id="Code-Coverage"><a href="#Code-Coverage" class="headerlink" title="Code Coverage"></a>Code Coverage</h2><p>如何衡量这些测试的有效性?一种方法是检查发现的漏洞的数量(和严重性);但是如果bug非常少，我们就需要一个代理来确定通过测试发现bug的可能性。在这一章中，我们介绍了代码覆盖率的概念，衡量在测试运行期间程序的哪些部分实际上被执行了。对于试图覆盖尽可能多的代码的测试生成器来说，度量这样的覆盖率也是至关重要的。</p><h3 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h3><p>黑盒测试的优点是可以在指定的行为中发现出错误. 缺点是 以实现的行为通常比指定的行为覆盖更多的领域, 因此仅基于规范的测试通常不能覆盖所有的实现细节.</p><blockquote><p>这话没毛病,毕竟是黑盒测试, 也仅仅只能通过函数的行为来进行测试. 并不能窥探到所有的实现细节.</p></blockquote><h3 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h3><p>白盒测试的优点是它可以找到以实现的功能里面的错误. 即使规范中没有提供详细的细节.  但是它可能会漏掉没有实现的行为.如果有些特定的功能没有实现, 白盒测试就不能找到它.</p><blockquote><p>这最后一句话确定不是废话吗? 没实现就没有代码, 没有代码 那白盒测试肯定是测试不到的啊! 是我理解有问题吗?</p></blockquote><h3 id="运行时跟踪"><a href="#运行时跟踪" class="headerlink" title="运行时跟踪"></a>运行时跟踪</h3><p>这里介绍了py中的一个函数<code>sys.settrace(f)</code>, 这个函数在程序运行的每一行都会调用.可以用它来获取执行程序的行数\当前属于哪个函数体\当前的局部变量和参数</p><blockquote><p>当然C语言里面也有, 只不过要在编译的时候加一些参数, 然后运行之后,会产生<code>.gcov</code>的文件,里面包含了类似py中<code>sys.settrace()</code>函数捕捉到的信息</p></blockquote><p>![sys.settrace()的运行效果]](<a href="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211120205202.png">https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211120205202.png</a>)</p><h3 id="Lessons-Learned-1"><a href="#Lessons-Learned-1" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h3><ul><li>Coverage metrics are a simple and fully automated means to approximate how much functionality of a program is actually executed during a test run.</li><li>A number of coverage metrics exist, the most important ones being statement coverage and branch coverage.</li><li>In Python, it is very easy to access the program state during execution, including the currently executed code. </li></ul>]]></content>
      
      
      <categories>
          
          <category> 毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fuzz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习-6-脚手架</title>
      <link href="/2021/11/18/vue-xue-xi-6-jiao-shou-jia/"/>
      <url>/2021/11/18/vue-xue-xi-6-jiao-shou-jia/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue脚手架"><a href="#Vue脚手架" class="headerlink" title="Vue脚手架"></a>Vue脚手架</h1><p>Vue脚手架是一个基于Vue.js进行快速开发的完整系统，是一个专门为Vue应用快速搭建繁杂项目结构的脚手架，它可以轻松地创建新的应用程序，且可用于自动生成Vue和Webpack的项目模板.</p><h2 id="快速构建项目"><a href="#快速构建项目" class="headerlink" title="快速构建项目"></a>快速构建项目</h2><h3 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h3><p>为了更好地适应复杂项目的开发,Vue.js支持以.vue为扩展名的文件来定义一个组件. 这个组件被称为单文件组件,文件中封装了组件相关代码.如 html\css\js等,最终通过Webpack编译成js文件并在浏览器中运行.</p><h3 id="单文件组件嵌套"><a href="#单文件组件嵌套" class="headerlink" title="单文件组件嵌套"></a>单文件组件嵌套</h3><p>index.html 是入口地址,可调用App.vue. 在App.vue文件中可以调用其他组件,所以App.vue被称为根组件.</p><h3 id="组件之间的信息传递"><a href="#组件之间的信息传递" class="headerlink" title="组件之间的信息传递"></a>组件之间的信息传递</h3><p>父-&gt;子: <code>v-bind</code></p><p>子-&gt;父: 子组件通过<code>$emit</code>来触发事件,父组件在子组件的自定义标签上使用v-on指令来监听子组件触发的自定义事件.</p><p>非父子: 使用一个空的Vue实例作为中央事件总线.利用这个来<code>emit</code><strong>触发事件</strong>/<code>on</code><strong>监听事件</strong></p><h2 id="前端路由"><a href="#前端路由" class="headerlink" title="前端路由"></a>前端路由</h2><p>Vue.js的路由和<code>&lt;a&gt;</code>标签实现的功能是一样的,它们都实现一个对应的跳转,只不过路由的性能更佳. a标签无论点击多少次,都会发生对应的网络请求,页面会不停地进行刷新,但是使用路由机制,单击之后,不会出现请求及页面刷新,而会直接转换到要跳转的地址,这就是使用路由的好处.</p><p>随着前后端分离开发模式的兴起,出现了前端路由的概念:前端通过Ajax获取数据后,通过一定的方式渲染到页面中,<strong>改变URL不会向服务器发送请求</strong>,同时,前端可以监听URL变化,可以解析URL并执行相应操作,而后端只负责提供API来返回数据.</p><p><em>在Vue中,通过路由跳转到不同的页面中,实际上就是加载不同的组件.</em></p><blockquote><p>这里之前的那个问题可以说得到了解决</p><p>在企业实训的阶段中, 我们采用前端Vue+后端Springboot来完成整个项目, 其中使用到了shiro作为安全框架来管理后端验证和权限访问等等. <strong>其中出现了一个问题, 就是没有办法通过shiro来对访问的url进行限制,只能限制请求数据的接口</strong></p><p>🐷🐷🐷🐷🐷🐷</p><p>可以说这跟Vue的前端路由有很大的关系, 虽然我们把项目部署到了服务器上,但是依然采用的是前端路由的方式, 相当于请求的url地址根本没有经过后端. 也就不能被shiro管理, 从而进行权限验证并拦截. 而请求数据的接口就不一样了, 它们是真正向后端发起请求的.shiro是可以接受到, 并且进行拦截的.</p><p>👍👍👍👍👍</p><p>所以出现了这种问题,而我们的解决方案也很正确. 在需要拦截的地方使用了前端路由管理的方式. 只是当时这个问题的原因没有探讨的很清楚,虽然观察到了出现问题的现象, 但是没有从原理上里面出现问题的原因. </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>财经-基金-3-评价指标</title>
      <link href="/2021/11/17/cai-jing-ji-jin-3-ping-jie-zhi-biao/"/>
      <url>/2021/11/17/cai-jing-ji-jin-3-ping-jie-zhi-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="评价基金的方法"><a href="#评价基金的方法" class="headerlink" title="评价基金的方法"></a>评价基金的方法</h1><p>![指数基金估值方法分析汇总]](<a href="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211117201731.png">https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211117201731.png</a>)</p><h2 id="博格公式法"><a href="#博格公式法" class="headerlink" title="博格公式法"></a>博格公式法</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211117201432.png" alt="指导方法"></p>]]></content>
      
      
      <categories>
          
          <category> 财经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基金 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向工程核心原理-5-UPackPE文件头分析</title>
      <link href="/2021/11/17/ni-xiang-gong-cheng-he-xin-yuan-li-5-upackpe-wen-jian-tou-fen-xi/"/>
      <url>/2021/11/17/ni-xiang-gong-cheng-he-xin-yuan-li-5-upackpe-wen-jian-tou-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="UPackPE文件头分析"><a href="#UPackPE文件头分析" class="headerlink" title="UPackPE文件头分析"></a>UPackPE文件头分析</h1><h2 id="分析UPack的PE头"><a href="#分析UPack的PE头" class="headerlink" title="分析UPack的PE头"></a>分析UPack的PE头</h2><h3 id="重叠文件头"><a href="#重叠文件头" class="headerlink" title="重叠文件头"></a>重叠文件头</h3><p>重叠文件头是其他压缩器经常使用的技法，借助该方法可以把MZ文件头(IMAGE_DOS_HEADER)与PE文件头(IMAGE_NT_HEADERS)巧妙的叠加在一起。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118092257.png" alt="重叠文件头的对比">  </p><p>MZ文件头(IMAGE_DOS_HEADER)中有以下两个重要成员。其余的成员对程序运行无意义</p><blockquote><p>offset(0) e_magic : Magic number = 4D5A(‘MZ’)<br>offset(3C) e_lfanew: File address of new exe header</p></blockquote><p>问题在于PE文件格式规范，IMAGE_NT_HEADERS的起始位置是”可变的”，由e_lfanew来决定。</p><p><strong>正常的情况下</strong>：<code>e_lfanew = MZ文件头大小(40) + DOS存根大小(可变：VC++下为A0) = E0</code></p><p>这并不违反规定，只是钻了规范本身的空子</p><h3 id="IMAGE-FILE-HEADER-SizeOfOptionalHeader"><a href="#IMAGE-FILE-HEADER-SizeOfOptionalHeader" class="headerlink" title="IMAGE_FILE_HEADER.SizeOfOptionalHeader"></a>IMAGE_FILE_HEADER.SizeOfOptionalHeader</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118093808.png" alt="正常与修改后的对比"></p><p>从PE头文件来看，<strong>IMAGE_OPTIONAL_HEADER</strong>的起始偏移加上<strong>SizeOfOptionalHeader</strong>的值后才是<strong>IMAGE_SECTION_HEADER</strong>。增大<strong>SizeOfOptionalHeader</strong>以后，就相当于在<strong>IMAGE_OPTIONAL_HEADER</strong>与<strong>IMAGE_SECTION_HEADER</strong>之间增加了额外的空间，Upack就在这个区域增加解压代码。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118095011.png" alt="简要原理"></p><h2 id="重叠节区"><a href="#重叠节区" class="headerlink" title="重叠节区"></a>重叠节区</h2><p>Upack重叠PE节区与文件头</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118200644.png" alt="重叠示意图"></p><p>❓❓❓❓看的不是很明白,这里面尤其第一\第二节区, 它们确实是被重叠到Header上面了,但是内容上是怎么重叠的呢?肯定要删去一些东西把~~~</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118200732.png" alt="解压后的第一个节区"></p><p>映射的话, 应该不算很难, 更改加载的虚拟地址就行了.</p><h2 id="RVA-to-RAW"><a href="#RVA-to-RAW" class="headerlink" title="RVA to RAW"></a>RVA to RAW</h2><p>利用了PE装载器发现第一个节区的PointerToRawData(10)不是FileAlignment(200)的整数倍时,它会强制将其识别为整数倍.(该情况下为0); 这样做的话, Upack文件就可以正常运行, 但是很多PE相关使用程序就会发生错误.</p><h2 id="导入表"><a href="#导入表" class="headerlink" title="导入表"></a>导入表</h2><p>这个emm,也没看懂</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118202538.png" alt="导入表的地址"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118202409.png" alt="第三个节区地址"></p><p>按照上面的将RVA-&gt;RAW</p><blockquote><p>RAW = RVA (271EE) - VirtualOffset(27000) + RawOffset(0)  = 1EE<br>注意: 3rd Section的RawOffset值不是10,而会强制变换为0</p></blockquote><p>书上说该处就是Upack节区隐藏玄机的地方</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118203940.png" alt="文件偏移IEE--第一个结构体"></p><p>上面所选区域就是IMAGE_IMPORT_DESCRIPTOR结构体组成的数组, 偏移IEE~201为第一个结构体, 其后既不是第二个结构体, 也不是NULL结构体</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118203752.png" alt="3rd节区映射到内存"></p><hr><p>❓❓❓❓ 为什么偏移200是第三个节区的结束呢? 之前的节区表里面, 写的是<code>RawSize为 1F0</code></p><hr><p>从文件看导入表好像是坏了,但是在加载到内存里面之后,看起来又是好的. </p><h2 id="导入地址表"><a href="#导入地址表" class="headerlink" title="导入地址表"></a>导入地址表</h2><p>通过上面结构体的数据, 得到</p><table><thead><tr><th>偏移</th><th>成员</th><th>RVA</th></tr></thead><tbody><tr><td>1EE</td><td>OriginalFistThunk(INT)</td><td>0</td></tr><tr><td>1FA</td><td>Name</td><td>2</td></tr><tr><td>1FE</td><td>FirstThunk(IAT)</td><td>11E8</td></tr></tbody></table><p>Name 的RVA是2, 它属于Header区域,因为第一个节区是从RVA 1000开始的.</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118210327.png" alt="文件偏移2"></p><p>😱😱😱这样看的话,好像Upack把数据重复利用了?! 既可以是Kernel32.dll, 又可以代表其他含义?</p><p>FirstThunk(IAT) 转换为RAW是<code>IE8</code></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118210552.png" alt="IE8"></p><p>这部分区域就是IAT域, 同时也作为INT来使用. 也就是说该处是 <code>Name Pointer(RVA)</code>数组 RVA 28/BE, 其结束是NULL. RVA位置上存放着导入函数的 <code>Ordinal+名称字符串</code></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118211013.png" alt="RVA 28"></p><p>Q: 这样的话,导入函数最终的地址放到哪里去了?? </p><p>A: 这只是压缩过的代码,最后还得解压缩,应该会回复成正常的样子的…</p>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向工程核心原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习-5-过渡和动画</title>
      <link href="/2021/11/16/vue-xue-xi-5-guo-du-he-dong-hua/"/>
      <url>/2021/11/16/vue-xue-xi-5-guo-du-he-dong-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="过渡和动画"><a href="#过渡和动画" class="headerlink" title="过渡和动画"></a>过渡和动画</h1><p>Vue.js过渡可以使页面元素在出现和消失时实现多种过渡效果。Vue在插入、更新或者移除DOM时，提供了多种方式的应用过渡效果。开发者可以使用transition组件,结合CSS的动画Animation、过渡Transition或者js来操作DOM使元素动起来。</p><h2 id="CSS过渡"><a href="#CSS过渡" class="headerlink" title="CSS过渡"></a>CSS过渡</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116183654.png" alt="过渡实现过程"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">   <span class="token selector">.fade-enter, .fade-leave-to</span> <span class="token punctuation">&#123;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0  <span class="token punctuation">&#125;</span>  <span class="token selector">.fade-enter-active, .fade-leave-active</span> <span class="token punctuation">&#123;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> opacity .5s  <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show = !show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    切换按钮   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fade<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../js/vue.js<span class="token punctuation">"</span></span><span class="token attr-name">"</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">   <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span> <span class="token string">'#demo'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>     show<span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CSS动画"><a href="#CSS动画" class="headerlink" title="CSS动画"></a>CSS动画</h2><p>CSS动画的用法与CSS过渡的用法相同，其区别是，在CSS动画中，v-enter类名在节点插入DOM后不会立即删除，而是在animationend事件触发时删除。</p><blockquote><p>这个看的不是很懂，后面用到再说吧</p></blockquote><h2 id="JS过渡"><a href="#JS过渡" class="headerlink" title="JS过渡"></a>JS过渡</h2><p>Js过渡是使用javascript钩子函数实现的过渡效果，这些钩子函数可以结合CSS的transition/animations使用，也可以单独使用。</p><p>感觉用js这个从结构上面看的话，就清楚很多了</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fade<span class="token punctuation">"</span></span> <span class="token attr-name">@before-enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beforeEnter<span class="token punctuation">"</span></span> <span class="token attr-name">@enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enter<span class="token punctuation">"</span></span> <span class="token attr-name">@after-enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>afterEnter<span class="token punctuation">"</span></span> <span class="token attr-name">@before-leave</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beforeLeave<span class="token punctuation">"</span></span> <span class="token attr-name">@leave</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>leave<span class="token punctuation">"</span></span> <span class="token attr-name">@after-leave</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>afterLeave<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116185453.png" alt="控制台输出"></p><h2 id="案例–新增列表项的动画效果"><a href="#案例–新增列表项的动画效果" class="headerlink" title="案例–新增列表项的动画效果"></a>案例–新增列表项的动画效果</h2><p>具体的细节和效果用到的时候再去官网看就行了，还有很多细节和用法，就不在这赘述了。。。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">li</span> <span class="token punctuation">&#123;</span>        <span class="token property">border</span><span class="token punctuation">:</span> 1px dashed #999<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>        <span class="token property">line-height</span><span class="token punctuation">:</span> 35px<span class="token punctuation">;</span>        <span class="token property">padding-left</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">li:hover</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> cornflowerblue<span class="token punctuation">;</span>        <span class="token property">transition</span><span class="token punctuation">:</span> all 1s ease<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.v-enter,    .v-leave-to</span> <span class="token punctuation">&#123;</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>80px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.v-enter-active,    .v-leave-active</span> <span class="token punctuation">&#123;</span>        <span class="token property">transition</span><span class="token punctuation">:</span> all 0.5s ease<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 下面的 .v-move 和 .v-leave-active 配合使用，能够实现列表后续的元素，渐渐地飘上来的结果 */</span>    <span class="token selector">.v-move</span> <span class="token punctuation">&#123;</span>        <span class="token property">transition</span><span class="token punctuation">:</span> all 0.5s ease<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.v-leave-active</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>                学号:                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>                姓名:                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>添加<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 在实现列表过渡的时候，如果需要过渡的元素，是通过 v-for 循环渲染出来的，不能使用 transition 包裹，需要使用 transitionGroup --></span>            <span class="token comment">&lt;!-- 如果要为 v-for 循环创建的元素设置动画，必须为每一个元素设置：key 属性 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition-group</span> <span class="token attr-name">appear</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 删除需要传入i --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, i) in list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>del(i)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    &#123;&#123; item.id &#125;&#125; --- &#123;&#123; item.name &#125;&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition-group</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../js/vue.js<span class="token punctuation">"</span></span><span class="token attr-name">"</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            id<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            name<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span><span class="token comment">//这两个是为添加学号和姓名而设置的</span>            list<span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'张三'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'李四'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'王五'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'赵四'</span> <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">""</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function">del</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 从 i 的地方删，删除一个</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阅读清单</title>
      <link href="/2021/11/16/ge-lei-shu-ji-yue-du-qing-dan/"/>
      <url>/2021/11/16/ge-lei-shu-ji-yue-du-qing-dan/</url>
      
        <content type="html"><![CDATA[<h1 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h1><h2 id="财经类"><a href="#财经类" class="headerlink" title="财经类"></a>财经类</h2><ol><li>货币战争4 战国时代 宋鸿兵</li></ol><ul><li><p><input checked="" disabled="" type="checkbox">  货币战争4 战国时代 宋鸿兵</p><p>  <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116202829.png" alt="货币战争4 战国时代"></p><blockquote><p>从国际角度出发去阐述国际金融格局和现象，感觉需要很多的金融背景知识。印象比较深刻地是作者对于华为公司的预言，还有一些关于其他国家和我们国家经济政策的见地。比较深奥，还不是本人理解的。。。👻</p></blockquote></li></ul><ol start="2"><li>解读基金: 我的投资观与实践(修订版) 季凯帆</li></ol><ul><li><p><input checked="" disabled="" type="checkbox">  解读基金: 我的投资观与实践(修订版) 季凯帆</p><p>  <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116201850.png" alt="解读基金: 我的投资观与实践(修订版)"></p><blockquote><p>这本书主要是将作者本人是如何进行投资的，风险控制/基金组合/投资比例等等，主要是对投资基金的基础知识和常识进行了梳理。感觉我看完之后也没有记住多少东西。🙂</p></blockquote></li></ul><ol start="3"><li>货币 b站视频</li></ol><ul><li><p><input checked="" disabled="" type="checkbox">  货币 b站视频</p><p>  <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116203328.png" alt="货币"></p><blockquote><p>从历史的角度上分析，货币的由来/作用，对人类社会产生的影响，当今社会面临的货币问题等等。也不算很深奥。但是好像也没有说记住很多东西。。😔</p></blockquote></li></ul><ol start="4"><li>指数基金投资指南 银行螺丝钉</li></ol><ul><li><p><input checked="" disabled="" type="checkbox">  指数基金投资指南 银行螺丝钉</p><p>  <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116202410.png" alt="指数基金投资指南"></p><blockquote><p>我觉得这本书写的是比较清楚的，最起码在思路上比较明了。先给你一些建议，然后解释为什么选择指数基金？常见的指数基金的种类。之后是怎么挑选，采用什么方式买/以及用多少钱买等问题</p></blockquote></li></ul><h2 id="专业类"><a href="#专业类" class="headerlink" title="专业类"></a>专业类</h2><ol><li>汇编语言 王爽</li></ol><ul><li><p><input checked="" disabled="" type="checkbox">  汇编语言 王爽</p><p>  <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116203804.png" alt="汇编语言"></p><blockquote><p>这本书真的是写的非常好了，我一个不怎么看的下去的人，都是把整本书的练习和实验做完了。感觉收获真的是非常大，也解决了我之前在上课的时候产生的很多疑问。非常nice！🐮</p></blockquote></li></ul><ol start="2"><li>程序是怎样运行的</li></ol><ul><li><p><input checked="" disabled="" type="checkbox">  程序是怎样运行的</p><p>  <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211117185605.png" alt="程序是怎样运行的"></p><blockquote><p>这个我觉得收获也是蛮大的，写的也是比较通俗易懂。</p></blockquote></li></ul><ol start="3"><li>逆向工程 核心原理 李承远</li></ol><ul><li><p><input disabled="" type="checkbox">  逆向工程 核心原理 李承远</p><p>  <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116204238.png" alt="逆向工程 核心原理"></p><blockquote><p>本书里面的实验和讲解也是比较清楚的。思想很好，什么弄不懂，就边学边弄，慢慢就会了~~~😁</p></blockquote></li></ul><ol start="4"><li>Vue应用程序开发 </li></ol><ul><li><input disabled="" type="checkbox"> Vue应用程序开发 <blockquote><p>这不放图片了，反正网上一大堆。也基本上就是系统的浏览一下，好对Vue.js有个整体清晰地认识。</p></blockquote></li></ul><ol start="5"><li>Vue.js+Node.js全栈开发实践</li></ol><ul><li><input disabled="" type="checkbox"> Vue.js+Node.js全栈开发实践<blockquote><p>同上</p></blockquote></li></ul><h2 id="通识类"><a href="#通识类" class="headerlink" title="通识类"></a>通识类</h2><ol><li>零基础通识知识笔记 山形浩生</li></ol><ul><li><input disabled="" type="checkbox"> 零基础通识知识笔记 山形浩生  没找到图就不放了。。。<blockquote><p>写的比较有意思，上面的插画很通俗易懂。就是在这上面知道了商汤公司—做Al图象识别的。后来，还在和同学的谈话中听到了，他搞到了这个公司在上海总部的实习。~~~ 差距啊🚀</p></blockquote></li></ul><ol start="2"><li>幸福之路</li></ol><ul><li><p><input disabled="" type="checkbox">  幸福之路</p><p>  <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211203212843.png" alt="幸福之路"></p><blockquote><p>还没看完</p></blockquote></li></ul><h2 id="传记类"><a href="#传记类" class="headerlink" title="传记类"></a>传记类</h2><ol><li><p>知行合一: 王阳明传</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211217213559.png" alt="知行合一: 王阳明传"> </p><blockquote><p>这本书匆匆地看完，倒也没有对王阳明心学有什么很深刻的理解。更多的还是对于王阳明这个人的佩服吧，从小就知道自己的目标，有自己的主见。也确实经历了许多困难和磨砺，科举落选、遭刘瑾派人追杀、平定宁王朱宸濠叛乱有功却无实赏。 也正印证了那句话 <code>天将降大任与斯人也，必先苦其心智，劳其体肤，增益其所不能.</code> 关于他的作品和与人的对话印象比较深的是一句 <code>吾不以不及第为耻,吾以不及第动吾心为耻</code>, 自己看书可能很容易结合到自己的经历, 也不知道为什么, 每次会想起当初高考的失败, 心里总会有一种感激吧。倒不是因为复读的成功，更多的是因为自己心境的成长。 其实与王阳明的生死经历相对比，我经历的也不过是小巫见大巫吧。他太优秀了，以至于在他的那个年代，自己都显得格格不入。甚至我再想，如果他出生在我们这个年代，肯定也是院士级别人物吧。<code>吾心自有光明月 千古团圆永无缺</code>，希望先生的人格魅力能像明月一样，永远的照亮后人的心。</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向工程核心原理-4-基址重定位表</title>
      <link href="/2021/11/16/ni-xiang-gong-cheng-he-xin-yuan-li-4-ji-zhi-chong-ding-wei-biao/"/>
      <url>/2021/11/16/ni-xiang-gong-cheng-he-xin-yuan-li-4-ji-zhi-chong-ding-wei-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="基址重定位表"><a href="#基址重定位表" class="headerlink" title="基址重定位表"></a>基址重定位表</h1><h2 id="PE重定位"><a href="#PE重定位" class="headerlink" title="PE重定位"></a>PE重定位</h2><p>PE重定位就是本来我要加载到内存中的位置被别人占了，所以我只能加载到其他地方，这一过程发生的一系列处理行为就是PE重定位。</p><h2 id="PE重定位时执行的操作"><a href="#PE重定位时执行的操作" class="headerlink" title="PE重定位时执行的操作"></a>PE重定位时执行的操作</h2><p>使硬编码在程序中的内存地址随着当前加载地址变化而变化的处理过程就是PE重定位。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116094935.png" alt="notepad的ImageBase"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116095015.png" alt="notepad的EP代码"></p><p>硬编码地址以ImageBase(01000000)为基准。生成构建notepad.exe文件时，由于无法预测程序被实际加载到哪个地址，所以记录硬编码地址时，以ImageBase为基准。但在运行的瞬间，经过PE重定位后，这些地址全部以加载地址为基准变换，使得最后程序得以正常进行。</p><p>上图中所有硬编码的地址都要根据加载地址的不同而变化。</p><h2 id="PE重定位操作的原理"><a href="#PE重定位操作的原理" class="headerlink" title="PE重定位操作的原理"></a>PE重定位操作的原理</h2><blockquote><p>在应用程序中查找硬编码的地址位置<br>读取值后，减去ImageBase(VA-&gt;RVA)<br>加上实际加载地址(RVA-&gt;VA)</p></blockquote><h3 id="基址重定位表-1"><a href="#基址重定位表-1" class="headerlink" title="基址重定位表"></a>基址重定位表</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116101030.png" alt="基址重定位表"></p><p>TypeOffset的低12位是真正的位移，该位移值基于Virtual Address的偏移。所以程序中使用硬编码地址的偏移使用下面等式换算。</p><p><strong>VirtualAddress(1000) + Offset(420) = 1420(RVA)</strong></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116102150.png" alt="硬编码地址示例"></p><p>notepad.exe被加载到AF0000地址处。故<code>RVA 1420</code>即为<code>VA AF1420</code>，该地址处存储着IAT地址(VA,AF10C4<strong>指其调用函数地址的存放地址</strong>)。并且该值经过PE重定位而发生了变化。使用相同的原理，AF142D、AF1436地址的内容也都是硬编码到程序中的地址值，该偏移可以在重定位表中求得。</p><blockquote><p>TypeOffset项中指向位移的低12位拥有的最大地址值为1000.为了表示更大的地址，要添加1个与其对应的块，由于这些块以数组形式罗列，故称为重定位表<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116101231.png" alt="第二个块"></p></blockquote><h2 id="从可执行文件中删除-reloc节区"><a href="#从可执行文件中删除-reloc节区" class="headerlink" title="从可执行文件中删除.reloc节区"></a>从可执行文件中删除.reloc节区</h2><p>这个按照书上面操作之后显示不出来了，估计是版本更新之类的问题。</p><p>010Editor这个工具挺好用的</p><p>但是好像没没找到那种批量修改/填充的，就比如我想把某个地方全部填充为0，我还得一个一个的改。</p>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向工程核心原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习-4-过滤器和自定义指令</title>
      <link href="/2021/11/15/vue-xue-xi-4-guo-lu-qi-he-zi-ding-yi-zhi-ling/"/>
      <url>/2021/11/15/vue-xue-xi-4-guo-lu-qi-he-zi-ding-yi-zhi-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="过滤器和自定义指令"><a href="#过滤器和自定义指令" class="headerlink" title="过滤器和自定义指令"></a>过滤器和自定义指令</h1><p>Vue.js过滤器本质上就是一个函数，其作用是在用户输入数据后，<strong>对数据进行处理</strong>–<code>处理成我们想要的样子</code>，并返回一个处理结果。</p><h2 id="过滤器的注册和使用"><a href="#过滤器的注册和使用" class="headerlink" title="过滤器的注册和使用"></a>过滤器的注册和使用</h2><p><strong>形式一–全局</strong>:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">v-model.number</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>val<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   &#123;&#123;val|currencyDisplay&#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../js/vue.js<span class="token punctuation">"</span></span><span class="token attr-name">"</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">   Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'currencyDisplay'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token string">'$'</span><span class="token operator">+</span>val<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span><span class="token punctuation">&#123;</span>     val<span class="token operator">:</span><span class="token number">5.35353</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>形式二–局部</strong>:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>&#123;&#123; name | Upper &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../js/vue.js<span class="token punctuation">"</span></span><span class="token attr-name">"</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>   <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>     name<span class="token operator">:</span> <span class="token string">'zhonghui'</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token comment">// 声明一个本地的过滤器</span>   filters<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">Upper</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>形式三–叠加</strong></p><p>filterA被定义为接受单个参数的过滤器函数，表达式message的值将作为参数传递到函数中。继续调用同样被定义为接受单个函数的过滤器函数filterB，便可将filterA的结果传递到filterB中。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&#123;&#123;message|filterA|filterB&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同样也可以定义为接受多个参数的过滤器函数</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">   <span class="token selector">#app ul</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> lavender<span class="token punctuation">;</span>    <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token selector">#app h2</span><span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token selector">.more</span><span class="token punctuation">&#123;</span>    <span class="token property">padding-left</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token selector">.more span</span><span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 65px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span>25px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #006600<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>article in articles<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span> &#123;&#123;article.title&#125;&#125; 　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>summary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> &#123;&#123;article.summary|readMore(100, '...')&#125;&#125; <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>　　　　     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>more<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>阅读更多<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../js/vue.js<span class="token punctuation">"</span></span><span class="token attr-name">"</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">   Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'readMore'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">text<span class="token punctuation">,</span> length<span class="token punctuation">,</span> suffix</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> text<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span> <span class="token operator">+</span> suffix   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      articles<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>       title<span class="token operator">:</span> <span class="token string">'Vue.js过滤器'</span><span class="token punctuation">,</span>       summary<span class="token operator">:</span> <span class="token string">'过滤器本质上就是个函数，其作用在于用户在输入数据后，它能够进行处理，并返回一个处理结果。Vue.js提供了过滤器API，可以对数据进行过滤处理，并根据过滤的条件最终返回需要的结果。本章将会带你学习过滤器的注册及使用方法。'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>     <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h2><p>感觉就是个动态显示</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../js/vue.js<span class="token punctuation">"</span></span><span class="token attr-name">"</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>price<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&#123;&#123;date|dynamic(price)&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'dynamic'</span><span class="token punctuation">,</span>        <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">date<span class="token punctuation">,</span> price</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> date<span class="token punctuation">.</span><span class="token function">toLocaleDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> price<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            date<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            price<span class="token operator">:</span> <span class="token number">150</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义指令的注册和使用"><a href="#自定义指令的注册和使用" class="headerlink" title="自定义指令的注册和使用"></a>自定义指令的注册和使用</h2><p>自定义指令是用来操作DOM的，尽管Vue推崇数据驱动视图的理念，但是并非所有情况都适合数据驱动理念。自定义指令就是一种有效的补充和扩展,其不仅可用于定义任意DOM操作，还可以复用。</p><h3 id="自定义全局指令"><a href="#自定义全局指令" class="headerlink" title="自定义全局指令"></a>自定义全局指令</h3><p>自定义全局指令使用了<code>Vue.directive(指令ID，定义对象)</code>。定义对象是一个对象，这个对象上有一些指令相关的钩子函数，这些函数可以在特定的阶段执行相关的操作。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">v-red</span><span class="token punctuation">></span></span>使用自定义指令改变颜色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../js/vue.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">   Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    el<span class="token punctuation">.</span>style<span class="token punctuation">[</span><span class="token string">"color"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"red"</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>         <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h2><p>除update与componentUpdated外，每个钩子函数都含有el、binding、vnode这三个参数。参数el就是指令绑定的DOM元素，而binding是一个对象，它包含name、value、oldvalue、expression、arg、modifiers等属性。除el之外，binding、vnode属性都是制度的。</p><table><thead><tr><th>名称</th><th>Description</th></tr></thead><tbody><tr><td>bind</td><td>只调用一次，指令第一次绑定到元素时调用。在此可以进行一次性的初始化设置</td></tr><tr><td>inserted</td><td>被绑定元素插入父节点时调用(仅保证父节点存在，但不一定已被插入文档)</td></tr><tr><td>update</td><td>所在组件的VNode更新时调用，但是可能发生在其子VNode更新之前。指令的值可能发生了改变，也可能没有发生改变</td></tr><tr><td>componentUpdated</td><td>指令所在组件的VNode及其子VNode全部更新后调用</td></tr><tr><td>unbind</td><td>只在指令与元素解绑时调用一次</td></tr></tbody></table><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">v-parameter:</span>hello.a.b</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../js/vue.js<span class="token punctuation">"</span></span><span class="token attr-name">"</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'parameter'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">bind</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span>stringify    el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span>      <span class="token string">'name: '</span> <span class="token operator">+</span> <span class="token function">s</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br>'</span> <span class="token operator">+</span>      <span class="token string">'value: '</span> <span class="token operator">+</span> <span class="token function">s</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br>'</span> <span class="token operator">+</span>      <span class="token string">'expression: '</span> <span class="token operator">+</span> <span class="token function">s</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>expression<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br>'</span> <span class="token operator">+</span>      <span class="token string">'argument: '</span> <span class="token operator">+</span> <span class="token function">s</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>arg<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br>'</span> <span class="token operator">+</span>      <span class="token string">'modifiers: '</span> <span class="token operator">+</span> <span class="token function">s</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>modifiers<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br>'</span> <span class="token operator">+</span>      <span class="token string">'vnode keys: '</span> <span class="token operator">+</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">', '</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    message<span class="token operator">:</span> <span class="token string">'前端学习!'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>效果</strong></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211115191243.png" alt="效果"></p>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向工程核心原理-2-EAT</title>
      <link href="/2021/11/14/ni-xiang-gong-cheng-he-xin-yuan-li-2-eat/"/>
      <url>/2021/11/14/ni-xiang-gong-cheng-he-xin-yuan-li-2-eat/</url>
      
        <content type="html"><![CDATA[<h1 id="EAT"><a href="#EAT" class="headerlink" title="EAT"></a>EAT</h1><p>Windows操作系统中，“库”是为了方便其他程序调用而集中包含相关函数的文件(DLL/SYS)。Win32 API是最具代表性的库，其中的kernel32.dll文件被称为最核心的库文件。</p><p>EAT是一种核心机制，它使不同的应用程序可以调用库文件中提供的函数。也就是说，只有通过EAT才能准确求得相应库中导出函数的起始地址。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211114094826.png" alt="EAT"></p><p>从库中获得函数地址的API为<code>GetProcAddress</code>函数。该API引用EAT来获取指定API的地址。</p><h2 id="GetProcAddress操作原理"><a href="#GetProcAddress操作原理" class="headerlink" title="GetProcAddress操作原理"></a>GetProcAddress操作原理</h2><ol><li>利用AddressOfName成员转到“函数名称数组”</li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211114101014.png" alt="函数名称数组"></p><ol start="2"><li>函数名称数组中存储着字符串的地址。通过比较字符串，查找指定的函数名称(此时的数组索引成为name_index)</li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211114101732.png" alt="找到函数名称"></p><ol start="3"><li>利用AddressOfNameOrdinals成员转到orinal数组。</li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211114101919.png" alt="转到orinal数组"></p><ol start="4"><li>在ordinal数组中通过name_index查找到相应的ordinal值</li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211114102139.png" alt="找到ordinal的值"></p><ol start="5"><li>利用AddressOfFunctions成员转到“函数地址数组EAT”</li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211114102324.png" alt="转到EAT"></p><ol start="6"><li>利用刚刚求到的ordinal用作数组索引，获得指定函数的起始地址。</li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211114102451.png" alt="获得起始地址"></p><blockquote><p>kernel32.dll中所有导出函数均有相应名称，AddressOfNameOrdinals数组的值以index=ordinal的形式存在。但并不是所有的DLL文件都如此，导出函数中也有一些函数没有名称。</p></blockquote><hr><blockquote><p>对于没有函数名称的导出函数，可以通过ordinal查找到它们的地址。从Ordinal值中减去IMAGE_EXPORT_DIRECTORY.base成员后得到一个值。使用该值作为“函数地址数组”索引，即可查找到相应函数的地址。</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向工程核心原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向工程核心原理-2-运行时压缩测试</title>
      <link href="/2021/11/14/ni-xiang-gong-cheng-he-xin-yuan-li-3-yun-xing-shi-ya-suo-ce-shi/"/>
      <url>/2021/11/14/ni-xiang-gong-cheng-he-xin-yuan-li-3-yun-xing-shi-ya-suo-ce-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="运行时压缩测试"><a href="#运行时压缩测试" class="headerlink" title="运行时压缩测试"></a>运行时压缩测试</h1><p>运行时压缩器是针对PE文件而言的，可执行文件内部含有解压缩代码，文件在运行瞬间于内存中解压缩后执行。</p><h2 id="压缩器"><a href="#压缩器" class="headerlink" title="压缩器"></a>压缩器</h2><p><strong>使用目的</strong>: </p><ul><li>缩减PE文件大小</li><li>隐藏PE文件内部代码和资源</li></ul><h2 id="保护器"><a href="#保护器" class="headerlink" title="保护器"></a>保护器</h2><p><strong>使用目的</strong>：</p><ul><li>防止破解</li><li>保护代码与资源</li></ul><p>尤其游戏，防止你做外挂。</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>就按照书上面给出的UPX压缩器做测试了。</p><p>具体的过程我是这么理解的，UPX给代码做了一个压缩，都放到<code>.UPX1</code>段中，加载入内存后，先运行<code>.UPX1段</code>中的解压缩代码，将文件中的压缩代码放到<code>.UPX0段</code>中。在解压缩过程完成后，跳转到源程序的执行入口执行程序。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211115113255.png" alt="UPX压缩后的结构对比"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211115111250.png" alt="压缩前后的PEview"></p><p>至于最后是否是还原成跟压缩前的程序一致(其他的代码段和结构等等)，这我就有点不太清楚了。用debug工具调试，最后确实跳转到了程序入口，该入口与调试源程序的入口保持一致。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211115111627.png" alt="debug工具调试"></p><blockquote><p>通过观察内存中的数据，对比发现，解压缩之后程序没有包含原来<code>.text</code>中的<code>IMPORT Hints/Names &amp; DLL Names</code><br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211115112308.png" alt="IMPORT Hints/Names &amp; DLL Names"><br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211115112433.png" alt="内存中的数据对比"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向工程核心原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>财经-基金-2</title>
      <link href="/2021/11/13/cai-jing-ji-jin-2/"/>
      <url>/2021/11/13/cai-jing-ji-jin-2/</url>
      
        <content type="html"><![CDATA[<h2 id="投资到底赚的是谁的钱"><a href="#投资到底赚的是谁的钱" class="headerlink" title="投资到底赚的是谁的钱?"></a>投资到底赚的是谁的钱?</h2><p>首先股市投资是会创造财富的。要记住我们真正投资的不是股票，而是投资股票背后的企业。企业是会创造财富的，所以投资股市，给企业相应的资本，这些资本就会产生新的财富。这实际上就是股市会长期上涨的根本原因。投资有回报，这种回报就是由于新财富的产生而创造的。</p><p>长期来看，市场是向上的，我们赚的是投资企业的钱，所以有人说投资是赚钱的，只是赚多赚少的问题，这种说法也对，但前提是长期。</p><h2 id="各种指数和股票的对应关系"><a href="#各种指数和股票的对应关系" class="headerlink" title="各种指数和股票的对应关系"></a>各种指数和股票的对应关系</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116113210.png" alt="指数"></p><h2 id="为什么必需消费和医药更容易赚钱？"><a href="#为什么必需消费和医药更容易赚钱？" class="headerlink" title="为什么必需消费和医药更容易赚钱？"></a>为什么必需消费和医药更容易赚钱？</h2><p>我们先来想想开公司怎样才能赚到钱？</p><p>首先我们的客户得有需求，其次我们的产品要能满足他们的需求。如果客户的需求不稳定，我们就会饥一顿饱一顿。</p><p>不过，即使客户需求稳定，我们也不一定能赚到钱。生产的产品市同质化的，客户选择我们的产品和选择别人家的没啥区别，这就是一片红海，最终竞争会导致价格战，将利润空间吞噬掉。例如智能手机行业，很多智能手机生产商都是微利。</p><p>那么，客户需求稳定，我们的产品也有别人模仿不了的优点，我们就一定能赚到钱了吗？其实也不然，有的企业需要经常再投入巨资用于维护以保证稳定的生产，赚到的钱如果不再投入，企业就会经营不下去。这个时候我们赚到的钱也不属于自己。例如某些高污染的重工业，不注重风控的金融业，即使前期赚到大钱，后期也会还回去。</p><p>所以，市场需求比较稳定，企业有护城河能保证一定的利润率，并且再投资需求小，能获得大量的自由现金流，只有容易形成这些条件的行业，才能比较容易地赚钱。</p><p><strong>为什么可口可乐和茅台一度成为价值投资的标签呢？它们比较符合上面的条件：需求受经济周期的影响小，品牌护城河能保证不错的利润率，再投资需求比较小，赚到的钱大多都是自由现金流。</strong></p><p>如果在二级市场投资这样的企业，想赚钱还要增加一个条件：企业愿意回馈股东，而不是乱花钱。如果企业是赚钱的，但是管理者把赚到的钱随意乱花、铺张浪费，或者进行风险很大的投资，也会导致企业出现问题。</p><p>任何一个行业都是国家经济不可缺少的一部分，只要走了正确的路子，任何一个行业都是能赚钱的，不过赚钱的难度上有着明显差异。</p><p>所以，消费和医药行业天生就更容易赚到钱。</p><h2 id="强周期性行业"><a href="#强周期性行业" class="headerlink" title="强周期性行业"></a>强周期性行业</h2><blockquote><p>这个就是爸爸经常说的那种，在比较便宜的时候买入，在比较贵的时候卖出，就能获得不错的收益。</p></blockquote><p>这个东西吧，要能理解行业盈利的周期，最起码你得知道大概什么阶段处于周期底部，大概什么阶段处于周期顶部。这样才能实现稳定的收益。</p>]]></content>
      
      
      <categories>
          
          <category> 财经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基金 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向工程核心原理-2-IAT</title>
      <link href="/2021/11/13/ni-xiang-gong-cheng-he-xin-yuan-li-2-iat/"/>
      <url>/2021/11/13/ni-xiang-gong-cheng-he-xin-yuan-li-2-iat/</url>
      
        <content type="html"><![CDATA[<h1 id="PE文件格式"><a href="#PE文件格式" class="headerlink" title="PE文件格式"></a>PE文件格式</h1><p>从DOS头到节区头是PE头部分，其下的节区合称为PE体。文件中使用offset，内存中使用VA(Virtual Address)虚拟地址来表示位置。文件加载到内存时，情况就会发生变化(节区的大小、位置等)。文件的内容一般可分为代码<code>.text</code>、数据<code>.data</code>、资源<code>.rsrc</code>。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211113151027.png" alt="PE文件"></p><h2 id="PE头"><a href="#PE头" class="headerlink" title="PE头"></a>PE头</h2><p>PE头由许多结构体组成。</p><ul><li>DOS头</li><li>DOS存根</li><li>NT头<ul><li>文件头</li><li>可选头</li></ul></li><li>节区头</li></ul><p>RVA(Relative Vritual Address) to RAW(文件偏移地址是指数据在PE文件中的地址，是文件在磁盘上存放时相对于文件开头的偏移。文件偏移地址从pe文件的第一个字节开始计数，起始值为0)</p><p><code>RAW - PointerToRawData = RVA - VirtualAddress</code></p><p>PointerToRawData: 磁盘文件中节区的起始位置<br>VirtualAddress: 内存中节区的起使地址</p><h3 id="IAT"><a href="#IAT" class="headerlink" title="IAT"></a>IAT</h3><p>Import Address Table导入地址表，IAT是一种表格，用来记录程序正在使用哪些库中的哪些函数。</p><h4 id="DLL"><a href="#DLL" class="headerlink" title="DLL"></a>DLL</h4><p>16位的DOS不存在DLL，只有库Library一说，比如在C语言中使用printf()函数时，编译器会先从C库中读取相应函数的二进制代码，然后插入应用程序。也就是说，可执行文件中包含着printf函数的二进制代码。Windows OS支持多任务，若仍采用这种包含库的方式会变得非常没有效率。在同时运行多个程序的情况下，会造成严重的资源浪费(内存和磁盘空间)。因此设计出了DLL概念：</p><ul><li>不需要把库包含在程序中，单独组成DLL文件，需要时调用即可</li><li>内存映射技术使加载后的DLL代码、资源在多个进程中实现共享</li><li>更新库时只需要替换相关的DLL文件即可</li></ul><blockquote><p>如何理解DLL文件节约了磁盘和内存空间？<br>之前的多个程序无论是在源代码还是加入内存时，都包含了printf函数的二进制代码。现在大家可以共享内存中DLL文件中的printf函数，这样的话，不仅源代码中不用包含printf函数(节约了磁盘空间)，加载至内存后还可以共享一个printf函数(节约了内存空间)</p></blockquote><h4 id="IMAGE-IMPORT-DESCRIPTOR-IMPORT-Directory-Table"><a href="#IMAGE-IMPORT-DESCRIPTOR-IMPORT-Directory-Table" class="headerlink" title="IMAGE_IMPORT_DESCRIPTOR(IMPORT Directory Table)"></a>IMAGE_IMPORT_DESCRIPTOR(IMPORT Directory Table)</h4><p>记录PE文件要导入哪些库文件<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211113160018.png" alt="IMAGE_IMPORT_DESCRIPTOR"></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">IAT输入顺序1. 读取IID(IMAGE_IMPORT_DESCRIPTOR)的Name成员，获取库名称字符串(kernel32.dll)2. 装载相应库 -> LoadLibrary("kernel32.dll")3. 读取OriginalFirstThunk成员获取INT地址(Import Name Table)4. 逐一读取INT中的数组的值，获取相应的IMAGE_IMPORT_BY_NAME地址(RVA)5. 使用IMAGE_IMPORT_BY_NAME的Hint或Name获取相应函数的起始地址 -> GetProcAddress("GetCurrentThreadld")6. 读取IID的FirstThunk(IAT)成员，获取IAT地址7. 将上面获取到的函数地址输入相应的IAT数组值8. 重复以上步骤4-7，直到INT结束(遇到NULL时)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>IMAGE_IMPORT_DESCRIPTOR</code>结构体数组不在PE头而在PE体中，但查找其位置的信息在PE头中，<code>IMAGE_OPTIONAL_HEADER32.DataDirectory[1].VirtualAddress</code>即是<code>IMAGE_IMPORT_DESCRIPTOR</code>结构体数组的起始地址(RVA值)。<strong>期间注意RVA和RAW(文件偏移)之间的转换–要用到节区头中.text端的相关信息</strong></p><blockquote><p>整体上寻找信息的思路为</p><ol><li>先在 <code>IMAGE_OPTIONAL_HEADER32</code>中找到 <code>IMPORT Directory</code>的RVA值并将其转换成<code>RAW文件偏移</code>，并根据转换出来的文件偏移找到<code>IMPORT Directory</code>的位置<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211113173647.png" alt="寻找IMPORT Directory"></li><li>再根据<code>IMPORT Directory</code>相应数据(<strong>同样要转换为RAW文件偏移</strong>)找到导入函数表、导入DLL表、导入函数的实际地址表。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211113174053.png" alt="寻找其他表"></li></ol></blockquote><p><code>IMAGE_IMPORT_DESCRIPTOR</code>结构体中的命名很奇怪，OriginalFirstThunk对应的是<strong>导入函数表</strong>INT(Import Name Table ) address。FirstThunk对应的是<strong>导入函数地址表</strong>IAT(Import Address Table)address。Name对应的是 <strong>导入DLL表</strong>library name string address</p>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向工程核心原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习-3-Vue组件</title>
      <link href="/2021/11/09/vue-xue-xi-3-vue-zu-jian/"/>
      <url>/2021/11/09/vue-xue-xi-3-vue-zu-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-js组件"><a href="#Vue-js组件" class="headerlink" title="Vue.js组件"></a>Vue.js组件</h1><h2 id="组件的基本使用"><a href="#组件的基本使用" class="headerlink" title="组件的基本使用"></a>组件的基本使用</h2><p>前端组件化开发是现在前端框架中一个非常重要的思想,对页面内容进行拆分过后，便可独立维护,可复用性大大提高了。哪里出现问题，直接去修改对应的组件即可。</p><h3 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h3><p>全局注册的组件可以在任何一个div中使用该组件</p><h3 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h3><p>在实例选项中注册组件，这个组件只能在这个实例中使用</p><h3 id="组件中的data"><a href="#组件中的data" class="headerlink" title="组件中的data"></a>组件中的data</h3><p>组件中的data不是一个对象,而是一个函数。这样的好处在于每个实例可以维护一份被返回对象的独立副本。如果data是一个对象,则会影响到其他实例，因为js对象是引用类型的,return外部对象是会被共享的。所以，需要为每个组件返回一个新的对象。</p><h3 id="使用template元素创建组件"><a href="#使用template元素创建组件" class="headerlink" title="使用template元素创建组件"></a>使用template元素创建组件</h3><p>直接将组件内的元素写在<code>&lt;template&gt;&lt;/template&gt;</code>标签内,符合编写HTML标签的习惯，使代码阅读性更强。</p><h3 id="组件嵌套"><a href="#组件嵌套" class="headerlink" title="组件嵌套"></a>组件嵌套</h3><p>组件嵌套是指把组件与组件嵌套在一起,在父组件下的模板中，以标签的形式调用子组件。</p><h3 id="使用props传递数据"><a href="#使用props传递数据" class="headerlink" title="使用props传递数据"></a>使用props传递数据</h3><ul><li>props的值是字符串数组</li><li>props的值是对象</li></ul><h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2><p>组件实例的作用域是相互独立的，这就意味着不同组件之间无法相互引用。组件间的通信包括3种情况: 父组件向子组件通信；子组件向父组件通信；非父子组件之间的通信。</p><h3 id="父组件向子组件通信"><a href="#父组件向子组件通信" class="headerlink" title="父组件向子组件通信"></a>父组件向子组件通信</h3><p>通过props实现,在子组件标签章添加子组件props中创建的属性，把需要传递给子组件的值赋值给该属性。</p><p>如果传递的数据不是静态数据，可以使用<code>v-bind</code>指令来动态地绑定props的值。当父组件的数据变化时，这种变化会传递给子组件。</p><blockquote><p>父级props的更新会向下流动到子组件中，但是子组件的更新不会影响父级props。这样会防止子组件意外改变父组件的状态，从而导致应用的数据流向难以理解。</p></blockquote><h3 id="子组件向父组件通信"><a href="#子组件向父组件通信" class="headerlink" title="子组件向父组件通信"></a>子组件向父组件通信</h3><p>当子组件需要向父组件传递数据时，就要用到自定义事件。<code>v-on</code>指令除了监听DOM事件之外，还可以用于组件之间的自定义事件。子组件通过<code>$emit</code>来触发事件，父组件在子组件的自定义标签上使用<code>v-on</code>指令来监听子组件触发的自定义事件。</p><h3 id="非父子组件之前的通信"><a href="#非父子组件之前的通信" class="headerlink" title="非父子组件之前的通信"></a>非父子组件之前的通信</h3><p>非父子组件之前通信时，需要引入一个Vue实例bus作为媒介，通过bus触发事件和监听事件来实现组件之前的通信和参数传递，类似于子组件向父组件通信，但是利用了一个新的Vue实例作为媒介，而不是以当前Vue实例作为媒介。</p><h3 id="创建自定义组件"><a href="#创建自定义组件" class="headerlink" title="创建自定义组件"></a>创建自定义组件</h3><p>一般来说,就是有组件嵌套的。然后可以在全局和局部都注册该组件。父组件main-work中使用了子组件main-work-list, 并实现了组件间的通信。父组件将值下发给子组件，子组件使用<code>v-for</code>指令将列表显示出来，只要改变父组件的值，子组件中的列表值就会发生改变。当使用<code>$emit（）</code>触发事件实现选择子组件的列表项时，该列表项的值便可以传递给父组件</p><blockquote><p>通过我的观察发现，父组件中套用子组件，子组件在使用<code>$emit</code>向父组件传递数据的时候，一般都是触发的父组件中的函数或者是将父组件中实现的函数绑定在子组件的事件中。</p></blockquote><h2 id="内容分发"><a href="#内容分发" class="headerlink" title="内容分发"></a>内容分发</h2><p>使用<code>&lt;slot&gt;</code>标签作为承载分发内容的出口，当需要混合父组件的内容和子组件的模板时，就会用到<code>slot</code>。换句话说就是当组件的内容由父组件决定时，就会使用<code>slot</code>。</p><blockquote><p>emmmm….从效果的角度上面讲，和<strong>父组件传递数据到子组件</strong>是一样的，但是从代码的角度上面看的话，内容分发要简洁很多。</p></blockquote><h3 id="单个插槽"><a href="#单个插槽" class="headerlink" title="单个插槽"></a>单个插槽</h3><p>在子组件中使用特殊的<code>slot</code>元素就可以为这个子组件开启一个<code>slot</code>。父组件模板中，插入在子组件标签内的所有内容将代替子组件的<code>slot</code>标签和内容。</p><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>如果一个组件中有多个部分的内容是动态的,则需要为<code>slot</code>元素指定一个name属性，具有name属性的插槽称为具名插槽。具名插槽可以分发多个内容，也可以与单个插槽共存。</p><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>使用<code>slot</code>元素后，子组件可向父组件传递数据，从而实现与父级的通信。Vue还提供了另外一种通信方式。在父级中，具有特殊属性<code>scope</code>的<code>template</code>元素被称为作用域插槽模板。<code>scope</code>的值对应一个临时变量名,此变量用于接受从子组件中传递的props对象。</p><blockquote><p>这个例子不是很好理解，所以我把代码和效果贴上来了</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>作用域插槽<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myProps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span>read<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>&#123;&#123;myProps.text&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../js/vue.js<span class="token punctuation">"</span></span><span class="token attr-name">"</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-component'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>   template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">   &lt;div class="container">    &lt;slot text="hello from child">&lt;/slot>   &lt;/div> </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   el<span class="token operator">:</span> <span class="token string">'#app'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211112111517.png" alt="效果"></p><blockquote><p>在上述代码中，slot元素的text属性被赋值为hello from child，在父组件中使用了作用域插槽模板，在template中使用了scope属性对应的变量myProps接受子组件数据,并通过，将子组件的数据显示出来</p></blockquote><h4 id="作用域插槽2"><a href="#作用域插槽2" class="headerlink" title="作用域插槽2"></a>作用域插槽2</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211112113724.png" alt="注释掉template之后"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211112113805.png" alt="没注释template之前"></p><p>要是把这部分的template的部分注释掉的话,网页中就显示不出来之前的内容了</p><p>因为slot本身是要父组件把内容分发给子组件的，这个temlpate的过程就相当于是</p><ul><li>先利用props将数据传递给子组件</li><li>再利用scope把子组件中的props传递给父组件</li><li>最后在template中将内容分发给子组件</li></ul><p><strong>至于这里面的循环是怎么实现的我就不是很清楚了</strong></p><h2 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h2><p>通过使用保留的componet元素动态地绑定到其is特性上，可以使多个组件匹配到一个挂载点，并动态进行切换。简直就是天然的Tab标签页面之间的转换。</p><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习-2-Vue内置指令</title>
      <link href="/2021/11/08/vue-xue-xi-2-vue-nei-zhi-zhi-ling/"/>
      <url>/2021/11/08/vue-xue-xi-2-vue-nei-zhi-zhi-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-js内置指令"><a href="#Vue-js内置指令" class="headerlink" title="Vue.js内置指令"></a>Vue.js内置指令</h1><ul><li><strong>基本指令</strong> <code>v-text</code>,<code>v-html</code>,<code>v-cloak</code>,<code>v-once</code>,<code>v-if</code>,<code>v-else</code>,<code>v-show</code>,<code>v-on</code>,<code>v-for</code>、数组更新</li><li><strong>v-bind指令</strong> 当数据变化时，可以对属性进行重新渲染。</li><li><strong>v-model指令</strong> 本质是监听用户的输入事件，从而更新数据。它会将Vue实例中的数据作为数据来源，当输入事件发生时，它会实时更新Vue实例中的数据，从而实现数据的双向绑定。</li></ul><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><blockquote><p>实现一个简单的购物车</p></blockquote><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211109094727.png" alt="效果"></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这个就是算个总和，没有什么难度。不过有一点需要注意。就是这个v-for的循环渲染的问题</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211109094823.png" alt="v-for循环渲染"></p><p>要么写成这样 <code>v-for=&quot;(item,index) in shopItems&quot;</code>要么写成<code>v-for=&quot;item in shopItems&quot;</code></p><p>写成 <code>v-for=&quot;(item) in shopItems&quot;</code>是没办法渲染的。 ❌</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/vue/2.4.2/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/css/bootstrap.min.css<span class="token punctuation">"</span></span>        <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sha384-zCbKRCUGaJDkqS1kPbPd7TveP5iyJE0EjAuZQTgFLD2ylzuqKfdKlfG/eSrtxUkn<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vue_det<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group list-group-horizontal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item  flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>序号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item  flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>商品名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item  flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>商品单价<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item  flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>购买数量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item  flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>操作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item,index) in shopItems<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group list-group-horizontal-sm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;item.id&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;item.name&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;item.price&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addone(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                &#123;&#123;item.number&#125;&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reduceone(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteone(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        总计:&#123;&#123;allprice&#125;&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js<span class="token punctuation">"</span></span>        <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj<span class="token punctuation">"</span></span>        <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/js/bootstrap.bundle.min.js<span class="token punctuation">"</span></span>        <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sha384-fQybjgWLrvvRgtW6bFlB7jaZrFsaBXjsOMm/tB9LTS58ONXgqbR9W8oWht/amnpF<span class="token punctuation">"</span></span>        <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            el<span class="token operator">:</span> <span class="token string">'#vue_det'</span><span class="token punctuation">,</span>            data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                shopItems<span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'苹果'</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> number<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'2'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'橘子'</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> number<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'3'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'香蕉'</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span> number<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'4'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'橙子'</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span> number<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                allprice<span class="token operator">:</span> <span class="token number">0</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token function">addone</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>allprice <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allprice <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>price                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token function">reduceone</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>number <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>number <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>allprice <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allprice <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>price                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"该商品数量已经为零！"</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token function">deleteone</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//价格的变化,要在删除这个选项之前</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>allprice <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allprice <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>price<span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>number                    <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习-1-Vue入门</title>
      <link href="/2021/11/06/vue-xue-xi-1-vue-ru-men/"/>
      <url>/2021/11/06/vue-xue-xi-1-vue-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="第一个Vue-js应用"><a href="#第一个Vue-js应用" class="headerlink" title="第一个Vue.js应用"></a>第一个Vue.js应用</h1><p>有些东西没必要都详细的列出来，列个清单知道学了啥。不会再去查就行。</p><ul><li><strong>模板</strong> 可以渲染指定的内容到挂载的位置</li><li><strong>数据</strong> 双向绑定，数据发生变化。视图也跟着发生变化</li><li><strong>方法</strong> methods中定义 <code>&#123;&#123;say()&#125;&#125;</code>引用</li><li><strong>观察|监听</strong> watch选项可以监听数据变化</li><li><strong>数据绑定</strong> 插值<code>&#123;&#123;&#125;&#125;`、表达式绑定`&#123;&#123;complete?'完成':'未完成'&#125;&#125;</code>、双向数据绑定<code>v-model</code></li><li><strong>计算属性</strong> vue实例中的一个选项</li><li><strong>生命周期</strong> 看起来是跟浏览器渲染的顺序过程有关系</li></ul><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><blockquote><p>实现一个简单的计算器</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>主要就是数据结构运算思路,由前缀表达式转换为后缀表达式，在通过后缀表达式进行运算。</p><p>因为是简单的计算器嘛，就十以内的加减乘除(<strong>不带括号的那种</strong>)。😊😊😊</p><p>参考的博客<a href="http://blog.csdn.net/antineutrino/article/details/6763722">http://blog.csdn.net/antineutrino/article/details/6763722</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>例子 1+2*3+1</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> el<span class="token operator">:</span> <span class="token string">'#vue_det'</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  one<span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>  equation<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  result<span class="token operator">:</span> <span class="token string">"hello"</span><span class="token punctuation">,</span>  <span class="token comment">// 后缀表达式</span>  op<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//运算符栈</span>  nm<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//操作数栈</span>  <span class="token comment">// 判断运算符优先级</span>  <span class="token function-variable function">priorHigher</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token string">'+'</span> <span class="token operator">||</span> a <span class="token operator">===</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>b <span class="token operator">===</span> <span class="token string">'*'</span> <span class="token operator">||</span> b <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">number</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">var</span> str <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>equation <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>equation <span class="token operator">+</span> str<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">operator</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">var</span> str <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>equation <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>equation <span class="token operator">+</span> str<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 判断运算符优先级</span>  <span class="token function-variable function">priorHigher</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token string">'+'</span> <span class="token operator">||</span> a <span class="token operator">===</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>b <span class="token operator">===</span> <span class="token string">'*'</span> <span class="token operator">||</span> b <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 中缀表达式转后缀</span>  <span class="token function-variable function">calculate</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//初始化</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>equation<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    tag <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token comment">//如果是数字就直接压栈</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>equation<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>equation<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//如果是运算符</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>tag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//运算符栈中为空，就直接压</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>equation<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>       tag <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>       <span class="token comment">//优先级比栈顶的高，那就压栈</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">priorHigher</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>equation<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>equation<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        tag <span class="token operator">=</span> <span class="token boolean">true</span>       <span class="token punctuation">&#125;</span>       <span class="token comment">//否则，弹出栈顶压入nm栈，再进行循环</span>       <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">var</span> fortag <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span>length   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fortag<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span>   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">)</span><span class="token comment">//简单的计算器给弄好了 Yes good</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//如果是数字就直接压栈</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//如果遇到了运算符,弹出栈顶的两个元素做对应的运算，再把结果压进去</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>     <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">'+'</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token operator">+</span>a<span class="token punctuation">)</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token operator">-</span>a<span class="token punctuation">)</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token operator">*</span>a<span class="token punctuation">)</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token operator">/</span>a<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向工程核心原理-1</title>
      <link href="/2021/11/06/ni-xiang-gong-cheng-he-xin-yuan-li-1/"/>
      <url>/2021/11/06/ni-xiang-gong-cheng-he-xin-yuan-li-1/</url>
      
        <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="软件使用方面"><a href="#软件使用方面" class="headerlink" title="软件使用方面"></a>软件使用方面</h2><p>这些天主要就是跟着书本上的案例,使用OllyDbg对程序进行逆向分析。</p><p>跟着书上做，总体过程还是比较顺利，但是对于大段的汇编代码，阅读起来实在是费劲。这还是在有注释的情况下进行分析。如果连课本的引导和注释都没有的话，想必难度会成指数增长。如果有机会真的想了解那些做外挂的是怎么弄的。</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><h3 id="为什么32位计算机或者64位计算机可以兼容以前16位版本的程序"><a href="#为什么32位计算机或者64位计算机可以兼容以前16位版本的程序" class="headerlink" title="为什么32位计算机或者64位计算机可以兼容以前16位版本的程序"></a>为什么32位计算机或者64位计算机可以兼容以前16位版本的程序</h3><p>从汇编的角度上来看的话,16位、32位、64位 <code>AX BX AL AH</code> 等寄存器的含义都是一样的。唯一不同的地方体现在<code>EAX</code>是32位的。<code>RAX</code>是64位的。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211111210432.png" alt="x64寄存器的命名规则"></p><h3 id="LEA-Load-Effective-Address-指令和MOV指令的区别"><a href="#LEA-Load-Effective-Address-指令和MOV指令的区别" class="headerlink" title="LEA(Load Effective Address )指令和MOV指令的区别"></a>LEA(Load Effective Address )指令和MOV指令的区别</h3><p>参考链接：<a href="https://www.jianshu.com/p/3e89d834df85">https://www.jianshu.com/p/3e89d834df85</a></p><p>LEA 指令要求原操作数必须是存储单元，而且目的操作数必须是一个除段寄存器之外的16位或32位寄存器。当目的操作数是16位通用寄存器时，那么只装入有效地址的低16位。使用时要注意它与MOV指令的区别，MOV指令传送的一般是源操作数中的内容而不是地址。</p><blockquote><p>假设 SI=1000H, DS=5000H, (51000H)=1234H<br>执行指令 <code>LEA BX, [SI]</code> 后 BX=1000H<br>执行指令 <code>MOV BX,[SI]</code> 后 BX=1234H<br><code>LEA BX,XXX</code>可以用 <code>MOV BX,OFFSET XXX</code>来替代</p></blockquote><p><strong>但有些时候,必须要用LEA指令来完成某些功能，不能用MOV指令来实现，必须用LEA指令。</strong></p><p>如 <code>LEA BX,6[DI]</code></p><p>解释: 某数组含20个元素，每个元素占一个字节，序号为0~19。设DI指向数组开头处，如果把序号为6的元素的偏移地址送到BX中。就必须使用LEA指令。因为<strong>OFFSET 运算符只能返回数据标号的偏移量</strong>,然而并不是所有的内存单元都有数据标号。</p>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向工程核心原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-课程设计2</title>
      <link href="/2021/11/04/hui-bian-yu-yan-xue-xi-ke-cheng-she-ji-2/"/>
      <url>/2021/11/04/hui-bian-yu-yan-xue-xi-ke-cheng-she-ji-2/</url>
      
        <content type="html"><![CDATA[<h1 id="课程设计2"><a href="#课程设计2" class="headerlink" title="课程设计2"></a>课程设计2</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>具体的描述就不再打一遍了</p><blockquote><p>该程序的功能如下:</p><ol><li>列出功能选项，让用户通过键盘进行选择,界面如下。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211104103229.png" alt="实现页面"></li></ol></blockquote><blockquote><ol start="2"><li>用户输入1, 重新启动计算机(提示FFFF:0)</li><li>用户输入2, 引导现有的操作系统</li><li>用户输入3, 执行动态显示当前日期、时间的程序。格式: 年/月/日 时:分:秒 F1改变 Esc键后，返回主菜单</li><li>用户输入4, 更改当前的日期、时间。返回主选单。</li></ol></blockquote><h2 id="遇到的问题总结"><a href="#遇到的问题总结" class="headerlink" title="遇到的问题总结"></a>遇到的问题总结</h2><p>这里面其实很多问题本可以避免，但是在看书的时候，并没有注意到这些东西，或者说注意到了，可没有正确的理解。课程设计正如书上面说的它用到了我们所学到的所有技术，对于我们的整个学习过程是具有总结性的。</p><p>这些问题在我写程序的时候，感觉很是问题，很有总结的必要。写完之后，倒是感觉简单了一些。</p><ol><li><p><code>ds:[offset A]</code> 和 <code>offset A</code> 的区别</p><p> 前面<code>ds:[offset A]</code>取的是具体地址里面的值，<code>offset A </code>取得是偏移地址。在你写的时候，一定搞清楚，你到底是想要<code>字符串的首地址</code>还是<code>字符串首地址那个字符</code></p></li><li><p>数据/代码结构的设置问题,设置怎样的数据结构会使程序结构更清晰更明了</p><p>关于程序的逻辑具体就是把每一个菜单的总体逻辑放到一起，实现的细节写成子程序。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211104110930.png" alt="菜单4的主体逻辑"></p></li><li><p>多余代码废话的问题，很多程序写的很多余</p><p>老毛病了，这个东西在以后也得多练。</p></li><li><p>call指令和jmp指令\还有那些条件跳转的指令</p><p>关于这个我有一点问题, 条件转移只有-127-128的范围，如果我想实现按照条件执行不同的函数,那我就得先条件跳转到一个子程序的地方。然后再call,执行完再jmp回来。</p><p>有没有那种可以实现可以根据条件来call的, 但是这样一想的话，好像就多余了。因为依据现有的条件就可以实现，加上的话是不是就多余了呢。</p></li><li><p>寻址问题 ds:[bx+si]用数学的表达到底是什么样的，和你的写的是不是一样</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211104110024.png" alt="data"></p><p>本来是想着把ds弄成7E00,想着就不用在偏移量上面+7E00H了,结果发现自己是真脑残。正常的寻址过程是 <code>段寄存器*16+偏移地址 用数学化的表示是 ax=ds*16+bx</code>憨逼的你居然认为可以通过把ds设置为7E00H达到不用+7E00h的效果—真是太脑残了</p></li><li><p>子程序名称前后不一致</p><p>第一开始并没有直接设计到软盘的操作，就是先实现页面和具体的功能。后面加上软驱的操作的时候，有些子程序的名字不一样了。也没改。就导致效果出不来，还得debug好长时间。</p></li><li><p>环境问题</p><p>关于环境实在是人人都不一样,版本啊啥的，很容易就出现怎么弄，都弄不好的情况，但是总归来说还是不算太难。耐下心来取弄就行了。</p><p>我看有的<a href="https://blog.csdn.net/apollon_krj/article/details/71908442">博主</a>是直接用的winxp,但是我试过之后不行。于是我直接装了一个ms-dos的虚拟机，然后在xp系统中把汇编程序写进软驱中，再把软驱连接到ms-dos系统中，启动ms-dos系统。观察效果。</p><p>在这里还是感谢一下博主，虽然在具体的问题上面还是得自己解决。但是最起码程序是可以运行的，让我看到了具体的效果。</p></li></ol><h2 id="编程上面的提升"><a href="#编程上面的提升" class="headerlink" title="编程上面的提升"></a>编程上面的提升</h2><ol><li><p>根据功能号计算对应子程序在table中的偏移量。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211104145727.png" alt="调用不同的功能"></p></li><li><p>对于不规则的数据调用，可以先把要读取的不规则位置存放下来，用的时候按存放的顺序进行读取。这样就变不规则为规则了。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211104150011.png" alt="变不规则为规则"></p></li><li><p>如果觉得一个功能实现起来有些矛盾，可以去看看所有与之有关的程序。也许可以通过改已经实现的功能来解决。</p><p>具体到这里就是:<strong>设计更改颜色，并没有在显示的地方进行设置。这样就避开了改变颜色之后，显示的程序又把颜色给覆盖掉的问题</strong></p></li><li><p>关于debug的时候，有的时候会出现在运行循环之后，cpu那边的代码就给变化了</p><pre><code> 其实造成这种奇奇怪怪原因的无非有以下几种情况： 1.你在loop循环的过程中没有控制好临界条件 2.在loop循环的过程中,最起码在判断cx的值的时候，cx的值发生了改变 3.没有写对要写入的地址---地址搞错了等等 4.累加变化的寄存器的值，累加的不对造成越界或者写错了</code></pre></li></ol><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/1.gif" alt="1"></p><h3 id="引导现有的系统"><a href="#引导现有的系统" class="headerlink" title="引导现有的系统"></a>引导现有的系统</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/2.gif" alt="2"></p><h3 id="显示时间改变颜色返回"><a href="#显示时间改变颜色返回" class="headerlink" title="显示时间改变颜色返回"></a>显示时间改变颜色返回</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/2.gif" alt="3"></p><h3 id="设置时间"><a href="#设置时间" class="headerlink" title="设置时间"></a>设置时间</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/4.gif" alt="4"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:code,ds:data,ss:stackdata segment    db 256 dup(0)data endsstack segment    db 128 dup(0)stack endscode segmentstart:    mov ax,data    mov ds,ax        mov ax,stack    mov ss,ax    mov sp,128    mov ax,offset boot_end - offset boot    call lead_to_softdisk;将引导程序写入软盘    call boot_to_softdisk;将系统程序写入软盘    mov ax,4c00h    int 21h;将系统程序从软盘读入内存lead:    ;设置栈    mov bx,0    mov ss,bx    mov sp,7C00H    ;将系统程序从软盘读入内存    mov ax,0    mov es,ax    mov bx,7E00h    ;int13入口参数 ah 2读  3写    ;al 磁盘数| ch磁道号|cl扇区号|dh磁头号|dl驱动器号 0软驱A 80h盘C es：bx指向写入磁盘的数据    mov al,2    mov ch,0    mov cl,2    mov dh,0    mov dl,0    mov ah,2    int 13h    ;转到7E00H处执行    mov ax,0    push ax    mov ax,7E00h    push ax    retfret    lead_to_softdisk:    push cs    pop es    mov bx,offset lead    mov al,1    mov ch,0    mov cl,1    mov dh,0    mov dl,0    mov ah,3    int 13hretboot_to_softdisk:    push cs    pop es    mov bx,offset boot    mov al,2    mov ch,0    mov cl,2    mov dh,0    mov dl,0    mov ah,3    int 13hretboot:    jmp bootstart;*****************************************************************************    MENU0 db 'Welcome to system!',0    MENU1 db '1) reset pc',0      ;重新启动计算机    MENU2 db '2) start system',0  ;引导现有的操作系统    MENU3 db '3) clock',0         ;显示时间    MENU4 db '4) set clock',0     ;设置时间    TIME  db 'YY/MM/DD hh:mm:ss',0;时间显示格式    SETTIMENOTE db 'Reset the time in the following format: YY/MM/DD hh:mm:ss. eg.21/11/2 10:49:50. Press Enter to end!',0;设置时间的提示    SETTIME db '############',0;存放设置的时间    CMOS  db 9,8,7,4,2,0          ;CMOS中日期格式的存放位置    MENU    dw offset MENU0 - offset boot + 7E00h            dw offset MENU1 - offset boot + 7E00h            dw offset MENU2 - offset boot + 7E00h            dw offset MENU3 - offset boot + 7E00h            dw offset MENU4  -offset boot + 7E00h            dw 0            TABLE_FUNTION   dw offset m1-offset boot + 7E00h                    dw offset m2-offset boot + 7E00h                    dw offset m3-offset boot + 7E00h                    dw offset m4-offset boot + 7E00h;*****************************************************************************bootstart:    mov ax,0;本来是想着把ds弄成7E00,想着就不用在偏移量上面+7E00H了,结果发现自己是真脑残    mov ds,ax;正常的寻址过程是 段寄存器*16+偏移地址 用数学化的表示是 ax=ds*16+bx            ;憨逼的你居然认为可以通过把ds设置为7E00H达到不用+7E00h的效果---真是太脑残了    call clearscreen    call showmenu    call keyboardinput        cmp ah,02    jb bootstart    cmp ah,05    ja bootstart        mov bx,0    sub al,31H    mov bl,al    add bx,bx    call word ptr ds:[offset TABLE_FUNTION - offset boot + bx + 7E00h];子程序都存放到表里,按照偏移量来调用    jmp bootstart;保证一直在循环里面;==============================================================;菜单一         重新启动计算机m1:    pushf    mov ax,0FFFFH    push ax    mov ax,0    push axiret;==============================================================;菜单二         引导现有的操作系统m2:    mov bx,0            ;将C盘(驱动80H)的0面0道0扇区复制到0:7C00H处    mov es,bx    mov bx,7C00H    mov al,1    ;1个扇区    mov ah,2    ;读    mov ch,0    ;0磁道    mov cl,1    ;1扇区    mov dh,0    ;0面    mov dl,80H  ;C盘驱动    int 13H     call clearscreen;清屏    mov bx,0            ;从0:7C00开始执行，启动引导操作系统    push bx     mov bx,7C00H    push bx    retfret;==============================================================;菜单三         显示时间m3:     call clearscreen;清屏    m3_all_s:        ;------这个地方还真挺离谱的，我把m3_gettime写到循环里就不行,写成子程序反而行了。。        ;------至于为什么不行，我不清楚？？下午看一下---又莫名其妙的可以了，我真服了        ;------这种思维也挺重要的，菜单只显示菜单的基本逻辑，其他的全部弄到子程中。方便修改。思路也清楚        ;获取时间        call m3_gettime        ;显示时间        mov ax,0B800h        mov es,ax        mov si,10*160 + 30*2        mov bx,0        mov ds,bx                                       ;这种方式只是赋予了  TIME里面的YY        ; mov bx,ds:[offset TIME - offset boot + 7E00h];仔细看看这种方式到底赋给bx的是什么,我知道你想给TIME的地址，但是        mov bx,offset TIME - offset boot + 7E00h;真正应该这样写。真正要的是地址而不是值        call showmenuline        ;获取键盘输入        ;------- call keyboardinput 这里使用这个获取键盘输入的话--也就是获取按键是个阻塞的过程，时间的显示会卡住        in al,60h        cmp al,01;Esc返回主页面        je m3_backtostart        cmp al,3BH;F1返回改变颜色        je F1_m3_changecolor                ;-------该是je的地方不能用call，否则程序执行就乱跳了。汇编中难道就没有那种根据条件来call的指令？        ;-------就非得是je完之后再call，call完之后再跳回来？？    jmp m3_all_s        m3_backtostart:        ret    F1_m3_changecolor:        call m3_changecolor        jmp m3_all_s;名称: m3_changecolor;功能: 改变屏幕的颜色;参数: 无;返回: 无;应用举例: m3_changecolor:    push bx    push es    push cx    mov bx,0B800H    mov es,bx    mov bx,1    mov cx,2000    m3_changecolorloop:        inc byte ptr es:[bx]        add bx,2    loop m3_changecolorloop    pop cx    pop es    pop bxret;名称: m3_gettime;功能: 从CMOS中读取时间，将时间按照格式写入data段中的TIME中;参数: 无;返回: 无;应用举例: 21/11/1 13:30:50m3_gettime:    push si    push cx    push bx    ;往ds:TIME中写入    mov si,0    mov bx,0    mov cx,6    m3_gettime_s:        push cx        mov al,ds:[offset CMOS- offset boot + si + 7E00h]        out 70h,al        in al,71h        mov ah,al        mov cl,4         ;------造成代码在循环之后发生改变的，是这里改变了cx的值        ;------其实造成这种奇奇怪怪原因的无非有以下几种情况：        ;------1.你在loop循环的过程中没有控制好临界条件        ;------2.在loop循环的过程中,最起码在判断cx的值的时候，cx的值发生了改变        ;------3.没有写对要写入的地址---地址搞错了等等        ;------4.累加变化的寄存器的值，累加的不对        shr ah,cl;右移四位，取高四位        and al,00001111b;取低四位                add ah,30h        add al,30h        mov ds:[offset TIME - offset boot + bx + 7E00h],ah        mov ds:[offset TIME - offset boot + bx + 1 + 7E00h],al                add bx,3        add si,1        pop cx    loop m3_gettime_s        pop bx    pop cx    pop siret;==============================================================;菜单四         设置时间---回车结束m4:    push bx    push dx    push cx    ;清屏    call clearscreen    ;显示提示    mov ax,0b800h    mov es,ax    mov si,10*160    mov bx,0    mov ds,bx    mov bx,offset SETTIMENOTE- offset boot + 7E00h    call showmenuline        ;放置光标    mov ah,2    mov bh,0    mov dh,13    mov dl,30    int 10h    ;接受输入,设置CMOS时间    call getstr    call settimetocmos    ; 光说不返回到主菜单呢,你看看哪里有start？！ 早就改成bootstart了    ; ;返回主菜单    ; m4_backtostart:    ;     call start    pop cx    pop dx    pop bxret;==============================================================;将设置好的时间写入CMOS中settimetocmos:    push bx    push cx    push dx    push si    mov si,offset SETTIME- offset boot + 7E00h    mov cx,6    mov bx,0    mov ds,bx    settimetocmos_s:        push cx        mov word ptr dx,[si]        sub dx,3030H        mov cl,4        shl dl,cl        and dh,00001111B        or dl,dh;从两个ACII码---16位转换成BCD码--8位        mov al,ds:[offset CMOS- offset boot + bx + 7E00h]        out 70H,al    ;将al送入地址端口70h        mov al,dl        out 71H,al ;    将数据写入CMOSRAM时钟                add bx,1        add si,2        pop cx    loop settimetocmos_s    pop si    pop dx    pop cx    pop bxret;==============================================================;字符串接收getstr:    push ax    mov si,offset SETTIME - offset boot + 7E00h    getstrs:        mov ah,0        int 16h        cmp al,30h      ; ASCII码小于30h,说明不是数字        jb nonumber        cmp al,39H        ja nonumber     ; ASCII码大于39h,也不是数字        mov ah,0        call charstack  ; 字符入栈        mov ah,2        call charstack  ; 显示栈中的字符        jmp getstrs    nonumber:        cmp ah,0eh      ; 退格键的扫描码        je backspace            cmp ah,1ch      ; Enter键的扫描码        je enter        cmp ah,01h      ; Esc键的扫描码        je getstrs_backtostart        jmp getstrs    backspace:        mov ah,1        call charstack  ; 字符出栈        mov ah,2        call charstack  ; 显示栈中的字符        jmp getstrs    enter:              ; 输入回车之后也直接推出去        pop axret    getstrs_backtostart: ;esc返回主菜单        jmp bootstart;==============================================================;名称: keyboardinput;功能: 使用int中断获取键盘的输入;参数: 无;返回: ah为扫描码   al为ASCII码keyboardinput:    mov ax,0    int 16hret    ;==============================================================;名称: clearscreen;功能: 清除显存中第一页的显示;参数: 无;返回: 无clearscreen:    push bx    push es    push di    push cx    mov bx,0B800H    mov es,bx    mov di,0    mov bx,0700h;全部设置为黑色，填充就是0 设置颜色默认为黑底白字    mov cx,2000    clearscreenloop:            mov es:[di],bx            add di,2    loop clearscreenloop        pop cx    pop di    pop es    pop bxret;==============================================================;名称: showmenu;功能: 展示菜单;参数: 无;返回: 无showmenu:    push si    push bx    push di    push es    push cx    mov bx,0B800H   ;显存的位置    mov es,bx    mov si,10*160 + 30*2    ;mov bx,offset MENU - offset boot + 7E00h;------就得像这样先把MENU转移出来才行。。。。ds:[ds:MENU[bx]+di]这种写法也可以    ;上面这样算出来是标量啊，肯定是显示不了第一句话。你真正要的是ds:[bx]这样才是第一句的地址    ;所以在你把循环改了之后,就可以显示第一句了     mov di,0    mov cx,5    showmenu_s:        mov bx,ds:[offset MENU - offset boot + di + 7E00h];每一个字符串所对应的首地址        call showmenuline        add si,160        add di,2    loop showmenu_s    showmenu_s_ret:        pop cx        pop es        pop di        pop bx        pop siret;名称: showmenuline;功能: 显示字符串;参数: ds:bx指向要显示字符串的首地址,以0结尾;      es:si 写入显存的位置;返回: 无showmenuline:;ds:bx指向要显示的字符串的首地址,以0结尾,si标明位置    push bx    push si    showmenuline_s:        mov al,ds:[bx]        cmp al,0        je showmenuline_s_ret                mov es:[si],al        ; mov byte ptr es:[si+1],07H 在清屏的地方已经设置过了                add si,2        add bx,1    jmp showmenuline_s    showmenuline_s_ret:        pop si        pop bxret;==============================================================;子程序: 字符栈的入栈、出栈和显示;参数说明: ah=功能号 0入栈 1出栈 2显示;         ds:si指向字符栈空间;         对于0号功能:al=入栈字符;         对于1号功能:al=返回字符;         对于2号功能:dh\dl=字符串在屏幕上显示的行、列位置charstack:    jmp short charstart    table dw offset charpush- offset boot + 7e00h,offset charpop - offset boot + 7e00h,offset charshow - offset boot + 7e00h    top dw 0                        ;the top of stack    charstart:        push bx        push cx        push di        push es        push si        mov bx,0        mov ds,bx        cmp ah,2        ja sret        mov bl,ah        mov bh,0        add bx,bx        jmp word ptr ds:[offset table - offset boot + bx + 7E00h]    charpush:        mov cx,ds:[offset top - offset boot + 7E00h]        cmp cx,11        ja sret        mov bx,ds:[offset top - offset boot + 7E00h]        mov ds:[si][bx],al        inc cx        mov ds:[offset top - offset boot + 7E00h],cx         jmp sret    charpop:        mov cx,ds:[offset top - offset boot + 7E00h]        cmp cx,0        je sret        dec cx        mov ds:[offset top - offset boot + 7E00h],cx         mov bx,ds:[offset top - offset boot + 7E00h]        mov al,ds:[si][bx]        mov byte ptr ds:[si][bx],'#'        jmp sret    ;-------这里实在是没办法了,逻辑上都没有问题,用子程序显示就能显示,用书上的程序反而不显示,不知道为什么    charshow:        mov bx,0b800h        mov es,bx        mov si,13*160+30*2        mov bx,offset SETTIME - offset boot + 7E00h        call showmenuline    sret:        pop si        pop es        pop di        pop dx        pop bxret;==============================================================boot_end:nop;================================================================code endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>财经-基金</title>
      <link href="/2021/11/02/cai-jing-ji-jin/"/>
      <url>/2021/11/02/cai-jing-ji-jin/</url>
      
        <content type="html"><![CDATA[<h1 id="基金"><a href="#基金" class="headerlink" title="基金"></a>基金</h1><h2 id="基金的分类"><a href="#基金的分类" class="headerlink" title="基金的分类"></a>基金的分类</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211102211501.png" alt="思维导图"></p><h3 id="投资方向"><a href="#投资方向" class="headerlink" title="投资方向"></a>投资方向</h3><ul><li><strong>货币型基金</strong>: 以短期国债、中央银行票据、银行存款等货币市场工具为投资对象。货币市场基金只能以货币市场工具为投资对象。比如余额宝等。</li></ul><blockquote><p>收益稳定、流动性强、随时存取</p></blockquote><ul><li><strong>债券型基金</strong>: 绝大部分资金都用于投资债券。债券投资比例为总资金的80%以上。</li></ul><blockquote><p>比较安全、收益也比较低</p></blockquote><ul><li><strong>混合型基金</strong>: 这类基金可以投资股票，也可以投资债券，甚至货币，资产的配置相对比较灵活。</li></ul><blockquote><p>风险低于股票型又高于债卷型。混合基金会根据基金投资目标的不同而指定不同的股票和债券配置比例，据此还可以细分：如果股票配置比例较高（50-70）就叫做<strong>偏股型基金</strong>; 如果股票和债券的配置比例差不多，就叫做<strong>股债平衡型基金</strong>；灵活配置；<strong>灵活配置型基金</strong>没有具体的比例，会根据市场状况灵活调整配置。</p></blockquote><ul><li><strong>股票型基金</strong>：绝大部分资金都投资于股票，股票投资站基金资产的80%以上</li></ul><blockquote><p>高风险、高收益</p></blockquote><h3 id="投资理念"><a href="#投资理念" class="headerlink" title="投资理念"></a>投资理念</h3><p>按照投资理念来分类，可以把基金分为主动型和被动型。</p><ul><li><p><strong>主动型基金</strong>以获取超越业绩基准的超额收益为目标，由基金经理主动投资管理，所以受基金经理个人风格影响比较大，属于高收益高风险的基金。比较适合于想在短期波动中寻找超额收益的人。</p></li><li><p><strong>被动性基金</strong>又被称为指数基金，是指被动跟踪某一市场指数，以获取一个市场平均收益为目标。这类基金几乎不受基金经理的操作影响，并且长期来看，指数是不断上涨的，适合于长期定投想在长期趋势中获益的人。同时定投指数基金也是投资大神巴菲特力荐的一种投资方式。</p></li></ul><h3 id="交易渠道"><a href="#交易渠道" class="headerlink" title="交易渠道"></a>交易渠道</h3><ul><li><strong>场内基金</strong> 指证券交易所上市，就是我们平常所说的股票市场，也称为二级市场。目前国内有两家证券交易所：上海证券交易所和深圳证券交易所。</li><li><strong>场外基金</strong> 指股票交易市场以外的市场，场外基金的买卖平台很多，包括银行、证券公司，基金公司和第三方销售公司，但注意不同渠道的申赎手续费不一定相同。在天天基金上买到的基金基本上都属于场外基金。</li></ul><h3 id="募集方式"><a href="#募集方式" class="headerlink" title="募集方式"></a>募集方式</h3><ul><li><p><strong>公募基金</strong> 公开发售的形式，向广大社会公众募集资金。</p></li><li><p><strong>私募基金</strong> 非公开的募集资金，门槛高。最低都是在100万以上。</p></li></ul><h3 id="运作方式"><a href="#运作方式" class="headerlink" title="运作方式"></a>运作方式</h3><ul><li><p><strong>封闭式基金</strong> 指基金份额在基金合同期限内固定不变，即基金募集结束后不再接受投资者的申购或者赎回份额。但是基金份额可以在证券交易所上市交易。这类基金不仅规模固定，连申购赎回时间也是固定的，中间是没办法赎回的，有点像定期存款。</p></li><li><p><strong>开放式基金</strong> 开放式基金份额不固定，在基金合同约定的时间，都可以向基金公司申购或者赎回份额。开放式基金也可以在证券交易所上市交易，比较灵活，规模不固定，随时可以申购和赎回。</p></li></ul><h3 id="特殊类型的基金"><a href="#特殊类型的基金" class="headerlink" title="特殊类型的基金"></a>特殊类型的基金</h3><ul><li><p><strong>ETF基金</strong> ETF，交易型开放式指数基金，又称为交易所交易基金(Exchange Traded Funds),是一种可以在交易所交易，基金份额可变的一种特殊开放式基金，它结合了封闭式基金和开放式基金的运作特点。是一种被动式管理型指数基金，跟踪复制指数。</p></li><li><p><strong>QDII</strong> QDII是Qualified Domestic Institutional Investor (合格的境内机构投资者)的首字缩写。它是在一国境内设立，经该国有关部门批准从事境外证券市场的股票、债券等有价证券业务的证券投资基金。</p></li><li><p><strong>分级基金</strong>分级基金又称结构型基金，是指在一个投资组合下，通过对基金收益或净资产的分解，形成两级(或多级)风险收益表现有一定差异化基金份额的基金品种。</p></li></ul><h2 id="常用的指数含义"><a href="#常用的指数含义" class="headerlink" title="常用的指数含义"></a>常用的指数含义</h2><h3 id="上证指数"><a href="#上证指数" class="headerlink" title="上证指数"></a>上证指数</h3><p>上证指数很好理解，就是在上海证券交易所上市的所有股票(股票代码60开头的)，按照某种计算方法给算出来的。怎么计算出来的我们可以不用管，但我们要知道，市值越大的股票，对指数的影响就越大。</p><h3 id="深圳成指"><a href="#深圳成指" class="headerlink" title="深圳成指"></a>深圳成指</h3><p>深证成指，就是在深圳证券交易所上市的500只股票，计算出来的一个指数。这500只股票是深市中最牛逼的500只，具体的挑选方法不重要。我们需要知道的是，深证成指代表的是深市的股票走势。深证成指的影响力没有上证指数大</p><h3 id="创业板指"><a href="#创业板指" class="headerlink" title="创业板指"></a>创业板指</h3><p>是由所有创业板的股票计算出来的。这个指数的走势，代表的是市场里面中小股票的走势。不过左右的指数基本都是，市值越大，权重就越大，对指数影响越大。</p><h3 id="沪深300、中证500、上证50"><a href="#沪深300、中证500、上证50" class="headerlink" title="沪深300、中证500、上证50"></a>沪深300、中证500、上证50</h3><p>沪深300指数，可以理解为，股市中权重最大、成交最为活跃的300只股票，按照一定的计算方法计算出来的。这个指数的走势，代表的是市场中权重股的走势，比如工商银行、贵州茅台、中国石油这些股票。</p><p>现在很多业绩基准都是以沪深300作为基准进行比较。比如一个基金是否跑赢了市场，会把基金收益率和沪深300的收益率比较，而不是上面所说的上证指数（大盘）。</p><p>这是因为现在普遍认为，上证指数已经失真了，不能准确反应整个市场的走势。因为上证指数更多的是代表权重大盘股的走势，而不是整个市场。</p><p>中证500指数，可以看作是，排在上面所说的300只股票之后的500只，也就是排名301-800的那些股票，按照一定的方法计算出来的。这个指数的走势，代表的是市场里面中小股票的走势，排名301-800的500只股票，一般是细分行业的龙头股。比如通策医疗、宝信软件、绝味食品等。</p><p>上证50指数，是由上海证券交易所上市的（股票代码60开头的），权重最大，成交最活跃的50只股票，计算出来的一个指数。这个指数的走势，代表的是权重中的权重股的走势。</p>]]></content>
      
      
      <categories>
          
          <category> 财经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基金 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动漫-斗破苍穹</title>
      <link href="/2021/10/31/dong-man-dou-po-cang-qiong/"/>
      <url>/2021/10/31/dong-man-dou-po-cang-qiong/</url>
      
        <content type="html"><![CDATA[<h1 id="三年之约"><a href="#三年之约" class="headerlink" title="三年之约"></a>三年之约</h1><p>三年之约真的拍了三年，虽然没有看过小说，但随着慢慢地在看动漫以后，内心里也真正喜欢上了萧炎。可能动漫中确实有些夸张的地方，但还是能从中得到些许关于生活的感悟。</p><p>在第四季的结尾，萧炎临上云岚宗的那份淡然与宁静。他想到的是这三年间，帮助过他的人，自己经历过的事情。配上动漫的场景，的确看的出来制作方的确很用心。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211031212833.png" alt="临上云岚宗"></p><p>在忍受退婚之后，他一直以打败纳兰嫣然为目标，不断地去磨砺自己，增强自己的本领。但直到药老因为耗尽灵魂力量而进入沉睡状态的时候，萧炎才真正地明白：原来他是那么依赖药老。从那之后，他开始独自面对复杂的情况，准备唤醒药老的丹药。</p><p>萧炎也曾说，三年之约不过是给过去三年的一个交代。他真的是放下了，真正地专注于自己，而不是要打败谁。在经历了如此多的事情之后，他的内心真的已经很强大了。有的时候，我真觉得生活也是这样。我以前在高中的学习生活中，经常要以谁谁为目标，要在考试中超过他。但却总是事与愿违。经常因此灰心丧气许久。或者就是因为在打球的过程中，经常会有人嘲笑我，我就要非常努力地练球，证明给他们看。</p><p>可以说，前期的这些的确给了我很大的学习动力，但我因此浪费了很多不必要的精力和时间。因为我可能并没有想清楚自己想要活成什么样子。真正改变我的，就是复读的那一年。从现在的角度上来看，复读真的锻炼了我心理。几乎永远都在教室的最后面，老师不记得我的名字，同学只认识舍友，几乎没有任何娱乐活动。在那段日子里，我真的感觉自己每天都在进步，也或许正是从那个时候开始，我才明白我是要做我自己，不需要去看别人。正是这些经历，我在上大学之后，就一直锻炼自己的一个人生活的能力。</p><p>我再也不需要什么目标了，真正要做的就是不断地去完善自己。我不会左手，我就在寒假中努力的练习左手运球。我不会投三分，我就练深蹲和平板支撑锻炼自己的核心。并不是为了超越谁谁谁，也不是为了去赢得别人在球场上对我的赞美。就单纯地只是在完善自己。在家里没有球馆，没有场地，就自己去找没人的地方练习。令我很庆幸的是，路过的路人并没有嘲笑我。他们反而再说我是专业打球的。这真的令我很惭愧，也很高兴。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QQ%E5%9B%BE%E7%89%8720211031215440.jpg" alt="在家时训练的场地"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QQ%E5%9B%BE%E7%89%8720211031215449.jpg" alt="夕阳"></p><p>在学习上也是这样，虽然的确跟很多优秀的同学实在是没法比较，但我也习惯了这种巨大的差距。并不是躺平，我只是不想因为别人，而改变了我自己前进的方向。</p><p>就像片尾曲所唱的那样(<code>角色</code>)</p><blockquote><p>只需要 记得<br>从前现在 都要坚持 自我</p></blockquote><p>这文笔实在是差，写着写着就不知道写啥了。~~~~😀</p><p>以后我也想把这里当成个日记。想写的就随便写，反正也没人认识我。也没什么人可以看到。</p>]]></content>
      
      
      <categories>
          
          <category> 动漫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 斗破苍穹 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-直接定位表</title>
      <link href="/2021/10/26/hui-bian-yu-yan-xue-xi-zhi-jie-ding-wei-biao/"/>
      <url>/2021/10/26/hui-bian-yu-yan-xue-xi-zhi-jie-ding-wei-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="直接定址表"><a href="#直接定址表" class="headerlink" title="直接定址表"></a>直接定址表</h1><h2 id="描述了单元长度的标号"><a href="#描述了单元长度的标号" class="headerlink" title="描述了单元长度的标号"></a>描述了单元长度的标号</h2><p>以前我们多采用后面不带冒号的形式进行编程</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume:codecode segment    a: db 1,2,3,4,5,6,7,8    b: dw 0start:    mov si,offset a    mov bx,offset b    mov cx,8s:    mov al,cs:[si]    mov ah,0    add cs:[bx],ax    inc si    loop s    mov ax,4c00h    int 21hcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>But the mark only represent the address of the memory. We still have another form of the mark that does not have the colon. For example.</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume:codecode segment    a db 1,2,3,4,5,6,7,8    b dw 0start:    mov si,offset a    mov bx,offset b    mov cx,8s:    mov al,a:[si]    mov ah,0    add bs,ax    inc si    loop s    mov ax,4c00h    int 21hcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>mov al,a[si]</code> equal to <code>mov al,cs:0[si]</code></p><p>So, we could find  the way helps us access the address of memory in a neat form. We call it data-mark.他标记了存储数据的单元的地址和长度，它不同于仅仅表示地址的标号。</p><h2 id="在其他段使用数据标号"><a href="#在其他段使用数据标号" class="headerlink" title="在其他段使用数据标号"></a>在其他段使用数据标号</h2><p>一般来说，我们不在代码段中定义数据，而是将数据定义到其他段中，在其他段中，我们也可以使用数据标号来描述数据单元的地址和长度。</p><p><strong>注意：在后面加有‘：’的地址只能在代码段中使用，不能在其他段使用。</strong></p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>安装一个新的int 7ch中断例程</p><blockquote><p>功能: 1.clear the screen<br>2.set the foreground<br>3.set the background<br>4.move up one row</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>编写新的int 7ch 中断例程</li><li>安装新的int 7ch 中断例程</li></ul><blockquote><p>这个实验过程的代码出了很多问题，到最后终于改好了。</p></blockquote><h4 id="初期的改错思路"><a href="#初期的改错思路" class="headerlink" title="初期的改错思路"></a>初期的改错思路</h4><p>the major problem 是中断例程中<code>table dw sub1,sub2,sub3,sub4</code>无法正常运作。<br>给人的感觉好像，不能在程序中用一样.按照这种形式写的话，后面的set标号无法被正确的编译。不知道为什么都变成了table标号下面的??</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211025211433.png" alt="问题1"></p><p>改成这种形式之后，才能在debug中的cpu看到正确的汇编代码，虽然代码段中把它们这些地址解析成了汇编指令</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211025210841.png" alt="问题2"></p><p>通过后续的观察发现,其实代码是被正确解析了的，只是在cpu版块的显示上table段中的存放的数据被当作了指令。但是为什么程序不执行呢？</p><blockquote><p>这也是为什么要把jmp命令放在前面的原因，就是为了不让table段存放的数据被当作指令执行，这样的话，肯定有问题的</p></blockquote><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211025212251.png" alt="改变写法后的对比图"></p><h4 id="后期的改错思路"><a href="#后期的改错思路" class="headerlink" title="后期的改错思路"></a>后期的改错思路</h4><p>先整理一下初期思路中出错的原因，再分析一下是哪些基础的知识没有掌握好，导致我们这么长时间一直在纠错</p><p><strong>初期思路：</strong></p><ul><li><p>1.jmp命令放在前面的原因，就是为了防止我们存储的数据被当作指令执行，这也是为什么你在debug模块中的cpu看汇编代码的时候，看起来好像很奇怪。但是它们都是正常的指令。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211026164553.png" alt="cpu视角下的汇编代码"></p></li><li><p>2.<code>tabledata dw sub1,sub2,sub3,sub4;</code>无论是tabledata 还是 sub1，sub2 这些地址都是相对于最开始运行的CS段而言的，而我们想要的是中断例程，也就是执行中断例程的时候的CS段。这样去调用的话，肯定会出错。说成白话的话就是，本来一棵树距离图书馆35米，但是现在要问你，这棵树举例教学楼多少米，你要是还说35米。那是不是有点刻舟求剑的意思了。<strong>所以，真正要采用的是相对地址，还得加上0200h才行！</strong>    这样才行<code>tabledata dw offset sub1 - offset interupt + 0200h,offset sub2 - offset interupt+0200h,offset sub3 - offset interupt+0200h,offset sub4 - offset interupt+0200h</code></p></li><li><ol start="3"><li><code>call word ptr [bx]</code>这样默认的访问地址是 <code>ds+bx</code>，而你想要的是<code>cs:[bx]</code>所以要把寄存器显式的标注出来啊</li></ol></li><li><ol start="4"><li>虽然中断例程处，确实没有办法通过<code>F7</code>进入，但是可以通过看<code>0000:0200h</code>内存中代码，就可以发现到底是不是你想要的了。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211026165549.png" alt="0000:0200处的代码"></li></ol></li><li><ol start="5"><li>int指令和iret指令的作用，如果真的能很好的掌握这两个指令，也犯不着这么长时间才找到问题的源头。</li></ol></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codecode segmentstart:    mov ax,cs    mov ds,ax    mov si,offset interupt; set the ds:si point to the source address    mov ax,0    mov es,ax    mov di,0200h; set the es:di point to the destination address    mov cx,offset interuptend-offset interupt; cx the length of transmisson    cld ; the sequence of the transmit    rep movsb    mov ax,0    mov es,ax    cli    mov word ptr es:[7ch*4],0200h    mov word ptr es:[7ch*4+2],0    sti    ;调用之前的设置你需要再看一下要求是怎么设置的    mov ah,2    mov al,3        int 7ch; 这里怎么跳到了4002h    ; call interupt    mov ax,4c00h    int 21h;所以程序大体上是没有问题的;但是加上table sub1,sub2,sub3,sub4之后就显的怪怪的;通过调试程序来看的话,只有mov bl,ah之后的程序是正常的;前面的程序好像都是错的一样,--通过CPU反汇编的指令来看的话,前面的几句都不对;我如果去掉table直接调用函数的话,就不会出现上述问题;对前面的简单程序进行操作后发现,这个table dw sub1,sub2,sub3,sub4不能在标号里面;也不是因为jmp short set语句和tabledata dw......两个语句的顺序问题;书上说interupt:    jmp short set    ;并不是写法是错的，而是你用错了    ;按道理来说,程序的执行CS IP 本来在code段    ;现在你引发了中断以后就跑到 中断例程中的CS IP了,但是此时 tabledata中保存的仍然是最开始的CS IP 这样一跳转的话,z    ; tabledata dw sub1,sub2,sub3,sub4;这种写法是错误的    ;写成下面这种形式的话，set标号就会重新显示出来    tabledata dw offset sub1 - offset interupt + 0200h,offset sub2 - offset interupt+0200h,offset sub3 - offset interupt+0200h,offset sub4 - offset interupt+0200h    ; tabledata dw offset sub1 - offset interupt + 0200h,offset sub2 - offset interupt + 0200h,offset sub3 - offset interupt + 0200h,offset sub4 - offset interupt + 0200hset:    push bx    push es    push cx    cmp ah,3;判读功能号是否大于3    ja sret    mov bl,ah    mov bh,0    add bx,bx;根据ah中的功能号计算对应子程序在table表中的偏移    add bx,offset tabledata-offset interupt + 0200h    ; call word ptr (offset tabledata-offset interupt)[bx+0200h];调用对应的功能子程序这句话有问题     ; 上面这条指令错就错在 这样隐含的寄存器是ds 也就是 访问的是ds:[...]但是我们想要的是cs:[bx]    call word ptr cs:[bx]    ; add bx,7e02h    ; jmp cs:[bx]sret:    pop cx    pop es    pop bx    ; ret    iret;make the screen emptysub1:    push bx    push cx    push es    mov bx,0b800h    mov es,bx    mov bx,0    mov cx,2000sub1s:    mov byte ptr es:[bx],' '    add bx,2    loop sub1s    pop es    pop cx    pop bx    ret    ; jmp sret; set the foregroundsub2:    push bx    push cx    push es    mov bx,0b800h    mov es,bx    mov bx,1    mov cx,2000sub2s:    and byte ptr es:[bx],11111000B    or es:[bx],al    add bx,2    loop sub2s    pop es    pop cx    pop bx    ret;set the background colorsub3:    push bx    push cx    push es    mov cl,4    shl al,cl    mov bx,0b800h    mov es,bx    mov bx,1    mov cx,2000sub3s:    and byte ptr es:[bx],10001111B    or es:[bx],al    add bx,2    loop sub3s    pop es    pop cx    pop bx    ret;scroll up one linesub4:    push cx    push si    push di    push es    push ds    mov si,0b800h    mov es,si    mov ds,si    mov si,160;ds:si指向第n+1行    mov di,0;es:di指向第n行    cld    mov cx,24;共复制24行sub4s:    push cx    mov cx,160    rep movsb    pop cx    loop sub4s    mov cx,80    mov si,0sub4s1:    mov byte ptr [160*24+si],' ';最后一行清空    add si,2    loop sub4s1    pop ds    pop es    pop di    pop si    pop cx    retinteruptend:    nopcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211026170129.png" alt="清屏"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211026170158.png" alt="设置前景色"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211026170051.png" alt="设置背景色"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211026170240.png" alt="向上滚动一行"></p>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-外中断</title>
      <link href="/2021/10/24/hui-bian-yu-yan-xue-xi-wai-zhong-duan/"/>
      <url>/2021/10/24/hui-bian-yu-yan-xue-xi-wai-zhong-duan/</url>
      
        <content type="html"><![CDATA[<h1 id="外中断"><a href="#外中断" class="headerlink" title="外中断"></a>外中断</h1><h2 id="关于DOS-box是否真的操作硬件和内存的疑惑"><a href="#关于DOS-box是否真的操作硬件和内存的疑惑" class="headerlink" title="关于DOS-box是否真的操作硬件和内存的疑惑"></a>关于DOS-box是否真的操作硬件和内存的疑惑</h2><p>DOSBox is a <code>DOS-emulator</code> that uses the <code>SDL-library</code>which makes DOSBox very easy to port to different platforms. DOSBox has already been ported to many different platforms, such as Windows, BeOS, Linux, MacOS X…</p><p><code>Simple DirectMedia Layer is a cross-platform development library designed to provide low level access to audio, keyboard, mouse, joystick, and graphics hardware via OpenGL and Direct3D.</code>It is used by video playback software, emulators, and popular games including Valve’s award winning catalog and many Humble Bundle games.</p><p>SDL officially supports Windows, Mac OS X, Linux, iOS, and Android. Support for other platforms may be found in the source code.</p><p>SDL is written in C, works natively with C++, and there are bindings available for several other languages, including C# and Python.</p><h2 id="为什么有这个疑惑呢？"><a href="#为什么有这个疑惑呢？" class="headerlink" title="为什么有这个疑惑呢？"></a>为什么有这个疑惑呢？</h2><p>在之前的实验中，我们在中断向量表0000:0200至0000:02FF的部分增添了新的0号中断例程，并且修改了0号表项的入口地址，这样做，是不是影响了后续的程序呢？后面的程序是不是也会同样会收到影响呢？</p><p>好像是没有的,因为后面程序在<code>div指令溢出后</code>总是跑到一个循环里出不来</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211024105838.png" alt="1句"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211024105726.png" alt="2，3句"></p><p><strong>难道每次模拟的时候都会初始化？？也不是没有可能</strong></p><blockquote><p>通过本次实验的效果来看的话，上面的这个猜想是对的，也就是说DOS-box在每次重新打开的时候都会初始化，但是如果你不关闭这个DOS环境的话，它还是会影响下面的</p></blockquote><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>安装一个新的int 9中断例程</p><blockquote><p>功能: 在DOS下，按下‘A’键后，除非不再松开，如果松开就显示全屏的A，其他键照常使用</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>编写新的int 9 中断例程</li><li>保存原有的int 9 地址</li><li>安装新的int 9 中断例程</li></ul><blockquote><p>感觉整个章节的思路比较有借鉴意义，当我没有不太想重新写一个函数，但是又要改善原有函数的功能的话，可以在新函数中去调用原函数，以屏蔽掉繁琐的步骤，更好的完善自己改善的功能。</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codestack segment    db 128 dup(0)stack endscode segmentstart:    mov ax,stack    mov ss,ax    mov sp,128    push cs    pop ds    mov ax,0    mov es,ax    mov si,offset int9    mov di,204h    mov cx,offset int9end-offset int9    cld    rep movsb    push es:[9*4]    pop es:[200h]    push es:[9*4+2]    pop es:[202h]    cli    mov word ptr es:[9*4],204h    mov word ptr es:[9*4+2],0    sti;     mov ax,0b800h;     mov es,ax;     mov ah,'a'; s:;     mov es:[160*12+40*2],ah;     call delay;     inc ah;     cmp ah,'z';     jna s    mov ax,4c00h    int 21hint9:    push ax    push bx    push cx    push es    in al,60h        pushf    call dword ptr cs:[200h]    cmp al,1eh+80h    je printA    jmp int9retprintA:    ;if loose A    mov ax,0b800h    mov es,ax    mov bx,0    mov cx,2000s2:     mov byte ptr es:[bx],'A'    add bx,2    loop s2int9ret:    pop es    pop cx    pop bx    pop ax    iretint9end:    nopcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><strong>得先运行程序,然后在按下a就会有全屏A的效果了</strong></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211024204149.png" alt="20211024204149"></p>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-端口</title>
      <link href="/2021/10/23/hui-bian-yu-yan-xue-xi-duan-kou/"/>
      <url>/2021/10/23/hui-bian-yu-yan-xue-xi-duan-kou/</url>
      
        <content type="html"><![CDATA[<h1 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h1><p>我们前面讲过,各种存储器都和CPU的地址线\数据线\控制线相连. CPU在操控它们的时候,把它们都当作内存来对待,把它们总地看作一个由若干存储单元组成的逻辑存储器,这个逻辑存储器我们称其位内存地址空间.</p><p>在PC机系统中,和CPU通过总线相连的芯片除各种存储器外,还有以下三种芯片.</p><ul><li>各种接口卡(比如 网卡\显卡) 上的接口芯片,它们控制接口卡进行工作;</li><li>主板上的接口芯片,CPU通过它们对部分外设进行访问;</li><li>其他芯片,用来存储相关的系统信息,或进行相关的输入输出处理</li></ul><p>在这些芯片中,都由一组可以由CPU读写的寄存器.这些寄存器,它们在物理上可能处于不同的芯片中,但是它们在以下两点上相同:</p><ul><li>都和CPU的总线相连,当然这种链接是通过它们所在的芯片进行的</li><li>CPU对它们进行读或者写的时候都通过控制线向它们所在的芯片发出端口读写命令</li></ul><p>可见,从CPU的角度,这些寄存器都当作端口,对它们进行统一编址,从而建立了一个统一的端口地址空间.每一个端口在地址空间中都有一个地址.</p><p>CPU 可以直接独写以下三个地方的数据:</p><ul><li>CPU内部的寄存器</li><li>内存单元</li><li>端口</li></ul><h2 id="端口独写"><a href="#端口独写" class="headerlink" title="端口独写"></a>端口独写</h2><h3 id="访问内存"><a href="#访问内存" class="headerlink" title="访问内存"></a>访问内存</h3><p><code>mov ax,ds:[8]</code></p><ul><li>CPU通过地址线将地址信息8发出</li><li>CPU通过控制线发出内存读命令,选中存储器芯片,并通知它,将要从中读取数据</li><li>存储器将8号单元中的数据通过数据线送入CPU</li></ul><h3 id="访问端口"><a href="#访问端口" class="headerlink" title="访问端口"></a>访问端口</h3><p><code>int al,60h</code></p><ul><li>CPU通过地址线将地址信息60h发出;</li><li>CPU通过控制线发出端口读命令,选中端口所在的芯片,并通知它,将要从中读取数据</li><li>端口所在的芯片将60h端口中的数据通过数据线送入CPU</li></ul><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>CMOS RAM 中,存放着当前的时间: 年\月\日\时\分\秒,这六个信息的长度均为1字节.以BCD码的方式存放</p><blockquote><p>编程 以 <code>年/月/日 时:分:秒</code>的格式,显示当前的日期\时间</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>因为读写的单元不是很有规律,所以只能一个一个的写了</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codedata segment    db 20 dup(0)data ends;s min hour day month yearcode segmentstart:    ;s    mov bl,0    mov al,bl    out 70h,al    in al,71h    mov ah,al    mov cl,4    shr ah,cl;右移四位,取高4位    and al,00001111b;与,取低4位        add ah,30h    add al,30h    push ax        ;分    mov bl,2    mov al,bl    out 70h,al    in al,71h    mov ah,al    mov cl,4    shr ah,cl;右移四位,取高4位    and al,00001111b;与,取低4位        add ah,30h    add al,30h    push ax        ;时    mov bl,4    mov al,bl    out 70h,al    in al,71h    mov ah,al    mov cl,4    shr ah,cl;右移四位,取高4位    and al,00001111b;与,取低4位        add ah,30h    add al,30h    push ax    ;日    mov bl,7    mov al,bl    out 70h,al    in al,71h    mov ah,al    mov cl,4    shr ah,cl;右移四位,取高4位    and al,00001111b;与,取低4位        add ah,30h    add al,30h    push ax        ;月    mov bl,8    mov al,bl    out 70h,al    in al,71h    mov ah,al    mov cl,4    shr ah,cl;右移四位,取高4位    and al,00001111b;与,取低4位        add ah,30h    add al,30h    push ax    ;年    mov bl,9    mov al,bl    out 70h,al    in al,71h    mov ah,al    mov cl,4    shr ah,cl;右移四位,取高4位    and al,00001111b;与,取低4位        add ah,30h    add al,30h    push ax    mov ax,data    mov ds,ax    pop ax    mov ds:[0],ah    mov ds:[1],al    mov byte ptr ds:[2],'/'    pop ax    mov ds:[3],ah    mov ds:[4],al    mov byte ptr ds:[5],'/'        pop ax    mov ds:[6],ah    mov ds:[7],al        mov byte ptr ds:[8],' '        pop ax    mov ds:[9],ah    mov ds:[10],al    mov byte ptr ds:[11],':'        pop ax    mov ds:[12],ah    mov ds:[13],al    mov byte ptr ds:[14],':'    pop ax    mov ds:[15],ah    mov ds:[16],al    mov bx,0b800h    mov es,bx    mov si,0    mov bx,0    mov cx,0s:     mov byte ptr cl,ds:[bx]    jcxz ok    mov byte ptr es:[160*12+40*2+si],cl    inc bx    add si,2    jmp sok:    mov ax,4c00h    int 21hcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211023202035.png" alt="效果"></p>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-int指令</title>
      <link href="/2021/10/23/hui-bian-yu-yan-xue-xi-int-zhi-ling/"/>
      <url>/2021/10/23/hui-bian-yu-yan-xue-xi-int-zhi-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="int指令"><a href="#int指令" class="headerlink" title="int指令"></a>int指令</h1><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211023100523.png" alt="思维导图"></p><h2 id="BIOS和DOS中断例程的安装过程"><a href="#BIOS和DOS中断例程的安装过程" class="headerlink" title="BIOS和DOS中断例程的安装过程"></a>BIOS和DOS中断例程的安装过程</h2><ul><li>开机后，CPU一加电，初始化CS=0FFFFH，IP=0，自动从FFFF：0单元开始执行程序。FFFF：0处有一条跳转指令，CPU执行该指令后，转去执行BIOS中的硬件检测系统和初始化程序</li><li>初始化程序将建立BIOS所支持的中断向量。<blockquote><p>注意， 对于BIOS所提供的中断例程，只需要将入口地址登记在中断向量表中即可，因为他们是固化到ROM中的程序，一直在内存中存在</p></blockquote></li><li>硬件系统检测和初始化完成后，调用int 19h进行操作系统引导。从此将计算机交由操作系统控制。</li><li>DOS启动后，除完成其他工作外，还将它所提供的中断例程装入内存，并建立相应的中断向量。</li></ul><h2 id="实验13"><a href="#实验13" class="headerlink" title="实验13"></a>实验13</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><blockquote><p>编写并安装int 7ch中断例程，功能为显示一个用0结束的字符串，中断例程安装在0：200处<br>dh 行号，dl 列号， cl 颜色， ds:si指向字符串首地址</p></blockquote><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul><li>编写能显示字符串的中断处理程序</li><li>将终端服务程序移动到0000:0200处</li><li>修改中断向量表中的7cH号中断的入口地址,使其指向0000:0200</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><blockquote><p>一些注意事项和问题就写到注释里面了,后面忘了的话记得看看</p></blockquote><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codedata segment    db 'welcome to masm!',0data endscode segmentstart:    mov ah,15    int 10h    mov ah,0    int 10h    mov ax,cs    mov ds,ax    mov si,offset interupt; set the ds:si point to the source address    mov ax,0    mov es,ax    mov di,200h; set the es:di point to the destination address    mov cx,offset interuptend-offset interupt; cx the length of transmisson    cld ; the sequence of the transmit    rep movsb    mov ax,0    mov es,ax    mov word ptr es:[7ch*4],200h    mov word ptr es:[7ch*4+2],0        mov dh,10    mov dl,10    mov cl,2    mov ax,data    mov ds,ax    mov si,0    int 7ch    mov ax,4c00h    int 21h;dh 行号;dl 列号;cl 颜色;ds:si 指向字符串首地址interupt:    mov ax,0b800h    mov es,ax    ;找行号对应的内存地址    mov ah,00    mov al,160    mul dh    mov bp,ax    ;找列对应的内存地址    mov ah,00    mov al,2    mul dl    mov di,ax    s:        mov al,ds:[si]        cmp al,0        je ok        mov es:[bp+di],al        mov es:[bp+di+1],cl        inc si        add di,2        jmp s    ok:        iretinteruptend:    nopcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211023102716.png" alt="实现效果"></p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><blockquote><p>编写并安装int 7ch中断例程，功能为完成loop指令的功能<br>cx为循环次数，bx为位移</p></blockquote><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><ul><li>编写能实现loop循环的中断处理程序</li><li>将终端服务程序移动到0000:0200处</li><li>修改中断向量表中的7cH号中断的入口地址,使其指向0000:0200</li></ul><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codedata segment    db 'welcome to masm!',0data endscode segmentstart:    mov ah,15    int 10h    mov ah,0    int 10h    mov ax,cs    mov ds,ax    mov si,offset interupt; set the ds:si point to the source address    mov ax,0    mov es,ax    mov di,200h; set the es:di point to the destination address    mov cx,offset interuptend-offset interupt; cx the length of transmisson    cld ; the sequence of the transmit    rep movsb    mov ax,0    mov es,ax    mov word ptr es:[7ch*4],200h    mov word ptr es:[7ch*4+2],0    mov ax,0b800h    mov es,ax    mov di,160*12    mov bx, offset s - offset se    mov cx,80s:    mov byte ptr es:[di],'!'    add di,2    int 7chse:     nop    mov ax,4c00h    int 21h;采用中断方式实现的loop,转移的范围要更大因为时16位的;正常情况下的loop是8位的,范围相对来说要小一些interupt:    push bp    mov bp,sp    dec cx    jcxz interuptret;就是加不加bx的区别,当cx为零的时候,这个时候就不加bx也就是不会再跳回去了    add ss:[bp+2],bx;注意这个bx是个负数！interuptret:    pop bp    iretinteruptend:    nopcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现效果-1"><a href="#实现效果-1" class="headerlink" title="实现效果"></a>实现效果</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211023102946.png" alt="实现效果"></p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><blockquote><p>下面的程序，分别在屏幕的第2、4、6、8行显示4句英文诗，补全程序.</p></blockquote><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><p>这里面有个写法挺奇妙的, <code>ds:[ds:[si]]</code>是可以这样嵌套着写的</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codecode segments1: db 'Good,better,best,','$'s2: db 'Never let it rest,','$'s3: db 'Till good is better,','$'s4: db 'And better,best.','$'s:  dw offset s1, offset s2, offset s3,offset s4row: db 2,4,6,8start:    mov ah,15    int 10h    mov ah,0    int 10h    mov ax,cs    mov ds,ax    mov bx,offset s    mov si,offset row;行号    mov cx,4ok:    mov bh,0;第0页    mov dh,ds:[si];这个行号怎么不起作用呢    mov dl,0;列号    mov ah,2    int 10    mov dx,ds:[ds:[bx]];可以这样嵌套着写！我真是个大聪明！哈哈哈哈哈~~~    mov ah,9    int 21h        ;直接在这里加就行了,不用非得跑到mov指令那里加    ;不能直接加 标号,得加寄存器,你个憨憨    add si,1    add bx,2    loop ok    mov ax,4c00h    int 21hcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p>有个疑惑就是为什么这个地方的行号和列号的改变不起作用呢??</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211023103301.png" alt="效果"></p>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-内中断</title>
      <link href="/2021/10/21/hui-bian-yu-yan-xue-xi-nei-zhong-duan/"/>
      <url>/2021/10/21/hui-bian-yu-yan-xue-xi-nei-zhong-duan/</url>
      
        <content type="html"><![CDATA[<h1 id="内中断"><a href="#内中断" class="headerlink" title="内中断"></a>内中断</h1><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211021105626.png" alt="思维导图"></p><h2 id="debug单步执行命令的原理"><a href="#debug单步执行命令的原理" class="headerlink" title="debug单步执行命令的原理"></a>debug单步执行命令的原理</h2><p>基本上,CPU在执行完一条指令之后,如果检测到标志寄存器的TF位为1,则产生单步中断,引发中断的过程。单步中断的中断类型码为1,则它引发的中断过程如下:</p><ul><li>取得中断码类型1</li><li>标志寄存器入栈,TF\IF设置为0</li><li>CS、IP入栈</li><li>IP=(1<em>4),CS=(1</em>4+2)</li></ul><p>首先Debug提供了单步中断的中断处理程序,功能为显示所有寄存器中的内容后等待输入命令。然后,在使用t命令执行执行时,Debug将TF设置为1,使得CPU工作于中断方式下,则在CPU执行完这条指令后就引发单步中断,执行单步中断的中断处理程序,所有寄存器中的内容将被显示在屏幕上，并且等待输入命令。</p><p>在进入中断处理程序之前,设置TF=0。从而避免CPU在执行中断处理程序的时候发生单步中断。这就是为什么在终端过程中有TF=0这一步。</p><p>最后,CPU提供单步中断功能的原因就是，为单步跟踪程序的执行过程，提供实现机制</p><h2 id="响应中断的特殊情况"><a href="#响应中断的特殊情况" class="headerlink" title="响应中断的特殊情况"></a>响应中断的特殊情况</h2><p>一般情况下,CPU在执行完当前指令后，如果检测到中断信息，就响应中断，引发中断过程。可是，在有些情况下，CPU在执行完当前指令后，即便是发生中断，也不会相响应。对于这些情况，下面列举其中一种情况来进行说明。</p><p>在执行完向ss寄存器传送数据的指令后，即便是发生中断，CPU也不会相应。这样做的主要原因是，SS:SP联合指向栈顶，而对它们的设置应该连续完成。如果在设置完ss的指令后，CPU响应中断，引发中断过程，要在栈中压入标志寄存器，cs和ip的值。而ss改变，sp并未改变，ss：sp指向的不是正确的栈顶，将引起出错误。所以CPU在执行完设置ss 的指令后，不响应中断。</p><p>所以我们应该利用这个特性，将设置ss和sp的指令连续存放。</p><h2 id="实验12"><a href="#实验12" class="headerlink" title="实验12"></a>实验12</h2><blockquote><p>编写0号中断的处理程序,使得在除法溢出发生时,在屏幕中间显示字符串”divide error!”,然后返回到DOS</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>编写能显示divide error！的0号中断处理程序</li><li>将终端服务程序移动到0000:0200处</li><li>修改中断向量表中的0号中断的入口地址,使其指向0000:0200</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><blockquote><p>一些注意事项和问题就写到注释里面了,后面忘了的话记得看看</p></blockquote><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codecode segmentstart:;清屏    mov ah,15    int 10h    mov ah,0    int 10h;将do0送入内存0000:0200处    ;ds:si传送的原始位置    mov ax,code    mov ds,ax    mov si,offset do0    ;es:di传送的目的位置    mov ax,0000    mov es,ax    mov di,0200h;！！！！0200后面要加h啊！！     ;传送的长度    mov cx,offset do0end - offset do0    ;传送的方向 正向传送    cld    rep movsb;将do0的入口地址0000:0200存储在中断向量表0号表项中    mov ax,0000    mov es,ax    mov word ptr es:[0],0200h ;！！！！在没有寄存器显示指示操作的数据大小的时候,一定要用word或者byte显式指明    mov word ptr es:[2],0000h ;另外你只用写往里面存的数就行了,不用按照高低字节改变,他自己会改变的    mov ax,1000    mov bh,1    div bh    mov ax,4c00h    int 21;可以显示 overflow的中断处理程序 do0do0:    jmp do0start    db 'divide error!'do0start:    mov ax,cs    mov ds,ax    mov si,0202h ;设置ds:si指向字符串        mov ax,0B800H    mov es,ax    mov di,12*160+36*2 ;设置es:di指向字符串        ;明白为什么这里它不用这个rep的命令了把,因为显存里面的结构是 要显示的字符+颜色背景啥的,但是这个只能是一个一个的加    mov cx,13;设置字符串长度    ; cld;设置传输方向    ; rep movsb    s:        mov al,[si]        mov es:[di],al        inc si        add di,2;为什么不用rep命令的原因就在这        loop s    mov ax,4c00h    int 21hdo0end:    nopcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-标志寄存器</title>
      <link href="/2021/10/20/hui-bian-yu-yan-xue-xi-biao-zhi-ji-cun-qi/"/>
      <url>/2021/10/20/hui-bian-yu-yan-xue-xi-biao-zhi-ji-cun-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h1><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211020165355.png" alt="思维导图"></p><h2 id="计算机是如何知道到底是按有符号数处理还是按无符号数处理"><a href="#计算机是如何知道到底是按有符号数处理还是按无符号数处理" class="headerlink" title="计算机是如何知道到底是按有符号数处理还是按无符号数处理"></a>计算机是如何知道到底是按有符号数处理还是按无符号数处理</h2><p>CPU在执行add等指令的时候,就包含了两种含义:无符号数运算和有符号数运算。对于无符号数运算,CPU用CF位来记录是否产生了进位;对于有符号数运算,CPU用OF位来记录是否产生了溢出,当然,还要用SF位记录结果的符号。CF和OF所表示的进位和溢出,是分别对无符号数和有符号数运算而言的,他们之间没有任何关系。</p><p>也就是说,本身就是有两层含义都在,但具体看作哪一种,取决于写程序的你怎么处理这些变换的标志位。如何利用这些标志位和运算结果来正确的表达你想要的计算方式。</p><h2 id="实验11"><a href="#实验11" class="headerlink" title="实验11"></a>实验11</h2><blockquote><p>编写一个子程序,将包含任意字符,以0结尾的字符串中的小写字母转变成大写字母,描述如下。<br>名称：letterc<br>功能：将以0为结尾的字符串中的小写字母转变成大写字母<br>参数：ds:si指向字符串首地址</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>判断所取到的字节数据是不是0,是的话结束,不是的话,继续判断</li><li>判断取到的字节数据是不是小写字母。是的话,转变成大写字母；不是的话,就不变</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codesgdatasg segment    db "Beginner's All-purpose Symbolic Instruction Code.",0datasg endscodesg segment    begin:        mov ax,datasg        mov ds,ax        mov si,0        call letterc        mov ax,4c00h        int 21hletterc:    mov ch,00    mov cl,ds:[si]    jcxz ok    cmp cx,97    jb next    cmp cx,122    ja next    sub cx,32    mov ds:[si],clnext:    inc si    jmp lettercok:     retcodesg endsend begin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决主题代码块没有行号的问题</title>
      <link href="/2021/10/19/jie-jue-zhu-ti-dai-ma-kuai-mei-you-xing-hao-de-wen-ti/"/>
      <url>/2021/10/19/jie-jue-zhu-ti-dai-ma-kuai-mei-you-xing-hao-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="解决主题代码块没有行号的问题"><a href="#解决主题代码块没有行号的问题" class="headerlink" title="解决主题代码块没有行号的问题"></a>解决主题代码块没有行号的问题</h1><p>也是看了网上许多的解决方案,因为自己并不是很清楚这个hexo渲染页面详细的原理,所以对于一些基本的解决方案并没有自己的思考。通过观察别人的博客,通过控制台看其他人的css、js文件,终于发现可能是主题本身就没有写这部分,所以即使设置改回来了,还是没有办法实现。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1-在主题下的source-css-matery-css下添加如下代码"><a href="#1-在主题下的source-css-matery-css下添加如下代码" class="headerlink" title="1.在主题下的source/css/matery.css下添加如下代码"></a>1.在主题下的source/css/matery.css下添加如下代码</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211019164659.png" alt="具体目录"></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.line-numbers-rows</span> <span class="token punctuation">&#123;</span>    <span class="token property">border-right-width</span><span class="token punctuation">:</span> 0px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.line-numbers</span> <span class="token punctuation">&#123;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 1.5rem 1.5rem 1.5rem 3.5rem <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 1rem 0 <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #272822<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 0.35rem<span class="token punctuation">;</span>    <span class="token property">tab-size</span><span class="token punctuation">:</span> 4<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-在主题下的source-libs-prism-prism-css中添加如下代码"><a href="#2-在主题下的source-libs-prism-prism-css中添加如下代码" class="headerlink" title="2.在主题下的source/libs/prism/prism.css中添加如下代码"></a>2.在主题下的source/libs/prism/prism.css中添加如下代码</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">pre[class*="language-"].line-numbers</span> <span class="token punctuation">&#123;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token property">padding-left</span><span class="token punctuation">:</span> 3.8em<span class="token punctuation">;</span> <span class="token property">counter-reset</span><span class="token punctuation">:</span> linenumber<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">pre[class*="language-"].line-numbers > code</span> <span class="token punctuation">&#123;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token property">white-space</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.line-numbers .line-numbers-rows</span> <span class="token punctuation">&#123;</span> <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span> <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> -3.8em<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 3em<span class="token punctuation">;</span> <span class="token comment">/* works for line-numbers below 1000 lines */</span> <span class="token property">letter-spacing</span><span class="token punctuation">:</span> -1px<span class="token punctuation">;</span> <span class="token property">border-right</span><span class="token punctuation">:</span> 1px solid #999<span class="token punctuation">;</span> <span class="token property">-webkit-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token property">-moz-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token property">-ms-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token property">user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token selector">.line-numbers-rows > span</span> <span class="token punctuation">&#123;</span>  <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">counter-increment</span><span class="token punctuation">:</span> linenumber<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token selector">.line-numbers-rows > span:before</span> <span class="token punctuation">&#123;</span>   <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">counter</span><span class="token punctuation">(</span>linenumber<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token property">color</span><span class="token punctuation">:</span> #999<span class="token punctuation">;</span>   <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>   <span class="token property">padding-right</span><span class="token punctuation">:</span> 0.8em<span class="token punctuation">;</span>   <span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo主题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码块行数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-课程设计</title>
      <link href="/2021/10/18/hui-bian-yu-yan-xue-xi-ke-cheng-she-ji/"/>
      <url>/2021/10/18/hui-bian-yu-yan-xue-xi-ke-cheng-she-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="课程设计"><a href="#课程设计" class="headerlink" title="课程设计"></a>课程设计</h1><p>在整个课程中,我们一共有两个课程设计,编写两个比较综合的程序,这是第一个。任务:将实验7中的power idea公司的数据按照图10.2所示的格式在屏幕上显示出来。</p><p><strong>效果</strong><br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211018160247.png" alt="20211018160247"></p><h2 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h2><ul><li>从数字转换成字符串–通过除以10来不断获取余数,在加上30,最后再逆向输出</li><li>因为程序要显示的数据有些已经大于65535,应该编写一个新的数据到字符串转换的子程序,完成dword型到字符串的转换</li><li>在循环中如何选择寄存器(组合)来实现对有规律数据的复制</li><li>对数据存储结构和控制移位的寄存器值的变化的控制</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然实现了效果,但是在思路上还是比较凌乱,尤其是在整体的思路上面.还是改不了边写边改的毛病.</p><ul><li><input disabled="" type="checkbox"> 后面还是要不断的把代码再优化优化</li></ul><h2 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h2><h3 id="寄存器寻址组合"><a href="#寄存器寻址组合" class="headerlink" title="寄存器寻址组合"></a>寄存器寻址组合</h3><p>已知的是 di+bp / bx+si / bx+di 这几种可以用来在内存中遍历数据,在用之前,需要搞清楚,数据元素的确定最少需要几个变化的值来定位。</p><h3 id="条件指令的转移范围"><a href="#条件指令的转移范围" class="headerlink" title="条件指令的转移范围"></a>条件指令的转移范围</h3><p>条件指令的转移范围只能是从(-128-127),如果想要跳转的位置超过了这个范围,可以先跳到附近的位置,再在附近的位置利用无条件指令跳到想跳到的位置。</p><h3 id="汇编语言清除屏幕输出"><a href="#汇编语言清除屏幕输出" class="headerlink" title="汇编语言清除屏幕输出"></a>汇编语言清除屏幕输出</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">mov ah,15int 10hmov ah,0int 10h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><ul><li>哪些寄存器在循环的过程中需要变化,哪些寄存器需要在下一次循环或者调用子程序之前初始化,这些都要搞清楚</li><li>再利用div等有范围和大小限制的指令时,考虑一下是否会有溢出的情况</li><li>jmp和je等条件跳转指令如何实现循环的过程</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">;TODO ;1.现在 char段前面四个字节的年份复制完成了 √;2.着手将收入转换位为字符串并存在char段中  √;3.下一步是 将雇员数转换为字符串存在char段中,这个应该不用divdw了 √;4.最后一步就是显示了,不过应该也是比较头疼的把 √;整理TODO;1.整理一下到底哪几个寄存器可以组合起来用来寻址,我快疯了~~~;已知的是di+bp/bx+si/bx+diassume cs:codesg,ds:datadata segment    ;0    db '1975','1976','1977','1978','1979','1980','1981','1982','1983'    db '1984','1985','1986','1987','1988','1989','1990','1991','1992'    db '1993','1994','1995'    ;54H    dd 16,22,382,1356,2390,8000,160000,24486,50065,97479,140417,197514    dd 345980,590827,803530,1183000,1843000,2759000,3753000,4649000,5937000        ;A8H    dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793,4037,5635,8226    dw 11542,14430,15257,17800data endstable segment    db 21 dup ('year summ ne ?? ')table endschar segment    db 672 dup(0) ;672 = 32*21 每一年的数据占23个字节(取个整数刚好是32个字节-16的倍数), 一共有21年    ;00 XXXX    ;03 XXXX    ;06 XXXX    ;09 XXXX    ;年份 1997          4字节    ;空格               1字节-5    ;收入 max = 5937000 7个字节    ;空格               1字节-13        ;雇员数 max = 17800 5个字节    ;空格               1字节-19    ;人均收入 max = 333  3个字节    ;空格               1字节char endstestsg segment    db 1680 dup(0) testsg segmentcodesg segmentstart:    mov ah,15    int 10h    mov ah,0    int 10h    mov ax,data    mov ds,ax    mov ax,table    mov es,ax    call calculate_income    mov ax,table    mov ds,ax    mov ax,char    mov es,ax    call duplicate_year        call num_char    call employees_char    call average_salary_char    call show_str        mov ax,4c00h    int 21h;将数据存入显存当中show_str:    mov ax,char    mov ds,ax    mov ax,0B800H    mov es,ax        mov dh,4;行号    mov dl,0;列号    mov cl,2;颜色    mov bx,0    show_str_year:        push dx        ;找行号对应的内存地址        mov ah,00        mov al,160        mul dh        mov bp,ax        ;找列对应的内存地址        mov ah,00        mov al,2        mul dl        mov di,ax                ; ;找行号对应的内存地址--数据段        ; mov ah,00        ; mov al,10H        ; mov dl,dh        ; mov dh,0        ; mul dx        ; mov bx,ax        ;把颜色转移一下        mov al,cl        push cx        mov si,0        show_str_year_loop:            mov cl,ds:[bx+si]            mov ch,0            jcxz show_str_year_loop_ok            mov es:[bp+di],cl            mov es:[bp+di+1],al            add di,2            add si,1            jmp short  show_str_year_loop        show_str_year_loop_ok:            pop cx            mov dl,10;列号            ;更新下一个列地址            mov ah,00            mov al,2            mul dl            mov di,ax            ;把颜色再设置回来            mov al,cl                push cx        mov si,0        show_str_income_loop:            mov cl,ds:[bx+si+5]            mov ch,0            jcxz show_str_income_loop_ok            mov es:[bp+di],cl            mov es:[bp+di+1],al            add di,2            add si,1            jmp short  show_str_income_loop        show_str_income_loop_ok:            pop cx            mov dl,20;列号            ;更新下一个列地址            mov ah,00            mov al,2            mul dl            mov di,ax            ;把颜色再设置回来            mov al,cl                push cx        mov si,0        show_str_employees_loop:            mov cl,ds:[bx+si+13]            mov ch,0            jcxz show_str_employees_loop_ok            mov es:[bp+di],cl            mov es:[bp+di+1],al            add di,2            add si,1            jmp short  show_str_employees_loop        show_str_employees_loop_ok:            pop cx            mov dl,30;列号            ;更新下一个列地址            mov ah,00            mov al,2            mul dl            mov di,ax            ;把颜色再设置回来            mov al,cl        push cx        mov si,0        show_str_average_loop:            mov cl,ds:[bx+si+19]            mov ch,0            jcxz show_str_average_loop_ok            mov es:[bp+di],cl            mov es:[bp+di+1],al            add di,2            add si,1            jmp short  show_str_average_loop        show_str_average_loop_ok:            pop cx            mov dl,40;列号            ;更新下一个列地址            mov ah,00            mov al,2            mul dl            mov di,ax            ;把颜色再设置回来            mov al,cl                       pop dx        add bx,20H        add dh,1;行号加一        mov dl,0;列号清零        mov ax,21        sub al,dh        cmp byte ptr al,0        ; cmp byte ptr dh,21        ;je show_str_ok;这很明显不相等啊,为什么还跳转了？        ;你应该是跳转到循环里才对,如果不是跳到循环里,它其实没有发生跳转,只是按顺序往下执行刚好到下面了        je show_str_ok;这样写也跳转了。。？？        show_str_year_relay:            jmp show_str_year    show_str_ok:        ret;把人均工资部分转换成字符串average_salary_char:    mov bx,0    mov di,0    mov cx,21    average_salary_char_all:        push cx        mov ax,ds:[bx+0DH]        mov dx,0        mov si,0        mov bp,10        average_salary_char_one:                div bp            cmp ax,0            je average_salary_char_one_ok            push dx            mov dx,0            inc si            jmp average_salary_char_one        average_salary_char_one_ok:            push dx            inc si                        mov cx,si            mov si,0            mov bp,0            average_salary_char_one_ok_loop:                pop ax                add al,30H                mov es:[di+bp+19],al                inc bp                loop average_salary_char_one_ok_loop        pop cx        add bx,10H        add di,20H        loop average_salary_char_all    ret;把雇员数部分转换成字符串employees_char:    mov bx,0    mov di,0    mov cx,21    employees_char_all:        push cx        mov ax,ds:[bx+0AH]        mov dx,0        mov si,0        mov bp,10        employees_char_one:                div bp            cmp ax,0            je employees_char_one_ok            push dx            mov dx,0            inc si            jmp employees_char_one        employees_char_one_ok:            push dx            inc si                        mov cx,si            mov si,0            mov bp,0            employees_char_one_ok_loop:                pop ax                add al,30H                mov es:[di+bp+13],al                inc bp                loop employees_char_one_ok_loop        pop cx        add bx,10H        add di,20H        loop employees_char_all    ret;把收入部分的数字转换为字符串存储到内存当中num_char:    mov bx,0    mov cx,21    num_char_loop:        push cx                mov si,0        mov di,0        mov ax,ds:[bx+5H]        mov dx,ds:[bx+7H]        mov cx,0AH        ;具体的一个数转换为字符        num_char_loop_div:            call divdw            mov bp,0            ;如果dx和ax都为零说明该数转换完成            mov bp,dx            or bp,ax            cmp bp,0            je num_char_loop_div_ok            push cx;余数入栈            inc si            mov cx,0AH;每次跳回去之前要把cx再设置为零            jmp num_char_loop_div            num_char_loop_div_ok:                ;最后一个商小于10,上面没办法入栈了                push cx;在这里把这个入栈                inc si                mov cx,si;si中保留着这个具体数的所有余数                mov bp,0                mov ax,2H                mul bx                 mov di,ax                 num_char_loop_div_ok_loop:                        pop ax                    add ax,30H                    mov es:[di+5H+bp],al                    add bp,1                    loop num_char_loop_div_ok_loop                ; ;填了个空格                ; mov al,' '                ; mov es:[di+5H+bp],al        pop cx        add bx,10H        loop num_char_loop;把data段中的年份复制到char段里面去duplicate_year:    mov bx,0    mov si,0    mov di,0    mov cx,21    duplicate_year_all:        push cx        mov cx,2        mov bx,0        duplicate_year_year:            mov ax,ds:[di+bx]            mov es:[si+bx],ax            add bx,2            loop duplicate_year_year        ; ;添个空格         ; mov al,' '        ; mov es:[si+bx],al        add si,20H        add di,10H        pop cx        loop duplicate_year_all    ret;刚好是之前计算人均收入程序calculate_income:    mov bx,0;bx定位data段,bx year和收入都是四个字节可以公用,但是雇员数是两个字节的没办法公用    mov bp,0;bp定位es段    mov di,0;di用来在循环中服务于雇员数,因为它是两个字节,没办法跟year和outcome公用一个递增寄存器    mov cx,21    overall:        push cx        mov cx,2        mov si,0        year:            ;年份的4字节---两个字            mov ax,ds:[bx+si]            mov es:[bp+si],ax            add si,2            loop year        mov cx,2        mov si,0        outcome:            ;收入的4字节---两个字            mov ax,ds:[bx+54H+si]            mov es:[bp+5H+si],ax            add si,2            loop outcome        ;雇员数---一个字        mov ax,ds:[di+0A8H]        mov es:[bp+0AH],ax        ;计算人均收入        mov ax,es:[bp+5H];计算人均收入的,要用es的定位,那偏移量就得按照es的来。最开始写成ds的定位了[bx+54H]了        mov dx,es:[bp+5H+2]        div word ptr es:[bp+0AH]        mov es:[bp+0DH],ax        ;所有的空格        ;第一次没有考虑到空格是一个字节,这里不应该用16位的,应该用8位的        mov al,' '        mov es:[bp+4H],al        mov es:[bp+9H],al        mov es:[bp+0FH],al        pop cx        add di,2        add bx,4        add bp,16        loop overall    ret;名称：divdw;功能：进行不会产生溢出的除法运算,被除数为dword,除数为word.结果为dword;参数: ax dword的低16位 | dx dword高16位 | cx除数16位;返回: dx 结果的高16位, ax 结果的低16位, cx 余数;应用举例：计算 1000000/10(F4240H/0AH);结果: dx = 0001H  ax = 86A0H cx = 0divdw:    push si    push bx    push ax    mov ax,dx    div cl    mov bl,al    mov bh,00H    mov al,ah    mov ah,00H;bx保留商,ax保留余数    pop si    mov dx,si    mov dx,ax    mov ax,si    div cx;32/16 ax余数,dx商    mov si,bx    mov bx,dx    mov dx,si    mov cx,bx    pop bx    pop si    retcodesg endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-call和ret指令</title>
      <link href="/2021/10/16/hui-bian-yu-yan-xue-xi-call-he-ret-zhi-ling/"/>
      <url>/2021/10/16/hui-bian-yu-yan-xue-xi-call-he-ret-zhi-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="call和ret指令"><a href="#call和ret指令" class="headerlink" title="call和ret指令"></a>call和ret指令</h1><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211016111954.png" alt="思维导图"></p><p>关于使用栈来传递参数并用ret返回的实际例子还是需要多看才行。</p><h2 id="综合实验"><a href="#综合实验" class="headerlink" title="综合实验"></a>综合实验</h2><h3 id="显示字符串"><a href="#显示字符串" class="headerlink" title="显示字符串"></a>显示字符串</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">名称：show_str功能：在指定的位置,用指定的颜色,显示一个用0结束的字符串参数：dh 行号(0-24), dl 列号 0-79, cl颜色, ds:si指向字符串的首地址返回: 无应用举例：在屏幕的8行3列,用绿色显示出data段中的字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codedata segment    db 'Welcome to masm!',0data endscode segmentstart:    mov dh,8    mov dl,3    mov cl,2    mov ax,data    mov ds,ax    mov si,0    call show_str        mov ax,4c00h    int 21hshow_str:    push es    push bp    push bx    mov ax,0B800H    mov es,ax    ;找行号对应的内存地址    mov al,160    mul dh    mov bp,ax    sub bp,160    ;找列对应的内存地址    mov al,2    mul dl    mov di,ax    sub di,2    ;把颜色转移一下    mov bl,cl    push cxs:     mov cl,ds:[si]    mov ch,0    jcxz ok    mov es:[bp+di],cl    mov es:[bp+di+1],bl    add di,2    add si,1    jmp short sok:    pop cx    pop bx    pop bp    pop es    retcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211016112701.png" alt="显示字符串"></p><h3 id="解决除法溢出的问题"><a href="#解决除法溢出的问题" class="headerlink" title="解决除法溢出的问题"></a>解决除法溢出的问题</h3><p>用div指令做出发的时候可能产生除法溢出,比如:1000000/10就不能用div指令来算</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">名称：divdw功能：进行不会产生溢出的除法运算,被除数为dword,除数为word.结果为dword参数: ax dword的低16位 | dx dword高16位 | cx除数返回: dx 结果的高16位, ax 结果的低16位, cx 余数应用举例：计算 1000000/10(F4240H/0AH)结果: dx = 0001H  ax = 86A0H cx = 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codesgdatasg segmentdatasg endscodesg segmentstart:    mov ax,4240H    mov dx,000FH    mov cx,0AH    call divdw    mov ax,4c00h    int 21h;这里面就是因为 div 被除数默认放在ax | dx(高)和ax(低)中,所以比较麻烦;除数可以放在寄存器里也可以放在内存单元里，有8/16两种, 8-AL商 AH余数 || 16-AX商 DX余数;再就是因为数据运算要符合相同的类型,同为16或同为8,在寄存器里面换来换去的就比较麻烦divdw:    push ax    mov ax,dx    div cl    mov bl,al    mov bh,00H    mov al,ah    mov ah,00H;bx保留商,ax保留余数    pop si    mov dx,si    mov dx,ax    mov ax,si    div cx;32/16 ax余数,dx商    mov si,bx    mov bx,dx    mov dx,si    mov cx,bx    retcodesg endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行截图-1"><a href="#运行截图-1" class="headerlink" title="运行截图"></a>运行截图</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211016113513.png" alt="解决除法溢出的问题"></p><h3 id="数值显示"><a href="#数值显示" class="headerlink" title="数值显示"></a>数值显示</h3><p>将12666以字符串的形式显示到显示器上</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">名称：dtoc功能：将word型数据转变为十进制的字符串,字符串以0为结尾符参数：ax word型数据    ds:si指向字符串的首地址返回：无应用举例: 将12666以十进制的形式在屏幕的8行3列,用绿色显示出来<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="改进前代码"><a href="#改进前代码" class="headerlink" title="改进前代码"></a>改进前代码</h4><p>改进前,主要是利用在内存中的位置,来对字符串进行逆向的输出。因为算余数的话,顺序是66621得倒过来才行</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:code,ds:datadata segment    db 10 dup(0)data endscode segmentstart:    mov ax,12666    mov bx,data    mov ds,bx    mov si,0    call dtoc        mov dh,8    mov dl,3    mov cl,2    call show_str    mov ax,4c00h    int 21hdtoc:    mov dx,00    mov bh,00    mov bl,10;感觉逻辑没问题啊,商越界了 得用32/16的    div bx ;为什么会在这里卡住呢,感觉像是无限循环？？？    mov ch,00h    mov cl,dl    jcxz ok    add byte ptr cx,0030H    mov ds:[si],cx    inc si    jmp dtocok:    ;也不是不能操作栈,在之前push进去的,在这里都pop出来就不会有问题,要不然回影响ret指令pop IP    ;后面你可以再试试,这个程序还是有问题    sub si,1;运行完之后si=5,然而ds[si]此时刚好是0,所以你得减去个1才行    retshow_str:    push es    push bp    push bx    mov ax,0B800H    mov es,ax    ;找行号对应的内存地址    mov ah,00    mov al,160    mul dh    mov bp,ax    sub bp,160    ;找列对应的内存地址    mov ah,00    mov al,2    mul dl    mov di,ax    sub di,2    ;把颜色转移一下    mov bl,cl    push cxs:     mov cl,ds:[si]    mov ch,0    jcxz ok1    mov es:[bp+di],cl    mov es:[bp+di+1],bl    add di,2    sub si,1    jmp short sok1:    pop cx    pop bx    pop bp    pop es    ret        code endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="改进后代码"><a href="#改进后代码" class="headerlink" title="改进后代码"></a>改进后代码</h4><p>改进之后,利用了栈的特性,先将算出来的余数入栈,然后再出栈写到内存里.这样就刚好倒过来了。不过需要注意的是,<code>在子程序中push进去的,在ret之前都要pop出来哦！</code></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:code,ds:datadata segment    db 10 dup(0)data endscode segmentstart:    mov ax,12666    mov bx,data    mov ds,bx    mov si,0    call dtoc        mov dh,8    mov dl,3    mov cl,2    call show_str    mov ax,4c00h    int 21hdtoc:    mov dx,00    mov bh,00    mov bl,10;感觉逻辑没问题啊,商越界了 得用32/16的    div bx ;为什么会在这里卡住呢,感觉像是无限循环？？？    mov ch,00h    mov cl,dl    jcxz ok    add byte ptr cx,0030H    mov ds:[si],cx    inc si    jmp dtocok:    ;也不是不能操作栈,在之前push进去的,在这里都pop出来就不会有问题,要不然回影响ret指令pop IP    ;后面你可以再试试,这个程序还是有问题    sub si,1;运行完之后si=5,然而ds[si]此时刚好是0,所以你得减去个1才行    retshow_str:    push es    push bp    push bx    mov ax,0B800H    mov es,ax    ;找行号对应的内存地址    mov ah,00    mov al,160    mul dh    mov bp,ax    sub bp,160    ;找列对应的内存地址    mov ah,00    mov al,2    mul dl    mov di,ax    sub di,2    ;把颜色转移一下    mov bl,cl    push cxs:     mov cl,ds:[si]    mov ch,0    jcxz ok1    mov es:[bp+di],cl    mov es:[bp+di+1],bl    add di,2    sub si,1    jmp short sok1:    pop cx    pop bx    pop bp    pop es    ret        code endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行截图-2"><a href="#运行截图-2" class="headerlink" title="运行截图"></a>运行截图</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211016114256.png" alt="数值显示"></p>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美食篇-1-汉堡店</title>
      <link href="/2021/10/16/mei-shi-pian-1-han-bao-dian/"/>
      <url>/2021/10/16/mei-shi-pian-1-han-bao-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="美食"><a href="#美食" class="headerlink" title="美食"></a>美食</h1><p>这次是跟舍友去吃的一个汉堡店,本来是想着能有那种美食视频上面看到的那样,有那种一口都塞不下的汉堡。地点就在川大望江校区地铁站的周边。</p><p>最主要是比较贵，我和室友一共花了<code>148</code>,就点了<code>两个汉堡</code>(具体价钱给忘了)`一盘鸡翅`(6个/32)</p><h2 id="汉堡"><a href="#汉堡" class="headerlink" title="汉堡"></a>汉堡</h2><p>结果这汉堡并不是很大,口感的话,我是觉得就一般,牛肉饼反而有一种腥味在。总体感觉就一般。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/D5181D27FB0D2ABF12A801D3EEE3666A.jpg" alt="汉堡1"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/C7B2046D0B0F24404CDB4355A0113227.jpg" alt="汉堡2"></p><h2 id="鸡翅"><a href="#鸡翅" class="headerlink" title="鸡翅"></a>鸡翅</h2><p>鸡翅的话,还凑合把,主要是有蜂蜜芥末的酱。个人比较喜欢</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/B977411C890AA8437C60E59E84F4538A.jpg" alt="鸡翅"></p>]]></content>
      
      
      <categories>
          
          <category> 美食 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 成都 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美食篇-2-美国烤肉</title>
      <link href="/2021/10/16/mei-shi-pian-2-mei-guo-kao-rou/"/>
      <url>/2021/10/16/mei-shi-pian-2-mei-guo-kao-rou/</url>
      
        <content type="html"><![CDATA[<h1 id="美食"><a href="#美食" class="headerlink" title="美食"></a>美食</h1><p>这次由我室友和我还有另外两个同学一同前往，这个也是贵,最后人均花了105,不过体验还算可以。点了四个菜？名字忘了,大体就是烤肉串、意面、洋葱炒牛绒外加那种饼可以卷起来吃、烤肉三拼(鸡肉、牛肉、猪肉)</p><p>也是想体验一把视频里大口吃肉的感觉,但是回想起来,之前寒假的时候,我爸炖了好多排骨,同样是大口吃肉,为什么当时我就没有胃口吃呢？<br>为了弥补之前的遗憾,下一个寒假,我一定要将烤肉吃腻。大院子加上碳烤,想想就很过瘾。</p><h1 id="照骗"><a href="#照骗" class="headerlink" title="照骗"></a>照骗</h1><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/6DFA58B31EAAC59588475432A6AC93D7.jpg" alt="1"><br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/0CD8EF7A1D8C4E7CCCB4C33B921C5F98.jpg" alt="这个意面真的贵"></p>]]></content>
      
      
      <categories>
          
          <category> 美食 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 成都 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美食篇-3-鸡毛店</title>
      <link href="/2021/10/16/mei-shi-pian-3-ji-mao-dian/"/>
      <url>/2021/10/16/mei-shi-pian-3-ji-mao-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="美食"><a href="#美食" class="headerlink" title="美食"></a>美食</h1><p>这次由我室友和我还有另外两个同学一同前往，这个还算可以,最后人均花了65? 点了 酸菜鱼？毛血旺？其他的忘了,这都是后面整理的了。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QQ%E5%9B%BE%E7%89%8720211016180849.jpg" alt="照骗1"></p>]]></content>
      
      
      <categories>
          
          <category> 美食 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 成都 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美食篇-4-东北菜</title>
      <link href="/2021/10/16/mei-shi-pian-4-dong-bei-cai/"/>
      <url>/2021/10/16/mei-shi-pian-4-dong-bei-cai/</url>
      
        <content type="html"><![CDATA[<h1 id="美食"><a href="#美食" class="headerlink" title="美食"></a>美食</h1><p>这次由我和我的两个舍友,这家店相对来说比较实惠,个人感觉也比较好吃。可能是因为自己家乡也在北方的原因。</p><ul><li>地三鲜</li><li>锅包肉—感觉跟我爸弄得差不多~~~</li><li>饺子</li><li>炸茄盒</li><li><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QQ%E5%9B%BE%E7%89%8720211016181146.jpg" alt="东北菜"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 美食 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 成都 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美食篇-5-麦当劳</title>
      <link href="/2021/10/16/mei-shi-pian-5-mai-dang-lao/"/>
      <url>/2021/10/16/mei-shi-pian-5-mai-dang-lao/</url>
      
        <content type="html"><![CDATA[<h1 id="美食"><a href="#美食" class="headerlink" title="美食"></a>美食</h1><p>这次是所有的舍友了,毕竟一个舍友请客,点的麦当劳,有汉堡、可乐、炸鸡、小龙虾和粉条、薯条、披萨~~ 如果要是硬要算人均的话,应该在50左右</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QQ%E5%9B%BE%E7%89%8720211016181638.jpg" alt="麦当劳"></p>]]></content>
      
      
      <categories>
          
          <category> 美食 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 成都 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美食篇-6-陶德砂锅</title>
      <link href="/2021/10/16/mei-shi-pian-6-tao-de-sha-guo/"/>
      <url>/2021/10/16/mei-shi-pian-6-tao-de-sha-guo/</url>
      
        <content type="html"><![CDATA[<h1 id="美食"><a href="#美食" class="headerlink" title="美食"></a>美食</h1><p>这次是舍友和我外加上两个大寝的舍友,这次的菜也非常好吃，人均55? 可惜照骗我只有一张了。有一个鲫鱼饺子、红烧猪蹄、还有一个肥肠、还有虾仁米线,还点了一些包子。</p><p>本来想尝尝肥肠的,因为之前看别人在视频里面吃的时候,我感觉很香。结果吃了一口,差点原地~~</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/1E5077B3A17D99CD7EDF42E4F291B254.jpg" alt="照片"></p>]]></content>
      
      
      <categories>
          
          <category> 美食 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 成都 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-数据处理的两个基本问题</title>
      <link href="/2021/10/13/hui-bian-yu-yan-xue-xi-shu-ju-chu-li-de-liang-ge-ji-ben-wen-ti/"/>
      <url>/2021/10/13/hui-bian-yu-yan-xue-xi-shu-ju-chu-li-de-liang-ge-ji-ben-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="数据处理的两个基本问题"><a href="#数据处理的两个基本问题" class="headerlink" title="数据处理的两个基本问题"></a>数据处理的两个基本问题</h1><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p>还是画这样的图，感觉思路清晰一些。新的东西并不多,大多感觉还是对以往问题的一个总结。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211013102156.png" alt="思维导图"></p><h2 id="综合实验"><a href="#综合实验" class="headerlink" title="综合实验"></a>综合实验</h2><p>编程,将data段中的数据按如下格式写入到table段中,并计算21年中的人均收入(取整),结果也按照下面的格式保存在table段中。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211013102611.png" alt="题干1"><br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211013102632.png" alt="题干2"></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>  具体的思路就是,利用内外循环,大循环循环00-10H-20H这样每一行的数据,小循环循环每个数据项</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>中具体的字节\字。同时利用idata和si</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codesg,ds:datadata segment    ;0    db '1975','1976','1977','1978','1979','1980','1981','1982','1983'    db '1984','1985','1986','1987','1988','1989','1990','1991','1992'    db '1993','1994','1995'    ;54H    dd 16,22,382,1356,2390,8000,160000,24486,50065,97479,140417,197514    dd 345980,590827,803530,1183000,1843000,2759000,3753000,4649000,5973000        ;A8H    dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793,4037,5635,8226    dw 11542,14430,15257,17800data endstable segment    db 21 dup ('year summ ne ?? ')table endscodesg segment;正好印证了两个重点的地方 1.数据在什么地方 2.数据的大小;算人均收入的那个还没有写--------------------------------------------------------start:    mov ax,data    mov ds,ax        mov ax,table    mov es,ax;这里经常把ax写成table了    mov bx,0;bx定位data段,bx year和收入都是四个字节可以公用,但是雇员数是两个字节的没办法公用    mov bp,0;bp定位es段    mov di,0;di用来在循环中服务于雇员数,因为它是两个字节,没办法跟year和outcome公用一个递增寄存器    mov cx,21    overall:        push cx        mov cx,2        mov si,0        year:            ;年份的4字节---两个字            mov ax,ds:[bx+si]            mov es:[bp+si],ax            add si,2            loop year        mov cx,2        mov si,0        outcome:            ;收入的4字节---两个字            mov ax,ds:[bx+54H+si]            mov es:[bp+5H+si],ax            add si,2            loop outcome        ;雇员数---一个字        mov ax,ds:[di+0A8H]        mov es:[bp+0AH],ax        ;计算人均收入        mov ax,es:[bp+5H];计算人均收入的,要用es的定位,那偏移量就得按照es的来。最开始写成ds的定位了[bx+54H]了        mov dx,es:[bp+5H+2]        div word ptr es:[bp+0AH]        mov es:[bp+0DH],ax        ;所有的空格        ;第一次没有考虑到空格是一个字节,这里不应该用16位的,应该用8位的        mov al,' '        mov es:[bp+4H],al        mov es:[bp+9H],al        mov es:[bp+0FH],al        pop cx        add di,2        add bx,4        add bp,16        loop overall    ;计算收入    mov ax,4c00h    int 21hcodesg endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-转移指令原理</title>
      <link href="/2021/10/13/hui-bian-yu-yan-xue-xi-zhuan-yi-zhi-ling-yuan-li/"/>
      <url>/2021/10/13/hui-bian-yu-yan-xue-xi-zhuan-yi-zhi-ling-yuan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="转移指令原理"><a href="#转移指令原理" class="headerlink" title="转移指令原理"></a>转移指令原理</h1><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211013193650.png" alt="思维导图"></p><h2 id="根据位移进行转移的意义"><a href="#根据位移进行转移的意义" class="headerlink" title="根据位移进行转移的意义"></a>根据位移进行转移的意义</h2><p>在对应的机器码中不包含转移的目的地址,而包含的是到目的地址的位移。这种设计,方便了程序段在内存中的浮动装配。使程序装在内存中的不同位置都可正确执行,因为在执行时,只涉及到位移,而不是地址。如果是地址的话,程序没有装载到对应的位置,就会造成程序没有办法正确执行。</p><h2 id="综合实验"><a href="#综合实验" class="headerlink" title="综合实验"></a>综合实验</h2><h3 id="实验8-分析一个奇怪的程序"><a href="#实验8-分析一个奇怪的程序" class="headerlink" title="实验8 分析一个奇怪的程序"></a>实验8 分析一个奇怪的程序</h3><p>分析下面的程序,在运行前思考:这个程序可以正确返回吗？</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codesgcodesg segment    mov ax,4c00h    int 21h;反正就是刚好利用了jmp 的相对位移的特性.short 8位位移 = 标号处的地址-jmp指令后的第一个字节地址start:    mov ax,0s:    nop    nop    mov di,offset s    mov si,offset s2    mov ax,cs:[si]    mov cs:[di],axs0:    jmp short ss1:    mov ax,0    int 21h    mov ax,0s2:    jmp short s1    nopcodesg endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以正确返回,刚好利用了jmp 的相对位移的特性.short 8位位移 = 标号处的地址-jmp指令后的第一个字节地址。当程序再次跳回到s标号处执行时,其第一条指令为 EBF6,就刚好是往上面跳到了 <code>mov ax,4c00h</code></p><h4 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211013194841.png" alt="实验8"></p><h3 id="实验9"><a href="#实验9" class="headerlink" title="实验9"></a>实验9</h3><p>在屏幕中间分别显示绿色\绿底红色\白底蓝色的字符串”welcome to masm!”.</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>感觉这个没用到这章讲的东西啊??!!，还是因为我水平不行？？</p><p><strong>我是真的憨憨,第一开始没有注意到题目中说的是要在屏幕中间显示</strong></p><h5 id="改进前-写了三个循环"><a href="#改进前-写了三个循环" class="headerlink" title="改进前,写了三个循环"></a>改进前,写了三个循环</h5><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codesg,ds:datasgdatasg segment    db 'welcome to masm!'datasg endscodesg segmentstart:    mov ax,datasg    mov ds,ax    mov ax,0B800H    mov es,ax;1        mov bx,6E0H    mov si,0    mov di,80    mov cx,16s:      mov al,ds:[si]    mov es:[bx+di],al    mov byte ptr es:[bx+di+1],02H    add di,2    add si,1    loop s;2    mov bx,780H    mov si,0    mov di,80    mov cx,16s1:      mov al,ds:[si]    mov es:[bx+di],al    mov byte ptr es:[bx+di+1],24H    add di,2    add si,1    loop s1;3    mov bx,820H    mov si,0    mov di,80    mov cx,16s2:      mov al,ds:[si]    mov es:[bx+di],al    mov byte ptr es:[bx+di+1],71H    add di,2    add si,1    loop s2    mov ax,4c00h    int 21hcodesg endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="改进后-写成了一个循环"><a href="#改进后-写成了一个循环" class="headerlink" title="改进后,写成了一个循环"></a>改进后,写成了一个循环</h5><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codesg,ds:datasgdatasg segment    db 'welcome to masm!'    db 02H,24H,71Hdatasg endscodesg segmentstart:    mov ax,datasg    mov ds,ax    mov ax,0B800H    mov es,ax;1        mov bx,6E0H    mov cx,3    mov bp,0all:    push cx    mov si,0    mov di,80    mov cx,16    s:          mov al,ds:[si]        mov es:[bx+di],al        mov al,ds:[bp+16]        mov es:[bx+di+1],al        add di,2        add si,1        loop s    add bp,1    add bx,160    pop cx    loop all; ;2;     mov bx,780H;     mov si,0;     mov di,80;     mov cx,16; s1:  ;     mov al,ds:[si];     mov es:[bx+di],al;     mov byte ptr es:[bx+di+1],24H;     add di,2;     add si,1;     loop s1; ;3;     mov bx,820H;     mov si,0;     mov di,80;     mov cx,16; s2:  ;     mov al,ds:[si];     mov es:[bx+di],al;     mov byte ptr es:[bx+di+1],71H;     add di,2;     add si,1;     loop s2    mov ax,4c00h    int 21hcodesg endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行截图-1"><a href="#运行截图-1" class="headerlink" title="运行截图"></a>运行截图</h4><p>这个运行结果，怎么有的时候行有的时候不行？之前运行的时候，第一行的welcome 显示成了 celcome或是1/4elcome很奇怪。但是后面就又正常了<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211013201157.png" alt="实验九"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211013205518.png" alt="改正后"></p>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-更灵活的定位内存地址的方法</title>
      <link href="/2021/10/11/hui-bian-yu-yan-xue-xi-geng-ling-huo-de-ding-wei-nei-cun-di-zhi-de-fang-fa/"/>
      <url>/2021/10/11/hui-bian-yu-yan-xue-xi-geng-ling-huo-de-ding-wei-nei-cun-di-zhi-de-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><h2 id="编程1-将datasg段中每个单词的前四个字母改为大写字母"><a href="#编程1-将datasg段中每个单词的前四个字母改为大写字母" class="headerlink" title="编程1 将datasg段中每个单词的前四个字母改为大写字母"></a>编程1 将datasg段中每个单词的前四个字母改为大写字母</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codesg,ss:stacksg,ds:datasgstacksg segment    dw 0,0,0,0,0,0,0,0stacksg endsdatasg segment    db '1. display      '    db '2. brows        '    db '3. replace      '    db '4. modify       'datasg endscodesg segmentstart:    mov ax,stacksg    mov ss,ax    mov sp,16;初始化栈段        mov ax,datasg    mov ds,ax;初始化数据段        mov bx,0    mov cx,4s:    push cx    mov cx,4    mov si,0s0:    mov al,ds:[bx+3+si];这个地方必须要是 bx+(si/di)+(idata)这样的形式,()为可选内容    and al,11011111B;01100100 01000100--44      mov ds:[bx+3+si],al    inc si    loop s0    pop cx    add bx,16    loop s        mov ax,4c00h    int 21hcodesg endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211011200251.png" alt="运行截图"></p><h3 id="出现的错误"><a href="#出现的错误" class="headerlink" title="出现的错误"></a>出现的错误</h3><ul><li><code>and al,11011111b</code>少打了一个1</li></ul><h2 id="编程2-将datasg中的第一个字符串转换成大写-第二个字符串转成小写"><a href="#编程2-将datasg中的第一个字符串转换成大写-第二个字符串转成小写" class="headerlink" title="编程2 将datasg中的第一个字符串转换成大写,第二个字符串转成小写"></a>编程2 将datasg中的第一个字符串转换成大写,第二个字符串转成小写</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codesg,ds:datasgdatasg segment    db 'BaSiC'    db 'iNfOrMaTiOn'datasg endscodesg segment    start:        mov ax,datasg        mov ds,ax                mov bx,1        mov cx,2    s:        mov al,ds:[bx]        and al,11011111b        mov ds:[bx],al        add bx,2        loop s                mov bx,6;这个bx要定位到 第二个字符串的第一个大写字母啊        mov cx,5    s0:        mov al,ds:[bx]        or al,00100000b        mov ds:[bx],al                add bx,2        loop s0        mov ax,4c00h        int 21hcodesg endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211011203022.png" alt="运行截图"></p><h3 id="出现的错误-1"><a href="#出现的错误-1" class="headerlink" title="出现的错误"></a>出现的错误</h3><ul><li>第二个字符串定位是要在<code>第一个大写字母N</code></li></ul><h2 id="编程3-用si和di实现将字母串”welcome-to-masm-”复制到它后面的数据区中"><a href="#编程3-用si和di实现将字母串”welcome-to-masm-”复制到它后面的数据区中" class="headerlink" title="编程3 用si和di实现将字母串”welcome to masm!”复制到它后面的数据区中"></a>编程3 用si和di实现将字母串”welcome to masm!”复制到它后面的数据区中</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume  cs:codesg,ds:datasgdatasg segment    db 'welcome to masm!'    db '................'datasg endscodesg segmentstart:    mov ax,datasg    mov ds,ax    mov si,0    mov di,10h    mov bx,0    mov cx,8 s:     mov ax,ds:[bx+si]    mov ds:[bx+di],ax        add si,2    add di,2        loop s    mov ax,4c00h    int 21hcodesg endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211011204256.png" alt="运行截图"></p><h3 id="出现的错误-2"><a href="#出现的错误-2" class="headerlink" title="出现的错误"></a>出现的错误</h3><ul><li><code>assume codesg</code> 和<code>code segment</code> 不匹配</li><li>di寄存器写成bi</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这一章中,我们主要讲解了更为灵活的寻址方式的应用和一些编程方法,主要的内容有：</p><ul><li>寻址方式 [bx]–编程2[bx+idata] [bx+si]–编程3[bx+si+idata]–编程1</li><li>二重循环问题的处理,处理两个循环loop都使用cx寄存器的时候,会出现冲突的问题.解决的最佳方式就是将cx的值暂时存储到栈空间中,等到再次回到外层循环的时候,再将其出栈,以此实现将互不影响.这里也能体现处在<code>调用函数</code>掉用<code>被调用函数</code>的时候,将各个寄存器的值入栈,等到<code>被调用函数</code>返回时,再将各个寄存器的值初始化到调用<code>被调用函数</code>之前,这样就可以继续执行<code>调用函数</code>,而不产生影响.</li><li>栈的应用</li><li>大小写转换的方法<br>小写转大写 <code>and al,11011111b</code><br>大写转小写 <code>or al,00100000b</code></li><li>and | or 指令</li></ul>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-[bx]和loop指令</title>
      <link href="/2021/10/10/hui-bian-yu-yan-xue-xi-bx-he-loop-zhi-ling/"/>
      <url>/2021/10/10/hui-bian-yu-yan-xue-xi-bx-he-loop-zhi-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="bx"><a href="#bx" class="headerlink" title="[bx]"></a>[bx]</h2><p><code>mov ax,[bx]</code>, bx中存放的数据作为一个偏移地址EA,段地址SA默认在ds中,将SA:EA处的数据送入ax中,<strong>注意这里是字型数据哦！</strong> 即:<code>ax = ds*16 + bx</code></p><p>建议以后再写汇编语言程序的时候,把[bx]前面的段寄存器显式地标注出来,也就是所谓的<strong>段前缀</strong>。</p><h2 id="loop指令"><a href="#loop指令" class="headerlink" title="loop指令"></a>loop指令</h2><p>loop 指令就是一个循环指令，注意cx循环次数,和bx在循环过程中的变化。</p><h2 id="综合应用"><a href="#综合应用" class="headerlink" title="综合应用"></a>综合应用</h2><p>计算ffff:0-ffff:b单元中的数据的和,结果存储在dx中</p><h3 id="数据相加的问题"><a href="#数据相加的问题" class="headerlink" title="数据相加的问题"></a>数据相加的问题</h3><ul><li>dx = dx + 内存中的8位数据 类型不匹配</li><li>dl = dl + 内存中的8位数据 结果越界</li></ul><p>解决方案：利用一个16位的寄存器来做中介。将内存单元中的8位数据赋值到一个16位寄存器ax中<strong>高八位要初始化为0</strong>,再将ax中的数据加到dx上,从而使两个运算对象的类型匹配并且结果不会超界。</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><h3 id="1-and-2"><a href="#1-and-2" class="headerlink" title="1 and 2"></a>1 and 2</h3><p>编程 ,向内存 0:200<del>0:23F依次传送数据0</del>63</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codesegcodeseg segmentstart: mov ax,0200H    ;这里第一次写成0H了 心里想的确实是0200 不知道怎么弄成0了      mov ds,ax          mov bx,0H      mov cx,40H    s:  mov ds:[bx],bl    inc bx    loop s        mov ax,4c00H    int 21hcodeseg endsend startend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>将”mov ax,4c00h”之前的指令复制到内存0:200h处,补全程序,上机调试,跟踪运行结果.</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codesegcodeseg segmentstart: mov ax,cs    mov ds,ax    mov ax,0020h    mov es,ax    mov bx,0    mov cx,17h;第一次写的21(10进制),看网上有说18的，感觉不对呀，我17的话就刚刚好是可以复制完的    ;还有view里面cpu指令前面的地址是该指令的起始地址 你还要加上这个指令的大小,才算是下一条指令的相对地址,而且别忽略了最初的地址是从零开始算的s:  mov al,ds:[bx];标签表示的是相对于段定义起始位置的位置    mov es:[bx],al    inc bx    loop s    mov ax,4c00h    int 21hcodeseg endsend startend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211010160654.png" alt="运行结果"></p>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-包含多个段的程序</title>
      <link href="/2021/10/10/hui-bian-yu-yan-xue-xi-bao-han-duo-ge-duan-de-cheng-xu/"/>
      <url>/2021/10/10/hui-bian-yu-yan-xue-xi-bao-han-duo-ge-duan-de-cheng-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="在代码段中使用数据"><a href="#在代码段中使用数据" class="headerlink" title="在代码段中使用数据"></a>在代码段中使用数据</h1><p>代码结构</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codecode segment      ··      ··      数据      ··      ··start:      ··      ··      代码      ··      ··code endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="在代码段中使用栈"><a href="#在代码段中使用栈" class="headerlink" title="在代码段中使用栈"></a>在代码段中使用栈</h1><p>代码结构跟上面的差不多,就是要在start中初始化段指针(SS\SP)</p><h1 id="将数据、代码、栈放入不同的段"><a href="#将数据、代码、栈放入不同的段" class="headerlink" title="将数据、代码、栈放入不同的段"></a>将数据、代码、栈放入不同的段</h1><h2 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:code, ds:data, ss:stackdata segment    ··data endsstack segment    ··stack endscode segmentstart:      ··      ··      代码      ··      ··code endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结构是这个结构,但是在代码段中,仍然需要使用初始化指令来将相应的ds\ss\sp寄存器初始化才可以。总而言之，cpu到底如何处理我们定义的段的中的内容,是当作指令执行，还是当作数据访问，还是当作栈空间,完全是靠程序中具体的汇编指令,和汇编指令对cs:ip、ss:sp、ds等寄存器的设置来决定的。</p><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><p>前面几个都是给出程序来调试观察的。就不列举出来了</p><h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><p>编写code总的代码段,将a段和b段中的数据依次相加,将结果保存在c段中。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codea segment    db 1,2,3,4,5,6,7,8a endsb segment    db 1,2,3,4,5,6,7,8b endsc segment    db 0,0,0,0,0,0,0,0c ends;把a 、b段中的数据相加，结果存储到c段当中code segmentstart: mov ax,a    mov ds,ax        mov ax,b    mov es,ax  mov ax,c  mov ss,ax  mov sp,8        mov bx,0    mov cx,7 ;方法1; 这样的话解决不了最后08+08的情况, 栈顶指针刚好是0001-> FFFF 这样10放高地址就恰好被溢出了。; 所以我觉得,还有一种方式是最后一个元素，用al，其他的用ah, 按照栈元素来说，这样做的是对的; 代做: 这样做很麻烦倒是,更好的方式应该是分别计算两个字节的，然后组成一个字，同时push进去，这样的话就不用处理最后一个栈顶元素的问题了; 方法1-------是个错误的方法，解决不了栈顶最初始的元素s: mov ah,ds:[bx]  add ah,es:[bx]  push ax  add sp,1;    mov c:[bx],al  inc bx  loop s;处理最后一个元素    mov al,ds:[bx]    add al,es:[bx]    push ax;方法二------推荐--正确    ; mov cx,4 ;方法2; s: mov ah,ds:[bx];    add ah,es:[bx];    add bx,1   ;    mov al,ds:[bx];    add al,es:[bx];    add bx,1;    push ax;    loop s    mov ax,4c00h    int 21hcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6"><a href="#6" class="headerlink" title="6"></a>6</h2><p>编写code中的代码,用push指令将a段中的前八个字型数据,逆序存储到b段中。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codea segment    dw 1,2,3,4,5,6,7,8,9,0ah,0bh,0ch,0dh,0eh,0fh,0ffha endsb segment    dw 0,0,0,0,0,0,0,0b endscode segmentstart: mov ax,b    mov ss,ax    mov sp,10h;8个字型数据,栈顶指针的大小应该是10h哦！        mov ax,a    mov es,ax        mov bx,0    mov cx,8s: push es:[bx]    add bx,2;bx这里要自增2哦！    loop s    mov ax,4c00h    int 21hcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-第一个程序-1</title>
      <link href="/2021/10/06/hui-bian-yu-yan-xue-xi-di-yi-ge-cheng-xu-1/"/>
      <url>/2021/10/06/hui-bian-yu-yan-xue-xi-di-yi-ge-cheng-xu-1/</url>
      
        <content type="html"><![CDATA[<h1 id="关于汇编程序的执行问题"><a href="#关于汇编程序的执行问题" class="headerlink" title="关于汇编程序的执行问题"></a>关于汇编程序的执行问题</h1><p>在DOS中,可执行文件中的程序P1若要运行，必须有一个正在运行的程序p2,将p1从可执行文件中加载入内存,将CPU的控制权交给它.p1才能够运行,当p1运行完毕后,应该将cpu的控制权交还给使她得以运行的程序p2</p><h2 id="思考问题"><a href="#思考问题" class="headerlink" title="思考问题"></a>思考问题</h2><ul><li>在提示符<code>C:\masm</code>后面输入可执行文件的名字”1”,按下回车enter键，这时，思考问题4.1</li><li>1.exe运行</li><li>运行结束后，返回。再次显示提示符<code>C:masm</code>.思考问题4.2</li></ul><h3 id="4-1-此时-有一个正在运行的程序将1-exe中的程序加载入内存，这个正在运行的程序是什么？它将程序加载入内存后，如何使程序得以运行？"><a href="#4-1-此时-有一个正在运行的程序将1-exe中的程序加载入内存，这个正在运行的程序是什么？它将程序加载入内存后，如何使程序得以运行？" class="headerlink" title="4.1 此时,有一个正在运行的程序将1.exe中的程序加载入内存，这个正在运行的程序是什么？它将程序加载入内存后，如何使程序得以运行？"></a>4.1 此时,有一个正在运行的程序将1.exe中的程序加载入内存，这个正在运行的程序是什么？它将程序加载入内存后，如何使程序得以运行？</h3><p>操作系统是由多个功能模块组成的庞大、复杂的软件系统。任何通用的操作系统，都要提供一个成为shell的程序，用户使用这个程序来操作计算机系统进行工作。</p><p>DOS中有一个程序command.com，这个程序在DOS中成为命令解释器，也就是DOS系统的shell。</p><p>DOS启动时，先完成其他重要的初始化工作，然后运行command.com，command.com运行后，执行完其他相关的任务后，在屏幕上显示出当前盘符和当前路径组成的提示符，等待用户输入。</p><p>用户可以输入所要执行的命令，如：cd、dir、type等，这些命令由command执行，command执行完这些命令后，再次显示由当前盘符和当前路径组成的提示符，等待用户输入。</p><p>如果用户要执行一个程序，则输入该程序的可执行文件的名称，command首先根据文件名找到可执行文件，然后将这个可执行文件中的程序加载到内存中，设置CS:IP指向程序的入口。此后command暂时停止运行，CPU运行程序。程序运行结束后，返回到command中，command再次显示出由当前盘符和当前路径组成的提示符，等待用户输入。</p><p>在DOS中，command处理各种输入：命令或要执行的程序的文件名。我们就是用过command来进行工作的。</p><h3 id="4-2-程序运行结束后，返回到了哪里？"><a href="#4-2-程序运行结束后，返回到了哪里？" class="headerlink" title="4.2 程序运行结束后，返回到了哪里？"></a>4.2 程序运行结束后，返回到了哪里？</h3><p>程序运行结束后，返回到了command中。</p><h4 id="汇编程序从写出到执行的过程"><a href="#汇编程序从写出到执行的过程" class="headerlink" title="汇编程序从写出到执行的过程"></a>汇编程序从写出到执行的过程</h4><p>编程 -&gt; 1.asm -&gt; 编译 -&gt; 1.obj -&gt; 链接 -&gt; 1.exe -&gt; 加载 -&gt; 内存中的程序 -&gt; 运行</p><h2 id="观察下面程序执行过程中，寄存器和栈顶元素的变化"><a href="#观察下面程序执行过程中，寄存器和栈顶元素的变化" class="headerlink" title="观察下面程序执行过程中，寄存器和栈顶元素的变化"></a>观察下面程序执行过程中，寄存器和栈顶元素的变化</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codesegcodeseg segmentstart:  mov ax,2000H        mov ss,ax        mov sp,0        pop ax        pop bx        push ax        push bx        pop ax        pop bx        mov ax,4c00H    int 21hcodeseg endsend startend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ax bx 各出入栈。IP和SP指针在变化，其余寄存器没看到变化。栈顶元素最后还是变化到跟初始状态下一致了</p><p>PSP的头两个字节时CD20,其中的内容为</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211006115030.png" alt="PSP"></p>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-寄存器-3</title>
      <link href="/2021/10/04/hui-bian-yu-yan-xue-xi-ji-cun-qi-3/"/>
      <url>/2021/10/04/hui-bian-yu-yan-xue-xi-ji-cun-qi-3/</url>
      
        <content type="html"><![CDATA[<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><h2 id="基本指令-1-PUSH"><a href="#基本指令-1-PUSH" class="headerlink" title="基本指令 1 PUSH"></a>基本指令 1 PUSH</h2><p>对于push指令的执行</p><ul><li>SP = SP - 2, SS:SP指向当前栈顶前面的单元,以当前栈顶前面的单元为新的栈顶;</li><li>将ax中的内容送入SS:SP指向的内存单元处,SS:SP此时指向新栈顶</li></ul><p>具体的图就不画了</p><h2 id="基本指令-2-POP"><a href="#基本指令-2-POP" class="headerlink" title="基本指令 2 POP"></a>基本指令 2 POP</h2><p>关于pop指令的执行</p><ul><li>将SS:SP指向的内存单元处的数据送入ax中</li><li>SP = SP + 2, SS:SP 指向当前栈顶下面的单元，以当前栈顶下面的单元为新的栈顶。</li></ul><p><strong>注意</strong>: 栈里面的单元是以字为单位的(2个字节),字单元的地址是两个字节地址中的低地址</p><h2 id="栈顶的超界问题"><a href="#栈顶的超界问题" class="headerlink" title="栈顶的超界问题"></a>栈顶的超界问题</h2><p>对于8086CPU不保证对栈的操作不会越界。也就是说,8086CPU只知道栈顶在何出(由SS:SP指示),而不知道我们安排的栈空间有多大。这点好像CPU只知道执行的指令在何出(由CS:IP指示),而不知道要执行的指令有多少。从这两点上我们可以看出8086CPU的工作机理,它只<code>考虑当前的情况:当前的栈顶在何处、当前要执行的指令是哪一条</code></p><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><h3 id="寄存器清零"><a href="#寄存器清零" class="headerlink" title="寄存器清零"></a>寄存器清零</h3><p>两种方式:</p><ul><li>sub ax,ax 机器码为2个字节</li><li>mov ax,0 机器码为3个字节</li></ul><h3 id="内存空间"><a href="#内存空间" class="headerlink" title="内存空间"></a>内存空间</h3><p>一段内存,可以既是代码的存储空间,又是数据的存储空间,还可以是栈空间,也可以什么也不是.关键在于CPU中寄存器的设置，即CS\IP\SS\SP\DS的指向。</p><p>我们可以用一个段来此存放数据,将它定义为 数据段 </p><p>我们可以用一个段来此存放代码,将它定义为 代码段 </p><p>我们可以用一个段来此存放栈,将它定义为 栈段</p><p>对于数据段，将它的段地址放在DS中，用mov、add、sub等访问内存单元的指令时，CPU就将我们定义的数据段中的内容当作数据来访问。</p><p>对于代码段，将它的段地址放在CS中，将段中第一条指令的偏移地址放在IP中，这样CPU就能指向我们定义的代码段中的指令。</p><p>对于栈段，将它的段地址放在SS中，将栈顶单元的偏移地址放在SP中，这样CPU在需要进行栈操作的时候，就将我们定义的栈段当作栈空间来操作。</p><p>比如我们将10000H - 1001FH 安排为代码段，并在里面存储如下代码：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">mov ax, 1000Hmov ss, axmov sp, 0020Hmov ax, csmov ds, axmov ax, [0]add ax, [2]mov bx, [4]add bx, [6]push axpush bxpop axpop bx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置CS = 10000H,IP=0。这段代码将得到执行，可以看到，在这段代码中，我们又将10000H - 1001FH 安排为栈段和数据段。10000H - 1001FH 这段内存，既是代码段，又是栈段和数据段。</p>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-寄存器-2</title>
      <link href="/2021/10/02/hui-bian-yu-yan-xue-xi-ji-cun-qi-2/"/>
      <url>/2021/10/02/hui-bian-yu-yan-xue-xi-ji-cun-qi-2/</url>
      
        <content type="html"><![CDATA[<h1 id="寄存器-2"><a href="#寄存器-2" class="headerlink" title="寄存器-2"></a>寄存器-2</h1><h2 id="字的存储"><a href="#字的存储" class="headerlink" title="字的存储"></a>字的存储</h2><p>字的存储没什么好说的，注意下低地址就行了</p><h2 id="指令操作单元之间的关系"><a href="#指令操作单元之间的关系" class="headerlink" title="指令操作单元之间的关系"></a>指令操作单元之间的关系</h2><h3 id="mov指令"><a href="#mov指令" class="headerlink" title="mov指令"></a>mov指令</h3><p>  8086CPU不支持将数据直接送入段寄存器的操作。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211002102608.png" alt="mov指令数据流向"></p><h3 id="sub、add指令"><a href="#sub、add指令" class="headerlink" title="sub、add指令"></a>sub、add指令</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211002102642.png" alt="指令数据流向"></p><h2 id="jmp指令跳转后，cs-code-segment-会发生变化"><a href="#jmp指令跳转后，cs-code-segment-会发生变化" class="headerlink" title="jmp指令跳转后，cs code segment 会发生变化"></a>jmp指令跳转后，cs <code>code segment</code> 会发生变化</h2><p>  初始情况下 CS=2000H，IP=0，DS=1000H, AX=0, BX=0</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">20000H-20002H mov ax,6222H20003H-20007H jmp 0ff0:010020008H-20009H mov bx,ax10000H-10002H mov ax,2000H10003H-10004H mov ds,ax10005H-10007H mov ax,[0008]10008H-1000AH mov ax,[0002]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  想说的就是，在执行完<code>jmp 0ff0:0100</code>时 <code>CS 2000H-&gt;0FF0H</code> , <code>IP 0003H-&gt; 0100H</code>,而且执行到<code>mov ax,[0002]</code>后不会再跳回来</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211002104344.png" alt="汇编执行图"></p>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习-寄存器</title>
      <link href="/2021/10/01/hui-bian-yu-yan-xue-xi-ji-cun-qi/"/>
      <url>/2021/10/01/hui-bian-yu-yan-xue-xi-ji-cun-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h1><h2 id="第二章-寄存器"><a href="#第二章-寄存器" class="headerlink" title="第二章 寄存器"></a>第二章 寄存器</h2><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><ol><li><p><strong>使用debug指令，将上面的程序段写入内存，逐条执行，观察每条指令执行后，CPU中相关寄存器中的内容变化。</strong></p><p> 输入指令<br> <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211001094702.png" alt="20211001094702"></p><p> 修改cs ip 使用r指令<br> <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211001094920.png" alt="20211001094920"></p><p> 执行程序 使用t指令<br> <code>具体的过程就不截图了，是ax bx ip 三个寄存器之间值的变化</code></p></li><li><p><strong>利用了三条指令计算2的八次方</strong></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">mov ax,1add ax,axjmp 2000:0003<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也是通过t 命令运行程序并观察寄存器中值的变化。</p></li><li><p><strong>查看内存中的内容</strong><br>查看主板上面的内容，我是没看见。不知道是不是因为使用的是DOSbox的原因<br> <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211001102449.png" alt="20211001102449"></p></li><li><p><strong>向内存从B8100H 开始的单元中填写数据</strong></p><p>我盲猜，作者想让读者观察到的显示是有的内存地址(ROM)不能写，有的内存地址可以写</p><p>按照书上面写的8086PC机内存地址的空间分配图来说，b8100属于显存地址空间。<br>我输入过程中的感觉很奇怪，这里面的数据会自己变化</p><p>这里按道理来说b810:0000这个存储单元中存放的应该是20H才对，不知道为什么为了30H<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211001103438.png" alt="20211001103438"></p><p>同样都是使用d指令来查询内存中的内容，按道理来说1和2处显示的应该一样才对，3和4就刚好是一样的？？？<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211001103918.png" alt="20211001103918"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 研究生预备学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更新博客主题</title>
      <link href="/2021/09/30/geng-xin-bo-ke-zhu-ti/"/>
      <url>/2021/09/30/geng-xin-bo-ke-zhu-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="更新博客主题"><a href="#更新博客主题" class="headerlink" title="更新博客主题"></a>更新博客主题</h1><p>保研之后，除了规划一下下一步的研究生学习生活，在无意中逛其他大神的博客的时候，无意间发现了这个非常好看的主题。于是就抽空更换了一下，因为之前自己在<code>GitHub page</code>上搭建过一次，这次遇到的困难并不算多。</p><h2 id="遇到的问题以及待办"><a href="#遇到的问题以及待办" class="headerlink" title="遇到的问题以及待办"></a>遇到的问题以及待办</h2><ul><li><p>长时间不写markdown了，以至于很多插件都不太会用了，</p></li><li><p>之前文章中的代码高亮问题，也不知道是因为插件bug的原因，就是代码块好像必须要用小写才行。也懒得改之前的了，<code>后面的文章一定要按照小写的来</code>。</p></li><li><p>之前文章中的目录就不需要了，这个主题有方便的目录</p></li></ul><h3 id="计划继续完善的东西"><a href="#计划继续完善的东西" class="headerlink" title="计划继续完善的东西"></a>计划继续完善的东西</h3><ul><li><input disabled="" type="checkbox"> 在gitee上面搭建一份一样的博客</li><li><input disabled="" type="checkbox"> 还是希望深入接触一下hexo博客，后面还是希望能增添一些属于自己的东西，毕竟是自己的博客嘛</li><li><input disabled="" type="checkbox"> 这段时间反正也是比较闲，就尽量把每天学到的内容总结一下，写上来把，也算是督促自己了</li><li><input disabled="" type="checkbox"> 主页当中的图片大小会影响到下面博客文章的展示排版</li><li><input disabled="" type="checkbox"> 主页轮播图中有的图片不显示，因为他直接把md文章前面写的那些img文件拼接到cdn后面了。后面有机会看着改一下。</li><li><input disabled="" type="checkbox"> 友情链接，那几个图片显示不了，也不知道是不是跨域问题。</li><li><input checked="" disabled="" type="checkbox"> 不知道他这个目录是怎么显示的，有的有，有的没有。搞清楚一下。<strong>文章TOC设置</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 瞎搞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客主题 </tag>
            
            <tag> 待办 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>研究生预备学习</title>
      <link href="/2021/09/30/yan-jiu-sheng-yu-bei-xue-xi-qing-dan/"/>
      <url>/2021/09/30/yan-jiu-sheng-yu-bei-xue-xi-qing-dan/</url>
      
        <content type="html"><![CDATA[<h1 id="研究生预备学习"><a href="#研究生预备学习" class="headerlink" title="研究生预备学习"></a>研究生预备学习</h1><h2 id="情况介绍"><a href="#情况介绍" class="headerlink" title="情况介绍"></a>情况介绍</h2><p>  不管是运气还是个人实力，最终还是被保研到了本校网络空间安全学院继续学习。自己也选择了最开始选择网安专业最希望自己成为的那种人（二进制逆向），也找了学院里面做相关研究的导师。但是自己在本科期间并没有很好的基础。所以决定利用大四的时间，多学习一些基础的知识，以应对繁重科研压力的研究生生活</p><h2 id="主要阅读的书籍清单"><a href="#主要阅读的书籍清单" class="headerlink" title="主要阅读的书籍清单"></a>主要阅读的书籍清单</h2><h3 id="基础书籍"><a href="#基础书籍" class="headerlink" title="基础书籍"></a>基础书籍</h3><ul><li><input checked="" disabled="" type="checkbox"> 汇编语言 王爽</li><li><input disabled="" type="checkbox"> 逆向工程核心原理</li><li><input checked="" disabled="" type="checkbox"> 程序是怎样跑起来的</li></ul><h3 id="进阶书籍"><a href="#进阶书籍" class="headerlink" title="进阶书籍"></a>进阶书籍</h3><p>还在想~~</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习计划 </tag>
            
            <tag> 感想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构--线性表</title>
      <link href="/2021/07/02/shu-ju-jie-gou-xian-xing-biao-1/"/>
      <url>/2021/07/02/shu-ju-jie-gou-xian-xing-biao-1/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>直接放代码了，题目就是王道2022线性表那节的题目。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 线性表.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。</span><span class="token comment">//</span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">LIST_INIT_SIZE</span> <span class="token expression"><span class="token number">100</span> </span><span class="token comment">// 线性表存储空间的初始分配量</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">LISTINCREMENT</span> <span class="token expression"><span class="token number">10</span></span><span class="token comment">//线性表存储空间的分配增量</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token operator">*</span> elem<span class="token punctuation">;</span> <span class="token comment">//存储空间基址</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token comment">//当前长度</span>    <span class="token keyword">int</span> listsize<span class="token punctuation">;</span><span class="token comment">//当前分配的存储容量(以sizeof(int)为单位)</span><span class="token punctuation">&#125;</span>SqList<span class="token punctuation">;</span><span class="token comment">/*    初始化创建*/</span>bool <span class="token function">InitList_Sq</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    L<span class="token punctuation">.</span>elem <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>LIST_INIT_SIZE <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> LIST_INIT_SIZE <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    L<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>listsize <span class="token operator">=</span> LIST_INIT_SIZE<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">ListPrint_Sq</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">printf_s</span><span class="token punctuation">(</span><span class="token string">"该顺序表为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> L<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf_s</span><span class="token punctuation">(</span><span class="token string">"%d->"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf_s</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*    在固定位置插入元素*/</span>bool <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//在顺序线性表L中第i个位置之前插入新的元素e</span>    <span class="token comment">//i的合法值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span>L<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">></span> L<span class="token punctuation">.</span>listsize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//当前存储空间已满，增加分配</span>        <span class="token keyword">int</span><span class="token operator">*</span> newbase <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>listsize <span class="token operator">+</span> LISTINCREMENT<span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>newbase<span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span>OVERFLOW<span class="token punctuation">)</span><span class="token punctuation">;</span>        L<span class="token punctuation">.</span>elem <span class="token operator">=</span> newbase<span class="token punctuation">;</span><span class="token comment">//新基址</span>        L<span class="token punctuation">.</span>listsize  <span class="token operator">=</span> L<span class="token punctuation">.</span>listsize <span class="token operator">+</span> LISTINCREMENT<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span><span class="token operator">*</span> q <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//q为插入位置</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>L<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p <span class="token operator">>=</span> q<span class="token punctuation">;</span> <span class="token operator">--</span>p<span class="token punctuation">)</span>        <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token comment">//插入位置的元素后移</span>    <span class="token operator">*</span>q <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token operator">++</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*    删除固定位置的元素*/</span>bool <span class="token function">ListDelete_Sq</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//在顺序线性表L中删除第i个元素，并用e返回值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span>L<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//被删除元素的位置</span>    e <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> q <span class="token operator">=</span> L<span class="token punctuation">.</span>elem <span class="token operator">+</span> L<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token operator">++</span>p<span class="token punctuation">;</span> p <span class="token operator">&lt;=</span> q<span class="token punctuation">;</span> <span class="token operator">++</span>p<span class="token punctuation">)</span> <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token comment">//被删除元素之后的元素左移</span>    <span class="token operator">--</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*    删除顺序表中最小的元素 √*/</span>bool <span class="token function">ListDeleteMin_Sq</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">)</span> <span class="token operator">||</span> L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">printf_s</span><span class="token punctuation">(</span><span class="token string">"长度为零"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span><span class="token operator">*</span> q <span class="token operator">=</span> L<span class="token punctuation">.</span>elem <span class="token operator">+</span> L<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> L<span class="token punctuation">.</span>elem<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> tag <span class="token operator">=</span> L<span class="token punctuation">.</span>elem<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> p <span class="token operator">&lt;=</span> q<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">&lt;</span> <span class="token operator">*</span>tag<span class="token punctuation">)</span> tag <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    e <span class="token operator">=</span> <span class="token operator">*</span>tag<span class="token punctuation">;</span>    <span class="token operator">*</span>tag <span class="token operator">=</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*    顺序表逆置 √*/</span>bool <span class="token function">ListReverse_Sq</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> temp<span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token operator">*</span>q<span class="token punctuation">;</span>    <span class="token comment">// C++不允许空指针，定义只是定义int*,定义了并没有实际的指向。习惯上一定要进行初始指针的初始化操作。</span>    temp <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//也或者在这里直接用int类型的test即可。</span>    <span class="token keyword">int</span> test<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> L<span class="token punctuation">.</span>length<span class="token operator">/</span> <span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">;</span>        q <span class="token operator">=</span> L<span class="token punctuation">.</span>elem <span class="token operator">+</span> L<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span>        test <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>        <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>        <span class="token operator">*</span>q <span class="token operator">=</span> test<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*    删除顺序表中所有值为x的元素 √     ----无论是有序表还是无序表用这个都行，有序表可以先找到所有的元素，然后一起移动，但是从时间复杂度上面来讲是一样的    从逻辑上讲，2这个值的确被删除了    但是从存储的结构上讲，2这个值还在存储空间里，只不过在逻辑上，这个位置已经是不合法的了。(改变了顺序表的长度)*/</span>bool <span class="token function">ListDeleValue</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">!=</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    L<span class="token punctuation">.</span>length <span class="token operator">=</span> k<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*    删除值在s和t之间的节点 √    跟上面的方法很像了*/</span>bool <span class="token function">ListDeleValueBetween</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">></span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf_s</span><span class="token punctuation">(</span><span class="token string">"请检查参数设置\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">&lt;</span>s <span class="token operator">||</span> <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">></span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    L<span class="token punctuation">.</span>length <span class="token operator">=</span> k<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*    删除有序线性表中所有的重复值*/</span>bool <span class="token function">ListDeleteDuplicateValueInOrder</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    L<span class="token punctuation">.</span>length <span class="token operator">=</span> k<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    SqList test<span class="token punctuation">;</span>    <span class="token function">InitList_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//测试删除最小的元素</span>    <span class="token comment">//int tag;</span>    <span class="token comment">//ListDeleteMin_Sq(test, tag);</span>    <span class="token comment">//printf_s("%d", tag);</span>    <span class="token comment">//测试元素逆序</span>    <span class="token comment">//ListReverse_Sq(test);</span>    <span class="token comment">//ListPrint_Sq(test);</span>    <span class="token comment">//测试删除所有值为x的元素</span>    <span class="token comment">//ListDeleValue(test, 2);</span>    <span class="token comment">//ListPrint_Sq(test);</span>    <span class="token comment">//测试删除区间内的值</span>    <span class="token comment">//ListDeleValueBetween(test,2, 5);</span>    <span class="token comment">//ListPrint_Sq(test);</span>    <span class="token comment">//测试删除有序表中的重复值</span>    <span class="token function">ListDeleteDuplicateValueInOrder</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListPrint_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单</span><span class="token comment">// 调试程序: F5 或调试 >“开始调试”菜单</span><span class="token comment">// 入门使用技巧: </span><span class="token comment">//   1. 使用解决方案资源管理器窗口添加/管理文件</span><span class="token comment">//   2. 使用团队资源管理器窗口连接到源代码管理</span><span class="token comment">//   3. 使用输出窗口查看生成输出和其他消息</span><span class="token comment">//   4. 使用错误列表窗口查看错误</span><span class="token comment">//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目</span><span class="token comment">//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斐波拉契数列时间复杂度分析</title>
      <link href="/2021/06/30/fei-bo-la-qi-shu-lie-shi-jian-fu-za-du-fen-xi/"/>
      <url>/2021/06/30/fei-bo-la-qi-shu-lie-shi-jian-fu-za-du-fen-xi/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E6%96%90%E6%B3%A2%E6%8B%89%E5%A5%91%E6%95%B0%E5%88%97%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90">斐波拉契数列时间复杂度分析</a><ul><li><a href="#%E9%80%92%E5%BD%92%E7%89%88">递归版</a><ul><li><a href="#%E8%AF%81%E6%98%8E1">证明1</a></li><li><a href="#%E8%AF%81%E6%98%8E2">证明2</a></li></ul></li></ul></li></ul><h1 id="斐波拉契数列时间复杂度分析"><a href="#斐波拉契数列时间复杂度分析" class="headerlink" title="斐波拉契数列时间复杂度分析"></a>斐波拉契数列时间复杂度分析</h1><h2 id="递归版"><a href="#递归版" class="headerlink" title="递归版"></a>递归版</h2><p>递归版本的时间复杂度分析，真的不知道怎么分析，需要根据<code>f(n) = f(n-1) + f(n-2)</code>推出通解。这显然是个数学问题。<br>不知道为什么他们会给出这结果，难道不管通项公式的后一项了？</p><p>通项公式如下:<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210630173631.png" alt="20210630173631"></p><h3 id="证明1"><a href="#证明1" class="headerlink" title="证明1"></a>证明1</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210630173802.png" alt="20210630173802"></p><h3 id="证明2"><a href="#证明2" class="headerlink" title="证明2"></a>证明2</h3><p>还是看不太懂，为什么要给加法加个1呢？<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210630174145.png" alt="20210630174145"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实训day11</title>
      <link href="/2021/06/23/shi-xun-day11/"/>
      <url>/2021/06/23/shi-xun-day11/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#test">Test</a></li><li><a href="#%E4%BD%9C%E4%B8%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0">作业功能实现</a><ul><li><a href="#%E4%BF%AE%E6%94%B9%E4%BB%A3%E7%A0%81%E6%80%9D%E8%B7%AF">修改代码思路</a></li><li><a href="#%E9%97%AE%E9%A2%98">问题</a></li></ul></li></ul><h1 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h1><p>关于git 中rebase和merge的区别<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210621145651.png" alt="20210621145651"></p><h1 id="作业功能实现"><a href="#作业功能实现" class="headerlink" title="作业功能实现"></a>作业功能实现</h1><ul><li><input checked="" disabled="" type="checkbox"> 增加时间搜索</li><li><input checked="" disabled="" type="checkbox"> 增加时间更新修改</li><li><input checked="" disabled="" type="checkbox"> 增加个人页面 并且展示当前登录用户的名称和此用户的个人信息，增加修改</li><li><input disabled="" type="checkbox"> (扩展)用户可以自定义上传头像更新 实现退出效果</li></ul><h2 id="修改代码思路"><a href="#修改代码思路" class="headerlink" title="修改代码思路"></a>修改代码思路</h2><ul><li><input disabled="" type="checkbox"> 更改前端代码，增加相应的板块</li><li><input disabled="" type="checkbox"> Mapper 添加相应的查询</li><li><input disabled="" type="checkbox"> Controller接口</li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li><p><input checked="" disabled="" type="checkbox">  用户更新里面的时间输入框无法渲染,就像是个普通的input, —-是不是跟js代码的渲染顺序有关系？？？？</p><pre><code>在回调函数里面继续写js代码就行啦</code></pre></li><li><p><input checked="" disabled="" type="checkbox">  在用户个人页面把详细的信息以pojo对应的方式传进去</p></li><li><p><input checked="" disabled="" type="checkbox">  修改了代码后记得重新打包哦！！！  否则上传到服务器的包还是之前的jar包，就会恼火很长时间。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 国信安 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode7/8-找链表交点/合并有序链表</title>
      <link href="/2021/06/15/leetcode78-zhao-lian-biao-jiao-dian-he-bing-you-xu-lian-biao/"/>
      <url>/2021/06/15/leetcode78-zhao-lian-biao-jiao-dian-he-bing-you-xu-lian-biao/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#leetcode7-%E6%89%BE%E9%93%BE%E8%A1%A8%E4%BA%A4%E7%82%B9">leetcode7-找链表交点</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a><ul><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li><li><a href="#%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90">复杂度分析</a></li></ul></li></ul></li><li><a href="#leetcode8-%E5%90%88%E5%B9%B6%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8">leetcode8-合并有序链表</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-1">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF-1">思路</a><ul><li><a href="#%E4%BB%A3%E7%A0%81-1">代码</a></li><li><a href="#%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-1">复杂度分析</a></li></ul></li></ul></li></ul><h1 id="leetcode7-找链表交点"><a href="#leetcode7-找链表交点" class="headerlink" title="leetcode7-找链表交点"></a>leetcode7-找链表交点</h1><p>这个题目又没有好好审题，我以为的交点可以是这样的</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210615113259.png" alt="20210615113259"></p><p>没想到交点以后的所有节点应该都是重合的！</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210615113350.png" alt="20210615113350"></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>如果有相交的结点D的话,每条链的头结点先走完自己的链表长度,然后回头走另外的一条链表,那么两结点一定为相交于D点,因为这时每个头结点走的距离是一样的,都是 AD + BD + DC,而他们每次又都是前进1,所以距离相同,速度又相同,固然一定会在相同的时间走到相同的结点上,即D点。</p><ul><li><p>如果不相交 ： 如果不相交的话 假设两个链表长度不相等 一个为A 一个为B ，指针第一次走完A会去走B,另一个走完B再去走A，两个指针走的路程都是A+B。会同时为NULL 跳出循环</p></li><li><p>如果不相交且链表长度相等: 那么一个指针走A,一个指针走B，它俩同时走到NULL，相等，跳出循环</p></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct ListNode *getIntersectionNode(struct ListNode *headA, struct ListNode *headB) &#123;    struct ListNode* A, * B;    A &#x3D; headA;    B &#x3D; headB;    while(A!&#x3D;B)&#123;        A &#x3D; A &#x3D;&#x3D; NULL ? headB : A-&gt;next;        B &#x3D; B &#x3D;&#x3D; NULL ? headA : B-&gt;next;    &#125;    return A;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度 <code>O(N)</code> 最差依次访问一遍 <code>A+B</code> 中的所有节点 <br><br>空间复杂度 <code>O(1)</code> 就用两个指针</p><h1 id="leetcode8-合并有序链表"><a href="#leetcode8-合并有序链表" class="headerlink" title="leetcode8-合并有序链表"></a>leetcode8-合并有序链表</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><pre class="line-numbers language-C" data-language="C"><code class="language-C">输入两个递增排序的链表，合并这两个链表并使新链表中的节点仍然是递增排序的。示例1：输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4来源：力扣（LeetCode）链接：https:&#x2F;&#x2F;leetcode-cn.com&#x2F;problems&#x2F;he-bing-liang-ge-pai-xu-de-lian-biao-lcof著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>leetcode的题解</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210615164632.png" alt="20210615164632"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2)&#123;    struct ListNode* a, *b,*c,*d;    a &#x3D; l1;    b &#x3D; l2;    d &#x3D; c &#x3D; (struct ListNode*)malloc(sizeof(struct ListNode));    while(a&amp;&amp;b)&#123;        if(a-&gt;val &lt; b-&gt;val) &#123;            c-&gt;next &#x3D; a;            a &#x3D; a-&gt;next;            c &#x3D; c-&gt;next;        &#125;        else if(a-&gt;val&gt;&#x3D;b-&gt;val)&#123;            c-&gt;next &#x3D; b;            b &#x3D; b-&gt;next;            c &#x3D; c-&gt;next;        &#125;    &#125;    if(a &#x3D;&#x3D; NULL) c-&gt;next &#x3D; b;    else c-&gt;next &#x3D; a;    return d-&gt;next;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度 <code>O(M+N)</code> M为l1链表的长度 N为l2链表的长度 <br><br>空间复杂度 O(1)</p>]]></content>
      
      
      <categories>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode5-反向输出链表</title>
      <link href="/2021/06/14/leetcode5-fan-xiang-shu-chu-lian-biao/"/>
      <url>/2021/06/14/leetcode5-fan-xiang-shu-chu-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="反向输出链表"><a href="#反向输出链表" class="headerlink" title="反向输出链表"></a>反向输出链表</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre class="line-numbers language-none"><code class="language-none">输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。 示例 1：输入：head &#x3D; [1,3,2]输出：[2,3,1] 限制：0 &lt;&#x3D; 链表长度 &lt;&#x3D; 10000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>第一遍遍历找到一共的个数</li><li>malloc</li><li>倒序赋值</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;反序打印链表int* reversePrint(struct ListNode* head, int* returnSize) &#123;    &#x2F;&#x2F;第一遍遍历获取数目    int num &#x3D; 0;    struct ListNode* temp &#x3D; head;    while (temp)    &#123;        num++;        temp &#x3D; temp-&gt;next;    &#125;    int* ret &#x3D; (int*)malloc(num * sizeof(int));    memset(ret, -1, num * sizeof(int));        temp &#x3D; head;    int i &#x3D; 1;    while (temp)    &#123;        ret[num - i] &#x3D; temp-&gt;val;        i++;        temp &#x3D; temp-&gt;next;    &#125;    *returnSize &#x3D; num;    return ret;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度 O(n)<br>空间复杂度 O(n)</p><h2 id="优秀思路"><a href="#优秀思路" class="headerlink" title="优秀思路"></a>优秀思路</h2><p>差不多跟我一样</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int* reversePrint(struct ListNode* head, int* returnSize)&#123;    struct ListNode *p &#x3D; head;    int n &#x3D; 0;    while(p !&#x3D; NULL) &#123;        p &#x3D; p-&gt;next;        n++;    &#125;    int *arr &#x3D; (int *)malloc(sizeof(int) * n);    struct ListNode *q &#x3D; head;    *returnSize &#x3D; n;    for(int i &#x3D; n - 1; i &gt;&#x3D; 0; i--)&#123;        arr[i] &#x3D; q-&gt;val;        q &#x3D; q-&gt;next;    &#125;    return arr;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode6-判断链表中是否存在环</title>
      <link href="/2021/06/14/leetcode6-pan-duan-lian-biao-zhong-shi-fou-cun-zai-huan/"/>
      <url>/2021/06/14/leetcode6-pan-duan-lian-biao-zhong-shi-fou-cun-zai-huan/</url>
      
        <content type="html"><![CDATA[<h1 id="leetcode6-判断链表中是否存在环"><a href="#leetcode6-判断链表中是否存在环" class="headerlink" title="leetcode6-判断链表中是否存在环"></a>leetcode6-判断链表中是否存在环</h1><p>这道题感觉很难嗷！ 但是确实是属于简单题的行列( 我是fw )，全程都在看解析。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h3><p>本方法需要读者对「Floyd 判圈算法」（又称龟兔赛跑算法）有所了解。</p><p>假想「乌龟」和「兔子」在链表上移动，「兔子」跑得快，「乌龟」跑得慢。当「乌龟」和「兔子」从链表上的同一个节点开始移动时，如果该链表中没有环，那么「兔子」将一直处于「乌龟」的前方；如果该链表中有环，那么「兔子」会先于「乌龟」进入环，并且一直在环内移动。等到「乌龟」进入环时，由于「兔子」的速度快，它一定会在某个时刻与乌龟相遇，即套了「乌龟」若干圈。</p><p>作者：LeetCode-Solution<br>链接：<a href="https://leetcode-cn.com/problems/linked-list-cycle/solution/huan-xing-lian-biao-by-leetcode-solution/">https://leetcode-cn.com/problems/linked-list-cycle/solution/huan-xing-lian-biao-by-leetcode-solution/</a><br>来源：力扣（LeetCode）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">hasCycle</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> head<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> fast <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>slow <span class="token operator">!=</span> fast<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> fast<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：<code>O(N)</code>，其中 N 是链表中的节点数。</p><ul><li><p>当链表中不存在环时，快指针将先于慢指针到达链表尾部，链表中每个节点至多被访问两次。</p></li><li><p>当链表中存在环时，每一轮移动后，快慢指针的距离将减小一。而初始距离为环的长度，因此至多移动 N 轮。</p></li></ul></li><li><p>空间复杂度：<code>O(1)</code> 我们只使用了两个指针的额外空间。</p></li></ul><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p>用哈希表来存储所有已经访问过的节点。每次我们到达一个节点，如果该节点已经存在于哈希表中，则说明该链表是环形链表，否则就将该节点加入哈希表中。重复这一过程，直到我们遍历完整个链表即可。</p><p>重要的是哈希表的原理<br>知乎的文章： 具体还是你后面去看看相应的源码，会比较方便一些。</p><p><a href="https://zhuanlan.zhihu.com/p/144296454">https://zhuanlan.zhihu.com/p/144296454</a></p><h4 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：<code>O(N)</code>，其中 <code>N</code> 是链表中的节点数。最坏情况下我们需要遍历每个节点一次。</p></li><li><p>空间复杂度：<code>O(N)</code>，其中 <code>N</code> 是链表中的节点数。主要为哈希表的开销，最坏情况下我们需要将每个节点插入到哈希表中一次。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode4-删除链表节点</title>
      <link href="/2021/06/11/leetcode4-shan-chu-lian-biao-jie-dian/"/>
      <url>/2021/06/11/leetcode4-shan-chu-lian-biao-jie-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="leecode4-删除链表节点"><a href="#leecode4-删除链表节点" class="headerlink" title="leecode4-删除链表节点"></a>leecode4-删除链表节点</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>说明：文章中的优秀思路均来自优秀题解的第一个，之所以截图是因为懒。。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">给定单向链表的头指针和一个要删除的节点的值，定义一个函数删除该节点。返回删除后的链表的头节点。注意：此题对比原题有改动示例 1:输入: head &#x3D; [4,5,1,9], val &#x3D; 5输出: [4,1,9]解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.示例 2:输入: head &#x3D; [4,5,1,9], val &#x3D; 1输出: [4,5,9]解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9.来源：力扣（LeetCode）链接：https:&#x2F;&#x2F;leetcode-cn.com&#x2F;problems&#x2F;shan-chu-lian-biao-de-jie-dian-lcof著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这里借鉴了前面看到优秀思路中的<strong>虚拟节点 virtualNode</strong> ,即在头节点head前再增加一个虚拟节点，可以避免讨论 <strong>tag</strong> 节点是否是头节点的情况。最后统一返回 <strong>virtualNode-&gt;next</strong></p><ul><li>遍历链表找到值相等的节点</li><li>保留节点的前驱节点 <strong>prev</strong></li><li>前驱节点 <strong>prev</strong> 指向删除节点 <strong>tag</strong> 的下一节点</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct ListNode* deleteNode(struct ListNode* head, int val) &#123;    struct ListNode* tag &#x3D; head, * prev&#x3D;NULL;    struct ListNode* virtualNode &#x3D; (ListNode*)malloc(sizeof(ListNode));    virtualNode-&gt;next &#x3D; head;    virtualNode-&gt;val &#x3D; -1;    prev &#x3D; virtualNode;    while (tag-&gt;next)    &#123;        if (tag-&gt;val &#x3D;&#x3D; val) break;        prev &#x3D; tag;        tag &#x3D; tag-&gt;next;    &#125;    prev-&gt;next &#x3D; tag-&gt;next;    return virtualNode-&gt;next;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="优秀思路"><a href="#优秀思路" class="headerlink" title="优秀思路"></a>优秀思路</h2><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>如果理解递归很困难，可以采用一种叫做<strong>坚定信念</strong>的理解方式。即假设<strong>deleteNode返回的值就是对应节点的下一个节点</strong>，那下面这个java版的递归就不难理解了。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210611093444.png" alt="20210611093444"></p>]]></content>
      
      
      <categories>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>py如何根据字符串来创建对应的类</title>
      <link href="/2021/06/11/py-ru-he-gen-ju-zi-fu-chuan-lai-chuang-jian-dui-ying-de-lei/"/>
      <url>/2021/06/11/py-ru-he-gen-ju-zi-fu-chuan-lai-chuang-jian-dui-ying-de-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="py如何根据字符串来创建对应的类"><a href="#py如何根据字符串来创建对应的类" class="headerlink" title="py如何根据字符串来创建对应的类"></a>py如何根据字符串来创建对应的类</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>py的反射原理，简单来说，反射就是能实现动态地调用方法\实例化对象。</p><p>举个例子:<br></p><p>创建一个学生类Student的对象 person1、创建一个老师类Teacher的对象person1</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">person1 &#x3D; Student(name&#x3D;&quot;张三&quot;)orperson1 &#x3D; Teacher(name&#x3D;&quot;张三&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>试想一下，假如，你并不是先前(在写程序之前)就知道这个person1的身份到底是学生还是老师，那你该如何创建这个对象？</p><p>或者说你要 <strong>根据这个人的输入: 职业:老师,姓名:张三</strong> 来动态的创建对象。</p><p>这里就要用到py的反射</p><p>对应到web路由可能更容易理解。详细请看 <a href="https://www.liujiangblog.com/course/python/48">https://www.liujiangblog.com/course/python/48</a></p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>在本次实训的过程中，由于是基线检查，但是对于每个审查条目的规则(存储在数据库)是不一样的。</p><p>关键的是，所用的validator中预制的规则rule无法满足特定的需求。然后，除了使用他文档中的规则意外，我根据他自定义规则的写法，自定义如下三种规则</p><ul><li>AuditRule-判断前后集合是否一致</li><li>AuditRuleInclude-判断前面集合是否是后面集合的子集</li><li>AuditRuleSame-判断两个字符串是否相等。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">AuditRule</span><span class="token punctuation">(</span>Rule<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    TestCode:        rules = &#123;"age": AuditRule('test,test')&#125;        req = &#123;"age": 'test,test'&#125;        print(validate(req, rules,return_info=True))    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> string<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        Rule<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>string <span class="token operator">=</span> string        self<span class="token punctuation">.</span>value <span class="token operator">=</span> string<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arg<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> arg <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            arg <span class="token operator">=</span> <span class="token string">"Null"</span>            self<span class="token punctuation">.</span>set_error<span class="token punctuation">(</span><span class="token string">"excepted get |"</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>string <span class="token operator">+</span> <span class="token string">"| but get |"</span> <span class="token operator">+</span> arg<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"|"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        exit_value_list <span class="token operator">=</span> arg<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>        <span class="token comment"># 判断两个集合是否一样  前面是否是后面的子集</span>        self<span class="token punctuation">.</span>set_error<span class="token punctuation">(</span><span class="token string">"excepted get |"</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>string <span class="token operator">+</span> <span class="token string">"| but get |"</span> <span class="token operator">+</span> arg<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"|"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">set</span><span class="token punctuation">(</span>exit_value_list<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">set</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实，我所用的validator这个包，就已经利用了反射。因为他就是根据我输入的字符串，去动态地翻译和创建成对应的类。所以我也想实现根据数据库中存储的规则，来动态地创建。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210611161640.png" alt="20210611161640"></p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><h3 id="使用的函数"><a href="#使用的函数" class="headerlink" title="使用的函数"></a>使用的函数</h3><p>我就只用到了<strong>getattr</strong>函数。其对应的文档解释如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">getattr</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># known special case of getattr</span>    <span class="token triple-quoted-string string">"""    getattr(object, name[, default]) -> value        Get a named attribute from an object; getattr(x, 'y') is equivalent to x.y.    When a default argument is given, it is returned when the attribute doesn't    exist; without it, an exception is raised in that case.    """</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h3><ul><li><p>创建package rules 将自定义的三个类分别以.py的形式放进去</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210611162135.png" alt="20210611162135"></p></li><li><p>在package中创建rules.py的文件，将自定义类，导入。<strong>第一行不要也可以</strong></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210611162237.png" alt="20210611162237"></p></li><li><p>在要使用的文件中，以<strong>from rules import rules as Custom</strong>的形式导入</p></li><li><p>编写相应的代码</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">for</span> item <span class="token keyword">in</span> results<span class="token punctuation">:</span><span class="token keyword">if</span> item<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"Audit"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    rules<span class="token punctuation">[</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>Custom<span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    rules<span class="token punctuation">[</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> item<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>它对应的原理通过debug我猜测如下:<br>通过 <code>from rules import rules as Custom</code> 的方式其实是已经创建了<code>Custom</code>这个对象，其拥有三个自定义类的属性。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210611162753.png" alt="20210611162753"></p><p>然后通过<code>getattr</code>得到字符串对应的属性(类),并通过后面括号里面的字符串进行实例化。</p>]]></content>
      
      
      <categories>
          
          <category> 反射 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode3-反转链表II</title>
      <link href="/2021/06/10/leetcode3-fan-zhuan-lian-biao-ii/"/>
      <url>/2021/06/10/leetcode3-fan-zhuan-lian-biao-ii/</url>
      
        <content type="html"><![CDATA[<p>目录:</p><ul><li><a href="#%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8ii">反转链表II</a><ul><li><a href="#%E6%8F%8F%E8%BF%B0">描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a><ul><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li><li><a href="#%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90">复杂度分析</a></li></ul></li><li><a href="#%E4%BC%98%E7%A7%80%E6%80%9D%E8%B7%AF">优秀思路</a><ul><li><a href="#%E6%96%B9%E6%B3%951">方法1:</a><ul><li><a href="#%E4%BB%A3%E7%A0%81-1">代码</a></li><li><a href="#%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90">时间复杂度分析</a></li></ul></li><li><a href="#%E6%96%B9%E6%B3%95%E4%BA%8C">方法二</a><ul><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li><li><a href="#%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-1">时间复杂度分析</a></li></ul></li></ul></li></ul></li></ul><h1 id="反转链表II"><a href="#反转链表II" class="headerlink" title="反转链表II"></a>反转链表II</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><pre class="line-numbers language-none"><code class="language-none">给你单链表的头指针 head 和两个整数 left 和 right ，其中 left &lt;&#x3D; right 。请你反转从位置 left 到位置 right 的链表节点，返回 反转后的链表 。 示例 1：输入：head &#x3D; [1,2,3,4,5], left &#x3D; 2, right &#x3D; 4输出：[1,4,3,2,5]示例 2：输入：head &#x3D; [5], left &#x3D; 1, right &#x3D; 1输出：[5] 提示：链表中节点数目为 n1 &lt;&#x3D; n &lt;&#x3D; 500-500 &lt;&#x3D; Node.val &lt;&#x3D; 5001 &lt;&#x3D; left &lt;&#x3D; right &lt;&#x3D; n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>左端节点不是起始节点</li></ol><ul><li>找到左端点的前一个节点 <strong>leftpointer_1</strong> + 左端点 <strong>leftpointer</strong></li><li>反转从左端点开始的 <strong>righ-left</strong> 个节点,并保留右端点 <strong>prev</strong>、右端点的下一个节点 <strong>rightpointer_1</strong></li><li>左端节点 <strong>leftpointer</strong> 的next指向右端点的下一个节点 <strong>rightpointer_1</strong></li><li>左端点的前一个节点 <strong>leftpointer_1</strong> 的next指向右端点 </li><li><strong>返回 head 头节点</strong></li></ul><ol start="2"><li>左端节点是起始节点(head)</li></ol><ul><li>左端点的前一个节点 <strong>leftpointer_1</strong> 为 <strong>null</strong></li><li>反转从左端点开始的 <strong>righ-left</strong> 个节点,并保留右端点 <strong>prev</strong>、右端点的下一个节点 <strong>rightpointer_1</strong></li><li>左端节点 <strong>leftpointer</strong> 的next指向右端点的下一个节点 <strong>rightpointer_1</strong></li><li><strong>返回右端节点 <strong>prev</strong></strong></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct ListNode* reverseBetween(struct ListNode* head, int left, int right) &#123;    struct ListNode* leftpointer_1, * rightpointer_1;    leftpointer_1 &#x3D; rightpointer_1 &#x3D; head;    int leftmove &#x3D; left - 2;    int rigthmove &#x3D; right - left;    int temp &#x3D; rigthmove;    if (temp &#x3D;&#x3D; 0 || temp &lt; 0) return head;    if (leftmove &#x3D;&#x3D; -1) leftpointer_1 &#x3D; NULL;    else    &#123;        while (leftmove &gt; 0 &amp;&amp; leftpointer_1-&gt;next)        &#123;            leftpointer_1 &#x3D; leftpointer_1-&gt;next;            leftmove--;        &#125;    &#125;    struct ListNode* prev &#x3D; leftpointer_1;    struct ListNode* curr, * leftpointer;    if (leftpointer_1)     curr &#x3D; leftpointer &#x3D; leftpointer_1-&gt;next;    else curr &#x3D; leftpointer &#x3D; head;    while (curr &amp;&amp; temp &gt;&#x3D; 0) &#123;        struct ListNode* next &#x3D; curr-&gt;next;        curr-&gt;next &#x3D; prev;        prev &#x3D; curr;        curr &#x3D; next;        temp--;        rightpointer_1 &#x3D; curr;    &#125;    if (leftpointer_1) &#123;        leftpointer_1-&gt;next &#x3D; prev;        leftpointer-&gt;next &#x3D; rightpointer_1;        return head;    &#125;    else &#123;        leftpointer-&gt;next &#x3D; rightpointer_1;        return prev;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度 O(N) 其中 N 是链表总节点数。最坏情况下，需要遍历整个链表。<br>空间复杂度 O(1) 只使用到常数个变量</p><h2 id="优秀思路"><a href="#优秀思路" class="headerlink" title="优秀思路"></a>优秀思路</h2><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1:"></a>方法1:</h3><p>与我们的方法非常类似，但在编码的过程中，采用了虚拟头节点的方式，避免了左端点是否是起始点的分类讨论。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210610143526.png" alt="20210610143526"></p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct ListNode *reverseBetween(struct ListNode *head, int left, int right) &#123;    &#x2F;&#x2F; 因为头节点有可能发生变化，使用虚拟头节点可以避免复杂的分类讨论    struct ListNode *dummyNode &#x3D; malloc(sizeof(struct ListNode));    dummyNode-&gt;val &#x3D; -1;    dummyNode-&gt;next &#x3D; head;    struct ListNode *pre &#x3D; dummyNode;    &#x2F;&#x2F; 第 1 步：从虚拟头节点走 left - 1 步，来到 left 节点的前一个节点    &#x2F;&#x2F; 建议写在 for 循环里，语义清晰    for (int i &#x3D; 0; i &lt; left - 1; i++) &#123;        pre &#x3D; pre-&gt;next;    &#125;    &#x2F;&#x2F; 第 2 步：从 pre 再走 right - left + 1 步，来到 right 节点    struct ListNode *rightNode &#x3D; pre;    for (int i &#x3D; 0; i &lt; right - left + 1; i++) &#123;        rightNode &#x3D; rightNode-&gt;next;    &#125;    &#x2F;&#x2F; 第 3 步：切断出一个子链表（截取链表）    struct ListNode *leftNode &#x3D; pre-&gt;next;    struct ListNode *curr &#x3D; rightNode-&gt;next;    &#x2F;&#x2F; 注意：切断链接    pre-&gt;next &#x3D; NULL;    rightNode-&gt;next &#x3D; NULL;    &#x2F;&#x2F; 第 4 步：同第 206 题，反转链表的子区间    reverseLinkedList(leftNode);    &#x2F;&#x2F; 第 5 步：接回到原来的链表中    pre-&gt;next &#x3D; rightNode;    leftNode-&gt;next &#x3D; curr;    return dummyNode-&gt;next;&#125;作者：LeetCode-Solution链接：https:&#x2F;&#x2F;leetcode-cn.com&#x2F;problems&#x2F;reverse-linked-list-ii&#x2F;solution&#x2F;fan-zhuan-lian-biao-ii-by-leetcode-solut-teyq&#x2F;来源：力扣（LeetCode）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h4><p>时间复杂度 O(N) 其中 N 是链表总节点数。最坏情况下，需要遍历整个链表。<br>空间复杂度 O(1) 只使用到常数个变量</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210610144049.png" alt="20210610144049"></p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct ListNode *reverseBetween(struct ListNode *head, int left, int right) &#123;    &#x2F;&#x2F; 因为头节点有可能发生变化，使用虚拟头节点可以避免复杂的分类讨论    struct ListNode *dummyNode &#x3D; malloc(sizeof(struct ListNode));    dummyNode-&gt;val &#x3D; -1;    dummyNode-&gt;next &#x3D; head;    struct ListNode *pre &#x3D; dummyNode;    for (int i &#x3D; 0; i &lt; left - 1; i++) &#123;        pre &#x3D; pre-&gt;next;    &#125;    struct ListNode *cur &#x3D; pre-&gt;next;    struct ListNode *next;    for (int i &#x3D; 0; i &lt; right - left; i++) &#123;        next &#x3D; cur-&gt;next;        cur-&gt;next &#x3D; next-&gt;next;        next-&gt;next &#x3D; pre-&gt;next;        pre-&gt;next &#x3D; next;    &#125;    return dummyNode-&gt;next;&#125;作者：LeetCode-Solution链接：https:&#x2F;&#x2F;leetcode-cn.com&#x2F;problems&#x2F;reverse-linked-list-ii&#x2F;solution&#x2F;fan-zhuan-lian-biao-ii-by-leetcode-solut-teyq&#x2F;来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="时间复杂度分析-1"><a href="#时间复杂度分析-1" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h4><p>时间复杂度 O(N) 其中 N 是链表总节点数。最坏情况下，需要遍历整个链表。<br>空间复杂度 O(1) 只使用到常数个变量</p>]]></content>
      
      
      <categories>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode2-反转链表</title>
      <link href="/2021/06/08/leetcode2-fan-zhuan-lian-biao/"/>
      <url>/2021/06/08/leetcode2-fan-zhuan-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">示例<span class="token operator">:</span>输入<span class="token operator">:</span> <span class="token number">1</span><span class="token operator">-></span><span class="token number">2</span><span class="token operator">-></span><span class="token number">3</span><span class="token operator">-></span><span class="token number">4</span><span class="token operator">-></span><span class="token number">5</span><span class="token operator">-></span><span class="token constant">NULL</span>输出<span class="token operator">:</span> <span class="token number">5</span><span class="token operator">-></span><span class="token number">4</span><span class="token operator">-></span><span class="token number">3</span><span class="token operator">-></span><span class="token number">2</span><span class="token operator">-></span><span class="token number">1</span><span class="token operator">-></span><span class="token constant">NULL</span> 限制：<span class="token number">0</span> <span class="token operator">&lt;=</span> 节点个数 <span class="token operator">&lt;=</span> <span class="token number">5000</span>来源：力扣（LeetCode）链接：https<span class="token operator">:</span><span class="token comment">//leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>链表没有节点</li><li>链表只有一个节点</li><li>链表有两个节点</li><li>链表有三个及三个以上的节点</li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/%E7%94%A8ipad%E6%8A%8A%E6%80%9D%E8%B7%AF%E7%9A%84%E5%9B%BE%E7%94%BB%E5%9C%A8%E8%BF%99.png" alt="用ipad把思路的图画在这"></p><h3 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h3><p>由于只用遍历一遍链 <br><br>时间复杂度为<strong>O(n) n 为链表的长度</strong> <br><br>以上代码，<strong>分配的空间不会随着处理数据量的变化而变化，因此得到空间复杂度为 O空间复杂度为O(1</strong>)</p><h2 id="优秀思路"><a href="#优秀思路" class="headerlink" title="优秀思路"></a>优秀思路</h2><p>这次优秀思路其实跟我思路差不多，但是优秀思路的代码写的要更简洁。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210608172423.png" alt="20210608172423"></p><h2 id="我思路的代码"><a href="#我思路的代码" class="headerlink" title="我思路的代码"></a>我思路的代码</h2><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct ListNode* reverseList(struct ListNode* head) &#123;    ListNode* first,*second,*third;        &#x2F;&#x2F; 0个节点    if (head &#x3D;&#x3D; NULL) return NULL;    &#x2F;&#x2F; 1个节点    if (head-&gt;next &#x3D;&#x3D; NULL) return head;    &#x2F;&#x2F; 2个节点    if (head-&gt;next-&gt;next &#x3D;&#x3D; NULL) &#123;        first &#x3D; head;        second &#x3D; head-&gt;next;        first-&gt;next &#x3D; NULL;        second-&gt;next &#x3D; first;        return second;    &#125;    &#x2F;&#x2F; 3个以上的节点    first &#x3D; head;    second &#x3D; head-&gt;next;    third &#x3D; head-&gt;next-&gt;next;        while (1) &#123;        second-&gt;next &#x3D; first;        if (third &#x3D;&#x3D; NULL) break;        first &#x3D; second;        second &#x3D; third;        third &#x3D; third-&gt;next;    &#125;    &#x2F;&#x2F;把第一个节点的next指向null    head-&gt;next &#x3D; NULL;    &#x2F;&#x2F;返回头节点    return second;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>validator使用</title>
      <link href="/2021/06/08/validator-shi-yong/"/>
      <url>/2021/06/08/validator-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="validator使用"><a href="#validator使用" class="headerlink" title="validator使用"></a>validator使用</h1><p>看清楚使用的是哪个包，去找相应的文档就行。</p><p>我使用的是这个validator包 :<a href="https://github.com/CSenshi/Validator">https://github.com/CSenshi/Validator</a></p><p>网上的教程很多都是 <a href="https://github.com/mansam/validator.py%EF%BC%8C%E6%89%80%E4%BB%A5%E5%9C%A8%E7%9C%8B%E4%BA%86%E6%96%87%E6%A1%A3%E5%92%8C%E6%BA%90%E7%A0%81%E4%B9%8B%E5%90%8E%EF%BC%8C%E6%8A%8A%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86%E4%B8%80%E4%B8%8B%E3%80%82">https://github.com/mansam/validator.py，所以在看了文档和源码之后，把使用方法整理一下。</a></p><p>本来是要整理一下，但是发现人家文档写的很清楚了。</p><p>链接：<a href="https://github.com/CSenshi/Validator">https://github.com/CSenshi/Validator</a></p>]]></content>
      
      
      <categories>
          
          <category> 包使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实训day6-day10</title>
      <link href="/2021/06/07/shi-xun-day6-10/"/>
      <url>/2021/06/07/shi-xun-day6-10/</url>
      
        <content type="html"><![CDATA[<h1 id="实训总结"><a href="#实训总结" class="headerlink" title="实训总结"></a>实训总结</h1><p>总体来说这一周相较于上一周来说没有学到太多东西，最有收获的还是初步地应用了一下反射，还有就是关于编码的简洁性。</p><p>诸如向安全组审核的东西，不过是读文件审核再写回数据库，可以说没有什么难度，只是工作的过程相对来说要繁琐一些，要去跟英文的文档做一个对应，复制粘贴本地安全组中的说明内容等等。</p><h1 id="circular-import"><a href="#circular-import" class="headerlink" title="circular import"></a>circular import</h1><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210607095716.png" alt="20210607095716"></p><h1 id="RFC"><a href="#RFC" class="headerlink" title="RFC"></a>RFC</h1><p>RFC（Request For Comments）意即“请求评论”，包含了关于Internet的几乎所有重要的文字资料</p><h1 id="用户权限分配"><a href="#用户权限分配" class="headerlink" title="用户权限分配"></a>用户权限分配</h1><p>或者直接去微软的网站上面翻译：<br><a href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/dn221963%28v%3dws.11%29">https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/dn221963%28v%3dws.11%29</a></p><h2 id="对应中文"><a href="#对应中文" class="headerlink" title="对应中文"></a>对应中文</h2><table><thead><tr><th>常量值</th><th>组策略</th></tr></thead><tbody><tr><td>SeNetworkLogonRight</td><td>从网络访问此计算机</td></tr><tr><td>SeBackupPrivilege</td><td>备份文件和目录</td></tr><tr><td>SeChangeNotifyPrivilege</td><td>绕过遍历检查</td></tr><tr><td>SeSystemtimePrivilege</td><td>更改系统时间</td></tr><tr><td>SeCreatePagefilePrivilege</td><td>创建一个页面文件</td></tr><tr><td>SeDebugPrivilege</td><td>调试程序</td></tr><tr><td>SeRemoteShutdownPrivilege</td><td>从远程系统强制关机</td></tr><tr><td>SeAuditPrivilege</td><td>管理审核安全日志</td></tr><tr><td>SeIncreaseQuotaPrivilege</td><td>信任计算机和用户帐户可以执行委派</td></tr><tr><td>SeIncreaseBasePriorityPrivilege</td><td>提高计划优先级</td></tr><tr><td>SeLoadDriverPrivilege</td><td>加载和卸载设备驱动程序</td></tr><tr><td>SeBatchLogonRight</td><td>作为批处理作业登录</td></tr><tr><td>SeServiceLogonRight</td><td>拒绝作为服务登录</td></tr><tr><td>SeInteractiveLogonRight</td><td>本地登录</td></tr><tr><td>SeSecurityPrivilege</td><td>管理审核和安全日志</td></tr><tr><td>SeSystemEnvironmentPrivilege</td><td>修改固件环境值</td></tr><tr><td>SeProfileSingleProcessPrivilege</td><td>配置文件单一进程</td></tr><tr><td>SeSystemProfilePrivilege</td><td>配置文件系统性能</td></tr><tr><td>SeAssignPrimaryTokenPrivilege</td><td>创建令牌对象</td></tr><tr><td>SeRestorePrivilege</td><td>还原文件和目录</td></tr><tr><td>SeShutdownPrivilege</td><td>关闭系统</td></tr><tr><td>SeTakeOwnershipPrivilege</td><td>取得文件或其他对象的所有权</td></tr><tr><td>SeUndockPrivilege</td><td>从扩展坞上移除计算机</td></tr><tr><td>SeManageVolumePrivilege</td><td>执行卷维护任务</td></tr><tr><td>SeRemoteInteractiveLogonRight</td><td>允许通过远程桌面服务登录</td></tr><tr><td>SeImpersonatePrivilege</td><td>身份验证后模拟客户端</td></tr><tr><td>SeCreateGlobalPrivilege</td><td>创建全局对象</td></tr><tr><td>SeIncreaseWorkingSetPrivilege</td><td>增加进程工作集</td></tr><tr><td>SeTimeZonePrivilege</td><td>更改时区</td></tr><tr><td>SeCreateSymbolicLinkPrivilege</td><td>创建符号链接</td></tr><tr><td>SeDelegateSessionUserImpersonatePrivilege</td><td>信任计算机和用户帐户可以执行委派</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 国信安实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-1-单链表输出倒数第k个节点</title>
      <link href="/2021/06/06/leetcode1-dan-lian-biao-shu-chu-dao-shu-di-k-ge-jie-dian/"/>
      <url>/2021/06/06/leetcode1-dan-lian-biao-shu-chu-dao-shu-di-k-ge-jie-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="单链表输出倒数第k个节点"><a href="#单链表输出倒数第k个节点" class="headerlink" title="单链表输出倒数第k个节点"></a>单链表输出倒数第k个节点</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>遍历得到链表的节点个数</li><li>再根据节点个数和k得到目标节点的正向序号</li><li>遍历链表找到该节点</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="单链表版"><a href="#单链表版" class="headerlink" title="单链表版"></a>单链表版</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct ListNode &#123;    int val;    struct ListNode* next;&#125;;struct ListNode* getKthFromEnd(struct ListNode* head, int k) &#123;    int all &#x3D; 0;    ListNode* temp &#x3D; head;    while (temp-&gt;next)    &#123;        all++;        temp &#x3D; temp-&gt;next;    &#125;    all &#x3D; all + 1;&#x2F;&#x2F;加上最后一个节点    int num &#x3D; all - k + 1;    if (num &lt; 1) return NULL;    else    &#123;        temp &#x3D; head;        while (num !&#x3D; 1)        &#123;            temp &#x3D; temp-&gt;next;            num--;        &#125;        return temp;    &#125;&#125;int main()&#123;    ListNode *ahead, *after, *head, *result, *temp;    ahead &#x3D; (struct ListNode*)malloc(sizeof(ListNode));    ahead-&gt;val &#x3D; 1;    head &#x3D; ahead;    for (int i &#x3D; 1; i &lt; 7; i&#x3D;i+1) &#123;        after &#x3D; (struct ListNode*)malloc(sizeof(ListNode));        after-&gt;val &#x3D; i + 1;        after-&gt;next &#x3D; NULL;        ahead-&gt;next &#x3D; after;        ahead &#x3D; after;    &#125;    temp &#x3D; head;    while (1) &#123;        printf_s(&quot;%d-&gt;&quot;, temp-&gt;val);        if (temp-&gt;next&#x3D;&#x3D;NULL) &#123;            printf_s(&quot;\n%s&quot;, &quot;跳出循环&quot;);            break;        &#125;        temp &#x3D; temp-&gt;next;    &#125;        result &#x3D; getKthFromEnd(head, 1);    if (result-&gt;next) &#123;        printf_s(&quot;\n%d-&gt;%d&quot;, result-&gt;val, result-&gt;next-&gt;val);&#x2F;&#x2F;这里有可能result没有next节点    &#125;    else         printf_s(&quot;\n%d&quot;, result-&gt;val);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="双链表版"><a href="#双链表版" class="headerlink" title="双链表版"></a>双链表版</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;双向链表版struct ListNode &#123;    int val;    struct ListNode* next;&#x2F;&#x2F;前向指针    struct ListNode* previous;&#x2F;&#x2F;后向指针&#125;;struct ListNode* getKthFromEnd(struct ListNode* head, int k) &#123;    ListNode* temp &#x3D; head;    while (temp-&gt;next)    &#123;        temp &#x3D; temp-&gt;next;    &#125;    if (k &lt; 1) return NULL;    else    &#123;        while (k !&#x3D; 1)        &#123;            temp &#x3D; temp-&gt;previous;            k--;        &#125;        return temp;    &#125;&#125;int main()&#123;    ListNode* ahead, * after, * head, * result, * temp;    ahead &#x3D; (struct ListNode*)malloc(sizeof(ListNode));    ahead-&gt;val &#x3D; 1;    ahead-&gt;previous &#x3D; NULL;    head &#x3D; ahead;    &#x2F;&#x2F;temp &#x3D; ahead;    for (int i &#x3D; 1; i &lt; 7; i &#x3D; i + 1) &#123;        after &#x3D; (struct ListNode*)malloc(sizeof(ListNode));        after-&gt;val &#x3D; i + 1;        after-&gt;next &#x3D; NULL;        after-&gt;previous &#x3D; ahead;                ahead-&gt;next &#x3D; after;        ahead &#x3D; after;    &#125;    temp &#x3D; head;    while (1) &#123;        printf_s(&quot;%d-&gt;&quot;, temp-&gt;val);        if (temp-&gt;next &#x3D;&#x3D; NULL) &#123;            printf_s(&quot;\n%s&quot;, &quot;跳出循环&quot;);            break;        &#125;        temp &#x3D; temp-&gt;next;    &#125;    result &#x3D; getKthFromEnd(head, 2);    if (result-&gt;next) &#123;        printf_s(&quot;\n%d-&gt;%d&quot;, result-&gt;val, result-&gt;next-&gt;val);&#x2F;&#x2F;这里有可能result没有next节点    &#125;    else        printf_s(&quot;\n%d&quot;, result-&gt;val);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="优秀解题思路"><a href="#优秀解题思路" class="headerlink" title="优秀解题思路"></a>优秀解题思路</h2><ul><li>初始化两个指针a,b 指向头节点</li><li>b指针先往前走k个节点</li><li>a,b指针同时向前走，直到b为空指针</li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct ListNode* getKthFromEnd(struct ListNode* head, int k)&#123;    struct ListNode *prev, *cur;    prev &#x3D; head;    cur &#x3D; head;    for(k&#x3D;k-1;k&gt;0;k--)&#123;        cur &#x3D; cur-&gt;next;    &#125;    while(cur-&gt;next !&#x3D; NULL)&#123;        prev &#x3D; prev-&gt;next;        cur &#x3D; cur-&gt;next;    &#125;    return prev;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实训day5</title>
      <link href="/2021/06/04/shi-xun-day5/"/>
      <url>/2021/06/04/shi-xun-day5/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring入门4"><a href="#Spring入门4" class="headerlink" title="Spring入门4"></a>Spring入门4</h1><p>项目代码:<a href="https://gitee.com/laobameishijia/guoxinan-practical-training">https://gitee.com/laobameishijia/guoxinan-practical-training</a></p><ul><li><a href="#spring%E5%85%A5%E9%97%A84">Spring入门4</a><ul><li><a href="#%E7%AE%80%E5%8D%95%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%E5%AE%9E%E7%8E%B0">简单登录页面实现</a><ul><li><a href="#%E9%A2%84%E6%9C%9F%E6%95%88%E6%9E%9C">预期效果</a></li><li><a href="#%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF">实现思路</a></li><li><a href="#%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B">实现过程</a><ul><li><a href="#%E5%88%9B%E5%BB%BA%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3%E5%B9%B6%E5%AE%9E%E7%8E%B0">创建服务接口，并实现</a></li><li><a href="#%E5%86%99%E5%A5%BDmapper%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2">写好mapper,进行数据查询</a></li><li><a href="#%E6%8E%A7%E5%88%B6%E5%99%A8%E6%B3%A8%E5%86%8C%E6%9C%8D%E5%8A%A1%E4%BC%A0%E5%8F%82">控制器注册服务，传参</a></li></ul></li></ul></li><li><a href="#springboot%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C">Springboot数据校验</a><ul><li><a href="#%E6%90%9E%E6%B8%85%E6%A5%9A%E4%BB%80%E4%B9%88%E6%98%AF%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B">搞清楚什么是面向切面编程</a></li><li><a href="#%E5%AE%9E%E4%BD%93%E7%B1%BB----%E5%86%99%E4%B8%8A%E7%9B%B8%E5%85%B3%E6%B3%A8%E8%A7%A3">实体类—-写上相关注解</a></li><li><a href="#%E6%A0%A1%E9%AA%8C%E7%B1%BB----%E6%A3%80%E9%AA%8C%E6%95%B0%E6%8D%AE%E6%8A%9B%E5%87%BA%E5%BC%82%E5%B8%B8%E7%94%B1%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%B1%BB%E8%BF%9B%E8%A1%8C%E5%A4%84%E7%90%86">校验类—-检验数据、抛出异常,由异常处理类进行处理</a></li><li><a href="#%E6%8E%A7%E5%88%B6%E5%99%A8----%E5%B0%86%E5%89%8D%E7%AB%AF%E4%BC%A0%E5%85%A5%E6%95%B0%E6%8D%AE%E4%BC%A0%E7%BB%99%E6%A0%A1%E9%AA%8C%E7%B1%BB%E8%BF%9B%E8%A1%8C%E6%A0%A1%E9%AA%8C">控制器—-将前端传入数据传给校验类进行校验</a></li></ul></li><li><a href="#springboot%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8">Springboot全局异常</a><ul><li><a href="#%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%B1%BB">异常处理类</a></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8--%E4%BB%A5%E7%99%BB%E5%BD%95%E5%BC%82%E5%B8%B8%E4%B8%BA%E4%BE%8B">自定义异常–以登录异常为例</a></li><li><a href="#%E5%9C%A8%E6%9C%8D%E5%8A%A1%E4%B8%AD%E6%8A%9B%E5%87%BA%E5%BC%82%E5%B8%B8">在服务中抛出异常</a></li></ul></li><li><a href="#spring%E6%8B%A6%E6%88%AA%E5%99%A8">Spring拦截器</a><ul><li><a href="#%E7%99%BB%E5%BD%95%E6%8B%A6%E6%88%AA%E5%99%A8">登录拦截器</a></li><li><a href="#%E6%B3%A8%E5%86%8C%E6%8B%A6%E6%88%AA%E5%99%A8">注册拦截器</a></li></ul></li></ul></li></ul><h2 id="简单登录页面实现"><a href="#简单登录页面实现" class="headerlink" title="简单登录页面实现"></a>简单登录页面实现</h2><h3 id="预期效果"><a href="#预期效果" class="headerlink" title="预期效果"></a>预期效果</h3><ul><li>登录成功，进入主页—登录成功</li><li>登录失败：告诉用户具体错误–用户不存在、密码不正确、登录失败</li><li>退出登录，提示用户是否退出，点击是删除session退出登录。</li></ul><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><ul><li>处理持久层—(操作数据库的Mapper)的代码：查询—findByName(String adminName) 找不到—提示用户不存在</li><li>处理登录业务逻辑(服务Service)—-实现登录失败、密码不正确几种情况的逻辑。</li><li>控制层—-路由控制、结果返回</li><li>表现层(视图、网页)—-ajax异步请求、Session保留会话</li></ul><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210605102000.png" alt="20210605102000"></p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="创建服务接口，并实现"><a href="#创建服务接口，并实现" class="headerlink" title="创建服务接口，并实现"></a>创建服务接口，并实现</h4><p>接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LoginService</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 用户登录     * @param admin     * @return     */</span>    <span class="token class-name">JsonData</span> login <span class="token punctuation">(</span><span class="token class-name">Admin</span> admin<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">JsonData</span> exit <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">LoginService</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">AdminMapper</span> mapper<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span>  <span class="token class-name">JsonData</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">Admin</span> admin<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//数据校验</span>                <span class="token comment">//从数据库中查数据</span>        <span class="token class-name">Admin</span> dbAdmin <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">findoneByName</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span><span class="token function">getAdminName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dbAdmin <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//说明用户不存在</span><span class="token comment">//            return new JsonData(1001,"用户不存在");</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LoginException</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">"用户不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">//判断状态</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dbAdmin<span class="token punctuation">.</span><span class="token function">getAdminStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>dbAdmin<span class="token punctuation">.</span><span class="token function">getAdminStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//            return new JsonData(1001,"用户被锁定,联系管理员");</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LoginException</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token string">"用户被锁定,联系管理员"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">//判断密码正确</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dbAdmin<span class="token punctuation">.</span><span class="token function">getAdminPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span><span class="token function">getAdminPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//            return new JsonData(1001,"密码错误");</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LoginException</span><span class="token punctuation">(</span><span class="token number">1003</span><span class="token punctuation">,</span><span class="token string">"密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//存到session</span>        session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"adminName"</span><span class="token punctuation">,</span>admin<span class="token punctuation">.</span><span class="token function">getAdminName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//更新用户最后登录时间</span>        dbAdmin<span class="token punctuation">.</span><span class="token function">setLastLoginTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Timestamp</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//dbAdmin没有问题</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dbAdmin<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>dbAdmin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonData</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"登录正常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span>  <span class="token class-name">JsonData</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonData</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"退出正常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="写好mapper-进行数据查询"><a href="#写好mapper-进行数据查询" class="headerlink" title="写好mapper,进行数据查询"></a>写好mapper,进行数据查询</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 主要用来操作数据库，增删改查 */</span><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AdminMapper</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 查询所有数据     */</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Admin</span><span class="token punctuation">></span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Admin</span><span class="token punctuation">></span></span> <span class="token function">fineByParam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"param"</span><span class="token punctuation">)</span> <span class="token class-name">MyParam</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     *增加     * @param admin     */</span>    <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span> <span class="token class-name">Admin</span> admin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 真删除     */</span>    <span class="token keyword">void</span> <span class="token function">deleteTrue</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"delete"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 更新     * @param admin     */</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span> <span class="token class-name">Admin</span> admin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 软删除     * @param id     */</span>    <span class="token keyword">void</span> <span class="token function">deleteFalse</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 查询单条数据     * @param id     */</span>    <span class="token class-name">Admin</span> <span class="token function">findone</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 通过用户名查询对应的用户     * @param name     * @return     */</span>    <span class="token class-name">Admin</span> <span class="token function">findoneByName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 批量插入     */</span>    <span class="token keyword">int</span> <span class="token function">insertBatch</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"adminList"</span><span class="token punctuation">)</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Admin</span><span class="token punctuation">></span></span> adminList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 批量删除     * @param adminList     * @return     */</span>    <span class="token keyword">int</span> <span class="token function">deleteBatch</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"adminList"</span><span class="token punctuation">)</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Admin</span><span class="token punctuation">></span></span> adminList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="控制器注册服务，传参"><a href="#控制器注册服务，传参" class="headerlink" title="控制器注册服务，传参"></a>控制器注册服务，传参</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">LoginServiceImpl</span> loginService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/page"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"login"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/verify"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span><span class="token comment">//不需要进行页面跳转而是直接返回数据。</span>    <span class="token comment">//添加了@ResponseBody注解的方法，返回值会通过HTTP响应主体直接发送给浏览器。</span>    <span class="token keyword">public</span> <span class="token class-name">JsonData</span> <span class="token function">verifyLogin</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span> <span class="token class-name">Admin</span> admin<span class="token punctuation">,</span> <span class="token class-name">BindingResult</span> result<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//数据校验</span>        <span class="token comment">//获取所有错误</span>        <span class="token class-name">ValidatorUtil</span><span class="token punctuation">.</span><span class="token function">showMsg</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> loginService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>admin<span class="token punctuation">,</span> session<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/exit"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span><span class="token comment">//不需要进行页面跳转而是直接返回数据。</span>    <span class="token comment">//添加了@ResponseBody注解的方法，返回值会通过HTTP响应主体直接发送给浏览器。</span>    <span class="token keyword">public</span> <span class="token class-name">JsonData</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> loginService<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Springboot数据校验"><a href="#Springboot数据校验" class="headerlink" title="Springboot数据校验"></a>Springboot数据校验</h2><h3 id="搞清楚什么是面向切面编程"><a href="#搞清楚什么是面向切面编程" class="headerlink" title="搞清楚什么是面向切面编程"></a>搞清楚什么是面向切面编程</h3><p>AOP技术利用一种称为“横切”的技术，剖解开封装对象的内部，将影响多个类的公共行为封装到一个可重用的模块中，并将其命名为Aspect切面。所谓的切面，简单来说就是与业务无关，却为业务模块所共同调用的逻辑，将其封装起来便于减少系统的重复代码，降低模块的耦合度，有利用未来的可操作性和可维护性。</p><p>例如：银行系统的取款流程和查询余额的流程</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210605095214.png" alt="20210605095214"></p><p>hibernate validator 加几个注释，由后端检验<br>一般来说，Web应用都是前后端都会对数据进行校验，前端一般是用js正则进行校验，后端主要是对传入接口的数据进行校验，不能对一些无效的数据产生返回。</p><h3 id="实体类—-写上相关注解"><a href="#实体类—-写上相关注解" class="headerlink" title="实体类—-写上相关注解"></a>实体类—-写上相关注解</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Admin</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>  <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"用户名不能为空！"</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> adminName<span class="token punctuation">;</span>  <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"密码不能为空"</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> adminPwd<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">Long</span> adminPhone<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">Timestamp</span> lastLoginTime<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">Timestamp</span> createTime<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">Timestamp</span> updateTime<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">Integer</span> adminStatus<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">Integer</span> isDeleted<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="校验类—-检验数据、抛出异常-由异常处理类进行处理"><a href="#校验类—-检验数据、抛出异常-由异常处理类进行处理" class="headerlink" title="校验类—-检验数据、抛出异常,由异常处理类进行处理"></a>校验类—-检验数据、抛出异常,由异常处理类进行处理</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidatorUtil</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 展示错误信息     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token class-name">BindingResult</span> result<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ObjectError</span><span class="token punctuation">></span></span> allErrors <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getAllErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ObjectError</span> error <span class="token operator">:</span> allErrors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span>  <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="控制器—-将前端传入数据传给校验类进行校验"><a href="#控制器—-将前端传入数据传给校验类进行校验" class="headerlink" title="控制器—-将前端传入数据传给校验类进行校验"></a>控制器—-将前端传入数据传给校验类进行校验</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidatorUtil</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 展示错误信息     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token class-name">BindingResult</span> result<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ObjectError</span><span class="token punctuation">></span></span> allErrors <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getAllErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ObjectError</span> error <span class="token operator">:</span> allErrors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span>  <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Springboot全局异常"><a href="#Springboot全局异常" class="headerlink" title="Springboot全局异常"></a>Springboot全局异常</h2><p>着重去理解异常类抛出和处理的顺序。抛出了哪个是由哪个类处理，往调用者抛出????</p><p>SpringBoot中有一个<code>ControllerAdvice</code>的注解，使用该注解表示开启了全局异常的捕获，我们只需在自定义一个方法使用<code>ExceptionHandler</code>注解然后定义捕获异常的类型即可对这些捕获的异常进行统一的处理。非常方便后续异常的分类处理以及代码维护</p><h3 id="异常处理类"><a href="#异常处理类" class="headerlink" title="异常处理类"></a>异常处理类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyExceptionAdvice</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**     * 专门用于处理登录异常     * @param e     * @return     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">LoginException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">JsonData</span> <span class="token function">loginExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">LoginException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonData</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">JsonData</span>  <span class="token function">exceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//记录异常日志</span>        <span class="token comment">//异常日志对于系统非常重要</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonData</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义异常–以登录异常为例"><a href="#自定义异常–以登录异常为例" class="headerlink" title="自定义异常–以登录异常为例"></a>自定义异常–以登录异常为例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">LoginException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">LoginException</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCode</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在服务中抛出异常"><a href="#在服务中抛出异常" class="headerlink" title="在服务中抛出异常"></a>在服务中抛出异常</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">LoginService</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">AdminMapper</span> mapper<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span>  <span class="token class-name">JsonData</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">Admin</span> admin<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//数据校验</span>                <span class="token comment">//从数据库中查数据</span>        <span class="token class-name">Admin</span> dbAdmin <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">findoneByName</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span><span class="token function">getAdminName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dbAdmin <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//说明用户不存在</span><span class="token comment">//            return new JsonData(1001,"用户不存在");</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LoginException</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">"用户不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">//判断状态</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dbAdmin<span class="token punctuation">.</span><span class="token function">getAdminStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>dbAdmin<span class="token punctuation">.</span><span class="token function">getAdminStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//            return new JsonData(1001,"用户被锁定,联系管理员");</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LoginException</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token string">"用户被锁定,联系管理员"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">//判断密码正确</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dbAdmin<span class="token punctuation">.</span><span class="token function">getAdminPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span><span class="token function">getAdminPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//            return new JsonData(1001,"密码错误");</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LoginException</span><span class="token punctuation">(</span><span class="token number">1003</span><span class="token punctuation">,</span><span class="token string">"密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//存到session</span>        session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"adminName"</span><span class="token punctuation">,</span>admin<span class="token punctuation">.</span><span class="token function">getAdminName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//更新用户最后登录时间</span>        dbAdmin<span class="token punctuation">.</span><span class="token function">setLastLoginTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Timestamp</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//dbAdmin没有问题</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dbAdmin<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>dbAdmin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonData</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"登录正常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span>  <span class="token class-name">JsonData</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonData</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"退出正常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Spring拦截器"><a href="#Spring拦截器" class="headerlink" title="Spring拦截器"></a>Spring拦截器</h2><p>应用的例子：在用户没有登录的时候，无法进入系统中的其他页面。</p><p>原理：<br>对每一个请求进行审查，如果满足要求，则放行；不满足要求，重定向到其他页面。<br><strong>需要注意的是，要严格审查逻辑，放行登录页面和静态资源，不要产生无限循环的情况。</strong></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210605103735.png" alt="20210605103735"></p><h3 id="登录拦截器"><a href="#登录拦截器" class="headerlink" title="登录拦截器"></a>登录拦截器</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 登录拦截器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 前置方法     * @param request     * @param response     * @param handler     * @return     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//判断是否登录</span>        <span class="token comment">//判断session</span>        <span class="token comment">//没有登录重定向到登录页面、登录了，定向到index页面</span>        <span class="token comment">//先去获取session对象</span>        <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取登录的标记</span>        <span class="token class-name">String</span> adminName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"adminName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断session的值是否为null</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>adminName <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//如果没有登录，这里就产生了循环，因为默认是拦截所有请求，所以就变成了无限次的重定向，</span>            <span class="token comment">//浏览器出现了too many redirect</span>            response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"/login/page"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//false拦截、true放行</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 后置方法     * @param request     * @param response     * @param handler     * @param modelAndView     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注册拦截器"><a href="#注册拦截器" class="headerlink" title="注册拦截器"></a>注册拦截器</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SystemConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 专门用来注册拦截器的     * @param registry     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoginInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">//拦截所有的请求</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>                <span class="token comment">//放行方法</span>                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/login/**"</span><span class="token punctuation">)</span>                <span class="token comment">//放行css</span>                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/static/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 国信安实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实训day4</title>
      <link href="/2021/06/03/shi-xun-day4/"/>
      <url>/2021/06/03/shi-xun-day4/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#spring%E5%85%A5%E9%97%A83">Spring入门3</a><ul><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF-mybatis">什么是 MyBatis</a><ul><li><a href="#%E5%8E%9F%E7%90%86%E5%9B%BE">原理图</a></li><li><a href="#mtbatis%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2">MtBatis进行数据查询</a></li></ul></li><li><a href="#springboot%E6%9F%A5%E6%89%BE%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E7%9A%84%E9%A1%BA%E5%BA%8F">SpringBoot查找静态资源的顺序</a></li><li><a href="#mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84%E5%AD%97%E6%AE%B5%E7%B1%BB%E5%9E%8Bvarchar%E5%92%8Cchar%E7%9A%84%E4%B8%BB%E8%A6%81%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%E5%93%AA%E7%A7%8D%E5%AD%97%E6%AE%B5%E7%9A%84%E6%9F%A5%E6%89%BE%E6%95%88%E7%8E%87%E8%A6%81%E9%AB%98%E4%B8%BA%E4%BB%80%E4%B9%88">MySQL数据库中的字段类型varchar和char的主要区别是什么？哪种字段的查找效率要高，为什么</a></li></ul></li></ul><h1 id="Spring入门3"><a href="#Spring入门3" class="headerlink" title="Spring入门3"></a>Spring入门3</h1><p>Java体系操作数据库的框架：</p><ul><li>全ORM: Hibernate，JPA 完全隔离sql语句，不写sql即可实现相应的数据库操作。相对半ORM来说执行速度会慢一点。</li><li>半ORM：Mybatis 隔离sql和java语句，java和 sql是分开的。更适合web项目的开发</li></ul><h2 id="什么是-MyBatis"><a href="#什么是-MyBatis" class="headerlink" title="什么是 MyBatis"></a>什么是 MyBatis</h2><p>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以对配置和原生Map使用简单的 XML 或注解，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。</p><h3 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210603114409.png" alt="20210603114409"></p><h3 id="MtBatis进行数据查询"><a href="#MtBatis进行数据查询" class="headerlink" title="MtBatis进行数据查询"></a>MtBatis进行数据查询</h3><ul><li>导入依赖 maven包</li><li>配置数据源 确定数据库的类型、账号、密码</li><li>Mybatis相关文件的创建</li></ul><p>1.创建实体类<br>数据库中的表 — 类<br>数据库表中的字段  — 类属性<br>数据            – 对象<br>2.创建接口 AdminMapper<br>3.创建对应的映射文件 Xml<br>4.配置mybatis 指定映射文件的位置、打印sql语句等<br>5.扫描接口  在启动类上面扫描<br>6.单元测试 去test目录下的Tests进行</p><h2 id="SpringBoot查找静态资源的顺序"><a href="#SpringBoot查找静态资源的顺序" class="headerlink" title="SpringBoot查找静态资源的顺序"></a>SpringBoot查找静态资源的顺序</h2><p>先从resources &gt; static &gt; public<br>如果在这几个文件夹中任意一个文件中找到静态资源，就不会再去其他的文件夹查找。都没有，就会直接抛出404.</p><h2 id="MySQL数据库中的字段类型varchar和char的主要区别是什么？哪种字段的查找效率要高，为什么"><a href="#MySQL数据库中的字段类型varchar和char的主要区别是什么？哪种字段的查找效率要高，为什么" class="headerlink" title="MySQL数据库中的字段类型varchar和char的主要区别是什么？哪种字段的查找效率要高，为什么"></a>MySQL数据库中的字段类型varchar和char的主要区别是什么？哪种字段的查找效率要高，为什么</h2><p><strong>区别一，定长和变长</strong><br>char 表示定长，长度固定，varchar表示变长，即长度可变，当所插入的字符串超出它们的长度时，视情况来处理，如果是严格模式，则会拒绝插入并提示错误信息，如果是宽松模式，则会截取然后插入。如果插入的字符串长度小于定义长度时，则会以不同的方式来处理，如char（10），表示存储的是10个字符，无论你插入的是多少，都是10个，如果少于10个，则用空格填满。而varchar（10），小于10个的话，则插入多少个字符就存多少个。varchar怎么知道所存储字符串的长度呢？实际上，对于varchar 字段来说，需要使用一个（如果字符串长度小于255）或两个字节（长度大于255）来存储字符串的长度。<br><strong>区别之二</strong><br>存储的容量不同对char来说，最多能存放的字符个数 255，和编码无关。而varchar呢，最多能存放 65532 个字符。VARCHAR的最大有效长度由最大行大小和使用的字符集确定。整体最大长度是65,532 字节，最大有效长度是 65532 字节，在varchar存字符串的时候，第一个字节是空的，不存任何的数据，然后还需要两个字节来存放字符串的长度。所以有效长度就是 65535 - 1 - 2= 65532</p>]]></content>
      
      
      <categories>
          
          <category> 国信安实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实训day3</title>
      <link href="/2021/06/02/shi-xun-day3/"/>
      <url>/2021/06/02/shi-xun-day3/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#spring%E5%85%A5%E9%97%A82">Spring入门2</a><ul><li><a href="#mvc%E6%A8%A1%E5%BC%8Fmodeviewcontroller">MVC模式(mode\view\controller)</a><ul><li><a href="#mvc%E5%8E%9F%E7%90%86%E5%9B%BE">MVC原理图</a></li></ul></li><li><a href="#springmvc%E6%98%AF%E4%BB%80%E4%B9%88">springMVC是什么</a><ul><li><a href="#%E5%8E%9F%E7%90%86%E5%9B%BE">原理图</a></li></ul></li><li><a href="#spring-thymeleaf">spring thymeleaf</a><ul><li><a href="#%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB">动静分离</a></li></ul></li><li><a href="#spring%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91">Spring接口开发</a><ul><li><a href="#%E7%B1%BB%E4%B8%8A%E7%9A%84%E6%B3%A8%E8%A7%A3">类上的注解</a></li><li><a href="#%E6%96%B9%E6%B3%95%E4%B8%8A%E7%9A%84%E6%B3%A8%E8%A7%A3">方法上的注解</a></li><li><a href="#%E5%8F%82%E6%95%B0%E6%B3%A8%E8%A7%A3">参数注解</a></li></ul></li></ul></li></ul><h1 id="Spring入门2"><a href="#Spring入门2" class="headerlink" title="Spring入门2"></a>Spring入门2</h1><h2 id="MVC模式-mode-view-controller"><a href="#MVC模式-mode-view-controller" class="headerlink" title="MVC模式(mode\view\controller)"></a>MVC模式(mode\view\controller)</h2><p>详见博客 <a href="https://www.cnblogs.com/xiaoxi/p/6164383.html">https://www.cnblogs.com/xiaoxi/p/6164383.html</a></p><h3 id="MVC原理图"><a href="#MVC原理图" class="headerlink" title="MVC原理图"></a>MVC原理图</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210602172050.png" alt="20210602172050"></p><p>M-Model 模型（完成业务逻辑：有javaBean构成，service+dao+entity）</p><p>V-View 视图（做界面的展示  jsp，html……）</p><p>C-Controller 控制器（接收请求—&gt;调用模型—&gt;根据结果派发页面）</p><h2 id="springMVC是什么"><a href="#springMVC是什么" class="headerlink" title="springMVC是什么"></a>springMVC是什么</h2><p>　　springMVC是一个MVC的开源框架，springMVC=struts2+spring，springMVC就相当于是Struts2加上sring的整合，但是这里有一个疑惑就是，springMVC和spring是什么样的关系呢？这个在百度百科上有一个很好的解释：意思是说，springMVC是spring的一个后续产品，其实就是spring在原有基础上，又提供了web应用的MVC模块，可以简单的把springMVC理解为是spring的一个模块（类似AOP，IOC这样的模块），网络上经常会说springMVC和spring无缝集成，其实springMVC就是spring的一个子模块，所以根本不需要同spring进行整合。</p><h3 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210602172227.png" alt="20210602172227"></p><p>第一步:用户发起请求到前端控制器（DispatcherServlet）</p><p>第二步：前端控制器请求处理器映射器（HandlerMappering）去查找处理器（Handle）：通过xml配置或者注解进行查找</p><p>第三步：找到以后处理器映射器（HandlerMappering）像前端控制器返回执行链（HandlerExecutionChain）</p><p>第四步：前端控制器（DispatcherServlet）调用处理器适配器（HandlerAdapter）去执行处理器（Handler）</p><p>第五步：处理器适配器去执行Handler</p><p>第六步：Handler执行完给处理器适配器返回ModelAndView</p><p>第七步：处理器适配器向前端控制器返回ModelAndView</p><p>第八步：前端控制器请求视图解析器（ViewResolver）去进行视图解析</p><p>第九步：视图解析器像前端控制器返回View</p><p>第十步：前端控制器对视图进行渲染</p><p>第十一步：前端控制器向用户响应结果</p><h2 id="spring-thymeleaf"><a href="#spring-thymeleaf" class="headerlink" title="spring thymeleaf"></a>spring thymeleaf</h2><p>详见 <a href="https://developer.aliyun.com/article/769977">https://developer.aliyun.com/article/769977</a></p><p>模板引擎在web领域的主要作用：让网站实现界面和数据分离，这样大大提高了开发效率，让代码重用更加容易。</p><h3 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h3><p>对于传统jsp或者其他模板来说，没有一个模板引擎的后缀为.html，就拿jsp来说jsp的后缀为.jsp,它的本质就是将一个html文件修改后缀为.jsp，然后在这个文件中增加自己的语法、标签然后执行时候通过后台处理这个文件最终返回一个html页面。</p><p>浏览器无法直接识别.jsp文件，需要借助网络(服务端)才能进行访问；而Thymeleaf用html做模板可以直接在浏览器中打开。开发者充分考虑html页面特性，将Thymeleaf的语法通过html的标签属性来定义完成，这些标签属性不会影响html页面的完整性和显示。如果通过后台服务端访问页面服务端会寻找这些标签将服务端对应的数据替换到相应位置实现动态页面！大体区别可以参照下图</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210602173047.png" alt="20210602173047"></p><p>上图的意思就是如果直接打开这个html那么浏览器会对th等标签忽视而显示原始的内容。如果通过服务端访问那么服务端将先寻找th标签将服务端储存的数据替换到对应位置。具体效果可以参照下图,下图即为一个动静结合的实例。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210602173204.png" alt="20210602173204"></p><h2 id="Spring接口开发"><a href="#Spring接口开发" class="headerlink" title="Spring接口开发"></a>Spring接口开发</h2><p>做如下区分的目的：方便后续代码的扩展和维护</p><h3 id="类上的注解"><a href="#类上的注解" class="headerlink" title="类上的注解"></a>类上的注解</h3><p>Stererotype.Component标记Spring中普通组件<br>Stererotype.Controller 控制器<br>Stererotype.Service服务层对象、处理业务逻辑<br>Stererotype. Repository持久层对象、操作数据库<br>Web.bin.annotation.RestController web控制器，返回json数据</p><h3 id="方法上的注解"><a href="#方法上的注解" class="headerlink" title="方法上的注解"></a>方法上的注解</h3><p>@RequsetMapping 路由控制返回数据<br>@GetMapping get请求获取用户数据<br>@PostMapping 获取数据<br>@PutMapping 更新数据<br>@DeleteMapping 删除数据</p><h3 id="参数注解"><a href="#参数注解" class="headerlink" title="参数注解"></a>参数注解</h3><p>@RequestParam required参数是否必传、name别名(前端看到的)、defaultValue:默认值 (这个name很奇怪，不知道怎么用的)</p>]]></content>
      
      
      <categories>
          
          <category> 国信安实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/06/01/hello-world/"/>
      <url>/2021/06/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>实训day1-day2</title>
      <link href="/2021/06/01/shi-xun-day1-day2/"/>
      <url>/2021/06/01/shi-xun-day1-day2/</url>
      
        <content type="html"><![CDATA[<h1 id="实训day1-day2"><a href="#实训day1-day2" class="headerlink" title="实训day1-day2"></a>实训day1-day2</h1><p>目录:</p><ul><li><a href="#%E5%AE%9E%E8%AE%ADday1-day2">实训day1-day2</a><ul><li><a href="#git%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8">git工具的使用</a><ul><li><a href="#%E5%85%B3%E4%BA%8Egit%E7%9A%84%E5%8E%9F%E7%90%86">关于git的原理</a></li><li><a href="#git-%E5%B7%A5%E4%BD%9C%E6%B5%81">git 工作流</a></li><li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8push%E4%B9%8B%E5%89%8D%E9%9C%80%E8%A6%81%E8%BF%9B%E8%A1%8Cpull">为什么在<code>push</code>之前需要进行<code>pull</code></a></li><li><a href="#git%E5%A4%84%E7%90%86%E5%86%B2%E7%AA%81">git处理冲突</a></li></ul></li><li><a href="#spring%E9%A1%B9%E7%9B%AE%E5%85%A5%E9%97%A8">spring项目入门</a><ul><li><a href="#java%E5%8F%8D%E5%B0%84">java反射</a></li><li><a href="#%E6%80%9D%E8%80%83">思考</a><ul><li><a href="#spring-ioc">Spring IOC</a></li><li><a href="#spring-%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5di">Spring 依赖注入DI</a></li></ul></li></ul></li></ul></li></ul><h2 id="git工具的使用"><a href="#git工具的使用" class="headerlink" title="git工具的使用"></a>git工具的使用</h2><h3 id="关于git的原理"><a href="#关于git的原理" class="headerlink" title="关于git的原理"></a>关于git的原理</h3><p>找到了一篇博客对于git的原理以及存储讲解的非常清楚</p><p><a href="https://zhaohuabing.com/post/2019-01-21-git/">https://zhaohuabing.com/post/2019-01-21-git/</a></p><h3 id="git-工作流"><a href="#git-工作流" class="headerlink" title="git 工作流"></a>git 工作流</h3><p>你的本地仓库由 git 维护的三棵“树”组成。第一个是你的 <code>工作目录</code>，它持有实际文件；第二个是 <code>缓存区（Index）</code>，它像个缓存区域，临时保存你的改动；最后是 <code>HEAD</code>，指向你最近一次提交后的结果。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210601113100.png" alt="20210601113100"></p><h3 id="为什么在push之前需要进行pull"><a href="#为什么在push之前需要进行pull" class="headerlink" title="为什么在push之前需要进行pull"></a>为什么在<code>push</code>之前需要进行<code>pull</code></h3><p>如果项目只有一个人，那无所谓。但是一般情况下，项目中都会有许多项目成员，在我们将自己的<code>分支 1</code> 合并到 <code>主分支 master</code>时，<code>主分支master</code>有可能已经发生改变(即成员2将自己的<code>分支2</code>合并到<code>主分支 master</code>之后<code>push</code>),此时如果直接<code>push</code>，会导致成员2所修改的部分被覆盖。</p><p>而在这之前进行<code>pull</code>操作，会把远程分支于本地分支进行合并。然后再进行<code>push</code></p><p>git可能会在这种情况下，禁止你进行push操作</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210601113613.png" alt="20210601113613"></p><h3 id="git处理冲突"><a href="#git处理冲突" class="headerlink" title="git处理冲突"></a>git处理冲突</h3><p>git并不能智能化地解决不同开发者修改同一个文件的情况。如果不同开发者对同一文件进行了修改，那么这个冲突的过程，必须要手动解决，然后再次提交。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210601114236.png" alt="20210601114236"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210601114412.png" alt="20210601114412"></p><p>日志</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210601114336.png" alt="20210601114336"></p><h2 id="spring项目入门"><a href="#spring项目入门" class="headerlink" title="spring项目入门"></a>spring项目入门</h2><p>  基础的创建项目+运行web项目 没什么可以说的</p><h3 id="java反射"><a href="#java反射" class="headerlink" title="java反射"></a>java反射</h3><p>具体去看博客:<a href="https://www.cnblogs.com/chanshuyi/p/head_first_of_reflection.html">https://www.cnblogs.com/chanshuyi/p/head_first_of_reflection.html</a></p><p><strong>反射就是在运行时才知道要操作的类是什么，并且可以在运行时获取类的完整构造，并调用对应的方法。</strong><br>一般情况下，我们使用某个类时必定知道它是什么类，是用来做什么的。于是我们直接对这个类进行实例化，之后使用这个类对象进行操作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Apple</span> apple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//直接初始化，「正射」</span>apple<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>而反射则是一开始并不知道我要初始化的类对象是什么，自然也无法使用 new 关键字来创建对象了。<br>这时候，我们使用 JDK 提供的反射 API 进行反射调用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> clz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.chenshuyi.reflect.Apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Method</span> method <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"setPrice"</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> object <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面两段代码的执行结果，其实是完全一样的。但是其思路完全不一样，第一段代码在未运行时就已经确定了要运行的类（Apple），而第二段代码则是在运行时通过字符串值才得知要运行的类（com.chenshuyi.reflect.Apple）</p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>为什么在浏览器中输入<a href="http://localhost:8080/index%E5%B0%B1%E8%83%BD%E5%A4%9F%E8%AE%BF%E9%97%AE%E5%88%B0%E5%AF%B9%E5%BA%94%E7%9A%84IndexController%E4%B8%AD%E7%9A%84index%E6%96%B9%E6%B3%95%EF%BC%9F">http://localhost:8080/index就能够访问到对应的IndexController中的index方法？</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Lakers win"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单来说，就是在运行时，浏览器通过获取<code>/index</code>找到了IndexController这个类（可能是Spring容器在启动之前或者之后创建好的），然后调用方法index，向前端返回 Lakers win</p><h4 id="Spring-IOC"><a href="#Spring-IOC" class="headerlink" title="Spring IOC"></a>Spring IOC</h4><p>详见博客：<a href="https://www.cnblogs.com/ysocean/p/7466217.html">https://www.cnblogs.com/ysocean/p/7466217.html</a></p><p>IOC-Inversion of Control，即控制反转。它不是什么技术，而是一种设计思想。</p><p>&emsp;&emsp;传统的创建对象的方法是直接通过 new 关键字，而 spring 则是通过 IOC 容器来创建对象，也就是说我们将创建对象的控制权交给了 IOC 容器。我们可以用一句话来概括 IOC：</p><p>&emsp;&emsp;IOC 让程序员不在关注怎么去创建对象，而是关注与对象创建之后的操作，把对象的创建、初始化、销毁等工作交给spring容器来做。</p><p>项目加载时会扫描有注解<code>@RestController、@Controller、@Service、@Component</code>的类，通过反射创建这些类的对象放入Spring的容器 **(hashMap:key =》value —–indexController 名字 =》indexController的对象)**，需要使用的时候通过key直接取出来使用。</p><h4 id="Spring-依赖注入DI"><a href="#Spring-依赖注入DI" class="headerlink" title="Spring 依赖注入DI"></a>Spring 依赖注入DI</h4><p>详见：<a href="http://c.biancheng.net/view/4253.html">http://c.biancheng.net/view/4253.html</a></p><p>依赖注入（Dependency Injection，DI）和控制反转含义相同，它们是从两个角度描述的同一个概念。</p><p>当某个 Java 实例需要另一个 Java 实例时，传统的方法是由调用者创建被调用者的实例（例如，使用 new 关键字获得被调用者实例），而使用 Spring 框架后，被调用者的实例不再由调用者创建，而是由 Spring 容器创建，这称为控制反转。</p><p>Spring 容器在创建被调用者的实例时，会自动将调用者需要的对象实例注入给调用者，这样，调用者通过 Spring 容器获得被调用者实例，这称为依赖注入。</p><p>依赖注入主要有两种实现方式，分别是属性 setter 注入和构造方法注入。</p>]]></content>
      
      
      <categories>
          
          <category> 国信安实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>篮球比赛数据统计</title>
      <link href="/2021/05/28/lan-qiu-bi-sai-shu-ju-tong-ji/"/>
      <url>/2021/05/28/lan-qiu-bi-sai-shu-ju-tong-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h1><table><thead><tr><th>日期</th><th>比赛名称</th><th>得分</th></tr></thead><tbody><tr><td>2019.5.中旬</td><td>学院院内赛-基准方中篮球赛(学院内不同年级组成的队伍)</td><td>具体数据忘了，但是场均应该能有个六七分，一共打了三场，大一非土木</td></tr><tr><td>2019.4.19</td><td>学工部篮球赛</td><td>17分、九投八中、一个三分、一个二加一</td></tr><tr><td>2021.5.9</td><td>Scuba(学校各个学院之间比赛)</td><td>对阵外国语 只得3分 三分六投一中，两个失误</td></tr><tr><td>2021.5.22</td><td>Scuba</td><td>对阵商学院、0分、两个失误</td></tr><tr><td>2021.5.28</td><td>Scuba</td><td>对阵软件 10分、五次启动走步、0助攻、中投3中2、两个上篮、一个二加一</td></tr></tbody></table><h1 id="记录没有别的目的，一方面是留念，但更多地是激励，希望自己能永远对🏀充满热情。—-2021-5-28"><a href="#记录没有别的目的，一方面是留念，但更多地是激励，希望自己能永远对🏀充满热情。—-2021-5-28" class="headerlink" title="记录没有别的目的，一方面是留念，但更多地是激励，希望自己能永远对🏀充满热情。—-2021.5.28"></a>记录没有别的目的，一方面是留念，但更多地是激励，希望自己能永远对🏀充满热情。—-2021.5.28</h1>]]></content>
      
      
      <categories>
          
          <category> 数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大学篮球 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>grafana iframe嵌入不显示的问题</title>
      <link href="/2021/05/26/grafana-iframe-qian-ru-bu-xian-shi-de-wen-ti/"/>
      <url>/2021/05/26/grafana-iframe-qian-ru-bu-xian-shi-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="grafana-iframe嵌入不显示的问题"><a href="#grafana-iframe嵌入不显示的问题" class="headerlink" title="grafana iframe嵌入不显示的问题"></a>grafana iframe嵌入不显示的问题</h1><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p><code>grafana\grafana\conf</code>目录下有两个配置文件<code>defaults.ini</code>、<code>sample.ini</code></p><ul><li><code>defaults.ini</code> 这个才是grafana服务器真正运行时的配置文件</li><li><code>sample.ini</code> 只是个样例，别改错了</li></ul><h2 id="开启匿名登录"><a href="#开启匿名登录" class="headerlink" title="开启匿名登录"></a>开启匿名登录</h2><p>修改<code>grafana\grafana\conf</code>目录下的<code>defaults.ini</code>文件中的 <code>[auth.anonymous]中的enabled = true</code></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210528084634.png" alt="20210528084634"></p><h2 id="允许浏览器渲染iframe"><a href="#允许浏览器渲染iframe" class="headerlink" title="允许浏览器渲染iframe"></a>允许浏览器渲染iframe</h2><p>修改上述文件中的<code>allow_embedding = true</code></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210528085103.png" alt="20210528085103"></p><h1 id="windows-server重启grafana服务"><a href="#windows-server重启grafana服务" class="headerlink" title="windows server重启grafana服务"></a>windows server重启grafana服务</h1><p>由于grafana在运行之后已经被当作一个服务，可以在服务管理页面对其进行重启</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210528085716.png" alt="20210528085716"></p><h1 id="不显示的原因"><a href="#不显示的原因" class="headerlink" title="不显示的原因"></a>不显示的原因</h1><p>grafana服务器响应头里面有一个<code>X-Frame-Options:deny</code></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210528085945.png" alt="20210528085945"></p><h2 id="X-Frame-Options"><a href="#X-Frame-Options" class="headerlink" title="X-Frame-Options"></a>X-Frame-Options</h2><p>The X-Frame-Options HTTP 响应头是用来给浏览器 指示允许一个页面 可否在 <code>&lt;frame&gt;, &lt;iframe&gt;, &lt;embed&gt; 或者 &lt;object&gt;</code> 中展现的标记。站点可以通过确保网站没有被嵌入到别人的站点里面，从而避免 clickjacking 攻击。</p><p>有三个可能值</p><pre class="line-numbers language-none"><code class="language-none">X-Frame-Options: denyX-Frame-Options: sameoriginX-Frame-Options: allow-from https:&#x2F;&#x2F;example.com&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果设置为 deny，不光在别人的网站 frame 嵌入时会无法加载，在同域名页面中同样会无法加载。另一方面，如果设置为sameorigin，那么页面就可以在同域名页面的 frame 中嵌套。</p><ul><li>deny <br><br>表示该页面不允许在 frame 中展示，即便是在相同域名的页面中嵌套也不允许。</li><li>sameorigin <br><br>表示该页面可以在相同域名页面的 frame 中展示。</li><li>allow-from url <br><br>表示该页面可以在指定来源的 frame 中展示。</li></ul><h2 id="修改之后，grafana服务器的响应头里不再包含这个字段"><a href="#修改之后，grafana服务器的响应头里不再包含这个字段" class="headerlink" title="修改之后，grafana服务器的响应头里不再包含这个字段"></a>修改之后，grafana服务器的响应头里不再包含这个字段</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210528091108.png" alt="20210528091108"><br>就可以显示了<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210528091142.png" alt="20210528091142"></p>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> grafana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用github托管网页，用到的工具总结</title>
      <link href="/2021/05/26/li-yong-github-tuo-guan-wang-ye-yong-dao-de-gong-ju-zong-lan/"/>
      <url>/2021/05/26/li-yong-github-tuo-guan-wang-ye-yong-dao-de-gong-ju-zong-lan/</url>
      
        <content type="html"><![CDATA[<h2 id="待做"><a href="#待做" class="headerlink" title="待做"></a>待做</h2><ul><li><input checked="" disabled="" type="checkbox"> 更改网页中js文件的cdn路径</li><li><input checked="" disabled="" type="checkbox"> 添加头像或者壁纸，看看作者的标语和文字是如何切换的</li><li><input disabled="" type="checkbox"> 想办法关一下背景音乐</li><li><input disabled="" type="checkbox"> 分析原因Travis 中运行hexo deloy总是<code>remote: Invalid username or password.fatal: Authentication failed fo</code></li><li><input checked="" disabled="" type="checkbox"> 续费腾讯的对象存储cos，方便传输图片</li><li><input disabled="" type="checkbox"> 将csdn上面的文件转过来</li></ul><h2 id="每一部分的作用详见首页-文章-Hexo主题LiveForCode介绍"><a href="#每一部分的作用详见首页-文章-Hexo主题LiveForCode介绍" class="headerlink" title="每一部分的作用详见首页 文章 Hexo主题LiveForCode介绍"></a>每一部分的作用详见首页 文章 Hexo主题LiveForCode介绍</h2><ul><li>Travis 就是方便部署hexo博客，不用每次自己在本地运行hexo deploy在上传GitHub, 检测到设定分支有push操作后，Travis会启动虚拟机帮你完成hexo generate和deploy的操作。关于这部分的配置参数，可以参考main分支的.travis.yml文件</li><li>LeanCloud 通过api把评论、留言、文章数据统计放到数据库里面，进入博客的时候，会再次请求数据库把这些数据显示在网页上。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210527113453.png" alt="20210527113453"></li><li>Algolia 搜索操作，会统计博客文章的标题和url相对路径。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210527113220.png" alt="20210527113220"></li><li>jsDelivr 免费的cdn加速。</li></ul><h2 id="利用github托管网页，用到的工具总结"><a href="#利用github托管网页，用到的工具总结" class="headerlink" title="利用github托管网页，用到的工具总结"></a>利用github托管网页，用到的工具总结</h2><h3 id="Hexo-博客框架"><a href="#Hexo-博客框架" class="headerlink" title="Hexo(博客框架)"></a>Hexo(博客框架)</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="Travis-CI-方便对博客更改，自动渲染"><a href="#Travis-CI-方便对博客更改，自动渲染" class="headerlink" title="Travis CI(方便对博客更改，自动渲染)"></a>Travis CI(方便对博客更改，自动渲染)</h3><p>Travis CI 提供的是持续集成服务（Continuous Integration，简称 CI）。它绑定 Github 上面的项目，只要有新的代码，就会自动抓取。然后，提供一个运行环境，执行测试，完成构建，还能部署到服务器。</p><p>持续集成指的是只要代码有变更，就自动运行构建和测试，反馈运行结果。确保符合预期以后，再将新代码”集成”到主干。</p><p>持续集成的好处在于，每次代码的小幅变更，就能看到运行结果，从而不断累积小的变更，而不是在开发周期结束时，一下子合并一大块代码。</p><h3 id="Valine-一款快速、简洁且高效的无后端评论系统。"><a href="#Valine-一款快速、简洁且高效的无后端评论系统。" class="headerlink" title="Valine - 一款快速、简洁且高效的无后端评论系统。"></a>Valine - 一款快速、简洁且高效的无后端评论系统。</h3><p>Valine 诞生于2017年8月7日，是一款基于LeanCloud的快速、简洁且高效的无后端评论系统。</p><p>理论上支持但不限于静态博客，目前已有Hexo、Jekyll、Typecho、Hugo、Ghost 等博客程序在使用Valine。</p><h3 id="LeanCloud-（数据库-—评论、留言、文章数据统计"><a href="#LeanCloud-（数据库-—评论、留言、文章数据统计" class="headerlink" title="LeanCloud （数据库)—评论、留言、文章数据统计"></a>LeanCloud （数据库)—评论、留言、文章数据统计</h3><p>LeanCloud（原 AVOS Cloud） 是针对移动应用的一站式云端服务，专注于为应用开发者提供工具和平台。提供包括LeanStorage 数据存储、LeanMessage 通信服务、LeanAnalytics 统计分析、LeanModules 拓展模块等四大类型的后端云服务，加速应用开发。</p><h3 id="Algolia-Search-数据库-–文章标签、分类统计"><a href="#Algolia-Search-数据库-–文章标签、分类统计" class="headerlink" title="Algolia Search(数据库)–文章标签、分类统计"></a>Algolia Search(数据库)–文章标签、分类统计</h3><p>可以使用 GitHub 或者 Google 账户直接登录，注册后的 14 天内拥有所有功能（包括收费类别的）。之后若未续费会自动降级为免费账户，免费账户总共有 10,000 条记录，每月有 100,000 的可以操作数</p><h3 id="jsDelivr–js文件的cdn-free"><a href="#jsDelivr–js文件的cdn-free" class="headerlink" title="jsDelivr–js文件的cdn free"></a>jsDelivr–js文件的cdn free</h3><p>CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。——百度百科</p>]]></content>
      
      
      <categories>
          
          <category> 待办 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo主题LiveForCode介绍</title>
      <link href="/2020/08/01/hexo-zhu-ti-liveforcode-jie-shao/"/>
      <url>/2020/08/01/hexo-zhu-ti-liveforcode-jie-shao/</url>
      
        <content type="html"><![CDATA[<p><a href="https://hexo.io/zh-cn/">Hexo</a> 是高效的静态站点生成框架，他基于 <a href="https://nodejs.org/en/">Node.js</a>。通过 Hexo 你可以轻松地使用 <a href="https://daringfireball.net/projects/markdown/">Markdown</a> 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 <a href="https://hexo.io/zh-cn/docs/tag-plugins.html">标签插件</a> 来快速的插入特定形式的内容。在这篇文章中，假定你已经成功安装了 Hexo，并使用 Hexo 提供的命令创建了一个站点。  </p><blockquote><p>你可以访问 <a href="https://hexo.io/zh-cn/docs/">Hexo 的文档</a> 了解如何安装 Hexo  </p></blockquote><p>在 Hexo 中有两份主要的配置文件，其名称都是 <code>_config.yml</code>。其中，一份位于 Hexo 根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br>为了描述方便，在以下说明中，将前者称为 <strong>站点配置文件</strong> ， 后者称为 <strong>主题配置文件</strong> 。  </p><h2 id="主题预览"><a href="#主题预览" class="headerlink" title="主题预览"></a>主题预览</h2><p><a href="https://www.notes.worstone.cn/">Hexo - Live For Code</a>  </p><h2 id="安装Live-For-Code"><a href="#安装Live-For-Code" class="headerlink" title="安装Live For Code"></a>安装Live For Code</h2><p>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至 Hexo 根目录的 themes 目录下，然后修改下配置文件即可。具体到 LiveForCode 来说，安装步骤如下。  </p><h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><p>如果你熟悉 Git，建议你使用 <code>克隆最新版本</code> 的方式，之后的更新可以通过 <code>git pull</code> 来快速更新，而不用再次下载压缩包替换。  </p><ol><li><p>克隆最新版本<br>在终端窗口下，定位到 Hexo 站点目录下。使用 Git Checkout 代码：  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">cd</span> your-hexo-site<span class="token function">git</span> clone https://github.com/first19326/hexo-liveforcode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将克隆下来的文件夹中的 <code>LiveForCode</code> 文件夹移动至站点的 <code>themes</code> 目录下，并将 <code>source</code> 文件夹中的 <code>about</code>、<code>category</code>、<code>comment</code>、<code>donate</code>、<code>friend</code> 以及 <code>tag</code> 文件夹移动至 Hexo 站点目录下的 <code>source</code> 文件夹中。这些文件夹分别对应着 <strong>关于</strong> 、 <strong>标签</strong> 、 <strong>留言板</strong> 、 <strong>赞赏</strong> 、 <strong>友情链接</strong> 以及 <strong>分类</strong> 页面，其中的 <code>index.md</code> 中的内容为各个页面显示的内容，大家可以根据自己的情况进行修改。  </p></li><li><p>下载稳定版本<br>前往 LiveForCode 版本发布页面。<br>选择你所需要的版本，下载 Download 区域下的 Source Code (zip) 到本地。<br>解压所下载的压缩包，并将解压后的文件夹中的 <code>LiveForCode</code> 文件夹移动至站点的 <code>themes</code> 目录下，并将 <code>source</code> 文件夹中的 <code>about</code>、<code>category</code>、<code>comment</code>、<code>donate</code>、<code>friend</code> 以及 <code>tag</code> 文件夹移动至 Hexo 站点目录下的 <code>source</code> 文件夹中。这些文件夹分别对应着 <strong>关于</strong> 、 <strong>标签</strong> 、 <strong>留言板</strong> 、 <strong>赞赏</strong> 、 <strong>友情链接</strong> 以及 <strong>分类</strong> 页面，其中的 <code>index.md</code> 中的内容为各个页面显示的内容，大家可以根据自己的情况进行修改。  </p></li></ol><h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>与所有 Hexo 主题启用的模式一样。当 克隆/下载 完成后，打开 <strong>站点配置文件</strong> ，找到 theme 字段，并将其值更改为 <code>LiveForCode</code>。  </p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">theme: LiveForCode<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前，我们最好使用 <code>hexo clean</code> 来清除 Hexo 的缓存。  </p><h3 id="验证主题"><a href="#验证主题" class="headerlink" title="验证主题"></a>验证主题</h3><p>首先启动 Hexo 本地站点，并开启调试模式（即加上 –debug），整个命令是 <code>hexo s --debug</code>。 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。<br>当命令行输出中提示出： <code>INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code> 此时即可使用浏览器访问 <code>http://localhost:4000</code>，检查站点是否正确运行。  </p><h2 id="站点设定"><a href="#站点设定" class="headerlink" title="站点设定"></a>站点设定</h2><p>在 <strong>站点配置文件</strong> 中，我修改了标签归档页面、分类归档页面以及文章归档页面的路径，如果大家使用默认的路径，则需要修改 <strong>主题配置文件</strong> 中的菜单设置。  </p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">tag_dir: tagarchive_dir: archivecategory_dir: category<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="主题设定"><a href="#主题设定" class="headerlink" title="主题设定"></a>主题设定</h2><p>由于 <strong>主题配置文件</strong> 可能有所改动，就不在这里给大家详细说明，我会在 <strong>主题配置文件</strong> 中添加适当的注释，麻烦大家参考页面以及注释内容进行修改。  </p><h2 id="404-页面设定"><a href="#404-页面设定" class="headerlink" title="404 页面设定"></a>404 页面设定</h2><p>主题中有相应的 <code>404</code> 错误页面，是单独的静态页面，没有添加到模板中。在使用主题的时候，需要大家将其中的 <strong>返回首页</strong> 的跳转链接 <code>https://notes.worstone.cn</code> 替换为自己网站的地址。<br>404 错误页面在主题文件夹 <code>LiveForCode</code> 中的 <code>source</code> 文件夹中。  </p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>buttons<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>刷新页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://notes.worstone.cn<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_self<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>返回首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第三方服务"><a href="#第三方服务" class="headerlink" title="第三方服务"></a>第三方服务</h2><h3 id="Algolia-Search"><a href="#Algolia-Search" class="headerlink" title="Algolia Search"></a>Algolia Search</h3><p>1.前往 <a href="https://www.algolia.com/">Algolia</a> 注册页面，注册一个新账户。 可以使用 GitHub 或者 Google 账户直接登录，注册后的 14 天内拥有所有功能（包括收费类别的）。之后若未续费会自动降级为免费账户，免费账户总共有 10,000 条记录，每月有 100,000 的可以操作数。注册完成后，创建一个新的 Index，这个 Index 将在后面使用。<br>2.Index 创建完成后，此时这个 Index 里未包含任何数据。 接下来需要安装 <code>Hexo Algolia</code> 扩展，这个扩展的功能是搜集站点的内容并通过 API 发送给 Algolia。前往站点根目录，执行命令安装：  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-algolia<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.编辑 <strong>站点配置文件</strong> ，新增以下配置：  </p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">algolia:  applicationID: &#39;applicationID&#39;  apiKey: &#39;apiKey&#39;  indexName: &#39;...&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注：这里的 applicationID 为 <code>Search-Only API Key</code><br>4.当配置完成，在站点根目录下执行一下命令更新 Index。请注意观察命令的输出。  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">export</span> <span class="token assign-left variable">HEXO_ALGOLIA_INDEXING_KEY</span><span class="token operator">=</span>Admin API Keyhexo algolia<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5.Hexo Algolia 命令设置选项  </p><pre class="line-numbers language-none"><code class="language-none">Options:  --dry-run       Does not push content to Algolia (default: false).  --flush         Resets the Algolia index before starting the indexation (default: false).  --indexing-key  An algolia API key with add&#x2F;delete records permissions.              It should be different than the search-only API key configured in _config.yml.  --layouts       A comma-separated list of page layouts to index (default: &quot;page&quot;).<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：<br><code>--flush</code> 如果是 <code>false</code> 则每一次都会直接添加内容到 Algolia 相关的 Index 中，如果不是第一次提交，则将其设置为 <code>true</code><br><code>--layouts</code> 如果使用默认设置，提交的时候会将分类归档、标签归档、赞赏、留言板等页面内容提交到 Algolia， 在搜索的时候，将会搜索到分类归档、标签归档、赞赏、留言板等页面内容，建议使用时将其设置为 <code>post</code>。  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hexo algolia --flush <span class="token boolean">true</span> --layouts post<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置-RSS"><a href="#设置-RSS" class="headerlink" title="设置 RSS"></a>设置 RSS</h3><p>1.安装 <code>Hexo-Feed</code> 插件。前往站点根目录，执行命令安装：  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-generator-feed<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.根据个人需求，编辑 <strong>站点配置文件</strong> ：  </p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">feed:  type: atom  path: atom.xml  limit: 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文章数据统计"><a href="#文章数据统计" class="headerlink" title="文章数据统计"></a>文章数据统计</h3><p>文章数据统计基于 <code>Valine.js</code> 插件实现。<br>实现方式：在文章列表页面加载 <code>Valine.js</code>， 只要 Valine 配置项中的 <code>el</code> 元素不存在即不会加载评论框相关内容。  </p><p>1.文章评论数统计<br>Valine 会自动查找页面中 class 值为 <code>valine-comment-count</code> 的元素，获取其 <code>data-xid</code> 为查询条件。并将得到的值填充到其 class 的值为 <code>valine-comment-count</code> 的元素里：  </p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- data-xid 将作为查询条件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>valine-comment-count<span class="token punctuation">"</span></span> <span class="token attr-name">data-xid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;Your/Path/Name><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.文章阅读量统计<br>Valine 从 <code>v1.2.0</code> 开始支持文章阅读量统计。  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Valine</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span> <span class="token string">'#vcomments'</span><span class="token punctuation">,</span>    <span class="token operator">...</span>    visitor<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 阅读量统计</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果开启了阅读量统计，Valine 会自动检测 LeanCloud 应用中是否存在 <code>Counter</code> 类，如果不存在会自动创建，无需手动创建。<br>Valine 会自动查找页面中 class 值为 <code>leancloud_visitors</code> 的元素，获取其 <code>id</code> 为查询条件。并将得到的值填充到其 class 的值为 <code>leancloud-visitors-count</code> 的子元素里：  </p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- id 将作为查询条件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;Your/Path/Name><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>leancloud_visitors<span class="token punctuation">"</span></span> <span class="token attr-name">data-flag-title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Your Article Title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>leancloud-visitors-count<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="评论列表"><a href="#评论列表" class="headerlink" title="评论列表"></a>评论列表</h3><p>评论功能使用的是 <code>Valine.js</code> 插件，配置详情请参见 <a href="https://valine.js.org/">Valine</a>。  </p><blockquote><p>特别说明 <strong>主题配置文件</strong> 中的 Valine 的 <code>appId</code> 与 <code>appKey</code> 请大家自行配置自己的参数。如果评论数据提交到我的 LeanCloud 工作空间，我并不能保证数据的完整性。  </p></blockquote><h3 id="赞赏页面"><a href="#赞赏页面" class="headerlink" title="赞赏页面"></a>赞赏页面</h3><p>赞赏页面使用了 <a href="https://github.com/Kaiyuan/sponsor-page">Sponsor Page</a>，并做了相关修改使其适应博客样式。感兴趣的小伙伴自行去了解吧。  </p><h3 id="音乐播放器"><a href="#音乐播放器" class="headerlink" title="音乐播放器"></a>音乐播放器</h3><p>音乐播放器功能是使用 <code>APlayer.js</code> 以及 <code>Meting.js</code> 实现，配置详情参见 <a href="https://aplayer.js.org/#/home">APlayer</a>、<a href="https://github.com/metowolf/MetingJS">Meting</a>。<br>主题中有两种实现方式，一种是 <code>APlayer.js</code> 结合 <code>Meting.js</code> 的实现方式，另外一种是 <code>APlayer.js</code> 单独的实现方式，两种实现方式各有优缺点：<br>第一种实现方式配置简单，并且可以从各个音乐平台解析音乐。由于是从各个平台解析，故而不是特别稳定，并且在 <code>IE</code> 浏览器中需要特殊设置。<br>第二种实现方式配置相对复杂，需要单独提供音乐相关信息，但是十分稳定，且对于 <code>IE</code> 浏览器也可兼容，无需特殊配置。<br>主题中默认以 <strong>第一种实现方式</strong> 实现，第二种实现方式为备选方案，在第一种实现方式出现问题的时候，可以切换到第二种实现方式，保证网站的稳定运行。<br>针对第二种实现方式需要 <strong>注意</strong> 的地方：<br><code>APlayer.js</code> 是基于 <code>HTML 5 Audio</code> 实现的一款音乐播放器插件，故而支持的音频格式有限，包括：<code>MP3</code>、<code>Wav</code> 以及 <code>Ogg</code> 格式，并且不同浏览器对这三种音频格式的支持也各有不同，详细信息大家参考 <a href="https://www.runoob.com/html/html5-audio.html">HTML5 Audio(音频)</a>。如果音频格式不支持，可以通过音频转换工具进行格式转换。<br><code>APlayer.js</code> 是通过 <code>XMLHttpRequest</code> 获取歌词文件，所以存在 <strong>跨域</strong> 问题。可以考虑将歌词文件放在主题文件夹 <code>LiveForCode</code> 的 <code>source</code> 文件夹下（ <strong>注意</strong> ：这里的 <code>source</code> 文件夹不是 <code>Hexo</code> 站点目录下的 <code>source</code> 文件夹），解决跨域的问题。由于 <code>jsDelivr</code> 在响应请求的时候，会添加 <code>access-control-allow-origin: *</code> 的响应标头信息，故而不存在跨域问题，也可以使用这种方式。不过需要注意的是，<code>jsDelivr</code> 对资源的大小有所限制，不可以超过 <strong>50M</strong> 。<br><code>APlayer.js</code> 获取到歌词后会将歌词中的空白行去掉，由于是单行显示歌词，所以有译文的双行歌词，只会显示下面一行歌词，可以将译文歌词拼接在歌词原文的后面解决这个问题。  </p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="关于-jQuery-版本"><a href="#关于-jQuery-版本" class="headerlink" title="关于 jQuery 版本"></a>关于 jQuery 版本</h3><p>mCustomScroll 目前暂不支持 <code>jQuery3.5</code> 以及以上版本，否则会导致代码块中的滚动条失效。  </p><h3 id="Position-fixed-定位问题"><a href="#Position-fixed-定位问题" class="headerlink" title="Position: fixed 定位问题"></a>Position: fixed 定位问题</h3><p>由于背景动画的 <code>z-index</code> 为 <code>-1</code>，导致在IE浏览器中，菜单等多处 <code>position: fixed</code> 样式的部件出现闪烁抖动的问题，所以默认在IE浏览器中关闭了背景动画。如果是高版本IE，例如IE11则可在设置 -&gt; Internet选项 -&gt; 高级，将浏览中的’使用平滑滚动’选项勾掉，也可以解决这个问题。  </p><h3 id="关于-Github-Page-的使用"><a href="#关于-Github-Page-的使用" class="headerlink" title="关于 Github Page 的使用"></a>关于 Github Page 的使用</h3><p>详情请参见 <a href="https://hexo.io/zh-cn/docs/github-pages">将 Hexo 部署到 GitHub Pages</a>。<br>Github Page 支持设置自己的域名，建议在 Hexo 主题的 source 文件夹下新增一个 CNAME 的文件，将自己的域名配置进去，否则每次提交的时候会覆盖掉相关域名设置。<br>在域名的解析设置中，可以使用 CNAME 解析方式，也可以使用 A记录 的方式。如果是 A记录 的方式，则需要检索当前 Github Page 对应的服务器 IP 地址。  </p><h3 id="关于-CDN"><a href="#关于-CDN" class="headerlink" title="关于 CDN"></a>关于 CDN</h3><p>CDN 可以在阿里云购买相关的 CDN 服务器，效果肯定是更好，这里使用的是 <a href="https://www.jsdelivr.com/">jsDelivr</a> 免费的 CDN 加速服务。但是有一个弊端，如果修改代码的时候没有Github的相关版本信息，则很容易读取到 jsDelivr 的缓存数据，而不是修改后的最新代码。至于这个缓存时间，我也拿捏不准。不过免费而且效果不错的东西，大家就不要要求太多了。  </p><h2 id="阶段计划"><a href="#阶段计划" class="headerlink" title="阶段计划"></a>阶段计划</h2><p>1.使用 Vue.js 重构项目<br>2.整理模板的样式文件<br>3.加入 Pjax，优化页面加载速度<br>4.补充国际化支持语言<br>5.考虑是否加入黑夜模式  </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>由于我还是一名小白，可能还有很多问题无法解决，这个主题也可能存在很多不尽如人意的地方，在细节方面我也会尽力地去修改，也欢迎大家提出自己的问题，以及主题的相关建议，也欢迎大家提交代码。如果觉得这个主题不错，欢迎大家去使用。当然了，如果能赞赏我一下，我也是不介意的。(●ˇ∀ˇ●)  </p><p>这个主题可定制的地方目前可能比较少，欢迎大家修改，也希望这个主题能够越来越好看，也希望越来越多的人能够喜欢。  </p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/01/01/helloworld/"/>
      <url>/2020/01/01/helloworld/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
