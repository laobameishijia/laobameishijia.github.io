<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>老叭美食家</title>
  
  <subtitle>永远热爱生活</subtitle>
  <link href="https://laobameishijia.github.io/atom.xml" rel="self"/>
  
  <link href="https://laobameishijia.github.io/"/>
  <updated>2021-11-30T02:55:39.473Z</updated>
  <id>https://laobameishijia.github.io/</id>
  
  <author>
    <name>老叭美食家</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>毕设-Fuzz-4</title>
    <link href="https://laobameishijia.github.io/2021/11/27/bi-she-fuzz-4/"/>
    <id>https://laobameishijia.github.io/2021/11/27/bi-she-fuzz-4/</id>
    <published>2021-11-27T09:25:00.000Z</published>
    <updated>2021-11-30T02:55:39.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NoteBook阅读"><a href="#NoteBook阅读" class="headerlink" title="NoteBook阅读"></a>NoteBook阅读</h1><h2 id="Mutation-Analyze"><a href="#Mutation-Analyze" class="headerlink" title="Mutation Analyze"></a>Mutation Analyze</h2><p>关于ast–<code>Abstract Syntax Trees</code> 可算是找到一篇讲的非常清楚的博客了. 看了之后自己又调试了一遍代码,清楚多了</p><p><a href="https://www.cnblogs.com/qiulinzhang/p/14258626.html">https://www.cnblogs.com/qiulinzhang/p/14258626.html</a></p><p>清楚这个之后,再去搞清楚这一小节写的代码逻辑,想必应该要轻松不少了.</p><h3 id="7-A-Simple-mutator-for-Function"><a href="#7-A-Simple-mutator-for-Function" class="headerlink" title="7 A Simple mutator for Function"></a>7 A Simple mutator for Function</h3><p>总算搞清楚这个代码的逻辑了</p><ul><li><p>第一开始初始化的时候,并没有直接修改源代码,只是做了一个统计. 看一下需要变异的节点有多少个</p></li><li><p>后面provoke generate_mutant函数将location传递进来的时候才会发生突变. 换句话说, 这个location的具体含义是要在第几个变异节点发生变异</p></li><li><p>在 generate_mutant函数中<code>mutant_ast = self.pm.mutator_object(location).visit(ast.parse(self.pm.src))  # copy</code>中的<code>ast.parse(self.pm.src)</code>就是每一次都把源代码解析的ast对象传递进去, 目的就是为了控制变量. 这样就能获取到每一个单个突变位置的突变. 最后再利用diff库中的函数进行与原始版本的比较.</p></li></ul><p><strong>作者把类中的函数分开来讲解,确实在对单个函数的说明上起到了一定的作用.但是对于类整体的功能理解上, 还是有一定的影响</strong></p><p>我把单独的代码整合到了一起去看代码的逻辑, 终于清晰了不少</p><h4 id="整合代码"><a href="#整合代码" class="headerlink" title="整合代码"></a>整合代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MuFunctionAnalyzer</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"__iter__"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> PMIterator<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> log<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fn <span class="token operator">=</span> fn        self<span class="token punctuation">.</span>name <span class="token operator">=</span> fn<span class="token punctuation">.</span>__name__        src <span class="token operator">=</span> inspect<span class="token punctuation">.</span>getsource<span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token comment"># 获取源码</span>        self<span class="token punctuation">.</span>ast <span class="token operator">=</span> ast<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>src<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>src <span class="token operator">=</span> ast<span class="token punctuation">.</span>unparse<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ast<span class="token punctuation">)</span>  <span class="token comment"># normalize</span>        self<span class="token punctuation">.</span>mutator <span class="token operator">=</span> self<span class="token punctuation">.</span>mutator_object<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>nmutations <span class="token operator">=</span> self<span class="token punctuation">.</span>get_mutation_count<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>un_detected <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>mutants <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>log <span class="token operator">=</span> log    <span class="token keyword">def</span> <span class="token function">mutator_object</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> locations<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> StmtDeletionMutator<span class="token punctuation">(</span>locations<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>mutants<span class="token punctuation">.</span>append<span class="token punctuation">(</span>m<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">finish</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>        <span class="token keyword">def</span> <span class="token function">get_mutation_count</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>mutator<span class="token punctuation">.</span>visit<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ast<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutator<span class="token punctuation">.</span>count        <span class="token keyword">class</span> <span class="token class-name">StmtDeletionMutator</span><span class="token punctuation">(</span>ast<span class="token punctuation">.</span>NodeTransformer<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mutate_location<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>mutate_location <span class="token operator">=</span> mutate_location        <span class="token keyword">def</span> <span class="token function">mutation_visit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> ast<span class="token punctuation">.</span>Pass<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">def</span> <span class="token function">mutable_visit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># statements start at line no 1</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>count <span class="token operator">==</span> self<span class="token punctuation">.</span>mutate_location<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"进行替换"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutation_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>generic_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">visit_Return</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"visit_Return"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Delete</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Assign</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_AnnAssign</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_AugAssign</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Raise</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Assert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Global</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Nonlocal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Expr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Pass</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Break</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Continue</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">PMIterator</span><span class="token punctuation">(</span>PMIterator<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pm<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>pm <span class="token operator">=</span> pm        self<span class="token punctuation">.</span>idx <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> self<span class="token punctuation">.</span>idx        <span class="token keyword">if</span> i <span class="token operator">>=</span> self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>nmutations<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>finish<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">raise</span> StopIteration<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>idx <span class="token operator">+=</span> <span class="token number">1</span>        mutant <span class="token operator">=</span> Mutant<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">,</span> self<span class="token punctuation">.</span>idx<span class="token punctuation">,</span> log<span class="token operator">=</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>log<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>register<span class="token punctuation">(</span>mutant<span class="token punctuation">)</span>        <span class="token keyword">return</span> mutant<span class="token keyword">class</span> <span class="token class-name">Mutant</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pm<span class="token punctuation">,</span> location<span class="token punctuation">,</span> log<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>pm <span class="token operator">=</span> pm        <span class="token comment">#print(pm)</span>        self<span class="token punctuation">.</span>i <span class="token operator">=</span> location        self<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"%s_%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>i<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_src <span class="token operator">=</span> <span class="token boolean">None</span>        self<span class="token punctuation">.</span>tests <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>detected <span class="token operator">=</span> <span class="token boolean">False</span>        self<span class="token punctuation">.</span>log <span class="token operator">=</span> log    <span class="token keyword">def</span> <span class="token function">generate_mutant</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">:</span>        mutant_ast <span class="token operator">=</span> self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>mutator_object<span class="token punctuation">(</span>            location<span class="token punctuation">)</span><span class="token punctuation">.</span>visit<span class="token punctuation">(</span>ast<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># copy</span>        <span class="token keyword">return</span> ast<span class="token punctuation">.</span>unparse<span class="token punctuation">(</span>mutant_ast<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">src</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>_src <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_src <span class="token operator">=</span> self<span class="token punctuation">.</span>generate_mutant<span class="token punctuation">(</span>self<span class="token punctuation">.</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_src    <span class="token keyword">def</span> <span class="token function">diff</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>difflib<span class="token punctuation">.</span>unified_diff<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>src<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                              self<span class="token punctuation">.</span>src<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                              fromfile<span class="token operator">=</span><span class="token string">'original'</span><span class="token punctuation">,</span>                                              tofile<span class="token operator">=</span><span class="token string">'mutant'</span><span class="token punctuation">,</span>                                              n<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>下面是运行代码, 还有一些解释性的语句, 自认为已经比较清楚了.</p></blockquote><h4 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">test <span class="token operator">=</span> MuFunctionAnalyzer<span class="token punctuation">(</span>triangle<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test.nmutations:"</span><span class="token punctuation">,</span>test<span class="token punctuation">.</span>nmutations<span class="token punctuation">)</span><span class="token keyword">for</span> m <span class="token keyword">in</span> test<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"=======这是第%d次变异===================="</span> <span class="token operator">%</span> m<span class="token punctuation">.</span>i<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"原始代码："</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>mutant<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>src<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"在固定节点变异之后的代码"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>src<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"========================================\n"</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>运行结果<span class="token punctuation">:</span>visit_Returnvisit_Returnvisit_Returnvisit_Returnvisit_Returntest<span class="token punctuation">.</span>nmutations<span class="token punctuation">:</span> <span class="token number">5</span>__iter__<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>这是第<span class="token number">1</span>次变异<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>原始代码：<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span>在固定节点变异之后的代码visit_Return进行替换visit_Returnvisit_Returnvisit_Returnvisit_Return<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>这是第<span class="token number">2</span>次变异<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>原始代码：<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span>在固定节点变异之后的代码visit_Returnvisit_Return进行替换visit_Returnvisit_Returnvisit_Return<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>这是第<span class="token number">3</span>次变异<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>原始代码：<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span>在固定节点变异之后的代码visit_Returnvisit_Returnvisit_Return进行替换visit_Returnvisit_Return<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>这是第<span class="token number">4</span>次变异<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>原始代码：<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span>在固定节点变异之后的代码visit_Returnvisit_Returnvisit_Returnvisit_Return进行替换visit_Return<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>这是第<span class="token number">5</span>次变异<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>原始代码：<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span>在固定节点变异之后的代码visit_Returnvisit_Returnvisit_Returnvisit_Returnvisit_Return进行替换<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-Evaluating-Mutations"><a href="#8-Evaluating-Mutations" class="headerlink" title="8 Evaluating Mutations"></a>8 Evaluating Mutations</h3><p>涉及到了两个函数</p><ul><li><p><code>__enter__()</code>:The <strong>enter</strong>() function is called when the with block is entered. <em><strong>It creates the mutant as a Python function and places it in the global namespace</strong></em>, such that the assert statement executes the mutated function rather than the original.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>log<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'->\t%s'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    c <span class="token operator">=</span> <span class="token builtin">compile</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>src<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'&lt;mutant>'</span><span class="token punctuation">,</span> <span class="token string">'exec'</span><span class="token punctuation">)</span>    <span class="token builtin">eval</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 创建全局的变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>__exit__()</code>:The <strong>exit</strong>() function checks whether an exception has occurred (i.e., the assertion failed, or some other error was raised); if so, it marks the mutation as detected. Finally, it restores the original function definition.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_value<span class="token punctuation">,</span> traceback<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>log<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&lt;-\t%s'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">if</span> exc_type <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>detected <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>log<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Detected %s"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_value<span class="token punctuation">)</span>    <span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>fn <span class="token comment"># 因为突变把原来函数给改变了嘛,所以后面又重新把它恢复成原来的样子了</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>log<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>其他的倒是不难理解了</p><h3 id="9-Mutator-for-Modules-and-Test-Suites"><a href="#9-Mutator-for-Modules-and-Test-Suites" class="headerlink" title="9 Mutator for Modules and Test Suites"></a>9 Mutator for Modules and Test Suites</h3><h4 id="问题"><a href="#问题" class="headerlink" title="问题:"></a>问题:</h4><ul><li><p><code>self.mutator.visit(self.ast)</code>  这个函数调用的是AdvMutator里面mutable_visit函数???? 为什么会是这样呢?</p><p>A: 你懵了吗, 之前不是探讨过这个问题吗. 并不是self.mutator.visit(self.ast)调用的这个函数, 而是其调用的函数调用的.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">visit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Visit a node."""</span>    method <span class="token operator">=</span> <span class="token string">'visit_'</span> <span class="token operator">+</span> node<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__    visitor <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> method<span class="token punctuation">,</span> self<span class="token punctuation">.</span>generic_visit<span class="token punctuation">)</span>     <span class="token comment"># 这个函数先访问你自定义的节点visit方法,</span>    <span class="token comment"># 如果没有的话, 就递归访问子节点, </span>    <span class="token comment"># 也就是说, 是你自定义的节点visit_XXXX方法调用的mutable_visit. </span>    <span class="token comment"># 你可以再去看看上面</span>    <span class="token keyword">return</span> visitor<span class="token punctuation">(</span>node<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>__dict__</code> 在py中,到底起什么样的作用呢? 为什么这个可以实现全局调用?</p><p>A: Python 类提供了 <strong>dict</strong> 属性。需要注意的一点是，该属性可以用类名或者类的实例对象来调用，用类名直接调用 __dict__，会输出该由类中所有类属性组成的字典；而使用类的实例对象调用 __dict__，会输出由类中所有实例属性组成的字典。</p></li><li><p><input checked="" disabled="" type="checkbox">  runtest函数中细节还要再理解</p><p>A: 是unittest类里面的内容, 下次的时候可以再去百度看.</p></li><li><p><input checked="" disabled="" type="checkbox">  再了解一下unittest</p><p>A: 就是一个测试类, 也记不住, 下次用到在百度看把</p></li></ul><h4 id="合成代码"><a href="#合成代码" class="headerlink" title="合成代码"></a>合成代码</h4><blockquote><p>按照我的理解的话, 这一小节的内容, 就是为了<strong>把第8小节中的变异之后函数运行问题做了简化, 其实本质上还是之前的内容.</strong> 过程中用到了<code>unittest</code>这个模块</p></blockquote><p>还是一样的做法, 把代码们先弄到一起</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MuProgramAnalyzer</span><span class="token punctuation">(</span>MuFunctionAnalyzer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> AdvPMIterator<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>ast <span class="token operator">=</span> ast<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>src<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>src <span class="token operator">=</span> ast<span class="token punctuation">.</span>unparse<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ast<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>changes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>mutator <span class="token operator">=</span> self<span class="token punctuation">.</span>mutator_object<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>nmutations <span class="token operator">=</span> self<span class="token punctuation">.</span>get_mutation_count<span class="token punctuation">(</span><span class="token punctuation">)</span>         self<span class="token punctuation">.</span>un_detected <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">mutator_object</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> locations<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> AdvStmtDeletionMutator<span class="token punctuation">(</span>self<span class="token punctuation">,</span> locations<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_mutation_count</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>s        self<span class="token punctuation">.</span>mutator<span class="token punctuation">.</span>visit<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ast<span class="token punctuation">)</span> <span class="token comment"># 这个函数调用的是AdvMutator里面mutable_visit函数???? 为什么会是这样呢?</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutator<span class="token punctuation">.</span>count      <span class="token keyword">class</span> <span class="token class-name">AdvMutator</span><span class="token punctuation">(</span>Mutator<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> analyzer<span class="token punctuation">,</span> mutate_locations<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>mutate_locations <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">if</span> mutate_locations <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">else</span> mutate_locations        self<span class="token punctuation">.</span>pm <span class="token operator">=</span> analyzer    <span class="token keyword">def</span> <span class="token function">mutable_visit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># statements start at line no 1</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutation_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">AdvStmtDeletionMutator</span><span class="token punctuation">(</span>AdvMutator<span class="token punctuation">,</span> StmtDeletionMutator<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> analyzer<span class="token punctuation">,</span> mutate_locations<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        AdvMutator<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> analyzer<span class="token punctuation">,</span> mutate_locations<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">mutation_visit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        index <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># there is only one way to delete a statement -- replace it by pass</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>mutate_locations<span class="token punctuation">:</span>  <span class="token comment"># counting pass</span>            self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>changes<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>count<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>generic_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment"># get matching changes for this pass</span>            mutating_lines <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> idx<span class="token punctuation">)</span>                                 <span class="token keyword">for</span> <span class="token punctuation">(</span>count<span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>mutate_locations<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>count<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token keyword">in</span> mutating_lines<span class="token punctuation">:</span>                <span class="token keyword">return</span> ast<span class="token punctuation">.</span>Pass<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> self<span class="token punctuation">.</span>generic_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">AdvPMIterator</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pm<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>pm <span class="token operator">=</span> pm        self<span class="token punctuation">.</span>idx <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> self<span class="token punctuation">.</span>idx        <span class="token keyword">if</span> i <span class="token operator">>=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>changes<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> StopIteration<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token comment"># there could be multiple changes in one mutant</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>changes<span class="token punctuation">)</span><span class="token comment"># </span>        <span class="token keyword">return</span> AdvMutant<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">,</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>changes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">AdvMutant</span><span class="token punctuation">(</span>Mutant<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pm<span class="token punctuation">,</span> locations<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>pm <span class="token operator">=</span> pm        self<span class="token punctuation">.</span>i <span class="token operator">=</span> locations        self<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"%s_%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>name<span class="token punctuation">,</span>                               <span class="token string">'_'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> self<span class="token punctuation">.</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_src <span class="token operator">=</span> <span class="token boolean">None</span>            <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> test_module<span class="token punctuation">)</span><span class="token punctuation">:</span>        test_module<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>            self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> import_code<span class="token punctuation">(</span>            self<span class="token punctuation">.</span>src<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token keyword">return</span> MutantTestRunner<span class="token punctuation">(</span>self<span class="token punctuation">,</span> test_module<span class="token punctuation">)</span>            <span class="token keyword">def</span> <span class="token function">generate_mutant</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> locations<span class="token punctuation">)</span><span class="token punctuation">:</span>        mutant_ast <span class="token operator">=</span> self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>mutator_object<span class="token punctuation">(</span>            locations<span class="token punctuation">)</span><span class="token punctuation">.</span>visit<span class="token punctuation">(</span>ast<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># copy</span>        <span class="token keyword">return</span> ast<span class="token punctuation">.</span>unparse<span class="token punctuation">(</span>mutant_ast<span class="token punctuation">)</span>           <span class="token keyword">def</span> <span class="token function">src</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>_src <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_src <span class="token operator">=</span> self<span class="token punctuation">.</span>generate_mutant<span class="token punctuation">(</span>self<span class="token punctuation">.</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_src      <span class="token keyword">class</span> <span class="token class-name">MutantTestRunner</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mutant<span class="token punctuation">,</span> test_module<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>mutant <span class="token operator">=</span> mutant        self<span class="token punctuation">.</span>tm <span class="token operator">=</span> test_module    <span class="token keyword">def</span> <span class="token function">runTest</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> tc<span class="token punctuation">)</span><span class="token punctuation">:</span>        suite <span class="token operator">=</span> unittest<span class="token punctuation">.</span>TestSuite<span class="token punctuation">(</span><span class="token punctuation">)</span>        test_class <span class="token operator">=</span> self<span class="token punctuation">.</span>tm<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>tc<span class="token punctuation">]</span>        <span class="token keyword">for</span> f <span class="token keyword">in</span> test_class<span class="token punctuation">.</span>__dict__<span class="token punctuation">:</span>            <span class="token keyword">if</span> f<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'test_'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                suite<span class="token punctuation">.</span>addTest<span class="token punctuation">(</span>test_class<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span>        runner <span class="token operator">=</span> unittest<span class="token punctuation">.</span>TextTestRunner<span class="token punctuation">(</span>verbosity<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> failfast<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> ExpectTimeout<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                res <span class="token operator">=</span> runner<span class="token punctuation">.</span>run<span class="token punctuation">(</span>suite<span class="token punctuation">)</span>                <span class="token keyword">if</span> res<span class="token punctuation">.</span>wasSuccessful<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>mutant<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>un_detected<span class="token punctuation">.</span>add<span class="token punctuation">(</span>self<span class="token punctuation">)</span>                <span class="token keyword">return</span> res        <span class="token keyword">except</span> SyntaxError<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Syntax Error (%s)'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>mutant<span class="token punctuation">.</span>name<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Unhandled exception during test execution'</span><span class="token punctuation">)</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-The-Problem-of-Equivalent-Mutants"><a href="#10-The-Problem-of-Equivalent-Mutants" class="headerlink" title="10 The Problem of Equivalent Mutants"></a>10 The Problem of Equivalent Mutants</h3><p>在替换的过程中, 有可能会产生这种情况: 替换过后相当于没有替换. 并不会产生错误. 替换掉了一个无关紧要的语句. 把这种情况称为<code>equivalent mutants</code></p><p>要解决这个问题, 文章中说了两个方法</p><h4 id="10-1-Statistical-Estimation-of-Number-of-Equivalent-Mutants"><a href="#10-1-Statistical-Estimation-of-Number-of-Equivalent-Mutants" class="headerlink" title="10.1 Statistical Estimation of Number of Equivalent Mutants"></a>10.1 Statistical Estimation of Number of Equivalent Mutants</h4><p>利用正态分布</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211130104504.png" alt="Statistical Estimation"></p><h4 id="10-2-Statistical-Estimation-of-the-Number-of-Immortals-by-Chao’s-Estimator"><a href="#10-2-Statistical-Estimation-of-the-Number-of-Immortals-by-Chao’s-Estimator" class="headerlink" title="10.2 Statistical Estimation of the Number of Immortals by Chao’s Estimator"></a>10.2 Statistical Estimation of the Number of Immortals by Chao’s Estimator</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211130104746.png" alt="Chao&#39;s Estimator"></p><p>Note that these <strong>immortal mutants</strong> are somewhat different from the traditional equivalent mutants in that the mortality depends on the oracle used to distinguish variant behavior. That is, if one uses a fuzzer that relies on errors thrown to detect killing, <em>it will not detect mutants that produce different output but does not throw an error</em>. Hence, the <strong>Chao1</strong> estimate will essentially be <strong>the asymptote value of mutants the fuzzer can detect</strong> if it is given an infinite amount of time.</p><h3 id="Synopsis"><a href="#Synopsis" class="headerlink" title="Synopsis"></a>Synopsis</h3><p>This chapter introduces two methods of running <em>mutation analysis</em> on subject programs. The first class <code>MuFunctionAnalyzer</code> targets individual functions. Given a function <code>gcd</code> and two test cases evaluate, one can run mutation analysis on the test cases as follows —<code>第7小节</code></p><p>The second class <code>MuProgramAnalyzer</code> targets standalone programs with test suites. Given a program <code>gcd</code> whose source code is provided in <code>gcd_src</code> and the test suite is provided by <code>TestGCD</code>, one can evaluate the mutation score of <code>TestGCD</code> as follows</p><blockquote><p>个人感觉这两种方式的差距, 并没有很大. 甚至好像没什么区别-可能是我菜吧😥-🤣</p></blockquote><p>The <strong>mutation score</strong> thus obtained is a better indicator of the quality of a given test suite than pure coverage.</p><h3 id="Lessons-Learned"><a href="#Lessons-Learned" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h3><p>为什么做这个, 怎么做, 这种方法有什么局限.又应该怎么改进.</p><blockquote><p>不得不说,作者的思路真的很清晰了.</p></blockquote><ul><li>We have learned why structural coverage is insufficient to evaluate the quality of test suites.</li><li>We have learned how to use Mutation Analysis for evaluating test suite quality.</li><li>We have learned the limitations of Mutation Analysis – Equivalent and Redundant mutants, and how to estimate them.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NoteBook阅读&quot;&gt;&lt;a href=&quot;#NoteBook阅读&quot; class=&quot;headerlink&quot; title=&quot;NoteBook阅读&quot;&gt;&lt;/a&gt;NoteBook阅读&lt;/h1&gt;&lt;h2 id=&quot;Mutation-Analyze&quot;&gt;&lt;a href=&quot;#Mutat</summary>
      
    
    
    
    <category term="毕设" scheme="https://laobameishijia.github.io/category/%E6%AF%95%E8%AE%BE/"/>
    
    
    <category term="Fuzz" scheme="https://laobameishijia.github.io/tag/Fuzz/"/>
    
  </entry>
  
  <entry>
    <title>美食篇-7-东北菜</title>
    <link href="https://laobameishijia.github.io/2021/11/26/mei-shi-pian-7-dong-bei-cai/"/>
    <id>https://laobameishijia.github.io/2021/11/26/mei-shi-pian-7-dong-bei-cai/</id>
    <published>2021-11-26T09:25:00.000Z</published>
    <updated>2021-11-30T02:55:39.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="美食"><a href="#美食" class="headerlink" title="美食"></a>美食</h1><p>这次还是我和两个舍友,来的应该是第四次了把.</p><ul><li>地三鲜</li><li>溜肉段–这个居然时炸的,真醉了~~</li><li>饺子–韭菜鸡蛋\牛肉萝卜</li><li>锅包肉–我真快吃腻了,而且感觉没有上次在江安这边点的外卖(也是东北菜)好吃.</li></ul><p>![1]](<a href="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QQ%E5%9B%BE%E7%89%8720211126220221.jpg">https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QQ图片20211126220221.jpg</a>)</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QQ%E5%9B%BE%E7%89%8720211126220234.jpg" alt="2"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;美食&quot;&gt;&lt;a href=&quot;#美食&quot; class=&quot;headerlink&quot; title=&quot;美食&quot;&gt;&lt;/a&gt;美食&lt;/h1&gt;&lt;p&gt;这次还是我和两个舍友,来的应该是第四次了把.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;地三鲜&lt;/li&gt;
&lt;li&gt;溜肉段–这个居然时炸的,真醉了~~&lt;/li</summary>
      
    
    
    
    <category term="美食" scheme="https://laobameishijia.github.io/category/%E7%BE%8E%E9%A3%9F/"/>
    
    
    <category term="成都" scheme="https://laobameishijia.github.io/tag/%E6%88%90%E9%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>毕设-Fuzz-3</title>
    <link href="https://laobameishijia.github.io/2021/11/22/bi-she-fuzz-3/"/>
    <id>https://laobameishijia.github.io/2021/11/22/bi-she-fuzz-3/</id>
    <published>2021-11-22T09:25:00.000Z</published>
    <updated>2021-11-30T02:55:39.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NoteBook阅读"><a href="#NoteBook阅读" class="headerlink" title="NoteBook阅读"></a>NoteBook阅读</h1><h2 id="SearchBasedFuzzer"><a href="#SearchBasedFuzzer" class="headerlink" title="SearchBasedFuzzer"></a>SearchBasedFuzzer</h2><p>我们先不去对代码实现细节进行掌握, 先去掌握思想.</p><p>什么是基于搜索的测试? 为什么要用这种方式? 原话: <em><strong>Sometimes we are not only interested in fuzzing as many as possible diverse program inputs, but in deriving specific test inputs that achieve some objective, such as reaching specific statements in a program.</strong></em> 要产生特定的测试数据,从而到达程序中特定的位置.</p><p>这样的方式需要我们做哪些工作?</p><ul><li>首先,你要明确你要生成的数据类型和范围. <em>Maybe XML\String\Int etc. a-z\1-10</em></li><li>其次, 要定义在搜索空间内的适应度函数, 也就是你要能评价搜索到的数据距离目标的距离</li><li>然后, 定义搜索算法. 即按照什么样的方式\以何种顺序在搜索空间中搜素.<ul><li><strong>Hillclimbing</strong> 搜素范围规模不大.<em><strong>个人感觉根梯度下降非常相似,只不过在这里是离散的.</strong></em></li><li><strong>Genetic Algorithm</strong>搜素范围规模较大.<em><strong>结合了自然选择和种群进化的生物理论.</strong></em></li></ul></li></ul><h3 id="两个主要的算法"><a href="#两个主要的算法" class="headerlink" title="两个主要的算法"></a>两个主要的算法</h3><p>The <strong>hillclimbing algorithm</strong> itself is very simple: </p><ol><li>Take a random starting point</li><li>Determine fitness value of all neighbours</li><li>Move to neighbour with the best fitness value</li><li>If solution is not found, continue with step 2</li></ol><p>The <strong>GA emulates natural evolution</strong> with the following process:</p><ul><li>Create an initial population of random chromosomes</li><li>Select fit individuals for reproduction</li><li>Generate new population through reproduction of selected individuals</li><li>Continue doing so until an optimal solution has been found, or some other limit has been reached.</li></ul><blockquote><p>当然在具体的应用中, 还要设计到如何设计突变/如何选择种群/如何利用父代产生子代. 这些都需要跟实际情况相结合.</p></blockquote><h3 id="需要了解的一些背景知识"><a href="#需要了解的一些背景知识" class="headerlink" title="需要了解的一些背景知识"></a>需要了解的一些背景知识</h3><p>Python 源码到机器码的过程，以 CPython 为例，编译过程如下：</p><ul><li>将源代码解析为解析树（Parser Tree）</li><li>将解析树转换为抽象语法树（Abstract Syntax Tree）</li><li>将抽象语法树转换到控制流图（Control Flow Graph）</li><li>根据流图将字节码（bytecode）发送给虚拟机（ceval）</li></ul><p>可以使用以下模块进行操作：</p><ul><li>ast 模块可以控制抽象语法树的生成和编译</li><li>py-compile 模块能够将源码换成字节码（编译），保存在 <strong>pycache</strong> 文件夹，以 .pyc 结尾（不可读）</li><li>dis 模块通过反汇编支持对字节码的分析（可读）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NoteBook阅读&quot;&gt;&lt;a href=&quot;#NoteBook阅读&quot; class=&quot;headerlink&quot; title=&quot;NoteBook阅读&quot;&gt;&lt;/a&gt;NoteBook阅读&lt;/h1&gt;&lt;h2 id=&quot;SearchBasedFuzzer&quot;&gt;&lt;a href=&quot;#Sear</summary>
      
    
    
    
    <category term="毕设" scheme="https://laobameishijia.github.io/category/%E6%AF%95%E8%AE%BE/"/>
    
    
    <category term="Fuzz" scheme="https://laobameishijia.github.io/tag/Fuzz/"/>
    
  </entry>
  
  <entry>
    <title>毕设-Fuzz-2</title>
    <link href="https://laobameishijia.github.io/2021/11/21/bi-she-fuzz-2/"/>
    <id>https://laobameishijia.github.io/2021/11/21/bi-she-fuzz-2/</id>
    <published>2021-11-21T09:25:00.000Z</published>
    <updated>2021-11-30T02:55:39.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NoteBook阅读"><a href="#NoteBook阅读" class="headerlink" title="NoteBook阅读"></a>NoteBook阅读</h1><ul><li><input checked="" disabled="" type="checkbox"> 这一部分还是要再看看代码才行</li></ul><h2 id="Greybox-Fuzzing"><a href="#Greybox-Fuzzing" class="headerlink" title="Greybox Fuzzing"></a>Greybox Fuzzing</h2><h3 id="Blackbox-Mutation-base-Fuzzer"><a href="#Blackbox-Mutation-base-Fuzzer" class="headerlink" title="Blackbox Mutation-base Fuzzer"></a>Blackbox Mutation-base Fuzzer</h3><p>在这个测试里面,似乎只要是在population里面的seed,在权重上是一样的,换句话说就是被挑选的概率是一样的.</p><p>不过,按照我的理解, 按说这个权重应该是要变化的,可能在后面的讲解中会讲到吧</p><h3 id="Greybox-Mutation-base-Fuzzer"><a href="#Greybox-Mutation-base-Fuzzer" class="headerlink" title="Greybox Mutation-base Fuzzer"></a>Greybox Mutation-base Fuzzer</h3><p>我丢,从代码的角度上来看的话,灰盒测试无非是把<code>代码覆盖率</code>当成了加入<code>population</code>的一个准则</p><blockquote><p>原话: If we reach new coverage,add inp to population and its coverage to population_coverage</p></blockquote><h3 id="Boosted-Greybox-Fuzzer"><a href="#Boosted-Greybox-Fuzzer" class="headerlink" title="Boosted Greybox Fuzzer"></a>Boosted Greybox Fuzzer</h3><p>果不其然, 这个增强版的就用到了<code>energy</code>,也就是上面所讲的权重,它用了一个函数来计算.</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211121205144.png" alt="计算权重的公式"></p><p>这个指数后面文章所取的值是5</p><p>❓我不太清楚是, <code>coverage</code>只是一个数字, 如果只是数字的话, 那如何衡量路径呢? 因为即使是路径不同, <code>coveraige</code>也有可能是一样的.</p><blockquote><p>emm,很明显,<code>coverage</code>应该不仅仅是数字,他应该是<code>(执行函数名,行数)</code>这样的结构组成的😨</p></blockquote><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211121210348.png" alt="Boosted"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211121210407.png" alt="Original"></p><p>把<code>energy</code>分配给哪些执行次数相对较少的路径上, 以期再获得其他路径.</p><blockquote><p>The exponential power schedule shaves some of the executions of the “high-frequency path” off and adds them to the lower-frequency paths. The path executed least often is either not at all exercised using the traditional power schedule or it is exercised much less often.</p></blockquote><p><em><strong>Summary</strong></em>. By fuzzing seeds more often that exercise low-frequency paths, we can explore program paths in a much more efficient manner.</p><h2 id="Directed-Greybox-Fuzzing"><a href="#Directed-Greybox-Fuzzing" class="headerlink" title="Directed Greybox Fuzzing"></a>Directed Greybox Fuzzing</h2><p>本章用了一个迷宫来做案例, 迷宫的正确解恰恰对应于程序运行过程中运行次数最少的.</p><p>然后, 如何去评价一个路径的好坏, 本章节中采用了将程序调用图转换为有向图, 然后计算<code>路径最终节点</code>与<code>目标节点-出口</code>之间的距离.很显然这个距离越小, 说明距离<code>目标节点-出口</code>越近, 也就越接近出口.</p><p><em><strong>Summary</strong></em>. After pre-computing the function-level distance to the target, we can develop a power schedule that assigns more energy to a seed with a smaller average function-level distance to the target. By normalizing seed distance values between the minimum and maximum seed distance, we can further boost the directed power schedule.</p><blockquote><p>这部分说实话,真的没看懂..😥😥😥😥</p></blockquote><h2 id="Lessons-Learned"><a href="#Lessons-Learned" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h2><ul><li>A <em>greybox fuzzer</em> generates thousands of inputs per second. Pre-processing and lightweight instrumentation <ul><li>allows to maintain the efficiency <em>during</em> the fuzzing campaign, and </li><li>still provides enough information to control progress and slightly steer the fuzzer.</li></ul></li><li>The <em>power schedule</em> allows to steer/control the fuzzer. For instance,<ul><li>Our <a href="#Fuzzer-Boosting">boosted greybox fuzzer</a> spends more energy on seeds that exercise “unlikely” paths. The hope is that the generated inputs exercise even more unlikely paths. This in turn increases the number of paths explored per unit time.</li><li>Our <a href="#Directed-Greybox-Fuzzing">directed greybox fuzzer</a> spends more energy on seeds that are “closer” to a target location. The hope is that the generated inputs get even closer to the target.</li></ul></li><li>The <em>mutator</em> defines the fuzzer’s search space. <a href="GreyboxFuzzer.ipynb#A-First-Attempt">Customizing the mutator</a> for the given program allows to reduce the search space to only relevant inputs. In a couple of chapters, we’ll learn about <a href="GreyboxGrammarFuzzer.ipynb">dictionary-based, and grammar-based mutators</a> to increase the ratio of valid inputs generated.</li></ul><p>从这也可以看出来,评价函数确实很重要. 虽然实现的目的都是一样的, 但是就实验的效果来看的话, 却是相差很远.</p><h2 id="Next-Steps"><a href="#Next-Steps" class="headerlink" title="Next Steps"></a>Next Steps</h2><p>Our aim is still to sufficiently cover functionality, such that we can trigger as many bugs as possible.  To this end, we focus on two classes of techniques:</p><ol><li><p>Try to cover as much <em>specified</em> functionality as possible.  Here, we would need a <em>specification of the input format,</em> distinguishing between individual input elements such as (in our case) numbers, operators, comments, and strings – and attempting to cover as many of these as possible.  We will explore this as it comes to <a href="GrammarFuzzer.ipynb">grammar-based testing</a>, and especially in <a href="GreyboxGrammarFuzzer.ipynb">grammar-based mutations</a>.</p></li><li><p>Try to cover as much <em>implemented</em> functionality as possible.  The concept of a “population” that is systematically “evolved” through “mutations” will be explored in depth when discussing <a href="SearchBasedFuzzer.ipynb">search-based testing</a>.  Furthermore, <a href="SymbolicFuzzer.ipynb">symbolic testing</a> introduces how to systematically reach program locations by solving the conditions that lie on their paths.</p></li></ol><p>These two techniques make up the gist of the book; and, of course, they can also be combined with each other.  As usual, we provide runnable code for all.  Enjoy!</p><blockquote><p>从这里的描述来看, <code>specified functionality</code> 和 <code>implemented functionality</code> 是不同的两个概念</p></blockquote><hr><p>看到现在的话,其实作者的思路,我们大概也清楚的知道了一些</p><ul><li><ol><li>我们只是简单地随机产生字符串</li></ol></li><li><ol start="2"><li>紧接着, 我们不满足于仅仅产生随机的字符串, 进而使用了<code>coverage</code>—<code>measure the effectiveness of different test generation techniques, but also to guide test generation towards code coverage.</code></li></ol></li><li><ol start="3"><li>有了<code>coverage</code>之后, 还不行, 因为总有一些路径几乎不被执行, 相反一些路径被执行的次数却很多. 倒也不是说这样不好, 只是 <code>By fuzzing seeds more often that exercise low-frequency paths, we can explore program paths in a much more efficient manner.</code> 所以又引入了 <code>Power Schedules</code><blockquote><p><strong>We call the likelihood with which a seed is chosen from the population as the seed’s energy.</strong> Throughout a fuzzing campaign, we would like to prioritize seeds that are more promising. Simply said, we do not want to waste energy fuzzing non-progressive seeds. <em><strong>We call the procedure that decides a seed’s energy as the fuzzer’s <strong>power schedule</strong></strong></em>. For instance, AFL’s schedule assigns more energy to seeds that are shorter, that execute faster, and yield coverage increases more often. </p></blockquote></li></ol></li><li><ol start="4"><li>但是有了这些还是不行, 因为虽然产生的随机字符串有了一定的质量, 但是在语法上, 还是比较欠缺.<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211121212317.png" alt="针对HtmlParser产生的字符串"></li></ol><blockquote><p>The greybox fuzzer executes much more complicated inputs, many of which include special characters such as opening and closing brackets and chevrons (i.e., &lt;, &gt;, [, ]). Yet, many important keywords, such as <html> are still missing.</p></blockquote><p>  所以,下面一章就要将<code>grammars</code>的部分了</p></li></ul><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NoteBook阅读&quot;&gt;&lt;a href=&quot;#NoteBook阅读&quot; class=&quot;headerlink&quot; title=&quot;NoteBook阅读&quot;&gt;&lt;/a&gt;NoteBook阅读&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; ty</summary>
      
    
    
    
    <category term="毕设" scheme="https://laobameishijia.github.io/category/%E6%AF%95%E8%AE%BE/"/>
    
    
    <category term="Fuzz" scheme="https://laobameishijia.github.io/tag/Fuzz/"/>
    
  </entry>
  
  <entry>
    <title>毕设-Fuzz-1</title>
    <link href="https://laobameishijia.github.io/2021/11/19/bi-she-fuzz-1/"/>
    <id>https://laobameishijia.github.io/2021/11/19/bi-she-fuzz-1/</id>
    <published>2021-11-19T09:25:00.000Z</published>
    <updated>2021-11-30T02:55:39.473Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Fuzzer"><a href="#Fuzzer" class="headerlink" title="Fuzzer"></a>Fuzzer</h2><p>这是在GitHub上,找到的一个在线的书籍,讲解Fuzz的<br><a href="https://hub.gke2.mybinder.org/user/uds-se-fuzzingbook-ktofhf06/notebooks/docs/notebooks/Fuzzer.ipynb">https://hub.gke2.mybinder.org/user/uds-se-fuzzingbook-ktofhf06/notebooks/docs/notebooks/Fuzzer.ipynb</a></p><p>简单来说, 就是随机生成字符串, 在接受输入的地方及进行测试. 并且对程序崩溃的原因进行整理.</p><p>发现的问题就包括了缓冲区溢出/缺少错误输入的检查/极端值的验证等常见的错误</p><h3 id="Generic-Checker-泛型检测器"><a href="#Generic-Checker-泛型检测器" class="headerlink" title="Generic Checker(泛型检测器)"></a>Generic Checker(泛型检测器)</h3><h4 id="Memory-Accesses"><a href="#Memory-Accesses" class="headerlink" title="Memory Accesses"></a>Memory Accesses</h4><p><strong>LLVM Address Sanitizer</strong> which detects a whole set of potentially dangerous memory safety violations. 将这个嵌入到c程序中,并进行编译, 当访问越界的地址时, 会提示报错, 被给出一个详细的说明.</p><p>![报错示意图]](<a href="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211119145215.png">https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211119145215.png</a>)</p><p>HeartBleed bug 就是这么被测试出来的. OpenSSl库里面的漏洞</p><h4 id="Information-Leak"><a href="#Information-Leak" class="headerlink" title="Information Leak"></a>Information Leak</h4><p>信息泄露可能不仅仅出现访问非法的地址, 同样有可能出现在合法地址中. 如果合法地址中包含了不应该泄露的敏感信息. 这种情况下, <code>Address Sanitizer</code>不会报错, 因为访问的是”合法”地址.</p><p>要应对这样的问题, 需要检查返回的字符串中, 是否包含了不应该出现的信息</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211119151350.png" alt="信息泄露检查"></p><h3 id="定制检查"><a href="#定制检查" class="headerlink" title="定制检查"></a>定制检查</h3><p>充分地利用assertion, 检查重要函数的input和result. 充分使用assertion可以提高检测到泛型检查器无法检查到的错误.</p><h4 id="Check-the-integrity-of-complex-data-structures"><a href="#Check-the-integrity-of-complex-data-structures" class="headerlink" title="Check the integrity of complex data structures"></a>Check the integrity of complex data structures</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211119152317.png" alt="检查数据结构"></p><p>这个具体的检查,感觉就好像是编程中的问题, 要在改变重要数据结构前后, 都要验证数据结构的合法性. <code>. Whenever an element is added or deleted, all these consistency checks are run automatically.</code></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211119155255.png" alt="repOK()类型的检测"></p><p>虽然这些检测 <code>documents all the assumptions and checks them as well</code> 仅仅针对于我们个人写的程序和问题, 但是可以帮助我们找到问题, 同时也能帮助其他程序员理解我们的代码并避免错误.</p><h3 id="Fuzzing-结构"><a href="#Fuzzing-结构" class="headerlink" title="Fuzzing 结构"></a>Fuzzing 结构</h3><ul><li><code>Fuzzer</code> 作为<code>fuzzers</code>的一个基类 </li><li><code>Runner</code> 作为运行程序和检测的一个基类</li></ul><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211120152158.png" alt="Fuzzer"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211120152415.png" alt="Runner"></p><h3 id="Lesson-Learned"><a href="#Lesson-Learned" class="headerlink" title="Lesson Learned"></a>Lesson Learned</h3><ul><li>Randomly generating inputs (“fuzzing”) is a simple, cost-effective way to quickly test arbitrary programs for their robustness.</li><li>Bugs fuzzers find are mainly due to errors and deficiencies in input processing.</li><li>To catch errors, have as many consistency checkers as possible.</li></ul><h2 id="Mutation-Based-Fuzzing"><a href="#Mutation-Based-Fuzzing" class="headerlink" title="Mutation-Based Fuzzing"></a>Mutation-Based Fuzzing</h2><p>这是上一本在结尾时推荐出来的<br><a href="https://hub.gke2.mybinder.org/user/uds-se-fuzzingbook-whv6pm2k/notebooks/docs/notebooks/MutationFuzzer.ipynb">https://hub.gke2.mybinder.org/user/uds-se-fuzzingbook-whv6pm2k/notebooks/docs/notebooks/MutationFuzzer.ipynb</a></p><p>最初所生产出来的模糊字符串, 很多都是无效的. 在测验的过程中, 很快就被程序拒绝了. 现在提出的方法叫 <strong>基于突变的Fuzz</strong>, 要在现有输入上做微小的改动, 使其仍然保持有效性. </p><p>看到后面还得需要去在补前面的<code>Code Coverage</code>的定义😱😱😱😱</p><hr><h2 id="已补完😀😀"><a href="#已补完😀😀" class="headerlink" title="已补完😀😀"></a>已补完😀😀</h2><p>在知道这个Code Coverage之后呢, 我们就可以把<strong>通过检测以及Code Coverage有上升/或者从未出现过</strong>的fuzz字符串保存下来.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MutationCoverageFuzzer</span><span class="token punctuation">(</span>MutationFuzzer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>coverages_seen <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># Now empty; we fill this with seed in the first fuzz runs</span>        self<span class="token punctuation">.</span>population <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> runner<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Run function(inp) while tracking coverage.           If we reach new coverage,           add inp to population and its coverage to population_coverage        """</span>        result<span class="token punctuation">,</span> outcome <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run<span class="token punctuation">(</span>runner<span class="token punctuation">)</span>        new_coverage <span class="token operator">=</span> <span class="token builtin">frozenset</span><span class="token punctuation">(</span>runner<span class="token punctuation">.</span>coverage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> outcome <span class="token operator">==</span> Runner<span class="token punctuation">.</span>PASS <span class="token keyword">and</span> new_coverage <span class="token keyword">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>coverages_seen<span class="token punctuation">:</span>            <span class="token comment"># We have new coverage</span>            self<span class="token punctuation">.</span>population<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>inp<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>coverages_seen<span class="token punctuation">.</span>add<span class="token punctuation">(</span>new_coverage<span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>The nice thing about this strategy is that, applied to larger programs, it will happily explore one path after the other – covering functionality after functionality. All that is needed is a means to capture the coverage.</p></blockquote><h3 id="Lessons-Learned"><a href="#Lessons-Learned" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h3><ul><li>Randomly generated inputs are frequently invalid – and thus exercise mostly input processing functionality.</li><li>Mutations from existing valid inputs have much higher chances to be valid, and thus to exercise functionality beyond input processing.</li></ul><h2 id="Code-Coverage"><a href="#Code-Coverage" class="headerlink" title="Code Coverage"></a>Code Coverage</h2><p>如何衡量这些测试的有效性?一种方法是检查发现的漏洞的数量(和严重性);但是如果bug非常少，我们就需要一个代理来确定通过测试发现bug的可能性。在这一章中，我们介绍了代码覆盖率的概念，衡量在测试运行期间程序的哪些部分实际上被执行了。对于试图覆盖尽可能多的代码的测试生成器来说，度量这样的覆盖率也是至关重要的。</p><h3 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h3><p>黑盒测试的优点是可以在指定的行为中发现出错误. 缺点是 以实现的行为通常比指定的行为覆盖更多的领域, 因此仅基于规范的测试通常不能覆盖所有的实现细节.</p><blockquote><p>这话没毛病,毕竟是黑盒测试, 也仅仅只能通过函数的行为来进行测试. 并不能窥探到所有的实现细节.</p></blockquote><h3 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h3><p>白盒测试的优点是它可以找到以实现的功能里面的错误. 即使规范中没有提供详细的细节.  但是它可能会漏掉没有实现的行为.如果有些特定的功能没有实现, 白盒测试就不能找到它.</p><blockquote><p>这最后一句话确定不是废话吗? 没实现就没有代码, 没有代码 那白盒测试肯定是测试不到的啊! 是我理解有问题吗?</p></blockquote><h3 id="运行时跟踪"><a href="#运行时跟踪" class="headerlink" title="运行时跟踪"></a>运行时跟踪</h3><p>这里介绍了py中的一个函数<code>sys.settrace(f)</code>, 这个函数在程序运行的每一行都会调用.可以用它来获取执行程序的行数\当前属于哪个函数体\当前的局部变量和参数</p><blockquote><p>当然C语言里面也有, 只不过要在编译的时候加一些参数, 然后运行之后,会产生<code>.gcov</code>的文件,里面包含了类似py中<code>sys.settrace()</code>函数捕捉到的信息</p></blockquote><p>![sys.settrace()的运行效果]](<a href="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211120205202.png">https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211120205202.png</a>)</p><h3 id="Lessons-Learned-1"><a href="#Lessons-Learned-1" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h3><ul><li>Coverage metrics are a simple and fully automated means to approximate how much functionality of a program is actually executed during a test run.</li><li>A number of coverage metrics exist, the most important ones being statement coverage and branch coverage.</li><li>In Python, it is very easy to access the program state during execution, including the currently executed code. </li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Fuzzer&quot;&gt;&lt;a href=&quot;#Fuzzer&quot; class=&quot;headerlink&quot; title=&quot;Fuzzer&quot;&gt;&lt;/a&gt;Fuzzer&lt;/h2&gt;&lt;p&gt;这是在GitHub上,找到的一个在线的书籍,讲解Fuzz的&lt;br&gt;&lt;a href=&quot;https://hub.</summary>
      
    
    
    
    <category term="毕设" scheme="https://laobameishijia.github.io/category/%E6%AF%95%E8%AE%BE/"/>
    
    
    <category term="Fuzz" scheme="https://laobameishijia.github.io/tag/Fuzz/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习-6-脚手架</title>
    <link href="https://laobameishijia.github.io/2021/11/18/vue-xue-xi-6-jiao-shou-jia/"/>
    <id>https://laobameishijia.github.io/2021/11/18/vue-xue-xi-6-jiao-shou-jia/</id>
    <published>2021-11-18T09:25:00.000Z</published>
    <updated>2021-11-30T02:55:39.469Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue脚手架"><a href="#Vue脚手架" class="headerlink" title="Vue脚手架"></a>Vue脚手架</h1><p>Vue脚手架是一个基于Vue.js进行快速开发的完整系统，是一个专门为Vue应用快速搭建繁杂项目结构的脚手架，它可以轻松地创建新的应用程序，且可用于自动生成Vue和Webpack的项目模板.</p><h2 id="快速构建项目"><a href="#快速构建项目" class="headerlink" title="快速构建项目"></a>快速构建项目</h2><h3 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h3><p>为了更好地适应复杂项目的开发,Vue.js支持以.vue为扩展名的文件来定义一个组件. 这个组件被称为单文件组件,文件中封装了组件相关代码.如 html\css\js等,最终通过Webpack编译成js文件并在浏览器中运行.</p><h3 id="单文件组件嵌套"><a href="#单文件组件嵌套" class="headerlink" title="单文件组件嵌套"></a>单文件组件嵌套</h3><p>index.html 是入口地址,可调用App.vue. 在App.vue文件中可以调用其他组件,所以App.vue被称为根组件.</p><h3 id="组件之间的信息传递"><a href="#组件之间的信息传递" class="headerlink" title="组件之间的信息传递"></a>组件之间的信息传递</h3><p>父-&gt;子: <code>v-bind</code></p><p>子-&gt;父: 子组件通过<code>$emit</code>来触发事件,父组件在子组件的自定义标签上使用v-on指令来监听子组件触发的自定义事件.</p><p>非父子: 使用一个空的Vue实例作为中央事件总线.利用这个来<code>emit</code><strong>触发事件</strong>/<code>on</code><strong>监听事件</strong></p><h2 id="前端路由"><a href="#前端路由" class="headerlink" title="前端路由"></a>前端路由</h2><p>Vue.js的路由和<code>&lt;a&gt;</code>标签实现的功能是一样的,它们都实现一个对应的跳转,只不过路由的性能更佳. a标签无论点击多少次,都会发生对应的网络请求,页面会不停地进行刷新,但是使用路由机制,单击之后,不会出现请求及页面刷新,而会直接转换到要跳转的地址,这就是使用路由的好处.</p><p>随着前后端分离开发模式的兴起,出现了前端路由的概念:前端通过Ajax获取数据后,通过一定的方式渲染到页面中,<strong>改变URL不会向服务器发送请求</strong>,同时,前端可以监听URL变化,可以解析URL并执行相应操作,而后端只负责提供API来返回数据.</p><p><em>在Vue中,通过路由跳转到不同的页面中,实际上就是加载不同的组件.</em></p><blockquote><p>这里之前的那个问题可以说得到了解决</p><p>在企业实训的阶段中, 我们采用前端Vue+后端Springboot来完成整个项目, 其中使用到了shiro作为安全框架来管理后端验证和权限访问等等. <strong>其中出现了一个问题, 就是没有办法通过shiro来对访问的url进行限制,只能限制请求数据的接口</strong></p><p>🐷🐷🐷🐷🐷🐷</p><p>可以说这跟Vue的前端路由有很大的关系, 虽然我们把项目部署到了服务器上,但是依然采用的是前端路由的方式, 相当于请求的url地址根本没有经过后端. 也就不能被shiro管理, 从而进行权限验证并拦截. 而请求数据的接口就不一样了, 它们是真正向后端发起请求的.shiro是可以接受到, 并且进行拦截的.</p><p>👍👍👍👍👍</p><p>所以出现了这种问题,而我们的解决方案也很正确. 在需要拦截的地方使用了前端路由管理的方式. 只是当时这个问题的原因没有探讨的很清楚,虽然观察到了出现问题的现象, 但是没有从原理上里面出现问题的原因. </p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue脚手架&quot;&gt;&lt;a href=&quot;#Vue脚手架&quot; class=&quot;headerlink&quot; title=&quot;Vue脚手架&quot;&gt;&lt;/a&gt;Vue脚手架&lt;/h1&gt;&lt;p&gt;Vue脚手架是一个基于Vue.js进行快速开发的完整系统，是一个专门为Vue应用快速搭建繁杂项目结构的脚手架</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Vue" scheme="https://laobameishijia.github.io/tag/Vue/"/>
    
  </entry>
  
  <entry>
    <title>财经-基金-3-评价指标</title>
    <link href="https://laobameishijia.github.io/2021/11/17/cai-jing-ji-jin-3-ping-jie-zhi-biao/"/>
    <id>https://laobameishijia.github.io/2021/11/17/cai-jing-ji-jin-3-ping-jie-zhi-biao/</id>
    <published>2021-11-17T09:25:00.000Z</published>
    <updated>2021-11-30T02:55:39.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="评价基金的方法"><a href="#评价基金的方法" class="headerlink" title="评价基金的方法"></a>评价基金的方法</h1><p>![指数基金估值方法分析汇总]](<a href="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211117201731.png">https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211117201731.png</a>)</p><h2 id="博格公式法"><a href="#博格公式法" class="headerlink" title="博格公式法"></a>博格公式法</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211117201432.png" alt="指导方法"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;评价基金的方法&quot;&gt;&lt;a href=&quot;#评价基金的方法&quot; class=&quot;headerlink&quot; title=&quot;评价基金的方法&quot;&gt;&lt;/a&gt;评价基金的方法&lt;/h1&gt;&lt;p&gt;![指数基金估值方法分析汇总]](&lt;a href=&quot;https://laoba-1304292449</summary>
      
    
    
    
    <category term="财经" scheme="https://laobameishijia.github.io/category/%E8%B4%A2%E7%BB%8F/"/>
    
    
    <category term="基金" scheme="https://laobameishijia.github.io/tag/%E5%9F%BA%E9%87%91/"/>
    
  </entry>
  
  <entry>
    <title>逆向工程核心原理-5-UPackPE文件头分析</title>
    <link href="https://laobameishijia.github.io/2021/11/17/ni-xiang-gong-cheng-he-xin-yuan-li-5-upackpe-wen-jian-tou-fen-xi/"/>
    <id>https://laobameishijia.github.io/2021/11/17/ni-xiang-gong-cheng-he-xin-yuan-li-5-upackpe-wen-jian-tou-fen-xi/</id>
    <published>2021-11-17T09:25:00.000Z</published>
    <updated>2021-11-30T02:55:39.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UPackPE文件头分析"><a href="#UPackPE文件头分析" class="headerlink" title="UPackPE文件头分析"></a>UPackPE文件头分析</h1><h2 id="分析UPack的PE头"><a href="#分析UPack的PE头" class="headerlink" title="分析UPack的PE头"></a>分析UPack的PE头</h2><h3 id="重叠文件头"><a href="#重叠文件头" class="headerlink" title="重叠文件头"></a>重叠文件头</h3><p>重叠文件头是其他压缩器经常使用的技法，借助该方法可以把MZ文件头(IMAGE_DOS_HEADER)与PE文件头(IMAGE_NT_HEADERS)巧妙的叠加在一起。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118092257.png" alt="重叠文件头的对比">  </p><p>MZ文件头(IMAGE_DOS_HEADER)中有以下两个重要成员。其余的成员对程序运行无意义</p><blockquote><p>offset(0) e_magic : Magic number = 4D5A(‘MZ’)<br>offset(3C) e_lfanew: File address of new exe header</p></blockquote><p>问题在于PE文件格式规范，IMAGE_NT_HEADERS的起始位置是”可变的”，由e_lfanew来决定。</p><p><strong>正常的情况下</strong>：<code>e_lfanew = MZ文件头大小(40) + DOS存根大小(可变：VC++下为A0) = E0</code></p><p>这并不违反规定，只是钻了规范本身的空子</p><h3 id="IMAGE-FILE-HEADER-SizeOfOptionalHeader"><a href="#IMAGE-FILE-HEADER-SizeOfOptionalHeader" class="headerlink" title="IMAGE_FILE_HEADER.SizeOfOptionalHeader"></a>IMAGE_FILE_HEADER.SizeOfOptionalHeader</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118093808.png" alt="正常与修改后的对比"></p><p>从PE头文件来看，<strong>IMAGE_OPTIONAL_HEADER</strong>的起始偏移加上<strong>SizeOfOptionalHeader</strong>的值后才是<strong>IMAGE_SECTION_HEADER</strong>。增大<strong>SizeOfOptionalHeader</strong>以后，就相当于在<strong>IMAGE_OPTIONAL_HEADER</strong>与<strong>IMAGE_SECTION_HEADER</strong>之间增加了额外的空间，Upack就在这个区域增加解压代码。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118095011.png" alt="简要原理"></p><h2 id="重叠节区"><a href="#重叠节区" class="headerlink" title="重叠节区"></a>重叠节区</h2><p>Upack重叠PE节区与文件头</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118200644.png" alt="重叠示意图"></p><p>❓❓❓❓看的不是很明白,这里面尤其第一\第二节区, 它们确实是被重叠到Header上面了,但是内容上是怎么重叠的呢?肯定要删去一些东西把~~~</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118200732.png" alt="解压后的第一个节区"></p><p>映射的话, 应该不算很难, 更改加载的虚拟地址就行了.</p><h2 id="RVA-to-RAW"><a href="#RVA-to-RAW" class="headerlink" title="RVA to RAW"></a>RVA to RAW</h2><p>利用了PE装载器发现第一个节区的PointerToRawData(10)不是FileAlignment(200)的整数倍时,它会强制将其识别为整数倍.(该情况下为0); 这样做的话, Upack文件就可以正常运行, 但是很多PE相关使用程序就会发生错误.</p><h2 id="导入表"><a href="#导入表" class="headerlink" title="导入表"></a>导入表</h2><p>这个emm,也没看懂</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118202538.png" alt="导入表的地址"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118202409.png" alt="第三个节区地址"></p><p>按照上面的将RVA-&gt;RAW</p><blockquote><p>RAW = RVA (271EE) - VirtualOffset(27000) + RawOffset(0)  = 1EE<br>注意: 3rd Section的RawOffset值不是10,而会强制变换为0</p></blockquote><p>书上说该处就是Upack节区隐藏玄机的地方</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118203940.png" alt="文件偏移IEE--第一个结构体"></p><p>上面所选区域就是IMAGE_IMPORT_DESCRIPTOR结构体组成的数组, 偏移IEE~201为第一个结构体, 其后既不是第二个结构体, 也不是NULL结构体</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118203752.png" alt="3rd节区映射到内存"></p><hr><p>❓❓❓❓ 为什么偏移200是第三个节区的结束呢? 之前的节区表里面, 写的是<code>RawSize为 1F0</code></p><hr><p>从文件看导入表好像是坏了,但是在加载到内存里面之后,看起来又是好的. </p><h2 id="导入地址表"><a href="#导入地址表" class="headerlink" title="导入地址表"></a>导入地址表</h2><p>通过上面结构体的数据, 得到</p><table><thead><tr><th>偏移</th><th>成员</th><th>RVA</th></tr></thead><tbody><tr><td>1EE</td><td>OriginalFistThunk(INT)</td><td>0</td></tr><tr><td>1FA</td><td>Name</td><td>2</td></tr><tr><td>1FE</td><td>FirstThunk(IAT)</td><td>11E8</td></tr></tbody></table><p>Name 的RVA是2, 它属于Header区域,因为第一个节区是从RVA 1000开始的.</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118210327.png" alt="文件偏移2"></p><p>😱😱😱这样看的话,好像Upack把数据重复利用了?! 既可以是Kernel32.dll, 又可以代表其他含义?</p><p>FirstThunk(IAT) 转换为RAW是<code>IE8</code></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118210552.png" alt="IE8"></p><p>这部分区域就是IAT域, 同时也作为INT来使用. 也就是说该处是 <code>Name Pointer(RVA)</code>数组 RVA 28/BE, 其结束是NULL. RVA位置上存放着导入函数的 <code>Ordinal+名称字符串</code></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118211013.png" alt="RVA 28"></p><p>Q: 这样的话,导入函数最终的地址放到哪里去了?? </p><p>A: 这只是压缩过的代码,最后还得解压缩,应该会回复成正常的样子的…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;UPackPE文件头分析&quot;&gt;&lt;a href=&quot;#UPackPE文件头分析&quot; class=&quot;headerlink&quot; title=&quot;UPackPE文件头分析&quot;&gt;&lt;/a&gt;UPackPE文件头分析&lt;/h1&gt;&lt;h2 id=&quot;分析UPack的PE头&quot;&gt;&lt;a href=&quot;#分析</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="逆向工程核心原理" scheme="https://laobameishijia.github.io/tag/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习-5-过渡和动画</title>
    <link href="https://laobameishijia.github.io/2021/11/16/vue-xue-xi-5-guo-du-he-dong-hua/"/>
    <id>https://laobameishijia.github.io/2021/11/16/vue-xue-xi-5-guo-du-he-dong-hua/</id>
    <published>2021-11-16T09:25:00.000Z</published>
    <updated>2021-11-30T02:55:39.469Z</updated>
    
    <content type="html"><![CDATA[<h1 id="过渡和动画"><a href="#过渡和动画" class="headerlink" title="过渡和动画"></a>过渡和动画</h1><p>Vue.js过渡可以使页面元素在出现和消失时实现多种过渡效果。Vue在插入、更新或者移除DOM时，提供了多种方式的应用过渡效果。开发者可以使用transition组件,结合CSS的动画Animation、过渡Transition或者js来操作DOM使元素动起来。</p><h2 id="CSS过渡"><a href="#CSS过渡" class="headerlink" title="CSS过渡"></a>CSS过渡</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116183654.png" alt="过渡实现过程"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">   <span class="token selector">.fade-enter, .fade-leave-to</span> <span class="token punctuation">&#123;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0  <span class="token punctuation">&#125;</span>  <span class="token selector">.fade-enter-active, .fade-leave-active</span> <span class="token punctuation">&#123;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> opacity .5s  <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show = !show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    切换按钮   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fade<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../js/vue.js<span class="token punctuation">"</span></span><span class="token attr-name">"</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">   <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span> <span class="token string">'#demo'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>     show<span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CSS动画"><a href="#CSS动画" class="headerlink" title="CSS动画"></a>CSS动画</h2><p>CSS动画的用法与CSS过渡的用法相同，其区别是，在CSS动画中，v-enter类名在节点插入DOM后不会立即删除，而是在animationend事件触发时删除。</p><blockquote><p>这个看的不是很懂，后面用到再说吧</p></blockquote><h2 id="JS过渡"><a href="#JS过渡" class="headerlink" title="JS过渡"></a>JS过渡</h2><p>Js过渡是使用javascript钩子函数实现的过渡效果，这些钩子函数可以结合CSS的transition/animations使用，也可以单独使用。</p><p>感觉用js这个从结构上面看的话，就清楚很多了</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fade<span class="token punctuation">"</span></span> <span class="token attr-name">@before-enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beforeEnter<span class="token punctuation">"</span></span> <span class="token attr-name">@enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enter<span class="token punctuation">"</span></span> <span class="token attr-name">@after-enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>afterEnter<span class="token punctuation">"</span></span> <span class="token attr-name">@before-leave</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beforeLeave<span class="token punctuation">"</span></span> <span class="token attr-name">@leave</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>leave<span class="token punctuation">"</span></span> <span class="token attr-name">@after-leave</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>afterLeave<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116185453.png" alt="控制台输出"></p><h2 id="案例–新增列表项的动画效果"><a href="#案例–新增列表项的动画效果" class="headerlink" title="案例–新增列表项的动画效果"></a>案例–新增列表项的动画效果</h2><p>具体的细节和效果用到的时候再去官网看就行了，还有很多细节和用法，就不在这赘述了。。。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">li</span> <span class="token punctuation">&#123;</span>        <span class="token property">border</span><span class="token punctuation">:</span> 1px dashed #999<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>        <span class="token property">line-height</span><span class="token punctuation">:</span> 35px<span class="token punctuation">;</span>        <span class="token property">padding-left</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">li:hover</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> cornflowerblue<span class="token punctuation">;</span>        <span class="token property">transition</span><span class="token punctuation">:</span> all 1s ease<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.v-enter,    .v-leave-to</span> <span class="token punctuation">&#123;</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>80px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.v-enter-active,    .v-leave-active</span> <span class="token punctuation">&#123;</span>        <span class="token property">transition</span><span class="token punctuation">:</span> all 0.5s ease<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 下面的 .v-move 和 .v-leave-active 配合使用，能够实现列表后续的元素，渐渐地飘上来的结果 */</span>    <span class="token selector">.v-move</span> <span class="token punctuation">&#123;</span>        <span class="token property">transition</span><span class="token punctuation">:</span> all 0.5s ease<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.v-leave-active</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>                学号:                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>                姓名:                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>添加<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 在实现列表过渡的时候，如果需要过渡的元素，是通过 v-for 循环渲染出来的，不能使用 transition 包裹，需要使用 transitionGroup --></span>            <span class="token comment">&lt;!-- 如果要为 v-for 循环创建的元素设置动画，必须为每一个元素设置：key 属性 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition-group</span> <span class="token attr-name">appear</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 删除需要传入i --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, i) in list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>del(i)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    &#123;&#123; item.id &#125;&#125; --- &#123;&#123; item.name &#125;&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition-group</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../js/vue.js<span class="token punctuation">"</span></span><span class="token attr-name">"</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            id<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            name<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span><span class="token comment">//这两个是为添加学号和姓名而设置的</span>            list<span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'张三'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'李四'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'王五'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'赵四'</span> <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">""</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function">del</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 从 i 的地方删，删除一个</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;过渡和动画&quot;&gt;&lt;a href=&quot;#过渡和动画&quot; class=&quot;headerlink&quot; title=&quot;过渡和动画&quot;&gt;&lt;/a&gt;过渡和动画&lt;/h1&gt;&lt;p&gt;Vue.js过渡可以使页面元素在出现和消失时实现多种过渡效果。Vue在插入、更新或者移除DOM时，提供了多种方式的应</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Vue" scheme="https://laobameishijia.github.io/tag/Vue/"/>
    
  </entry>
  
  <entry>
    <title>阅读清单</title>
    <link href="https://laobameishijia.github.io/2021/11/16/ge-lei-shu-ji-yue-du-qing-dan/"/>
    <id>https://laobameishijia.github.io/2021/11/16/ge-lei-shu-ji-yue-du-qing-dan/</id>
    <published>2021-11-16T09:25:00.000Z</published>
    <updated>2021-11-30T02:55:39.469Z</updated>
    
    <content type="html"><![CDATA[<h1 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h1><h2 id="财经类"><a href="#财经类" class="headerlink" title="财经类"></a>财经类</h2><ul><li><p><input checked="" disabled="" type="checkbox">  货币战争4 战国时代 宋鸿兵</p><p>  <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116202829.png" alt="货币战争4 战国时代"></p><blockquote><p>从国际角度出发去阐述国际金融格局和现象，感觉需要很多的金融背景知识。印象比较深刻地是作者对于华为公司的预言，还有一些关于其他国家和我们国家经济政策的见地。比较深奥，还不是本人理解的。。。👻</p></blockquote></li><li><p><input checked="" disabled="" type="checkbox">  解读基金: 我的投资观与实践(修订版) 季凯帆</p><p>  <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116201850.png" alt="解读基金: 我的投资观与实践(修订版)"></p><blockquote><p>这本书主要是将作者本人是如何进行投资的，风险控制/基金组合/投资比例等等，主要是对投资基金的基础知识和常识进行了梳理。感觉我看完之后也没有记住多少东西。🙂</p></blockquote></li><li><p><input checked="" disabled="" type="checkbox">  货币 b站视频</p><p>  <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116203328.png" alt="货币"></p><blockquote><p>从历史的角度上分析，货币的由来/作用，对人类社会产生的影响，当今社会面临的货币问题等等。也不算很深奥。但是好像也没有说记住很多东西。。😔</p></blockquote></li><li><p><input disabled="" type="checkbox">  指数基金投资指南 银行螺丝钉</p><p>  <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116202410.png" alt="指数基金投资指南"></p><blockquote><p>我觉得这本书写的是比较清楚的，最起码在思路上比较明了。先给你一些建议，然后解释为什么选择指数基金？常见的指数基金的种类。之后是怎么挑选，采用什么方式买/以及用多少钱买等问题</p></blockquote></li></ul><h2 id="专业类"><a href="#专业类" class="headerlink" title="专业类"></a>专业类</h2><ul><li><p><input checked="" disabled="" type="checkbox">  汇编语言 王爽</p><p>  <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116203804.png" alt="汇编语言"></p><blockquote><p>这本书真的是写的非常好了，我一个不怎么看的下去的人，都是把整本书的练习和实验做完了。感觉收获真的是非常大，也解决了我之前在上课的时候产生的很多疑问。非常nice！🐮</p></blockquote></li><li><p><input disabled="" type="checkbox">  程序是怎样运行的</p><p>  <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211117185605.png" alt="程序是怎样运行的"></p><blockquote><p>这个我觉得收获也是蛮大的，写的也是比较通俗易懂。</p></blockquote></li><li><p><input disabled="" type="checkbox">  逆向工程 核心原理 李承远</p><p>  <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116204238.png" alt="逆向工程 核心原理"></p><blockquote><p>本书里面的实验和讲解也是比较清楚的。思想很好，什么弄不懂，就边学边弄，慢慢就会了~~~😁</p></blockquote></li><li><p><input disabled="" type="checkbox">  Vue应用程序开发 </p><blockquote><p>这不放图片了，反正网上一大堆。也基本上就是系统的浏览一下，好对Vue.js有个整体清晰地认识。</p></blockquote></li><li><p><input disabled="" type="checkbox">  Vue.js+Node.js全栈开发实践</p><blockquote><p>同上</p></blockquote></li></ul><h2 id="通识类"><a href="#通识类" class="headerlink" title="通识类"></a>通识类</h2><ul><li><input disabled="" type="checkbox"> 零基础通识知识笔记 山形浩生  没找到图就不放了。。。<blockquote><p>写的比较有意思，上面的插画很通俗易懂。就是在这上面知道了商汤公司—做Al图象识别的。后来，还在和大佬的谈话中听到了，他搞到了这个公司在上海总部的实习。~~~ 差距啊🚀</p></blockquote></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;书籍&quot;&gt;&lt;a href=&quot;#书籍&quot; class=&quot;headerlink&quot; title=&quot;书籍&quot;&gt;&lt;/a&gt;书籍&lt;/h1&gt;&lt;h2 id=&quot;财经类&quot;&gt;&lt;a href=&quot;#财经类&quot; class=&quot;headerlink&quot; title=&quot;财经类&quot;&gt;&lt;/a&gt;财经类&lt;/h2&gt;&lt;u</summary>
      
    
    
    
    <category term="计划" scheme="https://laobameishijia.github.io/category/%E8%AE%A1%E5%88%92/"/>
    
    
    <category term="阅读" scheme="https://laobameishijia.github.io/tag/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
</feed>
