<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>老叭美食家</title>
  
  <subtitle>永远热爱生活</subtitle>
  <link href="https://laobameishijia.github.io/atom.xml" rel="self"/>
  
  <link href="https://laobameishijia.github.io/"/>
  <updated>2021-11-09T01:50:46.284Z</updated>
  <id>https://laobameishijia.github.io/</id>
  
  <author>
    <name>老叭美食家</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue学习-2-Vue内置指令</title>
    <link href="https://laobameishijia.github.io/2021/11/08/vue-xue-xi-2-vue-nei-zhi-zhi-ling/"/>
    <id>https://laobameishijia.github.io/2021/11/08/vue-xue-xi-2-vue-nei-zhi-zhi-ling/</id>
    <published>2021-11-08T09:25:00.000Z</published>
    <updated>2021-11-09T01:50:46.284Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-js内置指令"><a href="#Vue-js内置指令" class="headerlink" title="Vue.js内置指令"></a>Vue.js内置指令</h1><ul><li><strong>基本指令</strong> <code>v-text</code>,<code>v-html</code>,<code>v-cloak</code>,<code>v-once</code>,<code>v-if</code>,<code>v-else</code>,<code>v-show</code>,<code>v-on</code>,<code>v-for</code>、数组更新</li><li><strong>v-bind指令</strong> 当数据变化时，可以对属性进行重新渲染。</li><li><strong>v-model指令</strong> 本质是监听用户的输入事件，从而更新数据。它会将Vue实例中的数据作为数据来源，当输入事件发生时，它会实时更新Vue实例中的数据，从而实现数据的双向绑定。</li></ul><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><blockquote><p>实现一个简单的购物车</p></blockquote><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211109094727.png" alt="效果"></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这个就是算个总和，没有什么难度。不过有一点需要注意。就是这个v-for的循环渲染的问题</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211109094823.png" alt="v-for循环渲染"></p><p>要么写成这样 <code>v-for=&quot;(item,index) in shopItems&quot;</code>要么写成<code>v-for=&quot;item in shopItems&quot;</code></p><p>写成 <code>v-for=&quot;(item) in shopItems&quot;</code>是没办法渲染的。 ❌</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/vue/2.4.2/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/css/bootstrap.min.css<span class="token punctuation">"</span></span>        <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sha384-zCbKRCUGaJDkqS1kPbPd7TveP5iyJE0EjAuZQTgFLD2ylzuqKfdKlfG/eSrtxUkn<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vue_det<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group list-group-horizontal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item  flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>序号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item  flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>商品名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item  flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>商品单价<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item  flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>购买数量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item  flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>操作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item,index) in shopItems<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group list-group-horizontal-sm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;item.id&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;item.name&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;item.price&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addone(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                &#123;&#123;item.number&#125;&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reduceone(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteone(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        总计:&#123;&#123;allprice&#125;&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js<span class="token punctuation">"</span></span>        <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj<span class="token punctuation">"</span></span>        <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/js/bootstrap.bundle.min.js<span class="token punctuation">"</span></span>        <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sha384-fQybjgWLrvvRgtW6bFlB7jaZrFsaBXjsOMm/tB9LTS58ONXgqbR9W8oWht/amnpF<span class="token punctuation">"</span></span>        <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            el<span class="token operator">:</span> <span class="token string">'#vue_det'</span><span class="token punctuation">,</span>            data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                shopItems<span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'苹果'</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> number<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'2'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'橘子'</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> number<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'3'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'香蕉'</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span> number<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'4'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'橙子'</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span> number<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                allprice<span class="token operator">:</span> <span class="token number">0</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token function">addone</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>allprice <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allprice <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>price                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token function">reduceone</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>number <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>number <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>allprice <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allprice <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>price                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"该商品数量已经为零！"</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token function">deleteone</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//价格的变化,要在删除这个选项之前</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>allprice <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allprice <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>price<span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>number                    <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue-js内置指令&quot;&gt;&lt;a href=&quot;#Vue-js内置指令&quot; class=&quot;headerlink&quot; title=&quot;Vue.js内置指令&quot;&gt;&lt;/a&gt;Vue.js内置指令&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基本指令&lt;/strong&gt; &lt;code&gt;v-te</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Vue" scheme="https://laobameishijia.github.io/tag/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习-1-Vue入门</title>
    <link href="https://laobameishijia.github.io/2021/11/06/vue-xue-xi-1-vue-ru-men/"/>
    <id>https://laobameishijia.github.io/2021/11/06/vue-xue-xi-1-vue-ru-men/</id>
    <published>2021-11-06T09:25:00.000Z</published>
    <updated>2021-11-09T01:50:46.284Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一个Vue-js应用"><a href="#第一个Vue-js应用" class="headerlink" title="第一个Vue.js应用"></a>第一个Vue.js应用</h1><p>有些东西没必要都详细的列出来，列个清单知道学了啥。不会再去查就行。</p><ul><li><strong>模板</strong> 可以渲染指定的内容到挂载的位置</li><li><strong>数据</strong> 双向绑定，数据发生变化。视图也跟着发生变化</li><li><strong>方法</strong> methods中定义 <code>&#123;&#123;say()&#125;&#125;</code>引用</li><li><strong>观察|监听</strong> watch选项可以监听数据变化</li><li><strong>数据绑定</strong> 插值<code>&#123;&#123;&#125;&#125;`、表达式绑定`&#123;&#123;complete?'完成':'未完成'&#125;&#125;</code>、双向数据绑定<code>v-model</code></li><li><strong>计算属性</strong> vue实例中的一个选项</li><li><strong>生命周期</strong> 看起来是跟浏览器渲染的顺序过程有关系</li></ul><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><blockquote><p>实现一个简单的计算器</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>主要就是数据结构运算思路,由前缀表达式转换为后缀表达式，在通过后缀表达式进行运算。</p><p>因为是简单的计算器嘛，就十以内的加减乘除(<strong>不带括号的那种</strong>)。😊😊😊</p><p>参考的博客<a href="http://blog.csdn.net/antineutrino/article/details/6763722">http://blog.csdn.net/antineutrino/article/details/6763722</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>例子 1+2*3+1</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> el<span class="token operator">:</span> <span class="token string">'#vue_det'</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  one<span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>  equation<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  result<span class="token operator">:</span> <span class="token string">"hello"</span><span class="token punctuation">,</span>  <span class="token comment">// 后缀表达式</span>  op<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//运算符栈</span>  nm<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//操作数栈</span>  <span class="token comment">// 判断运算符优先级</span>  <span class="token function-variable function">priorHigher</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token string">'+'</span> <span class="token operator">||</span> a <span class="token operator">===</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>b <span class="token operator">===</span> <span class="token string">'*'</span> <span class="token operator">||</span> b <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">number</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">var</span> str <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>equation <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>equation <span class="token operator">+</span> str<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">operator</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">var</span> str <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>equation <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>equation <span class="token operator">+</span> str<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 判断运算符优先级</span>  <span class="token function-variable function">priorHigher</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token string">'+'</span> <span class="token operator">||</span> a <span class="token operator">===</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>b <span class="token operator">===</span> <span class="token string">'*'</span> <span class="token operator">||</span> b <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 中缀表达式转后缀</span>  <span class="token function-variable function">calculate</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//初始化</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>equation<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    tag <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token comment">//如果是数字就直接压栈</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>equation<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>equation<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//如果是运算符</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>tag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//运算符栈中为空，就直接压</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>equation<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>       tag <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>       <span class="token comment">//优先级比栈顶的高，那就压栈</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">priorHigher</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>equation<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>equation<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        tag <span class="token operator">=</span> <span class="token boolean">true</span>       <span class="token punctuation">&#125;</span>       <span class="token comment">//否则，弹出栈顶压入nm栈，再进行循环</span>       <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">var</span> fortag <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span>length   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fortag<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span>   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">)</span><span class="token comment">//简单的计算器给弄好了 Yes good</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//如果是数字就直接压栈</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//如果遇到了运算符,弹出栈顶的两个元素做对应的运算，再把结果压进去</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>     <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">'+'</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token operator">+</span>a<span class="token punctuation">)</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token operator">-</span>a<span class="token punctuation">)</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token operator">*</span>a<span class="token punctuation">)</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token operator">/</span>a<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一个Vue-js应用&quot;&gt;&lt;a href=&quot;#第一个Vue-js应用&quot; class=&quot;headerlink&quot; title=&quot;第一个Vue.js应用&quot;&gt;&lt;/a&gt;第一个Vue.js应用&lt;/h1&gt;&lt;p&gt;有些东西没必要都详细的列出来，列个清单知道学了啥。不会再去查就行。&lt;</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Vue" scheme="https://laobameishijia.github.io/tag/Vue/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言学习-课程设计2</title>
    <link href="https://laobameishijia.github.io/2021/11/04/hui-bian-yu-yan-xue-xi-ke-cheng-she-ji-2/"/>
    <id>https://laobameishijia.github.io/2021/11/04/hui-bian-yu-yan-xue-xi-ke-cheng-she-ji-2/</id>
    <published>2021-11-04T09:25:00.000Z</published>
    <updated>2021-11-09T01:50:46.284Z</updated>
    
    <content type="html"><![CDATA[<h1 id="课程设计2"><a href="#课程设计2" class="headerlink" title="课程设计2"></a>课程设计2</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>具体的描述就不再打一遍了</p><blockquote><p>该程序的功能如下:</p><ol><li>列出功能选项，让用户通过键盘进行选择,界面如下。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211104103229.png" alt="实现页面"></li></ol></blockquote><blockquote><ol start="2"><li>用户输入1, 重新启动计算机(提示FFFF:0)</li><li>用户输入2, 引导现有的操作系统</li><li>用户输入3, 执行动态显示当前日期、时间的程序。格式: 年/月/日 时:分:秒 F1改变 Esc键后，返回主菜单</li><li>用户输入4, 更改当前的日期、时间。返回主选单。</li></ol></blockquote><h2 id="遇到的问题总结"><a href="#遇到的问题总结" class="headerlink" title="遇到的问题总结"></a>遇到的问题总结</h2><p>这里面其实很多问题本可以避免，但是在看书的时候，并没有注意到这些东西，或者说注意到了，可没有正确的理解。课程设计正如书上面说的它用到了我们所学到的所有技术，对于我们的整个学习过程是具有总结性的。</p><p>这些问题在我写程序的时候，感觉很是问题，很有总结的必要。写完之后，倒是感觉简单了一些。</p><ol><li><p><code>ds:[offset A]</code> 和 <code>offset A</code> 的区别</p><p> 前面<code>ds:[offset A]</code>取的是具体地址里面的值，<code>offset A </code>取得是偏移地址。在你写的时候，一定搞清楚，你到底是想要<code>字符串的首地址</code>还是<code>字符串首地址那个字符</code></p></li><li><p>数据/代码结构的设置问题,设置怎样的数据结构会使程序结构更清晰更明了</p><p>关于程序的逻辑具体就是把每一个菜单的总体逻辑放到一起，实现的细节写成子程序。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211104110930.png" alt="菜单4的主体逻辑"></p></li><li><p>多余代码废话的问题，很多程序写的很多余</p><p>老毛病了，这个东西在以后也得多练。</p></li><li><p>call指令和jmp指令\还有那些条件跳转的指令</p><p>关于这个我有一点问题, 条件转移只有-127-128的范围，如果我想实现按照条件执行不同的函数,那我就得先条件跳转到一个子程序的地方。然后再call,执行完再jmp回来。</p><p>有没有那种可以实现可以根据条件来call的, 但是这样一想的话，好像就多余了。因为依据现有的条件就可以实现，加上的话是不是就多余了呢。</p></li><li><p>寻址问题 ds:[bx+si]用数学的表达到底是什么样的，和你的写的是不是一样</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211104110024.png" alt="data"></p><p>本来是想着把ds弄成7E00,想着就不用在偏移量上面+7E00H了,结果发现自己是真脑残。正常的寻址过程是 <code>段寄存器*16+偏移地址 用数学化的表示是 ax=ds*16+bx</code>憨逼的你居然认为可以通过把ds设置为7E00H达到不用+7E00h的效果—真是太脑残了</p></li><li><p>子程序名称前后不一致</p><p>第一开始并没有直接设计到软盘的操作，就是先实现页面和具体的功能。后面加上软驱的操作的时候，有些子程序的名字不一样了。也没改。就导致效果出不来，还得debug好长时间。</p></li><li><p>环境问题</p><p>关于环境实在是人人都不一样,版本啊啥的，很容易就出现怎么弄，都弄不好的情况，但是总归来说还是不算太难。耐下心来取弄就行了。</p><p>我看有的<a href="https://blog.csdn.net/apollon_krj/article/details/71908442">博主</a>是直接用的winxp,但是我试过之后不行。于是我直接装了一个ms-dos的虚拟机，然后在xp系统中把汇编程序写进软驱中，再把软驱连接到ms-dos系统中，启动ms-dos系统。观察效果。</p><p>在这里还是感谢一下博主，虽然在具体的问题上面还是得自己解决。但是最起码程序是可以运行的，让我看到了具体的效果。</p></li></ol><h2 id="编程上面的提升"><a href="#编程上面的提升" class="headerlink" title="编程上面的提升"></a>编程上面的提升</h2><ol><li><p>根据功能号计算对应子程序在table中的偏移量。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211104145727.png" alt="调用不同的功能"></p></li><li><p>对于不规则的数据调用，可以先把要读取的不规则位置存放下来，用的时候按存放的顺序进行读取。这样就变不规则为规则了。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211104150011.png" alt="变不规则为规则"></p></li><li><p>如果觉得一个功能实现起来有些矛盾，可以去看看所有与之有关的程序。也许可以通过改已经实现的功能来解决。</p><p>具体到这里就是:<strong>设计更改颜色，并没有在显示的地方进行设置。这样就避开了改变颜色之后，显示的程序又把颜色给覆盖掉的问题</strong></p></li><li><p>关于debug的时候，有的时候会出现在运行循环之后，cpu那边的代码就给变化了</p><pre><code> 其实造成这种奇奇怪怪原因的无非有以下几种情况： 1.你在loop循环的过程中没有控制好临界条件 2.在loop循环的过程中,最起码在判断cx的值的时候，cx的值发生了改变 3.没有写对要写入的地址---地址搞错了等等 4.累加变化的寄存器的值，累加的不对造成越界或者写错了</code></pre></li></ol><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/1.gif" alt="1"></p><h3 id="引导现有的系统"><a href="#引导现有的系统" class="headerlink" title="引导现有的系统"></a>引导现有的系统</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/2.gif" alt="2"></p><h3 id="显示时间改变颜色返回"><a href="#显示时间改变颜色返回" class="headerlink" title="显示时间改变颜色返回"></a>显示时间改变颜色返回</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/2.gif" alt="3"></p><h3 id="设置时间"><a href="#设置时间" class="headerlink" title="设置时间"></a>设置时间</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/4.gif" alt="4"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:code,ds:data,ss:stackdata segment    db 256 dup(0)data endsstack segment    db 128 dup(0)stack endscode segmentstart:    mov ax,data    mov ds,ax        mov ax,stack    mov ss,ax    mov sp,128    mov ax,offset boot_end - offset boot    call lead_to_softdisk;将引导程序写入软盘    call boot_to_softdisk;将系统程序写入软盘    mov ax,4c00h    int 21h;将系统程序从软盘读入内存lead:    ;设置栈    mov bx,0    mov ss,bx    mov sp,7C00H    ;将系统程序从软盘读入内存    mov ax,0    mov es,ax    mov bx,7E00h    ;int13入口参数 ah 2读  3写    ;al 磁盘数| ch磁道号|cl扇区号|dh磁头号|dl驱动器号 0软驱A 80h盘C es：bx指向写入磁盘的数据    mov al,2    mov ch,0    mov cl,2    mov dh,0    mov dl,0    mov ah,2    int 13h    ;转到7E00H处执行    mov ax,0    push ax    mov ax,7E00h    push ax    retfret    lead_to_softdisk:    push cs    pop es    mov bx,offset lead    mov al,1    mov ch,0    mov cl,1    mov dh,0    mov dl,0    mov ah,3    int 13hretboot_to_softdisk:    push cs    pop es    mov bx,offset boot    mov al,2    mov ch,0    mov cl,2    mov dh,0    mov dl,0    mov ah,3    int 13hretboot:    jmp bootstart;*****************************************************************************    MENU0 db 'Welcome to system!',0    MENU1 db '1) reset pc',0      ;重新启动计算机    MENU2 db '2) start system',0  ;引导现有的操作系统    MENU3 db '3) clock',0         ;显示时间    MENU4 db '4) set clock',0     ;设置时间    TIME  db 'YY/MM/DD hh:mm:ss',0;时间显示格式    SETTIMENOTE db 'Reset the time in the following format: YY/MM/DD hh:mm:ss. eg.21/11/2 10:49:50. Press Enter to end!',0;设置时间的提示    SETTIME db '############',0;存放设置的时间    CMOS  db 9,8,7,4,2,0          ;CMOS中日期格式的存放位置    MENU    dw offset MENU0 - offset boot + 7E00h            dw offset MENU1 - offset boot + 7E00h            dw offset MENU2 - offset boot + 7E00h            dw offset MENU3 - offset boot + 7E00h            dw offset MENU4  -offset boot + 7E00h            dw 0            TABLE_FUNTION   dw offset m1-offset boot + 7E00h                    dw offset m2-offset boot + 7E00h                    dw offset m3-offset boot + 7E00h                    dw offset m4-offset boot + 7E00h;*****************************************************************************bootstart:    mov ax,0;本来是想着把ds弄成7E00,想着就不用在偏移量上面+7E00H了,结果发现自己是真脑残    mov ds,ax;正常的寻址过程是 段寄存器*16+偏移地址 用数学化的表示是 ax=ds*16+bx            ;憨逼的你居然认为可以通过把ds设置为7E00H达到不用+7E00h的效果---真是太脑残了    call clearscreen    call showmenu    call keyboardinput        cmp ah,02    jb bootstart    cmp ah,05    ja bootstart        mov bx,0    sub al,31H    mov bl,al    add bx,bx    call word ptr ds:[offset TABLE_FUNTION - offset boot + bx + 7E00h];子程序都存放到表里,按照偏移量来调用    jmp bootstart;保证一直在循环里面;==============================================================;菜单一         重新启动计算机m1:    pushf    mov ax,0FFFFH    push ax    mov ax,0    push axiret;==============================================================;菜单二         引导现有的操作系统m2:    mov bx,0            ;将C盘(驱动80H)的0面0道0扇区复制到0:7C00H处    mov es,bx    mov bx,7C00H    mov al,1    ;1个扇区    mov ah,2    ;读    mov ch,0    ;0磁道    mov cl,1    ;1扇区    mov dh,0    ;0面    mov dl,80H  ;C盘驱动    int 13H     call clearscreen;清屏    mov bx,0            ;从0:7C00开始执行，启动引导操作系统    push bx     mov bx,7C00H    push bx    retfret;==============================================================;菜单三         显示时间m3:     call clearscreen;清屏    m3_all_s:        ;------这个地方还真挺离谱的，我把m3_gettime写到循环里就不行,写成子程序反而行了。。        ;------至于为什么不行，我不清楚？？下午看一下---又莫名其妙的可以了，我真服了        ;------这种思维也挺重要的，菜单只显示菜单的基本逻辑，其他的全部弄到子程中。方便修改。思路也清楚        ;获取时间        call m3_gettime        ;显示时间        mov ax,0B800h        mov es,ax        mov si,10*160 + 30*2        mov bx,0        mov ds,bx                                       ;这种方式只是赋予了  TIME里面的YY        ; mov bx,ds:[offset TIME - offset boot + 7E00h];仔细看看这种方式到底赋给bx的是什么,我知道你想给TIME的地址，但是        mov bx,offset TIME - offset boot + 7E00h;真正应该这样写。真正要的是地址而不是值        call showmenuline        ;获取键盘输入        ;------- call keyboardinput 这里使用这个获取键盘输入的话--也就是获取按键是个阻塞的过程，时间的显示会卡住        in al,60h        cmp al,01;Esc返回主页面        je m3_backtostart        cmp al,3BH;F1返回改变颜色        je F1_m3_changecolor                ;-------该是je的地方不能用call，否则程序执行就乱跳了。汇编中难道就没有那种根据条件来call的指令？        ;-------就非得是je完之后再call，call完之后再跳回来？？    jmp m3_all_s        m3_backtostart:        ret    F1_m3_changecolor:        call m3_changecolor        jmp m3_all_s;名称: m3_changecolor;功能: 改变屏幕的颜色;参数: 无;返回: 无;应用举例: m3_changecolor:    push bx    push es    push cx    mov bx,0B800H    mov es,bx    mov bx,1    mov cx,2000    m3_changecolorloop:        inc byte ptr es:[bx]        add bx,2    loop m3_changecolorloop    pop cx    pop es    pop bxret;名称: m3_gettime;功能: 从CMOS中读取时间，将时间按照格式写入data段中的TIME中;参数: 无;返回: 无;应用举例: 21/11/1 13:30:50m3_gettime:    push si    push cx    push bx    ;往ds:TIME中写入    mov si,0    mov bx,0    mov cx,6    m3_gettime_s:        push cx        mov al,ds:[offset CMOS- offset boot + si + 7E00h]        out 70h,al        in al,71h        mov ah,al        mov cl,4         ;------造成代码在循环之后发生改变的，是这里改变了cx的值        ;------其实造成这种奇奇怪怪原因的无非有以下几种情况：        ;------1.你在loop循环的过程中没有控制好临界条件        ;------2.在loop循环的过程中,最起码在判断cx的值的时候，cx的值发生了改变        ;------3.没有写对要写入的地址---地址搞错了等等        ;------4.累加变化的寄存器的值，累加的不对        shr ah,cl;右移四位，取高四位        and al,00001111b;取低四位                add ah,30h        add al,30h        mov ds:[offset TIME - offset boot + bx + 7E00h],ah        mov ds:[offset TIME - offset boot + bx + 1 + 7E00h],al                add bx,3        add si,1        pop cx    loop m3_gettime_s        pop bx    pop cx    pop siret;==============================================================;菜单四         设置时间---回车结束m4:    push bx    push dx    push cx    ;清屏    call clearscreen    ;显示提示    mov ax,0b800h    mov es,ax    mov si,10*160    mov bx,0    mov ds,bx    mov bx,offset SETTIMENOTE- offset boot + 7E00h    call showmenuline        ;放置光标    mov ah,2    mov bh,0    mov dh,13    mov dl,30    int 10h    ;接受输入,设置CMOS时间    call getstr    call settimetocmos    ; 光说不返回到主菜单呢,你看看哪里有start？！ 早就改成bootstart了    ; ;返回主菜单    ; m4_backtostart:    ;     call start    pop cx    pop dx    pop bxret;==============================================================;将设置好的时间写入CMOS中settimetocmos:    push bx    push cx    push dx    push si    mov si,offset SETTIME- offset boot + 7E00h    mov cx,6    mov bx,0    mov ds,bx    settimetocmos_s:        push cx        mov word ptr dx,[si]        sub dx,3030H        mov cl,4        shl dl,cl        and dh,00001111B        or dl,dh;从两个ACII码---16位转换成BCD码--8位        mov al,ds:[offset CMOS- offset boot + bx + 7E00h]        out 70H,al    ;将al送入地址端口70h        mov al,dl        out 71H,al ;    将数据写入CMOSRAM时钟                add bx,1        add si,2        pop cx    loop settimetocmos_s    pop si    pop dx    pop cx    pop bxret;==============================================================;字符串接收getstr:    push ax    mov si,offset SETTIME - offset boot + 7E00h    getstrs:        mov ah,0        int 16h        cmp al,30h      ; ASCII码小于30h,说明不是数字        jb nonumber        cmp al,39H        ja nonumber     ; ASCII码大于39h,也不是数字        mov ah,0        call charstack  ; 字符入栈        mov ah,2        call charstack  ; 显示栈中的字符        jmp getstrs    nonumber:        cmp ah,0eh      ; 退格键的扫描码        je backspace            cmp ah,1ch      ; Enter键的扫描码        je enter        cmp ah,01h      ; Esc键的扫描码        je getstrs_backtostart        jmp getstrs    backspace:        mov ah,1        call charstack  ; 字符出栈        mov ah,2        call charstack  ; 显示栈中的字符        jmp getstrs    enter:              ; 输入回车之后也直接推出去        pop axret    getstrs_backtostart: ;esc返回主菜单        jmp bootstart;==============================================================;名称: keyboardinput;功能: 使用int中断获取键盘的输入;参数: 无;返回: ah为扫描码   al为ASCII码keyboardinput:    mov ax,0    int 16hret    ;==============================================================;名称: clearscreen;功能: 清除显存中第一页的显示;参数: 无;返回: 无clearscreen:    push bx    push es    push di    push cx    mov bx,0B800H    mov es,bx    mov di,0    mov bx,0700h;全部设置为黑色，填充就是0 设置颜色默认为黑底白字    mov cx,2000    clearscreenloop:            mov es:[di],bx            add di,2    loop clearscreenloop        pop cx    pop di    pop es    pop bxret;==============================================================;名称: showmenu;功能: 展示菜单;参数: 无;返回: 无showmenu:    push si    push bx    push di    push es    push cx    mov bx,0B800H   ;显存的位置    mov es,bx    mov si,10*160 + 30*2    ;mov bx,offset MENU - offset boot + 7E00h;------就得像这样先把MENU转移出来才行。。。。ds:[ds:MENU[bx]+di]这种写法也可以    ;上面这样算出来是标量啊，肯定是显示不了第一句话。你真正要的是ds:[bx]这样才是第一句的地址    ;所以在你把循环改了之后,就可以显示第一句了     mov di,0    mov cx,5    showmenu_s:        mov bx,ds:[offset MENU - offset boot + di + 7E00h];每一个字符串所对应的首地址        call showmenuline        add si,160        add di,2    loop showmenu_s    showmenu_s_ret:        pop cx        pop es        pop di        pop bx        pop siret;名称: showmenuline;功能: 显示字符串;参数: ds:bx指向要显示字符串的首地址,以0结尾;      es:si 写入显存的位置;返回: 无showmenuline:;ds:bx指向要显示的字符串的首地址,以0结尾,si标明位置    push bx    push si    showmenuline_s:        mov al,ds:[bx]        cmp al,0        je showmenuline_s_ret                mov es:[si],al        ; mov byte ptr es:[si+1],07H 在清屏的地方已经设置过了                add si,2        add bx,1    jmp showmenuline_s    showmenuline_s_ret:        pop si        pop bxret;==============================================================;子程序: 字符栈的入栈、出栈和显示;参数说明: ah=功能号 0入栈 1出栈 2显示;         ds:si指向字符栈空间;         对于0号功能:al=入栈字符;         对于1号功能:al=返回字符;         对于2号功能:dh\dl=字符串在屏幕上显示的行、列位置charstack:    jmp short charstart    table dw offset charpush- offset boot + 7e00h,offset charpop - offset boot + 7e00h,offset charshow - offset boot + 7e00h    top dw 0                        ;the top of stack    charstart:        push bx        push cx        push di        push es        push si        mov bx,0        mov ds,bx        cmp ah,2        ja sret        mov bl,ah        mov bh,0        add bx,bx        jmp word ptr ds:[offset table - offset boot + bx + 7E00h]    charpush:        mov cx,ds:[offset top - offset boot + 7E00h]        cmp cx,11        ja sret        mov bx,ds:[offset top - offset boot + 7E00h]        mov ds:[si][bx],al        inc cx        mov ds:[offset top - offset boot + 7E00h],cx         jmp sret    charpop:        mov cx,ds:[offset top - offset boot + 7E00h]        cmp cx,0        je sret        dec cx        mov ds:[offset top - offset boot + 7E00h],cx         mov bx,ds:[offset top - offset boot + 7E00h]        mov al,ds:[si][bx]        mov byte ptr ds:[si][bx],'#'        jmp sret    ;-------这里实在是没办法了,逻辑上都没有问题,用子程序显示就能显示,用书上的程序反而不显示,不知道为什么    charshow:        mov bx,0b800h        mov es,bx        mov si,13*160+30*2        mov bx,offset SETTIME - offset boot + 7E00h        call showmenuline    sret:        pop si        pop es        pop di        pop dx        pop bxret;==============================================================boot_end:nop;================================================================code endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;课程设计2&quot;&gt;&lt;a href=&quot;#课程设计2&quot; class=&quot;headerlink&quot; title=&quot;课程设计2&quot;&gt;&lt;/a&gt;课程设计2&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="汇编" scheme="https://laobameishijia.github.io/tag/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>财经-基金</title>
    <link href="https://laobameishijia.github.io/2021/11/02/cai-jing-ji-jin/"/>
    <id>https://laobameishijia.github.io/2021/11/02/cai-jing-ji-jin/</id>
    <published>2021-11-02T09:25:00.000Z</published>
    <updated>2021-11-09T01:50:46.284Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基金"><a href="#基金" class="headerlink" title="基金"></a>基金</h1><h2 id="基金的分类"><a href="#基金的分类" class="headerlink" title="基金的分类"></a>基金的分类</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211102211501.png" alt="思维导图"></p><h3 id="投资方向"><a href="#投资方向" class="headerlink" title="投资方向"></a>投资方向</h3><ul><li><strong>货币型基金</strong>: 以短期国债、中央银行票据、银行存款等货币市场工具为投资对象。货币市场基金只能以货币市场工具为投资对象。比如余额宝等。</li></ul><blockquote><p>收益稳定、流动性强、随时存取</p></blockquote><ul><li><strong>债券型基金</strong>: 绝大部分资金都用于投资债券。债券投资比例为总资金的80%以上。</li></ul><blockquote><p>比较安全、收益也比较低</p></blockquote><ul><li><strong>混合型基金</strong>: 这类基金可以投资股票，也可以投资债券，甚至货币，资产的配置相对比较灵活。</li></ul><blockquote><p>风险低于股票型又高于债卷型。混合基金会根据基金投资目标的不同而指定不同的股票和债券配置比例，据此还可以细分：如果股票配置比例较高（50-70）就叫做<strong>偏股型基金</strong>; 如果股票和债券的配置比例差不多，就叫做<strong>股债平衡型基金</strong>；灵活配置；<strong>灵活配置型基金</strong>没有具体的比例，会根据市场状况灵活调整配置。</p></blockquote><ul><li><strong>股票型基金</strong>：绝大部分资金都投资于股票，股票投资站基金资产的80%以上</li></ul><blockquote><p>高风险、高收益</p></blockquote><h3 id="投资理念"><a href="#投资理念" class="headerlink" title="投资理念"></a>投资理念</h3><p>按照投资理念来分类，可以把基金分为主动型和被动型。</p><ul><li><p><strong>主动型基金</strong>以获取超越业绩基准的超额收益为目标，由基金经理主动投资管理，所以受基金经理个人风格影响比较大，属于高收益高风险的基金。比较适合于想在短期波动中寻找超额收益的人。</p></li><li><p><strong>被动性基金</strong>又被称为指数基金，是指被动跟踪某一市场指数，以获取一个市场平均收益为目标。这类基金几乎不受基金经理的操作影响，并且长期来看，指数是不断上涨的，适合于长期定投想在长期趋势中获益的人。同时定投指数基金也是投资大神巴菲特力荐的一种投资方式。</p></li></ul><h3 id="交易渠道"><a href="#交易渠道" class="headerlink" title="交易渠道"></a>交易渠道</h3><ul><li><strong>场内基金</strong> 指证券交易所上市，就是我们平常所说的股票市场，也称为二级市场。目前国内有两家证券交易所：上海证券交易所和深圳证券交易所。</li><li><strong>场外基金</strong> 指股票交易市场以外的市场，场外基金的买卖平台很多，包括银行、证券公司，基金公司和第三方销售公司，但注意不同渠道的申赎手续费不一定相同。在天天基金上买到的基金基本上都属于场外基金。</li></ul><h3 id="募集方式"><a href="#募集方式" class="headerlink" title="募集方式"></a>募集方式</h3><ul><li><p><strong>公募基金</strong> 公开发售的形式，向广大社会公众募集资金。</p></li><li><p><strong>私募基金</strong> 非公开的募集资金，门槛高。最低都是在100万以上。</p></li></ul><h3 id="运作方式"><a href="#运作方式" class="headerlink" title="运作方式"></a>运作方式</h3><ul><li><p><strong>封闭式基金</strong> 指基金份额在基金合同期限内固定不变，即基金募集结束后不再接受投资者的申购或者赎回份额。但是基金份额可以在证券交易所上市交易。这类基金不仅规模固定，连申购赎回时间也是固定的，中间是没办法赎回的，有点像定期存款。</p></li><li><p><strong>开放式基金</strong> 开放式基金份额不固定，在基金合同约定的时间，都可以向基金公司申购或者赎回份额。开放式基金也可以在证券交易所上市交易，比较灵活，规模不固定，随时可以申购和赎回。</p></li></ul><h3 id="特殊类型的基金"><a href="#特殊类型的基金" class="headerlink" title="特殊类型的基金"></a>特殊类型的基金</h3><ul><li><p><strong>ETF基金</strong> ETF，交易型开放式指数基金，又称为交易所交易基金(Exchange Traded Funds),是一种可以在交易所交易，基金份额可变的一种特殊开放式基金，它结合了封闭式基金和开放式基金的运作特点。是一种被动式管理型指数基金，跟踪复制指数。</p></li><li><p><strong>QDII</strong> QDII是Qualified Domestic Institutional Investor (合格的境内机构投资者)的首字缩写。它是在一国境内设立，经该国有关部门批准从事境外证券市场的股票、债券等有价证券业务的证券投资基金。</p></li><li><p><strong>分级基金</strong>分级基金又称结构型基金，是指在一个投资组合下，通过对基金收益或净资产的分解，形成两级(或多级)风险收益表现有一定差异化基金份额的基金品种。</p></li></ul><h2 id="常用的指数含义"><a href="#常用的指数含义" class="headerlink" title="常用的指数含义"></a>常用的指数含义</h2><h3 id="上证指数"><a href="#上证指数" class="headerlink" title="上证指数"></a>上证指数</h3><p>上证指数很好理解，就是在上海证券交易所上市的所有股票(股票代码60开头的)，按照某种计算方法给算出来的。怎么计算出来的我们可以不用管，但我们要知道，市值越大的股票，对指数的影响就越大。</p><h3 id="深圳成指"><a href="#深圳成指" class="headerlink" title="深圳成指"></a>深圳成指</h3><p>深证成指，就是在深圳证券交易所上市的500只股票，计算出来的一个指数。这500只股票是深市中最牛逼的500只，具体的挑选方法不重要。我们需要知道的是，深证成指代表的是深市的股票走势。深证成指的影响力没有上证指数大</p><h3 id="创业板指"><a href="#创业板指" class="headerlink" title="创业板指"></a>创业板指</h3><p>是由所有创业板的股票计算出来的。这个指数的走势，代表的是市场里面中小股票的走势。不过左右的指数基本都是，市值越大，权重就越大，对指数影响越大。</p><h3 id="沪深300、中证500、上证50"><a href="#沪深300、中证500、上证50" class="headerlink" title="沪深300、中证500、上证50"></a>沪深300、中证500、上证50</h3><p>沪深300指数，可以理解为，股市中权重最大、成交最为活跃的300只股票，按照一定的计算方法计算出来的。这个指数的走势，代表的是市场中权重股的走势，比如工商银行、贵州茅台、中国石油这些股票。</p><p>现在很多业绩基准都是以沪深300作为基准进行比较。比如一个基金是否跑赢了市场，会把基金收益率和沪深300的收益率比较，而不是上面所说的上证指数（大盘）。</p><p>这是因为现在普遍认为，上证指数已经失真了，不能准确反应整个市场的走势。因为上证指数更多的是代表权重大盘股的走势，而不是整个市场。</p><p>中证500指数，可以看作是，排在上面所说的300只股票之后的500只，也就是排名301-800的那些股票，按照一定的方法计算出来的。这个指数的走势，代表的是市场里面中小股票的走势，排名301-800的500只股票，一般是细分行业的龙头股。比如通策医疗、宝信软件、绝味食品等。</p><p>上证50指数，是由上海证券交易所上市的（股票代码60开头的），权重最大，成交最活跃的50只股票，计算出来的一个指数。这个指数的走势，代表的是权重中的权重股的走势。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基金&quot;&gt;&lt;a href=&quot;#基金&quot; class=&quot;headerlink&quot; title=&quot;基金&quot;&gt;&lt;/a&gt;基金&lt;/h1&gt;&lt;h2 id=&quot;基金的分类&quot;&gt;&lt;a href=&quot;#基金的分类&quot; class=&quot;headerlink&quot; title=&quot;基金的分类&quot;&gt;&lt;/a&gt;基金的分</summary>
      
    
    
    
    <category term="财经" scheme="https://laobameishijia.github.io/category/%E8%B4%A2%E7%BB%8F/"/>
    
    
    <category term="基金" scheme="https://laobameishijia.github.io/tag/%E5%9F%BA%E9%87%91/"/>
    
  </entry>
  
  <entry>
    <title>动漫-斗破苍穹</title>
    <link href="https://laobameishijia.github.io/2021/10/31/dong-man-dou-po-cang-qiong/"/>
    <id>https://laobameishijia.github.io/2021/10/31/dong-man-dou-po-cang-qiong/</id>
    <published>2021-10-31T09:25:00.000Z</published>
    <updated>2021-11-09T01:50:46.284Z</updated>
    
    <content type="html"><![CDATA[<h1 id="三年之约"><a href="#三年之约" class="headerlink" title="三年之约"></a>三年之约</h1><p>三年之约真的拍了三年，虽然没有看过小说，但随着慢慢地在看动漫以后，内心里也真正喜欢上了萧炎。可能动漫中确实有些夸张的地方，但还是能从中得到些许关于生活的感悟。</p><p>在第四季的结尾，萧炎临上云岚宗的那份淡然与宁静。他想到的是这三年间，帮助过他的人，自己经历过的事情。配上动漫的场景，的确看的出来制作方的确很用心。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211031212833.png" alt="临上云岚宗"></p><p>在忍受退婚之后，他一直以打败纳兰嫣然为目标，不断地去磨砺自己，增强自己的本领。但直到药老因为耗尽灵魂力量而进入沉睡状态的时候，萧炎才真正地明白：原来他是那么依赖药老。从那之后，他开始独自面对复杂的情况，准备唤醒药老的丹药。</p><p>萧炎也曾说，三年之约不过是给过去三年的一个交代。他真的是放下了，真正地专注于自己，而不是要打败谁。在经历了如此多的事情之后，他的内心真的已经很强大了。有的时候，我真觉得生活也是这样。我以前在高中的学习生活中，经常要以谁谁为目标，要在考试中超过他。但却总是事与愿违。经常因此灰心丧气许久。或者就是因为在打球的过程中，经常会有人嘲笑我，我就要非常努力地练球，证明给他们看。</p><p>可以说，前期的这些的确给了我很大的学习动力，但我因此浪费了很多不必要的精力和时间。因为我可能并没有想清楚自己想要活成什么样子。真正改变我的，就是复读的那一年。从现在的角度上来看，复读真的锻炼了我心理。几乎永远都在教室的最后面，老师不记得我的名字，同学只认识舍友，几乎没有任何娱乐活动。在那段日子里，我真的感觉自己每天都在进步，也或许正是从那个时候开始，我才明白我是要做我自己，不需要去看别人。正是这些经历，我在上大学之后，就一直锻炼自己的一个人生活的能力。</p><p>我再也不需要什么目标了，真正要做的就是不断地去完善自己。我不会左手，我就在寒假中努力的练习左手运球。我不会投三分，我就练深蹲和平板支撑锻炼自己的核心。并不是为了超越谁谁谁，也不是为了去赢得别人在球场上对我的赞美。就单纯地只是在完善自己。在家里没有球馆，没有场地，就自己去找没人的地方练习。令我很庆幸的是，路过的路人并没有嘲笑我。他们反而再说我是专业打球的。这真的令我很惭愧，也很高兴。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QQ%E5%9B%BE%E7%89%8720211031215440.jpg" alt="在家时训练的场地"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QQ%E5%9B%BE%E7%89%8720211031215449.jpg" alt="夕阳"></p><p>在学习上也是这样，虽然的确跟很多优秀的同学实在是没法比较，但我也习惯了这种巨大的差距。并不是躺平，我只是不想因为别人，而改变了我自己前进的方向。</p><p>就像片尾曲所唱的那样(<code>角色</code>)</p><blockquote><p>只需要 记得<br>从前现在 都要坚持 自我</p></blockquote><p>这文笔实在是差，写着写着就不知道写啥了。~~~~😀</p><p>以后我也想把这里当成个日记。想写的就随便写，反正也没人认识我。也没什么人可以看到。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;三年之约&quot;&gt;&lt;a href=&quot;#三年之约&quot; class=&quot;headerlink&quot; title=&quot;三年之约&quot;&gt;&lt;/a&gt;三年之约&lt;/h1&gt;&lt;p&gt;三年之约真的拍了三年，虽然没有看过小说，但随着慢慢地在看动漫以后，内心里也真正喜欢上了萧炎。可能动漫中确实有些夸张的地方，但</summary>
      
    
    
    
    <category term="动漫" scheme="https://laobameishijia.github.io/category/%E5%8A%A8%E6%BC%AB/"/>
    
    
    <category term="斗破苍穹" scheme="https://laobameishijia.github.io/tag/%E6%96%97%E7%A0%B4%E8%8B%8D%E7%A9%B9/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言学习-直接定位表</title>
    <link href="https://laobameishijia.github.io/2021/10/26/hui-bian-yu-yan-xue-xi-zhi-jie-ding-wei-biao/"/>
    <id>https://laobameishijia.github.io/2021/10/26/hui-bian-yu-yan-xue-xi-zhi-jie-ding-wei-biao/</id>
    <published>2021-10-26T19:25:00.000Z</published>
    <updated>2021-11-09T01:50:46.284Z</updated>
    
    <content type="html"><![CDATA[<h1 id="直接定址表"><a href="#直接定址表" class="headerlink" title="直接定址表"></a>直接定址表</h1><h2 id="描述了单元长度的标号"><a href="#描述了单元长度的标号" class="headerlink" title="描述了单元长度的标号"></a>描述了单元长度的标号</h2><p>以前我们多采用后面不带冒号的形式进行编程</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume:codecode segment    a: db 1,2,3,4,5,6,7,8    b: dw 0start:    mov si,offset a    mov bx,offset b    mov cx,8s:    mov al,cs:[si]    mov ah,0    add cs:[bx],ax    inc si    loop s    mov ax,4c00h    int 21hcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>But the mark only represent the address of the memory. We still have another form of the mark that does not have the colon. For example.</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume:codecode segment    a db 1,2,3,4,5,6,7,8    b dw 0start:    mov si,offset a    mov bx,offset b    mov cx,8s:    mov al,a:[si]    mov ah,0    add bs,ax    inc si    loop s    mov ax,4c00h    int 21hcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>mov al,a[si]</code> equal to <code>mov al,cs:0[si]</code></p><p>So, we could find  the way helps us access the address of memory in a neat form. We call it data-mark.他标记了存储数据的单元的地址和长度，它不同于仅仅表示地址的标号。</p><h2 id="在其他段使用数据标号"><a href="#在其他段使用数据标号" class="headerlink" title="在其他段使用数据标号"></a>在其他段使用数据标号</h2><p>一般来说，我们不在代码段中定义数据，而是将数据定义到其他段中，在其他段中，我们也可以使用数据标号来描述数据单元的地址和长度。</p><p><strong>注意：在后面加有‘：’的地址只能在代码段中使用，不能在其他段使用。</strong></p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>安装一个新的int 7ch中断例程</p><blockquote><p>功能: 1.clear the screen<br>2.set the foreground<br>3.set the background<br>4.move up one row</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>编写新的int 7ch 中断例程</li><li>安装新的int 7ch 中断例程</li></ul><blockquote><p>这个实验过程的代码出了很多问题，到最后终于改好了。</p></blockquote><h4 id="初期的改错思路"><a href="#初期的改错思路" class="headerlink" title="初期的改错思路"></a>初期的改错思路</h4><p>the major problem 是中断例程中<code>table dw sub1,sub2,sub3,sub4</code>无法正常运作。<br>给人的感觉好像，不能在程序中用一样.按照这种形式写的话，后面的set标号无法被正确的编译。不知道为什么都变成了table标号下面的??</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211025211433.png" alt="问题1"></p><p>改成这种形式之后，才能在debug中的cpu看到正确的汇编代码，虽然代码段中把它们这些地址解析成了汇编指令</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211025210841.png" alt="问题2"></p><p>通过后续的观察发现,其实代码是被正确解析了的，只是在cpu版块的显示上table段中的存放的数据被当作了指令。但是为什么程序不执行呢？</p><blockquote><p>这也是为什么要把jmp命令放在前面的原因，就是为了不让table段存放的数据被当作指令执行，这样的话，肯定有问题的</p></blockquote><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211025212251.png" alt="改变写法后的对比图"></p><h4 id="后期的改错思路"><a href="#后期的改错思路" class="headerlink" title="后期的改错思路"></a>后期的改错思路</h4><p>先整理一下初期思路中出错的原因，再分析一下是哪些基础的知识没有掌握好，导致我们这么长时间一直在纠错</p><p><strong>初期思路：</strong></p><ul><li><p>1.jmp命令放在前面的原因，就是为了防止我们存储的数据被当作指令执行，这也是为什么你在debug模块中的cpu看汇编代码的时候，看起来好像很奇怪。但是它们都是正常的指令。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211026164553.png" alt="cpu视角下的汇编代码"></p></li><li><p>2.<code>tabledata dw sub1,sub2,sub3,sub4;</code>无论是tabledata 还是 sub1，sub2 这些地址都是相对于最开始运行的CS段而言的，而我们想要的是中断例程，也就是执行中断例程的时候的CS段。这样去调用的话，肯定会出错。说成白话的话就是，本来一棵树距离图书馆35米，但是现在要问你，这棵树举例教学楼多少米，你要是还说35米。那是不是有点刻舟求剑的意思了。<strong>所以，真正要采用的是相对地址，还得加上0200h才行！</strong>    这样才行<code>tabledata dw offset sub1 - offset interupt + 0200h,offset sub2 - offset interupt+0200h,offset sub3 - offset interupt+0200h,offset sub4 - offset interupt+0200h</code></p></li><li><ol start="3"><li><code>call word ptr [bx]</code>这样默认的访问地址是 <code>ds+bx</code>，而你想要的是<code>cs:[bx]</code>所以要把寄存器显式的标注出来啊</li></ol></li><li><ol start="4"><li>虽然中断例程处，确实没有办法通过<code>F7</code>进入，但是可以通过看<code>0000:0200h</code>内存中代码，就可以发现到底是不是你想要的了。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211026165549.png" alt="0000:0200处的代码"></li></ol></li><li><ol start="5"><li>int指令和iret指令的作用，如果真的能很好的掌握这两个指令，也犯不着这么长时间才找到问题的源头。</li></ol></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codecode segmentstart:    mov ax,cs    mov ds,ax    mov si,offset interupt; set the ds:si point to the source address    mov ax,0    mov es,ax    mov di,0200h; set the es:di point to the destination address    mov cx,offset interuptend-offset interupt; cx the length of transmisson    cld ; the sequence of the transmit    rep movsb    mov ax,0    mov es,ax    cli    mov word ptr es:[7ch*4],0200h    mov word ptr es:[7ch*4+2],0    sti    ;调用之前的设置你需要再看一下要求是怎么设置的    mov ah,2    mov al,3        int 7ch; 这里怎么跳到了4002h    ; call interupt    mov ax,4c00h    int 21h;所以程序大体上是没有问题的;但是加上table sub1,sub2,sub3,sub4之后就显的怪怪的;通过调试程序来看的话,只有mov bl,ah之后的程序是正常的;前面的程序好像都是错的一样,--通过CPU反汇编的指令来看的话,前面的几句都不对;我如果去掉table直接调用函数的话,就不会出现上述问题;对前面的简单程序进行操作后发现,这个table dw sub1,sub2,sub3,sub4不能在标号里面;也不是因为jmp short set语句和tabledata dw......两个语句的顺序问题;书上说interupt:    jmp short set    ;并不是写法是错的，而是你用错了    ;按道理来说,程序的执行CS IP 本来在code段    ;现在你引发了中断以后就跑到 中断例程中的CS IP了,但是此时 tabledata中保存的仍然是最开始的CS IP 这样一跳转的话,z    ; tabledata dw sub1,sub2,sub3,sub4;这种写法是错误的    ;写成下面这种形式的话，set标号就会重新显示出来    tabledata dw offset sub1 - offset interupt + 0200h,offset sub2 - offset interupt+0200h,offset sub3 - offset interupt+0200h,offset sub4 - offset interupt+0200h    ; tabledata dw offset sub1 - offset interupt + 0200h,offset sub2 - offset interupt + 0200h,offset sub3 - offset interupt + 0200h,offset sub4 - offset interupt + 0200hset:    push bx    push es    push cx    cmp ah,3;判读功能号是否大于3    ja sret    mov bl,ah    mov bh,0    add bx,bx;根据ah中的功能号计算对应子程序在table表中的偏移    add bx,offset tabledata-offset interupt + 0200h    ; call word ptr (offset tabledata-offset interupt)[bx+0200h];调用对应的功能子程序这句话有问题     ; 上面这条指令错就错在 这样隐含的寄存器是ds 也就是 访问的是ds:[...]但是我们想要的是cs:[bx]    call word ptr cs:[bx]    ; add bx,7e02h    ; jmp cs:[bx]sret:    pop cx    pop es    pop bx    ; ret    iret;make the screen emptysub1:    push bx    push cx    push es    mov bx,0b800h    mov es,bx    mov bx,0    mov cx,2000sub1s:    mov byte ptr es:[bx],' '    add bx,2    loop sub1s    pop es    pop cx    pop bx    ret    ; jmp sret; set the foregroundsub2:    push bx    push cx    push es    mov bx,0b800h    mov es,bx    mov bx,1    mov cx,2000sub2s:    and byte ptr es:[bx],11111000B    or es:[bx],al    add bx,2    loop sub2s    pop es    pop cx    pop bx    ret;set the background colorsub3:    push bx    push cx    push es    mov cl,4    shl al,cl    mov bx,0b800h    mov es,bx    mov bx,1    mov cx,2000sub3s:    and byte ptr es:[bx],10001111B    or es:[bx],al    add bx,2    loop sub3s    pop es    pop cx    pop bx    ret;scroll up one linesub4:    push cx    push si    push di    push es    push ds    mov si,0b800h    mov es,si    mov ds,si    mov si,160;ds:si指向第n+1行    mov di,0;es:di指向第n行    cld    mov cx,24;共复制24行sub4s:    push cx    mov cx,160    rep movsb    pop cx    loop sub4s    mov cx,80    mov si,0sub4s1:    mov byte ptr [160*24+si],' ';最后一行清空    add si,2    loop sub4s1    pop ds    pop es    pop di    pop si    pop cx    retinteruptend:    nopcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211026170129.png" alt="清屏"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211026170158.png" alt="设置前景色"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211026170051.png" alt="设置背景色"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211026170240.png" alt="向上滚动一行"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;直接定址表&quot;&gt;&lt;a href=&quot;#直接定址表&quot; class=&quot;headerlink&quot; title=&quot;直接定址表&quot;&gt;&lt;/a&gt;直接定址表&lt;/h1&gt;&lt;h2 id=&quot;描述了单元长度的标号&quot;&gt;&lt;a href=&quot;#描述了单元长度的标号&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="汇编" scheme="https://laobameishijia.github.io/tag/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言学习-外中断</title>
    <link href="https://laobameishijia.github.io/2021/10/24/hui-bian-yu-yan-xue-xi-wai-zhong-duan/"/>
    <id>https://laobameishijia.github.io/2021/10/24/hui-bian-yu-yan-xue-xi-wai-zhong-duan/</id>
    <published>2021-10-24T19:25:00.000Z</published>
    <updated>2021-11-09T01:50:46.284Z</updated>
    
    <content type="html"><![CDATA[<h1 id="外中断"><a href="#外中断" class="headerlink" title="外中断"></a>外中断</h1><h2 id="关于DOS-box是否真的操作硬件和内存的疑惑"><a href="#关于DOS-box是否真的操作硬件和内存的疑惑" class="headerlink" title="关于DOS-box是否真的操作硬件和内存的疑惑"></a>关于DOS-box是否真的操作硬件和内存的疑惑</h2><p>DOSBox is a <code>DOS-emulator</code> that uses the <code>SDL-library</code>which makes DOSBox very easy to port to different platforms. DOSBox has already been ported to many different platforms, such as Windows, BeOS, Linux, MacOS X…</p><p><code>Simple DirectMedia Layer is a cross-platform development library designed to provide low level access to audio, keyboard, mouse, joystick, and graphics hardware via OpenGL and Direct3D.</code>It is used by video playback software, emulators, and popular games including Valve’s award winning catalog and many Humble Bundle games.</p><p>SDL officially supports Windows, Mac OS X, Linux, iOS, and Android. Support for other platforms may be found in the source code.</p><p>SDL is written in C, works natively with C++, and there are bindings available for several other languages, including C# and Python.</p><h2 id="为什么有这个疑惑呢？"><a href="#为什么有这个疑惑呢？" class="headerlink" title="为什么有这个疑惑呢？"></a>为什么有这个疑惑呢？</h2><p>在之前的实验中，我们在中断向量表0000:0200至0000:02FF的部分增添了新的0号中断例程，并且修改了0号表项的入口地址，这样做，是不是影响了后续的程序呢？后面的程序是不是也会同样会收到影响呢？</p><p>好像是没有的,因为后面程序在<code>div指令溢出后</code>总是跑到一个循环里出不来</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211024105838.png" alt="1句"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211024105726.png" alt="2，3句"></p><p><strong>难道每次模拟的时候都会初始化？？也不是没有可能</strong></p><blockquote><p>通过本次实验的效果来看的话，上面的这个猜想是对的，也就是说DOS-box在每次重新打开的时候都会初始化，但是如果你不关闭这个DOS环境的话，它还是会影响下面的</p></blockquote><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>安装一个新的int 9中断例程</p><blockquote><p>功能: 在DOS下，按下‘A’键后，除非不再松开，如果松开就显示全屏的A，其他键照常使用</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>编写新的int 9 中断例程</li><li>保存原有的int 9 地址</li><li>安装新的int 9 中断例程</li></ul><blockquote><p>感觉整个章节的思路比较有借鉴意义，当我没有不太想重新写一个函数，但是又要改善原有函数的功能的话，可以在新函数中去调用原函数，以屏蔽掉繁琐的步骤，更好的完善自己改善的功能。</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codestack segment    db 128 dup(0)stack endscode segmentstart:    mov ax,stack    mov ss,ax    mov sp,128    push cs    pop ds    mov ax,0    mov es,ax    mov si,offset int9    mov di,204h    mov cx,offset int9end-offset int9    cld    rep movsb    push es:[9*4]    pop es:[200h]    push es:[9*4+2]    pop es:[202h]    cli    mov word ptr es:[9*4],204h    mov word ptr es:[9*4+2],0    sti;     mov ax,0b800h;     mov es,ax;     mov ah,'a'; s:;     mov es:[160*12+40*2],ah;     call delay;     inc ah;     cmp ah,'z';     jna s    mov ax,4c00h    int 21hint9:    push ax    push bx    push cx    push es    in al,60h        pushf    call dword ptr cs:[200h]    cmp al,1eh+80h    je printA    jmp int9retprintA:    ;if loose A    mov ax,0b800h    mov es,ax    mov bx,0    mov cx,2000s2:     mov byte ptr es:[bx],'A'    add bx,2    loop s2int9ret:    pop es    pop cx    pop bx    pop ax    iretint9end:    nopcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><strong>得先运行程序,然后在按下a就会有全屏A的效果了</strong></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211024204149.png" alt="20211024204149"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;外中断&quot;&gt;&lt;a href=&quot;#外中断&quot; class=&quot;headerlink&quot; title=&quot;外中断&quot;&gt;&lt;/a&gt;外中断&lt;/h1&gt;&lt;h2 id=&quot;关于DOS-box是否真的操作硬件和内存的疑惑&quot;&gt;&lt;a href=&quot;#关于DOS-box是否真的操作硬件和内存的疑惑&quot; c</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="汇编" scheme="https://laobameishijia.github.io/tag/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言学习-端口</title>
    <link href="https://laobameishijia.github.io/2021/10/23/hui-bian-yu-yan-xue-xi-duan-kou/"/>
    <id>https://laobameishijia.github.io/2021/10/23/hui-bian-yu-yan-xue-xi-duan-kou/</id>
    <published>2021-10-23T19:25:00.000Z</published>
    <updated>2021-11-09T01:50:46.284Z</updated>
    
    <content type="html"><![CDATA[<h1 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h1><p>我们前面讲过,各种存储器都和CPU的地址线\数据线\控制线相连. CPU在操控它们的时候,把它们都当作内存来对待,把它们总地看作一个由若干存储单元组成的逻辑存储器,这个逻辑存储器我们称其位内存地址空间.</p><p>在PC机系统中,和CPU通过总线相连的芯片除各种存储器外,还有以下三种芯片.</p><ul><li>各种接口卡(比如 网卡\显卡) 上的接口芯片,它们控制接口卡进行工作;</li><li>主板上的接口芯片,CPU通过它们对部分外设进行访问;</li><li>其他芯片,用来存储相关的系统信息,或进行相关的输入输出处理</li></ul><p>在这些芯片中,都由一组可以由CPU读写的寄存器.这些寄存器,它们在物理上可能处于不同的芯片中,但是它们在以下两点上相同:</p><ul><li>都和CPU的总线相连,当然这种链接是通过它们所在的芯片进行的</li><li>CPU对它们进行读或者写的时候都通过控制线向它们所在的芯片发出端口读写命令</li></ul><p>可见,从CPU的角度,这些寄存器都当作端口,对它们进行统一编址,从而建立了一个统一的端口地址空间.每一个端口在地址空间中都有一个地址.</p><p>CPU 可以直接独写以下三个地方的数据:</p><ul><li>CPU内部的寄存器</li><li>内存单元</li><li>端口</li></ul><h2 id="端口独写"><a href="#端口独写" class="headerlink" title="端口独写"></a>端口独写</h2><h3 id="访问内存"><a href="#访问内存" class="headerlink" title="访问内存"></a>访问内存</h3><p><code>mov ax,ds:[8]</code></p><ul><li>CPU通过地址线将地址信息8发出</li><li>CPU通过控制线发出内存读命令,选中存储器芯片,并通知它,将要从中读取数据</li><li>存储器将8号单元中的数据通过数据线送入CPU</li></ul><h3 id="访问端口"><a href="#访问端口" class="headerlink" title="访问端口"></a>访问端口</h3><p><code>int al,60h</code></p><ul><li>CPU通过地址线将地址信息60h发出;</li><li>CPU通过控制线发出端口读命令,选中端口所在的芯片,并通知它,将要从中读取数据</li><li>端口所在的芯片将60h端口中的数据通过数据线送入CPU</li></ul><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>CMOS RAM 中,存放着当前的时间: 年\月\日\时\分\秒,这六个信息的长度均为1字节.以BCD码的方式存放</p><blockquote><p>编程 以 <code>年/月/日 时:分:秒</code>的格式,显示当前的日期\时间</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>因为读写的单元不是很有规律,所以只能一个一个的写了</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codedata segment    db 20 dup(0)data ends;s min hour day month yearcode segmentstart:    ;s    mov bl,0    mov al,bl    out 70h,al    in al,71h    mov ah,al    mov cl,4    shr ah,cl;右移四位,取高4位    and al,00001111b;与,取低4位        add ah,30h    add al,30h    push ax        ;分    mov bl,2    mov al,bl    out 70h,al    in al,71h    mov ah,al    mov cl,4    shr ah,cl;右移四位,取高4位    and al,00001111b;与,取低4位        add ah,30h    add al,30h    push ax        ;时    mov bl,4    mov al,bl    out 70h,al    in al,71h    mov ah,al    mov cl,4    shr ah,cl;右移四位,取高4位    and al,00001111b;与,取低4位        add ah,30h    add al,30h    push ax    ;日    mov bl,7    mov al,bl    out 70h,al    in al,71h    mov ah,al    mov cl,4    shr ah,cl;右移四位,取高4位    and al,00001111b;与,取低4位        add ah,30h    add al,30h    push ax        ;月    mov bl,8    mov al,bl    out 70h,al    in al,71h    mov ah,al    mov cl,4    shr ah,cl;右移四位,取高4位    and al,00001111b;与,取低4位        add ah,30h    add al,30h    push ax    ;年    mov bl,9    mov al,bl    out 70h,al    in al,71h    mov ah,al    mov cl,4    shr ah,cl;右移四位,取高4位    and al,00001111b;与,取低4位        add ah,30h    add al,30h    push ax    mov ax,data    mov ds,ax    pop ax    mov ds:[0],ah    mov ds:[1],al    mov byte ptr ds:[2],'/'    pop ax    mov ds:[3],ah    mov ds:[4],al    mov byte ptr ds:[5],'/'        pop ax    mov ds:[6],ah    mov ds:[7],al        mov byte ptr ds:[8],' '        pop ax    mov ds:[9],ah    mov ds:[10],al    mov byte ptr ds:[11],':'        pop ax    mov ds:[12],ah    mov ds:[13],al    mov byte ptr ds:[14],':'    pop ax    mov ds:[15],ah    mov ds:[16],al    mov bx,0b800h    mov es,bx    mov si,0    mov bx,0    mov cx,0s:     mov byte ptr cl,ds:[bx]    jcxz ok    mov byte ptr es:[160*12+40*2+si],cl    inc bx    add si,2    jmp sok:    mov ax,4c00h    int 21hcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211023202035.png" alt="效果"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;端口&quot;&gt;&lt;a href=&quot;#端口&quot; class=&quot;headerlink&quot; title=&quot;端口&quot;&gt;&lt;/a&gt;端口&lt;/h1&gt;&lt;p&gt;我们前面讲过,各种存储器都和CPU的地址线\数据线\控制线相连. CPU在操控它们的时候,把它们都当作内存来对待,把它们总地看作一个由若干存</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="汇编" scheme="https://laobameishijia.github.io/tag/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言学习-int指令</title>
    <link href="https://laobameishijia.github.io/2021/10/23/hui-bian-yu-yan-xue-xi-int-zhi-ling/"/>
    <id>https://laobameishijia.github.io/2021/10/23/hui-bian-yu-yan-xue-xi-int-zhi-ling/</id>
    <published>2021-10-23T09:25:00.000Z</published>
    <updated>2021-11-09T01:50:46.284Z</updated>
    
    <content type="html"><![CDATA[<h1 id="int指令"><a href="#int指令" class="headerlink" title="int指令"></a>int指令</h1><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211023100523.png" alt="思维导图"></p><h2 id="BIOS和DOS中断例程的安装过程"><a href="#BIOS和DOS中断例程的安装过程" class="headerlink" title="BIOS和DOS中断例程的安装过程"></a>BIOS和DOS中断例程的安装过程</h2><ul><li>开机后，CPU一加电，初始化CS=0FFFFH，IP=0，自动从FFFF：0单元开始执行程序。FFFF：0处有一条跳转指令，CPU执行该指令后，转去执行BIOS中的硬件检测系统和初始化程序</li><li>初始化程序将建立BIOS所支持的中断向量。<blockquote><p>注意， 对于BIOS所提供的中断例程，只需要将入口地址登记在中断向量表中即可，因为他们是固化到ROM中的程序，一直在内存中存在</p></blockquote></li><li>硬件系统检测和初始化完成后，调用int 19h进行操作系统引导。从此将计算机交由操作系统控制。</li><li>DOS启动后，除完成其他工作外，还将它所提供的中断例程装入内存，并建立相应的中断向量。</li></ul><h2 id="实验13"><a href="#实验13" class="headerlink" title="实验13"></a>实验13</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><blockquote><p>编写并安装int 7ch中断例程，功能为显示一个用0结束的字符串，中断例程安装在0：200处<br>dh 行号，dl 列号， cl 颜色， ds:si指向字符串首地址</p></blockquote><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul><li>编写能显示字符串的中断处理程序</li><li>将终端服务程序移动到0000:0200处</li><li>修改中断向量表中的7cH号中断的入口地址,使其指向0000:0200</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><blockquote><p>一些注意事项和问题就写到注释里面了,后面忘了的话记得看看</p></blockquote><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codedata segment    db 'welcome to masm!',0data endscode segmentstart:    mov ah,15    int 10h    mov ah,0    int 10h    mov ax,cs    mov ds,ax    mov si,offset interupt; set the ds:si point to the source address    mov ax,0    mov es,ax    mov di,200h; set the es:di point to the destination address    mov cx,offset interuptend-offset interupt; cx the length of transmisson    cld ; the sequence of the transmit    rep movsb    mov ax,0    mov es,ax    mov word ptr es:[7ch*4],200h    mov word ptr es:[7ch*4+2],0        mov dh,10    mov dl,10    mov cl,2    mov ax,data    mov ds,ax    mov si,0    int 7ch    mov ax,4c00h    int 21h;dh 行号;dl 列号;cl 颜色;ds:si 指向字符串首地址interupt:    mov ax,0b800h    mov es,ax    ;找行号对应的内存地址    mov ah,00    mov al,160    mul dh    mov bp,ax    ;找列对应的内存地址    mov ah,00    mov al,2    mul dl    mov di,ax    s:        mov al,ds:[si]        cmp al,0        je ok        mov es:[bp+di],al        mov es:[bp+di+1],cl        inc si        add di,2        jmp s    ok:        iretinteruptend:    nopcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211023102716.png" alt="实现效果"></p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><blockquote><p>编写并安装int 7ch中断例程，功能为完成loop指令的功能<br>cx为循环次数，bx为位移</p></blockquote><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><ul><li>编写能实现loop循环的中断处理程序</li><li>将终端服务程序移动到0000:0200处</li><li>修改中断向量表中的7cH号中断的入口地址,使其指向0000:0200</li></ul><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codedata segment    db 'welcome to masm!',0data endscode segmentstart:    mov ah,15    int 10h    mov ah,0    int 10h    mov ax,cs    mov ds,ax    mov si,offset interupt; set the ds:si point to the source address    mov ax,0    mov es,ax    mov di,200h; set the es:di point to the destination address    mov cx,offset interuptend-offset interupt; cx the length of transmisson    cld ; the sequence of the transmit    rep movsb    mov ax,0    mov es,ax    mov word ptr es:[7ch*4],200h    mov word ptr es:[7ch*4+2],0    mov ax,0b800h    mov es,ax    mov di,160*12    mov bx, offset s - offset se    mov cx,80s:    mov byte ptr es:[di],'!'    add di,2    int 7chse:     nop    mov ax,4c00h    int 21h;采用中断方式实现的loop,转移的范围要更大因为时16位的;正常情况下的loop是8位的,范围相对来说要小一些interupt:    push bp    mov bp,sp    dec cx    jcxz interuptret;就是加不加bx的区别,当cx为零的时候,这个时候就不加bx也就是不会再跳回去了    add ss:[bp+2],bx;注意这个bx是个负数！interuptret:    pop bp    iretinteruptend:    nopcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现效果-1"><a href="#实现效果-1" class="headerlink" title="实现效果"></a>实现效果</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211023102946.png" alt="实现效果"></p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><blockquote><p>下面的程序，分别在屏幕的第2、4、6、8行显示4句英文诗，补全程序.</p></blockquote><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><p>这里面有个写法挺奇妙的, <code>ds:[ds:[si]]</code>是可以这样嵌套着写的</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codecode segments1: db 'Good,better,best,','$'s2: db 'Never let it rest,','$'s3: db 'Till good is better,','$'s4: db 'And better,best.','$'s:  dw offset s1, offset s2, offset s3,offset s4row: db 2,4,6,8start:    mov ah,15    int 10h    mov ah,0    int 10h    mov ax,cs    mov ds,ax    mov bx,offset s    mov si,offset row;行号    mov cx,4ok:    mov bh,0;第0页    mov dh,ds:[si];这个行号怎么不起作用呢    mov dl,0;列号    mov ah,2    int 10    mov dx,ds:[ds:[bx]];可以这样嵌套着写！我真是个大聪明！哈哈哈哈哈~~~    mov ah,9    int 21h        ;直接在这里加就行了,不用非得跑到mov指令那里加    ;不能直接加 标号,得加寄存器,你个憨憨    add si,1    add bx,2    loop ok    mov ax,4c00h    int 21hcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p>有个疑惑就是为什么这个地方的行号和列号的改变不起作用呢??</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211023103301.png" alt="效果"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;int指令&quot;&gt;&lt;a href=&quot;#int指令&quot; class=&quot;headerlink&quot; title=&quot;int指令&quot;&gt;&lt;/a&gt;int指令&lt;/h1&gt;&lt;h2 id=&quot;思维导图&quot;&gt;&lt;a href=&quot;#思维导图&quot; class=&quot;headerlink&quot; title=&quot;思维导图&quot;</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="汇编" scheme="https://laobameishijia.github.io/tag/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言学习-内中断</title>
    <link href="https://laobameishijia.github.io/2021/10/21/hui-bian-yu-yan-xue-xi-nei-zhong-duan/"/>
    <id>https://laobameishijia.github.io/2021/10/21/hui-bian-yu-yan-xue-xi-nei-zhong-duan/</id>
    <published>2021-10-21T09:25:00.000Z</published>
    <updated>2021-11-09T01:50:46.284Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内中断"><a href="#内中断" class="headerlink" title="内中断"></a>内中断</h1><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211021105626.png" alt="思维导图"></p><h2 id="debug单步执行命令的原理"><a href="#debug单步执行命令的原理" class="headerlink" title="debug单步执行命令的原理"></a>debug单步执行命令的原理</h2><p>基本上,CPU在执行完一条指令之后,如果检测到标志寄存器的TF位为1,则产生单步中断,引发中断的过程。单步中断的中断类型码为1,则它引发的中断过程如下:</p><ul><li>取得中断码类型1</li><li>标志寄存器入栈,TF\IF设置为0</li><li>CS、IP入栈</li><li>IP=(1<em>4),CS=(1</em>4+2)</li></ul><p>首先Debug提供了单步中断的中断处理程序,功能为显示所有寄存器中的内容后等待输入命令。然后,在使用t命令执行执行时,Debug将TF设置为1,使得CPU工作于中断方式下,则在CPU执行完这条指令后就引发单步中断,执行单步中断的中断处理程序,所有寄存器中的内容将被显示在屏幕上，并且等待输入命令。</p><p>在进入中断处理程序之前,设置TF=0。从而避免CPU在执行中断处理程序的时候发生单步中断。这就是为什么在终端过程中有TF=0这一步。</p><p>最后,CPU提供单步中断功能的原因就是，为单步跟踪程序的执行过程，提供实现机制</p><h2 id="响应中断的特殊情况"><a href="#响应中断的特殊情况" class="headerlink" title="响应中断的特殊情况"></a>响应中断的特殊情况</h2><p>一般情况下,CPU在执行完当前指令后，如果检测到中断信息，就响应中断，引发中断过程。可是，在有些情况下，CPU在执行完当前指令后，即便是发生中断，也不会相响应。对于这些情况，下面列举其中一种情况来进行说明。</p><p>在执行完向ss寄存器传送数据的指令后，即便是发生中断，CPU也不会相应。这样做的主要原因是，SS:SP联合指向栈顶，而对它们的设置应该连续完成。如果在设置完ss的指令后，CPU响应中断，引发中断过程，要在栈中压入标志寄存器，cs和ip的值。而ss改变，sp并未改变，ss：sp指向的不是正确的栈顶，将引起出错误。所以CPU在执行完设置ss 的指令后，不响应中断。</p><p>所以我们应该利用这个特性，将设置ss和sp的指令连续存放。</p><h2 id="实验12"><a href="#实验12" class="headerlink" title="实验12"></a>实验12</h2><blockquote><p>编写0号中断的处理程序,使得在除法溢出发生时,在屏幕中间显示字符串”divide error!”,然后返回到DOS</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>编写能显示divide error！的0号中断处理程序</li><li>将终端服务程序移动到0000:0200处</li><li>修改中断向量表中的0号中断的入口地址,使其指向0000:0200</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><blockquote><p>一些注意事项和问题就写到注释里面了,后面忘了的话记得看看</p></blockquote><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codecode segmentstart:;清屏    mov ah,15    int 10h    mov ah,0    int 10h;将do0送入内存0000:0200处    ;ds:si传送的原始位置    mov ax,code    mov ds,ax    mov si,offset do0    ;es:di传送的目的位置    mov ax,0000    mov es,ax    mov di,0200h;！！！！0200后面要加h啊！！     ;传送的长度    mov cx,offset do0end - offset do0    ;传送的方向 正向传送    cld    rep movsb;将do0的入口地址0000:0200存储在中断向量表0号表项中    mov ax,0000    mov es,ax    mov word ptr es:[0],0200h ;！！！！在没有寄存器显示指示操作的数据大小的时候,一定要用word或者byte显式指明    mov word ptr es:[2],0000h ;另外你只用写往里面存的数就行了,不用按照高低字节改变,他自己会改变的    mov ax,1000    mov bh,1    div bh    mov ax,4c00h    int 21;可以显示 overflow的中断处理程序 do0do0:    jmp do0start    db 'divide error!'do0start:    mov ax,cs    mov ds,ax    mov si,0202h ;设置ds:si指向字符串        mov ax,0B800H    mov es,ax    mov di,12*160+36*2 ;设置es:di指向字符串        ;明白为什么这里它不用这个rep的命令了把,因为显存里面的结构是 要显示的字符+颜色背景啥的,但是这个只能是一个一个的加    mov cx,13;设置字符串长度    ; cld;设置传输方向    ; rep movsb    s:        mov al,[si]        mov es:[di],al        inc si        add di,2;为什么不用rep命令的原因就在这        loop s    mov ax,4c00h    int 21hdo0end:    nopcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;内中断&quot;&gt;&lt;a href=&quot;#内中断&quot; class=&quot;headerlink&quot; title=&quot;内中断&quot;&gt;&lt;/a&gt;内中断&lt;/h1&gt;&lt;h2 id=&quot;思维导图&quot;&gt;&lt;a href=&quot;#思维导图&quot; class=&quot;headerlink&quot; title=&quot;思维导图&quot;&gt;&lt;/a&gt;思维导</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="汇编" scheme="https://laobameishijia.github.io/tag/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
</feed>
