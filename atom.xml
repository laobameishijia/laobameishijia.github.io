<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>老叭美食家</title>
  
  <subtitle>永远热爱生活</subtitle>
  <link href="https://laobameishijia.github.io/atom.xml" rel="self"/>
  
  <link href="https://laobameishijia.github.io/"/>
  <updated>2021-11-15T03:37:29.928Z</updated>
  <id>https://laobameishijia.github.io/</id>
  
  <author>
    <name>老叭美食家</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>逆向工程核心原理-2-EAT</title>
    <link href="https://laobameishijia.github.io/2021/11/14/ni-xiang-gong-cheng-he-xin-yuan-li-2-eat/"/>
    <id>https://laobameishijia.github.io/2021/11/14/ni-xiang-gong-cheng-he-xin-yuan-li-2-eat/</id>
    <published>2021-11-14T09:25:00.000Z</published>
    <updated>2021-11-15T03:37:29.928Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EAT"><a href="#EAT" class="headerlink" title="EAT"></a>EAT</h1><p>Windows操作系统中，“库”是为了方便其他程序调用而集中包含相关函数的文件(DLL/SYS)。Win32 API是最具代表性的库，其中的kernel32.dll文件被称为最核心的库文件。</p><p>EAT是一种核心机制，它使不同的应用程序可以调用库文件中提供的函数。也就是说，只有通过EAT才能准确求得相应库中导出函数的起始地址。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211114094826.png" alt="EAT"></p><p>从库中获得函数地址的API为<code>GetProcAddress</code>函数。该API引用EAT来获取指定API的地址。</p><h2 id="GetProcAddress操作原理"><a href="#GetProcAddress操作原理" class="headerlink" title="GetProcAddress操作原理"></a>GetProcAddress操作原理</h2><ol><li>利用AddressOfName成员转到“函数名称数组”</li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211114101014.png" alt="函数名称数组"></p><ol start="2"><li>函数名称数组中存储着字符串的地址。通过比较字符串，查找指定的函数名称(此时的数组索引成为name_index)</li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211114101732.png" alt="找到函数名称"></p><ol start="3"><li>利用AddressOfNameOrdinals成员转到orinal数组。</li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211114101919.png" alt="转到orinal数组"></p><ol start="4"><li>在ordinal数组中通过name_index查找到相应的ordinal值</li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211114102139.png" alt="找到ordinal的值"></p><ol start="5"><li>利用AddressOfFunctions成员转到“函数地址数组EAT”</li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211114102324.png" alt="转到EAT"></p><ol start="6"><li>利用刚刚求到的ordinal用作数组索引，获得指定函数的起始地址。</li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211114102451.png" alt="获得起始地址"></p><blockquote><p>kernel32.dll中所有导出函数均有相应名称，AddressOfNameOrdinals数组的值以index=ordinal的形式存在。但并不是所有的DLL文件都如此，导出函数中也有一些函数没有名称。</p></blockquote><hr><blockquote><p>对于没有函数名称的导出函数，可以通过ordinal查找到它们的地址。从Ordinal值中减去IMAGE_EXPORT_DIRECTORY.base成员后得到一个值。使用该值作为“函数地址数组”索引，即可查找到相应函数的地址。</p></blockquote><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;EAT&quot;&gt;&lt;a href=&quot;#EAT&quot; class=&quot;headerlink&quot; title=&quot;EAT&quot;&gt;&lt;/a&gt;EAT&lt;/h1&gt;&lt;p&gt;Windows操作系统中，“库”是为了方便其他程序调用而集中包含相关函数的文件(DLL/SYS)。Win32 API是最具代表性的库</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="逆向工程核心原理" scheme="https://laobameishijia.github.io/tag/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>逆向工程核心原理-2-运行时压缩测试</title>
    <link href="https://laobameishijia.github.io/2021/11/14/ni-xiang-gong-cheng-he-xin-yuan-li-3-yun-xing-shi-ya-suo-ce-shi/"/>
    <id>https://laobameishijia.github.io/2021/11/14/ni-xiang-gong-cheng-he-xin-yuan-li-3-yun-xing-shi-ya-suo-ce-shi/</id>
    <published>2021-11-14T09:25:00.000Z</published>
    <updated>2021-11-15T03:37:29.928Z</updated>
    
    <content type="html"><![CDATA[<h1 id="运行时压缩测试"><a href="#运行时压缩测试" class="headerlink" title="运行时压缩测试"></a>运行时压缩测试</h1><p>运行时压缩器是针对PE文件而言的，可执行文件内部含有解压缩代码，文件在运行瞬间于内存中解压缩后执行。</p><h2 id="压缩器"><a href="#压缩器" class="headerlink" title="压缩器"></a>压缩器</h2><p><strong>使用目的</strong>: </p><ul><li>缩减PE文件大小</li><li>隐藏PE文件内部代码和资源</li></ul><h2 id="保护器"><a href="#保护器" class="headerlink" title="保护器"></a>保护器</h2><p><strong>使用目的</strong>：</p><ul><li>防止破解</li><li>保护代码与资源</li></ul><p>尤其游戏，防止你做外挂。</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>就按照书上面给出的UPX压缩器做测试了。</p><p>具体的过程我是这么理解的，UPX给代码做了一个压缩，都放到<code>.UPX1</code>段中，加载入内存后，先运行<code>.UPX1段</code>中的解压缩代码，将文件中的压缩代码放到<code>.UPX0段</code>中。在解压缩过程完成后，跳转到源程序的执行入口执行程序。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211115113255.png" alt="UPX压缩后的结构对比"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211115111250.png" alt="压缩前后的PEview"></p><p>至于最后是否是还原成跟压缩前的程序一致(其他的代码段和结构等等)，这我就有点不太清楚了。用debug工具调试，最后确实跳转到了程序入口，该入口与调试源程序的入口保持一致。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211115111627.png" alt="debug工具调试"></p><blockquote><p>通过观察内存中的数据，对比发现，解压缩之后程序没有包含原来<code>.text</code>中的<code>IMPORT Hints/Names &amp; DLL Names</code><br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211115112308.png" alt="IMPORT Hints/Names &amp; DLL Names"><br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211115112433.png" alt="内存中的数据对比"></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;运行时压缩测试&quot;&gt;&lt;a href=&quot;#运行时压缩测试&quot; class=&quot;headerlink&quot; title=&quot;运行时压缩测试&quot;&gt;&lt;/a&gt;运行时压缩测试&lt;/h1&gt;&lt;p&gt;运行时压缩器是针对PE文件而言的，可执行文件内部含有解压缩代码，文件在运行瞬间于内存中解压缩后执行。</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="逆向工程核心原理" scheme="https://laobameishijia.github.io/tag/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>财经-基金-2</title>
    <link href="https://laobameishijia.github.io/2021/11/13/cai-jing-ji-jin-2/"/>
    <id>https://laobameishijia.github.io/2021/11/13/cai-jing-ji-jin-2/</id>
    <published>2021-11-13T09:25:00.000Z</published>
    <updated>2021-11-15T03:37:29.928Z</updated>
    
    <content type="html"><![CDATA[<h1 id="投资到底赚的是谁的钱"><a href="#投资到底赚的是谁的钱" class="headerlink" title="投资到底赚的是谁的钱?"></a>投资到底赚的是谁的钱?</h1><p>首先股市投资是会创造财富的。要记住我们真正投资的不是股票，而是投资股票背后的企业。企业是会创造财富的，所以投资股市，给企业相应的资本，这些资本就会产生新的财富。这实际上就是股市会长期上涨的根本原因。投资有回报，这种回报就是由于新财富的产生而创造的。</p><p>长期来看，市场是向上的，我们赚的是投资企业的钱，所以有人说投资是赚钱的，只是赚多赚少的问题，这种说法也对，但前提是长期。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;投资到底赚的是谁的钱&quot;&gt;&lt;a href=&quot;#投资到底赚的是谁的钱&quot; class=&quot;headerlink&quot; title=&quot;投资到底赚的是谁的钱?&quot;&gt;&lt;/a&gt;投资到底赚的是谁的钱?&lt;/h1&gt;&lt;p&gt;首先股市投资是会创造财富的。要记住我们真正投资的不是股票，而是投资股票背</summary>
      
    
    
    
    <category term="财经" scheme="https://laobameishijia.github.io/category/%E8%B4%A2%E7%BB%8F/"/>
    
    
    <category term="基金" scheme="https://laobameishijia.github.io/tag/%E5%9F%BA%E9%87%91/"/>
    
  </entry>
  
  <entry>
    <title>逆向工程核心原理-2-IAT</title>
    <link href="https://laobameishijia.github.io/2021/11/13/ni-xiang-gong-cheng-he-xin-yuan-li-2-iat/"/>
    <id>https://laobameishijia.github.io/2021/11/13/ni-xiang-gong-cheng-he-xin-yuan-li-2-iat/</id>
    <published>2021-11-13T09:25:00.000Z</published>
    <updated>2021-11-15T03:37:29.928Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PE文件格式"><a href="#PE文件格式" class="headerlink" title="PE文件格式"></a>PE文件格式</h1><p>从DOS头到节区头是PE头部分，其下的节区合称为PE体。文件中使用offset，内存中使用VA(Virtual Address)虚拟地址来表示位置。文件加载到内存时，情况就会发生变化(节区的大小、位置等)。文件的内容一般可分为代码<code>.text</code>、数据<code>.data</code>、资源<code>.rsrc</code>。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211113151027.png" alt="PE文件"></p><h2 id="PE头"><a href="#PE头" class="headerlink" title="PE头"></a>PE头</h2><p>PE头由许多结构体组成。</p><ul><li>DOS头</li><li>DOS存根</li><li>NT头<ul><li>文件头</li><li>可选头</li></ul></li><li>节区头</li></ul><p>RVA(Relative Vritual Address) to RAW(文件偏移地址是指数据在PE文件中的地址，是文件在磁盘上存放时相对于文件开头的偏移。文件偏移地址从pe文件的第一个字节开始计数，起始值为0)</p><p><code>RAW - PointerToRawData = RVA - VirtualAddress</code></p><p>PointerToRawData: 磁盘文件中节区的起始位置<br>VirtualAddress: 内存中节区的起使地址</p><h3 id="IAT"><a href="#IAT" class="headerlink" title="IAT"></a>IAT</h3><p>Import Address Table导入地址表，IAT是一种表格，用来记录程序正在使用哪些库中的哪些函数。</p><h4 id="DLL"><a href="#DLL" class="headerlink" title="DLL"></a>DLL</h4><p>16位的DOS不存在DLL，只有库Library一说，比如在C语言中使用printf()函数时，编译器会先从C库中读取相应函数的二进制代码，然后插入应用程序。也就是说，可执行文件中包含着printf函数的二进制代码。Windows OS支持多任务，若仍采用这种包含库的方式会变得非常没有效率。在同时运行多个程序的情况下，会造成严重的资源浪费(内存和磁盘空间)。因此设计出了DLL概念：</p><ul><li>不需要把库包含在程序中，单独组成DLL文件，需要时调用即可</li><li>内存映射技术使加载后的DLL代码、资源在多个进程中实现共享</li><li>更新库时只需要替换相关的DLL文件即可</li></ul><blockquote><p>如何理解DLL文件节约了磁盘和内存空间？<br>之前的多个程序无论是在源代码还是加入内存时，都包含了printf函数的二进制代码。现在大家可以共享内存中DLL文件中的printf函数，这样的话，不仅源代码中不用包含printf函数(节约了磁盘空间)，加载至内存后还可以共享一个printf函数(节约了内存空间)</p></blockquote><h4 id="IMAGE-IMPORT-DESCRIPTOR-IMPORT-Directory-Table"><a href="#IMAGE-IMPORT-DESCRIPTOR-IMPORT-Directory-Table" class="headerlink" title="IMAGE_IMPORT_DESCRIPTOR(IMPORT Directory Table)"></a>IMAGE_IMPORT_DESCRIPTOR(IMPORT Directory Table)</h4><p>记录PE文件要导入哪些库文件<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211113160018.png" alt="IMAGE_IMPORT_DESCRIPTOR"></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">IAT输入顺序1. 读取IID(IMAGE_IMPORT_DESCRIPTOR)的Name成员，获取库名称字符串(kernel32.dll)2. 装载相应库 -> LoadLibrary("kernel32.dll")3. 读取OriginalFirstThunk成员获取INT地址(Import Name Table)4. 逐一读取INT中的数组的值，获取相应的IMAGE_IMPORT_BY_NAME地址(RVA)5. 使用IMAGE_IMPORT_BY_NAME的Hint或Name获取相应函数的起始地址 -> GetProcAddress("GetCurrentThreadld")6. 读取IID的FirstThunk(IAT)成员，获取IAT地址7. 将上面获取到的函数地址输入相应的IAT数组值8. 重复以上步骤4-7，直到INT结束(遇到NULL时)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>IMAGE_IMPORT_DESCRIPTOR</code>结构体数组不在PE头而在PE体中，但查找其位置的信息在PE头中，<code>IMAGE_OPTIONAL_HEADER32.DataDirectory[1].VirtualAddress</code>即是<code>IMAGE_IMPORT_DESCRIPTOR</code>结构体数组的起始地址(RVA值)。<strong>期间注意RVA和RAW(文件偏移)之间的转换–要用到节区头中.text端的相关信息</strong></p><blockquote><p>整体上寻找信息的思路为</p><ol><li>先在 <code>IMAGE_OPTIONAL_HEADER32</code>中找到 <code>IMPORT Directory</code>的RVA值并将其转换成<code>RAW文件偏移</code>，并根据转换出来的文件偏移找到<code>IMPORT Directory</code>的位置<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211113173647.png" alt="寻找IMPORT Directory"></li><li>再根据<code>IMPORT Directory</code>相应数据(<strong>同样要转换为RAW文件偏移</strong>)找到导入函数表、导入DLL表、导入函数的实际地址表。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211113174053.png" alt="寻找其他表"></li></ol></blockquote><p><code>IMAGE_IMPORT_DESCRIPTOR</code>结构体中的命名很奇怪，OriginalFirstThunk对应的是<strong>导入函数表</strong>INT(Import Name Table ) address。FirstThunk对应的是<strong>导入函数地址表</strong>IAT(Import Address Table)address。Name对应的是 <strong>导入DLL表</strong>library name string address</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PE文件格式&quot;&gt;&lt;a href=&quot;#PE文件格式&quot; class=&quot;headerlink&quot; title=&quot;PE文件格式&quot;&gt;&lt;/a&gt;PE文件格式&lt;/h1&gt;&lt;p&gt;从DOS头到节区头是PE头部分，其下的节区合称为PE体。文件中使用offset，内存中使用VA(Virtua</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="逆向工程核心原理" scheme="https://laobameishijia.github.io/tag/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习-3-Vue组件</title>
    <link href="https://laobameishijia.github.io/2021/11/09/vue-xue-xi-3-vue-zu-jian/"/>
    <id>https://laobameishijia.github.io/2021/11/09/vue-xue-xi-3-vue-zu-jian/</id>
    <published>2021-11-09T09:25:00.000Z</published>
    <updated>2021-11-15T03:37:29.924Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-js组件"><a href="#Vue-js组件" class="headerlink" title="Vue.js组件"></a>Vue.js组件</h1><h2 id="组件的基本使用"><a href="#组件的基本使用" class="headerlink" title="组件的基本使用"></a>组件的基本使用</h2><p>前端组件化开发是现在前端框架中一个非常重要的思想,对页面内容进行拆分过后，便可独立维护,可复用性大大提高了。哪里出现问题，直接去修改对应的组件即可。</p><h3 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h3><p>全局注册的组件可以在任何一个div中使用该组件</p><h3 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h3><p>在实例选项中注册组件，这个组件只能在这个实例中使用</p><h3 id="组件中的data"><a href="#组件中的data" class="headerlink" title="组件中的data"></a>组件中的data</h3><p>组件中的data不是一个对象,而是一个函数。这样的好处在于每个实例可以维护一份被返回对象的独立副本。如果data是一个对象,则会影响到其他实例，因为js对象是引用类型的,return外部对象是会被共享的。所以，需要为每个组件返回一个新的对象。</p><h3 id="使用template元素创建组件"><a href="#使用template元素创建组件" class="headerlink" title="使用template元素创建组件"></a>使用template元素创建组件</h3><p>直接将组件内的元素写在<code>&lt;template&gt;&lt;/template&gt;</code>标签内,符合编写HTML标签的习惯，使代码阅读性更强。</p><h3 id="组件嵌套"><a href="#组件嵌套" class="headerlink" title="组件嵌套"></a>组件嵌套</h3><p>组件嵌套是指把组件与组件嵌套在一起,在父组件下的模板中，以标签的形式调用子组件。</p><h3 id="使用props传递数据"><a href="#使用props传递数据" class="headerlink" title="使用props传递数据"></a>使用props传递数据</h3><ul><li>props的值是字符串数组</li><li>props的值是对象</li></ul><h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2><p>组件实例的作用域是相互独立的，这就意味着不同组件之间无法相互引用。组件间的通信包括3种情况: 父组件向子组件通信；子组件向父组件通信；非父子组件之间的通信。</p><h3 id="父组件向子组件通信"><a href="#父组件向子组件通信" class="headerlink" title="父组件向子组件通信"></a>父组件向子组件通信</h3><p>通过props实现,在子组件标签章添加子组件props中创建的属性，把需要传递给子组件的值赋值给该属性。</p><p>如果传递的数据不是静态数据，可以使用<code>v-bind</code>指令来动态地绑定props的值。当父组件的数据变化时，这种变化会传递给子组件。</p><blockquote><p>父级props的更新会向下流动到子组件中，但是子组件的更新不会影响父级props。这样会防止子组件意外改变父组件的状态，从而导致应用的数据流向难以理解。</p></blockquote><h3 id="子组件向父组件通信"><a href="#子组件向父组件通信" class="headerlink" title="子组件向父组件通信"></a>子组件向父组件通信</h3><p>当子组件需要向父组件传递数据时，就要用到自定义事件。<code>v-on</code>指令除了监听DOM事件之外，还可以用于组件之间的自定义事件。子组件通过<code>$emit</code>来触发事件，父组件在子组件的自定义标签上使用<code>v-on</code>指令来监听子组件触发的自定义事件。</p><h3 id="非父子组件之前的通信"><a href="#非父子组件之前的通信" class="headerlink" title="非父子组件之前的通信"></a>非父子组件之前的通信</h3><p>非父子组件之前通信时，需要引入一个Vue实例bus作为媒介，通过bus触发事件和监听事件来实现组件之前的通信和参数传递，类似于子组件向父组件通信，但是利用了一个新的Vue实例作为媒介，而不是以当前Vue实例作为媒介。</p><h3 id="创建自定义组件"><a href="#创建自定义组件" class="headerlink" title="创建自定义组件"></a>创建自定义组件</h3><p>一般来说,就是有组件嵌套的。然后可以在全局和局部都注册该组件。父组件main-work中使用了子组件main-work-list, 并实现了组件间的通信。父组件将值下发给子组件，子组件使用<code>v-for</code>指令将列表显示出来，只要改变父组件的值，子组件中的列表值就会发生改变。当使用<code>$emit（）</code>触发事件实现选择子组件的列表项时，该列表项的值便可以传递给父组件</p><blockquote><p>通过我的观察发现，父组件中套用子组件，子组件在使用<code>$emit</code>向父组件传递数据的时候，一般都是触发的父组件中的函数或者是将父组件中实现的函数绑定在子组件的事件中。</p></blockquote><h2 id="内容分发"><a href="#内容分发" class="headerlink" title="内容分发"></a>内容分发</h2><p>使用<code>&lt;slot&gt;</code>标签作为承载分发内容的出口，当需要混合父组件的内容和子组件的模板时，就会用到<code>slot</code>。换句话说就是当组件的内容由父组件决定时，就会使用<code>slot</code>。</p><blockquote><p>emmmm….从效果的角度上面讲，和<strong>父组件传递数据到子组件</strong>是一样的，但是从代码的角度上面看的话，内容分发要简洁很多。</p></blockquote><h3 id="单个插槽"><a href="#单个插槽" class="headerlink" title="单个插槽"></a>单个插槽</h3><p>在子组件中使用特殊的<code>slot</code>元素就可以为这个子组件开启一个<code>slot</code>。父组件模板中，插入在子组件标签内的所有内容将代替子组件的<code>slot</code>标签和内容。</p><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>如果一个组件中有多个部分的内容是动态的,则需要为<code>slot</code>元素指定一个name属性，具有name属性的插槽称为具名插槽。具名插槽可以分发多个内容，也可以与单个插槽共存。</p><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>使用<code>slot</code>元素后，子组件可向父组件传递数据，从而实现与父级的通信。Vue还提供了另外一种通信方式。在父级中，具有特殊属性<code>scope</code>的<code>template</code>元素被称为作用域插槽模板。<code>scope</code>的值对应一个临时变量名,此变量用于接受从子组件中传递的props对象。</p><blockquote><p>这个例子不是很好理解，所以我把代码和效果贴上来了</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>作用域插槽<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myProps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span>read<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>&#123;&#123;myProps.text&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../js/vue.js<span class="token punctuation">"</span></span><span class="token attr-name">"</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-component'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>   template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">   &lt;div class="container">    &lt;slot text="hello from child">&lt;/slot>   &lt;/div> </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   el<span class="token operator">:</span> <span class="token string">'#app'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211112111517.png" alt="效果"></p><blockquote><p>在上述代码中，slot元素的text属性被赋值为hello from child，在父组件中使用了作用域插槽模板，在template中使用了scope属性对应的变量myProps接受子组件数据,并通过，将子组件的数据显示出来</p></blockquote><h4 id="作用域插槽2"><a href="#作用域插槽2" class="headerlink" title="作用域插槽2"></a>作用域插槽2</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211112113724.png" alt="注释掉template之后"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211112113805.png" alt="没注释template之前"></p><p>要是把这部分的template的部分注释掉的话,网页中就显示不出来之前的内容了</p><p>因为slot本身是要父组件把内容分发给子组件的，这个temlpate的过程就相当于是</p><ul><li>先利用props将数据传递给子组件</li><li>再利用scope把子组件中的props传递给父组件</li><li>最后在template中将内容分发给子组件</li></ul><p><strong>至于这里面的循环是怎么实现的我就不是很清楚了</strong></p><h2 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h2><p>通过使用保留的componet元素动态地绑定到其is特性上，可以使多个组件匹配到一个挂载点，并动态进行切换。简直就是天然的Tab标签页面之间的转换。</p><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue-js组件&quot;&gt;&lt;a href=&quot;#Vue-js组件&quot; class=&quot;headerlink&quot; title=&quot;Vue.js组件&quot;&gt;&lt;/a&gt;Vue.js组件&lt;/h1&gt;&lt;h2 id=&quot;组件的基本使用&quot;&gt;&lt;a href=&quot;#组件的基本使用&quot; class=&quot;header</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Vue" scheme="https://laobameishijia.github.io/tag/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习-2-Vue内置指令</title>
    <link href="https://laobameishijia.github.io/2021/11/08/vue-xue-xi-2-vue-nei-zhi-zhi-ling/"/>
    <id>https://laobameishijia.github.io/2021/11/08/vue-xue-xi-2-vue-nei-zhi-zhi-ling/</id>
    <published>2021-11-08T09:25:00.000Z</published>
    <updated>2021-11-15T03:37:29.924Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-js内置指令"><a href="#Vue-js内置指令" class="headerlink" title="Vue.js内置指令"></a>Vue.js内置指令</h1><ul><li><strong>基本指令</strong> <code>v-text</code>,<code>v-html</code>,<code>v-cloak</code>,<code>v-once</code>,<code>v-if</code>,<code>v-else</code>,<code>v-show</code>,<code>v-on</code>,<code>v-for</code>、数组更新</li><li><strong>v-bind指令</strong> 当数据变化时，可以对属性进行重新渲染。</li><li><strong>v-model指令</strong> 本质是监听用户的输入事件，从而更新数据。它会将Vue实例中的数据作为数据来源，当输入事件发生时，它会实时更新Vue实例中的数据，从而实现数据的双向绑定。</li></ul><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><blockquote><p>实现一个简单的购物车</p></blockquote><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211109094727.png" alt="效果"></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这个就是算个总和，没有什么难度。不过有一点需要注意。就是这个v-for的循环渲染的问题</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211109094823.png" alt="v-for循环渲染"></p><p>要么写成这样 <code>v-for=&quot;(item,index) in shopItems&quot;</code>要么写成<code>v-for=&quot;item in shopItems&quot;</code></p><p>写成 <code>v-for=&quot;(item) in shopItems&quot;</code>是没办法渲染的。 ❌</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/vue/2.4.2/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/css/bootstrap.min.css<span class="token punctuation">"</span></span>        <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sha384-zCbKRCUGaJDkqS1kPbPd7TveP5iyJE0EjAuZQTgFLD2ylzuqKfdKlfG/eSrtxUkn<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vue_det<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group list-group-horizontal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item  flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>序号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item  flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>商品名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item  flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>商品单价<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item  flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>购买数量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item  flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>操作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item,index) in shopItems<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group list-group-horizontal-sm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;item.id&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;item.name&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;item.price&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addone(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                &#123;&#123;item.number&#125;&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reduceone(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item flex-fill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteone(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        总计:&#123;&#123;allprice&#125;&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js<span class="token punctuation">"</span></span>        <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj<span class="token punctuation">"</span></span>        <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/js/bootstrap.bundle.min.js<span class="token punctuation">"</span></span>        <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sha384-fQybjgWLrvvRgtW6bFlB7jaZrFsaBXjsOMm/tB9LTS58ONXgqbR9W8oWht/amnpF<span class="token punctuation">"</span></span>        <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            el<span class="token operator">:</span> <span class="token string">'#vue_det'</span><span class="token punctuation">,</span>            data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                shopItems<span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'苹果'</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> number<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'2'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'橘子'</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> number<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'3'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'香蕉'</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span> number<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'4'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'橙子'</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span> number<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                allprice<span class="token operator">:</span> <span class="token number">0</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token function">addone</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>allprice <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allprice <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>price                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token function">reduceone</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>number <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>number <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>allprice <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allprice <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>price                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"该商品数量已经为零！"</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token function">deleteone</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//价格的变化,要在删除这个选项之前</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>allprice <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allprice <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>price<span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>number                    <span class="token keyword">this</span><span class="token punctuation">.</span>shopItems<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue-js内置指令&quot;&gt;&lt;a href=&quot;#Vue-js内置指令&quot; class=&quot;headerlink&quot; title=&quot;Vue.js内置指令&quot;&gt;&lt;/a&gt;Vue.js内置指令&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基本指令&lt;/strong&gt; &lt;code&gt;v-te</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Vue" scheme="https://laobameishijia.github.io/tag/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习-1-Vue入门</title>
    <link href="https://laobameishijia.github.io/2021/11/06/vue-xue-xi-1-vue-ru-men/"/>
    <id>https://laobameishijia.github.io/2021/11/06/vue-xue-xi-1-vue-ru-men/</id>
    <published>2021-11-06T09:25:00.000Z</published>
    <updated>2021-11-15T03:37:29.924Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一个Vue-js应用"><a href="#第一个Vue-js应用" class="headerlink" title="第一个Vue.js应用"></a>第一个Vue.js应用</h1><p>有些东西没必要都详细的列出来，列个清单知道学了啥。不会再去查就行。</p><ul><li><strong>模板</strong> 可以渲染指定的内容到挂载的位置</li><li><strong>数据</strong> 双向绑定，数据发生变化。视图也跟着发生变化</li><li><strong>方法</strong> methods中定义 <code>&#123;&#123;say()&#125;&#125;</code>引用</li><li><strong>观察|监听</strong> watch选项可以监听数据变化</li><li><strong>数据绑定</strong> 插值<code>&#123;&#123;&#125;&#125;`、表达式绑定`&#123;&#123;complete?'完成':'未完成'&#125;&#125;</code>、双向数据绑定<code>v-model</code></li><li><strong>计算属性</strong> vue实例中的一个选项</li><li><strong>生命周期</strong> 看起来是跟浏览器渲染的顺序过程有关系</li></ul><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><blockquote><p>实现一个简单的计算器</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>主要就是数据结构运算思路,由前缀表达式转换为后缀表达式，在通过后缀表达式进行运算。</p><p>因为是简单的计算器嘛，就十以内的加减乘除(<strong>不带括号的那种</strong>)。😊😊😊</p><p>参考的博客<a href="http://blog.csdn.net/antineutrino/article/details/6763722">http://blog.csdn.net/antineutrino/article/details/6763722</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>例子 1+2*3+1</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> el<span class="token operator">:</span> <span class="token string">'#vue_det'</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  one<span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>  equation<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  result<span class="token operator">:</span> <span class="token string">"hello"</span><span class="token punctuation">,</span>  <span class="token comment">// 后缀表达式</span>  op<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//运算符栈</span>  nm<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//操作数栈</span>  <span class="token comment">// 判断运算符优先级</span>  <span class="token function-variable function">priorHigher</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token string">'+'</span> <span class="token operator">||</span> a <span class="token operator">===</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>b <span class="token operator">===</span> <span class="token string">'*'</span> <span class="token operator">||</span> b <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">number</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">var</span> str <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>equation <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>equation <span class="token operator">+</span> str<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">operator</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">var</span> str <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>equation <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>equation <span class="token operator">+</span> str<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 判断运算符优先级</span>  <span class="token function-variable function">priorHigher</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token string">'+'</span> <span class="token operator">||</span> a <span class="token operator">===</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>b <span class="token operator">===</span> <span class="token string">'*'</span> <span class="token operator">||</span> b <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 中缀表达式转后缀</span>  <span class="token function-variable function">calculate</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//初始化</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>equation<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    tag <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token comment">//如果是数字就直接压栈</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>equation<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>equation<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//如果是运算符</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>tag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//运算符栈中为空，就直接压</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>equation<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>       tag <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>       <span class="token comment">//优先级比栈顶的高，那就压栈</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">priorHigher</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>equation<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>equation<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        tag <span class="token operator">=</span> <span class="token boolean">true</span>       <span class="token punctuation">&#125;</span>       <span class="token comment">//否则，弹出栈顶压入nm栈，再进行循环</span>       <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">var</span> fortag <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span>length   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fortag<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span>   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">)</span><span class="token comment">//简单的计算器给弄好了 Yes good</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//如果是数字就直接压栈</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//如果遇到了运算符,弹出栈顶的两个元素做对应的运算，再把结果压进去</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>     <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">'+'</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token operator">+</span>a<span class="token punctuation">)</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token operator">-</span>a<span class="token punctuation">)</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token operator">*</span>a<span class="token punctuation">)</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token operator">/</span>a<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>op<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一个Vue-js应用&quot;&gt;&lt;a href=&quot;#第一个Vue-js应用&quot; class=&quot;headerlink&quot; title=&quot;第一个Vue.js应用&quot;&gt;&lt;/a&gt;第一个Vue.js应用&lt;/h1&gt;&lt;p&gt;有些东西没必要都详细的列出来，列个清单知道学了啥。不会再去查就行。&lt;</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Vue" scheme="https://laobameishijia.github.io/tag/Vue/"/>
    
  </entry>
  
  <entry>
    <title>逆向工程核心原理-1</title>
    <link href="https://laobameishijia.github.io/2021/11/06/ni-xiang-gong-cheng-he-xin-yuan-li-1/"/>
    <id>https://laobameishijia.github.io/2021/11/06/ni-xiang-gong-cheng-he-xin-yuan-li-1/</id>
    <published>2021-11-06T09:25:00.000Z</published>
    <updated>2021-11-15T03:37:29.928Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="软件使用方面"><a href="#软件使用方面" class="headerlink" title="软件使用方面"></a>软件使用方面</h2><p>这些天主要就是跟着书本上的案例,使用OllyDbg对程序进行逆向分析。</p><p>跟着书上做，总体过程还是比较顺利，但是对于大段的汇编代码，阅读起来实在是费劲。这还是在有注释的情况下进行分析。如果连课本的引导和注释都没有的话，想必难度会成指数增长。如果有机会真的想了解那些做外挂的是怎么弄的。</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><h3 id="为什么32位计算机或者64位计算机可以兼容以前16位版本的程序"><a href="#为什么32位计算机或者64位计算机可以兼容以前16位版本的程序" class="headerlink" title="为什么32位计算机或者64位计算机可以兼容以前16位版本的程序"></a>为什么32位计算机或者64位计算机可以兼容以前16位版本的程序</h3><p>从汇编的角度上来看的话,16位、32位、64位 <code>AX BX AL AH</code> 等寄存器的含义都是一样的。唯一不同的地方体现在<code>EAX</code>是32位的。<code>RAX</code>是64位的。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211111210432.png" alt="x64寄存器的命名规则"></p><h3 id="LEA-Load-Effective-Address-指令和MOV指令的区别"><a href="#LEA-Load-Effective-Address-指令和MOV指令的区别" class="headerlink" title="LEA(Load Effective Address )指令和MOV指令的区别"></a>LEA(Load Effective Address )指令和MOV指令的区别</h3><p>参考链接：<a href="https://www.jianshu.com/p/3e89d834df85">https://www.jianshu.com/p/3e89d834df85</a></p><p>LEA 指令要求原操作数必须是存储单元，而且目的操作数必须是一个除段寄存器之外的16位或32位寄存器。当目的操作数是16位通用寄存器时，那么只装入有效地址的低16位。使用时要注意它与MOV指令的区别，MOV指令传送的一般是源操作数中的内容而不是地址。</p><blockquote><p>假设 SI=1000H, DS=5000H, (51000H)=1234H<br>执行指令 <code>LEA BX, [SI]</code> 后 BX=1000H<br>执行指令 <code>MOV BX,[SI]</code> 后 BX=1234H<br><code>LEA BX,XXX</code>可以用 <code>MOV BX,OFFSET XXX</code>来替代</p></blockquote><p><strong>但有些时候,必须要用LEA指令来完成某些功能，不能用MOV指令来实现，必须用LEA指令。</strong></p><p>如 <code>LEA BX,6[DI]</code></p><p>解释: 某数组含20个元素，每个元素占一个字节，序号为0~19。设DI指向数组开头处，如果把序号为6的元素的偏移地址送到BX中。就必须使用LEA指令。因为<strong>OFFSET 运算符只能返回数据标号的偏移量</strong>,然而并不是所有的内存单元都有数据标号。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;h2 id=&quot;软件使用方面&quot;&gt;&lt;a href=&quot;#软件使用方面&quot; class=&quot;headerlink&quot; title=&quot;软件使用方面&quot;&gt;&lt;/a&gt;软</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="逆向工程核心原理" scheme="https://laobameishijia.github.io/tag/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言学习-课程设计2</title>
    <link href="https://laobameishijia.github.io/2021/11/04/hui-bian-yu-yan-xue-xi-ke-cheng-she-ji-2/"/>
    <id>https://laobameishijia.github.io/2021/11/04/hui-bian-yu-yan-xue-xi-ke-cheng-she-ji-2/</id>
    <published>2021-11-04T09:25:00.000Z</published>
    <updated>2021-11-15T03:37:29.928Z</updated>
    
    <content type="html"><![CDATA[<h1 id="课程设计2"><a href="#课程设计2" class="headerlink" title="课程设计2"></a>课程设计2</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>具体的描述就不再打一遍了</p><blockquote><p>该程序的功能如下:</p><ol><li>列出功能选项，让用户通过键盘进行选择,界面如下。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211104103229.png" alt="实现页面"></li></ol></blockquote><blockquote><ol start="2"><li>用户输入1, 重新启动计算机(提示FFFF:0)</li><li>用户输入2, 引导现有的操作系统</li><li>用户输入3, 执行动态显示当前日期、时间的程序。格式: 年/月/日 时:分:秒 F1改变 Esc键后，返回主菜单</li><li>用户输入4, 更改当前的日期、时间。返回主选单。</li></ol></blockquote><h2 id="遇到的问题总结"><a href="#遇到的问题总结" class="headerlink" title="遇到的问题总结"></a>遇到的问题总结</h2><p>这里面其实很多问题本可以避免，但是在看书的时候，并没有注意到这些东西，或者说注意到了，可没有正确的理解。课程设计正如书上面说的它用到了我们所学到的所有技术，对于我们的整个学习过程是具有总结性的。</p><p>这些问题在我写程序的时候，感觉很是问题，很有总结的必要。写完之后，倒是感觉简单了一些。</p><ol><li><p><code>ds:[offset A]</code> 和 <code>offset A</code> 的区别</p><p> 前面<code>ds:[offset A]</code>取的是具体地址里面的值，<code>offset A </code>取得是偏移地址。在你写的时候，一定搞清楚，你到底是想要<code>字符串的首地址</code>还是<code>字符串首地址那个字符</code></p></li><li><p>数据/代码结构的设置问题,设置怎样的数据结构会使程序结构更清晰更明了</p><p>关于程序的逻辑具体就是把每一个菜单的总体逻辑放到一起，实现的细节写成子程序。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211104110930.png" alt="菜单4的主体逻辑"></p></li><li><p>多余代码废话的问题，很多程序写的很多余</p><p>老毛病了，这个东西在以后也得多练。</p></li><li><p>call指令和jmp指令\还有那些条件跳转的指令</p><p>关于这个我有一点问题, 条件转移只有-127-128的范围，如果我想实现按照条件执行不同的函数,那我就得先条件跳转到一个子程序的地方。然后再call,执行完再jmp回来。</p><p>有没有那种可以实现可以根据条件来call的, 但是这样一想的话，好像就多余了。因为依据现有的条件就可以实现，加上的话是不是就多余了呢。</p></li><li><p>寻址问题 ds:[bx+si]用数学的表达到底是什么样的，和你的写的是不是一样</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211104110024.png" alt="data"></p><p>本来是想着把ds弄成7E00,想着就不用在偏移量上面+7E00H了,结果发现自己是真脑残。正常的寻址过程是 <code>段寄存器*16+偏移地址 用数学化的表示是 ax=ds*16+bx</code>憨逼的你居然认为可以通过把ds设置为7E00H达到不用+7E00h的效果—真是太脑残了</p></li><li><p>子程序名称前后不一致</p><p>第一开始并没有直接设计到软盘的操作，就是先实现页面和具体的功能。后面加上软驱的操作的时候，有些子程序的名字不一样了。也没改。就导致效果出不来，还得debug好长时间。</p></li><li><p>环境问题</p><p>关于环境实在是人人都不一样,版本啊啥的，很容易就出现怎么弄，都弄不好的情况，但是总归来说还是不算太难。耐下心来取弄就行了。</p><p>我看有的<a href="https://blog.csdn.net/apollon_krj/article/details/71908442">博主</a>是直接用的winxp,但是我试过之后不行。于是我直接装了一个ms-dos的虚拟机，然后在xp系统中把汇编程序写进软驱中，再把软驱连接到ms-dos系统中，启动ms-dos系统。观察效果。</p><p>在这里还是感谢一下博主，虽然在具体的问题上面还是得自己解决。但是最起码程序是可以运行的，让我看到了具体的效果。</p></li></ol><h2 id="编程上面的提升"><a href="#编程上面的提升" class="headerlink" title="编程上面的提升"></a>编程上面的提升</h2><ol><li><p>根据功能号计算对应子程序在table中的偏移量。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211104145727.png" alt="调用不同的功能"></p></li><li><p>对于不规则的数据调用，可以先把要读取的不规则位置存放下来，用的时候按存放的顺序进行读取。这样就变不规则为规则了。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211104150011.png" alt="变不规则为规则"></p></li><li><p>如果觉得一个功能实现起来有些矛盾，可以去看看所有与之有关的程序。也许可以通过改已经实现的功能来解决。</p><p>具体到这里就是:<strong>设计更改颜色，并没有在显示的地方进行设置。这样就避开了改变颜色之后，显示的程序又把颜色给覆盖掉的问题</strong></p></li><li><p>关于debug的时候，有的时候会出现在运行循环之后，cpu那边的代码就给变化了</p><pre><code> 其实造成这种奇奇怪怪原因的无非有以下几种情况： 1.你在loop循环的过程中没有控制好临界条件 2.在loop循环的过程中,最起码在判断cx的值的时候，cx的值发生了改变 3.没有写对要写入的地址---地址搞错了等等 4.累加变化的寄存器的值，累加的不对造成越界或者写错了</code></pre></li></ol><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/1.gif" alt="1"></p><h3 id="引导现有的系统"><a href="#引导现有的系统" class="headerlink" title="引导现有的系统"></a>引导现有的系统</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/2.gif" alt="2"></p><h3 id="显示时间改变颜色返回"><a href="#显示时间改变颜色返回" class="headerlink" title="显示时间改变颜色返回"></a>显示时间改变颜色返回</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/2.gif" alt="3"></p><h3 id="设置时间"><a href="#设置时间" class="headerlink" title="设置时间"></a>设置时间</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/4.gif" alt="4"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:code,ds:data,ss:stackdata segment    db 256 dup(0)data endsstack segment    db 128 dup(0)stack endscode segmentstart:    mov ax,data    mov ds,ax        mov ax,stack    mov ss,ax    mov sp,128    mov ax,offset boot_end - offset boot    call lead_to_softdisk;将引导程序写入软盘    call boot_to_softdisk;将系统程序写入软盘    mov ax,4c00h    int 21h;将系统程序从软盘读入内存lead:    ;设置栈    mov bx,0    mov ss,bx    mov sp,7C00H    ;将系统程序从软盘读入内存    mov ax,0    mov es,ax    mov bx,7E00h    ;int13入口参数 ah 2读  3写    ;al 磁盘数| ch磁道号|cl扇区号|dh磁头号|dl驱动器号 0软驱A 80h盘C es：bx指向写入磁盘的数据    mov al,2    mov ch,0    mov cl,2    mov dh,0    mov dl,0    mov ah,2    int 13h    ;转到7E00H处执行    mov ax,0    push ax    mov ax,7E00h    push ax    retfret    lead_to_softdisk:    push cs    pop es    mov bx,offset lead    mov al,1    mov ch,0    mov cl,1    mov dh,0    mov dl,0    mov ah,3    int 13hretboot_to_softdisk:    push cs    pop es    mov bx,offset boot    mov al,2    mov ch,0    mov cl,2    mov dh,0    mov dl,0    mov ah,3    int 13hretboot:    jmp bootstart;*****************************************************************************    MENU0 db 'Welcome to system!',0    MENU1 db '1) reset pc',0      ;重新启动计算机    MENU2 db '2) start system',0  ;引导现有的操作系统    MENU3 db '3) clock',0         ;显示时间    MENU4 db '4) set clock',0     ;设置时间    TIME  db 'YY/MM/DD hh:mm:ss',0;时间显示格式    SETTIMENOTE db 'Reset the time in the following format: YY/MM/DD hh:mm:ss. eg.21/11/2 10:49:50. Press Enter to end!',0;设置时间的提示    SETTIME db '############',0;存放设置的时间    CMOS  db 9,8,7,4,2,0          ;CMOS中日期格式的存放位置    MENU    dw offset MENU0 - offset boot + 7E00h            dw offset MENU1 - offset boot + 7E00h            dw offset MENU2 - offset boot + 7E00h            dw offset MENU3 - offset boot + 7E00h            dw offset MENU4  -offset boot + 7E00h            dw 0            TABLE_FUNTION   dw offset m1-offset boot + 7E00h                    dw offset m2-offset boot + 7E00h                    dw offset m3-offset boot + 7E00h                    dw offset m4-offset boot + 7E00h;*****************************************************************************bootstart:    mov ax,0;本来是想着把ds弄成7E00,想着就不用在偏移量上面+7E00H了,结果发现自己是真脑残    mov ds,ax;正常的寻址过程是 段寄存器*16+偏移地址 用数学化的表示是 ax=ds*16+bx            ;憨逼的你居然认为可以通过把ds设置为7E00H达到不用+7E00h的效果---真是太脑残了    call clearscreen    call showmenu    call keyboardinput        cmp ah,02    jb bootstart    cmp ah,05    ja bootstart        mov bx,0    sub al,31H    mov bl,al    add bx,bx    call word ptr ds:[offset TABLE_FUNTION - offset boot + bx + 7E00h];子程序都存放到表里,按照偏移量来调用    jmp bootstart;保证一直在循环里面;==============================================================;菜单一         重新启动计算机m1:    pushf    mov ax,0FFFFH    push ax    mov ax,0    push axiret;==============================================================;菜单二         引导现有的操作系统m2:    mov bx,0            ;将C盘(驱动80H)的0面0道0扇区复制到0:7C00H处    mov es,bx    mov bx,7C00H    mov al,1    ;1个扇区    mov ah,2    ;读    mov ch,0    ;0磁道    mov cl,1    ;1扇区    mov dh,0    ;0面    mov dl,80H  ;C盘驱动    int 13H     call clearscreen;清屏    mov bx,0            ;从0:7C00开始执行，启动引导操作系统    push bx     mov bx,7C00H    push bx    retfret;==============================================================;菜单三         显示时间m3:     call clearscreen;清屏    m3_all_s:        ;------这个地方还真挺离谱的，我把m3_gettime写到循环里就不行,写成子程序反而行了。。        ;------至于为什么不行，我不清楚？？下午看一下---又莫名其妙的可以了，我真服了        ;------这种思维也挺重要的，菜单只显示菜单的基本逻辑，其他的全部弄到子程中。方便修改。思路也清楚        ;获取时间        call m3_gettime        ;显示时间        mov ax,0B800h        mov es,ax        mov si,10*160 + 30*2        mov bx,0        mov ds,bx                                       ;这种方式只是赋予了  TIME里面的YY        ; mov bx,ds:[offset TIME - offset boot + 7E00h];仔细看看这种方式到底赋给bx的是什么,我知道你想给TIME的地址，但是        mov bx,offset TIME - offset boot + 7E00h;真正应该这样写。真正要的是地址而不是值        call showmenuline        ;获取键盘输入        ;------- call keyboardinput 这里使用这个获取键盘输入的话--也就是获取按键是个阻塞的过程，时间的显示会卡住        in al,60h        cmp al,01;Esc返回主页面        je m3_backtostart        cmp al,3BH;F1返回改变颜色        je F1_m3_changecolor                ;-------该是je的地方不能用call，否则程序执行就乱跳了。汇编中难道就没有那种根据条件来call的指令？        ;-------就非得是je完之后再call，call完之后再跳回来？？    jmp m3_all_s        m3_backtostart:        ret    F1_m3_changecolor:        call m3_changecolor        jmp m3_all_s;名称: m3_changecolor;功能: 改变屏幕的颜色;参数: 无;返回: 无;应用举例: m3_changecolor:    push bx    push es    push cx    mov bx,0B800H    mov es,bx    mov bx,1    mov cx,2000    m3_changecolorloop:        inc byte ptr es:[bx]        add bx,2    loop m3_changecolorloop    pop cx    pop es    pop bxret;名称: m3_gettime;功能: 从CMOS中读取时间，将时间按照格式写入data段中的TIME中;参数: 无;返回: 无;应用举例: 21/11/1 13:30:50m3_gettime:    push si    push cx    push bx    ;往ds:TIME中写入    mov si,0    mov bx,0    mov cx,6    m3_gettime_s:        push cx        mov al,ds:[offset CMOS- offset boot + si + 7E00h]        out 70h,al        in al,71h        mov ah,al        mov cl,4         ;------造成代码在循环之后发生改变的，是这里改变了cx的值        ;------其实造成这种奇奇怪怪原因的无非有以下几种情况：        ;------1.你在loop循环的过程中没有控制好临界条件        ;------2.在loop循环的过程中,最起码在判断cx的值的时候，cx的值发生了改变        ;------3.没有写对要写入的地址---地址搞错了等等        ;------4.累加变化的寄存器的值，累加的不对        shr ah,cl;右移四位，取高四位        and al,00001111b;取低四位                add ah,30h        add al,30h        mov ds:[offset TIME - offset boot + bx + 7E00h],ah        mov ds:[offset TIME - offset boot + bx + 1 + 7E00h],al                add bx,3        add si,1        pop cx    loop m3_gettime_s        pop bx    pop cx    pop siret;==============================================================;菜单四         设置时间---回车结束m4:    push bx    push dx    push cx    ;清屏    call clearscreen    ;显示提示    mov ax,0b800h    mov es,ax    mov si,10*160    mov bx,0    mov ds,bx    mov bx,offset SETTIMENOTE- offset boot + 7E00h    call showmenuline        ;放置光标    mov ah,2    mov bh,0    mov dh,13    mov dl,30    int 10h    ;接受输入,设置CMOS时间    call getstr    call settimetocmos    ; 光说不返回到主菜单呢,你看看哪里有start？！ 早就改成bootstart了    ; ;返回主菜单    ; m4_backtostart:    ;     call start    pop cx    pop dx    pop bxret;==============================================================;将设置好的时间写入CMOS中settimetocmos:    push bx    push cx    push dx    push si    mov si,offset SETTIME- offset boot + 7E00h    mov cx,6    mov bx,0    mov ds,bx    settimetocmos_s:        push cx        mov word ptr dx,[si]        sub dx,3030H        mov cl,4        shl dl,cl        and dh,00001111B        or dl,dh;从两个ACII码---16位转换成BCD码--8位        mov al,ds:[offset CMOS- offset boot + bx + 7E00h]        out 70H,al    ;将al送入地址端口70h        mov al,dl        out 71H,al ;    将数据写入CMOSRAM时钟                add bx,1        add si,2        pop cx    loop settimetocmos_s    pop si    pop dx    pop cx    pop bxret;==============================================================;字符串接收getstr:    push ax    mov si,offset SETTIME - offset boot + 7E00h    getstrs:        mov ah,0        int 16h        cmp al,30h      ; ASCII码小于30h,说明不是数字        jb nonumber        cmp al,39H        ja nonumber     ; ASCII码大于39h,也不是数字        mov ah,0        call charstack  ; 字符入栈        mov ah,2        call charstack  ; 显示栈中的字符        jmp getstrs    nonumber:        cmp ah,0eh      ; 退格键的扫描码        je backspace            cmp ah,1ch      ; Enter键的扫描码        je enter        cmp ah,01h      ; Esc键的扫描码        je getstrs_backtostart        jmp getstrs    backspace:        mov ah,1        call charstack  ; 字符出栈        mov ah,2        call charstack  ; 显示栈中的字符        jmp getstrs    enter:              ; 输入回车之后也直接推出去        pop axret    getstrs_backtostart: ;esc返回主菜单        jmp bootstart;==============================================================;名称: keyboardinput;功能: 使用int中断获取键盘的输入;参数: 无;返回: ah为扫描码   al为ASCII码keyboardinput:    mov ax,0    int 16hret    ;==============================================================;名称: clearscreen;功能: 清除显存中第一页的显示;参数: 无;返回: 无clearscreen:    push bx    push es    push di    push cx    mov bx,0B800H    mov es,bx    mov di,0    mov bx,0700h;全部设置为黑色，填充就是0 设置颜色默认为黑底白字    mov cx,2000    clearscreenloop:            mov es:[di],bx            add di,2    loop clearscreenloop        pop cx    pop di    pop es    pop bxret;==============================================================;名称: showmenu;功能: 展示菜单;参数: 无;返回: 无showmenu:    push si    push bx    push di    push es    push cx    mov bx,0B800H   ;显存的位置    mov es,bx    mov si,10*160 + 30*2    ;mov bx,offset MENU - offset boot + 7E00h;------就得像这样先把MENU转移出来才行。。。。ds:[ds:MENU[bx]+di]这种写法也可以    ;上面这样算出来是标量啊，肯定是显示不了第一句话。你真正要的是ds:[bx]这样才是第一句的地址    ;所以在你把循环改了之后,就可以显示第一句了     mov di,0    mov cx,5    showmenu_s:        mov bx,ds:[offset MENU - offset boot + di + 7E00h];每一个字符串所对应的首地址        call showmenuline        add si,160        add di,2    loop showmenu_s    showmenu_s_ret:        pop cx        pop es        pop di        pop bx        pop siret;名称: showmenuline;功能: 显示字符串;参数: ds:bx指向要显示字符串的首地址,以0结尾;      es:si 写入显存的位置;返回: 无showmenuline:;ds:bx指向要显示的字符串的首地址,以0结尾,si标明位置    push bx    push si    showmenuline_s:        mov al,ds:[bx]        cmp al,0        je showmenuline_s_ret                mov es:[si],al        ; mov byte ptr es:[si+1],07H 在清屏的地方已经设置过了                add si,2        add bx,1    jmp showmenuline_s    showmenuline_s_ret:        pop si        pop bxret;==============================================================;子程序: 字符栈的入栈、出栈和显示;参数说明: ah=功能号 0入栈 1出栈 2显示;         ds:si指向字符栈空间;         对于0号功能:al=入栈字符;         对于1号功能:al=返回字符;         对于2号功能:dh\dl=字符串在屏幕上显示的行、列位置charstack:    jmp short charstart    table dw offset charpush- offset boot + 7e00h,offset charpop - offset boot + 7e00h,offset charshow - offset boot + 7e00h    top dw 0                        ;the top of stack    charstart:        push bx        push cx        push di        push es        push si        mov bx,0        mov ds,bx        cmp ah,2        ja sret        mov bl,ah        mov bh,0        add bx,bx        jmp word ptr ds:[offset table - offset boot + bx + 7E00h]    charpush:        mov cx,ds:[offset top - offset boot + 7E00h]        cmp cx,11        ja sret        mov bx,ds:[offset top - offset boot + 7E00h]        mov ds:[si][bx],al        inc cx        mov ds:[offset top - offset boot + 7E00h],cx         jmp sret    charpop:        mov cx,ds:[offset top - offset boot + 7E00h]        cmp cx,0        je sret        dec cx        mov ds:[offset top - offset boot + 7E00h],cx         mov bx,ds:[offset top - offset boot + 7E00h]        mov al,ds:[si][bx]        mov byte ptr ds:[si][bx],'#'        jmp sret    ;-------这里实在是没办法了,逻辑上都没有问题,用子程序显示就能显示,用书上的程序反而不显示,不知道为什么    charshow:        mov bx,0b800h        mov es,bx        mov si,13*160+30*2        mov bx,offset SETTIME - offset boot + 7E00h        call showmenuline    sret:        pop si        pop es        pop di        pop dx        pop bxret;==============================================================boot_end:nop;================================================================code endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;课程设计2&quot;&gt;&lt;a href=&quot;#课程设计2&quot; class=&quot;headerlink&quot; title=&quot;课程设计2&quot;&gt;&lt;/a&gt;课程设计2&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="汇编" scheme="https://laobameishijia.github.io/tag/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>财经-基金</title>
    <link href="https://laobameishijia.github.io/2021/11/02/cai-jing-ji-jin/"/>
    <id>https://laobameishijia.github.io/2021/11/02/cai-jing-ji-jin/</id>
    <published>2021-11-02T09:25:00.000Z</published>
    <updated>2021-11-15T03:37:29.928Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基金"><a href="#基金" class="headerlink" title="基金"></a>基金</h1><h2 id="基金的分类"><a href="#基金的分类" class="headerlink" title="基金的分类"></a>基金的分类</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211102211501.png" alt="思维导图"></p><h3 id="投资方向"><a href="#投资方向" class="headerlink" title="投资方向"></a>投资方向</h3><ul><li><strong>货币型基金</strong>: 以短期国债、中央银行票据、银行存款等货币市场工具为投资对象。货币市场基金只能以货币市场工具为投资对象。比如余额宝等。</li></ul><blockquote><p>收益稳定、流动性强、随时存取</p></blockquote><ul><li><strong>债券型基金</strong>: 绝大部分资金都用于投资债券。债券投资比例为总资金的80%以上。</li></ul><blockquote><p>比较安全、收益也比较低</p></blockquote><ul><li><strong>混合型基金</strong>: 这类基金可以投资股票，也可以投资债券，甚至货币，资产的配置相对比较灵活。</li></ul><blockquote><p>风险低于股票型又高于债卷型。混合基金会根据基金投资目标的不同而指定不同的股票和债券配置比例，据此还可以细分：如果股票配置比例较高（50-70）就叫做<strong>偏股型基金</strong>; 如果股票和债券的配置比例差不多，就叫做<strong>股债平衡型基金</strong>；灵活配置；<strong>灵活配置型基金</strong>没有具体的比例，会根据市场状况灵活调整配置。</p></blockquote><ul><li><strong>股票型基金</strong>：绝大部分资金都投资于股票，股票投资站基金资产的80%以上</li></ul><blockquote><p>高风险、高收益</p></blockquote><h3 id="投资理念"><a href="#投资理念" class="headerlink" title="投资理念"></a>投资理念</h3><p>按照投资理念来分类，可以把基金分为主动型和被动型。</p><ul><li><p><strong>主动型基金</strong>以获取超越业绩基准的超额收益为目标，由基金经理主动投资管理，所以受基金经理个人风格影响比较大，属于高收益高风险的基金。比较适合于想在短期波动中寻找超额收益的人。</p></li><li><p><strong>被动性基金</strong>又被称为指数基金，是指被动跟踪某一市场指数，以获取一个市场平均收益为目标。这类基金几乎不受基金经理的操作影响，并且长期来看，指数是不断上涨的，适合于长期定投想在长期趋势中获益的人。同时定投指数基金也是投资大神巴菲特力荐的一种投资方式。</p></li></ul><h3 id="交易渠道"><a href="#交易渠道" class="headerlink" title="交易渠道"></a>交易渠道</h3><ul><li><strong>场内基金</strong> 指证券交易所上市，就是我们平常所说的股票市场，也称为二级市场。目前国内有两家证券交易所：上海证券交易所和深圳证券交易所。</li><li><strong>场外基金</strong> 指股票交易市场以外的市场，场外基金的买卖平台很多，包括银行、证券公司，基金公司和第三方销售公司，但注意不同渠道的申赎手续费不一定相同。在天天基金上买到的基金基本上都属于场外基金。</li></ul><h3 id="募集方式"><a href="#募集方式" class="headerlink" title="募集方式"></a>募集方式</h3><ul><li><p><strong>公募基金</strong> 公开发售的形式，向广大社会公众募集资金。</p></li><li><p><strong>私募基金</strong> 非公开的募集资金，门槛高。最低都是在100万以上。</p></li></ul><h3 id="运作方式"><a href="#运作方式" class="headerlink" title="运作方式"></a>运作方式</h3><ul><li><p><strong>封闭式基金</strong> 指基金份额在基金合同期限内固定不变，即基金募集结束后不再接受投资者的申购或者赎回份额。但是基金份额可以在证券交易所上市交易。这类基金不仅规模固定，连申购赎回时间也是固定的，中间是没办法赎回的，有点像定期存款。</p></li><li><p><strong>开放式基金</strong> 开放式基金份额不固定，在基金合同约定的时间，都可以向基金公司申购或者赎回份额。开放式基金也可以在证券交易所上市交易，比较灵活，规模不固定，随时可以申购和赎回。</p></li></ul><h3 id="特殊类型的基金"><a href="#特殊类型的基金" class="headerlink" title="特殊类型的基金"></a>特殊类型的基金</h3><ul><li><p><strong>ETF基金</strong> ETF，交易型开放式指数基金，又称为交易所交易基金(Exchange Traded Funds),是一种可以在交易所交易，基金份额可变的一种特殊开放式基金，它结合了封闭式基金和开放式基金的运作特点。是一种被动式管理型指数基金，跟踪复制指数。</p></li><li><p><strong>QDII</strong> QDII是Qualified Domestic Institutional Investor (合格的境内机构投资者)的首字缩写。它是在一国境内设立，经该国有关部门批准从事境外证券市场的股票、债券等有价证券业务的证券投资基金。</p></li><li><p><strong>分级基金</strong>分级基金又称结构型基金，是指在一个投资组合下，通过对基金收益或净资产的分解，形成两级(或多级)风险收益表现有一定差异化基金份额的基金品种。</p></li></ul><h2 id="常用的指数含义"><a href="#常用的指数含义" class="headerlink" title="常用的指数含义"></a>常用的指数含义</h2><h3 id="上证指数"><a href="#上证指数" class="headerlink" title="上证指数"></a>上证指数</h3><p>上证指数很好理解，就是在上海证券交易所上市的所有股票(股票代码60开头的)，按照某种计算方法给算出来的。怎么计算出来的我们可以不用管，但我们要知道，市值越大的股票，对指数的影响就越大。</p><h3 id="深圳成指"><a href="#深圳成指" class="headerlink" title="深圳成指"></a>深圳成指</h3><p>深证成指，就是在深圳证券交易所上市的500只股票，计算出来的一个指数。这500只股票是深市中最牛逼的500只，具体的挑选方法不重要。我们需要知道的是，深证成指代表的是深市的股票走势。深证成指的影响力没有上证指数大</p><h3 id="创业板指"><a href="#创业板指" class="headerlink" title="创业板指"></a>创业板指</h3><p>是由所有创业板的股票计算出来的。这个指数的走势，代表的是市场里面中小股票的走势。不过左右的指数基本都是，市值越大，权重就越大，对指数影响越大。</p><h3 id="沪深300、中证500、上证50"><a href="#沪深300、中证500、上证50" class="headerlink" title="沪深300、中证500、上证50"></a>沪深300、中证500、上证50</h3><p>沪深300指数，可以理解为，股市中权重最大、成交最为活跃的300只股票，按照一定的计算方法计算出来的。这个指数的走势，代表的是市场中权重股的走势，比如工商银行、贵州茅台、中国石油这些股票。</p><p>现在很多业绩基准都是以沪深300作为基准进行比较。比如一个基金是否跑赢了市场，会把基金收益率和沪深300的收益率比较，而不是上面所说的上证指数（大盘）。</p><p>这是因为现在普遍认为，上证指数已经失真了，不能准确反应整个市场的走势。因为上证指数更多的是代表权重大盘股的走势，而不是整个市场。</p><p>中证500指数，可以看作是，排在上面所说的300只股票之后的500只，也就是排名301-800的那些股票，按照一定的方法计算出来的。这个指数的走势，代表的是市场里面中小股票的走势，排名301-800的500只股票，一般是细分行业的龙头股。比如通策医疗、宝信软件、绝味食品等。</p><p>上证50指数，是由上海证券交易所上市的（股票代码60开头的），权重最大，成交最活跃的50只股票，计算出来的一个指数。这个指数的走势，代表的是权重中的权重股的走势。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基金&quot;&gt;&lt;a href=&quot;#基金&quot; class=&quot;headerlink&quot; title=&quot;基金&quot;&gt;&lt;/a&gt;基金&lt;/h1&gt;&lt;h2 id=&quot;基金的分类&quot;&gt;&lt;a href=&quot;#基金的分类&quot; class=&quot;headerlink&quot; title=&quot;基金的分类&quot;&gt;&lt;/a&gt;基金的分</summary>
      
    
    
    
    <category term="财经" scheme="https://laobameishijia.github.io/category/%E8%B4%A2%E7%BB%8F/"/>
    
    
    <category term="基金" scheme="https://laobameishijia.github.io/tag/%E5%9F%BA%E9%87%91/"/>
    
  </entry>
  
</feed>
