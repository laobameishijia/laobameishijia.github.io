<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>老叭美食家</title>
  
  <subtitle>永远热爱生活</subtitle>
  <link href="https://laobameishijia.github.io/atom.xml" rel="self"/>
  
  <link href="https://laobameishijia.github.io/"/>
  <updated>2021-11-21T11:36:23.677Z</updated>
  <id>https://laobameishijia.github.io/</id>
  
  <author>
    <name>老叭美食家</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>毕设-Fuzz-1</title>
    <link href="https://laobameishijia.github.io/2021/11/19/bi-she-fuzz-1/"/>
    <id>https://laobameishijia.github.io/2021/11/19/bi-she-fuzz-1/</id>
    <published>2021-11-19T09:25:00.000Z</published>
    <updated>2021-11-21T11:36:23.677Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Fuzzer"><a href="#Fuzzer" class="headerlink" title="Fuzzer"></a>Fuzzer</h2><p>这是在GitHub上,找到的一个在线的书籍,讲解Fuzz的<br><a href="https://hub.gke2.mybinder.org/user/uds-se-fuzzingbook-ktofhf06/notebooks/docs/notebooks/Fuzzer.ipynb">https://hub.gke2.mybinder.org/user/uds-se-fuzzingbook-ktofhf06/notebooks/docs/notebooks/Fuzzer.ipynb</a></p><p>简单来说, 就是随机生成字符串, 在接受输入的地方及进行测试. 并且对程序崩溃的原因进行整理.</p><p>发现的问题就包括了缓冲区溢出/缺少错误输入的检查/极端值的验证等常见的错误</p><h3 id="Generic-Checker-泛型检测器"><a href="#Generic-Checker-泛型检测器" class="headerlink" title="Generic Checker(泛型检测器)"></a>Generic Checker(泛型检测器)</h3><h4 id="Memory-Accesses"><a href="#Memory-Accesses" class="headerlink" title="Memory Accesses"></a>Memory Accesses</h4><p><strong>LLVM Address Sanitizer</strong> which detects a whole set of potentially dangerous memory safety violations. 将这个嵌入到c程序中,并进行编译, 当访问越界的地址时, 会提示报错, 被给出一个详细的说明.</p><p>![报错示意图]](<a href="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211119145215.png">https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211119145215.png</a>)</p><p>HeartBleed bug 就是这么被测试出来的. OpenSSl库里面的漏洞</p><h4 id="Information-Leak"><a href="#Information-Leak" class="headerlink" title="Information Leak"></a>Information Leak</h4><p>信息泄露可能不仅仅出现访问非法的地址, 同样有可能出现在合法地址中. 如果合法地址中包含了不应该泄露的敏感信息. 这种情况下, <code>Address Sanitizer</code>不会报错, 因为访问的是”合法”地址.</p><p>要应对这样的问题, 需要检查返回的字符串中, 是否包含了不应该出现的信息</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211119151350.png" alt="信息泄露检查"></p><h3 id="定制检查"><a href="#定制检查" class="headerlink" title="定制检查"></a>定制检查</h3><p>充分地利用assertion, 检查重要函数的input和result. 充分使用assertion可以提高检测到泛型检查器无法检查到的错误.</p><h4 id="Check-the-integrity-of-complex-data-structures"><a href="#Check-the-integrity-of-complex-data-structures" class="headerlink" title="Check the integrity of complex data structures"></a>Check the integrity of complex data structures</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211119152317.png" alt="检查数据结构"></p><p>这个具体的检查,感觉就好像是编程中的问题, 要在改变重要数据结构前后, 都要验证数据结构的合法性. <code>. Whenever an element is added or deleted, all these consistency checks are run automatically.</code></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211119155255.png" alt="repOK()类型的检测"></p><p>虽然这些检测 <code>documents all the assumptions and checks them as well</code> 仅仅针对于我们个人写的程序和问题, 但是可以帮助我们找到问题, 同时也能帮助其他程序员理解我们的代码并避免错误.</p><h3 id="Fuzzing-结构"><a href="#Fuzzing-结构" class="headerlink" title="Fuzzing 结构"></a>Fuzzing 结构</h3><ul><li><code>Fuzzer</code> 作为<code>fuzzers</code>的一个基类 </li><li><code>Runner</code> 作为运行程序和检测的一个基类</li></ul><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211120152158.png" alt="Fuzzer"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211120152415.png" alt="Runner"></p><h3 id="Lesson-Learned"><a href="#Lesson-Learned" class="headerlink" title="Lesson Learned"></a>Lesson Learned</h3><ul><li>Randomly generating inputs (“fuzzing”) is a simple, cost-effective way to quickly test arbitrary programs for their robustness.</li><li>Bugs fuzzers find are mainly due to errors and deficiencies in input processing.</li><li>To catch errors, have as many consistency checkers as possible.</li></ul><h2 id="Mutation-Based-Fuzzing"><a href="#Mutation-Based-Fuzzing" class="headerlink" title="Mutation-Based Fuzzing"></a>Mutation-Based Fuzzing</h2><p>这是上一本在结尾时推荐出来的<br><a href="https://hub.gke2.mybinder.org/user/uds-se-fuzzingbook-whv6pm2k/notebooks/docs/notebooks/MutationFuzzer.ipynb">https://hub.gke2.mybinder.org/user/uds-se-fuzzingbook-whv6pm2k/notebooks/docs/notebooks/MutationFuzzer.ipynb</a></p><p>最初所生产出来的模糊字符串, 很多都是无效的. 在测验的过程中, 很快就被程序拒绝了. 现在提出的方法叫 <strong>基于突变的Fuzz</strong>, 要在现有输入上做微小的改动, 使其仍然保持有效性. </p><p>看到后面还得需要去在补前面的<code>Code Coverage</code>的定义😱😱😱😱</p><hr><h2 id="已补完😀😀"><a href="#已补完😀😀" class="headerlink" title="已补完😀😀"></a>已补完😀😀</h2><p>在知道这个Code Coverage之后呢, 我们就可以把<strong>通过检测以及Code Coverage有上升/或者从未出现过</strong>的fuzz字符串保存下来.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">class MutationCoverageFuzzer(MutationFuzzer):    def reset(self):        super().reset()        self.coverages_seen &#x3D; set()        # Now empty; we fill this with seed in the first fuzz runs        self.population &#x3D; []    def run(self, runner):        &quot;&quot;&quot;Run function(inp) while tracking coverage.           If we reach new coverage,           add inp to population and its coverage to population_coverage        &quot;&quot;&quot;        result, outcome &#x3D; super().run(runner)        new_coverage &#x3D; frozenset(runner.coverage())        if outcome &#x3D;&#x3D; Runner.PASS and new_coverage not in self.coverages_seen:            # We have new coverage            self.population.append(self.inp)            self.coverages_seen.add(new_coverage)        return result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>The nice thing about this strategy is that, applied to larger programs, it will happily explore one path after the other – covering functionality after functionality. All that is needed is a means to capture the coverage.</p></blockquote><h3 id="Lessons-Learned"><a href="#Lessons-Learned" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h3><ul><li>Randomly generated inputs are frequently invalid – and thus exercise mostly input processing functionality.</li><li>Mutations from existing valid inputs have much higher chances to be valid, and thus to exercise functionality beyond input processing.</li></ul><h2 id="Code-Coverage"><a href="#Code-Coverage" class="headerlink" title="Code Coverage"></a>Code Coverage</h2><p>如何衡量这些测试的有效性?一种方法是检查发现的漏洞的数量(和严重性);但是如果bug非常少，我们就需要一个代理来确定通过测试发现bug的可能性。在这一章中，我们介绍了代码覆盖率的概念，衡量在测试运行期间程序的哪些部分实际上被执行了。对于试图覆盖尽可能多的代码的测试生成器来说，度量这样的覆盖率也是至关重要的。</p><h3 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h3><p>黑盒测试的优点是可以在指定的行为中发现出错误. 缺点是 以实现的行为通常比指定的行为覆盖更多的领域, 因此仅基于规范的测试通常不能覆盖所有的实现细节.</p><blockquote><p>这话没毛病,毕竟是黑盒测试, 也仅仅只能通过函数的行为来进行测试. 并不能窥探到所有的实现细节.</p></blockquote><h3 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h3><p>白盒测试的优点是它可以找到以实现的功能里面的错误. 即使规范中没有提供详细的细节.  但是它可能会漏掉没有实现的行为.如果有些特定的功能没有实现, 白盒测试就不能找到它.</p><blockquote><p>这最后一句话确定不是废话吗? 没实现就没有代码, 没有代码 那白盒测试肯定是测试不到的啊! 是我理解有问题吗?</p></blockquote><h3 id="运行时跟踪"><a href="#运行时跟踪" class="headerlink" title="运行时跟踪"></a>运行时跟踪</h3><p>这里介绍了py中的一个函数<code>sys.settrace(f)</code>, 这个函数在程序运行的每一行都会调用.可以用它来获取执行程序的行数\当前属于哪个函数体\当前的局部变量和参数</p><blockquote><p>当然C语言里面也有, 只不过要在编译的时候加一些参数, 然后运行之后,会产生<code>.gcov</code>的文件,里面包含了类似py中<code>sys.settrace()</code>函数捕捉到的信息</p></blockquote><p>![sys.settrace()的运行效果]](<a href="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211120205202.png">https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211120205202.png</a>)</p><h3 id="Lessons-Learned-1"><a href="#Lessons-Learned-1" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h3><ul><li>Coverage metrics are a simple and fully automated means to approximate how much functionality of a program is actually executed during a test run.</li><li>A number of coverage metrics exist, the most important ones being statement coverage and branch coverage.</li><li>In Python, it is very easy to access the program state during execution, including the currently executed code. </li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Fuzzer&quot;&gt;&lt;a href=&quot;#Fuzzer&quot; class=&quot;headerlink&quot; title=&quot;Fuzzer&quot;&gt;&lt;/a&gt;Fuzzer&lt;/h2&gt;&lt;p&gt;这是在GitHub上,找到的一个在线的书籍,讲解Fuzz的&lt;br&gt;&lt;a href=&quot;https://hub.</summary>
      
    
    
    
    <category term="毕设" scheme="https://laobameishijia.github.io/category/%E6%AF%95%E8%AE%BE/"/>
    
    
    <category term="Fuzz" scheme="https://laobameishijia.github.io/tag/Fuzz/"/>
    
  </entry>
  
  <entry>
    <title>财经-基金-3-评价指标</title>
    <link href="https://laobameishijia.github.io/2021/11/17/cai-jing-ji-jin-3-ping-jie-zhi-biao/"/>
    <id>https://laobameishijia.github.io/2021/11/17/cai-jing-ji-jin-3-ping-jie-zhi-biao/</id>
    <published>2021-11-17T09:25:00.000Z</published>
    <updated>2021-11-21T11:36:23.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="评价基金的方法"><a href="#评价基金的方法" class="headerlink" title="评价基金的方法"></a>评价基金的方法</h1><p>![指数基金估值方法分析汇总]](<a href="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211117201731.png">https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211117201731.png</a>)</p><h2 id="博格公式法"><a href="#博格公式法" class="headerlink" title="博格公式法"></a>博格公式法</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211117201432.png" alt="指导方法"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;评价基金的方法&quot;&gt;&lt;a href=&quot;#评价基金的方法&quot; class=&quot;headerlink&quot; title=&quot;评价基金的方法&quot;&gt;&lt;/a&gt;评价基金的方法&lt;/h1&gt;&lt;p&gt;![指数基金估值方法分析汇总]](&lt;a href=&quot;https://laoba-1304292449</summary>
      
    
    
    
    <category term="财经" scheme="https://laobameishijia.github.io/category/%E8%B4%A2%E7%BB%8F/"/>
    
    
    <category term="基金" scheme="https://laobameishijia.github.io/tag/%E5%9F%BA%E9%87%91/"/>
    
  </entry>
  
  <entry>
    <title>逆向工程核心原理-5-UPackPE文件头分析</title>
    <link href="https://laobameishijia.github.io/2021/11/17/ni-xiang-gong-cheng-he-xin-yuan-li-5-upackpe-wen-jian-tou-fen-xi/"/>
    <id>https://laobameishijia.github.io/2021/11/17/ni-xiang-gong-cheng-he-xin-yuan-li-5-upackpe-wen-jian-tou-fen-xi/</id>
    <published>2021-11-17T09:25:00.000Z</published>
    <updated>2021-11-21T11:36:23.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UPackPE文件头分析"><a href="#UPackPE文件头分析" class="headerlink" title="UPackPE文件头分析"></a>UPackPE文件头分析</h1><h2 id="分析UPack的PE头"><a href="#分析UPack的PE头" class="headerlink" title="分析UPack的PE头"></a>分析UPack的PE头</h2><h3 id="重叠文件头"><a href="#重叠文件头" class="headerlink" title="重叠文件头"></a>重叠文件头</h3><p>重叠文件头是其他压缩器经常使用的技法，借助该方法可以把MZ文件头(IMAGE_DOS_HEADER)与PE文件头(IMAGE_NT_HEADERS)巧妙的叠加在一起。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118092257.png" alt="重叠文件头的对比">  </p><p>MZ文件头(IMAGE_DOS_HEADER)中有以下两个重要成员。其余的成员对程序运行无意义</p><blockquote><p>offset(0) e_magic : Magic number = 4D5A(‘MZ’)<br>offset(3C) e_lfanew: File address of new exe header</p></blockquote><p>问题在于PE文件格式规范，IMAGE_NT_HEADERS的起始位置是”可变的”，由e_lfanew来决定。</p><p><strong>正常的情况下</strong>：<code>e_lfanew = MZ文件头大小(40) + DOS存根大小(可变：VC++下为A0) = E0</code></p><p>这并不违反规定，只是钻了规范本身的空子</p><h3 id="IMAGE-FILE-HEADER-SizeOfOptionalHeader"><a href="#IMAGE-FILE-HEADER-SizeOfOptionalHeader" class="headerlink" title="IMAGE_FILE_HEADER.SizeOfOptionalHeader"></a>IMAGE_FILE_HEADER.SizeOfOptionalHeader</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118093808.png" alt="正常与修改后的对比"></p><p>从PE头文件来看，<strong>IMAGE_OPTIONAL_HEADER</strong>的起始偏移加上<strong>SizeOfOptionalHeader</strong>的值后才是<strong>IMAGE_SECTION_HEADER</strong>。增大<strong>SizeOfOptionalHeader</strong>以后，就相当于在<strong>IMAGE_OPTIONAL_HEADER</strong>与<strong>IMAGE_SECTION_HEADER</strong>之间增加了额外的空间，Upack就在这个区域增加解压代码。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118095011.png" alt="简要原理"></p><h2 id="重叠节区"><a href="#重叠节区" class="headerlink" title="重叠节区"></a>重叠节区</h2><p>Upack重叠PE节区与文件头</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118200644.png" alt="重叠示意图"></p><p>❓❓❓❓看的不是很明白,这里面尤其第一\第二节区, 它们确实是被重叠到Header上面了,但是内容上是怎么重叠的呢?肯定要删去一些东西把~~~</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118200732.png" alt="解压后的第一个节区"></p><p>映射的话, 应该不算很难, 更改加载的虚拟地址就行了.</p><h2 id="RVA-to-RAW"><a href="#RVA-to-RAW" class="headerlink" title="RVA to RAW"></a>RVA to RAW</h2><p>利用了PE装载器发现第一个节区的PointerToRawData(10)不是FileAlignment(200)的整数倍时,它会强制将其识别为整数倍.(该情况下为0); 这样做的话, Upack文件就可以正常运行, 但是很多PE相关使用程序就会发生错误.</p><h2 id="导入表"><a href="#导入表" class="headerlink" title="导入表"></a>导入表</h2><p>这个emm,也没看懂</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118202538.png" alt="导入表的地址"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118202409.png" alt="第三个节区地址"></p><p>按照上面的将RVA-&gt;RAW</p><blockquote><p>RAW = RVA (271EE) - VirtualOffset(27000) + RawOffset(0)  = 1EE<br>注意: 3rd Section的RawOffset值不是10,而会强制变换为0</p></blockquote><p>书上说该处就是Upack节区隐藏玄机的地方</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118203940.png" alt="文件偏移IEE--第一个结构体"></p><p>上面所选区域就是IMAGE_IMPORT_DESCRIPTOR结构体组成的数组, 偏移IEE~201为第一个结构体, 其后既不是第二个结构体, 也不是NULL结构体</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118203752.png" alt="3rd节区映射到内存"></p><hr><p>❓❓❓❓ 为什么偏移200是第三个节区的结束呢? 之前的节区表里面, 写的是<code>RawSize为 1F0</code></p><hr><p>从文件看导入表好像是坏了,但是在加载到内存里面之后,看起来又是好的. </p><h2 id="导入地址表"><a href="#导入地址表" class="headerlink" title="导入地址表"></a>导入地址表</h2><p>通过上面结构体的数据, 得到</p><table><thead><tr><th>偏移</th><th>成员</th><th>RVA</th></tr></thead><tbody><tr><td>1EE</td><td>OriginalFistThunk(INT)</td><td>0</td></tr><tr><td>1FA</td><td>Name</td><td>2</td></tr><tr><td>1FE</td><td>FirstThunk(IAT)</td><td>11E8</td></tr></tbody></table><p>Name 的RVA是2, 它属于Header区域,因为第一个节区是从RVA 1000开始的.</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118210327.png" alt="文件偏移2"></p><p>😱😱😱这样看的话,好像Upack把数据重复利用了?! 既可以是Kernel32.dll, 又可以代表其他含义?</p><p>FirstThunk(IAT) 转换为RAW是<code>IE8</code></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118210552.png" alt="IE8"></p><p>这部分区域就是IAT域, 同时也作为INT来使用. 也就是说该处是 <code>Name Pointer(RVA)</code>数组 RVA 28/BE, 其结束是NULL. RVA位置上存放着导入函数的 <code>Ordinal+名称字符串</code></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118211013.png" alt="RVA 28"></p><p>Q: 这样的话,导入函数最终的地址放到哪里去了?? </p><p>A: 这只是压缩过的代码,最后还得解压缩,应该会回复成正常的样子的…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;UPackPE文件头分析&quot;&gt;&lt;a href=&quot;#UPackPE文件头分析&quot; class=&quot;headerlink&quot; title=&quot;UPackPE文件头分析&quot;&gt;&lt;/a&gt;UPackPE文件头分析&lt;/h1&gt;&lt;h2 id=&quot;分析UPack的PE头&quot;&gt;&lt;a href=&quot;#分析</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="逆向工程核心原理" scheme="https://laobameishijia.github.io/tag/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习-5-过渡和动画</title>
    <link href="https://laobameishijia.github.io/2021/11/16/vue-xue-xi-5-guo-du-he-dong-hua/"/>
    <id>https://laobameishijia.github.io/2021/11/16/vue-xue-xi-5-guo-du-he-dong-hua/</id>
    <published>2021-11-16T09:25:00.000Z</published>
    <updated>2021-11-21T11:36:23.677Z</updated>
    
    <content type="html"><![CDATA[<h1 id="过渡和动画"><a href="#过渡和动画" class="headerlink" title="过渡和动画"></a>过渡和动画</h1><p>Vue.js过渡可以使页面元素在出现和消失时实现多种过渡效果。Vue在插入、更新或者移除DOM时，提供了多种方式的应用过渡效果。开发者可以使用transition组件,结合CSS的动画Animation、过渡Transition或者js来操作DOM使元素动起来。</p><h2 id="CSS过渡"><a href="#CSS过渡" class="headerlink" title="CSS过渡"></a>CSS过渡</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116183654.png" alt="过渡实现过程"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">   <span class="token selector">.fade-enter, .fade-leave-to</span> <span class="token punctuation">&#123;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0  <span class="token punctuation">&#125;</span>  <span class="token selector">.fade-enter-active, .fade-leave-active</span> <span class="token punctuation">&#123;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> opacity .5s  <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show = !show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    切换按钮   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fade<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../js/vue.js<span class="token punctuation">"</span></span><span class="token attr-name">"</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">   <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span> <span class="token string">'#demo'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>     show<span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CSS动画"><a href="#CSS动画" class="headerlink" title="CSS动画"></a>CSS动画</h2><p>CSS动画的用法与CSS过渡的用法相同，其区别是，在CSS动画中，v-enter类名在节点插入DOM后不会立即删除，而是在animationend事件触发时删除。</p><blockquote><p>这个看的不是很懂，后面用到再说吧</p></blockquote><h2 id="JS过渡"><a href="#JS过渡" class="headerlink" title="JS过渡"></a>JS过渡</h2><p>Js过渡是使用javascript钩子函数实现的过渡效果，这些钩子函数可以结合CSS的transition/animations使用，也可以单独使用。</p><p>感觉用js这个从结构上面看的话，就清楚很多了</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fade<span class="token punctuation">"</span></span> <span class="token attr-name">@before-enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beforeEnter<span class="token punctuation">"</span></span> <span class="token attr-name">@enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enter<span class="token punctuation">"</span></span> <span class="token attr-name">@after-enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>afterEnter<span class="token punctuation">"</span></span> <span class="token attr-name">@before-leave</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beforeLeave<span class="token punctuation">"</span></span> <span class="token attr-name">@leave</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>leave<span class="token punctuation">"</span></span> <span class="token attr-name">@after-leave</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>afterLeave<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116185453.png" alt="控制台输出"></p><h2 id="案例–新增列表项的动画效果"><a href="#案例–新增列表项的动画效果" class="headerlink" title="案例–新增列表项的动画效果"></a>案例–新增列表项的动画效果</h2><p>具体的细节和效果用到的时候再去官网看就行了，还有很多细节和用法，就不在这赘述了。。。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">li</span> <span class="token punctuation">&#123;</span>        <span class="token property">border</span><span class="token punctuation">:</span> 1px dashed #999<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>        <span class="token property">line-height</span><span class="token punctuation">:</span> 35px<span class="token punctuation">;</span>        <span class="token property">padding-left</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">li:hover</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> cornflowerblue<span class="token punctuation">;</span>        <span class="token property">transition</span><span class="token punctuation">:</span> all 1s ease<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.v-enter,    .v-leave-to</span> <span class="token punctuation">&#123;</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>80px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.v-enter-active,    .v-leave-active</span> <span class="token punctuation">&#123;</span>        <span class="token property">transition</span><span class="token punctuation">:</span> all 0.5s ease<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 下面的 .v-move 和 .v-leave-active 配合使用，能够实现列表后续的元素，渐渐地飘上来的结果 */</span>    <span class="token selector">.v-move</span> <span class="token punctuation">&#123;</span>        <span class="token property">transition</span><span class="token punctuation">:</span> all 0.5s ease<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.v-leave-active</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>                学号:                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>                姓名:                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>添加<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 在实现列表过渡的时候，如果需要过渡的元素，是通过 v-for 循环渲染出来的，不能使用 transition 包裹，需要使用 transitionGroup --></span>            <span class="token comment">&lt;!-- 如果要为 v-for 循环创建的元素设置动画，必须为每一个元素设置：key 属性 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition-group</span> <span class="token attr-name">appear</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 删除需要传入i --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, i) in list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>del(i)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    &#123;&#123; item.id &#125;&#125; --- &#123;&#123; item.name &#125;&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition-group</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../js/vue.js<span class="token punctuation">"</span></span><span class="token attr-name">"</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            id<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            name<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span><span class="token comment">//这两个是为添加学号和姓名而设置的</span>            list<span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'张三'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'李四'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'王五'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'赵四'</span> <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">""</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function">del</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 从 i 的地方删，删除一个</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;过渡和动画&quot;&gt;&lt;a href=&quot;#过渡和动画&quot; class=&quot;headerlink&quot; title=&quot;过渡和动画&quot;&gt;&lt;/a&gt;过渡和动画&lt;/h1&gt;&lt;p&gt;Vue.js过渡可以使页面元素在出现和消失时实现多种过渡效果。Vue在插入、更新或者移除DOM时，提供了多种方式的应</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Vue" scheme="https://laobameishijia.github.io/tag/Vue/"/>
    
  </entry>
  
  <entry>
    <title>阅读清单</title>
    <link href="https://laobameishijia.github.io/2021/11/16/ge-lei-shu-ji-yue-du-qing-dan/"/>
    <id>https://laobameishijia.github.io/2021/11/16/ge-lei-shu-ji-yue-du-qing-dan/</id>
    <published>2021-11-16T09:25:00.000Z</published>
    <updated>2021-11-21T11:36:23.677Z</updated>
    
    <content type="html"><![CDATA[<h1 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h1><h2 id="财经类"><a href="#财经类" class="headerlink" title="财经类"></a>财经类</h2><ul><li><p><input checked="" disabled="" type="checkbox">  货币战争4 战国时代 宋鸿兵</p><p>  <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116202829.png" alt="货币战争4 战国时代"></p><blockquote><p>从国际角度出发去阐述国际金融格局和现象，感觉需要很多的金融背景知识。印象比较深刻地是作者对于华为公司的预言，还有一些关于其他国家和我们国家经济政策的见地。比较深奥，还不是本人理解的。。。👻</p></blockquote></li><li><p><input checked="" disabled="" type="checkbox">  解读基金: 我的投资观与实践(修订版) 季凯帆</p><p>  <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116201850.png" alt="解读基金: 我的投资观与实践(修订版)"></p><blockquote><p>这本书主要是将作者本人是如何进行投资的，风险控制/基金组合/投资比例等等，主要是对投资基金的基础知识和常识进行了梳理。感觉我看完之后也没有记住多少东西。🙂</p></blockquote></li><li><p><input checked="" disabled="" type="checkbox">  货币 b站视频</p><p>  <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116203328.png" alt="货币"></p><blockquote><p>从历史的角度上分析，货币的由来/作用，对人类社会产生的影响，当今社会面临的货币问题等等。也不算很深奥。但是好像也没有说记住很多东西。。😔</p></blockquote></li><li><p><input disabled="" type="checkbox">  指数基金投资指南 银行螺丝钉</p><p>  <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116202410.png" alt="指数基金投资指南"></p><blockquote><p>我觉得这本书写的是比较清楚的，最起码在思路上比较明了。先给你一些建议，然后解释为什么选择指数基金？常见的指数基金的种类。之后是怎么挑选，采用什么方式买/以及用多少钱买等问题</p></blockquote></li></ul><h2 id="专业类"><a href="#专业类" class="headerlink" title="专业类"></a>专业类</h2><ul><li><p><input checked="" disabled="" type="checkbox">  汇编语言 王爽</p><p>  <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116203804.png" alt="汇编语言"></p><blockquote><p>这本书真的是写的非常好了，我一个不怎么看的下去的人，都是把整本书的练习和实验做完了。感觉收获真的是非常大，也解决了我之前在上课的时候产生的很多疑问。非常nice！🐮</p></blockquote></li><li><p><input disabled="" type="checkbox">  程序是怎样运行的</p><p>  <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211117185605.png" alt="程序是怎样运行的"></p><blockquote><p>这个我觉得收获也是蛮大的，写的也是比较通俗易懂。</p></blockquote></li><li><p><input disabled="" type="checkbox">  逆向工程 核心原理 李承远</p><p>  <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116204238.png" alt="逆向工程 核心原理"></p><blockquote><p>本书里面的实验和讲解也是比较清楚的。思想很好，什么弄不懂，就边学边弄，慢慢就会了~~~😁</p></blockquote></li><li><p><input disabled="" type="checkbox">  Vue应用程序开发 </p><blockquote><p>这不放图片了，反正网上一大堆。也基本上就是系统的浏览一下，好对Vue.js有个整体清晰地认识。</p></blockquote></li><li><p><input disabled="" type="checkbox">  Vue.js+Node.js全栈开发实践</p><blockquote><p>同上</p></blockquote></li></ul><h2 id="通识类"><a href="#通识类" class="headerlink" title="通识类"></a>通识类</h2><ul><li><input disabled="" type="checkbox"> 零基础通识知识笔记 山形浩生  没找到图就不放了。。。<blockquote><p>写的比较有意思，上面的插画很通俗易懂。就是在这上面知道了商汤公司—做Al图象识别的。后来，还在和大佬的谈话中听到了，他搞到了这个公司在上海总部的实习。~~~ 差距啊🚀</p></blockquote></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;书籍&quot;&gt;&lt;a href=&quot;#书籍&quot; class=&quot;headerlink&quot; title=&quot;书籍&quot;&gt;&lt;/a&gt;书籍&lt;/h1&gt;&lt;h2 id=&quot;财经类&quot;&gt;&lt;a href=&quot;#财经类&quot; class=&quot;headerlink&quot; title=&quot;财经类&quot;&gt;&lt;/a&gt;财经类&lt;/h2&gt;&lt;u</summary>
      
    
    
    
    <category term="计划" scheme="https://laobameishijia.github.io/category/%E8%AE%A1%E5%88%92/"/>
    
    
    <category term="阅读" scheme="https://laobameishijia.github.io/tag/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>逆向工程核心原理-4-基址重定位表</title>
    <link href="https://laobameishijia.github.io/2021/11/16/ni-xiang-gong-cheng-he-xin-yuan-li-4-ji-zhi-chong-ding-wei-biao/"/>
    <id>https://laobameishijia.github.io/2021/11/16/ni-xiang-gong-cheng-he-xin-yuan-li-4-ji-zhi-chong-ding-wei-biao/</id>
    <published>2021-11-16T09:25:00.000Z</published>
    <updated>2021-11-21T11:36:23.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基址重定位表"><a href="#基址重定位表" class="headerlink" title="基址重定位表"></a>基址重定位表</h1><h2 id="PE重定位"><a href="#PE重定位" class="headerlink" title="PE重定位"></a>PE重定位</h2><p>PE重定位就是本来我要加载到内存中的位置被别人占了，所以我只能加载到其他地方，这一过程发生的一系列处理行为就是PE重定位。</p><h2 id="PE重定位时执行的操作"><a href="#PE重定位时执行的操作" class="headerlink" title="PE重定位时执行的操作"></a>PE重定位时执行的操作</h2><p>使硬编码在程序中的内存地址随着当前加载地址变化而变化的处理过程就是PE重定位。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116094935.png" alt="notepad的ImageBase"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116095015.png" alt="notepad的EP代码"></p><p>硬编码地址以ImageBase(01000000)为基准。生成构建notepad.exe文件时，由于无法预测程序被实际加载到哪个地址，所以记录硬编码地址时，以ImageBase为基准。但在运行的瞬间，经过PE重定位后，这些地址全部以加载地址为基准变换，使得最后程序得以正常进行。</p><p>上图中所有硬编码的地址都要根据加载地址的不同而变化。</p><h2 id="PE重定位操作的原理"><a href="#PE重定位操作的原理" class="headerlink" title="PE重定位操作的原理"></a>PE重定位操作的原理</h2><blockquote><p>在应用程序中查找硬编码的地址位置<br>读取值后，减去ImageBase(VA-&gt;RVA)<br>加上实际加载地址(RVA-&gt;VA)</p></blockquote><h3 id="基址重定位表-1"><a href="#基址重定位表-1" class="headerlink" title="基址重定位表"></a>基址重定位表</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116101030.png" alt="基址重定位表"></p><p>TypeOffset的低12位是真正的位移，该位移值基于Virtual Address的偏移。所以程序中使用硬编码地址的偏移使用下面等式换算。</p><p><strong>VirtualAddress(1000) + Offset(420) = 1420(RVA)</strong></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116102150.png" alt="硬编码地址示例"></p><p>notepad.exe被加载到AF0000地址处。故<code>RVA 1420</code>即为<code>VA AF1420</code>，该地址处存储着IAT地址(VA,AF10C4<strong>指其调用函数地址的存放地址</strong>)。并且该值经过PE重定位而发生了变化。使用相同的原理，AF142D、AF1436地址的内容也都是硬编码到程序中的地址值，该偏移可以在重定位表中求得。</p><blockquote><p>TypeOffset项中指向位移的低12位拥有的最大地址值为1000.为了表示更大的地址，要添加1个与其对应的块，由于这些块以数组形式罗列，故称为重定位表<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116101231.png" alt="第二个块"></p></blockquote><h2 id="从可执行文件中删除-reloc节区"><a href="#从可执行文件中删除-reloc节区" class="headerlink" title="从可执行文件中删除.reloc节区"></a>从可执行文件中删除.reloc节区</h2><p>这个按照书上面操作之后显示不出来了，估计是版本更新之类的问题。</p><p>010Editor这个工具挺好用的</p><p>但是好像没没找到那种批量修改/填充的，就比如我想把某个地方全部填充为0，我还得一个一个的改。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基址重定位表&quot;&gt;&lt;a href=&quot;#基址重定位表&quot; class=&quot;headerlink&quot; title=&quot;基址重定位表&quot;&gt;&lt;/a&gt;基址重定位表&lt;/h1&gt;&lt;h2 id=&quot;PE重定位&quot;&gt;&lt;a href=&quot;#PE重定位&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="逆向工程核心原理" scheme="https://laobameishijia.github.io/tag/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习-4-过滤器和自定义指令</title>
    <link href="https://laobameishijia.github.io/2021/11/15/vue-xue-xi-4-guo-lu-qi-he-zi-ding-yi-zhi-ling/"/>
    <id>https://laobameishijia.github.io/2021/11/15/vue-xue-xi-4-guo-lu-qi-he-zi-ding-yi-zhi-ling/</id>
    <published>2021-11-15T09:25:00.000Z</published>
    <updated>2021-11-21T11:36:23.677Z</updated>
    
    <content type="html"><![CDATA[<h1 id="过滤器和自定义指令"><a href="#过滤器和自定义指令" class="headerlink" title="过滤器和自定义指令"></a>过滤器和自定义指令</h1><p>Vue.js过滤器本质上就是一个函数，其作用是在用户输入数据后，<strong>对数据进行处理</strong>–<code>处理成我们想要的样子</code>，并返回一个处理结果。</p><h2 id="过滤器的注册和使用"><a href="#过滤器的注册和使用" class="headerlink" title="过滤器的注册和使用"></a>过滤器的注册和使用</h2><p><strong>形式一–全局</strong>:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">v-model.number</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>val<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   &#123;&#123;val|currencyDisplay&#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../js/vue.js<span class="token punctuation">"</span></span><span class="token attr-name">"</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">   Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'currencyDisplay'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token string">'$'</span><span class="token operator">+</span>val<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span><span class="token punctuation">&#123;</span>     val<span class="token operator">:</span><span class="token number">5.35353</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>形式二–局部</strong>:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>&#123;&#123; name | Upper &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../js/vue.js<span class="token punctuation">"</span></span><span class="token attr-name">"</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>   <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>     name<span class="token operator">:</span> <span class="token string">'zhonghui'</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token comment">// 声明一个本地的过滤器</span>   filters<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">Upper</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>形式三–叠加</strong></p><p>filterA被定义为接受单个参数的过滤器函数，表达式message的值将作为参数传递到函数中。继续调用同样被定义为接受单个函数的过滤器函数filterB，便可将filterA的结果传递到filterB中。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&#123;&#123;message|filterA|filterB&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同样也可以定义为接受多个参数的过滤器函数</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">   <span class="token selector">#app ul</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> lavender<span class="token punctuation">;</span>    <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token selector">#app h2</span><span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token selector">.more</span><span class="token punctuation">&#123;</span>    <span class="token property">padding-left</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token selector">.more span</span><span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 65px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span>25px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #006600<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>article in articles<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span> &#123;&#123;article.title&#125;&#125; 　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>summary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> &#123;&#123;article.summary|readMore(100, '...')&#125;&#125; <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>　　　　     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>more<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>阅读更多<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../js/vue.js<span class="token punctuation">"</span></span><span class="token attr-name">"</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">   Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'readMore'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">text<span class="token punctuation">,</span> length<span class="token punctuation">,</span> suffix</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> text<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span> <span class="token operator">+</span> suffix   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      articles<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>       title<span class="token operator">:</span> <span class="token string">'Vue.js过滤器'</span><span class="token punctuation">,</span>       summary<span class="token operator">:</span> <span class="token string">'过滤器本质上就是个函数，其作用在于用户在输入数据后，它能够进行处理，并返回一个处理结果。Vue.js提供了过滤器API，可以对数据进行过滤处理，并根据过滤的条件最终返回需要的结果。本章将会带你学习过滤器的注册及使用方法。'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>     <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h2><p>感觉就是个动态显示</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../js/vue.js<span class="token punctuation">"</span></span><span class="token attr-name">"</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>price<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&#123;&#123;date|dynamic(price)&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'dynamic'</span><span class="token punctuation">,</span>        <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">date<span class="token punctuation">,</span> price</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> date<span class="token punctuation">.</span><span class="token function">toLocaleDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> price<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            date<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            price<span class="token operator">:</span> <span class="token number">150</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义指令的注册和使用"><a href="#自定义指令的注册和使用" class="headerlink" title="自定义指令的注册和使用"></a>自定义指令的注册和使用</h2><p>自定义指令是用来操作DOM的，尽管Vue推崇数据驱动视图的理念，但是并非所有情况都适合数据驱动理念。自定义指令就是一种有效的补充和扩展,其不仅可用于定义任意DOM操作，还可以复用。</p><h3 id="自定义全局指令"><a href="#自定义全局指令" class="headerlink" title="自定义全局指令"></a>自定义全局指令</h3><p>自定义全局指令使用了<code>Vue.directive(指令ID，定义对象)</code>。定义对象是一个对象，这个对象上有一些指令相关的钩子函数，这些函数可以在特定的阶段执行相关的操作。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">v-red</span><span class="token punctuation">></span></span>使用自定义指令改变颜色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../js/vue.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">   Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    el<span class="token punctuation">.</span>style<span class="token punctuation">[</span><span class="token string">"color"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"red"</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>         <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h2><p>除update与componentUpdated外，每个钩子函数都含有el、binding、vnode这三个参数。参数el就是指令绑定的DOM元素，而binding是一个对象，它包含name、value、oldvalue、expression、arg、modifiers等属性。除el之外，binding、vnode属性都是制度的。</p><table><thead><tr><th>名称</th><th>Description</th></tr></thead><tbody><tr><td>bind</td><td>只调用一次，指令第一次绑定到元素时调用。在此可以进行一次性的初始化设置</td></tr><tr><td>inserted</td><td>被绑定元素插入父节点时调用(仅保证父节点存在，但不一定已被插入文档)</td></tr><tr><td>update</td><td>所在组件的VNode更新时调用，但是可能发生在其子VNode更新之前。指令的值可能发生了改变，也可能没有发生改变</td></tr><tr><td>componentUpdated</td><td>指令所在组件的VNode及其子VNode全部更新后调用</td></tr><tr><td>unbind</td><td>只在指令与元素解绑时调用一次</td></tr></tbody></table><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">v-parameter:</span>hello.a.b</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../js/vue.js<span class="token punctuation">"</span></span><span class="token attr-name">"</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'parameter'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">bind</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span>stringify    el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span>      <span class="token string">'name: '</span> <span class="token operator">+</span> <span class="token function">s</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br>'</span> <span class="token operator">+</span>      <span class="token string">'value: '</span> <span class="token operator">+</span> <span class="token function">s</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br>'</span> <span class="token operator">+</span>      <span class="token string">'expression: '</span> <span class="token operator">+</span> <span class="token function">s</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>expression<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br>'</span> <span class="token operator">+</span>      <span class="token string">'argument: '</span> <span class="token operator">+</span> <span class="token function">s</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>arg<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br>'</span> <span class="token operator">+</span>      <span class="token string">'modifiers: '</span> <span class="token operator">+</span> <span class="token function">s</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>modifiers<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br>'</span> <span class="token operator">+</span>      <span class="token string">'vnode keys: '</span> <span class="token operator">+</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">', '</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    message<span class="token operator">:</span> <span class="token string">'前端学习!'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>效果</strong></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211115191243.png" alt="效果"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;过滤器和自定义指令&quot;&gt;&lt;a href=&quot;#过滤器和自定义指令&quot; class=&quot;headerlink&quot; title=&quot;过滤器和自定义指令&quot;&gt;&lt;/a&gt;过滤器和自定义指令&lt;/h1&gt;&lt;p&gt;Vue.js过滤器本质上就是一个函数，其作用是在用户输入数据后，&lt;strong&gt;对数</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Vue" scheme="https://laobameishijia.github.io/tag/Vue/"/>
    
  </entry>
  
  <entry>
    <title>逆向工程核心原理-2-EAT</title>
    <link href="https://laobameishijia.github.io/2021/11/14/ni-xiang-gong-cheng-he-xin-yuan-li-2-eat/"/>
    <id>https://laobameishijia.github.io/2021/11/14/ni-xiang-gong-cheng-he-xin-yuan-li-2-eat/</id>
    <published>2021-11-14T09:25:00.000Z</published>
    <updated>2021-11-21T11:36:23.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EAT"><a href="#EAT" class="headerlink" title="EAT"></a>EAT</h1><p>Windows操作系统中，“库”是为了方便其他程序调用而集中包含相关函数的文件(DLL/SYS)。Win32 API是最具代表性的库，其中的kernel32.dll文件被称为最核心的库文件。</p><p>EAT是一种核心机制，它使不同的应用程序可以调用库文件中提供的函数。也就是说，只有通过EAT才能准确求得相应库中导出函数的起始地址。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211114094826.png" alt="EAT"></p><p>从库中获得函数地址的API为<code>GetProcAddress</code>函数。该API引用EAT来获取指定API的地址。</p><h2 id="GetProcAddress操作原理"><a href="#GetProcAddress操作原理" class="headerlink" title="GetProcAddress操作原理"></a>GetProcAddress操作原理</h2><ol><li>利用AddressOfName成员转到“函数名称数组”</li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211114101014.png" alt="函数名称数组"></p><ol start="2"><li>函数名称数组中存储着字符串的地址。通过比较字符串，查找指定的函数名称(此时的数组索引成为name_index)</li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211114101732.png" alt="找到函数名称"></p><ol start="3"><li>利用AddressOfNameOrdinals成员转到orinal数组。</li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211114101919.png" alt="转到orinal数组"></p><ol start="4"><li>在ordinal数组中通过name_index查找到相应的ordinal值</li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211114102139.png" alt="找到ordinal的值"></p><ol start="5"><li>利用AddressOfFunctions成员转到“函数地址数组EAT”</li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211114102324.png" alt="转到EAT"></p><ol start="6"><li>利用刚刚求到的ordinal用作数组索引，获得指定函数的起始地址。</li></ol><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211114102451.png" alt="获得起始地址"></p><blockquote><p>kernel32.dll中所有导出函数均有相应名称，AddressOfNameOrdinals数组的值以index=ordinal的形式存在。但并不是所有的DLL文件都如此，导出函数中也有一些函数没有名称。</p></blockquote><hr><blockquote><p>对于没有函数名称的导出函数，可以通过ordinal查找到它们的地址。从Ordinal值中减去IMAGE_EXPORT_DIRECTORY.base成员后得到一个值。使用该值作为“函数地址数组”索引，即可查找到相应函数的地址。</p></blockquote><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;EAT&quot;&gt;&lt;a href=&quot;#EAT&quot; class=&quot;headerlink&quot; title=&quot;EAT&quot;&gt;&lt;/a&gt;EAT&lt;/h1&gt;&lt;p&gt;Windows操作系统中，“库”是为了方便其他程序调用而集中包含相关函数的文件(DLL/SYS)。Win32 API是最具代表性的库</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="逆向工程核心原理" scheme="https://laobameishijia.github.io/tag/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>逆向工程核心原理-2-运行时压缩测试</title>
    <link href="https://laobameishijia.github.io/2021/11/14/ni-xiang-gong-cheng-he-xin-yuan-li-3-yun-xing-shi-ya-suo-ce-shi/"/>
    <id>https://laobameishijia.github.io/2021/11/14/ni-xiang-gong-cheng-he-xin-yuan-li-3-yun-xing-shi-ya-suo-ce-shi/</id>
    <published>2021-11-14T09:25:00.000Z</published>
    <updated>2021-11-21T11:36:23.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="运行时压缩测试"><a href="#运行时压缩测试" class="headerlink" title="运行时压缩测试"></a>运行时压缩测试</h1><p>运行时压缩器是针对PE文件而言的，可执行文件内部含有解压缩代码，文件在运行瞬间于内存中解压缩后执行。</p><h2 id="压缩器"><a href="#压缩器" class="headerlink" title="压缩器"></a>压缩器</h2><p><strong>使用目的</strong>: </p><ul><li>缩减PE文件大小</li><li>隐藏PE文件内部代码和资源</li></ul><h2 id="保护器"><a href="#保护器" class="headerlink" title="保护器"></a>保护器</h2><p><strong>使用目的</strong>：</p><ul><li>防止破解</li><li>保护代码与资源</li></ul><p>尤其游戏，防止你做外挂。</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>就按照书上面给出的UPX压缩器做测试了。</p><p>具体的过程我是这么理解的，UPX给代码做了一个压缩，都放到<code>.UPX1</code>段中，加载入内存后，先运行<code>.UPX1段</code>中的解压缩代码，将文件中的压缩代码放到<code>.UPX0段</code>中。在解压缩过程完成后，跳转到源程序的执行入口执行程序。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211115113255.png" alt="UPX压缩后的结构对比"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211115111250.png" alt="压缩前后的PEview"></p><p>至于最后是否是还原成跟压缩前的程序一致(其他的代码段和结构等等)，这我就有点不太清楚了。用debug工具调试，最后确实跳转到了程序入口，该入口与调试源程序的入口保持一致。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211115111627.png" alt="debug工具调试"></p><blockquote><p>通过观察内存中的数据，对比发现，解压缩之后程序没有包含原来<code>.text</code>中的<code>IMPORT Hints/Names &amp; DLL Names</code><br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211115112308.png" alt="IMPORT Hints/Names &amp; DLL Names"><br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211115112433.png" alt="内存中的数据对比"></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;运行时压缩测试&quot;&gt;&lt;a href=&quot;#运行时压缩测试&quot; class=&quot;headerlink&quot; title=&quot;运行时压缩测试&quot;&gt;&lt;/a&gt;运行时压缩测试&lt;/h1&gt;&lt;p&gt;运行时压缩器是针对PE文件而言的，可执行文件内部含有解压缩代码，文件在运行瞬间于内存中解压缩后执行。</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="逆向工程核心原理" scheme="https://laobameishijia.github.io/tag/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>财经-基金-2</title>
    <link href="https://laobameishijia.github.io/2021/11/13/cai-jing-ji-jin-2/"/>
    <id>https://laobameishijia.github.io/2021/11/13/cai-jing-ji-jin-2/</id>
    <published>2021-11-13T09:25:00.000Z</published>
    <updated>2021-11-21T11:36:23.681Z</updated>
    
    <content type="html"><![CDATA[<h2 id="投资到底赚的是谁的钱"><a href="#投资到底赚的是谁的钱" class="headerlink" title="投资到底赚的是谁的钱?"></a>投资到底赚的是谁的钱?</h2><p>首先股市投资是会创造财富的。要记住我们真正投资的不是股票，而是投资股票背后的企业。企业是会创造财富的，所以投资股市，给企业相应的资本，这些资本就会产生新的财富。这实际上就是股市会长期上涨的根本原因。投资有回报，这种回报就是由于新财富的产生而创造的。</p><p>长期来看，市场是向上的，我们赚的是投资企业的钱，所以有人说投资是赚钱的，只是赚多赚少的问题，这种说法也对，但前提是长期。</p><h2 id="各种指数和股票的对应关系"><a href="#各种指数和股票的对应关系" class="headerlink" title="各种指数和股票的对应关系"></a>各种指数和股票的对应关系</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211116113210.png" alt="指数"></p><h2 id="为什么必需消费和医药更容易赚钱？"><a href="#为什么必需消费和医药更容易赚钱？" class="headerlink" title="为什么必需消费和医药更容易赚钱？"></a>为什么必需消费和医药更容易赚钱？</h2><p>我们先来想想开公司怎样才能赚到钱？</p><p>首先我们的客户得有需求，其次我们的产品要能满足他们的需求。如果客户的需求不稳定，我们就会饥一顿饱一顿。</p><p>不过，即使客户需求稳定，我们也不一定能赚到钱。生产的产品市同质化的，客户选择我们的产品和选择别人家的没啥区别，这就是一片红海，最终竞争会导致价格战，将利润空间吞噬掉。例如智能手机行业，很多智能手机生产商都是微利。</p><p>那么，客户需求稳定，我们的产品也有别人模仿不了的优点，我们就一定能赚到钱了吗？其实也不然，有的企业需要经常再投入巨资用于维护以保证稳定的生产，赚到的钱如果不再投入，企业就会经营不下去。这个时候我们赚到的钱也不属于自己。例如某些高污染的重工业，不注重风控的金融业，即使前期赚到大钱，后期也会还回去。</p><p>所以，市场需求比较稳定，企业有护城河能保证一定的利润率，并且再投资需求小，能获得大量的自由现金流，只有容易形成这些条件的行业，才能比较容易地赚钱。</p><p><strong>为什么可口可乐和茅台一度成为价值投资的标签呢？它们比较符合上面的条件：需求受经济周期的影响小，品牌护城河能保证不错的利润率，再投资需求比较小，赚到的钱大多都是自由现金流。</strong></p><p>如果在二级市场投资这样的企业，想赚钱还要增加一个条件：企业愿意回馈股东，而不是乱花钱。如果企业是赚钱的，但是管理者把赚到的钱随意乱花、铺张浪费，或者进行风险很大的投资，也会导致企业出现问题。</p><p>任何一个行业都是国家经济不可缺少的一部分，只要走了正确的路子，任何一个行业都是能赚钱的，不过赚钱的难度上有着明显差异。</p><p>所以，消费和医药行业天生就更容易赚到钱。</p><h2 id="强周期性行业"><a href="#强周期性行业" class="headerlink" title="强周期性行业"></a>强周期性行业</h2><blockquote><p>这个就是爸爸经常说的那种，在比较便宜的时候买入，在比较贵的时候卖出，就能获得不错的收益。</p></blockquote><p>这个东西吧，要能理解行业盈利的周期，最起码你得知道大概什么阶段处于周期底部，大概什么阶段处于周期顶部。这样才能实现稳定的收益。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;投资到底赚的是谁的钱&quot;&gt;&lt;a href=&quot;#投资到底赚的是谁的钱&quot; class=&quot;headerlink&quot; title=&quot;投资到底赚的是谁的钱?&quot;&gt;&lt;/a&gt;投资到底赚的是谁的钱?&lt;/h2&gt;&lt;p&gt;首先股市投资是会创造财富的。要记住我们真正投资的不是股票，而是投资股票背</summary>
      
    
    
    
    <category term="财经" scheme="https://laobameishijia.github.io/category/%E8%B4%A2%E7%BB%8F/"/>
    
    
    <category term="基金" scheme="https://laobameishijia.github.io/tag/%E5%9F%BA%E9%87%91/"/>
    
  </entry>
  
</feed>
