<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>老叭美食家</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-06-08T08:11:20.449Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>validator使用</title>
    <link href="http://example.com/2021/06/08/validator%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2021/06/08/validator%E4%BD%BF%E7%94%A8/</id>
    <published>2021-06-08T00:00:00.000Z</published>
    <updated>2021-06-08T08:11:20.449Z</updated>
    
    <content type="html"><![CDATA[<h1 id="validator使用"><a href="#validator使用" class="headerlink" title="validator使用"></a>validator使用</h1><p>看清楚使用的是哪个包，去找相应的文档就行。</p><p>我使用的是这个validator包 :<a href="https://github.com/CSenshi/Validator">https://github.com/CSenshi/Validator</a></p><p>网上的教程很多都是 <a href="https://github.com/mansam/validator.py%EF%BC%8C%E6%89%80%E4%BB%A5%E5%9C%A8%E7%9C%8B%E4%BA%86%E6%96%87%E6%A1%A3%E5%92%8C%E6%BA%90%E7%A0%81%E4%B9%8B%E5%90%8E%EF%BC%8C%E6%8A%8A%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86%E4%B8%80%E4%B8%8B%E3%80%82">https://github.com/mansam/validator.py，所以在看了文档和源码之后，把使用方法整理一下。</a></p><p>本来是要整理一下，但是发现人家文档写的很清楚了。</p><p>链接：<a href="https://github.com/CSenshi/Validator">https://github.com/CSenshi/Validator</a></p>]]></content>
    
    
    <summary type="html">python validtor包的使用</summary>
    
    
    
    <category term="包使用" scheme="http://example.com/category/%E5%8C%85%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="python" scheme="http://example.com/tag/python/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-1-单链表输出倒数第k个节点</title>
    <link href="http://example.com/2021/06/06/leetcode1-%E5%8D%95%E9%93%BE%E8%A1%A8%E8%BE%93%E5%87%BA%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/"/>
    <id>http://example.com/2021/06/06/leetcode1-%E5%8D%95%E9%93%BE%E8%A1%A8%E8%BE%93%E5%87%BA%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/</id>
    <published>2021-06-06T00:00:00.000Z</published>
    <updated>2021-06-08T08:11:20.449Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单链表输出倒数第k个节点"><a href="#单链表输出倒数第k个节点" class="headerlink" title="单链表输出倒数第k个节点"></a>单链表输出倒数第k个节点</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>遍历得到链表的节点个数</li><li>再根据节点个数和k得到目标节点的正向序号</li><li>遍历链表找到该节点</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="单链表版"><a href="#单链表版" class="headerlink" title="单链表版"></a>单链表版</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">struct ListNode* <span class="title">getKthFromEnd</span><span class="params">(struct ListNode* head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> all = <span class="number">0</span>;</span><br><span class="line">    ListNode* temp = head;</span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        all++;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    all = all + <span class="number">1</span>;<span class="comment">//加上最后一个节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = all - k + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (num &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        temp = head;</span><br><span class="line">        <span class="keyword">while</span> (num != <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">            num--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ListNode *ahead, *after, *head, *result, *temp;</span><br><span class="line">    ahead = (struct ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListNode));</span><br><span class="line">    ahead-&gt;val = <span class="number">1</span>;</span><br><span class="line">    head = ahead;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">7</span>; i=i+<span class="number">1</span>) &#123;</span><br><span class="line">        after = (struct ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListNode));</span><br><span class="line">        after-&gt;val = i + <span class="number">1</span>;</span><br><span class="line">        after-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        ahead-&gt;next = after;</span><br><span class="line">        ahead = after;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = head;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        printf_s(<span class="string">&quot;%d-&gt;&quot;</span>, temp-&gt;val);</span><br><span class="line">        <span class="keyword">if</span> (temp-&gt;next==<span class="literal">NULL</span>) &#123;</span><br><span class="line">            printf_s(<span class="string">&quot;\n%s&quot;</span>, <span class="string">&quot;跳出循环&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    result = getKthFromEnd(head, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (result-&gt;next) &#123;</span><br><span class="line">        printf_s(<span class="string">&quot;\n%d-&gt;%d&quot;</span>, result-&gt;val, result-&gt;next-&gt;val);<span class="comment">//这里有可能result没有next节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        printf_s(<span class="string">&quot;\n%d&quot;</span>, result-&gt;val);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="双链表版"><a href="#双链表版" class="headerlink" title="双链表版"></a>双链表版</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//双向链表版</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">next</span>;</span><span class="comment">//前向指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">previous</span>;</span><span class="comment">//后向指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">struct ListNode* <span class="title">getKthFromEnd</span><span class="params">(struct ListNode* head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ListNode* temp = head;</span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (k &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (k != <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = temp-&gt;previous;</span><br><span class="line">            k--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ListNode* ahead, * after, * head, * result, * temp;</span><br><span class="line">    ahead = (struct ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListNode));</span><br><span class="line">    ahead-&gt;val = <span class="number">1</span>;</span><br><span class="line">    ahead-&gt;previous = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    head = ahead;</span><br><span class="line">    <span class="comment">//temp = ahead;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">7</span>; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">        after = (struct ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListNode));</span><br><span class="line">        after-&gt;val = i + <span class="number">1</span>;</span><br><span class="line">        after-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        after-&gt;previous = ahead;</span><br><span class="line">        </span><br><span class="line">        ahead-&gt;next = after;</span><br><span class="line">        ahead = after;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = head;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        printf_s(<span class="string">&quot;%d-&gt;&quot;</span>, temp-&gt;val);</span><br><span class="line">        <span class="keyword">if</span> (temp-&gt;next == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            printf_s(<span class="string">&quot;\n%s&quot;</span>, <span class="string">&quot;跳出循环&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    result = getKthFromEnd(head, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (result-&gt;next) &#123;</span><br><span class="line">        printf_s(<span class="string">&quot;\n%d-&gt;%d&quot;</span>, result-&gt;val, result-&gt;next-&gt;val);<span class="comment">//这里有可能result没有next节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        printf_s(<span class="string">&quot;\n%d&quot;</span>, result-&gt;val);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优秀解题思路"><a href="#优秀解题思路" class="headerlink" title="优秀解题思路"></a>优秀解题思路</h2><ul><li>初始化两个指针a,b 指向头节点</li><li>b指针先往前走k个节点</li><li>a,b指针同时向前走，直到b为空指针</li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct ListNode* <span class="title">getKthFromEnd</span><span class="params">(struct ListNode* head, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">prev</span>, *<span class="title">cur</span>;</span></span><br><span class="line">    prev = head;</span><br><span class="line">    cur = head;</span><br><span class="line">    <span class="keyword">for</span>(k=k<span class="number">-1</span>;k&gt;<span class="number">0</span>;k--)&#123;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(cur-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        prev = prev-&gt;next;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">单链表输出倒数第k个节点</summary>
    
    
    
    <category term="链表" scheme="http://example.com/category/%E9%93%BE%E8%A1%A8/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tag/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>实训day5</title>
    <link href="http://example.com/2021/06/04/%E5%AE%9E%E8%AE%ADday5/"/>
    <id>http://example.com/2021/06/04/%E5%AE%9E%E8%AE%ADday5/</id>
    <published>2021-06-04T00:00:00.000Z</published>
    <updated>2021-06-08T08:11:20.449Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring入门4"><a href="#Spring入门4" class="headerlink" title="Spring入门4"></a>Spring入门4</h1><p>项目代码:<a href="https://gitee.com/laobameishijia/guoxinan-practical-training">https://gitee.com/laobameishijia/guoxinan-practical-training</a></p><ul><li><a href="#spring%E5%85%A5%E9%97%A84">Spring入门4</a><ul><li><a href="#%E7%AE%80%E5%8D%95%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%E5%AE%9E%E7%8E%B0">简单登录页面实现</a><ul><li><a href="#%E9%A2%84%E6%9C%9F%E6%95%88%E6%9E%9C">预期效果</a></li><li><a href="#%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF">实现思路</a></li><li><a href="#%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B">实现过程</a><ul><li><a href="#%E5%88%9B%E5%BB%BA%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3%E5%B9%B6%E5%AE%9E%E7%8E%B0">创建服务接口，并实现</a></li><li><a href="#%E5%86%99%E5%A5%BDmapper%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2">写好mapper,进行数据查询</a></li><li><a href="#%E6%8E%A7%E5%88%B6%E5%99%A8%E6%B3%A8%E5%86%8C%E6%9C%8D%E5%8A%A1%E4%BC%A0%E5%8F%82">控制器注册服务，传参</a></li></ul></li></ul></li><li><a href="#springboot%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C">Springboot数据校验</a><ul><li><a href="#%E6%90%9E%E6%B8%85%E6%A5%9A%E4%BB%80%E4%B9%88%E6%98%AF%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B">搞清楚什么是面向切面编程</a></li><li><a href="#%E5%AE%9E%E4%BD%93%E7%B1%BB----%E5%86%99%E4%B8%8A%E7%9B%B8%E5%85%B3%E6%B3%A8%E8%A7%A3">实体类—-写上相关注解</a></li><li><a href="#%E6%A0%A1%E9%AA%8C%E7%B1%BB----%E6%A3%80%E9%AA%8C%E6%95%B0%E6%8D%AE%E6%8A%9B%E5%87%BA%E5%BC%82%E5%B8%B8%E7%94%B1%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%B1%BB%E8%BF%9B%E8%A1%8C%E5%A4%84%E7%90%86">校验类—-检验数据、抛出异常,由异常处理类进行处理</a></li><li><a href="#%E6%8E%A7%E5%88%B6%E5%99%A8----%E5%B0%86%E5%89%8D%E7%AB%AF%E4%BC%A0%E5%85%A5%E6%95%B0%E6%8D%AE%E4%BC%A0%E7%BB%99%E6%A0%A1%E9%AA%8C%E7%B1%BB%E8%BF%9B%E8%A1%8C%E6%A0%A1%E9%AA%8C">控制器—-将前端传入数据传给校验类进行校验</a></li></ul></li><li><a href="#springboot%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8">Springboot全局异常</a><ul><li><a href="#%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%B1%BB">异常处理类</a></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8--%E4%BB%A5%E7%99%BB%E5%BD%95%E5%BC%82%E5%B8%B8%E4%B8%BA%E4%BE%8B">自定义异常–以登录异常为例</a></li><li><a href="#%E5%9C%A8%E6%9C%8D%E5%8A%A1%E4%B8%AD%E6%8A%9B%E5%87%BA%E5%BC%82%E5%B8%B8">在服务中抛出异常</a></li></ul></li><li><a href="#spring%E6%8B%A6%E6%88%AA%E5%99%A8">Spring拦截器</a><ul><li><a href="#%E7%99%BB%E5%BD%95%E6%8B%A6%E6%88%AA%E5%99%A8">登录拦截器</a></li><li><a href="#%E6%B3%A8%E5%86%8C%E6%8B%A6%E6%88%AA%E5%99%A8">注册拦截器</a></li></ul></li></ul></li></ul><h2 id="简单登录页面实现"><a href="#简单登录页面实现" class="headerlink" title="简单登录页面实现"></a>简单登录页面实现</h2><h3 id="预期效果"><a href="#预期效果" class="headerlink" title="预期效果"></a>预期效果</h3><ul><li>登录成功，进入主页—登录成功</li><li>登录失败：告诉用户具体错误–用户不存在、密码不正确、登录失败</li><li>退出登录，提示用户是否退出，点击是删除session退出登录。</li></ul><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><ul><li>处理持久层—(操作数据库的Mapper)的代码：查询—findByName(String adminName) 找不到—提示用户不存在</li><li>处理登录业务逻辑(服务Service)—-实现登录失败、密码不正确几种情况的逻辑。</li><li>控制层—-路由控制、结果返回</li><li>表现层(视图、网页)—-ajax异步请求、Session保留会话</li></ul><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210605102000.png" alt="20210605102000"></p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="创建服务接口，并实现"><a href="#创建服务接口，并实现" class="headerlink" title="创建服务接口，并实现"></a>创建服务接口，并实现</h4><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoginService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> admin</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">JsonData <span class="title">login</span> <span class="params">(Admin admin, HttpSession session)</span></span>;</span><br><span class="line">    <span class="function">JsonData <span class="title">exit</span> <span class="params">(HttpServletRequest request)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServiceImpl</span> <span class="keyword">implements</span> <span class="title">LoginService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AdminMapper mapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  JsonData <span class="title">login</span><span class="params">(Admin admin, HttpSession session)</span></span>&#123;</span><br><span class="line">        <span class="comment">//数据校验</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//从数据库中查数据</span></span><br><span class="line">        Admin dbAdmin = mapper.findoneByName(admin.getAdminName());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (dbAdmin == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//说明用户不存在</span></span><br><span class="line"><span class="comment">//            return new JsonData(1001,&quot;用户不存在&quot;);</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LoginException(<span class="number">1001</span>,<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//判断状态</span></span><br><span class="line">        <span class="keyword">if</span>(dbAdmin.getAdminStatus()!=<span class="keyword">null</span> &amp;&amp; !(dbAdmin.getAdminStatus().equals(<span class="number">0</span>)))&#123;</span><br><span class="line"><span class="comment">//            return new JsonData(1001,&quot;用户被锁定,联系管理员&quot;);</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LoginException(<span class="number">1002</span>,<span class="string">&quot;用户被锁定,联系管理员&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//判断密码正确</span></span><br><span class="line">        <span class="keyword">if</span>(!dbAdmin.getAdminPwd().equals(admin.getAdminPwd()))&#123;</span><br><span class="line"><span class="comment">//            return new JsonData(1001,&quot;密码错误&quot;);</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LoginException(<span class="number">1003</span>,<span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存到session</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;adminName&quot;</span>,admin.getAdminName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新用户最后登录时间</span></span><br><span class="line">        dbAdmin.setLastLoginTime(<span class="keyword">new</span> Timestamp(System.currentTimeMillis()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//dbAdmin没有问题</span></span><br><span class="line">        System.out.println(dbAdmin.toString());</span><br><span class="line"></span><br><span class="line">        mapper.update(dbAdmin);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonData(<span class="number">200</span>,<span class="string">&quot;登录正常&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  JsonData <span class="title">exit</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        request.getSession().invalidate();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonData(<span class="number">200</span>,<span class="string">&quot;退出正常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="写好mapper-进行数据查询"><a href="#写好mapper-进行数据查询" class="headerlink" title="写好mapper,进行数据查询"></a>写好mapper,进行数据查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主要用来操作数据库，增删改查</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AdminMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Admin&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Admin&gt; <span class="title">fineByParam</span><span class="params">(<span class="meta">@Param(&quot;param&quot;)</span> MyParam param)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *增加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> admin</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(<span class="meta">@Param(&quot;admin&quot;)</span> Admin admin)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 真删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteTrue</span><span class="params">(<span class="meta">@Param(&quot;delete&quot;)</span> Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> admin</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="meta">@Param(&quot;admin&quot;)</span> Admin admin)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 软删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteFalse</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询单条数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Admin <span class="title">findone</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过用户名查询对应的用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Admin <span class="title">findoneByName</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量插入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertBatch</span><span class="params">(<span class="meta">@Param(&quot;adminList&quot;)</span> List&lt;Admin&gt; adminList)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> adminList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteBatch</span><span class="params">(<span class="meta">@Param(&quot;adminList&quot;)</span> List&lt;Admin&gt; adminList)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="控制器注册服务，传参"><a href="#控制器注册服务，传参" class="headerlink" title="控制器注册服务，传参"></a>控制器注册服务，传参</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginServiceImpl loginService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/verify&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span><span class="comment">//不需要进行页面跳转而是直接返回数据。</span></span><br><span class="line">    <span class="comment">//添加了@ResponseBody注解的方法，返回值会通过HTTP响应主体直接发送给浏览器。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonData <span class="title">verifyLogin</span><span class="params">(<span class="meta">@Validated</span> Admin admin, BindingResult result, HttpSession session)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//数据校验</span></span><br><span class="line">        <span class="comment">//获取所有错误</span></span><br><span class="line">        ValidatorUtil.showMsg(result);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> loginService.login(admin, session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/exit&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span><span class="comment">//不需要进行页面跳转而是直接返回数据。</span></span><br><span class="line">    <span class="comment">//添加了@ResponseBody注解的方法，返回值会通过HTTP响应主体直接发送给浏览器。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonData <span class="title">exit</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> loginService.exit(request);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Springboot数据校验"><a href="#Springboot数据校验" class="headerlink" title="Springboot数据校验"></a>Springboot数据校验</h2><h3 id="搞清楚什么是面向切面编程"><a href="#搞清楚什么是面向切面编程" class="headerlink" title="搞清楚什么是面向切面编程"></a>搞清楚什么是面向切面编程</h3><p>AOP技术利用一种称为“横切”的技术，剖解开封装对象的内部，将影响多个类的公共行为封装到一个可重用的模块中，并将其命名为Aspect切面。所谓的切面，简单来说就是与业务无关，却为业务模块所共同调用的逻辑，将其封装起来便于减少系统的重复代码，降低模块的耦合度，有利用未来的可操作性和可维护性。</p><p>例如：银行系统的取款流程和查询余额的流程</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210605095214.png" alt="20210605095214"></p><p>hibernate validator 加几个注释，由后端检验<br>一般来说，Web应用都是前后端都会对数据进行校验，前端一般是用js正则进行校验，后端主要是对传入接口的数据进行校验，不能对一些无效的数据产生返回。</p><h3 id="实体类—-写上相关注解"><a href="#实体类—-写上相关注解" class="headerlink" title="实体类—-写上相关注解"></a>实体类—-写上相关注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Admin</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Integer id;</span><br><span class="line">  <span class="meta">@NotBlank(message = &quot;用户名不能为空！&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> String adminName;</span><br><span class="line">  <span class="meta">@NotBlank(message = &quot;密码不能为空&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> String adminPwd;</span><br><span class="line">  <span class="keyword">private</span> Long adminPhone;</span><br><span class="line">  <span class="keyword">private</span> Timestamp lastLoginTime;</span><br><span class="line">  <span class="keyword">private</span> Timestamp createTime;</span><br><span class="line">  <span class="keyword">private</span> Timestamp updateTime;</span><br><span class="line">  <span class="keyword">private</span> Integer adminStatus;</span><br><span class="line">  <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="校验类—-检验数据、抛出异常-由异常处理类进行处理"><a href="#校验类—-检验数据、抛出异常-由异常处理类进行处理" class="headerlink" title="校验类—-检验数据、抛出异常,由异常处理类进行处理"></a>校验类—-检验数据、抛出异常,由异常处理类进行处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidatorUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示错误信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showMsg</span><span class="params">(BindingResult result)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        List&lt;ObjectError&gt; allErrors = result.getAllErrors();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (ObjectError error : allErrors) &#123;</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> Exception(error.getDefaultMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制器—-将前端传入数据传给校验类进行校验"><a href="#控制器—-将前端传入数据传给校验类进行校验" class="headerlink" title="控制器—-将前端传入数据传给校验类进行校验"></a>控制器—-将前端传入数据传给校验类进行校验</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidatorUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示错误信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showMsg</span><span class="params">(BindingResult result)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        List&lt;ObjectError&gt; allErrors = result.getAllErrors();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (ObjectError error : allErrors) &#123;</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> Exception(error.getDefaultMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Springboot全局异常"><a href="#Springboot全局异常" class="headerlink" title="Springboot全局异常"></a>Springboot全局异常</h2><p>着重去理解异常类抛出和处理的顺序。抛出了哪个是由哪个类处理，往调用者抛出????</p><p>SpringBoot中有一个<code>ControllerAdvice</code>的注解，使用该注解表示开启了全局异常的捕获，我们只需在自定义一个方法使用<code>ExceptionHandler</code>注解然后定义捕获异常的类型即可对这些捕获的异常进行统一的处理。非常方便后续异常的分类处理以及代码维护</p><h3 id="异常处理类"><a href="#异常处理类" class="headerlink" title="异常处理类"></a>异常处理类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionAdvice</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 专门用于处理登录异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(LoginException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonData <span class="title">loginExceptionHandler</span><span class="params">(LoginException e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonData(e.getCode(),e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonData  <span class="title">exceptionHandler</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//记录异常日志</span></span><br><span class="line">        <span class="comment">//异常日志对于系统非常重要</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonData(<span class="number">1002</span>,e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义异常–以登录异常为例"><a href="#自定义异常–以登录异常为例" class="headerlink" title="自定义异常–以登录异常为例"></a>自定义异常–以登录异常为例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoginException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoginException</span><span class="params">(Integer code, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(Integer code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在服务中抛出异常"><a href="#在服务中抛出异常" class="headerlink" title="在服务中抛出异常"></a>在服务中抛出异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServiceImpl</span> <span class="keyword">implements</span> <span class="title">LoginService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AdminMapper mapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  JsonData <span class="title">login</span><span class="params">(Admin admin, HttpSession session)</span></span>&#123;</span><br><span class="line">        <span class="comment">//数据校验</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//从数据库中查数据</span></span><br><span class="line">        Admin dbAdmin = mapper.findoneByName(admin.getAdminName());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (dbAdmin == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//说明用户不存在</span></span><br><span class="line"><span class="comment">//            return new JsonData(1001,&quot;用户不存在&quot;);</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LoginException(<span class="number">1001</span>,<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//判断状态</span></span><br><span class="line">        <span class="keyword">if</span>(dbAdmin.getAdminStatus()!=<span class="keyword">null</span> &amp;&amp; !(dbAdmin.getAdminStatus().equals(<span class="number">0</span>)))&#123;</span><br><span class="line"><span class="comment">//            return new JsonData(1001,&quot;用户被锁定,联系管理员&quot;);</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LoginException(<span class="number">1002</span>,<span class="string">&quot;用户被锁定,联系管理员&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//判断密码正确</span></span><br><span class="line">        <span class="keyword">if</span>(!dbAdmin.getAdminPwd().equals(admin.getAdminPwd()))&#123;</span><br><span class="line"><span class="comment">//            return new JsonData(1001,&quot;密码错误&quot;);</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LoginException(<span class="number">1003</span>,<span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存到session</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;adminName&quot;</span>,admin.getAdminName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新用户最后登录时间</span></span><br><span class="line">        dbAdmin.setLastLoginTime(<span class="keyword">new</span> Timestamp(System.currentTimeMillis()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//dbAdmin没有问题</span></span><br><span class="line">        System.out.println(dbAdmin.toString());</span><br><span class="line"></span><br><span class="line">        mapper.update(dbAdmin);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonData(<span class="number">200</span>,<span class="string">&quot;登录正常&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  JsonData <span class="title">exit</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        request.getSession().invalidate();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonData(<span class="number">200</span>,<span class="string">&quot;退出正常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring拦截器"><a href="#Spring拦截器" class="headerlink" title="Spring拦截器"></a>Spring拦截器</h2><p>应用的例子：在用户没有登录的时候，无法进入系统中的其他页面。</p><p>原理：<br>对每一个请求进行审查，如果满足要求，则放行；不满足要求，重定向到其他页面。<br><strong>需要注意的是，要严格审查逻辑，放行登录页面和静态资源，不要产生无限循环的情况。</strong></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210605103735.png" alt="20210605103735"></p><h3 id="登录拦截器"><a href="#登录拦截器" class="headerlink" title="登录拦截器"></a>登录拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断是否登录</span></span><br><span class="line">        <span class="comment">//判断session</span></span><br><span class="line">        <span class="comment">//没有登录重定向到登录页面、登录了，定向到index页面</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//先去获取session对象</span></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取登录的标记</span></span><br><span class="line">        String adminName = (String) session.getAttribute(<span class="string">&quot;adminName&quot;</span>);</span><br><span class="line">        <span class="comment">//判断session的值是否为null</span></span><br><span class="line">        <span class="keyword">if</span> (adminName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果没有登录，这里就产生了循环，因为默认是拦截所有请求，所以就变成了无限次的重定向，</span></span><br><span class="line">            <span class="comment">//浏览器出现了too many redirect</span></span><br><span class="line">            response.sendRedirect(<span class="string">&quot;/login/page&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//false拦截、true放行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后置方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modelAndView</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注册拦截器"><a href="#注册拦截器" class="headerlink" title="注册拦截器"></a>注册拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 专门用来注册拦截器的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LoginInterceptor())</span><br><span class="line">                <span class="comment">//拦截所有的请求</span></span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                <span class="comment">//放行方法</span></span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/login/**&quot;</span>)</span><br><span class="line">                <span class="comment">//放行css</span></span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/static/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Spring入门4</summary>
    
    
    
    <category term="国信安实训" scheme="http://example.com/category/%E5%9B%BD%E4%BF%A1%E5%AE%89%E5%AE%9E%E8%AE%AD/"/>
    
    
    <category term="实训" scheme="http://example.com/tag/%E5%AE%9E%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>实训day4</title>
    <link href="http://example.com/2021/06/03/%E5%AE%9E%E8%AE%ADday4/"/>
    <id>http://example.com/2021/06/03/%E5%AE%9E%E8%AE%ADday4/</id>
    <published>2021-06-03T00:00:00.000Z</published>
    <updated>2021-06-08T08:11:20.449Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#spring%E5%85%A5%E9%97%A83">Spring入门3</a><ul><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF-mybatis">什么是 MyBatis</a><ul><li><a href="#%E5%8E%9F%E7%90%86%E5%9B%BE">原理图</a></li><li><a href="#mtbatis%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2">MtBatis进行数据查询</a></li></ul></li><li><a href="#springboot%E6%9F%A5%E6%89%BE%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E7%9A%84%E9%A1%BA%E5%BA%8F">SpringBoot查找静态资源的顺序</a></li><li><a href="#mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84%E5%AD%97%E6%AE%B5%E7%B1%BB%E5%9E%8Bvarchar%E5%92%8Cchar%E7%9A%84%E4%B8%BB%E8%A6%81%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%E5%93%AA%E7%A7%8D%E5%AD%97%E6%AE%B5%E7%9A%84%E6%9F%A5%E6%89%BE%E6%95%88%E7%8E%87%E8%A6%81%E9%AB%98%E4%B8%BA%E4%BB%80%E4%B9%88">MySQL数据库中的字段类型varchar和char的主要区别是什么？哪种字段的查找效率要高，为什么</a></li></ul></li></ul><h1 id="Spring入门3"><a href="#Spring入门3" class="headerlink" title="Spring入门3"></a>Spring入门3</h1><p>Java体系操作数据库的框架：</p><ul><li>全ORM: Hibernate，JPA 完全隔离sql语句，不写sql即可实现相应的数据库操作。相对半ORM来说执行速度会慢一点。</li><li>半ORM：Mybatis 隔离sql和java语句，java和 sql是分开的。更适合web项目的开发</li></ul><h2 id="什么是-MyBatis"><a href="#什么是-MyBatis" class="headerlink" title="什么是 MyBatis"></a>什么是 MyBatis</h2><p>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以对配置和原生Map使用简单的 XML 或注解，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。</p><h3 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210603114409.png" alt="20210603114409"></p><h3 id="MtBatis进行数据查询"><a href="#MtBatis进行数据查询" class="headerlink" title="MtBatis进行数据查询"></a>MtBatis进行数据查询</h3><ul><li>导入依赖 maven包</li><li>配置数据源 确定数据库的类型、账号、密码</li><li>Mybatis相关文件的创建</li></ul><p>1.创建实体类<br>数据库中的表 — 类<br>数据库表中的字段  — 类属性<br>数据            – 对象<br>2.创建接口 AdminMapper<br>3.创建对应的映射文件 Xml<br>4.配置mybatis 指定映射文件的位置、打印sql语句等<br>5.扫描接口  在启动类上面扫描<br>6.单元测试 去test目录下的Tests进行</p><h2 id="SpringBoot查找静态资源的顺序"><a href="#SpringBoot查找静态资源的顺序" class="headerlink" title="SpringBoot查找静态资源的顺序"></a>SpringBoot查找静态资源的顺序</h2><p>先从resources &gt; static &gt; public<br>如果在这几个文件夹中任意一个文件中找到静态资源，就不会再去其他的文件夹查找。都没有，就会直接抛出404.</p><h2 id="MySQL数据库中的字段类型varchar和char的主要区别是什么？哪种字段的查找效率要高，为什么"><a href="#MySQL数据库中的字段类型varchar和char的主要区别是什么？哪种字段的查找效率要高，为什么" class="headerlink" title="MySQL数据库中的字段类型varchar和char的主要区别是什么？哪种字段的查找效率要高，为什么"></a>MySQL数据库中的字段类型varchar和char的主要区别是什么？哪种字段的查找效率要高，为什么</h2><p><strong>区别一，定长和变长</strong><br>char 表示定长，长度固定，varchar表示变长，即长度可变，当所插入的字符串超出它们的长度时，视情况来处理，如果是严格模式，则会拒绝插入并提示错误信息，如果是宽松模式，则会截取然后插入。如果插入的字符串长度小于定义长度时，则会以不同的方式来处理，如char（10），表示存储的是10个字符，无论你插入的是多少，都是10个，如果少于10个，则用空格填满。而varchar（10），小于10个的话，则插入多少个字符就存多少个。varchar怎么知道所存储字符串的长度呢？实际上，对于varchar 字段来说，需要使用一个（如果字符串长度小于255）或两个字节（长度大于255）来存储字符串的长度。<br><strong>区别之二</strong><br>存储的容量不同对char来说，最多能存放的字符个数 255，和编码无关。而varchar呢，最多能存放 65532 个字符。VARCHAR的最大有效长度由最大行大小和使用的字符集确定。整体最大长度是65,532 字节，最大有效长度是 65532 字节，在varchar存字符串的时候，第一个字节是空的，不存任何的数据，然后还需要两个字节来存放字符串的长度。所以有效长度就是 65535 - 1 - 2= 65532</p>]]></content>
    
    
    <summary type="html">Spring入门3</summary>
    
    
    
    <category term="国信安实训" scheme="http://example.com/category/%E5%9B%BD%E4%BF%A1%E5%AE%89%E5%AE%9E%E8%AE%AD/"/>
    
    
    <category term="实训" scheme="http://example.com/tag/%E5%AE%9E%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>实训day3</title>
    <link href="http://example.com/2021/06/02/%E5%AE%9E%E8%AE%ADday3/"/>
    <id>http://example.com/2021/06/02/%E5%AE%9E%E8%AE%ADday3/</id>
    <published>2021-06-02T00:00:00.000Z</published>
    <updated>2021-06-08T08:11:20.449Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#spring%E5%85%A5%E9%97%A82">Spring入门2</a><ul><li><a href="#mvc%E6%A8%A1%E5%BC%8Fmodeviewcontroller">MVC模式(mode\view\controller)</a><ul><li><a href="#mvc%E5%8E%9F%E7%90%86%E5%9B%BE">MVC原理图</a></li></ul></li><li><a href="#springmvc%E6%98%AF%E4%BB%80%E4%B9%88">springMVC是什么</a><ul><li><a href="#%E5%8E%9F%E7%90%86%E5%9B%BE">原理图</a></li></ul></li><li><a href="#spring-thymeleaf">spring thymeleaf</a><ul><li><a href="#%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB">动静分离</a></li></ul></li><li><a href="#spring%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91">Spring接口开发</a><ul><li><a href="#%E7%B1%BB%E4%B8%8A%E7%9A%84%E6%B3%A8%E8%A7%A3">类上的注解</a></li><li><a href="#%E6%96%B9%E6%B3%95%E4%B8%8A%E7%9A%84%E6%B3%A8%E8%A7%A3">方法上的注解</a></li><li><a href="#%E5%8F%82%E6%95%B0%E6%B3%A8%E8%A7%A3">参数注解</a></li></ul></li></ul></li></ul><h1 id="Spring入门2"><a href="#Spring入门2" class="headerlink" title="Spring入门2"></a>Spring入门2</h1><h2 id="MVC模式-mode-view-controller"><a href="#MVC模式-mode-view-controller" class="headerlink" title="MVC模式(mode\view\controller)"></a>MVC模式(mode\view\controller)</h2><p>详见博客 <a href="https://www.cnblogs.com/xiaoxi/p/6164383.html">https://www.cnblogs.com/xiaoxi/p/6164383.html</a></p><h3 id="MVC原理图"><a href="#MVC原理图" class="headerlink" title="MVC原理图"></a>MVC原理图</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210602172050.png" alt="20210602172050"></p><p>M-Model 模型（完成业务逻辑：有javaBean构成，service+dao+entity）</p><p>V-View 视图（做界面的展示  jsp，html……）</p><p>C-Controller 控制器（接收请求—&gt;调用模型—&gt;根据结果派发页面）</p><h2 id="springMVC是什么"><a href="#springMVC是什么" class="headerlink" title="springMVC是什么"></a>springMVC是什么</h2><p>　　springMVC是一个MVC的开源框架，springMVC=struts2+spring，springMVC就相当于是Struts2加上sring的整合，但是这里有一个疑惑就是，springMVC和spring是什么样的关系呢？这个在百度百科上有一个很好的解释：意思是说，springMVC是spring的一个后续产品，其实就是spring在原有基础上，又提供了web应用的MVC模块，可以简单的把springMVC理解为是spring的一个模块（类似AOP，IOC这样的模块），网络上经常会说springMVC和spring无缝集成，其实springMVC就是spring的一个子模块，所以根本不需要同spring进行整合。</p><h3 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210602172227.png" alt="20210602172227"></p><p>第一步:用户发起请求到前端控制器（DispatcherServlet）</p><p>第二步：前端控制器请求处理器映射器（HandlerMappering）去查找处理器（Handle）：通过xml配置或者注解进行查找</p><p>第三步：找到以后处理器映射器（HandlerMappering）像前端控制器返回执行链（HandlerExecutionChain）</p><p>第四步：前端控制器（DispatcherServlet）调用处理器适配器（HandlerAdapter）去执行处理器（Handler）</p><p>第五步：处理器适配器去执行Handler</p><p>第六步：Handler执行完给处理器适配器返回ModelAndView</p><p>第七步：处理器适配器向前端控制器返回ModelAndView</p><p>第八步：前端控制器请求视图解析器（ViewResolver）去进行视图解析</p><p>第九步：视图解析器像前端控制器返回View</p><p>第十步：前端控制器对视图进行渲染</p><p>第十一步：前端控制器向用户响应结果</p><h2 id="spring-thymeleaf"><a href="#spring-thymeleaf" class="headerlink" title="spring thymeleaf"></a>spring thymeleaf</h2><p>详见 <a href="https://developer.aliyun.com/article/769977">https://developer.aliyun.com/article/769977</a></p><p>模板引擎在web领域的主要作用：让网站实现界面和数据分离，这样大大提高了开发效率，让代码重用更加容易。</p><h3 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h3><p>对于传统jsp或者其他模板来说，没有一个模板引擎的后缀为.html，就拿jsp来说jsp的后缀为.jsp,它的本质就是将一个html文件修改后缀为.jsp，然后在这个文件中增加自己的语法、标签然后执行时候通过后台处理这个文件最终返回一个html页面。</p><p>浏览器无法直接识别.jsp文件，需要借助网络(服务端)才能进行访问；而Thymeleaf用html做模板可以直接在浏览器中打开。开发者充分考虑html页面特性，将Thymeleaf的语法通过html的标签属性来定义完成，这些标签属性不会影响html页面的完整性和显示。如果通过后台服务端访问页面服务端会寻找这些标签将服务端对应的数据替换到相应位置实现动态页面！大体区别可以参照下图</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210602173047.png" alt="20210602173047"></p><p>上图的意思就是如果直接打开这个html那么浏览器会对th等标签忽视而显示原始的内容。如果通过服务端访问那么服务端将先寻找th标签将服务端储存的数据替换到对应位置。具体效果可以参照下图,下图即为一个动静结合的实例。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210602173204.png" alt="20210602173204"></p><h2 id="Spring接口开发"><a href="#Spring接口开发" class="headerlink" title="Spring接口开发"></a>Spring接口开发</h2><p>做如下区分的目的：方便后续代码的扩展和维护</p><h3 id="类上的注解"><a href="#类上的注解" class="headerlink" title="类上的注解"></a>类上的注解</h3><p>Stererotype.Component标记Spring中普通组件<br>Stererotype.Controller 控制器<br>Stererotype.Service服务层对象、处理业务逻辑<br>Stererotype. Repository持久层对象、操作数据库<br>Web.bin.annotation.RestController web控制器，返回json数据</p><h3 id="方法上的注解"><a href="#方法上的注解" class="headerlink" title="方法上的注解"></a>方法上的注解</h3><p>@RequsetMapping 路由控制返回数据<br>@GetMapping get请求获取用户数据<br>@PostMapping 获取数据<br>@PutMapping 更新数据<br>@DeleteMapping 删除数据</p><h3 id="参数注解"><a href="#参数注解" class="headerlink" title="参数注解"></a>参数注解</h3><p>@RequestParam required参数是否必传、name别名(前端看到的)、defaultValue:默认值 (这个name很奇怪，不知道怎么用的)</p>]]></content>
    
    
    <summary type="html">Spring入门2</summary>
    
    
    
    <category term="国信安实训" scheme="http://example.com/category/%E5%9B%BD%E4%BF%A1%E5%AE%89%E5%AE%9E%E8%AE%AD/"/>
    
    
    <category term="实训" scheme="http://example.com/tag/%E5%AE%9E%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/06/01/hello-world/"/>
    <id>http://example.com/2021/06/01/hello-world/</id>
    <published>2021-06-01T00:00:00.000Z</published>
    <updated>2021-06-08T08:11:20.449Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>实训day1-day2</title>
    <link href="http://example.com/2021/06/01/%E5%AE%9E%E8%AE%ADday1-day2/"/>
    <id>http://example.com/2021/06/01/%E5%AE%9E%E8%AE%ADday1-day2/</id>
    <published>2021-06-01T00:00:00.000Z</published>
    <updated>2021-06-08T08:11:20.449Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实训day1-day2"><a href="#实训day1-day2" class="headerlink" title="实训day1-day2"></a>实训day1-day2</h1><p>目录:</p><ul><li><a href="#%E5%AE%9E%E8%AE%ADday1-day2">实训day1-day2</a><ul><li><a href="#git%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8">git工具的使用</a><ul><li><a href="#%E5%85%B3%E4%BA%8Egit%E7%9A%84%E5%8E%9F%E7%90%86">关于git的原理</a></li><li><a href="#git-%E5%B7%A5%E4%BD%9C%E6%B5%81">git 工作流</a></li><li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8push%E4%B9%8B%E5%89%8D%E9%9C%80%E8%A6%81%E8%BF%9B%E8%A1%8Cpull">为什么在<code>push</code>之前需要进行<code>pull</code></a></li><li><a href="#git%E5%A4%84%E7%90%86%E5%86%B2%E7%AA%81">git处理冲突</a></li></ul></li><li><a href="#spring%E9%A1%B9%E7%9B%AE%E5%85%A5%E9%97%A8">spring项目入门</a><ul><li><a href="#java%E5%8F%8D%E5%B0%84">java反射</a></li><li><a href="#%E6%80%9D%E8%80%83">思考</a><ul><li><a href="#spring-ioc">Spring IOC</a></li><li><a href="#spring-%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5di">Spring 依赖注入DI</a></li></ul></li></ul></li></ul></li></ul><h2 id="git工具的使用"><a href="#git工具的使用" class="headerlink" title="git工具的使用"></a>git工具的使用</h2><h3 id="关于git的原理"><a href="#关于git的原理" class="headerlink" title="关于git的原理"></a>关于git的原理</h3><p>找到了一篇博客对于git的原理以及存储讲解的非常清楚</p><p><a href="https://zhaohuabing.com/post/2019-01-21-git/">https://zhaohuabing.com/post/2019-01-21-git/</a></p><h3 id="git-工作流"><a href="#git-工作流" class="headerlink" title="git 工作流"></a>git 工作流</h3><p>你的本地仓库由 git 维护的三棵“树”组成。第一个是你的 <code>工作目录</code>，它持有实际文件；第二个是 <code>缓存区（Index）</code>，它像个缓存区域，临时保存你的改动；最后是 <code>HEAD</code>，指向你最近一次提交后的结果。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210601113100.png" alt="20210601113100"></p><h3 id="为什么在push之前需要进行pull"><a href="#为什么在push之前需要进行pull" class="headerlink" title="为什么在push之前需要进行pull"></a>为什么在<code>push</code>之前需要进行<code>pull</code></h3><p>如果项目只有一个人，那无所谓。但是一般情况下，项目中都会有许多项目成员，在我们将自己的<code>分支 1</code> 合并到 <code>主分支 master</code>时，<code>主分支master</code>有可能已经发生改变(即成员2将自己的<code>分支2</code>合并到<code>主分支 master</code>之后<code>push</code>),此时如果直接<code>push</code>，会导致成员2所修改的部分被覆盖。</p><p>而在这之前进行<code>pull</code>操作，会把远程分支于本地分支进行合并。然后再进行<code>push</code></p><p>git可能会在这种情况下，禁止你进行push操作</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210601113613.png" alt="20210601113613"></p><h3 id="git处理冲突"><a href="#git处理冲突" class="headerlink" title="git处理冲突"></a>git处理冲突</h3><p>git并不能智能化地解决不同开发者修改同一个文件的情况。如果不同开发者对同一文件进行了修改，那么这个冲突的过程，必须要手动解决，然后再次提交。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210601114236.png" alt="20210601114236"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210601114412.png" alt="20210601114412"></p><p>日志</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210601114336.png" alt="20210601114336"></p><h2 id="spring项目入门"><a href="#spring项目入门" class="headerlink" title="spring项目入门"></a>spring项目入门</h2><p>  基础的创建项目+运行web项目 没什么可以说的</p><h3 id="java反射"><a href="#java反射" class="headerlink" title="java反射"></a>java反射</h3><p>具体去看博客:<a href="https://www.cnblogs.com/chanshuyi/p/head_first_of_reflection.html">https://www.cnblogs.com/chanshuyi/p/head_first_of_reflection.html</a></p><p><strong>反射就是在运行时才知道要操作的类是什么，并且可以在运行时获取类的完整构造，并调用对应的方法。</strong><br>一般情况下，我们使用某个类时必定知道它是什么类，是用来做什么的。于是我们直接对这个类进行实例化，之后使用这个类对象进行操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Apple apple = <span class="keyword">new</span> Apple(); <span class="comment">//直接初始化，「正射」</span></span><br><span class="line">apple.setPrice(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>而反射则是一开始并不知道我要初始化的类对象是什么，自然也无法使用 new 关键字来创建对象了。<br>这时候，我们使用 JDK 提供的反射 API 进行反射调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class clz = Class.forName(<span class="string">&quot;com.chenshuyi.reflect.Apple&quot;</span>);</span><br><span class="line">Method method = clz.getMethod(<span class="string">&quot;setPrice&quot;</span>, <span class="keyword">int</span>.class);</span><br><span class="line">Constructor constructor = clz.getConstructor();</span><br><span class="line">Object object = constructor.newInstance();</span><br><span class="line">method.invoke(object, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>上面两段代码的执行结果，其实是完全一样的。但是其思路完全不一样，第一段代码在未运行时就已经确定了要运行的类（Apple），而第二段代码则是在运行时通过字符串值才得知要运行的类（com.chenshuyi.reflect.Apple）</p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>为什么在浏览器中输入<a href="http://localhost:8080/index%E5%B0%B1%E8%83%BD%E5%A4%9F%E8%AE%BF%E9%97%AE%E5%88%B0%E5%AF%B9%E5%BA%94%E7%9A%84IndexController%E4%B8%AD%E7%9A%84index%E6%96%B9%E6%B3%95%EF%BC%9F">http://localhost:8080/index就能够访问到对应的IndexController中的index方法？</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Lakers win&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单来说，就是在运行时，浏览器通过获取<code>/index</code>找到了IndexController这个类（可能是Spring容器在启动之前或者之后创建好的），然后调用方法index，向前端返回 Lakers win</p><h4 id="Spring-IOC"><a href="#Spring-IOC" class="headerlink" title="Spring IOC"></a>Spring IOC</h4><p>详见博客：<a href="https://www.cnblogs.com/ysocean/p/7466217.html">https://www.cnblogs.com/ysocean/p/7466217.html</a></p><p>IOC-Inversion of Control，即控制反转。它不是什么技术，而是一种设计思想。</p><p>&emsp;&emsp;传统的创建对象的方法是直接通过 new 关键字，而 spring 则是通过 IOC 容器来创建对象，也就是说我们将创建对象的控制权交给了 IOC 容器。我们可以用一句话来概括 IOC：</p><p>&emsp;&emsp;IOC 让程序员不在关注怎么去创建对象，而是关注与对象创建之后的操作，把对象的创建、初始化、销毁等工作交给spring容器来做。</p><p>项目加载时会扫描有注解<code>@RestController、@Controller、@Service、@Component</code>的类，通过反射创建这些类的对象放入Spring的容器 **(hashMap:key =》value —–indexController 名字 =》indexController的对象)**，需要使用的时候通过key直接取出来使用。</p><h4 id="Spring-依赖注入DI"><a href="#Spring-依赖注入DI" class="headerlink" title="Spring 依赖注入DI"></a>Spring 依赖注入DI</h4><p>详见：<a href="http://c.biancheng.net/view/4253.html">http://c.biancheng.net/view/4253.html</a></p><p>依赖注入（Dependency Injection，DI）和控制反转含义相同，它们是从两个角度描述的同一个概念。</p><p>当某个 Java 实例需要另一个 Java 实例时，传统的方法是由调用者创建被调用者的实例（例如，使用 new 关键字获得被调用者实例），而使用 Spring 框架后，被调用者的实例不再由调用者创建，而是由 Spring 容器创建，这称为控制反转。</p><p>Spring 容器在创建被调用者的实例时，会自动将调用者需要的对象实例注入给调用者，这样，调用者通过 Spring 容器获得被调用者实例，这称为依赖注入。</p><p>依赖注入主要有两种实现方式，分别是属性 setter 注入和构造方法注入。</p>]]></content>
    
    
    <summary type="html">git基本工具的使用+Spring入门1</summary>
    
    
    
    <category term="国信安实训" scheme="http://example.com/category/%E5%9B%BD%E4%BF%A1%E5%AE%89%E5%AE%9E%E8%AE%AD/"/>
    
    
    <category term="实训" scheme="http://example.com/tag/%E5%AE%9E%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>篮球比赛数据统计</title>
    <link href="http://example.com/2021/05/28/%E7%AF%AE%E7%90%83%E6%AF%94%E8%B5%9B%E6%95%B0%E6%8D%AE%E7%BB%9F%E8%AE%A1/"/>
    <id>http://example.com/2021/05/28/%E7%AF%AE%E7%90%83%E6%AF%94%E8%B5%9B%E6%95%B0%E6%8D%AE%E7%BB%9F%E8%AE%A1/</id>
    <published>2021-05-28T00:00:00.000Z</published>
    <updated>2021-06-08T08:11:20.449Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h1><table><thead><tr><th>日期</th><th>比赛名称</th><th>得分</th></tr></thead><tbody><tr><td>2019.5.中旬</td><td>学院院内赛-基准方中篮球赛(学院内不同年级组成的队伍)</td><td>具体数据忘了，但是场均应该能有个六七分，一共打了三场，大一非土木</td></tr><tr><td>2019.4.19</td><td>学工部篮球赛</td><td>17分、九投八中、一个三分、一个二加一</td></tr><tr><td>2021.5.9</td><td>Scuba(学校各个学院之间比赛)</td><td>对阵外国语 只得3分 三分六投一中，两个失误</td></tr><tr><td>2021.5.22</td><td>Scuba</td><td>对阵商学院、0分、两个失误</td></tr><tr><td>2021.5.28</td><td>Scuba</td><td>对阵软件 10分、五次启动走步、0助攻、中投3中2、两个上篮、一个二加一</td></tr></tbody></table><h1 id="记录没有别的目的，一方面是留念，但更多地是激励，希望自己能永远对🏀充满热情。—-2021-5-28"><a href="#记录没有别的目的，一方面是留念，但更多地是激励，希望自己能永远对🏀充满热情。—-2021-5-28" class="headerlink" title="记录没有别的目的，一方面是留念，但更多地是激励，希望自己能永远对🏀充满热情。—-2021.5.28"></a>记录没有别的目的，一方面是留念，但更多地是激励，希望自己能永远对🏀充满热情。—-2021.5.28</h1>]]></content>
    
    
    <summary type="html">个人在四川大学期间，参与篮球比赛的数据。</summary>
    
    
    
    <category term="数据" scheme="http://example.com/category/%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="大学篮球" scheme="http://example.com/tag/%E5%A4%A7%E5%AD%A6%E7%AF%AE%E7%90%83/"/>
    
  </entry>
  
  <entry>
    <title>grafana iframe嵌入不显示的问题</title>
    <link href="http://example.com/2021/05/26/grafana%20iframe%E5%B5%8C%E5%85%A5%E4%B8%8D%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2021/05/26/grafana%20iframe%E5%B5%8C%E5%85%A5%E4%B8%8D%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2021-05-26T00:00:00.000Z</published>
    <updated>2021-06-08T08:11:20.449Z</updated>
    
    <content type="html"><![CDATA[<h1 id="grafana-iframe嵌入不显示的问题"><a href="#grafana-iframe嵌入不显示的问题" class="headerlink" title="grafana iframe嵌入不显示的问题"></a>grafana iframe嵌入不显示的问题</h1><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p><code>grafana\grafana\conf</code>目录下有两个配置文件<code>defaults.ini</code>、<code>sample.ini</code></p><ul><li><code>defaults.ini</code> 这个才是grafana服务器真正运行时的配置文件</li><li><code>sample.ini</code> 只是个样例，别改错了</li></ul><h2 id="开启匿名登录"><a href="#开启匿名登录" class="headerlink" title="开启匿名登录"></a>开启匿名登录</h2><p>修改<code>grafana\grafana\conf</code>目录下的<code>defaults.ini</code>文件中的 <code>[auth.anonymous]中的enabled = true</code></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210528084634.png" alt="20210528084634"></p><h2 id="允许浏览器渲染iframe"><a href="#允许浏览器渲染iframe" class="headerlink" title="允许浏览器渲染iframe"></a>允许浏览器渲染iframe</h2><p>修改上述文件中的<code>allow_embedding = true</code></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210528085103.png" alt="20210528085103"></p><h1 id="windows-server重启grafana服务"><a href="#windows-server重启grafana服务" class="headerlink" title="windows server重启grafana服务"></a>windows server重启grafana服务</h1><p>由于grafana在运行之后已经被当作一个服务，可以在服务管理页面对其进行重启</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210528085716.png" alt="20210528085716"></p><h1 id="不显示的原因"><a href="#不显示的原因" class="headerlink" title="不显示的原因"></a>不显示的原因</h1><p>grafana服务器响应头里面有一个<code>X-Frame-Options:deny</code></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210528085945.png" alt="20210528085945"></p><h2 id="X-Frame-Options"><a href="#X-Frame-Options" class="headerlink" title="X-Frame-Options"></a>X-Frame-Options</h2><p>The X-Frame-Options HTTP 响应头是用来给浏览器 指示允许一个页面 可否在 <code>&lt;frame&gt;, &lt;iframe&gt;, &lt;embed&gt; 或者 &lt;object&gt;</code> 中展现的标记。站点可以通过确保网站没有被嵌入到别人的站点里面，从而避免 clickjacking 攻击。</p><p>有三个可能值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X-Frame-Options: deny</span><br><span class="line">X-Frame-Options: sameorigin</span><br><span class="line">X-Frame-Options: allow-from https://example.com/</span><br></pre></td></tr></table></figure><p>如果设置为 deny，不光在别人的网站 frame 嵌入时会无法加载，在同域名页面中同样会无法加载。另一方面，如果设置为sameorigin，那么页面就可以在同域名页面的 frame 中嵌套。</p><ul><li>deny <br><br>表示该页面不允许在 frame 中展示，即便是在相同域名的页面中嵌套也不允许。</li><li>sameorigin <br><br>表示该页面可以在相同域名页面的 frame 中展示。</li><li>allow-from url <br><br>表示该页面可以在指定来源的 frame 中展示。</li></ul><h2 id="修改之后，grafana服务器的响应头里不再包含这个字段"><a href="#修改之后，grafana服务器的响应头里不再包含这个字段" class="headerlink" title="修改之后，grafana服务器的响应头里不再包含这个字段"></a>修改之后，grafana服务器的响应头里不再包含这个字段</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210528091108.png" alt="20210528091108"><br>就可以显示了<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210528091142.png" alt="20210528091142"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;grafana-iframe嵌入不显示的问题&quot;&gt;&lt;a href=&quot;#grafana-iframe嵌入不显示的问题&quot; class=&quot;headerlink&quot; title=&quot;grafana iframe嵌入不显示的问题&quot;&gt;&lt;/a&gt;grafana iframe嵌入不显示的</summary>
      
    
    
    
    <category term="配置" scheme="http://example.com/category/%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="grafana" scheme="http://example.com/tag/grafana/"/>
    
  </entry>
  
  <entry>
    <title>利用github托管网页，用到的工具总结</title>
    <link href="http://example.com/2021/05/26/%E5%88%A9%E7%94%A8github%E6%89%98%E7%AE%A1%E7%BD%91%E9%A1%B5%E7%94%A8%E5%88%B0%E7%9A%84%E5%B7%A5%E5%85%B7%E6%80%BB%E8%A7%88/"/>
    <id>http://example.com/2021/05/26/%E5%88%A9%E7%94%A8github%E6%89%98%E7%AE%A1%E7%BD%91%E9%A1%B5%E7%94%A8%E5%88%B0%E7%9A%84%E5%B7%A5%E5%85%B7%E6%80%BB%E8%A7%88/</id>
    <published>2021-05-26T00:00:00.000Z</published>
    <updated>2021-06-08T08:11:20.449Z</updated>
    
    <content type="html"><![CDATA[<h2 id="待做"><a href="#待做" class="headerlink" title="待做"></a>待做</h2><ul><li><input checked="" disabled="" type="checkbox"> 更改网页中js文件的cdn路径</li><li><input checked="" disabled="" type="checkbox"> 添加头像或者壁纸，看看作者的标语和文字是如何切换的</li><li><input disabled="" type="checkbox"> 想办法关一下背景音乐</li><li><input disabled="" type="checkbox"> 分析原因Travis 中运行hexo deloy总是<code>remote: Invalid username or password.fatal: Authentication failed fo</code></li><li><input checked="" disabled="" type="checkbox"> 续费腾讯的对象存储cos，方便传输图片</li><li><input disabled="" type="checkbox"> 将csdn上面的文件转过来</li></ul><h2 id="每一部分的作用详见首页-文章-Hexo主题LiveForCode介绍"><a href="#每一部分的作用详见首页-文章-Hexo主题LiveForCode介绍" class="headerlink" title="每一部分的作用详见首页 文章 Hexo主题LiveForCode介绍"></a>每一部分的作用详见首页 文章 Hexo主题LiveForCode介绍</h2><ul><li>Travis 就是方便部署hexo博客，不用每次自己在本地运行hexo deploy在上传GitHub, 检测到设定分支有push操作后，Travis会启动虚拟机帮你完成hexo generate和deploy的操作。关于这部分的配置参数，可以参考main分支的.travis.yml文件</li><li>LeanCloud 通过api把评论、留言、文章数据统计放到数据库里面，进入博客的时候，会再次请求数据库把这些数据显示在网页上。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210527113453.png" alt="20210527113453"></li><li>Algolia 搜索操作，会统计博客文章的标题和url相对路径。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210527113220.png" alt="20210527113220"></li><li>jsDelivr 免费的cdn加速。</li></ul><h2 id="利用github托管网页，用到的工具总结"><a href="#利用github托管网页，用到的工具总结" class="headerlink" title="利用github托管网页，用到的工具总结"></a>利用github托管网页，用到的工具总结</h2><h3 id="Hexo-博客框架"><a href="#Hexo-博客框架" class="headerlink" title="Hexo(博客框架)"></a>Hexo(博客框架)</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="Travis-CI-方便对博客更改，自动渲染"><a href="#Travis-CI-方便对博客更改，自动渲染" class="headerlink" title="Travis CI(方便对博客更改，自动渲染)"></a>Travis CI(方便对博客更改，自动渲染)</h3><p>Travis CI 提供的是持续集成服务（Continuous Integration，简称 CI）。它绑定 Github 上面的项目，只要有新的代码，就会自动抓取。然后，提供一个运行环境，执行测试，完成构建，还能部署到服务器。</p><p>持续集成指的是只要代码有变更，就自动运行构建和测试，反馈运行结果。确保符合预期以后，再将新代码”集成”到主干。</p><p>持续集成的好处在于，每次代码的小幅变更，就能看到运行结果，从而不断累积小的变更，而不是在开发周期结束时，一下子合并一大块代码。</p><h3 id="Valine-一款快速、简洁且高效的无后端评论系统。"><a href="#Valine-一款快速、简洁且高效的无后端评论系统。" class="headerlink" title="Valine - 一款快速、简洁且高效的无后端评论系统。"></a>Valine - 一款快速、简洁且高效的无后端评论系统。</h3><p>Valine 诞生于2017年8月7日，是一款基于LeanCloud的快速、简洁且高效的无后端评论系统。</p><p>理论上支持但不限于静态博客，目前已有Hexo、Jekyll、Typecho、Hugo、Ghost 等博客程序在使用Valine。</p><h3 id="LeanCloud-（数据库-—评论、留言、文章数据统计"><a href="#LeanCloud-（数据库-—评论、留言、文章数据统计" class="headerlink" title="LeanCloud （数据库)—评论、留言、文章数据统计"></a>LeanCloud （数据库)—评论、留言、文章数据统计</h3><p>LeanCloud（原 AVOS Cloud） 是针对移动应用的一站式云端服务，专注于为应用开发者提供工具和平台。提供包括LeanStorage 数据存储、LeanMessage 通信服务、LeanAnalytics 统计分析、LeanModules 拓展模块等四大类型的后端云服务，加速应用开发。</p><h3 id="Algolia-Search-数据库-–文章标签、分类统计"><a href="#Algolia-Search-数据库-–文章标签、分类统计" class="headerlink" title="Algolia Search(数据库)–文章标签、分类统计"></a>Algolia Search(数据库)–文章标签、分类统计</h3><p>可以使用 GitHub 或者 Google 账户直接登录，注册后的 14 天内拥有所有功能（包括收费类别的）。之后若未续费会自动降级为免费账户，免费账户总共有 10,000 条记录，每月有 100,000 的可以操作数</p><h3 id="jsDelivr–js文件的cdn-free"><a href="#jsDelivr–js文件的cdn-free" class="headerlink" title="jsDelivr–js文件的cdn free"></a>jsDelivr–js文件的cdn free</h3><p>CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。——百度百科</p>]]></content>
    
    
    <summary type="html">利用github托管网页，用到的工具总结</summary>
    
    
    
    <category term="待办" scheme="http://example.com/category/%E5%BE%85%E5%8A%9E/"/>
    
    
    <category term="总结" scheme="http://example.com/tag/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
