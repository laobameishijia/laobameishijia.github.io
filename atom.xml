<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>老叭美食家</title>
  
  <subtitle>永远热爱生活</subtitle>
  <link href="https://laobameishijia.github.io/atom.xml" rel="self"/>
  
  <link href="https://laobameishijia.github.io/"/>
  <updated>2021-12-22T08:38:25.208Z</updated>
  <id>https://laobameishijia.github.io/</id>
  
  <author>
    <name>老叭美食家</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>毕设-Fuzz-AFLGo源码阅读-1</title>
    <link href="https://laobameishijia.github.io/2021/12/15/bi-she-fuzz-aflgo-yuan-ma-yue-du-1/"/>
    <id>https://laobameishijia.github.io/2021/12/15/bi-she-fuzz-aflgo-yuan-ma-yue-du-1/</id>
    <published>2021-12-15T09:25:00.000Z</published>
    <updated>2021-12-22T08:38:25.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AFLGo源码阅读-1"><a href="#AFLGo源码阅读-1" class="headerlink" title="AFLGo源码阅读-1"></a>AFLGo源码阅读-1</h1><p>首先还是要从基础的C语言语句开始补起。</p><h2 id="AFL-代码覆盖率及其相关概念"><a href="#AFL-代码覆盖率及其相关概念" class="headerlink" title="AFL-代码覆盖率及其相关概念"></a>AFL-代码覆盖率及其相关概念</h2><p>原文：<a href="https://www.freebuf.com/vuls/197672.html">https://www.freebuf.com/vuls/197672.html</a></p><h3 id="1-代码覆盖率（Code-Coverage）"><a href="#1-代码覆盖率（Code-Coverage）" class="headerlink" title="1. 代码覆盖率（Code Coverage）"></a>1. 代码覆盖率（Code Coverage）</h3><p>代码覆盖率是一种度量代码的覆盖程度的方式，也就是指源代码中的某行代码是否已执行；对二进制程序，还可将此概念理解为汇编代码中的某条指令是否已执行。其计量方式很多，但无论是GCC的GCOV还是LLVM的SanitizerCoverage，都提供函数（function）、基本块（basic-block）、边界（edge）三种级别的覆盖率检测，更具体的细节可以参考LLVM的官方文档。</p><h3 id="2-基本块（Basic-Block）"><a href="#2-基本块（Basic-Block）" class="headerlink" title="2. 基本块（Basic Block）"></a>2. 基本块（Basic Block）</h3><p>缩写为BB，指一组顺序执行的指令，BB中第一条指令被执行后，后续的指令也会被全部执行，每个BB中所有指令的执行次数是相同的，也就是说一个BB必须满足以下特征：</p><ul><li>只有一个入口点，BB中的指令不是任何跳转指令的目标。</li><li>只有一个退出点，只有最后一条指令使执行流程转移到另一个BB</li></ul><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211222151025.png" alt="基本块"></p><h3 id="3-边（edge）"><a href="#3-边（edge）" class="headerlink" title="3. 边（edge）"></a>3. 边（edge）</h3><p>我们可以将程序看成一个控制流图（CFG），图的每个节点表示一个基本块，而edge就被用来表示在基本块之间的转跳。知道了每个基本块和跳转的执行次数，就可以知道程序中的每个语句和分支的执行次数，从而获得比记录BB更细粒度的覆盖率信息。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211222151136.png" alt="CFG"></p><h3 id="4-元组（tuple）"><a href="#4-元组（tuple）" class="headerlink" title="4. 元组（tuple）"></a>4. 元组（tuple）</h3><p>具体到AFL的实现中，使用二元组(branch_src, branch_dst)来记录当前基本块 + 前一基本块 的信息，从而获取目标的执行流程和代码覆盖情况，伪代码如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">cur_location <span class="token operator">=</span> <span class="token operator">&lt;</span>COMPILE_TIME_RANDOM<span class="token operator">></span><span class="token punctuation">;</span>           <span class="token comment">//用一个随机数标记当前基本块</span>shared_mem<span class="token punctuation">[</span>cur_location <span class="token operator">^</span> prev_location<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>     <span class="token comment">//将当前块和前一块异或保存到shared_mem[]</span>prev_location <span class="token operator">=</span> cur_location <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>              <span class="token comment">//cur_location右移1位区分从当前块到当前块的转跳</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>实际插入的汇编代码，如下图所示，首先保存各种寄存器的值并设置ecx/rcx，然后调用__afl_maybe_log，这个方法的内容相当复杂，这里就不展开讲了，但其主要功能就和上面的伪代码相似，用于记录覆盖率，放入一块共享内存中。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211222151618.png" alt="IDA中的汇编代码"></p><blockquote><p>关于这个过程后续肯定要弄的非常清楚才行， 因为要添加一个基于基本块覆盖率的模拟退火算法，这样的扩展应该加在什么地方，以及怎么实现都需要把这个过程弄清楚。</p></blockquote><h2 id="C-知识"><a href="#C-知识" class="headerlink" title="C 知识"></a>C 知识</h2><h3 id="C-预处理"><a href="#C-预处理" class="headerlink" title="C 预处理"></a>C 预处理</h3><p>C 预处理器不是编译器的组成部分，但是它是编译过程中一个单独的步骤。简言之，C 预处理器只不过是一个文本替换工具而已，它们会指示编译器在实际编译之前完成所需的预处理。我们将把 C 预处理器（C Preprocessor）简写为 CPP。</p><p>所有的预处理器命令都是以井号（#）开头。它必须是第一个非空字符，为了增强可读性，预处理器指令应从第一列开始。下面列出了所有重要的预处理器指令：</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211215211258.png" alt="预处理指令列表"></p><p>其他的详见菜鸟教程。<br><a href="https://www.runoob.com/cprogramming/c-preprocessors.html">https://www.runoob.com/cprogramming/c-preprocessors.html</a></p><h3 id="C-C-中-volatile-关键字详解"><a href="#C-C-中-volatile-关键字详解" class="headerlink" title="C/C++ 中 volatile 关键字详解"></a>C/C++ 中 volatile 关键字详解</h3><p>C/C++ 中的 volatile 关键字和 const 对应，用来修饰变量，通常用于建立语言级别的 memory barrier。这是 BS 在 “The C++ Programming Language” 对 volatile 修饰词的说明：</p><blockquote><p>A volatile specifier is a hint to a compiler that an object may change its value in ways not specified by the language so that aggressive optimizations must be avoided.</p></blockquote><p>volatile 关键字是一种类型修饰符，用它声明的类型变量表示可以被某些编译器未知的因素更改，比如：操作系统、硬件或者其它线程等。遇到这个关键字声明的变量，编译器对访问该变量的代码就不再进行优化，从而可以提供对特殊地址的稳定访问。声明时语法：int volatile vInt; 当要求使用 volatile 声明的变量的值的时候，<strong>系统总是重新从它所在的内存读取数据</strong>，即使它前面的指令刚刚从该处读取过数据。而且读取的数据立刻被保存。例如:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">volatile</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> a <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">// 其他代码，并未明确告诉编译器，对 i 进行过操作</span><span class="token keyword">int</span> b <span class="token operator">=</span> i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>volatile 指出 i 是随时可能发生变化的，每次使用它的时候必须从 i的地址中读取，因而编译器生成的汇编代码会重新从i的地址读取数据放在 b 中。而<strong>优化</strong>做法是，由于编译器发现两次从 i读数据的代码之间的代码没有对 i 进行过操作，它会自动把上次读的数据放在 b 中。而不是重新从 i 里面读。这样以来，如果 i是一个寄存器变量或者表示一个端口数据就容易出错，所以说<strong>volatile 可以保证对特殊地址的稳定访问</strong>。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="程序处理中的控制流图和调用图"><a href="#程序处理中的控制流图和调用图" class="headerlink" title="程序处理中的控制流图和调用图"></a>程序处理中的控制流图和调用图</h3><h4 id="控制流图–Control-Flow-Graph"><a href="#控制流图–Control-Flow-Graph" class="headerlink" title="控制流图–Control Flow Graph"></a>控制流图–Control Flow Graph</h4><p>控制流图(Control Flow Graph, CFG)也叫控制流程图，是一个过程或程序的抽象表现，是用在编译器中的一个抽象数据结构，由编译器在内部维护，代表了一个程序执行过程中会遍历到的所有路径。它用图的形式表示一个过程内所有基本块执行的可能流向, 也能反映一个过程的实时执行过程。Frances E. Allen于1970年提出控制流图的概念。此后，控制流图成为了编译器优化和静态分析的重要工具。</p><p>原文：<br>In a control-flow graph each node in the graph represents a basic block, i.e. a straight-line piece of code without any jumps or jump targets; jump targets start a block, and jumps end a block. Directed edges are used to represent jumps in the control flow. There are, in most presentations, two specially designated blocks: the entry block, through which control enters into the flow graph, and the exit block, through which all control flow leaves.<br>译文：<br>在控制流图中，图中的每个节点代表一个基本块，即一段没有任何跳转或跳转目标的直线代码；跳转目标开始一个块，而跳转结束一个块。有向边用来表示控制流中的跳转。在大多数演示中，有两个特别指定的块：入口块，控制通过它进入流程图；出口块，所有控制流通过它离开。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211219105935.png" alt="控制流图的几种结构"></p><p><strong>特点</strong>:</p><ul><li>控制流程图是过程导向的</li><li>控制流程图显示了程序执行过程中可以遍历的所有路径</li><li>控制流程图是一个有向图</li><li>CFG 中的边描述控制流路径，节点描述基本块</li><li>每个控制流图都存在2个指定的块：Entry Block(输入块)，Exit Block(输出块)</li></ul><h4 id="函数调用图-Function-Call-Graph"><a href="#函数调用图-Function-Call-Graph" class="headerlink" title="函数调用图 Function Call Graph"></a>函数调用图 Function Call Graph</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211219111655.png" alt="函数调用图"></p><h3 id="插桩怎么实现"><a href="#插桩怎么实现" class="headerlink" title="插桩怎么实现"></a>插桩怎么实现</h3><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="make-和-make-install-的区别"><a href="#make-和-make-install-的区别" class="headerlink" title="make 和 make install 的区别"></a>make 和 make install 的区别</h3><p>简单来说，make 是编译，make install 是安装。</p><p>总结：linux编译安装中configure、make和make install各自的作用</p><p>./configure是用来检测你的安装平台的目标特征的。比如它会检测你是不是有CC或GCC，并不是需要CC或GCC，它是个shell脚本。</p><p>make是用来编译的，它从Makefile中读取指令，然后编译。</p><p>make install是用来安装的，它也从Makefile中读取指令，安装到指定的位置。</p><p>1、configure</p><p>这一步一般用来生成 Makefile，为下一步的编译做准备，你可以通过在 configure 后加上参数来对安装进行控制，比如代码:./configure –prefix=/usr上面的意思是将该软件安装在 /usr 下面，执行文件就会安装在 /usr/bin.同时一些软件的配置文件你可以通过指定 –sys-config= 参数进行设定。有一些软件还可以加上 –with、–enable、–without、–disable 等等参数对编译加以控制，你可以通过允许 ./configure –help 察看详细的说明帮助。</p><p>2、make</p><p>这一步就是编译，大多数的源代码包都经过这一步进行编译（当然有些perl或Python编写的软件需要调用perl或python来进行编译）。如果 在 make 过程中出现 error ，你就要记下错误代码（注意不仅仅是最后一行），然后你可以向开发者提交 bugreport（一般在 INSTALL 里有提交地址），或者你的系统少了一些依赖库等，这些需要自己仔细研究错误代码。make 的作用是开始进行源代码编译，以及一些功能的提供，这些功能由他的 Makefile 设置文件提供相关的功能，比如 make install 一般表示进行安装，make uninstall 是卸载，不加参数就是默认的进行源代码编译。<br>make 是 Linux 开发套件里面自动化编译的一个控制程序，他通过借助 Makefile 里面编写的编译规范进行自动化的调用 gcc 、ld 以及运行某些需要的程序进行编译的程序。一般情况下，他所使用的 Makefile 控制代码，由 configure 这个设置脚本根据给定的参数和系统环境生成。</p><p>3、make install</p><p>这条命令来进行安装（当然有些软件需要先运行 make check 或 make test来进行一些测试），这一步一般需要你有 root 权限（因为要向系统写入文件）</p><blockquote><p>作者：cuteximi_1995 链接：<a href="https://www.jianshu.com/p/c70afbbf5172">https://www.jianshu.com/p/c70afbbf5172</a> 来源：简书</p></blockquote><h3 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h3><p>Makefile给我的感觉，就好像是另一种编程语言一样。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AFLGo源码阅读-1&quot;&gt;&lt;a href=&quot;#AFLGo源码阅读-1&quot; class=&quot;headerlink&quot; title=&quot;AFLGo源码阅读-1&quot;&gt;&lt;/a&gt;AFLGo源码阅读-1&lt;/h1&gt;&lt;p&gt;首先还是要从基础的C语言语句开始补起。&lt;/p&gt;
&lt;h2 id=&quot;AF</summary>
      
    
    
    
    <category term="毕设" scheme="https://laobameishijia.github.io/category/%E6%AF%95%E8%AE%BE/"/>
    
    
    <category term="Fuzz" scheme="https://laobameishijia.github.io/tag/Fuzz/"/>
    
    <category term="AFLGo" scheme="https://laobameishijia.github.io/tag/AFLGo/"/>
    
  </entry>
  
  <entry>
    <title>毕设-Fuzz-论文1</title>
    <link href="https://laobameishijia.github.io/2021/12/09/bi-she-fuzz-lun-wen-1/"/>
    <id>https://laobameishijia.github.io/2021/12/09/bi-she-fuzz-lun-wen-1/</id>
    <published>2021-12-09T09:25:00.000Z</published>
    <updated>2021-12-22T08:38:25.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Directed-Greybox-Fuzzing"><a href="#Directed-Greybox-Fuzzing" class="headerlink" title="Directed Greybox Fuzzing"></a>Directed Greybox Fuzzing</h1><p>第一次完全从头看到尾的十六页的论文, 一方面是为了清楚AFLGo实现的原理, 另一方面是为开题报告积累一些材料. 后面, 还需要再把介绍AFL框架的论文看一遍. 因为AFLGo是以其为基础进行扩展的. 那想要了解地更深入, 就不可避免地要把基础搞懂.</p><p>这篇论文读下来, 发现AFLGo是在AFL的基础上添加了模拟退火算法. 其他的,因为看论文的时间过去了一段时间, 居然就都忘记了.</p><p>AFL重要的设计思想因为没有论文只能是去看项目中的txt, 很多东西也是看不太懂. 只能慢慢地硬啃了……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Directed-Greybox-Fuzzing&quot;&gt;&lt;a href=&quot;#Directed-Greybox-Fuzzing&quot; class=&quot;headerlink&quot; title=&quot;Directed Greybox Fuzzing&quot;&gt;&lt;/a&gt;Directed Greyb</summary>
      
    
    
    
    <category term="毕设" scheme="https://laobameishijia.github.io/category/%E6%AF%95%E8%AE%BE/"/>
    
    
    <category term="Fuzz" scheme="https://laobameishijia.github.io/tag/Fuzz/"/>
    
  </entry>
  
  <entry>
    <title>毕设-Fuzz-8</title>
    <link href="https://laobameishijia.github.io/2021/12/06/bi-she-fuzz-8/"/>
    <id>https://laobameishijia.github.io/2021/12/06/bi-she-fuzz-8/</id>
    <published>2021-12-06T09:25:00.000Z</published>
    <updated>2021-12-22T08:38:25.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NoteBook阅读"><a href="#NoteBook阅读" class="headerlink" title="NoteBook阅读"></a>NoteBook阅读</h1><h1 id="Parser"><a href="#Parser" class="headerlink" title="Parser"></a>Parser</h1><p>最近看的部分都是语法部分的, 从开始我们通过<strong>语法来表述各种语言</strong>. 到后面<strong>用设计好的语法来生成字符串.</strong></p><p>但是呢, 其实也可以反过来. 就是先给一个字符串, 用这个字符串分解成语法部分—也就是前面所说的<code>the derivation tree of that string</code>.然后我们再用这个tree去生成其他的测试数据.</p><blockquote><p>不过看了后面的例子, 他的意思是这样的. 我先已经有一个语法了, 但是呢, 这个语法的效果不是很好. 那么我们就需要从样本数据中提取模板. 然后在反过头去修改我们的语法. 这样可以使产生的数据更符合我们的要求. 换句话说, 就是有效的数据占比要更大.</p></blockquote><p><strong>这部分后面的代码就不看了. 我觉得我当下的重点, 也并不是完全读懂所有的代码逻辑. 而是清楚并了解fuzz相关的背景知识, 然后再去针对性的看论文和代码. 这样效率会更高一点吧.</strong></p><hr><p>看到后面这个部分的时候, 我突然感觉对于之前语法结构的理解有一些偏差.</p><p><code>noterminal</code> <code>terminal</code> <code>symbol</code>之间的关系和区别</p><p>原文中是这么说:</p><p>In the above expression, the rule <code>&lt;expr&gt;</code> : <code>[&lt;expr&gt; + &lt;expr&gt;, &lt;expr&gt; - &lt;expr&gt;, &lt;integer&gt;] </code> corresponds to how the nonterminal <code>&lt;expr&gt;</code> might be expanded. The expression <code>&lt;expr&gt; + &lt;expr&gt;</code> corresponds to one of the alternative choices. We call this an alternative expansion for the nonterminal <code>&lt;expr&gt;</code>. Finally, in an expression <code>&lt;expr&gt; + &lt;expr&gt;</code>, each of <code>&lt;expr&gt;</code>, <code>+</code>, and <code>&lt;expr&gt;</code> are symbols in that expansion. A symbol could be either a nonterminal or a terminal symbol based on whether its expansion is available in the grammar.</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NoteBook阅读&quot;&gt;&lt;a href=&quot;#NoteBook阅读&quot; class=&quot;headerlink&quot; title=&quot;NoteBook阅读&quot;&gt;&lt;/a&gt;NoteBook阅读&lt;/h1&gt;&lt;h1 id=&quot;Parser&quot;&gt;&lt;a href=&quot;#Parser&quot; class=&quot;</summary>
      
    
    
    
    <category term="毕设" scheme="https://laobameishijia.github.io/category/%E6%AF%95%E8%AE%BE/"/>
    
    
    <category term="Fuzz" scheme="https://laobameishijia.github.io/tag/Fuzz/"/>
    
  </entry>
  
  <entry>
    <title>毕设-Fuzz-9</title>
    <link href="https://laobameishijia.github.io/2021/12/06/bi-she-fuzz-9/"/>
    <id>https://laobameishijia.github.io/2021/12/06/bi-she-fuzz-9/</id>
    <published>2021-12-06T09:25:00.000Z</published>
    <updated>2021-12-22T08:38:25.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NoteBook阅读"><a href="#NoteBook阅读" class="headerlink" title="NoteBook阅读"></a>NoteBook阅读</h1><h2 id="Probabilistic-Grammar-Fuzzing"><a href="#Probabilistic-Grammar-Fuzzing" class="headerlink" title="Probabilistic Grammar Fuzzing"></a>Probabilistic Grammar Fuzzing</h2><p>我们可以根据我们的需要去生成测试数据, 可以给某个<code>expansion</code>很高的权重, 这样的话, 在生成的数据过程中, 这个<code>expansion</code>被选择的概率就很高. 最终数据中的占比也就比较高.</p><blockquote><p>下面原文的意思也就是上面所说的</p></blockquote><h3 id="Synopsis"><a href="#Synopsis" class="headerlink" title="Synopsis"></a>Synopsis</h3><p>To <a href="Importing.ipynb">use the code provided in this chapter</a>, write</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> fuzzingbook<span class="token punctuation">.</span>ProbabilisticGrammarFuzzer <span class="token keyword">import</span> <span class="token operator">&lt;</span>identifier<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>and then make use of the following features.</p><p>A <em>probabilistic</em> grammar allows to attach individual <em>probabilities</em> to production rules.  To set the probability of an individual expansion <code>S</code> to the value <code>X</code> (between 0 and 1), replace it with a pair</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span>S<span class="token punctuation">,</span> opts<span class="token punctuation">(</span>prob<span class="token operator">=</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>If we want to ensure that 90% of phone numbers generated have an area code starting with <code>9</code>, we can write:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> Grammars <span class="token keyword">import</span> US_PHONE_GRAMMAR<span class="token punctuation">,</span> extend_grammar<span class="token punctuation">,</span> opts<span class="token operator">>></span><span class="token operator">></span> PROBABILISTIC_US_PHONE_GRAMMAR<span class="token punctuation">:</span> Grammar <span class="token operator">=</span> extend_grammar<span class="token punctuation">(</span>US_PHONE_GRAMMAR<span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token operator">>></span><span class="token operator">></span>       <span class="token string">"&lt;lead-digit>"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">>></span><span class="token operator">></span>                           <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span>                           <span class="token punctuation">(</span><span class="token string">"9"</span><span class="token punctuation">,</span> opts<span class="token punctuation">(</span>prob<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>                       <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A <code>ProbabilisticGrammarFuzzer</code> will extract and interpret these options.  Here is an example:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> probabilistic_us_phone_fuzzer <span class="token operator">=</span> ProbabilisticGrammarFuzzer<span class="token punctuation">(</span>PROBABILISTIC_US_PHONE_GRAMMAR<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span>probabilistic_us_phone_fuzzer<span class="token punctuation">.</span>fuzz<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'(918)925-2501'</span><span class="token punctuation">,</span> <span class="token string">'(981)925-0792'</span><span class="token punctuation">,</span> <span class="token string">'(934)995-5029'</span><span class="token punctuation">,</span> <span class="token string">'(955)999-7801'</span><span class="token punctuation">,</span> <span class="token string">'(964)927-0877'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>As you can see, the large majority of area codes now starts with <code>9</code>.</p><h3 id="Learning-Probabilities-from-Samples"><a href="#Learning-Probabilities-from-Samples" class="headerlink" title="Learning Probabilities from Samples"></a>Learning Probabilities from Samples</h3><p>对于<code>expasion</code>的权重来讲, 必须要通过人工设定. 我们可以通过学习样本数据来设定这样的权重.</p><p>Probabilities need not be set manually all the time.  They can also be <em>learned</em> from other sources, notably by counting <em>how frequently individual expansions occur in a given set of inputs</em>.  This is useful in a number of situations, including:</p><ol><li>Test <em>common</em> features.  The idea is that during testing, one may want to focus on frequently occurring (or frequently used) features first, to ensure correct functionality for the most common usages.</li><li>Test <em>uncommon</em> features.  Here, the idea is to have test generation focus on features that are rarely seen (or not seen at all) in inputs.  This is the same motivation as with <a href="GrammarCoverageFuzzer.ipynb">grammar coverage</a>, but from a probabilistic standpoint.</li><li>Focus on specific <em>slices</em>.  One may have a set of inputs that is of particular interest (for instance, because they exercise a critical functionality, or recently have discovered bugs).  Using this learned distribution for fuzzing allows us to <em>focus</em> on precisely these functionalities of interest.</li></ol><h3 id="Lessons-Learned"><a href="#Lessons-Learned" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h3><ul><li>By specifying probabilities, one can steer fuzzing towards input features of interest.</li><li>Learning probabilities from samples allows one to focus on features that are common or uncommon in input samples.</li><li>Learning probabilities from a subset of samples allows one to produce more similar inputs.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NoteBook阅读&quot;&gt;&lt;a href=&quot;#NoteBook阅读&quot; class=&quot;headerlink&quot; title=&quot;NoteBook阅读&quot;&gt;&lt;/a&gt;NoteBook阅读&lt;/h1&gt;&lt;h2 id=&quot;Probabilistic-Grammar-Fuzzing&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="毕设" scheme="https://laobameishijia.github.io/category/%E6%AF%95%E8%AE%BE/"/>
    
    
    <category term="Fuzz" scheme="https://laobameishijia.github.io/tag/Fuzz/"/>
    
  </entry>
  
  <entry>
    <title>毕设-Fuzz-7</title>
    <link href="https://laobameishijia.github.io/2021/12/05/bi-she-fuzz-7/"/>
    <id>https://laobameishijia.github.io/2021/12/05/bi-she-fuzz-7/</id>
    <published>2021-12-05T09:25:00.000Z</published>
    <updated>2021-12-22T08:38:25.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NoteBook阅读"><a href="#NoteBook阅读" class="headerlink" title="NoteBook阅读"></a>NoteBook阅读</h1><h2 id="Grammar-Coverage"><a href="#Grammar-Coverage" class="headerlink" title="Grammar Coverage"></a>Grammar Coverage</h2><p>在之前, 按照语法去去扩展生成字符串的时候, <strong>总是把各种扩展被选择的可能性相等化</strong>. 但是呢, 对于产生详细的综合性测试数据来说, <strong>更看重种类的最大化.(不一次又一次地重复相同的扩展)</strong></p><p>所以, 这小节就是为了解决这个问题. 当然, 在我们上一节的扩展中, 我们使用了<code>maxcost</code>和<code>mincost</code>两种方法, 也确实在一定程度上, 增大了种类的多样性,同时也避免了无限扩展的发生. 可能这一节会对这个问题展开更详细地解答把.</p><blockquote><p>毕竟从理论上来说, 更多地对产生输入数据路径的覆盖(<code>更高的语法覆盖率</code>)理论上会产生更高的<code>代码覆盖率</code>, 也就更有可能触发新的bug. 这也是这部分工作的意义</p></blockquote><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211205200902.png" alt="三种方法的效果对比"></p><h3 id="Synopsis"><a href="#Synopsis" class="headerlink" title="Synopsis"></a>Synopsis</h3><p>This chapter introduces <code>GrammarCoverageFuzzer</code>, an efficient grammar fuzzer extending <code>GrammarFuzzer</code> from the <a href="GrammarFuzzer.ipynb">chapter on efficient grammar fuzzing</a>.  It strives to <em>cover all expansions at least once,</em> thus ensuring coverage of functionality.</p><p>In the following example, for instance, we use <code>GrammarCoverageFuzzer</code> to produce an expression. We see that the resulting expression <strong>covers all digits and all operators in a single expression.</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">>></span> <span class="token string">'-(2 + 3) * 4.5 / 6 - 2.0 / +8 + 7 + 3'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Lessons-Learned"><a href="#Lessons-Learned" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h3><ul><li>Achieving <em>grammar coverage</em> quickly results in a large variety of inputs.</li><li>Duplicating grammar rules allows to cover elements in specific <em>contexts</em>.–这个点,我是真的不太理解, 相当于复制了很多副本进来. 这样就能实现很覆盖语法路径?</li><li>Achieving grammar coverage can help in obtaining <em>code coverage</em>.—这个东西, 要具体问题具体分析, 在有些问题上面, 语法覆盖率和代码覆盖率是正相关. 但并不代表所有的问题都是这样.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NoteBook阅读&quot;&gt;&lt;a href=&quot;#NoteBook阅读&quot; class=&quot;headerlink&quot; title=&quot;NoteBook阅读&quot;&gt;&lt;/a&gt;NoteBook阅读&lt;/h1&gt;&lt;h2 id=&quot;Grammar-Coverage&quot;&gt;&lt;a href=&quot;#Gramm</summary>
      
    
    
    
    <category term="毕设" scheme="https://laobameishijia.github.io/category/%E6%AF%95%E8%AE%BE/"/>
    
    
    <category term="Fuzz" scheme="https://laobameishijia.github.io/tag/Fuzz/"/>
    
  </entry>
  
  <entry>
    <title>毕设-Fuzz-6</title>
    <link href="https://laobameishijia.github.io/2021/12/03/bi-she-fuzz-6/"/>
    <id>https://laobameishijia.github.io/2021/12/03/bi-she-fuzz-6/</id>
    <published>2021-12-03T09:25:00.000Z</published>
    <updated>2021-12-22T08:38:25.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NoteBook阅读"><a href="#NoteBook阅读" class="headerlink" title="NoteBook阅读"></a>NoteBook阅读</h1><h2 id="GrammarFuzzer"><a href="#GrammarFuzzer" class="headerlink" title="GrammarFuzzer"></a>GrammarFuzzer</h2><p>这一小节讲的是, 将字符串的表现形式变成了树结构. 方便查找和更改</p><p>并且呢, 我们优化了之前根据语法生成数据的方法, ***(按照之前的方法生成测试数据,会发现大部分测试数据非常长,并没有很大的意义) *** 因为 <strong>如果不对非终止符的最大和最小值进行限制的话, 会分别导致无限循环和测试数据种类不全的问题</strong>.</p><p>之前算法的问题:</p><p>The problem of potentially infinite expansion is only one of the problems with <code>simple_grammar_fuzzer()</code>.  More problems include:</p><ol><li><p><em>It is inefficient</em>.  With each iteration, this fuzzer would go search the string produced so far for symbols to expand.  This becomes inefficient as the production string grows.— 效率比较低, 因为每次扩展的时候, 要搜素字符串去寻找相应的扩展symbol-(<code>前面算法里面加了很多正则匹配提取字符串的</code>), 字符串一长效率自然就低下来了. 不过, python中存储字符串的结构是什么? 应该是列表, 这样的话 肯定是不如树的遍历来的快一些.-(<code>不是很清楚到底是因为什么原因导致了, 生成测试字符串效率变高, 但无疑从结果的角度上面看的话, 改进之后的遍历方式确实要比之前快多了</code>)</p></li><li><p><em>It is hard to control.</em>  Even while limiting the number of symbols, it is still possible to obtain very long strings – and even infinitely long ones, as discussed above.—很难控制, 容易生成很长的字符串</p></li></ol><p>统一生成50个测试数据的话:</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211204154412.png" alt="改进前-Average time: 0.24"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211204154543.png" alt="改进后-Average time: 0.06"></p><blockquote><p>就感觉这一小节都在讲如何构建这个树结构, 以及采用何种策略拓展节点.(在设置的最大最小值的范围内)</p></blockquote><p><strong>The key idea in this chapter, namely expanding until a limit of symbols is reached, and then always choosing the shortest path, stems from Luke</strong></p><h3 id="Lessons-Learned"><a href="#Lessons-Learned" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h3><ul><li><em>Derivation trees</em> are important for expressing input structure</li><li><em>Grammar fuzzing based on derivation trees</em> <ol><li>is much more efficient than string-based grammar fuzzing,</li><li>gives much better control over input generation, and</li><li>effectively avoids running into infinite expansions.</li></ol></li></ul><h3 id="BNF语法"><a href="#BNF语法" class="headerlink" title="BNF语法"></a>BNF语法</h3><p>在上一小节中同样也用过BNF还有EBNF(BNF的一种增强型)</p><p>作者：不是Zoe<br>链接：<a href="https://www.zhihu.com/question/27051306/answer/579820547">https://www.zhihu.com/question/27051306/answer/579820547</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><p>BNF是John Backus 在20世纪90年代提出的用以简洁描述一种编程语言的语言。</p><p>基本结构为：<code>&lt;non-terminal&gt; ::= &lt;replacement&gt;</code> non-terminal意为非终止符，就是说我们还没有定义完的东西，还可以继续由右边的replacement，也就是代替物来进一步解释、定义。</p><p>举个例子：在中文语法里，一个句子一般由“主语”、“谓语”和“宾语”组成，主语可以是名词或者代词，谓语一般是动词，宾语可以使形容词，名词或者代词。那么“主语”、“谓语”和“宾语”就是非终止符，因为还可以继续由“名词”、“代词”、“动词”、“形容词”等替代。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">例1. &lt;句子> ::= &lt;主语>&lt;谓语>&lt;宾语>例2. &lt;主语> ::= &lt;名词>|&lt;代词>例3. &lt;谓语>::=&lt;动词>例4. &lt;宾语>::=&lt;形容词>|&lt;名词>|&lt;代词>例5. &lt;代词>::=&lt;我>例6. &lt;动词>::=&lt;吃>例7. &lt;动词>::=&lt;喜欢>例8. &lt;名词>::=&lt;车>例9. &lt;名词>::=&lt;肉><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上，在<code>::=</code>左边的就是<code>non-terminal</code>非终止符，右边的就是<code>replacement</code>，可以是一系列的非终止符，如例1中的<code>replacement</code>便是后面例234左边的非终止符，也可以是终止符，如例56789的右边，找不到别的符号来进一步代替。因此，终止符永远不会出现在左边。一旦我们看到了终止符，这个描述过程就结束了。</p><h3 id="py高阶用法"><a href="#py高阶用法" class="headerlink" title="py高阶用法"></a>py高阶用法</h3><h4 id="可变参数-amp-amp-关键字参数"><a href="#可变参数-amp-amp-关键字参数" class="headerlink" title="可变参数&amp;&amp;关键字参数"></a>可变参数&amp;&amp;关键字参数</h4><p><strong>可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple</strong>,而<strong>关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>test<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token operator">**</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>test1<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"test"</span><span class="token punctuation">,</span>name1<span class="token operator">=</span><span class="token string">"test1"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'name1'</span><span class="token punctuation">:</span> <span class="token string">'test1'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>除了函数的传参, 在赋值的语句中也会出现可选参数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a b c"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span><span class="token operator">*</span>d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a b c d"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a b c <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> a b c d <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="repr-函数"><a href="#repr-函数" class="headerlink" title="repr() 函数"></a>repr() 函数</h4><p>repr() 函数将对象转化为供解释器读取的形式。<br><strong>参数</strong><br>object – 对象。<br><strong>返回值</strong><br>返回一个对象的 string 格式。</p><blockquote><p>这个函数有一说一, 还是不理解到底用处是啥. 有的时候传参不加repr(a)会说a缺少某个属性, 但是repr(a)按照上面的理解的话, 也只是变成了一个字符串. 那为什么就莫名其妙不缺少这个属性了.~~</p></blockquote><h4 id="递归加循环的写法"><a href="#递归加循环的写法" class="headerlink" title="递归加循环的写法"></a>递归加循环的写法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">all_terminals</span><span class="token punctuation">(</span>tree<span class="token punctuation">:</span> DerivationTree<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token punctuation">(</span>symbol<span class="token punctuation">,</span> children<span class="token punctuation">)</span> <span class="token operator">=</span> tree    <span class="token keyword">if</span> children <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token comment"># This is a nonterminal symbol not expanded yet</span>        <span class="token keyword">return</span> symbol    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token comment"># This is a terminal symbol</span>        <span class="token keyword">return</span> symbol    <span class="token comment"># This is an expanded symbol:</span>    <span class="token comment"># Concatenate all terminal symbols from all children</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>all_terminals<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> children<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="any-函数"><a href="#any-函数" class="headerlink" title="any()函数"></a>any()函数</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211203211320.png" alt="any函数"></p><h4 id="集合set"><a href="#集合set" class="headerlink" title="集合set()"></a>集合set()</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span>b<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span>c<span class="token operator">=</span> a<span class="token operator">|</span>b <span class="token comment"># 把a b集合拼接在一起,不重复的那种</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="print"><a href="#print" class="headerlink" title="print()"></a>print()</h4><blockquote><p>我这是来学习fuzz的? 还是在重新学习python的详细编程?</p></blockquote><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211204152407.png" alt="print()"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NoteBook阅读&quot;&gt;&lt;a href=&quot;#NoteBook阅读&quot; class=&quot;headerlink&quot; title=&quot;NoteBook阅读&quot;&gt;&lt;/a&gt;NoteBook阅读&lt;/h1&gt;&lt;h2 id=&quot;GrammarFuzzer&quot;&gt;&lt;a href=&quot;#GrammarF</summary>
      
    
    
    
    <category term="毕设" scheme="https://laobameishijia.github.io/category/%E6%AF%95%E8%AE%BE/"/>
    
    
    <category term="Fuzz" scheme="https://laobameishijia.github.io/tag/Fuzz/"/>
    
  </entry>
  
  <entry>
    <title>动漫-进击的巨人</title>
    <link href="https://laobameishijia.github.io/2021/12/01/dong-man-jin-ji-de-ju-ren/"/>
    <id>https://laobameishijia.github.io/2021/12/01/dong-man-jin-ji-de-ju-ren/</id>
    <published>2021-12-01T09:25:00.000Z</published>
    <updated>2021-12-22T08:38:25.208Z</updated>
    
    <content type="html"><![CDATA[<p>本篇是在网上找到的, 自认为相对评价客观而且质量较高的. 原封不动的复制下来的. 即使是看了这篇文章, 仍然还是有很多问题我没有理解. </p><p>作者 杨宸<br><a href="https://www.artforum.com.cn/slant/13455">https://www.artforum.com.cn/slant/13455</a></p><p>一直以来, 我都认为只有文学作品才能达到这种高度. 现在才发现动漫也是文学作品. </p><ul><li><p><input checked="" disabled="" type="checkbox">  什么是决断主义? 什么是心理主义?</p><p>A: 这些应该也是日本动漫作品类型的分类, 也没查到很具体的定义.</p></li><li><p><input checked="" disabled="" type="checkbox">  斯德哥尔摩综合症在现实生活中体现的例子?</p><p>A: 这个感觉一句话概况的很好, <strong>人是可以被驯服的</strong> 人性能承受的恐惧是一条脆弱的底线，人在恐惧、饥饿面前一点点的被奴化，并非不想反抗，只是在特定环境下，失去了反抗的能力以及思维。</p></li><li><p><input checked="" disabled="" type="checkbox">  什么是世界系? 什么是幸存系?</p><p>A: 这两个是动漫作品的分类.<strong>“世界系”</strong> 所描述的作品群的特征是，“以故事主人公（我）和他所牵挂的女主角（你）的二人关系为中心，将小的日常性（你和我）的问题与‘世界的危机’、‘这个世界的终结’等抽象且非日常的大问题直接连接起来，舍弃一切中间具体的（社会性的）说明描写。”<br><strong>“幸存系”</strong> 以在特定战斗空间内发生的“生死斗争”为基本模式，“不战斗就会死”的幸存感弥漫其中，《死亡笔记》（2003-2006）、《反叛的鲁路修》（2006）便是其中的典型。</p></li></ul><p>其实, 我之前理解这部作品想传递的价值观非常简单. 是人类在面对未知世界不断探索的精神, 是在面对危险和内心极大恐惧时咬牙前行的勇气, 是在战争双方残酷战场上闪耀的微茫的人性的光辉, 是为了守护心爱的人奋不顾身的爱情, 是为了保全同胞不惜牺牲自己的友情. 结果, 作者却在第四季,一个接一个的打破了我之前想象好的所有的价值观. </p><ul><li>人类并没有灭绝. 反倒是壁内的各位被洗脑之后, 赶到了一个岛上自己封闭. 因为之前残暴的历史, 至今被人们甚至是自己的同胞视为恶魔.被无情的当作工具.</li><li>三笠和艾伦好像是个悲剧. 艾伦居然在说, 三笠是简单的把自己视为要守护的主人. 这一点真的是我最不能接受的. 那个曾经为了家人和朋友战斗的高大形象, 瞬间崩塌. 最后还让三笠等自己个十年?, 撒小孩子脾气. 真是~~. 无数次的保护, 换来的难道只是自己心爱的人说自己只是个奴隶? 如果预料到这, 艾伦还不如早点死了.</li><li>曾经调查军团各位战友的慷慨赴死到底是为了什么? 他们自认为是为了人类的生存事业而死, 但到最后换来是发动地鸣毁灭世界. 那么多人的牺牲, 在我看来,毫无意义.先是被始祖巨人洗脑, 再后来是被艾伦戏耍. 这难道就是棋子吗?</li><li>还有就像是傻子一样的艾伦, 最开始是因为自己妈妈被巨人吃掉, 到后来是因为他自己控制巨人把自己妈妈吃掉. 我真醉了………</li></ul><h1 id="进击的巨人"><a href="#进击的巨人" class="headerlink" title="进击的巨人"></a>进击的巨人</h1><p>致2000年后的你<br>2021.07.17 • 杨宸论《进击的巨人》结局为何失败</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211201110133.png" alt="《进击的巨人》TV版最终季剧照，2021"></p><p>漫画《进击的巨人》于4月9日完结后，关于大结局的讨伐之声便不绝于耳。神剧烂尾、结局崩坏是大部分读者给出的评价。诚然如此，不过，在大结局造成的创伤后应激反应平复之后，更值得追问的问题也许是，《巨人》的结局为何“失败”？或者说，在何种意义上，《巨人》的结局“失败”了？本文希望回到《巨人》的整体创作以及它侧身其中之特定的历史与现实，以穿透这一“失败”之本质，这也是今天我们还要谈论这部漫画的意义所在。</p><p>2009年，23岁的年轻人谏山创（Isayama Hajime）开始连载他的出道作《进击的巨人》，四年之后，《巨人》迎来了动画化，并迅速成为当季霸主，人气一路飞飙。到2020年，《巨人》漫画已经售出超9000万册。对于《巨人》的成功，Wit Studio动画公司的精良制作和泽野弘之（Sawano Hiroyuki）那磅礴悲壮的配乐功不可没，但更重要的是，谏山创为《巨人》打造的“世界”及萦绕其上的“谜团”。</p><p>一言蔽之，《进击的巨人》讲述了如同家畜般被“豢养”在三堵巨大高墙之内的人类与墙外不断捕食人类的巨人相抗争的故事。在“那一天”，因玛丽亚之墙被铠甲巨人和超大型巨人攻破，主角艾伦·耶格尔眼睁睁看着自己的母亲被巨人吞噬。人类家园沦丧，悲愤的艾伦发誓“要把它们全部驱逐出去，一匹不留”，而后他与青梅竹马的三笠、好友阿明加入了以探索墙外世界、与巨人斗争为己任的调查兵团。整个故事便围绕着艾伦及其所属的调查兵团展开。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211201110308.png" alt="《进击的巨人》TV版第一季剧照，2013"></p><p>乍一看，《巨人》几乎集齐了既往少年漫画必备的所有要素：庞大的世界观、中二感爆棚的主角、精彩绝伦的战斗场面（得益于“立体机动装置”带来的滑翔战斗模式）、伙伴间的羁绊……而且随着剧情展开，观众发现主角的身世没那么简单——“天选之子”，这更是少年漫主角的“标配”。然而，使《巨人》与此前《火影忍者》、《死神》、《海贼王》等主流少年漫区别开来的，却是其剧情的“残酷”。</p><p>和同时期引发热潮的《权力的游戏》类似，在《巨人》中，人命如草芥，死亡可以随时降临到任何人头上，而且是以极其残酷的方式。你认为可能是重要人物的角色，或许下一秒就被巨人掰断了脊骨，一口口嚼碎。《巨人》非常着力于刻画人类面对巨人时的恐惧，并以死前狰狞扭曲的表情来展现这种残酷之直观。即便是带领调查兵团取得诸多战果的大英雄埃尔文团长，在主动迎向猿巨人而英勇赴死的那一刻，脸上仍然非常明显地流露出了对于死亡的惧怖。《巨人》的生存哲学正是建立在这种死亡的直观之上：“<strong>那些勇敢的死者、那些可悲的死者，我们之所以能这么想，正是因为我们是生者。我们会死在这里，将意义托付给下一个生者，这就是与这个残酷世界抗争的唯一手段！</strong>”</p><p>在这个意义上，《巨人》可以被归入日本评论家宇野常宽（Uno Tsunehiro）所称的“幸存系”作品序列之中。宇野常宽认为，在2001年前后，日本出现了一种新的故事类型，这类故事以在特定战斗空间内发生的“生死斗争”为基本模式，“不战斗就会死”的幸存感弥漫其中，《死亡笔记》（2003-2006）、《反叛的鲁路修》（2006）便是其中的典型。因为1999年高见广春（Takami Koshun）的小说《大逃杀》可以被视为其先驱，所以这类故事又被称为“大逃杀系”。幸存系/大逃杀系的兴起在日本国内有着明确的现实动因：为了应对泡沫经济破灭后的“平成不况”，日本首相小泉纯一郎在21世纪初开始进行新自由主义的结构性改革。小泉改革的风格颇类当年的撒切尔夫人，力倡小政府，推行私有化。其中最著名的事件，便是小泉不惜冒巨大政治风险解散众议院也要将日本的邮政系统民营化。如此一来，国民生活被一股脑推给市场，虽然经济逐步复苏，但贫富差距也随之越拉越大。置身于这般弱肉强食的残酷市场竞争机制之中，年轻人可以无忧躺在床上看动漫打游戏当个家里蹲御宅族的日子一去不返，“不战斗/奋斗就会死”成为了年轻人的紧箍咒。用我们熟悉的话来说，2001年之后的日本年轻人，已经不再能够悠闲地躺平，只得参与到疯狂的内卷之中。</p><p>日本的情况其实内在于晚期资本主义的全球化进程之中。这也是为什么作为全球化进程副产品的9·11恐怖袭击可以被宇野常宽指认为“大逃杀”的现实开端。于是，正如麦克弗森（C. B. Macpherson）曾提示我们说，霍布斯提出“一切人对一切人的战争”的自然状态不过是对资本主义早期市场的隐喻那样，作为晚期资本主义文化逻辑的外显，一切人对一切人的“大逃杀”兴起了。</p><p>《巨人》无疑是这一思路的延续，然而，它还提供了更为激动人心的东西——它许诺了一个“外部”，一个“墙外的世界”，作为退离大逃杀状态的出口。而对这个出口的探索则与对“世界之谜”的解答相绑定：“为什么那天妈妈会被巨人吃掉”？巨人到底从何而来？墙外的世界是什么样子？……《巨人》最核心的价值——“进击”的“自由”——便是基于对这个既作为解释又作为解决的“墙外世界”之信念，所有的幸福和崇高，皆来源于此：那是得以理解我们为何不得不大逃杀的自由，那是可以免于大逃杀之恐怖残酷的自由，那是不必经历大逃杀也能昂首挺胸堂堂正正地“生活”下去的自由。</p><p>怀揣着这样的自由之信念，《巨人》在漫画第91话/动画最终季迎来了其最大的转折。</p><p>“海那边有自由。”</p><p>“不，海那边有敌人。”</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211201110345.png" alt="《进击的巨人》TV版第一季和最终季主海报对比：左边第一季海报上是艾伦面对袭来的铠甲巨人（莱纳），右边最终季海报是马莱战士莱纳面对袭来的进击的巨人（艾伦），视角完全反转.​"></p><p>在进入最后的“马莱篇”之前，巨人之谜已大半揭开：所谓巨人全是由与恶魔签订契约的尤弥尔之子民艾尔迪亚人变化而来。艾尔迪亚人曾凭借巨人之力屠戮过全世界。但到初代雷伊斯王时，由于厌倦了战争，王带领艾尔迪亚人退守帕拉迪岛，立下不战之誓，筑起三道高墙，消除民众记忆，从此与世隔绝。而另一部分滞留在大陆的艾尔迪亚人，则在大国马莱的统治下成为劣等民族，要么被用作无脑的战争怪兽，要么凭自己的努力成为马莱的战士，赢得荣誉马莱人的身份。作为惩罚，马莱不断将艾尔迪亚人流放到帕拉迪岛变成只会吞噬人类的无脑巨人，而为了夺取艾尔迪亚人掌握的始祖巨人之力以及帕拉迪岛上的资源，马莱派出战斗小队破坏玛丽亚之墙，则引发了所有的故事。</p><p>于是，在离开帕拉迪岛进入马莱篇之后，谏山创开始“自掘坟墓”，将作为《巨人》核心的自由之绝对价值给相对化了。这种相对化表现在叙述技法上，是从此前的艾尔迪亚视角转变为了（或曰增加了）马莱视角，而在主题上则是把“世界之谜”具体化为了“政治之谜”。</p><p>此前动不动就大喊大叫、情感波动巨大的中二主角艾伦，到了最终季“断裂”般地变为沉默寡言、高深莫测、独断专行的艾主席。他不动声色地推行着自己的隐秘计划，甚至不惜发动“地鸣”，让众多超大型巨人涉海而过，屠戮马莱无辜百姓。此前，观众都是通过艾伦的艾尔迪亚视角来观看巨人以及望向“墙外世界”，《巨人》的自由正是建立在这样的绝对观视之上。而到这里，无法进入艾主席视角的观众，只得通过此前的“敌人”马莱人的视角来观看似乎已然化身为恶魔的艾主席。在这样自反性的二阶观察之下，自由的绝对价值被瓦解了。调查兵团诸士兵的“死”开始变得不再那么崇高，甚至变得“可笑”，因为他们曾被认为是为了人类而牺牲，到头来却发现，他们不过是为两个民族/种族的继续相互屠戮作了炮灰。</p><p>而这种视角转变的基础，则是《巨人》通过引入民族国家议题，将对“世界真相”的本体论探寻降落为了对“世界难题”的政治性解决。这个难题首先在于：<strong>如果一个民族/种族可能会对另一个民族/种族构成威胁，那么如何处理这二者之间的关系？</strong> 该难题还有一个隐含的问题：<strong>如何处理这两个民族/种族之间的历史债务？</strong> 在此基础上，《巨人》通过“某族人可以把自己变为巨人”这样一个科幻般的设定，把这个难题推到了极端，构成了一个“政治绝境”：<strong>如果一个民族/种族的存在必定会对另一个民族/种族造成伤害，如何处理它们之间的关系？</strong> 在这种落实之下，曾经作为绝对独立的主体之自我实现的问题，立马被转变为了相对的主体间性问题，而且它还被牢牢地束缚在政治性的关系（甚至是你死我活的生死斗争）之中。于是，“世界”被瓦解了，取而代之的是民族国家的视域。</p><p>不过，这种“自掘坟墓”非但没有将《巨人》葬埋，反而开掘出了《巨人》在深度上超越以往同类型作品的可能性。</p><p>按照宇野常宽的论说，<strong>幸存系直接联系着决断主义的倾向</strong>，这是相对于1990年代“世界系”作品的心理主义倾向而言的。由日本评论家东浩纪（Azuma Hiroki）提出的世界系乃是一种越过社会、国家、历史，将自我与世界直接勾连的叙事想象力。这里的世界，用社会学家宫台真司（Miyadai Shinji）的话说，<strong>并非处于自我意识掌控之外的那个现实世界，而是被自我意识所标记的“世界”</strong>。换言之，<strong>世界系故事通过为自我所标记的“世界”来对自我进行无条件地认可，这样一种循环论证使世界系的主体获得了一种心理主义的完足感</strong>。典型代表便是1995年由庵野秀明监督的TV版动画《新世纪福音战士》（EVA）。宫台真司认为，EVA中世界之谜是作为自我之谜而存在的，对世界之谜的解决（人类补完）由是通过对自我之谜的解决（主人公碇真嗣内心的补完）来完成。因此，EVA的世界系实际上标记了一个“自我的时代”。</p><p>当然，<strong>世界系</strong>的出现本身也是晚期资本主义的文化逻辑在日本具体化的结果。在1990年代平成不况和奥姆真理教事件的冲击之下，其时的日本年轻人如同EVA的主人公碇真嗣一般，抱持着对父亲/社会的极大不信任感，并且意识到，在这个宏大叙事已然崩解的社会中，做出任何决断必然会伤害到他人，于是他们宁愿蜷缩在自己的岛宇宙之中，通过做一个躺平的死宅来实现某种抗拒。然而，如前文所述，2001年之后，这样的躺平不再可能。<strong>年轻人不得不在大逃杀之中成为一个决断主义者</strong>。不过，正如宇野常宽所提示的，决断主义并非对世界系的否定，毋宁说，它恰恰是接受了世界系的前提：<strong>做出决断，必定会伤害他人。但仍然要做出决断。这是被抛入残酷市场竞争机制之后的必然选择。每个人都选择自己想要尊奉的“神”，并通过将自己之神赋予超越异己诸神的普遍性来合理化自己的决断。但是这种普遍性只是虚妄。</strong> 换言之， <strong>决断主义者拥有的只是相对的真理，然而它被要求作为一种绝对真理来进行决断，由是伤害（对其他相对真理/小叙事的排斥）便不可避免。</strong> 在此基础上，幸存系既包含着决断主义，也包含着对互相伤害的决断主义之克服。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211201110628.png" alt="《死亡笔记》动画剧照，2006-2007."></p><p>但是怎么克服呢？回到心理主义的世界系吗？宇野常宽用大逃杀系作品《死亡笔记》的主人公夜神月来象征决断主义，并指出——碇真嗣无法阻止夜神月。</p><p>沿着这个思路，我们也许可以将《巨人》在马莱篇开始展开的剧情，视为探寻终结决断主义游戏的尝试。</p><p>前面说过，《巨人》的核心价值建立在对作为解释和解决的“墙外世界”之绝对信念之上，绝对信念导出了绝对自由。然而这种赖以建立“《巨人》大厦”的基础价值，在“墙外世界”被具象化之后，便被解释为了一种相对自由。换言之，决断主义主张的绝对价值被相对化了。通常的少年动漫，往往以几个稳固的核心价值（比如，正义、善良、自由、友爱、和平）为基础，并在此基础上展开主人公的成长故事，主人公的成长同时构成对这些作为基础的先验价值的习得和实践过程，因此无论故事世界如何被颠倒、角色们怎么打得天花乱坠，都不会动摇作品基础的核心价值，反而会强化它。这种教育主义的风格在少年动漫中比比皆是，《火影忍者》、《死神》、《海贼王》皆如此，更低龄向的作品更是以一种中世纪道德剧的作风将核心价值与人物进行直接对应（比如在《数码宝贝》中，八神太一对应勇气、石田大和对应友情等）。然而，在《巨人》这里，作为作品基础的核心价值被动摇了，这正是《巨人》超越此前教育主义少年动漫的地方：将自足的幻想世界祛魅化为一种决断主义并使之相对化。</p><p>但决断主义并不惧怕相对化。毋宁说，决断主义未能自觉的实质在于： <strong>重要的是决断本身，而非决断的内容。因此决断会给他人带来的伤害才根本不在考虑之列。</strong> 所以，即便使之相对化，把“未能自觉”变为“自觉”，仍然无法改变决断主义重在“决断”的立场。那么问题就变成了，通过怎样的相对化来终结决断主义的基础：大逃杀。</p><p>《巨人》的回答是：把它落实为政治问题。落实为政治问题，既是《巨人》将“解释”相对化的方法，也是它探索“解决”的方向。它通过引入两个民族国家（艾尔迪亚与马莱）以巨人之力（仿佛巨量的核武器）为核心的历史与当前的纷争，打开了一个朝向现实世界的窗口，通过这个窗口，当下的现实议题：历史债务问题、种族问题、民族国家问题开始涌入。《巨人》从对“外部”的追求开始，到后来发现不存在“外部”，“外部”就是“内部”，这使得它将问题变成了“外部”的实现，必须通过“内部”来完成。换言之，《巨人》将对大逃杀的解决放到了一个政治框架之中。<strong>这意味着要完成对决断主义的终结，必须要实现对历史债务与现实政治的覆写。</strong></p><p><strong>但这是一部漫画能完成的事情吗？</strong></p><p>《巨人》所能做的只是将作为决断主义者的艾伦摆到了一个主权者的位置上，并通过设定打开窗口让无法以“爽文”方式轻松解决的现实政治议题涌入。在这个意义上，艾伦不是鲁路修，艾伦比鲁路修难多了。</p><p>在终局之前，《巨人》最大的意义在于做出了这样一种努力的“姿态”：在这里，现实不是作为隐喻，而是作为无法消化的硬核，作为必须填补的空白，作为实在界朝向亚文化的想象力崩塌，而亚文化的想象力必须以某种方式“接住”它。</p><p>这就是《巨人》结局不失败的重要条件：以至少说得过去的方式，“接住”它，“解决”它。解决方式有上策有下策，要么谏山创确实聪明绝顶，想出了政治家们都无法想出的解决现实政治问题的方法，要么学习《反叛的鲁路修》和《守望者》，通过让主人公背负罪恶构造一种负面的共同体来维持脆弱的和平，要么利用关于巨人之力的剧情设定，在“巨人之力”这一“解释”之内完成对现实问题的想象性解决。总的来说，两条路：要么老实解决“政治之谜”，要么将“政治之谜”重新还原为“世界之谜”。无论好坏，在这两条路上，大致都能获得一个说得过去的结果。</p><p><strong>但《巨人》的失败就在于：谏山创没有选择任何一条解决路径，而径直跑回心理主义了！</strong></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211201111015.png" alt="《进击的巨人》TV版最终季剧照，2021."></p><p>最终话《朝向那棵树》中，与艾伦青梅竹马的三笠斩下了决断主义主权者艾伦的头颅。一切真相揭开：主权者艾伦在马莱篇中对三笠冷脸恶语相加，到头来面具拿下，不过是他在傲娇，“不要啊！那种事情不要啊！我希望三笠在我死之后还想着我，至少持续十年吧！” <strong>而他悍然发动地鸣灭世计划，不是要解决什么政治问题，只是希望三笠、阿明等好友通过阻止他来留下好名声，成为世界的英雄，就是说，他屠戮生灵，就是为了给好友留笔遗产，为了对好友的“爱”。</strong> 这一切，都发生在他拥有了看到过去未来的能力之后，而这一能力 <strong>非但没有让他拥有相对于过去未来因果律的自由，反而使得他成为了这一因果律的奴隶，他朝向一个既定的结果，按部就班地“自由”迈去。</strong>在这一过程中，作为“世界之谜”的巨人始祖尤弥尔与巨人之力被以一个长达两千年的<strong>斯德哥尔摩综合征</strong>(百度百科讲的很详细)之爱轻易打发掉。在这个意义上，艾伦与尤弥尔构成镜像，他们都透过“爱”来获得某种“解脱”。</p><p>谏山创曾言明受到过1980年代的美国漫画《守望者》（Watchmen）的影响。在《守望者》的结局中，曼哈顿博士通过背负屠杀各国人民的罪恶，成为世界共同的敌人来实现美苏的和解，这一制造负面共同体的解决方案，带有明显的冷战色彩。但这种解决方案在后世仍然不断被借用。大逃杀系作品《反叛的鲁路修》的结局便是如此。但《巨人》明显地认识到了这种解决的虚妄，但它也想不出或者不愿去想出一个解决。所以它干脆撒手不管回到自我之中。就此看来，碇真嗣并不用去阻止夜神月，面具揭开，碇真嗣就是夜神月。</p><p><strong>心理主义者通过解决自我之谜来解决世界之谜，决断主义者通过（试图）解决世界之谜来解决自我之谜，而伪装成决断主义者的心理主义者则比较实在，世界的归世界，自己的归自己，我只管活我的，世界，去他妈的。</strong></p><p><strong>在这一点上，《巨人》的结局失败了，它的失败在于承认了我们在现实结构面前的绝对无能。但在另一点上，它或许又成功了，它意识到无论如何我们都无法解决“世界之谜”，我们能解决的只有自己</strong>。于是，在《巨人》崩坏的结局处，我们似乎能看到对一种友爱的小共同体的倡导。而这恰是后来大火的《鬼灭之刃》等动画的基础。但这能构成一种新的解决方案吗？</p><p>宫台真司在1990年代曾提出“<strong>永无终结的日常</strong>”这一说法，后来被广泛引用，它同时构成了对无法期待一种变革的消费社会之平静的绝望的象喻：<strong>只要某种基础性的结构仍然继续存续，那么即便经历了大地震和核灾难，“日常”也一样永无终结。</strong>而这种基础性的结构，正是《巨人》所不愿面对的那个带来了大逃杀的“世界”。</p><p>1993年，日本漫画家冈崎京子（Okazaki Kyoko）在其作品《河畔》中借用威廉·吉布森“平坦的战场”的说法，来描述“永无终结的日常”的感受：“从一开始就丧失一切的孩子们。已经拥有一切，而为这些事必须放弃一切的孩子们。无力的王子与公主。没有深度、一片平坦像是舞台背景般的战场。他/她们绝不会有什么波涛汹涌的人生，只是持续驻足在短暂的永恒当中。”</p><p>如今，基础结构仍未改变，但“平坦的战场”似乎消失了。</p><p>《巨人》以“致2000年后的你”为开始，而它的结局则是在告诉公元2000年之后的你：</p><p><strong>我们知道我们只得不停地战斗，只是我们不知道我们的“战场”究竟位于何处。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本篇是在网上找到的, 自认为相对评价客观而且质量较高的. 原封不动的复制下来的. 即使是看了这篇文章, 仍然还是有很多问题我没有理解. &lt;/p&gt;
&lt;p&gt;作者 杨宸&lt;br&gt;&lt;a href=&quot;https://www.artforum.com.cn/slant/13455&quot;&gt;ht</summary>
      
    
    
    
    <category term="动漫" scheme="https://laobameishijia.github.io/category/%E5%8A%A8%E6%BC%AB/"/>
    
    
    <category term="进击的巨人" scheme="https://laobameishijia.github.io/tag/%E8%BF%9B%E5%87%BB%E7%9A%84%E5%B7%A8%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>毕设-Fuzz-5</title>
    <link href="https://laobameishijia.github.io/2021/11/30/bi-she-fuzz-5/"/>
    <id>https://laobameishijia.github.io/2021/11/30/bi-she-fuzz-5/</id>
    <published>2021-11-30T09:25:00.000Z</published>
    <updated>2021-12-22T08:38:25.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Notebook阅读"><a href="#Notebook阅读" class="headerlink" title="Notebook阅读"></a>Notebook阅读</h1><h2 id="Grammars"><a href="#Grammars" class="headerlink" title="Grammars"></a>Grammars</h2><p>首先就是要讲, 为什么我们需要语法来规范测试数据的生成. 在之前的讲解中, 相比我们也已经很清楚了, 依靠随机生成的测试数据几乎没有几个符合程序输入(假设程序对输入的数据有严格的限制的话). <strong>为了提高生成测试数据的效率, 必须要采用语法对生成测试数据的过程进行限制.</strong></p><blockquote><p>Compilers and Web browsers, of course, are not only domains where grammars are needed for testing, but also domains where grammars are well-known. Our claim in this book is that grammars can be used to generate almost any input, and our aim is to empower you to do precisely that.–浏览器和编译器是比较常见的需要用语法进行规范测试的两种领域. 但是我们的目的是要用语法精准的生成任何你想要的输入数据.</p></blockquote><h3 id="如何构建语法"><a href="#如何构建语法" class="headerlink" title="如何构建语法"></a>如何构建语法</h3><p>语法是一个非终止符和代替扩张list的一个映射<br><strong>A grammar is defined as a mapping of nonterminal symbols to lists of alternative expansions</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> US_PHONE_GRAMMAR<span class="token punctuation">:</span> Grammar <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">>></span><span class="token operator">></span>     <span class="token string">"&lt;start>"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;phone-number>"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span>     <span class="token string">"&lt;phone-number>"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"(&lt;area>)&lt;exchange>-&lt;line>"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span>     <span class="token string">"&lt;area>"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;lead-digit>&lt;digit>&lt;digit>"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span>     <span class="token string">"&lt;exchange>"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;lead-digit>&lt;digit>&lt;digit>"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span>     <span class="token string">"&lt;line>"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;digit>&lt;digit>&lt;digit>&lt;digit>"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span>     <span class="token string">"&lt;lead-digit>"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">,</span> <span class="token string">"9"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span>     <span class="token string">"&lt;digit>"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"0"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">,</span> <span class="token string">"9"</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据语法生成数据就是首先从<code>start</code>标签开始, 将<code>start</code>标签用后面的<code>phone-number</code>替换–(<strong>如果start对应多个非终止符号的话, 那就是随机挑一个非终止符号进行替换</strong>), 再用<code>(&lt;area&gt;)&lt;exchange&gt;-&lt;line&gt;</code>替换<code>phone-number</code>(<strong>如果phone-number对应多个非终止符号的话, 那就是随机挑一个非终止符号进行替换</strong>), 重复操作, 直到后面没有非终止符号为止. (<strong>当然, 像digit这种并没有对应非终止符号的, 也是同样随机挑一个就行</strong>)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span>simple_grammar_fuzzer<span class="token punctuation">(</span>US_PHONE_GRAMMAR<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'(692)449-5179'</span><span class="token punctuation">,</span> <span class="token string">'(519)230-7422'</span><span class="token punctuation">,</span> <span class="token string">'(613)761-0853'</span><span class="token punctuation">,</span> <span class="token string">'(979)881-3858'</span><span class="token punctuation">,</span> <span class="token string">'(810)914-5475'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大体的思路上就是这些, 后面讲述的内容. 是<strong>如何更好更快地构建语法</strong>, 因为不可能说所有的语法规则都依靠人工构建. 需要让语法变得非常方便添加\方便加入一些更符合输入数据的限制.</p><h3 id="Lessons-Learned"><a href="#Lessons-Learned" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h3><ul><li>Grammars are powerful tools to express and produce syntactically valid inputs.</li><li>Inputs produced from grammars can be used as is, or <strong>used as seeds for mutation-based fuzzing.</strong></li><li>Grammars can be extended with character classes and operators to make writing easier.</li></ul><h3 id="py高阶用法"><a href="#py高阶用法" class="headerlink" title="py高阶用法"></a>py高阶用法</h3><h4 id="1-zip-longest"><a href="#1-zip-longest" class="headerlink" title="1 zip_longest"></a>1 zip_longest</h4><p>1、zip_longest需要导入itertools模块，且使用的时候需要指定一个填充值fillvalue。</p><p>2、当有可迭代对象遍历完，但其他对象还没有的时候，缺少的相应元素就会使用填充值进行填充。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> itertools <span class="token keyword">import</span> zip_longesta <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> num1<span class="token punctuation">,</span> num2 <span class="token keyword">in</span> zip_longest<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> fillvalue<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token comment"># 0 1</span><span class="token comment"># 1 2</span><span class="token comment"># 2 3</span><span class="token comment"># 3 4</span><span class="token comment"># 4 5</span><span class="token comment"># 5 6</span><span class="token comment"># 6 7</span><span class="token comment"># 7 8</span><span class="token comment"># 8 -1</span><span class="token comment"># 9 -1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-kwargs"><a href="#2-kwargs" class="headerlink" title="2 **kwargs"></a>2 **kwargs</h4><p><code>**kwargs</code> 允许你将不定长度的键值对, 作为参数传递给一个函数。 如果你想要在一个函数里处理带名字的参数, 你应该使用<code>**kwargs</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">greet_me</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> kwargs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125; == &#123;1&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> greet_me<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"yasoob"</span><span class="token punctuation">)</span>name <span class="token operator">==</span> yasoob<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-作用域和命名空间"><a href="#3-作用域和命名空间" class="headerlink" title="3 作用域和命名空间"></a>3 作用域和命名空间</h4><p>详见菜鸟教程 <a href="https://www.runoob.com/python3/python3-namespace-scope.html">https://www.runoob.com/python3/python3-namespace-scope.html</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">reachable_nonterminals</span><span class="token punctuation">(</span>grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">,</span>                           start_symbol<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> START_SYMBOL<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Set<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    reachable <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_find_reachable_nonterminals</span><span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> symbol<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">nonlocal</span> reachable <span class="token comment"># 这里用到了nonlocal</span>        reachable<span class="token punctuation">.</span>add<span class="token punctuation">(</span>symbol<span class="token punctuation">)</span>        <span class="token keyword">for</span> expansion <span class="token keyword">in</span> grammar<span class="token punctuation">.</span>get<span class="token punctuation">(</span>symbol<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> nonterminal <span class="token keyword">in</span> nonterminals<span class="token punctuation">(</span>expansion<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> nonterminal <span class="token keyword">not</span> <span class="token keyword">in</span> reachable<span class="token punctuation">:</span>                    _find_reachable_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> nonterminal<span class="token punctuation">)</span>    _find_reachable_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> start_symbol<span class="token punctuation">)</span>    <span class="token keyword">return</span> reachable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-set"><a href="#4-set" class="headerlink" title="4 set()"></a>4 set()</h4><p>set() 函数创建一个无序不重复元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>x <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'runoob'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'google'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">,</span> y<span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 重复的被删除</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">&amp;</span> y         <span class="token comment"># 交集</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'o'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">|</span> y         <span class="token comment"># 并集</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">-</span> y         <span class="token comment"># 差集</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-typing-Optional"><a href="#5-typing-Optional" class="headerlink" title="5 typing.Optional"></a>5 typing.Optional</h4><p><a href="https://blog.csdn.net/qq_44683653/article/details/108990873#:~:text=Python%20%E5%A4%A9%E7%94%9F%E4%B8%8D%E6%94%AF%E6%8C%81%20Option%20%E7%B1%BB%E5%9E%8B%EF%BC%8C%20typing%20%E6%9C%89%E4%B8%AA%20Optional%20%2C,%5B%20%28int%29%20-%3E%20Any%5D%27%20%28matched%20generic%20type%20%27Optiona">csdn</a></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211202112803.png" alt="typing.Optional"></p><blockquote><p>我觉得这几个函数写的非常好,简洁明了. 有些地方看的不是很懂,看来py的很多高级的用法并没有掌握到.</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>说实在的, 这一部分的思想是比较简单的, 但是在代码实现上, 确实用到了很多之前在写python程序时没有用到的写法,而且从代码书写的思路和简洁性上面来说, 比之前写的代码高了不知道几个档次. 再一次让我感觉到了, 原来写出来的代码可以这么写. 所以我在前面把这些方法都总结了下来, 包括后面的这些代码, 希望以后你可以多多的借鉴.  当然这也只是其中的一部分而已.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">def_used_nonterminals</span><span class="token punctuation">(</span>grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">,</span> start_symbol<span class="token punctuation">:</span>                           <span class="token builtin">str</span> <span class="token operator">=</span> START_SYMBOL<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Tuple<span class="token punctuation">[</span>Optional<span class="token punctuation">[</span>Set<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                                        Optional<span class="token punctuation">[</span>Set<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>       <span class="token triple-quoted-string string">"""Return a pair (`defined_nonterminals`, `used_nonterminals`) in `grammar`.    In case of error, return (`None`, `None`)."""</span>    <span class="token comment"># 这里为什么用元组呢? 是因为元组没有办法被删除嘛?</span>    defined_nonterminals <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    used_nonterminals <span class="token operator">=</span> <span class="token punctuation">&#123;</span>start_symbol<span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> defined_nonterminal <span class="token keyword">in</span> grammar<span class="token punctuation">:</span>        defined_nonterminals<span class="token punctuation">.</span>add<span class="token punctuation">(</span>defined_nonterminal<span class="token punctuation">)</span>        expansions <span class="token operator">=</span> grammar<span class="token punctuation">[</span>defined_nonterminal<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>expansions<span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>defined_nonterminal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": expansion is not a list"</span><span class="token punctuation">,</span>                  <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>expansions<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>defined_nonterminal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": expansion list empty"</span><span class="token punctuation">,</span>                  <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span>        <span class="token keyword">for</span> expansion <span class="token keyword">in</span> expansions<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>expansion<span class="token punctuation">,</span> <span class="token builtin">tuple</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                expansion <span class="token operator">=</span> expansion<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>expansion<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>defined_nonterminal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span>                      <span class="token operator">+</span> <span class="token builtin">repr</span><span class="token punctuation">(</span>expansion<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": not a string"</span><span class="token punctuation">,</span>                      <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span>            <span class="token keyword">for</span> used_nonterminal <span class="token keyword">in</span> nonterminals<span class="token punctuation">(</span>expansion<span class="token punctuation">)</span><span class="token punctuation">:</span>                used_nonterminals<span class="token punctuation">.</span>add<span class="token punctuation">(</span>used_nonterminal<span class="token punctuation">)</span>    <span class="token keyword">return</span> defined_nonterminals<span class="token punctuation">,</span> used_nonterminals<span class="token keyword">def</span> <span class="token function">reachable_nonterminals</span><span class="token punctuation">(</span>grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">,</span>                           start_symbol<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> START_SYMBOL<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Set<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    reachable <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_find_reachable_nonterminals</span><span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> symbol<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">nonlocal</span> reachable        reachable<span class="token punctuation">.</span>add<span class="token punctuation">(</span>symbol<span class="token punctuation">)</span>        <span class="token keyword">for</span> expansion <span class="token keyword">in</span> grammar<span class="token punctuation">.</span>get<span class="token punctuation">(</span>symbol<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> nonterminal <span class="token keyword">in</span> nonterminals<span class="token punctuation">(</span>expansion<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> nonterminal <span class="token keyword">not</span> <span class="token keyword">in</span> reachable<span class="token punctuation">:</span>                    _find_reachable_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> nonterminal<span class="token punctuation">)</span>    _find_reachable_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> start_symbol<span class="token punctuation">)</span>    <span class="token keyword">return</span> reachable<span class="token keyword">def</span> <span class="token function">unreachable_nonterminals</span><span class="token punctuation">(</span>grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">,</span>                             start_symbol<span class="token operator">=</span>START_SYMBOL<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Set<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> grammar<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> reachable_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> start_symbol<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">opts_used</span><span class="token punctuation">(</span>grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Set<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    used_opts <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> symbol <span class="token keyword">in</span> grammar<span class="token punctuation">:</span>        <span class="token keyword">for</span> expansion <span class="token keyword">in</span> grammar<span class="token punctuation">[</span>symbol<span class="token punctuation">]</span><span class="token punctuation">:</span>            used_opts <span class="token operator">|</span><span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>exp_opts<span class="token punctuation">(</span>expansion<span class="token punctuation">)</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> used_opts<span class="token keyword">def</span> <span class="token function">is_valid_grammar</span><span class="token punctuation">(</span>grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">,</span>                     start_symbol<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> START_SYMBOL<span class="token punctuation">,</span>                      supported_opts<span class="token punctuation">:</span> Set<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Check if the given `grammar` is valid.       `start_symbol`: optional start symbol (default: `&lt;start>`)       `supported_opts`: options supported (default: none)"""</span>    defined_nonterminals<span class="token punctuation">,</span> used_nonterminals <span class="token operator">=</span> \        def_used_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> start_symbol<span class="token punctuation">)</span>    <span class="token keyword">if</span> defined_nonterminals <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> used_nonterminals <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token comment"># Do not complain about '&lt;start>' being not used,</span>    <span class="token comment"># even if start_symbol is different</span>    <span class="token keyword">if</span> START_SYMBOL <span class="token keyword">in</span> grammar<span class="token punctuation">:</span>        used_nonterminals<span class="token punctuation">.</span>add<span class="token punctuation">(</span>START_SYMBOL<span class="token punctuation">)</span>    <span class="token keyword">for</span> unused_nonterminal <span class="token keyword">in</span> defined_nonterminals <span class="token operator">-</span> used_nonterminals<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>unused_nonterminal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": defined, but not used"</span><span class="token punctuation">,</span>              <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>    <span class="token keyword">for</span> undefined_nonterminal <span class="token keyword">in</span> used_nonterminals <span class="token operator">-</span> defined_nonterminals<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>undefined_nonterminal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": used, but not defined"</span><span class="token punctuation">,</span>              <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>    <span class="token comment"># Symbols must be reachable either from &lt;start> or given start symbol</span>    unreachable <span class="token operator">=</span> unreachable_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> start_symbol<span class="token punctuation">)</span>    msg_start_symbol <span class="token operator">=</span> start_symbol    <span class="token keyword">if</span> START_SYMBOL <span class="token keyword">in</span> grammar<span class="token punctuation">:</span>        unreachable <span class="token operator">=</span> unreachable <span class="token operator">-</span> \            reachable_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> START_SYMBOL<span class="token punctuation">)</span>        <span class="token keyword">if</span> start_symbol <span class="token operator">!=</span> START_SYMBOL<span class="token punctuation">:</span>            msg_start_symbol <span class="token operator">+=</span> <span class="token string">" or "</span> <span class="token operator">+</span> START_SYMBOL    <span class="token keyword">for</span> unreachable_nonterminal <span class="token keyword">in</span> unreachable<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>unreachable_nonterminal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": unreachable from "</span> <span class="token operator">+</span> msg_start_symbol<span class="token punctuation">,</span>              <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>    used_but_not_supported_opts <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>supported_opts<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        used_but_not_supported_opts <span class="token operator">=</span> opts_used<span class="token punctuation">(</span>            grammar<span class="token punctuation">)</span><span class="token punctuation">.</span>difference<span class="token punctuation">(</span>supported_opts<span class="token punctuation">)</span>        <span class="token keyword">for</span> opt <span class="token keyword">in</span> used_but_not_supported_opts<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>                <span class="token string">"warning: option "</span> <span class="token operator">+</span>                <span class="token builtin">repr</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span> <span class="token operator">+</span>                <span class="token string">" is not supported"</span><span class="token punctuation">,</span>                <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>    <span class="token keyword">return</span> used_nonterminals <span class="token operator">==</span> defined_nonterminals <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>unreachable<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Notebook阅读&quot;&gt;&lt;a href=&quot;#Notebook阅读&quot; class=&quot;headerlink&quot; title=&quot;Notebook阅读&quot;&gt;&lt;/a&gt;Notebook阅读&lt;/h1&gt;&lt;h2 id=&quot;Grammars&quot;&gt;&lt;a href=&quot;#Grammars&quot; cla</summary>
      
    
    
    
    <category term="毕设" scheme="https://laobameishijia.github.io/category/%E6%AF%95%E8%AE%BE/"/>
    
    
    <category term="Fuzz" scheme="https://laobameishijia.github.io/tag/Fuzz/"/>
    
  </entry>
  
  <entry>
    <title>毕设-Fuzz-4</title>
    <link href="https://laobameishijia.github.io/2021/11/27/bi-she-fuzz-4/"/>
    <id>https://laobameishijia.github.io/2021/11/27/bi-she-fuzz-4/</id>
    <published>2021-11-27T09:25:00.000Z</published>
    <updated>2021-12-22T08:38:25.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NoteBook阅读"><a href="#NoteBook阅读" class="headerlink" title="NoteBook阅读"></a>NoteBook阅读</h1><h2 id="Mutation-Analyze"><a href="#Mutation-Analyze" class="headerlink" title="Mutation Analyze"></a>Mutation Analyze</h2><p>关于ast–<code>Abstract Syntax Trees</code> 可算是找到一篇讲的非常清楚的博客了. 看了之后自己又调试了一遍代码,清楚多了</p><p><a href="https://www.cnblogs.com/qiulinzhang/p/14258626.html">https://www.cnblogs.com/qiulinzhang/p/14258626.html</a></p><p>清楚这个之后,再去搞清楚这一小节写的代码逻辑,想必应该要轻松不少了.</p><h3 id="7-A-Simple-mutator-for-Function"><a href="#7-A-Simple-mutator-for-Function" class="headerlink" title="7 A Simple mutator for Function"></a>7 A Simple mutator for Function</h3><p>总算搞清楚这个代码的逻辑了</p><ul><li><p>第一开始初始化的时候,并没有直接修改源代码,只是做了一个统计. 看一下需要变异的节点有多少个</p></li><li><p>后面provoke generate_mutant函数将location传递进来的时候才会发生突变. 换句话说, 这个location的具体含义是要在第几个变异节点发生变异</p></li><li><p>在 generate_mutant函数中<code>mutant_ast = self.pm.mutator_object(location).visit(ast.parse(self.pm.src))  # copy</code>中的<code>ast.parse(self.pm.src)</code>就是每一次都把源代码解析的ast对象传递进去, 目的就是为了控制变量. 这样就能获取到每一个单个突变位置的突变. 最后再利用diff库中的函数进行与原始版本的比较.</p></li></ul><p><strong>作者把类中的函数分开来讲解,确实在对单个函数的说明上起到了一定的作用.但是对于类整体的功能理解上, 还是有一定的影响</strong></p><p>我把单独的代码整合到了一起去看代码的逻辑, 终于清晰了不少</p><h4 id="整合代码"><a href="#整合代码" class="headerlink" title="整合代码"></a>整合代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MuFunctionAnalyzer</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"__iter__"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> PMIterator<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> log<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fn <span class="token operator">=</span> fn        self<span class="token punctuation">.</span>name <span class="token operator">=</span> fn<span class="token punctuation">.</span>__name__        src <span class="token operator">=</span> inspect<span class="token punctuation">.</span>getsource<span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token comment"># 获取源码</span>        self<span class="token punctuation">.</span>ast <span class="token operator">=</span> ast<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>src<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>src <span class="token operator">=</span> ast<span class="token punctuation">.</span>unparse<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ast<span class="token punctuation">)</span>  <span class="token comment"># normalize</span>        self<span class="token punctuation">.</span>mutator <span class="token operator">=</span> self<span class="token punctuation">.</span>mutator_object<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>nmutations <span class="token operator">=</span> self<span class="token punctuation">.</span>get_mutation_count<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>un_detected <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>mutants <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>log <span class="token operator">=</span> log    <span class="token keyword">def</span> <span class="token function">mutator_object</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> locations<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> StmtDeletionMutator<span class="token punctuation">(</span>locations<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>mutants<span class="token punctuation">.</span>append<span class="token punctuation">(</span>m<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">finish</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>        <span class="token keyword">def</span> <span class="token function">get_mutation_count</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>mutator<span class="token punctuation">.</span>visit<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ast<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutator<span class="token punctuation">.</span>count        <span class="token keyword">class</span> <span class="token class-name">StmtDeletionMutator</span><span class="token punctuation">(</span>ast<span class="token punctuation">.</span>NodeTransformer<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mutate_location<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>mutate_location <span class="token operator">=</span> mutate_location        <span class="token keyword">def</span> <span class="token function">mutation_visit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> ast<span class="token punctuation">.</span>Pass<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">def</span> <span class="token function">mutable_visit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># statements start at line no 1</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>count <span class="token operator">==</span> self<span class="token punctuation">.</span>mutate_location<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"进行替换"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutation_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>generic_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">visit_Return</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"visit_Return"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Delete</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Assign</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_AnnAssign</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_AugAssign</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Raise</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Assert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Global</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Nonlocal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Expr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Pass</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Break</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Continue</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">PMIterator</span><span class="token punctuation">(</span>PMIterator<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pm<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>pm <span class="token operator">=</span> pm        self<span class="token punctuation">.</span>idx <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> self<span class="token punctuation">.</span>idx        <span class="token keyword">if</span> i <span class="token operator">>=</span> self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>nmutations<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>finish<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">raise</span> StopIteration<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>idx <span class="token operator">+=</span> <span class="token number">1</span>        mutant <span class="token operator">=</span> Mutant<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">,</span> self<span class="token punctuation">.</span>idx<span class="token punctuation">,</span> log<span class="token operator">=</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>log<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>register<span class="token punctuation">(</span>mutant<span class="token punctuation">)</span>        <span class="token keyword">return</span> mutant<span class="token keyword">class</span> <span class="token class-name">Mutant</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pm<span class="token punctuation">,</span> location<span class="token punctuation">,</span> log<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>pm <span class="token operator">=</span> pm        <span class="token comment">#print(pm)</span>        self<span class="token punctuation">.</span>i <span class="token operator">=</span> location        self<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"%s_%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>i<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_src <span class="token operator">=</span> <span class="token boolean">None</span>        self<span class="token punctuation">.</span>tests <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>detected <span class="token operator">=</span> <span class="token boolean">False</span>        self<span class="token punctuation">.</span>log <span class="token operator">=</span> log    <span class="token keyword">def</span> <span class="token function">generate_mutant</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">:</span>        mutant_ast <span class="token operator">=</span> self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>mutator_object<span class="token punctuation">(</span>            location<span class="token punctuation">)</span><span class="token punctuation">.</span>visit<span class="token punctuation">(</span>ast<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># copy</span>        <span class="token keyword">return</span> ast<span class="token punctuation">.</span>unparse<span class="token punctuation">(</span>mutant_ast<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">src</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>_src <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_src <span class="token operator">=</span> self<span class="token punctuation">.</span>generate_mutant<span class="token punctuation">(</span>self<span class="token punctuation">.</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_src    <span class="token keyword">def</span> <span class="token function">diff</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>difflib<span class="token punctuation">.</span>unified_diff<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>src<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                              self<span class="token punctuation">.</span>src<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                              fromfile<span class="token operator">=</span><span class="token string">'original'</span><span class="token punctuation">,</span>                                              tofile<span class="token operator">=</span><span class="token string">'mutant'</span><span class="token punctuation">,</span>                                              n<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>下面是运行代码, 还有一些解释性的语句, 自认为已经比较清楚了.</p></blockquote><h4 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">test <span class="token operator">=</span> MuFunctionAnalyzer<span class="token punctuation">(</span>triangle<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test.nmutations:"</span><span class="token punctuation">,</span>test<span class="token punctuation">.</span>nmutations<span class="token punctuation">)</span><span class="token keyword">for</span> m <span class="token keyword">in</span> test<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"=======这是第%d次变异===================="</span> <span class="token operator">%</span> m<span class="token punctuation">.</span>i<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"原始代码："</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>mutant<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>src<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"在固定节点变异之后的代码"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>src<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"========================================\n"</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>运行结果<span class="token punctuation">:</span>visit_Returnvisit_Returnvisit_Returnvisit_Returnvisit_Returntest<span class="token punctuation">.</span>nmutations<span class="token punctuation">:</span> <span class="token number">5</span>__iter__<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>这是第<span class="token number">1</span>次变异<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>原始代码：<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span>在固定节点变异之后的代码visit_Return进行替换visit_Returnvisit_Returnvisit_Returnvisit_Return<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>这是第<span class="token number">2</span>次变异<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>原始代码：<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span>在固定节点变异之后的代码visit_Returnvisit_Return进行替换visit_Returnvisit_Returnvisit_Return<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>这是第<span class="token number">3</span>次变异<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>原始代码：<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span>在固定节点变异之后的代码visit_Returnvisit_Returnvisit_Return进行替换visit_Returnvisit_Return<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>这是第<span class="token number">4</span>次变异<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>原始代码：<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span>在固定节点变异之后的代码visit_Returnvisit_Returnvisit_Returnvisit_Return进行替换visit_Return<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>这是第<span class="token number">5</span>次变异<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>原始代码：<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span>在固定节点变异之后的代码visit_Returnvisit_Returnvisit_Returnvisit_Returnvisit_Return进行替换<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-Evaluating-Mutations"><a href="#8-Evaluating-Mutations" class="headerlink" title="8 Evaluating Mutations"></a>8 Evaluating Mutations</h3><p>涉及到了两个函数</p><ul><li><p><code>__enter__()</code>:The <strong>enter</strong>() function is called when the with block is entered. <em><strong>It creates the mutant as a Python function and places it in the global namespace</strong></em>, such that the assert statement executes the mutated function rather than the original.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>log<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'->\t%s'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    c <span class="token operator">=</span> <span class="token builtin">compile</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>src<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'&lt;mutant>'</span><span class="token punctuation">,</span> <span class="token string">'exec'</span><span class="token punctuation">)</span>    <span class="token builtin">eval</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 创建全局的变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>__exit__()</code>:The <strong>exit</strong>() function checks whether an exception has occurred (i.e., the assertion failed, or some other error was raised); if so, it marks the mutation as detected. Finally, it restores the original function definition.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_value<span class="token punctuation">,</span> traceback<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>log<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&lt;-\t%s'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">if</span> exc_type <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>detected <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>log<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Detected %s"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_value<span class="token punctuation">)</span>    <span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>fn <span class="token comment"># 因为突变把原来函数给改变了嘛,所以后面又重新把它恢复成原来的样子了</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>log<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>其他的倒是不难理解了</p><h3 id="9-Mutator-for-Modules-and-Test-Suites"><a href="#9-Mutator-for-Modules-and-Test-Suites" class="headerlink" title="9 Mutator for Modules and Test Suites"></a>9 Mutator for Modules and Test Suites</h3><h4 id="问题"><a href="#问题" class="headerlink" title="问题:"></a>问题:</h4><ul><li><p><code>self.mutator.visit(self.ast)</code>  这个函数调用的是AdvMutator里面mutable_visit函数???? 为什么会是这样呢?</p><p>A: 你懵了吗, 之前不是探讨过这个问题吗. 并不是self.mutator.visit(self.ast)调用的这个函数, 而是其调用的函数调用的.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">visit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Visit a node."""</span>    method <span class="token operator">=</span> <span class="token string">'visit_'</span> <span class="token operator">+</span> node<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__    visitor <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> method<span class="token punctuation">,</span> self<span class="token punctuation">.</span>generic_visit<span class="token punctuation">)</span>     <span class="token comment"># 这个函数先访问你自定义的节点visit方法,</span>    <span class="token comment"># 如果没有的话, 就递归访问子节点, </span>    <span class="token comment"># 也就是说, 是你自定义的节点visit_XXXX方法调用的mutable_visit. </span>    <span class="token comment"># 你可以再去看看上面</span>    <span class="token keyword">return</span> visitor<span class="token punctuation">(</span>node<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>__dict__</code> 在py中,到底起什么样的作用呢? 为什么这个可以实现全局调用?</p><p>A: Python 类提供了 <strong>dict</strong> 属性。需要注意的一点是，该属性可以用类名或者类的实例对象来调用，用类名直接调用 __dict__，会输出该由类中所有类属性组成的字典；而使用类的实例对象调用 __dict__，会输出由类中所有实例属性组成的字典。</p></li><li><p><input checked="" disabled="" type="checkbox">  runtest函数中细节还要再理解</p><p>A: 是unittest类里面的内容, 下次的时候可以再去百度看.</p></li><li><p><input checked="" disabled="" type="checkbox">  再了解一下unittest</p><p>A: 就是一个测试类, 也记不住, 下次用到在百度看把</p></li></ul><h4 id="合成代码"><a href="#合成代码" class="headerlink" title="合成代码"></a>合成代码</h4><blockquote><p>按照我的理解的话, 这一小节的内容, 就是为了<strong>把第8小节中的变异之后函数运行问题做了简化, 其实本质上还是之前的内容.</strong> 过程中用到了<code>unittest</code>这个模块</p></blockquote><p>还是一样的做法, 把代码们先弄到一起</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MuProgramAnalyzer</span><span class="token punctuation">(</span>MuFunctionAnalyzer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> AdvPMIterator<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>ast <span class="token operator">=</span> ast<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>src<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>src <span class="token operator">=</span> ast<span class="token punctuation">.</span>unparse<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ast<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>changes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>mutator <span class="token operator">=</span> self<span class="token punctuation">.</span>mutator_object<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>nmutations <span class="token operator">=</span> self<span class="token punctuation">.</span>get_mutation_count<span class="token punctuation">(</span><span class="token punctuation">)</span>         self<span class="token punctuation">.</span>un_detected <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">mutator_object</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> locations<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> AdvStmtDeletionMutator<span class="token punctuation">(</span>self<span class="token punctuation">,</span> locations<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_mutation_count</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>s        self<span class="token punctuation">.</span>mutator<span class="token punctuation">.</span>visit<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ast<span class="token punctuation">)</span> <span class="token comment"># 这个函数调用的是AdvMutator里面mutable_visit函数???? 为什么会是这样呢?</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutator<span class="token punctuation">.</span>count      <span class="token keyword">class</span> <span class="token class-name">AdvMutator</span><span class="token punctuation">(</span>Mutator<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> analyzer<span class="token punctuation">,</span> mutate_locations<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>mutate_locations <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">if</span> mutate_locations <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">else</span> mutate_locations        self<span class="token punctuation">.</span>pm <span class="token operator">=</span> analyzer    <span class="token keyword">def</span> <span class="token function">mutable_visit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># statements start at line no 1</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutation_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">AdvStmtDeletionMutator</span><span class="token punctuation">(</span>AdvMutator<span class="token punctuation">,</span> StmtDeletionMutator<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> analyzer<span class="token punctuation">,</span> mutate_locations<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        AdvMutator<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> analyzer<span class="token punctuation">,</span> mutate_locations<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">mutation_visit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        index <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># there is only one way to delete a statement -- replace it by pass</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>mutate_locations<span class="token punctuation">:</span>  <span class="token comment"># counting pass</span>            self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>changes<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>count<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>generic_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment"># get matching changes for this pass</span>            mutating_lines <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> idx<span class="token punctuation">)</span>                                 <span class="token keyword">for</span> <span class="token punctuation">(</span>count<span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>mutate_locations<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>count<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token keyword">in</span> mutating_lines<span class="token punctuation">:</span>                <span class="token keyword">return</span> ast<span class="token punctuation">.</span>Pass<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> self<span class="token punctuation">.</span>generic_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">AdvPMIterator</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pm<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>pm <span class="token operator">=</span> pm        self<span class="token punctuation">.</span>idx <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> self<span class="token punctuation">.</span>idx        <span class="token keyword">if</span> i <span class="token operator">>=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>changes<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> StopIteration<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token comment"># there could be multiple changes in one mutant</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>changes<span class="token punctuation">)</span><span class="token comment"># </span>        <span class="token keyword">return</span> AdvMutant<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">,</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>changes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">AdvMutant</span><span class="token punctuation">(</span>Mutant<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pm<span class="token punctuation">,</span> locations<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>pm <span class="token operator">=</span> pm        self<span class="token punctuation">.</span>i <span class="token operator">=</span> locations        self<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"%s_%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>name<span class="token punctuation">,</span>                               <span class="token string">'_'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> self<span class="token punctuation">.</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_src <span class="token operator">=</span> <span class="token boolean">None</span>            <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> test_module<span class="token punctuation">)</span><span class="token punctuation">:</span>        test_module<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>            self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> import_code<span class="token punctuation">(</span>            self<span class="token punctuation">.</span>src<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token keyword">return</span> MutantTestRunner<span class="token punctuation">(</span>self<span class="token punctuation">,</span> test_module<span class="token punctuation">)</span>            <span class="token keyword">def</span> <span class="token function">generate_mutant</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> locations<span class="token punctuation">)</span><span class="token punctuation">:</span>        mutant_ast <span class="token operator">=</span> self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>mutator_object<span class="token punctuation">(</span>            locations<span class="token punctuation">)</span><span class="token punctuation">.</span>visit<span class="token punctuation">(</span>ast<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># copy</span>        <span class="token keyword">return</span> ast<span class="token punctuation">.</span>unparse<span class="token punctuation">(</span>mutant_ast<span class="token punctuation">)</span>           <span class="token keyword">def</span> <span class="token function">src</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>_src <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_src <span class="token operator">=</span> self<span class="token punctuation">.</span>generate_mutant<span class="token punctuation">(</span>self<span class="token punctuation">.</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_src      <span class="token keyword">class</span> <span class="token class-name">MutantTestRunner</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mutant<span class="token punctuation">,</span> test_module<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>mutant <span class="token operator">=</span> mutant        self<span class="token punctuation">.</span>tm <span class="token operator">=</span> test_module    <span class="token keyword">def</span> <span class="token function">runTest</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> tc<span class="token punctuation">)</span><span class="token punctuation">:</span>        suite <span class="token operator">=</span> unittest<span class="token punctuation">.</span>TestSuite<span class="token punctuation">(</span><span class="token punctuation">)</span>        test_class <span class="token operator">=</span> self<span class="token punctuation">.</span>tm<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>tc<span class="token punctuation">]</span>        <span class="token keyword">for</span> f <span class="token keyword">in</span> test_class<span class="token punctuation">.</span>__dict__<span class="token punctuation">:</span>            <span class="token keyword">if</span> f<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'test_'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                suite<span class="token punctuation">.</span>addTest<span class="token punctuation">(</span>test_class<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span>        runner <span class="token operator">=</span> unittest<span class="token punctuation">.</span>TextTestRunner<span class="token punctuation">(</span>verbosity<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> failfast<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> ExpectTimeout<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                res <span class="token operator">=</span> runner<span class="token punctuation">.</span>run<span class="token punctuation">(</span>suite<span class="token punctuation">)</span>                <span class="token keyword">if</span> res<span class="token punctuation">.</span>wasSuccessful<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>mutant<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>un_detected<span class="token punctuation">.</span>add<span class="token punctuation">(</span>self<span class="token punctuation">)</span>                <span class="token keyword">return</span> res        <span class="token keyword">except</span> SyntaxError<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Syntax Error (%s)'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>mutant<span class="token punctuation">.</span>name<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Unhandled exception during test execution'</span><span class="token punctuation">)</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-The-Problem-of-Equivalent-Mutants"><a href="#10-The-Problem-of-Equivalent-Mutants" class="headerlink" title="10 The Problem of Equivalent Mutants"></a>10 The Problem of Equivalent Mutants</h3><p>在替换的过程中, 有可能会产生这种情况: 替换过后相当于没有替换. 并不会产生错误. 替换掉了一个无关紧要的语句. 把这种情况称为<code>equivalent mutants</code></p><p>要解决这个问题, 文章中说了两个方法</p><h4 id="10-1-Statistical-Estimation-of-Number-of-Equivalent-Mutants"><a href="#10-1-Statistical-Estimation-of-Number-of-Equivalent-Mutants" class="headerlink" title="10.1 Statistical Estimation of Number of Equivalent Mutants"></a>10.1 Statistical Estimation of Number of Equivalent Mutants</h4><p>利用正态分布</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211130104504.png" alt="Statistical Estimation"></p><h4 id="10-2-Statistical-Estimation-of-the-Number-of-Immortals-by-Chao’s-Estimator"><a href="#10-2-Statistical-Estimation-of-the-Number-of-Immortals-by-Chao’s-Estimator" class="headerlink" title="10.2 Statistical Estimation of the Number of Immortals by Chao’s Estimator"></a>10.2 Statistical Estimation of the Number of Immortals by Chao’s Estimator</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211130104746.png" alt="Chao&#39;s Estimator"></p><p>Note that these <strong>immortal mutants</strong> are somewhat different from the traditional equivalent mutants in that the mortality depends on the oracle used to distinguish variant behavior. That is, if one uses a fuzzer that relies on errors thrown to detect killing, <em>it will not detect mutants that produce different output but does not throw an error</em>. Hence, the <strong>Chao1</strong> estimate will essentially be <strong>the asymptote value of mutants the fuzzer can detect</strong> if it is given an infinite amount of time.</p><h3 id="Synopsis"><a href="#Synopsis" class="headerlink" title="Synopsis"></a>Synopsis</h3><p>This chapter introduces two methods of running <em>mutation analysis</em> on subject programs. The first class <code>MuFunctionAnalyzer</code> targets individual functions. Given a function <code>gcd</code> and two test cases evaluate, one can run mutation analysis on the test cases as follows —<code>第7小节</code></p><p>The second class <code>MuProgramAnalyzer</code> targets standalone programs with test suites. Given a program <code>gcd</code> whose source code is provided in <code>gcd_src</code> and the test suite is provided by <code>TestGCD</code>, one can evaluate the mutation score of <code>TestGCD</code> as follows</p><blockquote><p>个人感觉这两种方式的差距, 并没有很大. 甚至好像没什么区别-可能是我菜吧😥-🤣</p></blockquote><p>The <strong>mutation score</strong> thus obtained is a better indicator of the quality of a given test suite than pure coverage.</p><h3 id="Lessons-Learned"><a href="#Lessons-Learned" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h3><p>为什么做这个, 怎么做, 这种方法有什么局限.又应该怎么改进.</p><blockquote><p>不得不说,作者的思路真的很清晰了.</p></blockquote><ul><li>We have learned why structural coverage is insufficient to evaluate the quality of test suites.</li><li>We have learned how to use Mutation Analysis for evaluating test suite quality.</li><li>We have learned the limitations of Mutation Analysis – Equivalent and Redundant mutants, and how to estimate them.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NoteBook阅读&quot;&gt;&lt;a href=&quot;#NoteBook阅读&quot; class=&quot;headerlink&quot; title=&quot;NoteBook阅读&quot;&gt;&lt;/a&gt;NoteBook阅读&lt;/h1&gt;&lt;h2 id=&quot;Mutation-Analyze&quot;&gt;&lt;a href=&quot;#Mutat</summary>
      
    
    
    
    <category term="毕设" scheme="https://laobameishijia.github.io/category/%E6%AF%95%E8%AE%BE/"/>
    
    
    <category term="Fuzz" scheme="https://laobameishijia.github.io/tag/Fuzz/"/>
    
  </entry>
  
  <entry>
    <title>美食篇-7-东北菜</title>
    <link href="https://laobameishijia.github.io/2021/11/26/mei-shi-pian-7-dong-bei-cai/"/>
    <id>https://laobameishijia.github.io/2021/11/26/mei-shi-pian-7-dong-bei-cai/</id>
    <published>2021-11-26T09:25:00.000Z</published>
    <updated>2021-12-22T08:38:25.212Z</updated>
    
    <content type="html"><![CDATA[<h1 id="美食"><a href="#美食" class="headerlink" title="美食"></a>美食</h1><p>这次还是我和两个舍友,来的应该是第四次了把.</p><ul><li>地三鲜</li><li>溜肉段–这个居然时炸的,真醉了~~</li><li>饺子–韭菜鸡蛋\牛肉萝卜</li><li>锅包肉–我真快吃腻了,而且感觉没有上次在江安这边点的外卖(也是东北菜)好吃.</li></ul><p>![1]](<a href="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QQ%E5%9B%BE%E7%89%8720211126220221.jpg">https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QQ图片20211126220221.jpg</a>)</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QQ%E5%9B%BE%E7%89%8720211126220234.jpg" alt="2"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;美食&quot;&gt;&lt;a href=&quot;#美食&quot; class=&quot;headerlink&quot; title=&quot;美食&quot;&gt;&lt;/a&gt;美食&lt;/h1&gt;&lt;p&gt;这次还是我和两个舍友,来的应该是第四次了把.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;地三鲜&lt;/li&gt;
&lt;li&gt;溜肉段–这个居然时炸的,真醉了~~&lt;/li</summary>
      
    
    
    
    <category term="美食" scheme="https://laobameishijia.github.io/category/%E7%BE%8E%E9%A3%9F/"/>
    
    
    <category term="成都" scheme="https://laobameishijia.github.io/tag/%E6%88%90%E9%83%BD/"/>
    
  </entry>
  
</feed>
