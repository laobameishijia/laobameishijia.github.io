<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>老叭美食家</title>
  
  <subtitle>永远热爱生活</subtitle>
  <link href="https://laobameishijia.github.io/atom.xml" rel="self"/>
  
  <link href="https://laobameishijia.github.io/"/>
  <updated>2021-11-01T01:54:17.396Z</updated>
  <id>https://laobameishijia.github.io/</id>
  
  <author>
    <name>老叭美食家</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>动漫-斗破苍穹</title>
    <link href="https://laobameishijia.github.io/2021/10/31/dong-man-dou-po-cang-qiong/"/>
    <id>https://laobameishijia.github.io/2021/10/31/dong-man-dou-po-cang-qiong/</id>
    <published>2021-10-31T09:25:00.000Z</published>
    <updated>2021-11-01T01:54:17.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="三年之约"><a href="#三年之约" class="headerlink" title="三年之约"></a>三年之约</h1><p>三年之约真的拍了三年，虽然没有看过小说，但随着慢慢地在看动漫以后，内心里也真正喜欢上了萧炎。可能动漫中确实有些夸张的地方，但还是能从中得到些许关于生活的感悟。</p><p>在第四季的结尾，萧炎临上云岚宗的那份淡然与宁静。他想到的是这三年间，帮助过他的人，自己经历过的事情。配上动漫的场景，的确看的出来制作方的确很用心。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211031212833.png" alt="临上云岚宗"></p><p>在忍受退婚之后，他一直以打败纳兰嫣然为目标，不断地去磨砺自己，增强自己的本领。但直到药老因为耗尽灵魂力量而进入沉睡状态的时候，萧炎才真正地明白：原来他是那么依赖药老。从那之后，他开始独自面对复杂的情况，准备唤醒药老的丹药。</p><p>萧炎也曾说，三年之约不过是给过去三年的一个交代。他真的是放下了，真正地专注于自己，而不是要打败谁。在经历了如此多的事情之后，他的内心真的已经很强大了。有的时候，我真觉得生活也是这样。我以前在高中的学习生活中，经常要以谁谁为目标，要在考试中超过他。但却总是事与愿违。经常因此灰心丧气许久。或者就是因为在打球的过程中，经常会有人嘲笑我，我就要非常努力地练球，证明给他们看。</p><p>可以说，前期的这些的确给了我很大的学习动力，但我因此浪费了很多不必要的精力和时间。因为我可能并没有想清楚自己想要活成什么样子。真正改变我的，就是复读的那一年。从现在的角度上来看，复读真的锻炼了我心理。几乎永远都在教室的最后面，老师不记得我的名字，同学只认识舍友，几乎没有任何娱乐活动。在那段日子里，我真的感觉自己每天都在进步，也或许正是从那个时候开始，我才明白我是要做我自己，不需要去看别人。正是这些经历，我在上大学之后，就一直锻炼自己的一个人生活的能力。</p><p>我再也不需要什么目标了，真正要做的就是不断地去完善自己。我不会左手，我就在寒假中努力的练习左手运球。我不会投三分，我就练深蹲和平板支撑锻炼自己的核心。并不是为了超越谁谁谁，也不是为了去赢得别人在球场上对我的赞美。就单纯地只是在完善自己。在家里没有球馆，没有场地，就自己去找没人的地方练习。令我很庆幸的是，路过的路人并没有嘲笑我。他们反而再说我是专业打球的。这真的令我很惭愧，也很高兴。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QQ%E5%9B%BE%E7%89%8720211031215440.jpg" alt="在家时训练的场地"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QQ%E5%9B%BE%E7%89%8720211031215449.jpg" alt="夕阳"></p><p>在学习上也是这样，虽然的确跟很多优秀的同学实在是没法比较，但我也习惯了这种巨大的差距。并不是躺平，我只是不想因为别人，而改变了我自己前进的方向。</p><p>就像片尾曲所唱的那样(<code>角色</code>)</p><blockquote><p>只需要 记得<br>从前现在 都要坚持 自我</p></blockquote><p>这文笔实在是差，写着写着就不知道写啥了。~~~~😀</p><p>以后我也想把这里当成个日记。想写的就随便写，反正也没人认识我。也没什么人可以看到。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;三年之约&quot;&gt;&lt;a href=&quot;#三年之约&quot; class=&quot;headerlink&quot; title=&quot;三年之约&quot;&gt;&lt;/a&gt;三年之约&lt;/h1&gt;&lt;p&gt;三年之约真的拍了三年，虽然没有看过小说，但随着慢慢地在看动漫以后，内心里也真正喜欢上了萧炎。可能动漫中确实有些夸张的地方，但</summary>
      
    
    
    
    <category term="动漫" scheme="https://laobameishijia.github.io/category/%E5%8A%A8%E6%BC%AB/"/>
    
    
    <category term="斗破苍穹" scheme="https://laobameishijia.github.io/tag/%E6%96%97%E7%A0%B4%E8%8B%8D%E7%A9%B9/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言学习-直接定位表</title>
    <link href="https://laobameishijia.github.io/2021/10/26/hui-bian-yu-yan-xue-xi-zhi-jie-ding-wei-biao/"/>
    <id>https://laobameishijia.github.io/2021/10/26/hui-bian-yu-yan-xue-xi-zhi-jie-ding-wei-biao/</id>
    <published>2021-10-26T19:25:00.000Z</published>
    <updated>2021-11-01T01:54:17.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="直接定址表"><a href="#直接定址表" class="headerlink" title="直接定址表"></a>直接定址表</h1><h2 id="描述了单元长度的标号"><a href="#描述了单元长度的标号" class="headerlink" title="描述了单元长度的标号"></a>描述了单元长度的标号</h2><p>以前我们多采用后面不带冒号的形式进行编程</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume:codecode segment    a: db 1,2,3,4,5,6,7,8    b: dw 0start:    mov si,offset a    mov bx,offset b    mov cx,8s:    mov al,cs:[si]    mov ah,0    add cs:[bx],ax    inc si    loop s    mov ax,4c00h    int 21hcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>But the mark only represent the address of the memory. We still have another form of the mark that does not have the colon. For example.</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume:codecode segment    a db 1,2,3,4,5,6,7,8    b dw 0start:    mov si,offset a    mov bx,offset b    mov cx,8s:    mov al,a:[si]    mov ah,0    add bs,ax    inc si    loop s    mov ax,4c00h    int 21hcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>mov al,a[si]</code> equal to <code>mov al,cs:0[si]</code></p><p>So, we could find  the way helps us access the address of memory in a neat form. We call it data-mark.他标记了存储数据的单元的地址和长度，它不同于仅仅表示地址的标号。</p><h2 id="在其他段使用数据标号"><a href="#在其他段使用数据标号" class="headerlink" title="在其他段使用数据标号"></a>在其他段使用数据标号</h2><p>一般来说，我们不在代码段中定义数据，而是将数据定义到其他段中，在其他段中，我们也可以使用数据标号来描述数据单元的地址和长度。</p><p><strong>注意：在后面加有‘：’的地址只能在代码段中使用，不能在其他段使用。</strong></p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>安装一个新的int 7ch中断例程</p><blockquote><p>功能: 1.clear the screen<br>2.set the foreground<br>3.set the background<br>4.move up one row</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>编写新的int 7ch 中断例程</li><li>安装新的int 7ch 中断例程</li></ul><blockquote><p>这个实验过程的代码出了很多问题，到最后终于改好了。</p></blockquote><h4 id="初期的改错思路"><a href="#初期的改错思路" class="headerlink" title="初期的改错思路"></a>初期的改错思路</h4><p>the major problem 是中断例程中<code>table dw sub1,sub2,sub3,sub4</code>无法正常运作。<br>给人的感觉好像，不能在程序中用一样.按照这种形式写的话，后面的set标号无法被正确的编译。不知道为什么都变成了table标号下面的??</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211025211433.png" alt="问题1"></p><p>改成这种形式之后，才能在debug中的cpu看到正确的汇编代码，虽然代码段中把它们这些地址解析成了汇编指令</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211025210841.png" alt="问题2"></p><p>通过后续的观察发现,其实代码是被正确解析了的，只是在cpu版块的显示上table段中的存放的数据被当作了指令。但是为什么程序不执行呢？</p><blockquote><p>这也是为什么要把jmp命令放在前面的原因，就是为了不让table段存放的数据被当作指令执行，这样的话，肯定有问题的</p></blockquote><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211025212251.png" alt="改变写法后的对比图"></p><h4 id="后期的改错思路"><a href="#后期的改错思路" class="headerlink" title="后期的改错思路"></a>后期的改错思路</h4><p>先整理一下初期思路中出错的原因，再分析一下是哪些基础的知识没有掌握好，导致我们这么长时间一直在纠错</p><p><strong>初期思路：</strong></p><ul><li><p>1.jmp命令放在前面的原因，就是为了防止我们存储的数据被当作指令执行，这也是为什么你在debug模块中的cpu看汇编代码的时候，看起来好像很奇怪。但是它们都是正常的指令。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211026164553.png" alt="cpu视角下的汇编代码"></p></li><li><p>2.<code>tabledata dw sub1,sub2,sub3,sub4;</code>无论是tabledata 还是 sub1，sub2 这些地址都是相对于最开始运行的CS段而言的，而我们想要的是中断例程，也就是执行中断例程的时候的CS段。这样去调用的话，肯定会出错。说成白话的话就是，本来一棵树距离图书馆35米，但是现在要问你，这棵树举例教学楼多少米，你要是还说35米。那是不是有点刻舟求剑的意思了。<strong>所以，真正要采用的是相对地址，还得加上0200h才行！</strong>    这样才行<code>tabledata dw offset sub1 - offset interupt + 0200h,offset sub2 - offset interupt+0200h,offset sub3 - offset interupt+0200h,offset sub4 - offset interupt+0200h</code></p></li><li><ol start="3"><li><code>call word ptr [bx]</code>这样默认的访问地址是 <code>ds+bx</code>，而你想要的是<code>cs:[bx]</code>所以要把寄存器显式的标注出来啊</li></ol></li><li><ol start="4"><li>虽然中断例程处，确实没有办法通过<code>F7</code>进入，但是可以通过看<code>0000:0200h</code>内存中代码，就可以发现到底是不是你想要的了。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211026165549.png" alt="0000:0200处的代码"></li></ol></li><li><ol start="5"><li>int指令和iret指令的作用，如果真的能很好的掌握这两个指令，也犯不着这么长时间才找到问题的源头。</li></ol></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codecode segmentstart:    mov ax,cs    mov ds,ax    mov si,offset interupt; set the ds:si point to the source address    mov ax,0    mov es,ax    mov di,0200h; set the es:di point to the destination address    mov cx,offset interuptend-offset interupt; cx the length of transmisson    cld ; the sequence of the transmit    rep movsb    mov ax,0    mov es,ax    cli    mov word ptr es:[7ch*4],0200h    mov word ptr es:[7ch*4+2],0    sti    ;调用之前的设置你需要再看一下要求是怎么设置的    mov ah,2    mov al,3        int 7ch; 这里怎么跳到了4002h    ; call interupt    mov ax,4c00h    int 21h;所以程序大体上是没有问题的;但是加上table sub1,sub2,sub3,sub4之后就显的怪怪的;通过调试程序来看的话,只有mov bl,ah之后的程序是正常的;前面的程序好像都是错的一样,--通过CPU反汇编的指令来看的话,前面的几句都不对;我如果去掉table直接调用函数的话,就不会出现上述问题;对前面的简单程序进行操作后发现,这个table dw sub1,sub2,sub3,sub4不能在标号里面;也不是因为jmp short set语句和tabledata dw......两个语句的顺序问题;书上说interupt:    jmp short set    ;并不是写法是错的，而是你用错了    ;按道理来说,程序的执行CS IP 本来在code段    ;现在你引发了中断以后就跑到 中断例程中的CS IP了,但是此时 tabledata中保存的仍然是最开始的CS IP 这样一跳转的话,z    ; tabledata dw sub1,sub2,sub3,sub4;这种写法是错误的    ;写成下面这种形式的话，set标号就会重新显示出来    tabledata dw offset sub1 - offset interupt + 0200h,offset sub2 - offset interupt+0200h,offset sub3 - offset interupt+0200h,offset sub4 - offset interupt+0200h    ; tabledata dw offset sub1 - offset interupt + 0200h,offset sub2 - offset interupt + 0200h,offset sub3 - offset interupt + 0200h,offset sub4 - offset interupt + 0200hset:    push bx    push es    push cx    cmp ah,3;判读功能号是否大于3    ja sret    mov bl,ah    mov bh,0    add bx,bx;根据ah中的功能号计算对应子程序在table表中的偏移    add bx,offset tabledata-offset interupt + 0200h    ; call word ptr (offset tabledata-offset interupt)[bx+0200h];调用对应的功能子程序这句话有问题     ; 上面这条指令错就错在 这样隐含的寄存器是ds 也就是 访问的是ds:[...]但是我们想要的是cs:[bx]    call word ptr cs:[bx]    ; add bx,7e02h    ; jmp cs:[bx]sret:    pop cx    pop es    pop bx    ; ret    iret;make the screen emptysub1:    push bx    push cx    push es    mov bx,0b800h    mov es,bx    mov bx,0    mov cx,2000sub1s:    mov byte ptr es:[bx],' '    add bx,2    loop sub1s    pop es    pop cx    pop bx    ret    ; jmp sret; set the foregroundsub2:    push bx    push cx    push es    mov bx,0b800h    mov es,bx    mov bx,1    mov cx,2000sub2s:    and byte ptr es:[bx],11111000B    or es:[bx],al    add bx,2    loop sub2s    pop es    pop cx    pop bx    ret;set the background colorsub3:    push bx    push cx    push es    mov cl,4    shl al,cl    mov bx,0b800h    mov es,bx    mov bx,1    mov cx,2000sub3s:    and byte ptr es:[bx],10001111B    or es:[bx],al    add bx,2    loop sub3s    pop es    pop cx    pop bx    ret;scroll up one linesub4:    push cx    push si    push di    push es    push ds    mov si,0b800h    mov es,si    mov ds,si    mov si,160;ds:si指向第n+1行    mov di,0;es:di指向第n行    cld    mov cx,24;共复制24行sub4s:    push cx    mov cx,160    rep movsb    pop cx    loop sub4s    mov cx,80    mov si,0sub4s1:    mov byte ptr [160*24+si],' ';最后一行清空    add si,2    loop sub4s1    pop ds    pop es    pop di    pop si    pop cx    retinteruptend:    nopcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211026170129.png" alt="清屏"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211026170158.png" alt="设置前景色"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211026170051.png" alt="设置背景色"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211026170240.png" alt="向上滚动一行"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;直接定址表&quot;&gt;&lt;a href=&quot;#直接定址表&quot; class=&quot;headerlink&quot; title=&quot;直接定址表&quot;&gt;&lt;/a&gt;直接定址表&lt;/h1&gt;&lt;h2 id=&quot;描述了单元长度的标号&quot;&gt;&lt;a href=&quot;#描述了单元长度的标号&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="汇编" scheme="https://laobameishijia.github.io/tag/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言学习-外中断</title>
    <link href="https://laobameishijia.github.io/2021/10/24/hui-bian-yu-yan-xue-xi-wai-zhong-duan/"/>
    <id>https://laobameishijia.github.io/2021/10/24/hui-bian-yu-yan-xue-xi-wai-zhong-duan/</id>
    <published>2021-10-24T19:25:00.000Z</published>
    <updated>2021-11-01T01:54:17.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="外中断"><a href="#外中断" class="headerlink" title="外中断"></a>外中断</h1><h2 id="关于DOS-box是否真的操作硬件和内存的疑惑"><a href="#关于DOS-box是否真的操作硬件和内存的疑惑" class="headerlink" title="关于DOS-box是否真的操作硬件和内存的疑惑"></a>关于DOS-box是否真的操作硬件和内存的疑惑</h2><p>DOSBox is a <code>DOS-emulator</code> that uses the <code>SDL-library</code>which makes DOSBox very easy to port to different platforms. DOSBox has already been ported to many different platforms, such as Windows, BeOS, Linux, MacOS X…</p><p><code>Simple DirectMedia Layer is a cross-platform development library designed to provide low level access to audio, keyboard, mouse, joystick, and graphics hardware via OpenGL and Direct3D.</code>It is used by video playback software, emulators, and popular games including Valve’s award winning catalog and many Humble Bundle games.</p><p>SDL officially supports Windows, Mac OS X, Linux, iOS, and Android. Support for other platforms may be found in the source code.</p><p>SDL is written in C, works natively with C++, and there are bindings available for several other languages, including C# and Python.</p><h2 id="为什么有这个疑惑呢？"><a href="#为什么有这个疑惑呢？" class="headerlink" title="为什么有这个疑惑呢？"></a>为什么有这个疑惑呢？</h2><p>在之前的实验中，我们在中断向量表0000:0200至0000:02FF的部分增添了新的0号中断例程，并且修改了0号表项的入口地址，这样做，是不是影响了后续的程序呢？后面的程序是不是也会同样会收到影响呢？</p><p>好像是没有的,因为后面程序在<code>div指令溢出后</code>总是跑到一个循环里出不来</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211024105838.png" alt="1句"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211024105726.png" alt="2，3句"></p><p><strong>难道每次模拟的时候都会初始化？？也不是没有可能</strong></p><blockquote><p>通过本次实验的效果来看的话，上面的这个猜想是对的，也就是说DOS-box在每次重新打开的时候都会初始化，但是如果你不关闭这个DOS环境的话，它还是会影响下面的</p></blockquote><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>安装一个新的int 9中断例程</p><blockquote><p>功能: 在DOS下，按下‘A’键后，除非不再松开，如果松开就显示全屏的A，其他键照常使用</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>编写新的int 9 中断例程</li><li>保存原有的int 9 地址</li><li>安装新的int 9 中断例程</li></ul><blockquote><p>感觉整个章节的思路比较有借鉴意义，当我没有不太想重新写一个函数，但是又要改善原有函数的功能的话，可以在新函数中去调用原函数，以屏蔽掉繁琐的步骤，更好的完善自己改善的功能。</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codestack segment    db 128 dup(0)stack endscode segmentstart:    mov ax,stack    mov ss,ax    mov sp,128    push cs    pop ds    mov ax,0    mov es,ax    mov si,offset int9    mov di,204h    mov cx,offset int9end-offset int9    cld    rep movsb    push es:[9*4]    pop es:[200h]    push es:[9*4+2]    pop es:[202h]    cli    mov word ptr es:[9*4],204h    mov word ptr es:[9*4+2],0    sti;     mov ax,0b800h;     mov es,ax;     mov ah,'a'; s:;     mov es:[160*12+40*2],ah;     call delay;     inc ah;     cmp ah,'z';     jna s    mov ax,4c00h    int 21hint9:    push ax    push bx    push cx    push es    in al,60h        pushf    call dword ptr cs:[200h]    cmp al,1eh+80h    je printA    jmp int9retprintA:    ;if loose A    mov ax,0b800h    mov es,ax    mov bx,0    mov cx,2000s2:     mov byte ptr es:[bx],'A'    add bx,2    loop s2int9ret:    pop es    pop cx    pop bx    pop ax    iretint9end:    nopcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><strong>得先运行程序,然后在按下a就会有全屏A的效果了</strong></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211024204149.png" alt="20211024204149"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;外中断&quot;&gt;&lt;a href=&quot;#外中断&quot; class=&quot;headerlink&quot; title=&quot;外中断&quot;&gt;&lt;/a&gt;外中断&lt;/h1&gt;&lt;h2 id=&quot;关于DOS-box是否真的操作硬件和内存的疑惑&quot;&gt;&lt;a href=&quot;#关于DOS-box是否真的操作硬件和内存的疑惑&quot; c</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="汇编" scheme="https://laobameishijia.github.io/tag/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言学习-端口</title>
    <link href="https://laobameishijia.github.io/2021/10/23/hui-bian-yu-yan-xue-xi-duan-kou/"/>
    <id>https://laobameishijia.github.io/2021/10/23/hui-bian-yu-yan-xue-xi-duan-kou/</id>
    <published>2021-10-23T19:25:00.000Z</published>
    <updated>2021-11-01T01:54:17.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h1><p>我们前面讲过,各种存储器都和CPU的地址线\数据线\控制线相连. CPU在操控它们的时候,把它们都当作内存来对待,把它们总地看作一个由若干存储单元组成的逻辑存储器,这个逻辑存储器我们称其位内存地址空间.</p><p>在PC机系统中,和CPU通过总线相连的芯片除各种存储器外,还有以下三种芯片.</p><ul><li>各种接口卡(比如 网卡\显卡) 上的接口芯片,它们控制接口卡进行工作;</li><li>主板上的接口芯片,CPU通过它们对部分外设进行访问;</li><li>其他芯片,用来存储相关的系统信息,或进行相关的输入输出处理</li></ul><p>在这些芯片中,都由一组可以由CPU读写的寄存器.这些寄存器,它们在物理上可能处于不同的芯片中,但是它们在以下两点上相同:</p><ul><li>都和CPU的总线相连,当然这种链接是通过它们所在的芯片进行的</li><li>CPU对它们进行读或者写的时候都通过控制线向它们所在的芯片发出端口读写命令</li></ul><p>可见,从CPU的角度,这些寄存器都当作端口,对它们进行统一编址,从而建立了一个统一的端口地址空间.每一个端口在地址空间中都有一个地址.</p><p>CPU 可以直接独写以下三个地方的数据:</p><ul><li>CPU内部的寄存器</li><li>内存单元</li><li>端口</li></ul><h2 id="端口独写"><a href="#端口独写" class="headerlink" title="端口独写"></a>端口独写</h2><h3 id="访问内存"><a href="#访问内存" class="headerlink" title="访问内存"></a>访问内存</h3><p><code>mov ax,ds:[8]</code></p><ul><li>CPU通过地址线将地址信息8发出</li><li>CPU通过控制线发出内存读命令,选中存储器芯片,并通知它,将要从中读取数据</li><li>存储器将8号单元中的数据通过数据线送入CPU</li></ul><h3 id="访问端口"><a href="#访问端口" class="headerlink" title="访问端口"></a>访问端口</h3><p><code>int al,60h</code></p><ul><li>CPU通过地址线将地址信息60h发出;</li><li>CPU通过控制线发出端口读命令,选中端口所在的芯片,并通知它,将要从中读取数据</li><li>端口所在的芯片将60h端口中的数据通过数据线送入CPU</li></ul><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>CMOS RAM 中,存放着当前的时间: 年\月\日\时\分\秒,这六个信息的长度均为1字节.以BCD码的方式存放</p><blockquote><p>编程 以 <code>年/月/日 时:分:秒</code>的格式,显示当前的日期\时间</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>因为读写的单元不是很有规律,所以只能一个一个的写了</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codedata segment    db 20 dup(0)data ends;s min hour day month yearcode segmentstart:    ;s    mov bl,0    mov al,bl    out 70h,al    in al,71h    mov ah,al    mov cl,4    shr ah,cl;右移四位,取高4位    and al,00001111b;与,取低4位        add ah,30h    add al,30h    push ax        ;分    mov bl,2    mov al,bl    out 70h,al    in al,71h    mov ah,al    mov cl,4    shr ah,cl;右移四位,取高4位    and al,00001111b;与,取低4位        add ah,30h    add al,30h    push ax        ;时    mov bl,4    mov al,bl    out 70h,al    in al,71h    mov ah,al    mov cl,4    shr ah,cl;右移四位,取高4位    and al,00001111b;与,取低4位        add ah,30h    add al,30h    push ax    ;日    mov bl,7    mov al,bl    out 70h,al    in al,71h    mov ah,al    mov cl,4    shr ah,cl;右移四位,取高4位    and al,00001111b;与,取低4位        add ah,30h    add al,30h    push ax        ;月    mov bl,8    mov al,bl    out 70h,al    in al,71h    mov ah,al    mov cl,4    shr ah,cl;右移四位,取高4位    and al,00001111b;与,取低4位        add ah,30h    add al,30h    push ax    ;年    mov bl,9    mov al,bl    out 70h,al    in al,71h    mov ah,al    mov cl,4    shr ah,cl;右移四位,取高4位    and al,00001111b;与,取低4位        add ah,30h    add al,30h    push ax    mov ax,data    mov ds,ax    pop ax    mov ds:[0],ah    mov ds:[1],al    mov byte ptr ds:[2],'/'    pop ax    mov ds:[3],ah    mov ds:[4],al    mov byte ptr ds:[5],'/'        pop ax    mov ds:[6],ah    mov ds:[7],al        mov byte ptr ds:[8],' '        pop ax    mov ds:[9],ah    mov ds:[10],al    mov byte ptr ds:[11],':'        pop ax    mov ds:[12],ah    mov ds:[13],al    mov byte ptr ds:[14],':'    pop ax    mov ds:[15],ah    mov ds:[16],al    mov bx,0b800h    mov es,bx    mov si,0    mov bx,0    mov cx,0s:     mov byte ptr cl,ds:[bx]    jcxz ok    mov byte ptr es:[160*12+40*2+si],cl    inc bx    add si,2    jmp sok:    mov ax,4c00h    int 21hcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211023202035.png" alt="效果"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;端口&quot;&gt;&lt;a href=&quot;#端口&quot; class=&quot;headerlink&quot; title=&quot;端口&quot;&gt;&lt;/a&gt;端口&lt;/h1&gt;&lt;p&gt;我们前面讲过,各种存储器都和CPU的地址线\数据线\控制线相连. CPU在操控它们的时候,把它们都当作内存来对待,把它们总地看作一个由若干存</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="汇编" scheme="https://laobameishijia.github.io/tag/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言学习-int指令</title>
    <link href="https://laobameishijia.github.io/2021/10/23/hui-bian-yu-yan-xue-xi-int-zhi-ling/"/>
    <id>https://laobameishijia.github.io/2021/10/23/hui-bian-yu-yan-xue-xi-int-zhi-ling/</id>
    <published>2021-10-23T09:25:00.000Z</published>
    <updated>2021-11-01T01:54:17.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="int指令"><a href="#int指令" class="headerlink" title="int指令"></a>int指令</h1><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211023100523.png" alt="思维导图"></p><h2 id="BIOS和DOS中断例程的安装过程"><a href="#BIOS和DOS中断例程的安装过程" class="headerlink" title="BIOS和DOS中断例程的安装过程"></a>BIOS和DOS中断例程的安装过程</h2><ul><li>开机后，CPU一加电，初始化CS=0FFFFH，IP=0，自动从FFFF：0单元开始执行程序。FFFF：0处有一条跳转指令，CPU执行该指令后，转去执行BIOS中的硬件检测系统和初始化程序</li><li>初始化程序将建立BIOS所支持的中断向量。<blockquote><p>注意， 对于BIOS所提供的中断例程，只需要将入口地址登记在中断向量表中即可，因为他们是固化到ROM中的程序，一直在内存中存在</p></blockquote></li><li>硬件系统检测和初始化完成后，调用int 19h进行操作系统引导。从此将计算机交由操作系统控制。</li><li>DOS启动后，除完成其他工作外，还将它所提供的中断例程装入内存，并建立相应的中断向量。</li></ul><h2 id="实验13"><a href="#实验13" class="headerlink" title="实验13"></a>实验13</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><blockquote><p>编写并安装int 7ch中断例程，功能为显示一个用0结束的字符串，中断例程安装在0：200处<br>dh 行号，dl 列号， cl 颜色， ds:si指向字符串首地址</p></blockquote><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul><li>编写能显示字符串的中断处理程序</li><li>将终端服务程序移动到0000:0200处</li><li>修改中断向量表中的7cH号中断的入口地址,使其指向0000:0200</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><blockquote><p>一些注意事项和问题就写到注释里面了,后面忘了的话记得看看</p></blockquote><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codedata segment    db 'welcome to masm!',0data endscode segmentstart:    mov ah,15    int 10h    mov ah,0    int 10h    mov ax,cs    mov ds,ax    mov si,offset interupt; set the ds:si point to the source address    mov ax,0    mov es,ax    mov di,200h; set the es:di point to the destination address    mov cx,offset interuptend-offset interupt; cx the length of transmisson    cld ; the sequence of the transmit    rep movsb    mov ax,0    mov es,ax    mov word ptr es:[7ch*4],200h    mov word ptr es:[7ch*4+2],0        mov dh,10    mov dl,10    mov cl,2    mov ax,data    mov ds,ax    mov si,0    int 7ch    mov ax,4c00h    int 21h;dh 行号;dl 列号;cl 颜色;ds:si 指向字符串首地址interupt:    mov ax,0b800h    mov es,ax    ;找行号对应的内存地址    mov ah,00    mov al,160    mul dh    mov bp,ax    ;找列对应的内存地址    mov ah,00    mov al,2    mul dl    mov di,ax    s:        mov al,ds:[si]        cmp al,0        je ok        mov es:[bp+di],al        mov es:[bp+di+1],cl        inc si        add di,2        jmp s    ok:        iretinteruptend:    nopcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211023102716.png" alt="实现效果"></p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><blockquote><p>编写并安装int 7ch中断例程，功能为完成loop指令的功能<br>cx为循环次数，bx为位移</p></blockquote><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><ul><li>编写能实现loop循环的中断处理程序</li><li>将终端服务程序移动到0000:0200处</li><li>修改中断向量表中的7cH号中断的入口地址,使其指向0000:0200</li></ul><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codedata segment    db 'welcome to masm!',0data endscode segmentstart:    mov ah,15    int 10h    mov ah,0    int 10h    mov ax,cs    mov ds,ax    mov si,offset interupt; set the ds:si point to the source address    mov ax,0    mov es,ax    mov di,200h; set the es:di point to the destination address    mov cx,offset interuptend-offset interupt; cx the length of transmisson    cld ; the sequence of the transmit    rep movsb    mov ax,0    mov es,ax    mov word ptr es:[7ch*4],200h    mov word ptr es:[7ch*4+2],0    mov ax,0b800h    mov es,ax    mov di,160*12    mov bx, offset s - offset se    mov cx,80s:    mov byte ptr es:[di],'!'    add di,2    int 7chse:     nop    mov ax,4c00h    int 21h;采用中断方式实现的loop,转移的范围要更大因为时16位的;正常情况下的loop是8位的,范围相对来说要小一些interupt:    push bp    mov bp,sp    dec cx    jcxz interuptret;就是加不加bx的区别,当cx为零的时候,这个时候就不加bx也就是不会再跳回去了    add ss:[bp+2],bx;注意这个bx是个负数！interuptret:    pop bp    iretinteruptend:    nopcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现效果-1"><a href="#实现效果-1" class="headerlink" title="实现效果"></a>实现效果</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211023102946.png" alt="实现效果"></p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><blockquote><p>下面的程序，分别在屏幕的第2、4、6、8行显示4句英文诗，补全程序.</p></blockquote><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><p>这里面有个写法挺奇妙的, <code>ds:[ds:[si]]</code>是可以这样嵌套着写的</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codecode segments1: db 'Good,better,best,','$'s2: db 'Never let it rest,','$'s3: db 'Till good is better,','$'s4: db 'And better,best.','$'s:  dw offset s1, offset s2, offset s3,offset s4row: db 2,4,6,8start:    mov ah,15    int 10h    mov ah,0    int 10h    mov ax,cs    mov ds,ax    mov bx,offset s    mov si,offset row;行号    mov cx,4ok:    mov bh,0;第0页    mov dh,ds:[si];这个行号怎么不起作用呢    mov dl,0;列号    mov ah,2    int 10    mov dx,ds:[ds:[bx]];可以这样嵌套着写！我真是个大聪明！哈哈哈哈哈~~~    mov ah,9    int 21h        ;直接在这里加就行了,不用非得跑到mov指令那里加    ;不能直接加 标号,得加寄存器,你个憨憨    add si,1    add bx,2    loop ok    mov ax,4c00h    int 21hcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p>有个疑惑就是为什么这个地方的行号和列号的改变不起作用呢??</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211023103301.png" alt="效果"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;int指令&quot;&gt;&lt;a href=&quot;#int指令&quot; class=&quot;headerlink&quot; title=&quot;int指令&quot;&gt;&lt;/a&gt;int指令&lt;/h1&gt;&lt;h2 id=&quot;思维导图&quot;&gt;&lt;a href=&quot;#思维导图&quot; class=&quot;headerlink&quot; title=&quot;思维导图&quot;</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="汇编" scheme="https://laobameishijia.github.io/tag/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言学习-内中断</title>
    <link href="https://laobameishijia.github.io/2021/10/21/hui-bian-yu-yan-xue-xi-nei-zhong-duan/"/>
    <id>https://laobameishijia.github.io/2021/10/21/hui-bian-yu-yan-xue-xi-nei-zhong-duan/</id>
    <published>2021-10-21T09:25:00.000Z</published>
    <updated>2021-11-01T01:54:17.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内中断"><a href="#内中断" class="headerlink" title="内中断"></a>内中断</h1><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211021105626.png" alt="思维导图"></p><h2 id="debug单步执行命令的原理"><a href="#debug单步执行命令的原理" class="headerlink" title="debug单步执行命令的原理"></a>debug单步执行命令的原理</h2><p>基本上,CPU在执行完一条指令之后,如果检测到标志寄存器的TF位为1,则产生单步中断,引发中断的过程。单步中断的中断类型码为1,则它引发的中断过程如下:</p><ul><li>取得中断码类型1</li><li>标志寄存器入栈,TF\IF设置为0</li><li>CS、IP入栈</li><li>IP=(1<em>4),CS=(1</em>4+2)</li></ul><p>首先Debug提供了单步中断的中断处理程序,功能为显示所有寄存器中的内容后等待输入命令。然后,在使用t命令执行执行时,Debug将TF设置为1,使得CPU工作于中断方式下,则在CPU执行完这条指令后就引发单步中断,执行单步中断的中断处理程序,所有寄存器中的内容将被显示在屏幕上，并且等待输入命令。</p><p>在进入中断处理程序之前,设置TF=0。从而避免CPU在执行中断处理程序的时候发生单步中断。这就是为什么在终端过程中有TF=0这一步。</p><p>最后,CPU提供单步中断功能的原因就是，为单步跟踪程序的执行过程，提供实现机制</p><h2 id="响应中断的特殊情况"><a href="#响应中断的特殊情况" class="headerlink" title="响应中断的特殊情况"></a>响应中断的特殊情况</h2><p>一般情况下,CPU在执行完当前指令后，如果检测到中断信息，就响应中断，引发中断过程。可是，在有些情况下，CPU在执行完当前指令后，即便是发生中断，也不会相响应。对于这些情况，下面列举其中一种情况来进行说明。</p><p>在执行完向ss寄存器传送数据的指令后，即便是发生中断，CPU也不会相应。这样做的主要原因是，SS:SP联合指向栈顶，而对它们的设置应该连续完成。如果在设置完ss的指令后，CPU响应中断，引发中断过程，要在栈中压入标志寄存器，cs和ip的值。而ss改变，sp并未改变，ss：sp指向的不是正确的栈顶，将引起出错误。所以CPU在执行完设置ss 的指令后，不响应中断。</p><p>所以我们应该利用这个特性，将设置ss和sp的指令连续存放。</p><h2 id="实验12"><a href="#实验12" class="headerlink" title="实验12"></a>实验12</h2><blockquote><p>编写0号中断的处理程序,使得在除法溢出发生时,在屏幕中间显示字符串”divide error!”,然后返回到DOS</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>编写能显示divide error！的0号中断处理程序</li><li>将终端服务程序移动到0000:0200处</li><li>修改中断向量表中的0号中断的入口地址,使其指向0000:0200</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><blockquote><p>一些注意事项和问题就写到注释里面了,后面忘了的话记得看看</p></blockquote><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codecode segmentstart:;清屏    mov ah,15    int 10h    mov ah,0    int 10h;将do0送入内存0000:0200处    ;ds:si传送的原始位置    mov ax,code    mov ds,ax    mov si,offset do0    ;es:di传送的目的位置    mov ax,0000    mov es,ax    mov di,0200h;！！！！0200后面要加h啊！！     ;传送的长度    mov cx,offset do0end - offset do0    ;传送的方向 正向传送    cld    rep movsb;将do0的入口地址0000:0200存储在中断向量表0号表项中    mov ax,0000    mov es,ax    mov word ptr es:[0],0200h ;！！！！在没有寄存器显示指示操作的数据大小的时候,一定要用word或者byte显式指明    mov word ptr es:[2],0000h ;另外你只用写往里面存的数就行了,不用按照高低字节改变,他自己会改变的    mov ax,1000    mov bh,1    div bh    mov ax,4c00h    int 21;可以显示 overflow的中断处理程序 do0do0:    jmp do0start    db 'divide error!'do0start:    mov ax,cs    mov ds,ax    mov si,0202h ;设置ds:si指向字符串        mov ax,0B800H    mov es,ax    mov di,12*160+36*2 ;设置es:di指向字符串        ;明白为什么这里它不用这个rep的命令了把,因为显存里面的结构是 要显示的字符+颜色背景啥的,但是这个只能是一个一个的加    mov cx,13;设置字符串长度    ; cld;设置传输方向    ; rep movsb    s:        mov al,[si]        mov es:[di],al        inc si        add di,2;为什么不用rep命令的原因就在这        loop s    mov ax,4c00h    int 21hdo0end:    nopcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;内中断&quot;&gt;&lt;a href=&quot;#内中断&quot; class=&quot;headerlink&quot; title=&quot;内中断&quot;&gt;&lt;/a&gt;内中断&lt;/h1&gt;&lt;h2 id=&quot;思维导图&quot;&gt;&lt;a href=&quot;#思维导图&quot; class=&quot;headerlink&quot; title=&quot;思维导图&quot;&gt;&lt;/a&gt;思维导</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="汇编" scheme="https://laobameishijia.github.io/tag/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言学习-标志寄存器</title>
    <link href="https://laobameishijia.github.io/2021/10/20/hui-bian-yu-yan-xue-xi-biao-zhi-ji-cun-qi/"/>
    <id>https://laobameishijia.github.io/2021/10/20/hui-bian-yu-yan-xue-xi-biao-zhi-ji-cun-qi/</id>
    <published>2021-10-20T09:25:00.000Z</published>
    <updated>2021-11-01T01:54:17.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h1><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211020165355.png" alt="思维导图"></p><h2 id="计算机是如何知道到底是按有符号数处理还是按无符号数处理"><a href="#计算机是如何知道到底是按有符号数处理还是按无符号数处理" class="headerlink" title="计算机是如何知道到底是按有符号数处理还是按无符号数处理"></a>计算机是如何知道到底是按有符号数处理还是按无符号数处理</h2><p>CPU在执行add等指令的时候,就包含了两种含义:无符号数运算和有符号数运算。对于无符号数运算,CPU用CF位来记录是否产生了进位;对于有符号数运算,CPU用OF位来记录是否产生了溢出,当然,还要用SF位记录结果的符号。CF和OF所表示的进位和溢出,是分别对无符号数和有符号数运算而言的,他们之间没有任何关系。</p><p>也就是说,本身就是有两层含义都在,但具体看作哪一种,取决于写程序的你怎么处理这些变换的标志位。如何利用这些标志位和运算结果来正确的表达你想要的计算方式。</p><h2 id="实验11"><a href="#实验11" class="headerlink" title="实验11"></a>实验11</h2><blockquote><p>编写一个子程序,将包含任意字符,以0结尾的字符串中的小写字母转变成大写字母,描述如下。<br>名称：letterc<br>功能：将以0为结尾的字符串中的小写字母转变成大写字母<br>参数：ds:si指向字符串首地址</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>判断所取到的字节数据是不是0,是的话结束,不是的话,继续判断</li><li>判断取到的字节数据是不是小写字母。是的话,转变成大写字母；不是的话,就不变</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codesgdatasg segment    db "Beginner's All-purpose Symbolic Instruction Code.",0datasg endscodesg segment    begin:        mov ax,datasg        mov ds,ax        mov si,0        call letterc        mov ax,4c00h        int 21hletterc:    mov ch,00    mov cl,ds:[si]    jcxz ok    cmp cx,97    jb next    cmp cx,122    ja next    sub cx,32    mov ds:[si],clnext:    inc si    jmp lettercok:     retcodesg endsend begin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;标志寄存器&quot;&gt;&lt;a href=&quot;#标志寄存器&quot; class=&quot;headerlink&quot; title=&quot;标志寄存器&quot;&gt;&lt;/a&gt;标志寄存器&lt;/h1&gt;&lt;h2 id=&quot;思维导图&quot;&gt;&lt;a href=&quot;#思维导图&quot; class=&quot;headerlink&quot; title=&quot;思维导图&quot;</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="汇编" scheme="https://laobameishijia.github.io/tag/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>解决主题代码块没有行号的问题</title>
    <link href="https://laobameishijia.github.io/2021/10/19/jie-jue-zhu-ti-dai-ma-kuai-mei-you-xing-hao-de-wen-ti/"/>
    <id>https://laobameishijia.github.io/2021/10/19/jie-jue-zhu-ti-dai-ma-kuai-mei-you-xing-hao-de-wen-ti/</id>
    <published>2021-10-19T09:25:00.000Z</published>
    <updated>2021-11-01T01:54:17.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决主题代码块没有行号的问题"><a href="#解决主题代码块没有行号的问题" class="headerlink" title="解决主题代码块没有行号的问题"></a>解决主题代码块没有行号的问题</h1><p>也是看了网上许多的解决方案,因为自己并不是很清楚这个hexo渲染页面详细的原理,所以对于一些基本的解决方案并没有自己的思考。通过观察别人的博客,通过控制台看其他人的css、js文件,终于发现可能是主题本身就没有写这部分,所以即使设置改回来了,还是没有办法实现。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1-在主题下的source-css-matery-css下添加如下代码"><a href="#1-在主题下的source-css-matery-css下添加如下代码" class="headerlink" title="1.在主题下的source/css/matery.css下添加如下代码"></a>1.在主题下的source/css/matery.css下添加如下代码</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211019164659.png" alt="具体目录"></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.line-numbers-rows</span> <span class="token punctuation">&#123;</span>    <span class="token property">border-right-width</span><span class="token punctuation">:</span> 0px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.line-numbers</span> <span class="token punctuation">&#123;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 1.5rem 1.5rem 1.5rem 3.5rem <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 1rem 0 <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #272822<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 0.35rem<span class="token punctuation">;</span>    <span class="token property">tab-size</span><span class="token punctuation">:</span> 4<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-在主题下的source-libs-prism-prism-css中添加如下代码"><a href="#2-在主题下的source-libs-prism-prism-css中添加如下代码" class="headerlink" title="2.在主题下的source/libs/prism/prism.css中添加如下代码"></a>2.在主题下的source/libs/prism/prism.css中添加如下代码</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">pre[class*="language-"].line-numbers</span> <span class="token punctuation">&#123;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token property">padding-left</span><span class="token punctuation">:</span> 3.8em<span class="token punctuation">;</span> <span class="token property">counter-reset</span><span class="token punctuation">:</span> linenumber<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">pre[class*="language-"].line-numbers > code</span> <span class="token punctuation">&#123;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token property">white-space</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.line-numbers .line-numbers-rows</span> <span class="token punctuation">&#123;</span> <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span> <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> -3.8em<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 3em<span class="token punctuation">;</span> <span class="token comment">/* works for line-numbers below 1000 lines */</span> <span class="token property">letter-spacing</span><span class="token punctuation">:</span> -1px<span class="token punctuation">;</span> <span class="token property">border-right</span><span class="token punctuation">:</span> 1px solid #999<span class="token punctuation">;</span> <span class="token property">-webkit-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token property">-moz-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token property">-ms-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token property">user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token selector">.line-numbers-rows > span</span> <span class="token punctuation">&#123;</span>  <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">counter-increment</span><span class="token punctuation">:</span> linenumber<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token selector">.line-numbers-rows > span:before</span> <span class="token punctuation">&#123;</span>   <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">counter</span><span class="token punctuation">(</span>linenumber<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token property">color</span><span class="token punctuation">:</span> #999<span class="token punctuation">;</span>   <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>   <span class="token property">padding-right</span><span class="token punctuation">:</span> 0.8em<span class="token punctuation">;</span>   <span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;解决主题代码块没有行号的问题&quot;&gt;&lt;a href=&quot;#解决主题代码块没有行号的问题&quot; class=&quot;headerlink&quot; title=&quot;解决主题代码块没有行号的问题&quot;&gt;&lt;/a&gt;解决主题代码块没有行号的问题&lt;/h1&gt;&lt;p&gt;也是看了网上许多的解决方案,因为自己并不是很</summary>
      
    
    
    
    <category term="hexo主题" scheme="https://laobameishijia.github.io/category/hexo%E4%B8%BB%E9%A2%98/"/>
    
    
    <category term="代码块行数" scheme="https://laobameishijia.github.io/tag/%E4%BB%A3%E7%A0%81%E5%9D%97%E8%A1%8C%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言学习-课程设计</title>
    <link href="https://laobameishijia.github.io/2021/10/18/hui-bian-yu-yan-xue-xi-ke-cheng-she-ji/"/>
    <id>https://laobameishijia.github.io/2021/10/18/hui-bian-yu-yan-xue-xi-ke-cheng-she-ji/</id>
    <published>2021-10-18T09:25:00.000Z</published>
    <updated>2021-11-01T01:54:17.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="课程设计"><a href="#课程设计" class="headerlink" title="课程设计"></a>课程设计</h1><p>在整个课程中,我们一共有两个课程设计,编写两个比较综合的程序,这是第一个。任务:将实验7中的power idea公司的数据按照图10.2所示的格式在屏幕上显示出来。</p><p><strong>效果</strong><br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211018160247.png" alt="20211018160247"></p><h2 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h2><ul><li>从数字转换成字符串–通过除以10来不断获取余数,在加上30,最后再逆向输出</li><li>因为程序要显示的数据有些已经大于65535,应该编写一个新的数据到字符串转换的子程序,完成dword型到字符串的转换</li><li>在循环中如何选择寄存器(组合)来实现对有规律数据的复制</li><li>对数据存储结构和控制移位的寄存器值的变化的控制</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然实现了效果,但是在思路上还是比较凌乱,尤其是在整体的思路上面.还是改不了边写边改的毛病.</p><ul><li><input disabled="" type="checkbox"> 后面还是要不断的把代码再优化优化</li></ul><h2 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h2><h3 id="寄存器寻址组合"><a href="#寄存器寻址组合" class="headerlink" title="寄存器寻址组合"></a>寄存器寻址组合</h3><p>已知的是 di+bp / bx+si / bx+di 这几种可以用来在内存中遍历数据,在用之前,需要搞清楚,数据元素的确定最少需要几个变化的值来定位。</p><h3 id="条件指令的转移范围"><a href="#条件指令的转移范围" class="headerlink" title="条件指令的转移范围"></a>条件指令的转移范围</h3><p>条件指令的转移范围只能是从(-128-127),如果想要跳转的位置超过了这个范围,可以先跳到附近的位置,再在附近的位置利用无条件指令跳到想跳到的位置。</p><h3 id="汇编语言清除屏幕输出"><a href="#汇编语言清除屏幕输出" class="headerlink" title="汇编语言清除屏幕输出"></a>汇编语言清除屏幕输出</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">mov ah,15int 10hmov ah,0int 10h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><ul><li>哪些寄存器在循环的过程中需要变化,哪些寄存器需要在下一次循环或者调用子程序之前初始化,这些都要搞清楚</li><li>再利用div等有范围和大小限制的指令时,考虑一下是否会有溢出的情况</li><li>jmp和je等条件跳转指令如何实现循环的过程</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">;TODO ;1.现在 char段前面四个字节的年份复制完成了 √;2.着手将收入转换位为字符串并存在char段中  √;3.下一步是 将雇员数转换为字符串存在char段中,这个应该不用divdw了 √;4.最后一步就是显示了,不过应该也是比较头疼的把 √;整理TODO;1.整理一下到底哪几个寄存器可以组合起来用来寻址,我快疯了~~~;已知的是di+bp/bx+si/bx+diassume cs:codesg,ds:datadata segment    ;0    db '1975','1976','1977','1978','1979','1980','1981','1982','1983'    db '1984','1985','1986','1987','1988','1989','1990','1991','1992'    db '1993','1994','1995'    ;54H    dd 16,22,382,1356,2390,8000,160000,24486,50065,97479,140417,197514    dd 345980,590827,803530,1183000,1843000,2759000,3753000,4649000,5937000        ;A8H    dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793,4037,5635,8226    dw 11542,14430,15257,17800data endstable segment    db 21 dup ('year summ ne ?? ')table endschar segment    db 672 dup(0) ;672 = 32*21 每一年的数据占23个字节(取个整数刚好是32个字节-16的倍数), 一共有21年    ;00 XXXX    ;03 XXXX    ;06 XXXX    ;09 XXXX    ;年份 1997          4字节    ;空格               1字节-5    ;收入 max = 5937000 7个字节    ;空格               1字节-13        ;雇员数 max = 17800 5个字节    ;空格               1字节-19    ;人均收入 max = 333  3个字节    ;空格               1字节char endstestsg segment    db 1680 dup(0) testsg segmentcodesg segmentstart:    mov ah,15    int 10h    mov ah,0    int 10h    mov ax,data    mov ds,ax    mov ax,table    mov es,ax    call calculate_income    mov ax,table    mov ds,ax    mov ax,char    mov es,ax    call duplicate_year        call num_char    call employees_char    call average_salary_char    call show_str        mov ax,4c00h    int 21h;将数据存入显存当中show_str:    mov ax,char    mov ds,ax    mov ax,0B800H    mov es,ax        mov dh,4;行号    mov dl,0;列号    mov cl,2;颜色    mov bx,0    show_str_year:        push dx        ;找行号对应的内存地址        mov ah,00        mov al,160        mul dh        mov bp,ax        ;找列对应的内存地址        mov ah,00        mov al,2        mul dl        mov di,ax                ; ;找行号对应的内存地址--数据段        ; mov ah,00        ; mov al,10H        ; mov dl,dh        ; mov dh,0        ; mul dx        ; mov bx,ax        ;把颜色转移一下        mov al,cl        push cx        mov si,0        show_str_year_loop:            mov cl,ds:[bx+si]            mov ch,0            jcxz show_str_year_loop_ok            mov es:[bp+di],cl            mov es:[bp+di+1],al            add di,2            add si,1            jmp short  show_str_year_loop        show_str_year_loop_ok:            pop cx            mov dl,10;列号            ;更新下一个列地址            mov ah,00            mov al,2            mul dl            mov di,ax            ;把颜色再设置回来            mov al,cl                push cx        mov si,0        show_str_income_loop:            mov cl,ds:[bx+si+5]            mov ch,0            jcxz show_str_income_loop_ok            mov es:[bp+di],cl            mov es:[bp+di+1],al            add di,2            add si,1            jmp short  show_str_income_loop        show_str_income_loop_ok:            pop cx            mov dl,20;列号            ;更新下一个列地址            mov ah,00            mov al,2            mul dl            mov di,ax            ;把颜色再设置回来            mov al,cl                push cx        mov si,0        show_str_employees_loop:            mov cl,ds:[bx+si+13]            mov ch,0            jcxz show_str_employees_loop_ok            mov es:[bp+di],cl            mov es:[bp+di+1],al            add di,2            add si,1            jmp short  show_str_employees_loop        show_str_employees_loop_ok:            pop cx            mov dl,30;列号            ;更新下一个列地址            mov ah,00            mov al,2            mul dl            mov di,ax            ;把颜色再设置回来            mov al,cl        push cx        mov si,0        show_str_average_loop:            mov cl,ds:[bx+si+19]            mov ch,0            jcxz show_str_average_loop_ok            mov es:[bp+di],cl            mov es:[bp+di+1],al            add di,2            add si,1            jmp short  show_str_average_loop        show_str_average_loop_ok:            pop cx            mov dl,40;列号            ;更新下一个列地址            mov ah,00            mov al,2            mul dl            mov di,ax            ;把颜色再设置回来            mov al,cl                       pop dx        add bx,20H        add dh,1;行号加一        mov dl,0;列号清零        mov ax,21        sub al,dh        cmp byte ptr al,0        ; cmp byte ptr dh,21        ;je show_str_ok;这很明显不相等啊,为什么还跳转了？        ;你应该是跳转到循环里才对,如果不是跳到循环里,它其实没有发生跳转,只是按顺序往下执行刚好到下面了        je show_str_ok;这样写也跳转了。。？？        show_str_year_relay:            jmp show_str_year    show_str_ok:        ret;把人均工资部分转换成字符串average_salary_char:    mov bx,0    mov di,0    mov cx,21    average_salary_char_all:        push cx        mov ax,ds:[bx+0DH]        mov dx,0        mov si,0        mov bp,10        average_salary_char_one:                div bp            cmp ax,0            je average_salary_char_one_ok            push dx            mov dx,0            inc si            jmp average_salary_char_one        average_salary_char_one_ok:            push dx            inc si                        mov cx,si            mov si,0            mov bp,0            average_salary_char_one_ok_loop:                pop ax                add al,30H                mov es:[di+bp+19],al                inc bp                loop average_salary_char_one_ok_loop        pop cx        add bx,10H        add di,20H        loop average_salary_char_all    ret;把雇员数部分转换成字符串employees_char:    mov bx,0    mov di,0    mov cx,21    employees_char_all:        push cx        mov ax,ds:[bx+0AH]        mov dx,0        mov si,0        mov bp,10        employees_char_one:                div bp            cmp ax,0            je employees_char_one_ok            push dx            mov dx,0            inc si            jmp employees_char_one        employees_char_one_ok:            push dx            inc si                        mov cx,si            mov si,0            mov bp,0            employees_char_one_ok_loop:                pop ax                add al,30H                mov es:[di+bp+13],al                inc bp                loop employees_char_one_ok_loop        pop cx        add bx,10H        add di,20H        loop employees_char_all    ret;把收入部分的数字转换为字符串存储到内存当中num_char:    mov bx,0    mov cx,21    num_char_loop:        push cx                mov si,0        mov di,0        mov ax,ds:[bx+5H]        mov dx,ds:[bx+7H]        mov cx,0AH        ;具体的一个数转换为字符        num_char_loop_div:            call divdw            mov bp,0            ;如果dx和ax都为零说明该数转换完成            mov bp,dx            or bp,ax            cmp bp,0            je num_char_loop_div_ok            push cx;余数入栈            inc si            mov cx,0AH;每次跳回去之前要把cx再设置为零            jmp num_char_loop_div            num_char_loop_div_ok:                ;最后一个商小于10,上面没办法入栈了                push cx;在这里把这个入栈                inc si                mov cx,si;si中保留着这个具体数的所有余数                mov bp,0                mov ax,2H                mul bx                 mov di,ax                 num_char_loop_div_ok_loop:                        pop ax                    add ax,30H                    mov es:[di+5H+bp],al                    add bp,1                    loop num_char_loop_div_ok_loop                ; ;填了个空格                ; mov al,' '                ; mov es:[di+5H+bp],al        pop cx        add bx,10H        loop num_char_loop;把data段中的年份复制到char段里面去duplicate_year:    mov bx,0    mov si,0    mov di,0    mov cx,21    duplicate_year_all:        push cx        mov cx,2        mov bx,0        duplicate_year_year:            mov ax,ds:[di+bx]            mov es:[si+bx],ax            add bx,2            loop duplicate_year_year        ; ;添个空格         ; mov al,' '        ; mov es:[si+bx],al        add si,20H        add di,10H        pop cx        loop duplicate_year_all    ret;刚好是之前计算人均收入程序calculate_income:    mov bx,0;bx定位data段,bx year和收入都是四个字节可以公用,但是雇员数是两个字节的没办法公用    mov bp,0;bp定位es段    mov di,0;di用来在循环中服务于雇员数,因为它是两个字节,没办法跟year和outcome公用一个递增寄存器    mov cx,21    overall:        push cx        mov cx,2        mov si,0        year:            ;年份的4字节---两个字            mov ax,ds:[bx+si]            mov es:[bp+si],ax            add si,2            loop year        mov cx,2        mov si,0        outcome:            ;收入的4字节---两个字            mov ax,ds:[bx+54H+si]            mov es:[bp+5H+si],ax            add si,2            loop outcome        ;雇员数---一个字        mov ax,ds:[di+0A8H]        mov es:[bp+0AH],ax        ;计算人均收入        mov ax,es:[bp+5H];计算人均收入的,要用es的定位,那偏移量就得按照es的来。最开始写成ds的定位了[bx+54H]了        mov dx,es:[bp+5H+2]        div word ptr es:[bp+0AH]        mov es:[bp+0DH],ax        ;所有的空格        ;第一次没有考虑到空格是一个字节,这里不应该用16位的,应该用8位的        mov al,' '        mov es:[bp+4H],al        mov es:[bp+9H],al        mov es:[bp+0FH],al        pop cx        add di,2        add bx,4        add bp,16        loop overall    ret;名称：divdw;功能：进行不会产生溢出的除法运算,被除数为dword,除数为word.结果为dword;参数: ax dword的低16位 | dx dword高16位 | cx除数16位;返回: dx 结果的高16位, ax 结果的低16位, cx 余数;应用举例：计算 1000000/10(F4240H/0AH);结果: dx = 0001H  ax = 86A0H cx = 0divdw:    push si    push bx    push ax    mov ax,dx    div cl    mov bl,al    mov bh,00H    mov al,ah    mov ah,00H;bx保留商,ax保留余数    pop si    mov dx,si    mov dx,ax    mov ax,si    div cx;32/16 ax余数,dx商    mov si,bx    mov bx,dx    mov dx,si    mov cx,bx    pop bx    pop si    retcodesg endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;课程设计&quot;&gt;&lt;a href=&quot;#课程设计&quot; class=&quot;headerlink&quot; title=&quot;课程设计&quot;&gt;&lt;/a&gt;课程设计&lt;/h1&gt;&lt;p&gt;在整个课程中,我们一共有两个课程设计,编写两个比较综合的程序,这是第一个。任务:将实验7中的power idea公司的数据按</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="汇编" scheme="https://laobameishijia.github.io/tag/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言学习-call和ret指令</title>
    <link href="https://laobameishijia.github.io/2021/10/16/hui-bian-yu-yan-xue-xi-call-he-ret-zhi-ling/"/>
    <id>https://laobameishijia.github.io/2021/10/16/hui-bian-yu-yan-xue-xi-call-he-ret-zhi-ling/</id>
    <published>2021-10-16T09:25:00.000Z</published>
    <updated>2021-11-01T01:54:17.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="call和ret指令"><a href="#call和ret指令" class="headerlink" title="call和ret指令"></a>call和ret指令</h1><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211016111954.png" alt="思维导图"></p><p>关于使用栈来传递参数并用ret返回的实际例子还是需要多看才行。</p><h2 id="综合实验"><a href="#综合实验" class="headerlink" title="综合实验"></a>综合实验</h2><h3 id="显示字符串"><a href="#显示字符串" class="headerlink" title="显示字符串"></a>显示字符串</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">名称：show_str功能：在指定的位置,用指定的颜色,显示一个用0结束的字符串参数：dh 行号(0-24), dl 列号 0-79, cl颜色, ds:si指向字符串的首地址返回: 无应用举例：在屏幕的8行3列,用绿色显示出data段中的字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codedata segment    db 'Welcome to masm!',0data endscode segmentstart:    mov dh,8    mov dl,3    mov cl,2    mov ax,data    mov ds,ax    mov si,0    call show_str        mov ax,4c00h    int 21hshow_str:    push es    push bp    push bx    mov ax,0B800H    mov es,ax    ;找行号对应的内存地址    mov al,160    mul dh    mov bp,ax    sub bp,160    ;找列对应的内存地址    mov al,2    mul dl    mov di,ax    sub di,2    ;把颜色转移一下    mov bl,cl    push cxs:     mov cl,ds:[si]    mov ch,0    jcxz ok    mov es:[bp+di],cl    mov es:[bp+di+1],bl    add di,2    add si,1    jmp short sok:    pop cx    pop bx    pop bp    pop es    retcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211016112701.png" alt="显示字符串"></p><h3 id="解决除法溢出的问题"><a href="#解决除法溢出的问题" class="headerlink" title="解决除法溢出的问题"></a>解决除法溢出的问题</h3><p>用div指令做出发的时候可能产生除法溢出,比如:1000000/10就不能用div指令来算</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">名称：divdw功能：进行不会产生溢出的除法运算,被除数为dword,除数为word.结果为dword参数: ax dword的低16位 | dx dword高16位 | cx除数返回: dx 结果的高16位, ax 结果的低16位, cx 余数应用举例：计算 1000000/10(F4240H/0AH)结果: dx = 0001H  ax = 86A0H cx = 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codesgdatasg segmentdatasg endscodesg segmentstart:    mov ax,4240H    mov dx,000FH    mov cx,0AH    call divdw    mov ax,4c00h    int 21h;这里面就是因为 div 被除数默认放在ax | dx(高)和ax(低)中,所以比较麻烦;除数可以放在寄存器里也可以放在内存单元里，有8/16两种, 8-AL商 AH余数 || 16-AX商 DX余数;再就是因为数据运算要符合相同的类型,同为16或同为8,在寄存器里面换来换去的就比较麻烦divdw:    push ax    mov ax,dx    div cl    mov bl,al    mov bh,00H    mov al,ah    mov ah,00H;bx保留商,ax保留余数    pop si    mov dx,si    mov dx,ax    mov ax,si    div cx;32/16 ax余数,dx商    mov si,bx    mov bx,dx    mov dx,si    mov cx,bx    retcodesg endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行截图-1"><a href="#运行截图-1" class="headerlink" title="运行截图"></a>运行截图</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211016113513.png" alt="解决除法溢出的问题"></p><h3 id="数值显示"><a href="#数值显示" class="headerlink" title="数值显示"></a>数值显示</h3><p>将12666以字符串的形式显示到显示器上</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">名称：dtoc功能：将word型数据转变为十进制的字符串,字符串以0为结尾符参数：ax word型数据    ds:si指向字符串的首地址返回：无应用举例: 将12666以十进制的形式在屏幕的8行3列,用绿色显示出来<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="改进前代码"><a href="#改进前代码" class="headerlink" title="改进前代码"></a>改进前代码</h4><p>改进前,主要是利用在内存中的位置,来对字符串进行逆向的输出。因为算余数的话,顺序是66621得倒过来才行</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:code,ds:datadata segment    db 10 dup(0)data endscode segmentstart:    mov ax,12666    mov bx,data    mov ds,bx    mov si,0    call dtoc        mov dh,8    mov dl,3    mov cl,2    call show_str    mov ax,4c00h    int 21hdtoc:    mov dx,00    mov bh,00    mov bl,10;感觉逻辑没问题啊,商越界了 得用32/16的    div bx ;为什么会在这里卡住呢,感觉像是无限循环？？？    mov ch,00h    mov cl,dl    jcxz ok    add byte ptr cx,0030H    mov ds:[si],cx    inc si    jmp dtocok:    ;也不是不能操作栈,在之前push进去的,在这里都pop出来就不会有问题,要不然回影响ret指令pop IP    ;后面你可以再试试,这个程序还是有问题    sub si,1;运行完之后si=5,然而ds[si]此时刚好是0,所以你得减去个1才行    retshow_str:    push es    push bp    push bx    mov ax,0B800H    mov es,ax    ;找行号对应的内存地址    mov ah,00    mov al,160    mul dh    mov bp,ax    sub bp,160    ;找列对应的内存地址    mov ah,00    mov al,2    mul dl    mov di,ax    sub di,2    ;把颜色转移一下    mov bl,cl    push cxs:     mov cl,ds:[si]    mov ch,0    jcxz ok1    mov es:[bp+di],cl    mov es:[bp+di+1],bl    add di,2    sub si,1    jmp short sok1:    pop cx    pop bx    pop bp    pop es    ret        code endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="改进后代码"><a href="#改进后代码" class="headerlink" title="改进后代码"></a>改进后代码</h4><p>改进之后,利用了栈的特性,先将算出来的余数入栈,然后再出栈写到内存里.这样就刚好倒过来了。不过需要注意的是,<code>在子程序中push进去的,在ret之前都要pop出来哦！</code></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:code,ds:datadata segment    db 10 dup(0)data endscode segmentstart:    mov ax,12666    mov bx,data    mov ds,bx    mov si,0    call dtoc        mov dh,8    mov dl,3    mov cl,2    call show_str    mov ax,4c00h    int 21hdtoc:    mov dx,00    mov bh,00    mov bl,10;感觉逻辑没问题啊,商越界了 得用32/16的    div bx ;为什么会在这里卡住呢,感觉像是无限循环？？？    mov ch,00h    mov cl,dl    jcxz ok    add byte ptr cx,0030H    mov ds:[si],cx    inc si    jmp dtocok:    ;也不是不能操作栈,在之前push进去的,在这里都pop出来就不会有问题,要不然回影响ret指令pop IP    ;后面你可以再试试,这个程序还是有问题    sub si,1;运行完之后si=5,然而ds[si]此时刚好是0,所以你得减去个1才行    retshow_str:    push es    push bp    push bx    mov ax,0B800H    mov es,ax    ;找行号对应的内存地址    mov ah,00    mov al,160    mul dh    mov bp,ax    sub bp,160    ;找列对应的内存地址    mov ah,00    mov al,2    mul dl    mov di,ax    sub di,2    ;把颜色转移一下    mov bl,cl    push cxs:     mov cl,ds:[si]    mov ch,0    jcxz ok1    mov es:[bp+di],cl    mov es:[bp+di+1],bl    add di,2    sub si,1    jmp short sok1:    pop cx    pop bx    pop bp    pop es    ret        code endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行截图-2"><a href="#运行截图-2" class="headerlink" title="运行截图"></a>运行截图</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211016114256.png" alt="数值显示"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;call和ret指令&quot;&gt;&lt;a href=&quot;#call和ret指令&quot; class=&quot;headerlink&quot; title=&quot;call和ret指令&quot;&gt;&lt;/a&gt;call和ret指令&lt;/h1&gt;&lt;h2 id=&quot;思维导图&quot;&gt;&lt;a href=&quot;#思维导图&quot; class=&quot;head</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="汇编" scheme="https://laobameishijia.github.io/tag/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
</feed>
