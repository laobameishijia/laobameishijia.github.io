<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>老叭美食家</title>
  
  <subtitle>永远热爱生活</subtitle>
  <link href="https://laobameishijia.github.io/atom.xml" rel="self"/>
  
  <link href="https://laobameishijia.github.io/"/>
  <updated>2021-12-02T13:19:30.228Z</updated>
  <id>https://laobameishijia.github.io/</id>
  
  <author>
    <name>老叭美食家</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>动漫-进击的巨人</title>
    <link href="https://laobameishijia.github.io/2021/12/01/dong-man-jin-ji-de-ju-ren/"/>
    <id>https://laobameishijia.github.io/2021/12/01/dong-man-jin-ji-de-ju-ren/</id>
    <published>2021-12-01T09:25:00.000Z</published>
    <updated>2021-12-02T13:19:30.228Z</updated>
    
    <content type="html"><![CDATA[<p>本篇是在网上找到的, 自认为相对评价客观而且质量较高的. 原封不动的复制下来的. 即使是看了这篇文章, 仍然还是有很多问题我没有理解. </p><p>作者 杨宸<br><a href="https://www.artforum.com.cn/slant/13455">https://www.artforum.com.cn/slant/13455</a></p><p>一直以来, 我都认为只有文学作品才能达到这种高度. 现在才发现动漫也是文学作品. </p><ul><li><p><input checked="" disabled="" type="checkbox">  什么是决断主义? 什么是心理主义?</p><p>A: 这些应该也是日本动漫作品类型的分类, 也没查到很具体的定义.</p></li><li><p><input checked="" disabled="" type="checkbox">  斯德哥尔摩综合症在现实生活中体现的例子?</p><p>A: 这个感觉一句话概况的很好, <strong>人是可以被驯服的</strong> 人性能承受的恐惧是一条脆弱的底线，人在恐惧、饥饿面前一点点的被奴化，并非不想反抗，只是在特定环境下，失去了反抗的能力以及思维。</p></li><li><p><input checked="" disabled="" type="checkbox">  什么是世界系? 什么是幸存系?</p><p>A: 这两个是动漫作品的分类.<strong>“世界系”</strong> 所描述的作品群的特征是，“以故事主人公（我）和他所牵挂的女主角（你）的二人关系为中心，将小的日常性（你和我）的问题与‘世界的危机’、‘这个世界的终结’等抽象且非日常的大问题直接连接起来，舍弃一切中间具体的（社会性的）说明描写。”<br><strong>“幸存系”</strong> 以在特定战斗空间内发生的“生死斗争”为基本模式，“不战斗就会死”的幸存感弥漫其中，《死亡笔记》（2003-2006）、《反叛的鲁路修》（2006）便是其中的典型。</p></li></ul><p>其实, 我之前理解这部作品想传递的价值观非常简单. 是人类在面对未知世界不断探索的精神, 是在面对危险和内心极大恐惧时咬牙前行的勇气, 是在战争双方残酷战场上闪耀的微茫的人性的光辉, 是为了守护心爱的人奋不顾身的爱情, 是为了保全同胞不惜牺牲自己的友情. 结果, 作者却在第四季,一个接一个的打破了我之前想象好的所有的价值观. </p><ul><li>人类并没有灭绝. 反倒是壁内的各位被洗脑之后, 赶到了一个岛上自己封闭. 因为之前残暴的历史, 至今被人们甚至是自己的同胞视为恶魔.被无情的当作工具.</li><li>三笠和艾伦好像是个悲剧. 艾伦居然在说, 三笠是简单的把自己视为要守护的主人. 这一点真的是我最不能接受的. 那个曾经为了家人和朋友战斗的高大形象, 瞬间崩塌. 最后还让三笠等自己个十年?, 撒小孩子脾气. 真是~~. 无数次的保护, 换来的难道只是自己心爱的人说自己只是个奴隶? 如果预料到这, 艾伦还不如早点死了.</li><li>曾经调查军团各位战友的慷慨赴死到底是为了什么? 他们自认为是为了人类的生存事业而死, 但到最后换来是发动地鸣毁灭世界. 那么多人的牺牲, 在我看来,毫无意义.先是被始祖巨人洗脑, 再后来是被艾伦戏耍. 这难道就是棋子吗?</li><li>还有就像是傻子一样的艾伦, 最开始是因为自己妈妈被巨人吃掉, 到后来是因为他自己控制巨人把自己妈妈吃掉. 我真醉了………</li></ul><h1 id="进击的巨人"><a href="#进击的巨人" class="headerlink" title="进击的巨人"></a>进击的巨人</h1><p>致2000年后的你<br>2021.07.17 • 杨宸论《进击的巨人》结局为何失败</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211201110133.png" alt="《进击的巨人》TV版最终季剧照，2021"></p><p>漫画《进击的巨人》于4月9日完结后，关于大结局的讨伐之声便不绝于耳。神剧烂尾、结局崩坏是大部分读者给出的评价。诚然如此，不过，在大结局造成的创伤后应激反应平复之后，更值得追问的问题也许是，《巨人》的结局为何“失败”？或者说，在何种意义上，《巨人》的结局“失败”了？本文希望回到《巨人》的整体创作以及它侧身其中之特定的历史与现实，以穿透这一“失败”之本质，这也是今天我们还要谈论这部漫画的意义所在。</p><p>2009年，23岁的年轻人谏山创（Isayama Hajime）开始连载他的出道作《进击的巨人》，四年之后，《巨人》迎来了动画化，并迅速成为当季霸主，人气一路飞飙。到2020年，《巨人》漫画已经售出超9000万册。对于《巨人》的成功，Wit Studio动画公司的精良制作和泽野弘之（Sawano Hiroyuki）那磅礴悲壮的配乐功不可没，但更重要的是，谏山创为《巨人》打造的“世界”及萦绕其上的“谜团”。</p><p>一言蔽之，《进击的巨人》讲述了如同家畜般被“豢养”在三堵巨大高墙之内的人类与墙外不断捕食人类的巨人相抗争的故事。在“那一天”，因玛丽亚之墙被铠甲巨人和超大型巨人攻破，主角艾伦·耶格尔眼睁睁看着自己的母亲被巨人吞噬。人类家园沦丧，悲愤的艾伦发誓“要把它们全部驱逐出去，一匹不留”，而后他与青梅竹马的三笠、好友阿明加入了以探索墙外世界、与巨人斗争为己任的调查兵团。整个故事便围绕着艾伦及其所属的调查兵团展开。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211201110308.png" alt="《进击的巨人》TV版第一季剧照，2013"></p><p>乍一看，《巨人》几乎集齐了既往少年漫画必备的所有要素：庞大的世界观、中二感爆棚的主角、精彩绝伦的战斗场面（得益于“立体机动装置”带来的滑翔战斗模式）、伙伴间的羁绊……而且随着剧情展开，观众发现主角的身世没那么简单——“天选之子”，这更是少年漫主角的“标配”。然而，使《巨人》与此前《火影忍者》、《死神》、《海贼王》等主流少年漫区别开来的，却是其剧情的“残酷”。</p><p>和同时期引发热潮的《权力的游戏》类似，在《巨人》中，人命如草芥，死亡可以随时降临到任何人头上，而且是以极其残酷的方式。你认为可能是重要人物的角色，或许下一秒就被巨人掰断了脊骨，一口口嚼碎。《巨人》非常着力于刻画人类面对巨人时的恐惧，并以死前狰狞扭曲的表情来展现这种残酷之直观。即便是带领调查兵团取得诸多战果的大英雄埃尔文团长，在主动迎向猿巨人而英勇赴死的那一刻，脸上仍然非常明显地流露出了对于死亡的惧怖。《巨人》的生存哲学正是建立在这种死亡的直观之上：“<strong>那些勇敢的死者、那些可悲的死者，我们之所以能这么想，正是因为我们是生者。我们会死在这里，将意义托付给下一个生者，这就是与这个残酷世界抗争的唯一手段！</strong>”</p><p>在这个意义上，《巨人》可以被归入日本评论家宇野常宽（Uno Tsunehiro）所称的“幸存系”作品序列之中。宇野常宽认为，在2001年前后，日本出现了一种新的故事类型，这类故事以在特定战斗空间内发生的“生死斗争”为基本模式，“不战斗就会死”的幸存感弥漫其中，《死亡笔记》（2003-2006）、《反叛的鲁路修》（2006）便是其中的典型。因为1999年高见广春（Takami Koshun）的小说《大逃杀》可以被视为其先驱，所以这类故事又被称为“大逃杀系”。幸存系/大逃杀系的兴起在日本国内有着明确的现实动因：为了应对泡沫经济破灭后的“平成不况”，日本首相小泉纯一郎在21世纪初开始进行新自由主义的结构性改革。小泉改革的风格颇类当年的撒切尔夫人，力倡小政府，推行私有化。其中最著名的事件，便是小泉不惜冒巨大政治风险解散众议院也要将日本的邮政系统民营化。如此一来，国民生活被一股脑推给市场，虽然经济逐步复苏，但贫富差距也随之越拉越大。置身于这般弱肉强食的残酷市场竞争机制之中，年轻人可以无忧躺在床上看动漫打游戏当个家里蹲御宅族的日子一去不返，“不战斗/奋斗就会死”成为了年轻人的紧箍咒。用我们熟悉的话来说，2001年之后的日本年轻人，已经不再能够悠闲地躺平，只得参与到疯狂的内卷之中。</p><p>日本的情况其实内在于晚期资本主义的全球化进程之中。这也是为什么作为全球化进程副产品的9·11恐怖袭击可以被宇野常宽指认为“大逃杀”的现实开端。于是，正如麦克弗森（C. B. Macpherson）曾提示我们说，霍布斯提出“一切人对一切人的战争”的自然状态不过是对资本主义早期市场的隐喻那样，作为晚期资本主义文化逻辑的外显，一切人对一切人的“大逃杀”兴起了。</p><p>《巨人》无疑是这一思路的延续，然而，它还提供了更为激动人心的东西——它许诺了一个“外部”，一个“墙外的世界”，作为退离大逃杀状态的出口。而对这个出口的探索则与对“世界之谜”的解答相绑定：“为什么那天妈妈会被巨人吃掉”？巨人到底从何而来？墙外的世界是什么样子？……《巨人》最核心的价值——“进击”的“自由”——便是基于对这个既作为解释又作为解决的“墙外世界”之信念，所有的幸福和崇高，皆来源于此：那是得以理解我们为何不得不大逃杀的自由，那是可以免于大逃杀之恐怖残酷的自由，那是不必经历大逃杀也能昂首挺胸堂堂正正地“生活”下去的自由。</p><p>怀揣着这样的自由之信念，《巨人》在漫画第91话/动画最终季迎来了其最大的转折。</p><p>“海那边有自由。”</p><p>“不，海那边有敌人。”</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211201110345.png" alt="《进击的巨人》TV版第一季和最终季主海报对比：左边第一季海报上是艾伦面对袭来的铠甲巨人（莱纳），右边最终季海报是马莱战士莱纳面对袭来的进击的巨人（艾伦），视角完全反转.​"></p><p>在进入最后的“马莱篇”之前，巨人之谜已大半揭开：所谓巨人全是由与恶魔签订契约的尤弥尔之子民艾尔迪亚人变化而来。艾尔迪亚人曾凭借巨人之力屠戮过全世界。但到初代雷伊斯王时，由于厌倦了战争，王带领艾尔迪亚人退守帕拉迪岛，立下不战之誓，筑起三道高墙，消除民众记忆，从此与世隔绝。而另一部分滞留在大陆的艾尔迪亚人，则在大国马莱的统治下成为劣等民族，要么被用作无脑的战争怪兽，要么凭自己的努力成为马莱的战士，赢得荣誉马莱人的身份。作为惩罚，马莱不断将艾尔迪亚人流放到帕拉迪岛变成只会吞噬人类的无脑巨人，而为了夺取艾尔迪亚人掌握的始祖巨人之力以及帕拉迪岛上的资源，马莱派出战斗小队破坏玛丽亚之墙，则引发了所有的故事。</p><p>于是，在离开帕拉迪岛进入马莱篇之后，谏山创开始“自掘坟墓”，将作为《巨人》核心的自由之绝对价值给相对化了。这种相对化表现在叙述技法上，是从此前的艾尔迪亚视角转变为了（或曰增加了）马莱视角，而在主题上则是把“世界之谜”具体化为了“政治之谜”。</p><p>此前动不动就大喊大叫、情感波动巨大的中二主角艾伦，到了最终季“断裂”般地变为沉默寡言、高深莫测、独断专行的艾主席。他不动声色地推行着自己的隐秘计划，甚至不惜发动“地鸣”，让众多超大型巨人涉海而过，屠戮马莱无辜百姓。此前，观众都是通过艾伦的艾尔迪亚视角来观看巨人以及望向“墙外世界”，《巨人》的自由正是建立在这样的绝对观视之上。而到这里，无法进入艾主席视角的观众，只得通过此前的“敌人”马莱人的视角来观看似乎已然化身为恶魔的艾主席。在这样自反性的二阶观察之下，自由的绝对价值被瓦解了。调查兵团诸士兵的“死”开始变得不再那么崇高，甚至变得“可笑”，因为他们曾被认为是为了人类而牺牲，到头来却发现，他们不过是为两个民族/种族的继续相互屠戮作了炮灰。</p><p>而这种视角转变的基础，则是《巨人》通过引入民族国家议题，将对“世界真相”的本体论探寻降落为了对“世界难题”的政治性解决。这个难题首先在于：<strong>如果一个民族/种族可能会对另一个民族/种族构成威胁，那么如何处理这二者之间的关系？</strong> 该难题还有一个隐含的问题：<strong>如何处理这两个民族/种族之间的历史债务？</strong> 在此基础上，《巨人》通过“某族人可以把自己变为巨人”这样一个科幻般的设定，把这个难题推到了极端，构成了一个“政治绝境”：<strong>如果一个民族/种族的存在必定会对另一个民族/种族造成伤害，如何处理它们之间的关系？</strong> 在这种落实之下，曾经作为绝对独立的主体之自我实现的问题，立马被转变为了相对的主体间性问题，而且它还被牢牢地束缚在政治性的关系（甚至是你死我活的生死斗争）之中。于是，“世界”被瓦解了，取而代之的是民族国家的视域。</p><p>不过，这种“自掘坟墓”非但没有将《巨人》葬埋，反而开掘出了《巨人》在深度上超越以往同类型作品的可能性。</p><p>按照宇野常宽的论说，<strong>幸存系直接联系着决断主义的倾向</strong>，这是相对于1990年代“世界系”作品的心理主义倾向而言的。由日本评论家东浩纪（Azuma Hiroki）提出的世界系乃是一种越过社会、国家、历史，将自我与世界直接勾连的叙事想象力。这里的世界，用社会学家宫台真司（Miyadai Shinji）的话说，<strong>并非处于自我意识掌控之外的那个现实世界，而是被自我意识所标记的“世界”</strong>。换言之，<strong>世界系故事通过为自我所标记的“世界”来对自我进行无条件地认可，这样一种循环论证使世界系的主体获得了一种心理主义的完足感</strong>。典型代表便是1995年由庵野秀明监督的TV版动画《新世纪福音战士》（EVA）。宫台真司认为，EVA中世界之谜是作为自我之谜而存在的，对世界之谜的解决（人类补完）由是通过对自我之谜的解决（主人公碇真嗣内心的补完）来完成。因此，EVA的世界系实际上标记了一个“自我的时代”。</p><p>当然，<strong>世界系</strong>的出现本身也是晚期资本主义的文化逻辑在日本具体化的结果。在1990年代平成不况和奥姆真理教事件的冲击之下，其时的日本年轻人如同EVA的主人公碇真嗣一般，抱持着对父亲/社会的极大不信任感，并且意识到，在这个宏大叙事已然崩解的社会中，做出任何决断必然会伤害到他人，于是他们宁愿蜷缩在自己的岛宇宙之中，通过做一个躺平的死宅来实现某种抗拒。然而，如前文所述，2001年之后，这样的躺平不再可能。<strong>年轻人不得不在大逃杀之中成为一个决断主义者</strong>。不过，正如宇野常宽所提示的，决断主义并非对世界系的否定，毋宁说，它恰恰是接受了世界系的前提：<strong>做出决断，必定会伤害他人。但仍然要做出决断。这是被抛入残酷市场竞争机制之后的必然选择。每个人都选择自己想要尊奉的“神”，并通过将自己之神赋予超越异己诸神的普遍性来合理化自己的决断。但是这种普遍性只是虚妄。</strong> 换言之， <strong>决断主义者拥有的只是相对的真理，然而它被要求作为一种绝对真理来进行决断，由是伤害（对其他相对真理/小叙事的排斥）便不可避免。</strong> 在此基础上，幸存系既包含着决断主义，也包含着对互相伤害的决断主义之克服。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211201110628.png" alt="《死亡笔记》动画剧照，2006-2007."></p><p>但是怎么克服呢？回到心理主义的世界系吗？宇野常宽用大逃杀系作品《死亡笔记》的主人公夜神月来象征决断主义，并指出——碇真嗣无法阻止夜神月。</p><p>沿着这个思路，我们也许可以将《巨人》在马莱篇开始展开的剧情，视为探寻终结决断主义游戏的尝试。</p><p>前面说过，《巨人》的核心价值建立在对作为解释和解决的“墙外世界”之绝对信念之上，绝对信念导出了绝对自由。然而这种赖以建立“《巨人》大厦”的基础价值，在“墙外世界”被具象化之后，便被解释为了一种相对自由。换言之，决断主义主张的绝对价值被相对化了。通常的少年动漫，往往以几个稳固的核心价值（比如，正义、善良、自由、友爱、和平）为基础，并在此基础上展开主人公的成长故事，主人公的成长同时构成对这些作为基础的先验价值的习得和实践过程，因此无论故事世界如何被颠倒、角色们怎么打得天花乱坠，都不会动摇作品基础的核心价值，反而会强化它。这种教育主义的风格在少年动漫中比比皆是，《火影忍者》、《死神》、《海贼王》皆如此，更低龄向的作品更是以一种中世纪道德剧的作风将核心价值与人物进行直接对应（比如在《数码宝贝》中，八神太一对应勇气、石田大和对应友情等）。然而，在《巨人》这里，作为作品基础的核心价值被动摇了，这正是《巨人》超越此前教育主义少年动漫的地方：将自足的幻想世界祛魅化为一种决断主义并使之相对化。</p><p>但决断主义并不惧怕相对化。毋宁说，决断主义未能自觉的实质在于： <strong>重要的是决断本身，而非决断的内容。因此决断会给他人带来的伤害才根本不在考虑之列。</strong> 所以，即便使之相对化，把“未能自觉”变为“自觉”，仍然无法改变决断主义重在“决断”的立场。那么问题就变成了，通过怎样的相对化来终结决断主义的基础：大逃杀。</p><p>《巨人》的回答是：把它落实为政治问题。落实为政治问题，既是《巨人》将“解释”相对化的方法，也是它探索“解决”的方向。它通过引入两个民族国家（艾尔迪亚与马莱）以巨人之力（仿佛巨量的核武器）为核心的历史与当前的纷争，打开了一个朝向现实世界的窗口，通过这个窗口，当下的现实议题：历史债务问题、种族问题、民族国家问题开始涌入。《巨人》从对“外部”的追求开始，到后来发现不存在“外部”，“外部”就是“内部”，这使得它将问题变成了“外部”的实现，必须通过“内部”来完成。换言之，《巨人》将对大逃杀的解决放到了一个政治框架之中。<strong>这意味着要完成对决断主义的终结，必须要实现对历史债务与现实政治的覆写。</strong></p><p><strong>但这是一部漫画能完成的事情吗？</strong></p><p>《巨人》所能做的只是将作为决断主义者的艾伦摆到了一个主权者的位置上，并通过设定打开窗口让无法以“爽文”方式轻松解决的现实政治议题涌入。在这个意义上，艾伦不是鲁路修，艾伦比鲁路修难多了。</p><p>在终局之前，《巨人》最大的意义在于做出了这样一种努力的“姿态”：在这里，现实不是作为隐喻，而是作为无法消化的硬核，作为必须填补的空白，作为实在界朝向亚文化的想象力崩塌，而亚文化的想象力必须以某种方式“接住”它。</p><p>这就是《巨人》结局不失败的重要条件：以至少说得过去的方式，“接住”它，“解决”它。解决方式有上策有下策，要么谏山创确实聪明绝顶，想出了政治家们都无法想出的解决现实政治问题的方法，要么学习《反叛的鲁路修》和《守望者》，通过让主人公背负罪恶构造一种负面的共同体来维持脆弱的和平，要么利用关于巨人之力的剧情设定，在“巨人之力”这一“解释”之内完成对现实问题的想象性解决。总的来说，两条路：要么老实解决“政治之谜”，要么将“政治之谜”重新还原为“世界之谜”。无论好坏，在这两条路上，大致都能获得一个说得过去的结果。</p><p><strong>但《巨人》的失败就在于：谏山创没有选择任何一条解决路径，而径直跑回心理主义了！</strong></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211201111015.png" alt="《进击的巨人》TV版最终季剧照，2021."></p><p>最终话《朝向那棵树》中，与艾伦青梅竹马的三笠斩下了决断主义主权者艾伦的头颅。一切真相揭开：主权者艾伦在马莱篇中对三笠冷脸恶语相加，到头来面具拿下，不过是他在傲娇，“不要啊！那种事情不要啊！我希望三笠在我死之后还想着我，至少持续十年吧！” <strong>而他悍然发动地鸣灭世计划，不是要解决什么政治问题，只是希望三笠、阿明等好友通过阻止他来留下好名声，成为世界的英雄，就是说，他屠戮生灵，就是为了给好友留笔遗产，为了对好友的“爱”。</strong> 这一切，都发生在他拥有了看到过去未来的能力之后，而这一能力 <strong>非但没有让他拥有相对于过去未来因果律的自由，反而使得他成为了这一因果律的奴隶，他朝向一个既定的结果，按部就班地“自由”迈去。</strong>在这一过程中，作为“世界之谜”的巨人始祖尤弥尔与巨人之力被以一个长达两千年的<strong>斯德哥尔摩综合征</strong>(百度百科讲的很详细)之爱轻易打发掉。在这个意义上，艾伦与尤弥尔构成镜像，他们都透过“爱”来获得某种“解脱”。</p><p>谏山创曾言明受到过1980年代的美国漫画《守望者》（Watchmen）的影响。在《守望者》的结局中，曼哈顿博士通过背负屠杀各国人民的罪恶，成为世界共同的敌人来实现美苏的和解，这一制造负面共同体的解决方案，带有明显的冷战色彩。但这种解决方案在后世仍然不断被借用。大逃杀系作品《反叛的鲁路修》的结局便是如此。但《巨人》明显地认识到了这种解决的虚妄，但它也想不出或者不愿去想出一个解决。所以它干脆撒手不管回到自我之中。就此看来，碇真嗣并不用去阻止夜神月，面具揭开，碇真嗣就是夜神月。</p><p><strong>心理主义者通过解决自我之谜来解决世界之谜，决断主义者通过（试图）解决世界之谜来解决自我之谜，而伪装成决断主义者的心理主义者则比较实在，世界的归世界，自己的归自己，我只管活我的，世界，去他妈的。</strong></p><p><strong>在这一点上，《巨人》的结局失败了，它的失败在于承认了我们在现实结构面前的绝对无能。但在另一点上，它或许又成功了，它意识到无论如何我们都无法解决“世界之谜”，我们能解决的只有自己</strong>。于是，在《巨人》崩坏的结局处，我们似乎能看到对一种友爱的小共同体的倡导。而这恰是后来大火的《鬼灭之刃》等动画的基础。但这能构成一种新的解决方案吗？</p><p>宫台真司在1990年代曾提出“<strong>永无终结的日常</strong>”这一说法，后来被广泛引用，它同时构成了对无法期待一种变革的消费社会之平静的绝望的象喻：<strong>只要某种基础性的结构仍然继续存续，那么即便经历了大地震和核灾难，“日常”也一样永无终结。</strong>而这种基础性的结构，正是《巨人》所不愿面对的那个带来了大逃杀的“世界”。</p><p>1993年，日本漫画家冈崎京子（Okazaki Kyoko）在其作品《河畔》中借用威廉·吉布森“平坦的战场”的说法，来描述“永无终结的日常”的感受：“从一开始就丧失一切的孩子们。已经拥有一切，而为这些事必须放弃一切的孩子们。无力的王子与公主。没有深度、一片平坦像是舞台背景般的战场。他/她们绝不会有什么波涛汹涌的人生，只是持续驻足在短暂的永恒当中。”</p><p>如今，基础结构仍未改变，但“平坦的战场”似乎消失了。</p><p>《巨人》以“致2000年后的你”为开始，而它的结局则是在告诉公元2000年之后的你：</p><p><strong>我们知道我们只得不停地战斗，只是我们不知道我们的“战场”究竟位于何处。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本篇是在网上找到的, 自认为相对评价客观而且质量较高的. 原封不动的复制下来的. 即使是看了这篇文章, 仍然还是有很多问题我没有理解. &lt;/p&gt;
&lt;p&gt;作者 杨宸&lt;br&gt;&lt;a href=&quot;https://www.artforum.com.cn/slant/13455&quot;&gt;ht</summary>
      
    
    
    
    <category term="动漫" scheme="https://laobameishijia.github.io/category/%E5%8A%A8%E6%BC%AB/"/>
    
    
    <category term="进击的巨人" scheme="https://laobameishijia.github.io/tag/%E8%BF%9B%E5%87%BB%E7%9A%84%E5%B7%A8%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>毕设-Fuzz-5</title>
    <link href="https://laobameishijia.github.io/2021/11/30/bi-she-fuzz-5/"/>
    <id>https://laobameishijia.github.io/2021/11/30/bi-she-fuzz-5/</id>
    <published>2021-11-30T09:25:00.000Z</published>
    <updated>2021-12-02T13:19:30.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Notebook阅读"><a href="#Notebook阅读" class="headerlink" title="Notebook阅读"></a>Notebook阅读</h1><h2 id="Grammars"><a href="#Grammars" class="headerlink" title="Grammars"></a>Grammars</h2><p>首先就是要讲, 为什么我们需要语法来规范测试数据的生成. 在之前的讲解中, 相比我们也已经很清楚了, 依靠随机生成的测试数据几乎没有几个符合程序输入(假设程序对输入的数据有严格的限制的话). <strong>为了提高生成测试数据的效率, 必须要采用语法对生成测试数据的过程进行限制.</strong></p><blockquote><p>Compilers and Web browsers, of course, are not only domains where grammars are needed for testing, but also domains where grammars are well-known. Our claim in this book is that grammars can be used to generate almost any input, and our aim is to empower you to do precisely that.–浏览器和编译器是比较常见的需要用语法进行规范测试的两种领域. 但是我们的目的是要用语法精准的生成任何你想要的输入数据.</p></blockquote><h3 id="如何构建语法"><a href="#如何构建语法" class="headerlink" title="如何构建语法"></a>如何构建语法</h3><p>语法是一个非终止符和代替扩张list的一个映射<br><strong>A grammar is defined as a mapping of nonterminal symbols to lists of alternative expansions</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> US_PHONE_GRAMMAR<span class="token punctuation">:</span> Grammar <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">>></span><span class="token operator">></span>     <span class="token string">"&lt;start>"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;phone-number>"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span>     <span class="token string">"&lt;phone-number>"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"(&lt;area>)&lt;exchange>-&lt;line>"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span>     <span class="token string">"&lt;area>"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;lead-digit>&lt;digit>&lt;digit>"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span>     <span class="token string">"&lt;exchange>"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;lead-digit>&lt;digit>&lt;digit>"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span>     <span class="token string">"&lt;line>"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;digit>&lt;digit>&lt;digit>&lt;digit>"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span>     <span class="token string">"&lt;lead-digit>"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">,</span> <span class="token string">"9"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">>></span><span class="token operator">></span>     <span class="token string">"&lt;digit>"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"0"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">,</span> <span class="token string">"9"</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据语法生成数据就是首先从<code>start</code>标签开始, 将<code>start</code>标签用后面的<code>phone-number</code>替换–(<strong>如果start对应多个非终止符号的话, 那就是随机挑一个非终止符号进行替换</strong>), 再用<code>(&lt;area&gt;)&lt;exchange&gt;-&lt;line&gt;</code>替换<code>phone-number</code>(<strong>如果phone-number对应多个非终止符号的话, 那就是随机挑一个非终止符号进行替换</strong>), 重复操作, 直到后面没有非终止符号为止. (<strong>当然, 像digit这种并没有对应非终止符号的, 也是同样随机挑一个就行</strong>)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span>simple_grammar_fuzzer<span class="token punctuation">(</span>US_PHONE_GRAMMAR<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'(692)449-5179'</span><span class="token punctuation">,</span> <span class="token string">'(519)230-7422'</span><span class="token punctuation">,</span> <span class="token string">'(613)761-0853'</span><span class="token punctuation">,</span> <span class="token string">'(979)881-3858'</span><span class="token punctuation">,</span> <span class="token string">'(810)914-5475'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大体的思路上就是这些, 后面讲述的内容. 是<strong>如何更好更快地构建语法</strong>, 因为不可能说所有的语法规则都依靠人工构建. 需要让语法变得非常方便添加\方便加入一些更符合输入数据的限制.</p><h3 id="Lessons-Learned"><a href="#Lessons-Learned" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h3><ul><li>Grammars are powerful tools to express and produce syntactically valid inputs.</li><li>Inputs produced from grammars can be used as is, or <strong>used as seeds for mutation-based fuzzing.</strong></li><li>Grammars can be extended with character classes and operators to make writing easier.</li></ul><h3 id="py高阶用法"><a href="#py高阶用法" class="headerlink" title="py高阶用法"></a>py高阶用法</h3><h4 id="1-zip-longest"><a href="#1-zip-longest" class="headerlink" title="1 zip_longest"></a>1 zip_longest</h4><p>1、zip_longest需要导入itertools模块，且使用的时候需要指定一个填充值fillvalue。</p><p>2、当有可迭代对象遍历完，但其他对象还没有的时候，缺少的相应元素就会使用填充值进行填充。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> itertools <span class="token keyword">import</span> zip_longesta <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> num1<span class="token punctuation">,</span> num2 <span class="token keyword">in</span> zip_longest<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> fillvalue<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token comment"># 0 1</span><span class="token comment"># 1 2</span><span class="token comment"># 2 3</span><span class="token comment"># 3 4</span><span class="token comment"># 4 5</span><span class="token comment"># 5 6</span><span class="token comment"># 6 7</span><span class="token comment"># 7 8</span><span class="token comment"># 8 -1</span><span class="token comment"># 9 -1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-kwargs"><a href="#2-kwargs" class="headerlink" title="2 **kwargs"></a>2 **kwargs</h4><p><code>**kwargs</code> 允许你将不定长度的键值对, 作为参数传递给一个函数。 如果你想要在一个函数里处理带名字的参数, 你应该使用<code>**kwargs</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">greet_me</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> kwargs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125; == &#123;1&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> greet_me<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"yasoob"</span><span class="token punctuation">)</span>name <span class="token operator">==</span> yasoob<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-作用域和命名空间"><a href="#3-作用域和命名空间" class="headerlink" title="3 作用域和命名空间"></a>3 作用域和命名空间</h4><p>详见菜鸟教程 <a href="https://www.runoob.com/python3/python3-namespace-scope.html">https://www.runoob.com/python3/python3-namespace-scope.html</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">reachable_nonterminals</span><span class="token punctuation">(</span>grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">,</span>                           start_symbol<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> START_SYMBOL<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Set<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    reachable <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_find_reachable_nonterminals</span><span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> symbol<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">nonlocal</span> reachable <span class="token comment"># 这里用到了nonlocal</span>        reachable<span class="token punctuation">.</span>add<span class="token punctuation">(</span>symbol<span class="token punctuation">)</span>        <span class="token keyword">for</span> expansion <span class="token keyword">in</span> grammar<span class="token punctuation">.</span>get<span class="token punctuation">(</span>symbol<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> nonterminal <span class="token keyword">in</span> nonterminals<span class="token punctuation">(</span>expansion<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> nonterminal <span class="token keyword">not</span> <span class="token keyword">in</span> reachable<span class="token punctuation">:</span>                    _find_reachable_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> nonterminal<span class="token punctuation">)</span>    _find_reachable_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> start_symbol<span class="token punctuation">)</span>    <span class="token keyword">return</span> reachable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-set"><a href="#4-set" class="headerlink" title="4 set()"></a>4 set()</h4><p>set() 函数创建一个无序不重复元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>x <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'runoob'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'google'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">,</span> y<span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 重复的被删除</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">&amp;</span> y         <span class="token comment"># 交集</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'o'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">|</span> y         <span class="token comment"># 并集</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">-</span> y         <span class="token comment"># 差集</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-typing-Optional"><a href="#5-typing-Optional" class="headerlink" title="5 typing.Optional"></a>5 typing.Optional</h4><p><a href="https://blog.csdn.net/qq_44683653/article/details/108990873#:~:text=Python%20%E5%A4%A9%E7%94%9F%E4%B8%8D%E6%94%AF%E6%8C%81%20Option%20%E7%B1%BB%E5%9E%8B%EF%BC%8C%20typing%20%E6%9C%89%E4%B8%AA%20Optional%20%2C,%5B%20%28int%29%20-%3E%20Any%5D%27%20%28matched%20generic%20type%20%27Optiona">csdn</a></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211202112803.png" alt="typing.Optional"></p><blockquote><p>我觉得这几个函数写的非常好,简洁明了. 有些地方看的不是很懂,看来py的很多高级的用法并没有掌握到.</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>说实在的, 这一部分的思想是比较简单的, 但是在代码实现上, 确实用到了很多之前在写python程序时没有用到的写法,而且从代码书写的思路和简洁性上面来说, 比之前写的代码高了不知道几个档次. 再一次让我感觉到了, 原来写出来的代码可以这么写. 所以我在前面把这些方法都总结了下来, 包括后面的这些代码, 希望以后你可以多多的借鉴.  当然这也只是其中的一部分而已.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">def_used_nonterminals</span><span class="token punctuation">(</span>grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">,</span> start_symbol<span class="token punctuation">:</span>                           <span class="token builtin">str</span> <span class="token operator">=</span> START_SYMBOL<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Tuple<span class="token punctuation">[</span>Optional<span class="token punctuation">[</span>Set<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                                        Optional<span class="token punctuation">[</span>Set<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>       <span class="token triple-quoted-string string">"""Return a pair (`defined_nonterminals`, `used_nonterminals`) in `grammar`.    In case of error, return (`None`, `None`)."""</span>    <span class="token comment"># 这里为什么用元组呢? 是因为元组没有办法被删除嘛?</span>    defined_nonterminals <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    used_nonterminals <span class="token operator">=</span> <span class="token punctuation">&#123;</span>start_symbol<span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> defined_nonterminal <span class="token keyword">in</span> grammar<span class="token punctuation">:</span>        defined_nonterminals<span class="token punctuation">.</span>add<span class="token punctuation">(</span>defined_nonterminal<span class="token punctuation">)</span>        expansions <span class="token operator">=</span> grammar<span class="token punctuation">[</span>defined_nonterminal<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>expansions<span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>defined_nonterminal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": expansion is not a list"</span><span class="token punctuation">,</span>                  <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>expansions<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>defined_nonterminal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": expansion list empty"</span><span class="token punctuation">,</span>                  <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span>        <span class="token keyword">for</span> expansion <span class="token keyword">in</span> expansions<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>expansion<span class="token punctuation">,</span> <span class="token builtin">tuple</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                expansion <span class="token operator">=</span> expansion<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>expansion<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>defined_nonterminal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span>                      <span class="token operator">+</span> <span class="token builtin">repr</span><span class="token punctuation">(</span>expansion<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": not a string"</span><span class="token punctuation">,</span>                      <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span>            <span class="token keyword">for</span> used_nonterminal <span class="token keyword">in</span> nonterminals<span class="token punctuation">(</span>expansion<span class="token punctuation">)</span><span class="token punctuation">:</span>                used_nonterminals<span class="token punctuation">.</span>add<span class="token punctuation">(</span>used_nonterminal<span class="token punctuation">)</span>    <span class="token keyword">return</span> defined_nonterminals<span class="token punctuation">,</span> used_nonterminals<span class="token keyword">def</span> <span class="token function">reachable_nonterminals</span><span class="token punctuation">(</span>grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">,</span>                           start_symbol<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> START_SYMBOL<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Set<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    reachable <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_find_reachable_nonterminals</span><span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> symbol<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">nonlocal</span> reachable        reachable<span class="token punctuation">.</span>add<span class="token punctuation">(</span>symbol<span class="token punctuation">)</span>        <span class="token keyword">for</span> expansion <span class="token keyword">in</span> grammar<span class="token punctuation">.</span>get<span class="token punctuation">(</span>symbol<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> nonterminal <span class="token keyword">in</span> nonterminals<span class="token punctuation">(</span>expansion<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> nonterminal <span class="token keyword">not</span> <span class="token keyword">in</span> reachable<span class="token punctuation">:</span>                    _find_reachable_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> nonterminal<span class="token punctuation">)</span>    _find_reachable_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> start_symbol<span class="token punctuation">)</span>    <span class="token keyword">return</span> reachable<span class="token keyword">def</span> <span class="token function">unreachable_nonterminals</span><span class="token punctuation">(</span>grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">,</span>                             start_symbol<span class="token operator">=</span>START_SYMBOL<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Set<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> grammar<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> reachable_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> start_symbol<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">opts_used</span><span class="token punctuation">(</span>grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Set<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    used_opts <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> symbol <span class="token keyword">in</span> grammar<span class="token punctuation">:</span>        <span class="token keyword">for</span> expansion <span class="token keyword">in</span> grammar<span class="token punctuation">[</span>symbol<span class="token punctuation">]</span><span class="token punctuation">:</span>            used_opts <span class="token operator">|</span><span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>exp_opts<span class="token punctuation">(</span>expansion<span class="token punctuation">)</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> used_opts<span class="token keyword">def</span> <span class="token function">is_valid_grammar</span><span class="token punctuation">(</span>grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">,</span>                     start_symbol<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> START_SYMBOL<span class="token punctuation">,</span>                      supported_opts<span class="token punctuation">:</span> Set<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Check if the given `grammar` is valid.       `start_symbol`: optional start symbol (default: `&lt;start>`)       `supported_opts`: options supported (default: none)"""</span>    defined_nonterminals<span class="token punctuation">,</span> used_nonterminals <span class="token operator">=</span> \        def_used_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> start_symbol<span class="token punctuation">)</span>    <span class="token keyword">if</span> defined_nonterminals <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> used_nonterminals <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token comment"># Do not complain about '&lt;start>' being not used,</span>    <span class="token comment"># even if start_symbol is different</span>    <span class="token keyword">if</span> START_SYMBOL <span class="token keyword">in</span> grammar<span class="token punctuation">:</span>        used_nonterminals<span class="token punctuation">.</span>add<span class="token punctuation">(</span>START_SYMBOL<span class="token punctuation">)</span>    <span class="token keyword">for</span> unused_nonterminal <span class="token keyword">in</span> defined_nonterminals <span class="token operator">-</span> used_nonterminals<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>unused_nonterminal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": defined, but not used"</span><span class="token punctuation">,</span>              <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>    <span class="token keyword">for</span> undefined_nonterminal <span class="token keyword">in</span> used_nonterminals <span class="token operator">-</span> defined_nonterminals<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>undefined_nonterminal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": used, but not defined"</span><span class="token punctuation">,</span>              <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>    <span class="token comment"># Symbols must be reachable either from &lt;start> or given start symbol</span>    unreachable <span class="token operator">=</span> unreachable_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> start_symbol<span class="token punctuation">)</span>    msg_start_symbol <span class="token operator">=</span> start_symbol    <span class="token keyword">if</span> START_SYMBOL <span class="token keyword">in</span> grammar<span class="token punctuation">:</span>        unreachable <span class="token operator">=</span> unreachable <span class="token operator">-</span> \            reachable_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> START_SYMBOL<span class="token punctuation">)</span>        <span class="token keyword">if</span> start_symbol <span class="token operator">!=</span> START_SYMBOL<span class="token punctuation">:</span>            msg_start_symbol <span class="token operator">+=</span> <span class="token string">" or "</span> <span class="token operator">+</span> START_SYMBOL    <span class="token keyword">for</span> unreachable_nonterminal <span class="token keyword">in</span> unreachable<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>unreachable_nonterminal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": unreachable from "</span> <span class="token operator">+</span> msg_start_symbol<span class="token punctuation">,</span>              <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>    used_but_not_supported_opts <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>supported_opts<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        used_but_not_supported_opts <span class="token operator">=</span> opts_used<span class="token punctuation">(</span>            grammar<span class="token punctuation">)</span><span class="token punctuation">.</span>difference<span class="token punctuation">(</span>supported_opts<span class="token punctuation">)</span>        <span class="token keyword">for</span> opt <span class="token keyword">in</span> used_but_not_supported_opts<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>                <span class="token string">"warning: option "</span> <span class="token operator">+</span>                <span class="token builtin">repr</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span> <span class="token operator">+</span>                <span class="token string">" is not supported"</span><span class="token punctuation">,</span>                <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>    <span class="token keyword">return</span> used_nonterminals <span class="token operator">==</span> defined_nonterminals <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>unreachable<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Notebook阅读&quot;&gt;&lt;a href=&quot;#Notebook阅读&quot; class=&quot;headerlink&quot; title=&quot;Notebook阅读&quot;&gt;&lt;/a&gt;Notebook阅读&lt;/h1&gt;&lt;h2 id=&quot;Grammars&quot;&gt;&lt;a href=&quot;#Grammars&quot; cla</summary>
      
    
    
    
    <category term="毕设" scheme="https://laobameishijia.github.io/category/%E6%AF%95%E8%AE%BE/"/>
    
    
    <category term="Fuzz" scheme="https://laobameishijia.github.io/tag/Fuzz/"/>
    
  </entry>
  
  <entry>
    <title>毕设-Fuzz-4</title>
    <link href="https://laobameishijia.github.io/2021/11/27/bi-she-fuzz-4/"/>
    <id>https://laobameishijia.github.io/2021/11/27/bi-she-fuzz-4/</id>
    <published>2021-11-27T09:25:00.000Z</published>
    <updated>2021-12-02T13:19:30.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NoteBook阅读"><a href="#NoteBook阅读" class="headerlink" title="NoteBook阅读"></a>NoteBook阅读</h1><h2 id="Mutation-Analyze"><a href="#Mutation-Analyze" class="headerlink" title="Mutation Analyze"></a>Mutation Analyze</h2><p>关于ast–<code>Abstract Syntax Trees</code> 可算是找到一篇讲的非常清楚的博客了. 看了之后自己又调试了一遍代码,清楚多了</p><p><a href="https://www.cnblogs.com/qiulinzhang/p/14258626.html">https://www.cnblogs.com/qiulinzhang/p/14258626.html</a></p><p>清楚这个之后,再去搞清楚这一小节写的代码逻辑,想必应该要轻松不少了.</p><h3 id="7-A-Simple-mutator-for-Function"><a href="#7-A-Simple-mutator-for-Function" class="headerlink" title="7 A Simple mutator for Function"></a>7 A Simple mutator for Function</h3><p>总算搞清楚这个代码的逻辑了</p><ul><li><p>第一开始初始化的时候,并没有直接修改源代码,只是做了一个统计. 看一下需要变异的节点有多少个</p></li><li><p>后面provoke generate_mutant函数将location传递进来的时候才会发生突变. 换句话说, 这个location的具体含义是要在第几个变异节点发生变异</p></li><li><p>在 generate_mutant函数中<code>mutant_ast = self.pm.mutator_object(location).visit(ast.parse(self.pm.src))  # copy</code>中的<code>ast.parse(self.pm.src)</code>就是每一次都把源代码解析的ast对象传递进去, 目的就是为了控制变量. 这样就能获取到每一个单个突变位置的突变. 最后再利用diff库中的函数进行与原始版本的比较.</p></li></ul><p><strong>作者把类中的函数分开来讲解,确实在对单个函数的说明上起到了一定的作用.但是对于类整体的功能理解上, 还是有一定的影响</strong></p><p>我把单独的代码整合到了一起去看代码的逻辑, 终于清晰了不少</p><h4 id="整合代码"><a href="#整合代码" class="headerlink" title="整合代码"></a>整合代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MuFunctionAnalyzer</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"__iter__"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> PMIterator<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> log<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fn <span class="token operator">=</span> fn        self<span class="token punctuation">.</span>name <span class="token operator">=</span> fn<span class="token punctuation">.</span>__name__        src <span class="token operator">=</span> inspect<span class="token punctuation">.</span>getsource<span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token comment"># 获取源码</span>        self<span class="token punctuation">.</span>ast <span class="token operator">=</span> ast<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>src<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>src <span class="token operator">=</span> ast<span class="token punctuation">.</span>unparse<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ast<span class="token punctuation">)</span>  <span class="token comment"># normalize</span>        self<span class="token punctuation">.</span>mutator <span class="token operator">=</span> self<span class="token punctuation">.</span>mutator_object<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>nmutations <span class="token operator">=</span> self<span class="token punctuation">.</span>get_mutation_count<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>un_detected <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>mutants <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>log <span class="token operator">=</span> log    <span class="token keyword">def</span> <span class="token function">mutator_object</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> locations<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> StmtDeletionMutator<span class="token punctuation">(</span>locations<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>mutants<span class="token punctuation">.</span>append<span class="token punctuation">(</span>m<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">finish</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>        <span class="token keyword">def</span> <span class="token function">get_mutation_count</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>mutator<span class="token punctuation">.</span>visit<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ast<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutator<span class="token punctuation">.</span>count        <span class="token keyword">class</span> <span class="token class-name">StmtDeletionMutator</span><span class="token punctuation">(</span>ast<span class="token punctuation">.</span>NodeTransformer<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mutate_location<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>mutate_location <span class="token operator">=</span> mutate_location        <span class="token keyword">def</span> <span class="token function">mutation_visit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> ast<span class="token punctuation">.</span>Pass<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">def</span> <span class="token function">mutable_visit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># statements start at line no 1</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>count <span class="token operator">==</span> self<span class="token punctuation">.</span>mutate_location<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"进行替换"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutation_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>generic_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">visit_Return</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"visit_Return"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Delete</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Assign</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_AnnAssign</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_AugAssign</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Raise</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Assert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Global</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Nonlocal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Expr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Pass</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Break</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visit_Continue</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutable_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">PMIterator</span><span class="token punctuation">(</span>PMIterator<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pm<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>pm <span class="token operator">=</span> pm        self<span class="token punctuation">.</span>idx <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> self<span class="token punctuation">.</span>idx        <span class="token keyword">if</span> i <span class="token operator">>=</span> self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>nmutations<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>finish<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">raise</span> StopIteration<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>idx <span class="token operator">+=</span> <span class="token number">1</span>        mutant <span class="token operator">=</span> Mutant<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">,</span> self<span class="token punctuation">.</span>idx<span class="token punctuation">,</span> log<span class="token operator">=</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>log<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>register<span class="token punctuation">(</span>mutant<span class="token punctuation">)</span>        <span class="token keyword">return</span> mutant<span class="token keyword">class</span> <span class="token class-name">Mutant</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pm<span class="token punctuation">,</span> location<span class="token punctuation">,</span> log<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>pm <span class="token operator">=</span> pm        <span class="token comment">#print(pm)</span>        self<span class="token punctuation">.</span>i <span class="token operator">=</span> location        self<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"%s_%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>i<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_src <span class="token operator">=</span> <span class="token boolean">None</span>        self<span class="token punctuation">.</span>tests <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>detected <span class="token operator">=</span> <span class="token boolean">False</span>        self<span class="token punctuation">.</span>log <span class="token operator">=</span> log    <span class="token keyword">def</span> <span class="token function">generate_mutant</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">:</span>        mutant_ast <span class="token operator">=</span> self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>mutator_object<span class="token punctuation">(</span>            location<span class="token punctuation">)</span><span class="token punctuation">.</span>visit<span class="token punctuation">(</span>ast<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># copy</span>        <span class="token keyword">return</span> ast<span class="token punctuation">.</span>unparse<span class="token punctuation">(</span>mutant_ast<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">src</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>_src <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_src <span class="token operator">=</span> self<span class="token punctuation">.</span>generate_mutant<span class="token punctuation">(</span>self<span class="token punctuation">.</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_src    <span class="token keyword">def</span> <span class="token function">diff</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>difflib<span class="token punctuation">.</span>unified_diff<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>src<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                              self<span class="token punctuation">.</span>src<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                              fromfile<span class="token operator">=</span><span class="token string">'original'</span><span class="token punctuation">,</span>                                              tofile<span class="token operator">=</span><span class="token string">'mutant'</span><span class="token punctuation">,</span>                                              n<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>下面是运行代码, 还有一些解释性的语句, 自认为已经比较清楚了.</p></blockquote><h4 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">test <span class="token operator">=</span> MuFunctionAnalyzer<span class="token punctuation">(</span>triangle<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test.nmutations:"</span><span class="token punctuation">,</span>test<span class="token punctuation">.</span>nmutations<span class="token punctuation">)</span><span class="token keyword">for</span> m <span class="token keyword">in</span> test<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"=======这是第%d次变异===================="</span> <span class="token operator">%</span> m<span class="token punctuation">.</span>i<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"原始代码："</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>mutant<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>src<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"在固定节点变异之后的代码"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>src<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"========================================\n"</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>运行结果<span class="token punctuation">:</span>visit_Returnvisit_Returnvisit_Returnvisit_Returnvisit_Returntest<span class="token punctuation">.</span>nmutations<span class="token punctuation">:</span> <span class="token number">5</span>__iter__<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>这是第<span class="token number">1</span>次变异<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>原始代码：<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span>在固定节点变异之后的代码visit_Return进行替换visit_Returnvisit_Returnvisit_Returnvisit_Return<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>这是第<span class="token number">2</span>次变异<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>原始代码：<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span>在固定节点变异之后的代码visit_Returnvisit_Return进行替换visit_Returnvisit_Returnvisit_Return<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>这是第<span class="token number">3</span>次变异<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>原始代码：<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span>在固定节点变异之后的代码visit_Returnvisit_Returnvisit_Return进行替换visit_Returnvisit_Return<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>这是第<span class="token number">4</span>次变异<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>原始代码：<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span>在固定节点变异之后的代码visit_Returnvisit_Returnvisit_Returnvisit_Return进行替换visit_Return<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>这是第<span class="token number">5</span>次变异<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>原始代码：<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Scalene'</span>在固定节点变异之后的代码visit_Returnvisit_Returnvisit_Returnvisit_Returnvisit_Return进行替换<span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Equilateral'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> b <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">elif</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Isosceles'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-Evaluating-Mutations"><a href="#8-Evaluating-Mutations" class="headerlink" title="8 Evaluating Mutations"></a>8 Evaluating Mutations</h3><p>涉及到了两个函数</p><ul><li><p><code>__enter__()</code>:The <strong>enter</strong>() function is called when the with block is entered. <em><strong>It creates the mutant as a Python function and places it in the global namespace</strong></em>, such that the assert statement executes the mutated function rather than the original.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>log<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'->\t%s'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    c <span class="token operator">=</span> <span class="token builtin">compile</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>src<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'&lt;mutant>'</span><span class="token punctuation">,</span> <span class="token string">'exec'</span><span class="token punctuation">)</span>    <span class="token builtin">eval</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 创建全局的变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>__exit__()</code>:The <strong>exit</strong>() function checks whether an exception has occurred (i.e., the assertion failed, or some other error was raised); if so, it marks the mutation as detected. Finally, it restores the original function definition.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_value<span class="token punctuation">,</span> traceback<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>log<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&lt;-\t%s'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">if</span> exc_type <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>detected <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>log<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Detected %s"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_value<span class="token punctuation">)</span>    <span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>fn <span class="token comment"># 因为突变把原来函数给改变了嘛,所以后面又重新把它恢复成原来的样子了</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>log<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>其他的倒是不难理解了</p><h3 id="9-Mutator-for-Modules-and-Test-Suites"><a href="#9-Mutator-for-Modules-and-Test-Suites" class="headerlink" title="9 Mutator for Modules and Test Suites"></a>9 Mutator for Modules and Test Suites</h3><h4 id="问题"><a href="#问题" class="headerlink" title="问题:"></a>问题:</h4><ul><li><p><code>self.mutator.visit(self.ast)</code>  这个函数调用的是AdvMutator里面mutable_visit函数???? 为什么会是这样呢?</p><p>A: 你懵了吗, 之前不是探讨过这个问题吗. 并不是self.mutator.visit(self.ast)调用的这个函数, 而是其调用的函数调用的.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">visit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Visit a node."""</span>    method <span class="token operator">=</span> <span class="token string">'visit_'</span> <span class="token operator">+</span> node<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__    visitor <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> method<span class="token punctuation">,</span> self<span class="token punctuation">.</span>generic_visit<span class="token punctuation">)</span>     <span class="token comment"># 这个函数先访问你自定义的节点visit方法,</span>    <span class="token comment"># 如果没有的话, 就递归访问子节点, </span>    <span class="token comment"># 也就是说, 是你自定义的节点visit_XXXX方法调用的mutable_visit. </span>    <span class="token comment"># 你可以再去看看上面</span>    <span class="token keyword">return</span> visitor<span class="token punctuation">(</span>node<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>__dict__</code> 在py中,到底起什么样的作用呢? 为什么这个可以实现全局调用?</p><p>A: Python 类提供了 <strong>dict</strong> 属性。需要注意的一点是，该属性可以用类名或者类的实例对象来调用，用类名直接调用 __dict__，会输出该由类中所有类属性组成的字典；而使用类的实例对象调用 __dict__，会输出由类中所有实例属性组成的字典。</p></li><li><p><input checked="" disabled="" type="checkbox">  runtest函数中细节还要再理解</p><p>A: 是unittest类里面的内容, 下次的时候可以再去百度看.</p></li><li><p><input checked="" disabled="" type="checkbox">  再了解一下unittest</p><p>A: 就是一个测试类, 也记不住, 下次用到在百度看把</p></li></ul><h4 id="合成代码"><a href="#合成代码" class="headerlink" title="合成代码"></a>合成代码</h4><blockquote><p>按照我的理解的话, 这一小节的内容, 就是为了<strong>把第8小节中的变异之后函数运行问题做了简化, 其实本质上还是之前的内容.</strong> 过程中用到了<code>unittest</code>这个模块</p></blockquote><p>还是一样的做法, 把代码们先弄到一起</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MuProgramAnalyzer</span><span class="token punctuation">(</span>MuFunctionAnalyzer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> AdvPMIterator<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>ast <span class="token operator">=</span> ast<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>src<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>src <span class="token operator">=</span> ast<span class="token punctuation">.</span>unparse<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ast<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>changes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>mutator <span class="token operator">=</span> self<span class="token punctuation">.</span>mutator_object<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>nmutations <span class="token operator">=</span> self<span class="token punctuation">.</span>get_mutation_count<span class="token punctuation">(</span><span class="token punctuation">)</span>         self<span class="token punctuation">.</span>un_detected <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">mutator_object</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> locations<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> AdvStmtDeletionMutator<span class="token punctuation">(</span>self<span class="token punctuation">,</span> locations<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_mutation_count</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>s        self<span class="token punctuation">.</span>mutator<span class="token punctuation">.</span>visit<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ast<span class="token punctuation">)</span> <span class="token comment"># 这个函数调用的是AdvMutator里面mutable_visit函数???? 为什么会是这样呢?</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutator<span class="token punctuation">.</span>count      <span class="token keyword">class</span> <span class="token class-name">AdvMutator</span><span class="token punctuation">(</span>Mutator<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> analyzer<span class="token punctuation">,</span> mutate_locations<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>mutate_locations <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">if</span> mutate_locations <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">else</span> mutate_locations        self<span class="token punctuation">.</span>pm <span class="token operator">=</span> analyzer    <span class="token keyword">def</span> <span class="token function">mutable_visit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># statements start at line no 1</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>mutation_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">AdvStmtDeletionMutator</span><span class="token punctuation">(</span>AdvMutator<span class="token punctuation">,</span> StmtDeletionMutator<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> analyzer<span class="token punctuation">,</span> mutate_locations<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        AdvMutator<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> analyzer<span class="token punctuation">,</span> mutate_locations<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">mutation_visit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        index <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># there is only one way to delete a statement -- replace it by pass</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>mutate_locations<span class="token punctuation">:</span>  <span class="token comment"># counting pass</span>            self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>changes<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>count<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>generic_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment"># get matching changes for this pass</span>            mutating_lines <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> idx<span class="token punctuation">)</span>                                 <span class="token keyword">for</span> <span class="token punctuation">(</span>count<span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>mutate_locations<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>count<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token keyword">in</span> mutating_lines<span class="token punctuation">:</span>                <span class="token keyword">return</span> ast<span class="token punctuation">.</span>Pass<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> self<span class="token punctuation">.</span>generic_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">AdvPMIterator</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pm<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>pm <span class="token operator">=</span> pm        self<span class="token punctuation">.</span>idx <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> self<span class="token punctuation">.</span>idx        <span class="token keyword">if</span> i <span class="token operator">>=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>changes<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> StopIteration<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token comment"># there could be multiple changes in one mutant</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>changes<span class="token punctuation">)</span><span class="token comment"># </span>        <span class="token keyword">return</span> AdvMutant<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">,</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>changes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">AdvMutant</span><span class="token punctuation">(</span>Mutant<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pm<span class="token punctuation">,</span> locations<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>pm <span class="token operator">=</span> pm        self<span class="token punctuation">.</span>i <span class="token operator">=</span> locations        self<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"%s_%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>name<span class="token punctuation">,</span>                               <span class="token string">'_'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> self<span class="token punctuation">.</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_src <span class="token operator">=</span> <span class="token boolean">None</span>            <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> test_module<span class="token punctuation">)</span><span class="token punctuation">:</span>        test_module<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>            self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> import_code<span class="token punctuation">(</span>            self<span class="token punctuation">.</span>src<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token keyword">return</span> MutantTestRunner<span class="token punctuation">(</span>self<span class="token punctuation">,</span> test_module<span class="token punctuation">)</span>            <span class="token keyword">def</span> <span class="token function">generate_mutant</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> locations<span class="token punctuation">)</span><span class="token punctuation">:</span>        mutant_ast <span class="token operator">=</span> self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>mutator_object<span class="token punctuation">(</span>            locations<span class="token punctuation">)</span><span class="token punctuation">.</span>visit<span class="token punctuation">(</span>ast<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># copy</span>        <span class="token keyword">return</span> ast<span class="token punctuation">.</span>unparse<span class="token punctuation">(</span>mutant_ast<span class="token punctuation">)</span>           <span class="token keyword">def</span> <span class="token function">src</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>_src <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_src <span class="token operator">=</span> self<span class="token punctuation">.</span>generate_mutant<span class="token punctuation">(</span>self<span class="token punctuation">.</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_src      <span class="token keyword">class</span> <span class="token class-name">MutantTestRunner</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mutant<span class="token punctuation">,</span> test_module<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>mutant <span class="token operator">=</span> mutant        self<span class="token punctuation">.</span>tm <span class="token operator">=</span> test_module    <span class="token keyword">def</span> <span class="token function">runTest</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> tc<span class="token punctuation">)</span><span class="token punctuation">:</span>        suite <span class="token operator">=</span> unittest<span class="token punctuation">.</span>TestSuite<span class="token punctuation">(</span><span class="token punctuation">)</span>        test_class <span class="token operator">=</span> self<span class="token punctuation">.</span>tm<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>tc<span class="token punctuation">]</span>        <span class="token keyword">for</span> f <span class="token keyword">in</span> test_class<span class="token punctuation">.</span>__dict__<span class="token punctuation">:</span>            <span class="token keyword">if</span> f<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'test_'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                suite<span class="token punctuation">.</span>addTest<span class="token punctuation">(</span>test_class<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span>        runner <span class="token operator">=</span> unittest<span class="token punctuation">.</span>TextTestRunner<span class="token punctuation">(</span>verbosity<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> failfast<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> ExpectTimeout<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                res <span class="token operator">=</span> runner<span class="token punctuation">.</span>run<span class="token punctuation">(</span>suite<span class="token punctuation">)</span>                <span class="token keyword">if</span> res<span class="token punctuation">.</span>wasSuccessful<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>mutant<span class="token punctuation">.</span>pm<span class="token punctuation">.</span>un_detected<span class="token punctuation">.</span>add<span class="token punctuation">(</span>self<span class="token punctuation">)</span>                <span class="token keyword">return</span> res        <span class="token keyword">except</span> SyntaxError<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Syntax Error (%s)'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>mutant<span class="token punctuation">.</span>name<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Unhandled exception during test execution'</span><span class="token punctuation">)</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-The-Problem-of-Equivalent-Mutants"><a href="#10-The-Problem-of-Equivalent-Mutants" class="headerlink" title="10 The Problem of Equivalent Mutants"></a>10 The Problem of Equivalent Mutants</h3><p>在替换的过程中, 有可能会产生这种情况: 替换过后相当于没有替换. 并不会产生错误. 替换掉了一个无关紧要的语句. 把这种情况称为<code>equivalent mutants</code></p><p>要解决这个问题, 文章中说了两个方法</p><h4 id="10-1-Statistical-Estimation-of-Number-of-Equivalent-Mutants"><a href="#10-1-Statistical-Estimation-of-Number-of-Equivalent-Mutants" class="headerlink" title="10.1 Statistical Estimation of Number of Equivalent Mutants"></a>10.1 Statistical Estimation of Number of Equivalent Mutants</h4><p>利用正态分布</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211130104504.png" alt="Statistical Estimation"></p><h4 id="10-2-Statistical-Estimation-of-the-Number-of-Immortals-by-Chao’s-Estimator"><a href="#10-2-Statistical-Estimation-of-the-Number-of-Immortals-by-Chao’s-Estimator" class="headerlink" title="10.2 Statistical Estimation of the Number of Immortals by Chao’s Estimator"></a>10.2 Statistical Estimation of the Number of Immortals by Chao’s Estimator</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211130104746.png" alt="Chao&#39;s Estimator"></p><p>Note that these <strong>immortal mutants</strong> are somewhat different from the traditional equivalent mutants in that the mortality depends on the oracle used to distinguish variant behavior. That is, if one uses a fuzzer that relies on errors thrown to detect killing, <em>it will not detect mutants that produce different output but does not throw an error</em>. Hence, the <strong>Chao1</strong> estimate will essentially be <strong>the asymptote value of mutants the fuzzer can detect</strong> if it is given an infinite amount of time.</p><h3 id="Synopsis"><a href="#Synopsis" class="headerlink" title="Synopsis"></a>Synopsis</h3><p>This chapter introduces two methods of running <em>mutation analysis</em> on subject programs. The first class <code>MuFunctionAnalyzer</code> targets individual functions. Given a function <code>gcd</code> and two test cases evaluate, one can run mutation analysis on the test cases as follows —<code>第7小节</code></p><p>The second class <code>MuProgramAnalyzer</code> targets standalone programs with test suites. Given a program <code>gcd</code> whose source code is provided in <code>gcd_src</code> and the test suite is provided by <code>TestGCD</code>, one can evaluate the mutation score of <code>TestGCD</code> as follows</p><blockquote><p>个人感觉这两种方式的差距, 并没有很大. 甚至好像没什么区别-可能是我菜吧😥-🤣</p></blockquote><p>The <strong>mutation score</strong> thus obtained is a better indicator of the quality of a given test suite than pure coverage.</p><h3 id="Lessons-Learned"><a href="#Lessons-Learned" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h3><p>为什么做这个, 怎么做, 这种方法有什么局限.又应该怎么改进.</p><blockquote><p>不得不说,作者的思路真的很清晰了.</p></blockquote><ul><li>We have learned why structural coverage is insufficient to evaluate the quality of test suites.</li><li>We have learned how to use Mutation Analysis for evaluating test suite quality.</li><li>We have learned the limitations of Mutation Analysis – Equivalent and Redundant mutants, and how to estimate them.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NoteBook阅读&quot;&gt;&lt;a href=&quot;#NoteBook阅读&quot; class=&quot;headerlink&quot; title=&quot;NoteBook阅读&quot;&gt;&lt;/a&gt;NoteBook阅读&lt;/h1&gt;&lt;h2 id=&quot;Mutation-Analyze&quot;&gt;&lt;a href=&quot;#Mutat</summary>
      
    
    
    
    <category term="毕设" scheme="https://laobameishijia.github.io/category/%E6%AF%95%E8%AE%BE/"/>
    
    
    <category term="Fuzz" scheme="https://laobameishijia.github.io/tag/Fuzz/"/>
    
  </entry>
  
  <entry>
    <title>美食篇-7-东北菜</title>
    <link href="https://laobameishijia.github.io/2021/11/26/mei-shi-pian-7-dong-bei-cai/"/>
    <id>https://laobameishijia.github.io/2021/11/26/mei-shi-pian-7-dong-bei-cai/</id>
    <published>2021-11-26T09:25:00.000Z</published>
    <updated>2021-12-02T13:19:30.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="美食"><a href="#美食" class="headerlink" title="美食"></a>美食</h1><p>这次还是我和两个舍友,来的应该是第四次了把.</p><ul><li>地三鲜</li><li>溜肉段–这个居然时炸的,真醉了~~</li><li>饺子–韭菜鸡蛋\牛肉萝卜</li><li>锅包肉–我真快吃腻了,而且感觉没有上次在江安这边点的外卖(也是东北菜)好吃.</li></ul><p>![1]](<a href="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QQ%E5%9B%BE%E7%89%8720211126220221.jpg">https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QQ图片20211126220221.jpg</a>)</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QQ%E5%9B%BE%E7%89%8720211126220234.jpg" alt="2"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;美食&quot;&gt;&lt;a href=&quot;#美食&quot; class=&quot;headerlink&quot; title=&quot;美食&quot;&gt;&lt;/a&gt;美食&lt;/h1&gt;&lt;p&gt;这次还是我和两个舍友,来的应该是第四次了把.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;地三鲜&lt;/li&gt;
&lt;li&gt;溜肉段–这个居然时炸的,真醉了~~&lt;/li</summary>
      
    
    
    
    <category term="美食" scheme="https://laobameishijia.github.io/category/%E7%BE%8E%E9%A3%9F/"/>
    
    
    <category term="成都" scheme="https://laobameishijia.github.io/tag/%E6%88%90%E9%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>毕设-Fuzz-3</title>
    <link href="https://laobameishijia.github.io/2021/11/22/bi-she-fuzz-3/"/>
    <id>https://laobameishijia.github.io/2021/11/22/bi-she-fuzz-3/</id>
    <published>2021-11-22T09:25:00.000Z</published>
    <updated>2021-12-02T13:19:30.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NoteBook阅读"><a href="#NoteBook阅读" class="headerlink" title="NoteBook阅读"></a>NoteBook阅读</h1><h2 id="SearchBasedFuzzer"><a href="#SearchBasedFuzzer" class="headerlink" title="SearchBasedFuzzer"></a>SearchBasedFuzzer</h2><p>我们先不去对代码实现细节进行掌握, 先去掌握思想.</p><p>什么是基于搜索的测试? 为什么要用这种方式? 原话: <em><strong>Sometimes we are not only interested in fuzzing as many as possible diverse program inputs, but in deriving specific test inputs that achieve some objective, such as reaching specific statements in a program.</strong></em> 要产生特定的测试数据,从而到达程序中特定的位置.</p><p>这样的方式需要我们做哪些工作?</p><ul><li>首先,你要明确你要生成的数据类型和范围. <em>Maybe XML\String\Int etc. a-z\1-10</em></li><li>其次, 要定义在搜索空间内的适应度函数, 也就是你要能评价搜索到的数据距离目标的距离</li><li>然后, 定义搜索算法. 即按照什么样的方式\以何种顺序在搜索空间中搜素.<ul><li><strong>Hillclimbing</strong> 搜素范围规模不大.<em><strong>个人感觉根梯度下降非常相似,只不过在这里是离散的.</strong></em></li><li><strong>Genetic Algorithm</strong>搜素范围规模较大.<em><strong>结合了自然选择和种群进化的生物理论.</strong></em></li></ul></li></ul><h3 id="两个主要的算法"><a href="#两个主要的算法" class="headerlink" title="两个主要的算法"></a>两个主要的算法</h3><p>The <strong>hillclimbing algorithm</strong> itself is very simple: </p><ol><li>Take a random starting point</li><li>Determine fitness value of all neighbours</li><li>Move to neighbour with the best fitness value</li><li>If solution is not found, continue with step 2</li></ol><p>The <strong>GA emulates natural evolution</strong> with the following process:</p><ul><li>Create an initial population of random chromosomes</li><li>Select fit individuals for reproduction</li><li>Generate new population through reproduction of selected individuals</li><li>Continue doing so until an optimal solution has been found, or some other limit has been reached.</li></ul><blockquote><p>当然在具体的应用中, 还要设计到如何设计突变/如何选择种群/如何利用父代产生子代. 这些都需要跟实际情况相结合.</p></blockquote><h3 id="需要了解的一些背景知识"><a href="#需要了解的一些背景知识" class="headerlink" title="需要了解的一些背景知识"></a>需要了解的一些背景知识</h3><p>Python 源码到机器码的过程，以 CPython 为例，编译过程如下：</p><ul><li>将源代码解析为解析树（Parser Tree）</li><li>将解析树转换为抽象语法树（Abstract Syntax Tree）</li><li>将抽象语法树转换到控制流图（Control Flow Graph）</li><li>根据流图将字节码（bytecode）发送给虚拟机（ceval）</li></ul><p>可以使用以下模块进行操作：</p><ul><li>ast 模块可以控制抽象语法树的生成和编译</li><li>py-compile 模块能够将源码换成字节码（编译），保存在 <strong>pycache</strong> 文件夹，以 .pyc 结尾（不可读）</li><li>dis 模块通过反汇编支持对字节码的分析（可读）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NoteBook阅读&quot;&gt;&lt;a href=&quot;#NoteBook阅读&quot; class=&quot;headerlink&quot; title=&quot;NoteBook阅读&quot;&gt;&lt;/a&gt;NoteBook阅读&lt;/h1&gt;&lt;h2 id=&quot;SearchBasedFuzzer&quot;&gt;&lt;a href=&quot;#Sear</summary>
      
    
    
    
    <category term="毕设" scheme="https://laobameishijia.github.io/category/%E6%AF%95%E8%AE%BE/"/>
    
    
    <category term="Fuzz" scheme="https://laobameishijia.github.io/tag/Fuzz/"/>
    
  </entry>
  
  <entry>
    <title>毕设-Fuzz-2</title>
    <link href="https://laobameishijia.github.io/2021/11/21/bi-she-fuzz-2/"/>
    <id>https://laobameishijia.github.io/2021/11/21/bi-she-fuzz-2/</id>
    <published>2021-11-21T09:25:00.000Z</published>
    <updated>2021-12-02T13:19:30.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NoteBook阅读"><a href="#NoteBook阅读" class="headerlink" title="NoteBook阅读"></a>NoteBook阅读</h1><ul><li><input checked="" disabled="" type="checkbox"> 这一部分还是要再看看代码才行</li></ul><h2 id="Greybox-Fuzzing"><a href="#Greybox-Fuzzing" class="headerlink" title="Greybox Fuzzing"></a>Greybox Fuzzing</h2><h3 id="Blackbox-Mutation-base-Fuzzer"><a href="#Blackbox-Mutation-base-Fuzzer" class="headerlink" title="Blackbox Mutation-base Fuzzer"></a>Blackbox Mutation-base Fuzzer</h3><p>在这个测试里面,似乎只要是在population里面的seed,在权重上是一样的,换句话说就是被挑选的概率是一样的.</p><p>不过,按照我的理解, 按说这个权重应该是要变化的,可能在后面的讲解中会讲到吧</p><h3 id="Greybox-Mutation-base-Fuzzer"><a href="#Greybox-Mutation-base-Fuzzer" class="headerlink" title="Greybox Mutation-base Fuzzer"></a>Greybox Mutation-base Fuzzer</h3><p>我丢,从代码的角度上来看的话,灰盒测试无非是把<code>代码覆盖率</code>当成了加入<code>population</code>的一个准则</p><blockquote><p>原话: If we reach new coverage,add inp to population and its coverage to population_coverage</p></blockquote><h3 id="Boosted-Greybox-Fuzzer"><a href="#Boosted-Greybox-Fuzzer" class="headerlink" title="Boosted Greybox Fuzzer"></a>Boosted Greybox Fuzzer</h3><p>果不其然, 这个增强版的就用到了<code>energy</code>,也就是上面所讲的权重,它用了一个函数来计算.</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211121205144.png" alt="计算权重的公式"></p><p>这个指数后面文章所取的值是5</p><p>❓我不太清楚是, <code>coverage</code>只是一个数字, 如果只是数字的话, 那如何衡量路径呢? 因为即使是路径不同, <code>coveraige</code>也有可能是一样的.</p><blockquote><p>emm,很明显,<code>coverage</code>应该不仅仅是数字,他应该是<code>(执行函数名,行数)</code>这样的结构组成的😨</p></blockquote><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211121210348.png" alt="Boosted"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211121210407.png" alt="Original"></p><p>把<code>energy</code>分配给哪些执行次数相对较少的路径上, 以期再获得其他路径.</p><blockquote><p>The exponential power schedule shaves some of the executions of the “high-frequency path” off and adds them to the lower-frequency paths. The path executed least often is either not at all exercised using the traditional power schedule or it is exercised much less often.</p></blockquote><p><em><strong>Summary</strong></em>. By fuzzing seeds more often that exercise low-frequency paths, we can explore program paths in a much more efficient manner.</p><h2 id="Directed-Greybox-Fuzzing"><a href="#Directed-Greybox-Fuzzing" class="headerlink" title="Directed Greybox Fuzzing"></a>Directed Greybox Fuzzing</h2><p>本章用了一个迷宫来做案例, 迷宫的正确解恰恰对应于程序运行过程中运行次数最少的.</p><p>然后, 如何去评价一个路径的好坏, 本章节中采用了将程序调用图转换为有向图, 然后计算<code>路径最终节点</code>与<code>目标节点-出口</code>之间的距离.很显然这个距离越小, 说明距离<code>目标节点-出口</code>越近, 也就越接近出口.</p><p><em><strong>Summary</strong></em>. After pre-computing the function-level distance to the target, we can develop a power schedule that assigns more energy to a seed with a smaller average function-level distance to the target. By normalizing seed distance values between the minimum and maximum seed distance, we can further boost the directed power schedule.</p><blockquote><p>这部分说实话,真的没看懂..😥😥😥😥</p></blockquote><h2 id="Lessons-Learned"><a href="#Lessons-Learned" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h2><ul><li>A <em>greybox fuzzer</em> generates thousands of inputs per second. Pre-processing and lightweight instrumentation <ul><li>allows to maintain the efficiency <em>during</em> the fuzzing campaign, and </li><li>still provides enough information to control progress and slightly steer the fuzzer.</li></ul></li><li>The <em>power schedule</em> allows to steer/control the fuzzer. For instance,<ul><li>Our <a href="#Fuzzer-Boosting">boosted greybox fuzzer</a> spends more energy on seeds that exercise “unlikely” paths. The hope is that the generated inputs exercise even more unlikely paths. This in turn increases the number of paths explored per unit time.</li><li>Our <a href="#Directed-Greybox-Fuzzing">directed greybox fuzzer</a> spends more energy on seeds that are “closer” to a target location. The hope is that the generated inputs get even closer to the target.</li></ul></li><li>The <em>mutator</em> defines the fuzzer’s search space. <a href="GreyboxFuzzer.ipynb#A-First-Attempt">Customizing the mutator</a> for the given program allows to reduce the search space to only relevant inputs. In a couple of chapters, we’ll learn about <a href="GreyboxGrammarFuzzer.ipynb">dictionary-based, and grammar-based mutators</a> to increase the ratio of valid inputs generated.</li></ul><p>从这也可以看出来,评价函数确实很重要. 虽然实现的目的都是一样的, 但是就实验的效果来看的话, 却是相差很远.</p><h2 id="Next-Steps"><a href="#Next-Steps" class="headerlink" title="Next Steps"></a>Next Steps</h2><p>Our aim is still to sufficiently cover functionality, such that we can trigger as many bugs as possible.  To this end, we focus on two classes of techniques:</p><ol><li><p>Try to cover as much <em>specified</em> functionality as possible.  Here, we would need a <em>specification of the input format,</em> distinguishing between individual input elements such as (in our case) numbers, operators, comments, and strings – and attempting to cover as many of these as possible.  We will explore this as it comes to <a href="GrammarFuzzer.ipynb">grammar-based testing</a>, and especially in <a href="GreyboxGrammarFuzzer.ipynb">grammar-based mutations</a>.</p></li><li><p>Try to cover as much <em>implemented</em> functionality as possible.  The concept of a “population” that is systematically “evolved” through “mutations” will be explored in depth when discussing <a href="SearchBasedFuzzer.ipynb">search-based testing</a>.  Furthermore, <a href="SymbolicFuzzer.ipynb">symbolic testing</a> introduces how to systematically reach program locations by solving the conditions that lie on their paths.</p></li></ol><p>These two techniques make up the gist of the book; and, of course, they can also be combined with each other.  As usual, we provide runnable code for all.  Enjoy!</p><blockquote><p>从这里的描述来看, <code>specified functionality</code> 和 <code>implemented functionality</code> 是不同的两个概念</p></blockquote><hr><p>看到现在的话,其实作者的思路,我们大概也清楚的知道了一些</p><ul><li><ol><li>我们只是简单地随机产生字符串</li></ol></li><li><ol start="2"><li>紧接着, 我们不满足于仅仅产生随机的字符串, 进而使用了<code>coverage</code>—<code>measure the effectiveness of different test generation techniques, but also to guide test generation towards code coverage.</code></li></ol></li><li><ol start="3"><li>有了<code>coverage</code>之后, 还不行, 因为总有一些路径几乎不被执行, 相反一些路径被执行的次数却很多. 倒也不是说这样不好, 只是 <code>By fuzzing seeds more often that exercise low-frequency paths, we can explore program paths in a much more efficient manner.</code> 所以又引入了 <code>Power Schedules</code><blockquote><p><strong>We call the likelihood with which a seed is chosen from the population as the seed’s energy.</strong> Throughout a fuzzing campaign, we would like to prioritize seeds that are more promising. Simply said, we do not want to waste energy fuzzing non-progressive seeds. <em><strong>We call the procedure that decides a seed’s energy as the fuzzer’s <strong>power schedule</strong></strong></em>. For instance, AFL’s schedule assigns more energy to seeds that are shorter, that execute faster, and yield coverage increases more often. </p></blockquote></li></ol></li><li><ol start="4"><li>但是有了这些还是不行, 因为虽然产生的随机字符串有了一定的质量, 但是在语法上, 还是比较欠缺.<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211121212317.png" alt="针对HtmlParser产生的字符串"></li></ol><blockquote><p>The greybox fuzzer executes much more complicated inputs, many of which include special characters such as opening and closing brackets and chevrons (i.e., &lt;, &gt;, [, ]). Yet, many important keywords, such as <html> are still missing.</p></blockquote><p>  所以,下面一章就要将<code>grammars</code>的部分了</p></li></ul><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NoteBook阅读&quot;&gt;&lt;a href=&quot;#NoteBook阅读&quot; class=&quot;headerlink&quot; title=&quot;NoteBook阅读&quot;&gt;&lt;/a&gt;NoteBook阅读&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; ty</summary>
      
    
    
    
    <category term="毕设" scheme="https://laobameishijia.github.io/category/%E6%AF%95%E8%AE%BE/"/>
    
    
    <category term="Fuzz" scheme="https://laobameishijia.github.io/tag/Fuzz/"/>
    
  </entry>
  
  <entry>
    <title>毕设-Fuzz-1</title>
    <link href="https://laobameishijia.github.io/2021/11/19/bi-she-fuzz-1/"/>
    <id>https://laobameishijia.github.io/2021/11/19/bi-she-fuzz-1/</id>
    <published>2021-11-19T09:25:00.000Z</published>
    <updated>2021-12-02T13:19:30.228Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Fuzzer"><a href="#Fuzzer" class="headerlink" title="Fuzzer"></a>Fuzzer</h2><p>这是在GitHub上,找到的一个在线的书籍,讲解Fuzz的<br><a href="https://hub.gke2.mybinder.org/user/uds-se-fuzzingbook-ktofhf06/notebooks/docs/notebooks/Fuzzer.ipynb">https://hub.gke2.mybinder.org/user/uds-se-fuzzingbook-ktofhf06/notebooks/docs/notebooks/Fuzzer.ipynb</a></p><p>简单来说, 就是随机生成字符串, 在接受输入的地方及进行测试. 并且对程序崩溃的原因进行整理.</p><p>发现的问题就包括了缓冲区溢出/缺少错误输入的检查/极端值的验证等常见的错误</p><h3 id="Generic-Checker-泛型检测器"><a href="#Generic-Checker-泛型检测器" class="headerlink" title="Generic Checker(泛型检测器)"></a>Generic Checker(泛型检测器)</h3><h4 id="Memory-Accesses"><a href="#Memory-Accesses" class="headerlink" title="Memory Accesses"></a>Memory Accesses</h4><p><strong>LLVM Address Sanitizer</strong> which detects a whole set of potentially dangerous memory safety violations. 将这个嵌入到c程序中,并进行编译, 当访问越界的地址时, 会提示报错, 被给出一个详细的说明.</p><p>![报错示意图]](<a href="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211119145215.png">https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211119145215.png</a>)</p><p>HeartBleed bug 就是这么被测试出来的. OpenSSl库里面的漏洞</p><h4 id="Information-Leak"><a href="#Information-Leak" class="headerlink" title="Information Leak"></a>Information Leak</h4><p>信息泄露可能不仅仅出现访问非法的地址, 同样有可能出现在合法地址中. 如果合法地址中包含了不应该泄露的敏感信息. 这种情况下, <code>Address Sanitizer</code>不会报错, 因为访问的是”合法”地址.</p><p>要应对这样的问题, 需要检查返回的字符串中, 是否包含了不应该出现的信息</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211119151350.png" alt="信息泄露检查"></p><h3 id="定制检查"><a href="#定制检查" class="headerlink" title="定制检查"></a>定制检查</h3><p>充分地利用assertion, 检查重要函数的input和result. 充分使用assertion可以提高检测到泛型检查器无法检查到的错误.</p><h4 id="Check-the-integrity-of-complex-data-structures"><a href="#Check-the-integrity-of-complex-data-structures" class="headerlink" title="Check the integrity of complex data structures"></a>Check the integrity of complex data structures</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211119152317.png" alt="检查数据结构"></p><p>这个具体的检查,感觉就好像是编程中的问题, 要在改变重要数据结构前后, 都要验证数据结构的合法性. <code>. Whenever an element is added or deleted, all these consistency checks are run automatically.</code></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211119155255.png" alt="repOK()类型的检测"></p><p>虽然这些检测 <code>documents all the assumptions and checks them as well</code> 仅仅针对于我们个人写的程序和问题, 但是可以帮助我们找到问题, 同时也能帮助其他程序员理解我们的代码并避免错误.</p><h3 id="Fuzzing-结构"><a href="#Fuzzing-结构" class="headerlink" title="Fuzzing 结构"></a>Fuzzing 结构</h3><ul><li><code>Fuzzer</code> 作为<code>fuzzers</code>的一个基类 </li><li><code>Runner</code> 作为运行程序和检测的一个基类</li></ul><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211120152158.png" alt="Fuzzer"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211120152415.png" alt="Runner"></p><h3 id="Lesson-Learned"><a href="#Lesson-Learned" class="headerlink" title="Lesson Learned"></a>Lesson Learned</h3><ul><li>Randomly generating inputs (“fuzzing”) is a simple, cost-effective way to quickly test arbitrary programs for their robustness.</li><li>Bugs fuzzers find are mainly due to errors and deficiencies in input processing.</li><li>To catch errors, have as many consistency checkers as possible.</li></ul><h2 id="Mutation-Based-Fuzzing"><a href="#Mutation-Based-Fuzzing" class="headerlink" title="Mutation-Based Fuzzing"></a>Mutation-Based Fuzzing</h2><p>这是上一本在结尾时推荐出来的<br><a href="https://hub.gke2.mybinder.org/user/uds-se-fuzzingbook-whv6pm2k/notebooks/docs/notebooks/MutationFuzzer.ipynb">https://hub.gke2.mybinder.org/user/uds-se-fuzzingbook-whv6pm2k/notebooks/docs/notebooks/MutationFuzzer.ipynb</a></p><p>最初所生产出来的模糊字符串, 很多都是无效的. 在测验的过程中, 很快就被程序拒绝了. 现在提出的方法叫 <strong>基于突变的Fuzz</strong>, 要在现有输入上做微小的改动, 使其仍然保持有效性. </p><p>看到后面还得需要去在补前面的<code>Code Coverage</code>的定义😱😱😱😱</p><hr><h2 id="已补完😀😀"><a href="#已补完😀😀" class="headerlink" title="已补完😀😀"></a>已补完😀😀</h2><p>在知道这个Code Coverage之后呢, 我们就可以把<strong>通过检测以及Code Coverage有上升/或者从未出现过</strong>的fuzz字符串保存下来.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MutationCoverageFuzzer</span><span class="token punctuation">(</span>MutationFuzzer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>coverages_seen <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># Now empty; we fill this with seed in the first fuzz runs</span>        self<span class="token punctuation">.</span>population <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> runner<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Run function(inp) while tracking coverage.           If we reach new coverage,           add inp to population and its coverage to population_coverage        """</span>        result<span class="token punctuation">,</span> outcome <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run<span class="token punctuation">(</span>runner<span class="token punctuation">)</span>        new_coverage <span class="token operator">=</span> <span class="token builtin">frozenset</span><span class="token punctuation">(</span>runner<span class="token punctuation">.</span>coverage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> outcome <span class="token operator">==</span> Runner<span class="token punctuation">.</span>PASS <span class="token keyword">and</span> new_coverage <span class="token keyword">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>coverages_seen<span class="token punctuation">:</span>            <span class="token comment"># We have new coverage</span>            self<span class="token punctuation">.</span>population<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>inp<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>coverages_seen<span class="token punctuation">.</span>add<span class="token punctuation">(</span>new_coverage<span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>The nice thing about this strategy is that, applied to larger programs, it will happily explore one path after the other – covering functionality after functionality. All that is needed is a means to capture the coverage.</p></blockquote><h3 id="Lessons-Learned"><a href="#Lessons-Learned" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h3><ul><li>Randomly generated inputs are frequently invalid – and thus exercise mostly input processing functionality.</li><li>Mutations from existing valid inputs have much higher chances to be valid, and thus to exercise functionality beyond input processing.</li></ul><h2 id="Code-Coverage"><a href="#Code-Coverage" class="headerlink" title="Code Coverage"></a>Code Coverage</h2><p>如何衡量这些测试的有效性?一种方法是检查发现的漏洞的数量(和严重性);但是如果bug非常少，我们就需要一个代理来确定通过测试发现bug的可能性。在这一章中，我们介绍了代码覆盖率的概念，衡量在测试运行期间程序的哪些部分实际上被执行了。对于试图覆盖尽可能多的代码的测试生成器来说，度量这样的覆盖率也是至关重要的。</p><h3 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h3><p>黑盒测试的优点是可以在指定的行为中发现出错误. 缺点是 以实现的行为通常比指定的行为覆盖更多的领域, 因此仅基于规范的测试通常不能覆盖所有的实现细节.</p><blockquote><p>这话没毛病,毕竟是黑盒测试, 也仅仅只能通过函数的行为来进行测试. 并不能窥探到所有的实现细节.</p></blockquote><h3 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h3><p>白盒测试的优点是它可以找到以实现的功能里面的错误. 即使规范中没有提供详细的细节.  但是它可能会漏掉没有实现的行为.如果有些特定的功能没有实现, 白盒测试就不能找到它.</p><blockquote><p>这最后一句话确定不是废话吗? 没实现就没有代码, 没有代码 那白盒测试肯定是测试不到的啊! 是我理解有问题吗?</p></blockquote><h3 id="运行时跟踪"><a href="#运行时跟踪" class="headerlink" title="运行时跟踪"></a>运行时跟踪</h3><p>这里介绍了py中的一个函数<code>sys.settrace(f)</code>, 这个函数在程序运行的每一行都会调用.可以用它来获取执行程序的行数\当前属于哪个函数体\当前的局部变量和参数</p><blockquote><p>当然C语言里面也有, 只不过要在编译的时候加一些参数, 然后运行之后,会产生<code>.gcov</code>的文件,里面包含了类似py中<code>sys.settrace()</code>函数捕捉到的信息</p></blockquote><p>![sys.settrace()的运行效果]](<a href="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211120205202.png">https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211120205202.png</a>)</p><h3 id="Lessons-Learned-1"><a href="#Lessons-Learned-1" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h3><ul><li>Coverage metrics are a simple and fully automated means to approximate how much functionality of a program is actually executed during a test run.</li><li>A number of coverage metrics exist, the most important ones being statement coverage and branch coverage.</li><li>In Python, it is very easy to access the program state during execution, including the currently executed code. </li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Fuzzer&quot;&gt;&lt;a href=&quot;#Fuzzer&quot; class=&quot;headerlink&quot; title=&quot;Fuzzer&quot;&gt;&lt;/a&gt;Fuzzer&lt;/h2&gt;&lt;p&gt;这是在GitHub上,找到的一个在线的书籍,讲解Fuzz的&lt;br&gt;&lt;a href=&quot;https://hub.</summary>
      
    
    
    
    <category term="毕设" scheme="https://laobameishijia.github.io/category/%E6%AF%95%E8%AE%BE/"/>
    
    
    <category term="Fuzz" scheme="https://laobameishijia.github.io/tag/Fuzz/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习-6-脚手架</title>
    <link href="https://laobameishijia.github.io/2021/11/18/vue-xue-xi-6-jiao-shou-jia/"/>
    <id>https://laobameishijia.github.io/2021/11/18/vue-xue-xi-6-jiao-shou-jia/</id>
    <published>2021-11-18T09:25:00.000Z</published>
    <updated>2021-12-02T13:19:30.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue脚手架"><a href="#Vue脚手架" class="headerlink" title="Vue脚手架"></a>Vue脚手架</h1><p>Vue脚手架是一个基于Vue.js进行快速开发的完整系统，是一个专门为Vue应用快速搭建繁杂项目结构的脚手架，它可以轻松地创建新的应用程序，且可用于自动生成Vue和Webpack的项目模板.</p><h2 id="快速构建项目"><a href="#快速构建项目" class="headerlink" title="快速构建项目"></a>快速构建项目</h2><h3 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h3><p>为了更好地适应复杂项目的开发,Vue.js支持以.vue为扩展名的文件来定义一个组件. 这个组件被称为单文件组件,文件中封装了组件相关代码.如 html\css\js等,最终通过Webpack编译成js文件并在浏览器中运行.</p><h3 id="单文件组件嵌套"><a href="#单文件组件嵌套" class="headerlink" title="单文件组件嵌套"></a>单文件组件嵌套</h3><p>index.html 是入口地址,可调用App.vue. 在App.vue文件中可以调用其他组件,所以App.vue被称为根组件.</p><h3 id="组件之间的信息传递"><a href="#组件之间的信息传递" class="headerlink" title="组件之间的信息传递"></a>组件之间的信息传递</h3><p>父-&gt;子: <code>v-bind</code></p><p>子-&gt;父: 子组件通过<code>$emit</code>来触发事件,父组件在子组件的自定义标签上使用v-on指令来监听子组件触发的自定义事件.</p><p>非父子: 使用一个空的Vue实例作为中央事件总线.利用这个来<code>emit</code><strong>触发事件</strong>/<code>on</code><strong>监听事件</strong></p><h2 id="前端路由"><a href="#前端路由" class="headerlink" title="前端路由"></a>前端路由</h2><p>Vue.js的路由和<code>&lt;a&gt;</code>标签实现的功能是一样的,它们都实现一个对应的跳转,只不过路由的性能更佳. a标签无论点击多少次,都会发生对应的网络请求,页面会不停地进行刷新,但是使用路由机制,单击之后,不会出现请求及页面刷新,而会直接转换到要跳转的地址,这就是使用路由的好处.</p><p>随着前后端分离开发模式的兴起,出现了前端路由的概念:前端通过Ajax获取数据后,通过一定的方式渲染到页面中,<strong>改变URL不会向服务器发送请求</strong>,同时,前端可以监听URL变化,可以解析URL并执行相应操作,而后端只负责提供API来返回数据.</p><p><em>在Vue中,通过路由跳转到不同的页面中,实际上就是加载不同的组件.</em></p><blockquote><p>这里之前的那个问题可以说得到了解决</p><p>在企业实训的阶段中, 我们采用前端Vue+后端Springboot来完成整个项目, 其中使用到了shiro作为安全框架来管理后端验证和权限访问等等. <strong>其中出现了一个问题, 就是没有办法通过shiro来对访问的url进行限制,只能限制请求数据的接口</strong></p><p>🐷🐷🐷🐷🐷🐷</p><p>可以说这跟Vue的前端路由有很大的关系, 虽然我们把项目部署到了服务器上,但是依然采用的是前端路由的方式, 相当于请求的url地址根本没有经过后端. 也就不能被shiro管理, 从而进行权限验证并拦截. 而请求数据的接口就不一样了, 它们是真正向后端发起请求的.shiro是可以接受到, 并且进行拦截的.</p><p>👍👍👍👍👍</p><p>所以出现了这种问题,而我们的解决方案也很正确. 在需要拦截的地方使用了前端路由管理的方式. 只是当时这个问题的原因没有探讨的很清楚,虽然观察到了出现问题的现象, 但是没有从原理上里面出现问题的原因. </p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue脚手架&quot;&gt;&lt;a href=&quot;#Vue脚手架&quot; class=&quot;headerlink&quot; title=&quot;Vue脚手架&quot;&gt;&lt;/a&gt;Vue脚手架&lt;/h1&gt;&lt;p&gt;Vue脚手架是一个基于Vue.js进行快速开发的完整系统，是一个专门为Vue应用快速搭建繁杂项目结构的脚手架</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Vue" scheme="https://laobameishijia.github.io/tag/Vue/"/>
    
  </entry>
  
  <entry>
    <title>财经-基金-3-评价指标</title>
    <link href="https://laobameishijia.github.io/2021/11/17/cai-jing-ji-jin-3-ping-jie-zhi-biao/"/>
    <id>https://laobameishijia.github.io/2021/11/17/cai-jing-ji-jin-3-ping-jie-zhi-biao/</id>
    <published>2021-11-17T09:25:00.000Z</published>
    <updated>2021-12-02T13:19:30.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="评价基金的方法"><a href="#评价基金的方法" class="headerlink" title="评价基金的方法"></a>评价基金的方法</h1><p>![指数基金估值方法分析汇总]](<a href="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211117201731.png">https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211117201731.png</a>)</p><h2 id="博格公式法"><a href="#博格公式法" class="headerlink" title="博格公式法"></a>博格公式法</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211117201432.png" alt="指导方法"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;评价基金的方法&quot;&gt;&lt;a href=&quot;#评价基金的方法&quot; class=&quot;headerlink&quot; title=&quot;评价基金的方法&quot;&gt;&lt;/a&gt;评价基金的方法&lt;/h1&gt;&lt;p&gt;![指数基金估值方法分析汇总]](&lt;a href=&quot;https://laoba-1304292449</summary>
      
    
    
    
    <category term="财经" scheme="https://laobameishijia.github.io/category/%E8%B4%A2%E7%BB%8F/"/>
    
    
    <category term="基金" scheme="https://laobameishijia.github.io/tag/%E5%9F%BA%E9%87%91/"/>
    
  </entry>
  
  <entry>
    <title>逆向工程核心原理-5-UPackPE文件头分析</title>
    <link href="https://laobameishijia.github.io/2021/11/17/ni-xiang-gong-cheng-he-xin-yuan-li-5-upackpe-wen-jian-tou-fen-xi/"/>
    <id>https://laobameishijia.github.io/2021/11/17/ni-xiang-gong-cheng-he-xin-yuan-li-5-upackpe-wen-jian-tou-fen-xi/</id>
    <published>2021-11-17T09:25:00.000Z</published>
    <updated>2021-12-02T13:19:30.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UPackPE文件头分析"><a href="#UPackPE文件头分析" class="headerlink" title="UPackPE文件头分析"></a>UPackPE文件头分析</h1><h2 id="分析UPack的PE头"><a href="#分析UPack的PE头" class="headerlink" title="分析UPack的PE头"></a>分析UPack的PE头</h2><h3 id="重叠文件头"><a href="#重叠文件头" class="headerlink" title="重叠文件头"></a>重叠文件头</h3><p>重叠文件头是其他压缩器经常使用的技法，借助该方法可以把MZ文件头(IMAGE_DOS_HEADER)与PE文件头(IMAGE_NT_HEADERS)巧妙的叠加在一起。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118092257.png" alt="重叠文件头的对比">  </p><p>MZ文件头(IMAGE_DOS_HEADER)中有以下两个重要成员。其余的成员对程序运行无意义</p><blockquote><p>offset(0) e_magic : Magic number = 4D5A(‘MZ’)<br>offset(3C) e_lfanew: File address of new exe header</p></blockquote><p>问题在于PE文件格式规范，IMAGE_NT_HEADERS的起始位置是”可变的”，由e_lfanew来决定。</p><p><strong>正常的情况下</strong>：<code>e_lfanew = MZ文件头大小(40) + DOS存根大小(可变：VC++下为A0) = E0</code></p><p>这并不违反规定，只是钻了规范本身的空子</p><h3 id="IMAGE-FILE-HEADER-SizeOfOptionalHeader"><a href="#IMAGE-FILE-HEADER-SizeOfOptionalHeader" class="headerlink" title="IMAGE_FILE_HEADER.SizeOfOptionalHeader"></a>IMAGE_FILE_HEADER.SizeOfOptionalHeader</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118093808.png" alt="正常与修改后的对比"></p><p>从PE头文件来看，<strong>IMAGE_OPTIONAL_HEADER</strong>的起始偏移加上<strong>SizeOfOptionalHeader</strong>的值后才是<strong>IMAGE_SECTION_HEADER</strong>。增大<strong>SizeOfOptionalHeader</strong>以后，就相当于在<strong>IMAGE_OPTIONAL_HEADER</strong>与<strong>IMAGE_SECTION_HEADER</strong>之间增加了额外的空间，Upack就在这个区域增加解压代码。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118095011.png" alt="简要原理"></p><h2 id="重叠节区"><a href="#重叠节区" class="headerlink" title="重叠节区"></a>重叠节区</h2><p>Upack重叠PE节区与文件头</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118200644.png" alt="重叠示意图"></p><p>❓❓❓❓看的不是很明白,这里面尤其第一\第二节区, 它们确实是被重叠到Header上面了,但是内容上是怎么重叠的呢?肯定要删去一些东西把~~~</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118200732.png" alt="解压后的第一个节区"></p><p>映射的话, 应该不算很难, 更改加载的虚拟地址就行了.</p><h2 id="RVA-to-RAW"><a href="#RVA-to-RAW" class="headerlink" title="RVA to RAW"></a>RVA to RAW</h2><p>利用了PE装载器发现第一个节区的PointerToRawData(10)不是FileAlignment(200)的整数倍时,它会强制将其识别为整数倍.(该情况下为0); 这样做的话, Upack文件就可以正常运行, 但是很多PE相关使用程序就会发生错误.</p><h2 id="导入表"><a href="#导入表" class="headerlink" title="导入表"></a>导入表</h2><p>这个emm,也没看懂</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118202538.png" alt="导入表的地址"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118202409.png" alt="第三个节区地址"></p><p>按照上面的将RVA-&gt;RAW</p><blockquote><p>RAW = RVA (271EE) - VirtualOffset(27000) + RawOffset(0)  = 1EE<br>注意: 3rd Section的RawOffset值不是10,而会强制变换为0</p></blockquote><p>书上说该处就是Upack节区隐藏玄机的地方</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118203940.png" alt="文件偏移IEE--第一个结构体"></p><p>上面所选区域就是IMAGE_IMPORT_DESCRIPTOR结构体组成的数组, 偏移IEE~201为第一个结构体, 其后既不是第二个结构体, 也不是NULL结构体</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118203752.png" alt="3rd节区映射到内存"></p><hr><p>❓❓❓❓ 为什么偏移200是第三个节区的结束呢? 之前的节区表里面, 写的是<code>RawSize为 1F0</code></p><hr><p>从文件看导入表好像是坏了,但是在加载到内存里面之后,看起来又是好的. </p><h2 id="导入地址表"><a href="#导入地址表" class="headerlink" title="导入地址表"></a>导入地址表</h2><p>通过上面结构体的数据, 得到</p><table><thead><tr><th>偏移</th><th>成员</th><th>RVA</th></tr></thead><tbody><tr><td>1EE</td><td>OriginalFistThunk(INT)</td><td>0</td></tr><tr><td>1FA</td><td>Name</td><td>2</td></tr><tr><td>1FE</td><td>FirstThunk(IAT)</td><td>11E8</td></tr></tbody></table><p>Name 的RVA是2, 它属于Header区域,因为第一个节区是从RVA 1000开始的.</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118210327.png" alt="文件偏移2"></p><p>😱😱😱这样看的话,好像Upack把数据重复利用了?! 既可以是Kernel32.dll, 又可以代表其他含义?</p><p>FirstThunk(IAT) 转换为RAW是<code>IE8</code></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118210552.png" alt="IE8"></p><p>这部分区域就是IAT域, 同时也作为INT来使用. 也就是说该处是 <code>Name Pointer(RVA)</code>数组 RVA 28/BE, 其结束是NULL. RVA位置上存放着导入函数的 <code>Ordinal+名称字符串</code></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211118211013.png" alt="RVA 28"></p><p>Q: 这样的话,导入函数最终的地址放到哪里去了?? </p><p>A: 这只是压缩过的代码,最后还得解压缩,应该会回复成正常的样子的…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;UPackPE文件头分析&quot;&gt;&lt;a href=&quot;#UPackPE文件头分析&quot; class=&quot;headerlink&quot; title=&quot;UPackPE文件头分析&quot;&gt;&lt;/a&gt;UPackPE文件头分析&lt;/h1&gt;&lt;h2 id=&quot;分析UPack的PE头&quot;&gt;&lt;a href=&quot;#分析</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="逆向工程核心原理" scheme="https://laobameishijia.github.io/tag/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
</feed>
