<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>老叭美食家</title>
  
  <subtitle>永远热爱生活</subtitle>
  <link href="https://laobameishijia.github.io/atom.xml" rel="self"/>
  
  <link href="https://laobameishijia.github.io/"/>
  <updated>2021-10-19T08:59:42.871Z</updated>
  <id>https://laobameishijia.github.io/</id>
  
  <author>
    <name>老叭美食家</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>汇编语言学习-课程设计</title>
    <link href="https://laobameishijia.github.io/2021/10/18/hui-bian-yu-yan-xue-xi-ke-cheng-she-ji/"/>
    <id>https://laobameishijia.github.io/2021/10/18/hui-bian-yu-yan-xue-xi-ke-cheng-she-ji/</id>
    <published>2021-10-18T09:25:00.000Z</published>
    <updated>2021-10-19T08:59:42.871Z</updated>
    
    <content type="html"><![CDATA[<h1 id="课程设计"><a href="#课程设计" class="headerlink" title="课程设计"></a>课程设计</h1><p>在整个课程中,我们一共有两个课程设计,编写两个比较综合的程序,这是第一个。任务:将实验7中的power idea公司的数据按照图10.2所示的格式在屏幕上显示出来。</p><p><strong>效果</strong><br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211018160247.png" alt="20211018160247"></p><h2 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h2><ul><li>从数字转换成字符串–通过除以10来不断获取余数,在加上30,最后再逆向输出</li><li>因为程序要显示的数据有些已经大于65535,应该编写一个新的数据到字符串转换的子程序,完成dword型到字符串的转换</li><li>在循环中如何选择寄存器(组合)来实现对有规律数据的复制</li><li>对数据存储结构和控制移位的寄存器值的变化的控制</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然实现了效果,但是在思路上还是比较凌乱,尤其是在整体的思路上面.还是改不了边写边改的毛病.</p><ul><li><input disabled="" type="checkbox"> 后面还是要不断的把代码再优化优化</li></ul><h2 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h2><h3 id="寄存器寻址组合"><a href="#寄存器寻址组合" class="headerlink" title="寄存器寻址组合"></a>寄存器寻址组合</h3><p>已知的是 di+bp / bx+si / bx+di 这几种可以用来在内存中遍历数据,在用之前,需要搞清楚,数据元素的确定最少需要几个变化的值来定位。</p><h3 id="条件指令的转移范围"><a href="#条件指令的转移范围" class="headerlink" title="条件指令的转移范围"></a>条件指令的转移范围</h3><p>条件指令的转移范围只能是从(-128-127),如果想要跳转的位置超过了这个范围,可以先跳到附近的位置,再在附近的位置利用无条件指令跳到想跳到的位置。</p><h3 id="汇编语言清除屏幕输出"><a href="#汇编语言清除屏幕输出" class="headerlink" title="汇编语言清除屏幕输出"></a>汇编语言清除屏幕输出</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">mov ah,15int 10hmov ah,0int 10h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><ul><li>哪些寄存器在循环的过程中需要变化,哪些寄存器需要在下一次循环或者调用子程序之前初始化,这些都要搞清楚</li><li>再利用div等有范围和大小限制的指令时,考虑一下是否会有溢出的情况</li><li>jmp和je等条件跳转指令如何实现循环的过程</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">;TODO ;1.现在 char段前面四个字节的年份复制完成了 √;2.着手将收入转换位为字符串并存在char段中  √;3.下一步是 将雇员数转换为字符串存在char段中,这个应该不用divdw了 √;4.最后一步就是显示了,不过应该也是比较头疼的把 √;整理TODO;1.整理一下到底哪几个寄存器可以组合起来用来寻址,我快疯了~~~;已知的是di+bp/bx+si/bx+diassume cs:codesg,ds:datadata segment    ;0    db '1975','1976','1977','1978','1979','1980','1981','1982','1983'    db '1984','1985','1986','1987','1988','1989','1990','1991','1992'    db '1993','1994','1995'    ;54H    dd 16,22,382,1356,2390,8000,160000,24486,50065,97479,140417,197514    dd 345980,590827,803530,1183000,1843000,2759000,3753000,4649000,5937000        ;A8H    dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793,4037,5635,8226    dw 11542,14430,15257,17800data endstable segment    db 21 dup ('year summ ne ?? ')table endschar segment    db 672 dup(0) ;672 = 32*21 每一年的数据占23个字节(取个整数刚好是32个字节-16的倍数), 一共有21年    ;00 XXXX    ;03 XXXX    ;06 XXXX    ;09 XXXX    ;年份 1997          4字节    ;空格               1字节-5    ;收入 max = 5937000 7个字节    ;空格               1字节-13        ;雇员数 max = 17800 5个字节    ;空格               1字节-19    ;人均收入 max = 333  3个字节    ;空格               1字节char endstestsg segment    db 1680 dup(0) testsg segmentcodesg segmentstart:    mov ah,15    int 10h    mov ah,0    int 10h    mov ax,data    mov ds,ax    mov ax,table    mov es,ax    call calculate_income    mov ax,table    mov ds,ax    mov ax,char    mov es,ax    call duplicate_year        call num_char    call employees_char    call average_salary_char    call show_str        mov ax,4c00h    int 21h;将数据存入显存当中show_str:    mov ax,char    mov ds,ax    mov ax,0B800H    mov es,ax        mov dh,4;行号    mov dl,0;列号    mov cl,2;颜色    mov bx,0    show_str_year:        push dx        ;找行号对应的内存地址        mov ah,00        mov al,160        mul dh        mov bp,ax        ;找列对应的内存地址        mov ah,00        mov al,2        mul dl        mov di,ax                ; ;找行号对应的内存地址--数据段        ; mov ah,00        ; mov al,10H        ; mov dl,dh        ; mov dh,0        ; mul dx        ; mov bx,ax        ;把颜色转移一下        mov al,cl        push cx        mov si,0        show_str_year_loop:            mov cl,ds:[bx+si]            mov ch,0            jcxz show_str_year_loop_ok            mov es:[bp+di],cl            mov es:[bp+di+1],al            add di,2            add si,1            jmp short  show_str_year_loop        show_str_year_loop_ok:            pop cx            mov dl,10;列号            ;更新下一个列地址            mov ah,00            mov al,2            mul dl            mov di,ax            ;把颜色再设置回来            mov al,cl                push cx        mov si,0        show_str_income_loop:            mov cl,ds:[bx+si+5]            mov ch,0            jcxz show_str_income_loop_ok            mov es:[bp+di],cl            mov es:[bp+di+1],al            add di,2            add si,1            jmp short  show_str_income_loop        show_str_income_loop_ok:            pop cx            mov dl,20;列号            ;更新下一个列地址            mov ah,00            mov al,2            mul dl            mov di,ax            ;把颜色再设置回来            mov al,cl                push cx        mov si,0        show_str_employees_loop:            mov cl,ds:[bx+si+13]            mov ch,0            jcxz show_str_employees_loop_ok            mov es:[bp+di],cl            mov es:[bp+di+1],al            add di,2            add si,1            jmp short  show_str_employees_loop        show_str_employees_loop_ok:            pop cx            mov dl,30;列号            ;更新下一个列地址            mov ah,00            mov al,2            mul dl            mov di,ax            ;把颜色再设置回来            mov al,cl        push cx        mov si,0        show_str_average_loop:            mov cl,ds:[bx+si+19]            mov ch,0            jcxz show_str_average_loop_ok            mov es:[bp+di],cl            mov es:[bp+di+1],al            add di,2            add si,1            jmp short  show_str_average_loop        show_str_average_loop_ok:            pop cx            mov dl,40;列号            ;更新下一个列地址            mov ah,00            mov al,2            mul dl            mov di,ax            ;把颜色再设置回来            mov al,cl                       pop dx        add bx,20H        add dh,1;行号加一        mov dl,0;列号清零        mov ax,21        sub al,dh        cmp byte ptr al,0        ; cmp byte ptr dh,21        ;je show_str_ok;这很明显不相等啊,为什么还跳转了？        ;你应该是跳转到循环里才对,如果不是跳到循环里,它其实没有发生跳转,只是按顺序往下执行刚好到下面了        je show_str_ok;这样写也跳转了。。？？        show_str_year_relay:            jmp show_str_year    show_str_ok:        ret;把人均工资部分转换成字符串average_salary_char:    mov bx,0    mov di,0    mov cx,21    average_salary_char_all:        push cx        mov ax,ds:[bx+0DH]        mov dx,0        mov si,0        mov bp,10        average_salary_char_one:                div bp            cmp ax,0            je average_salary_char_one_ok            push dx            mov dx,0            inc si            jmp average_salary_char_one        average_salary_char_one_ok:            push dx            inc si                        mov cx,si            mov si,0            mov bp,0            average_salary_char_one_ok_loop:                pop ax                add al,30H                mov es:[di+bp+19],al                inc bp                loop average_salary_char_one_ok_loop        pop cx        add bx,10H        add di,20H        loop average_salary_char_all    ret;把雇员数部分转换成字符串employees_char:    mov bx,0    mov di,0    mov cx,21    employees_char_all:        push cx        mov ax,ds:[bx+0AH]        mov dx,0        mov si,0        mov bp,10        employees_char_one:                div bp            cmp ax,0            je employees_char_one_ok            push dx            mov dx,0            inc si            jmp employees_char_one        employees_char_one_ok:            push dx            inc si                        mov cx,si            mov si,0            mov bp,0            employees_char_one_ok_loop:                pop ax                add al,30H                mov es:[di+bp+13],al                inc bp                loop employees_char_one_ok_loop        pop cx        add bx,10H        add di,20H        loop employees_char_all    ret;把收入部分的数字转换为字符串存储到内存当中num_char:    mov bx,0    mov cx,21    num_char_loop:        push cx                mov si,0        mov di,0        mov ax,ds:[bx+5H]        mov dx,ds:[bx+7H]        mov cx,0AH        ;具体的一个数转换为字符        num_char_loop_div:            call divdw            mov bp,0            ;如果dx和ax都为零说明该数转换完成            mov bp,dx            or bp,ax            cmp bp,0            je num_char_loop_div_ok            push cx;余数入栈            inc si            mov cx,0AH;每次跳回去之前要把cx再设置为零            jmp num_char_loop_div            num_char_loop_div_ok:                ;最后一个商小于10,上面没办法入栈了                push cx;在这里把这个入栈                inc si                mov cx,si;si中保留着这个具体数的所有余数                mov bp,0                mov ax,2H                mul bx                 mov di,ax                 num_char_loop_div_ok_loop:                        pop ax                    add ax,30H                    mov es:[di+5H+bp],al                    add bp,1                    loop num_char_loop_div_ok_loop                ; ;填了个空格                ; mov al,' '                ; mov es:[di+5H+bp],al        pop cx        add bx,10H        loop num_char_loop;把data段中的年份复制到char段里面去duplicate_year:    mov bx,0    mov si,0    mov di,0    mov cx,21    duplicate_year_all:        push cx        mov cx,2        mov bx,0        duplicate_year_year:            mov ax,ds:[di+bx]            mov es:[si+bx],ax            add bx,2            loop duplicate_year_year        ; ;添个空格         ; mov al,' '        ; mov es:[si+bx],al        add si,20H        add di,10H        pop cx        loop duplicate_year_all    ret;刚好是之前计算人均收入程序calculate_income:    mov bx,0;bx定位data段,bx year和收入都是四个字节可以公用,但是雇员数是两个字节的没办法公用    mov bp,0;bp定位es段    mov di,0;di用来在循环中服务于雇员数,因为它是两个字节,没办法跟year和outcome公用一个递增寄存器    mov cx,21    overall:        push cx        mov cx,2        mov si,0        year:            ;年份的4字节---两个字            mov ax,ds:[bx+si]            mov es:[bp+si],ax            add si,2            loop year        mov cx,2        mov si,0        outcome:            ;收入的4字节---两个字            mov ax,ds:[bx+54H+si]            mov es:[bp+5H+si],ax            add si,2            loop outcome        ;雇员数---一个字        mov ax,ds:[di+0A8H]        mov es:[bp+0AH],ax        ;计算人均收入        mov ax,es:[bp+5H];计算人均收入的,要用es的定位,那偏移量就得按照es的来。最开始写成ds的定位了[bx+54H]了        mov dx,es:[bp+5H+2]        div word ptr es:[bp+0AH]        mov es:[bp+0DH],ax        ;所有的空格        ;第一次没有考虑到空格是一个字节,这里不应该用16位的,应该用8位的        mov al,' '        mov es:[bp+4H],al        mov es:[bp+9H],al        mov es:[bp+0FH],al        pop cx        add di,2        add bx,4        add bp,16        loop overall    ret;名称：divdw;功能：进行不会产生溢出的除法运算,被除数为dword,除数为word.结果为dword;参数: ax dword的低16位 | dx dword高16位 | cx除数16位;返回: dx 结果的高16位, ax 结果的低16位, cx 余数;应用举例：计算 1000000/10(F4240H/0AH);结果: dx = 0001H  ax = 86A0H cx = 0divdw:    push si    push bx    push ax    mov ax,dx    div cl    mov bl,al    mov bh,00H    mov al,ah    mov ah,00H;bx保留商,ax保留余数    pop si    mov dx,si    mov dx,ax    mov ax,si    div cx;32/16 ax余数,dx商    mov si,bx    mov bx,dx    mov dx,si    mov cx,bx    pop bx    pop si    retcodesg endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;课程设计&quot;&gt;&lt;a href=&quot;#课程设计&quot; class=&quot;headerlink&quot; title=&quot;课程设计&quot;&gt;&lt;/a&gt;课程设计&lt;/h1&gt;&lt;p&gt;在整个课程中,我们一共有两个课程设计,编写两个比较综合的程序,这是第一个。任务:将实验7中的power idea公司的数据按</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="汇编" scheme="https://laobameishijia.github.io/tag/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>解决主题代码块没有行号的问题</title>
    <link href="https://laobameishijia.github.io/2021/10/18/jie-jue-zhu-ti-dai-ma-kuai-mei-you-xing-hao-de-wen-ti/"/>
    <id>https://laobameishijia.github.io/2021/10/18/jie-jue-zhu-ti-dai-ma-kuai-mei-you-xing-hao-de-wen-ti/</id>
    <published>2021-10-18T09:25:00.000Z</published>
    <updated>2021-10-19T08:59:42.875Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决主题代码块没有行号的问题"><a href="#解决主题代码块没有行号的问题" class="headerlink" title="解决主题代码块没有行号的问题"></a>解决主题代码块没有行号的问题</h1><p>也是看了网上许多的解决方案,因为自己并不是很清楚这个hexo渲染页面详细的原理,所以对于一些基本的解决方案并没有自己的思考。通过观察别人的博客,通过控制台看其他人的css、js文件,终于发现可能是主题本身就没有写这部分,所以即使设置改回来了,还是没有办法实现。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1-在主题下的source-css-matery-css下添加如下代码"><a href="#1-在主题下的source-css-matery-css下添加如下代码" class="headerlink" title="1.在主题下的source/css/matery.css下添加如下代码"></a>1.在主题下的source/css/matery.css下添加如下代码</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211019164659.png" alt="具体目录"></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.line-numbers-rows</span> <span class="token punctuation">&#123;</span>    <span class="token property">border-right-width</span><span class="token punctuation">:</span> 0px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.line-numbers</span> <span class="token punctuation">&#123;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 1.5rem 1.5rem 1.5rem 3.5rem <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 1rem 0 <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #272822<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 0.35rem<span class="token punctuation">;</span>    <span class="token property">tab-size</span><span class="token punctuation">:</span> 4<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-在主题下的source-libs-prism-prism-css中添加如下代码"><a href="#2-在主题下的source-libs-prism-prism-css中添加如下代码" class="headerlink" title="2.在主题下的source/libs/prism/prism.css中添加如下代码"></a>2.在主题下的source/libs/prism/prism.css中添加如下代码</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">pre[class*="language-"].line-numbers</span> <span class="token punctuation">&#123;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token property">padding-left</span><span class="token punctuation">:</span> 3.8em<span class="token punctuation">;</span> <span class="token property">counter-reset</span><span class="token punctuation">:</span> linenumber<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">pre[class*="language-"].line-numbers > code</span> <span class="token punctuation">&#123;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token property">white-space</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.line-numbers .line-numbers-rows</span> <span class="token punctuation">&#123;</span> <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span> <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> -3.8em<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 3em<span class="token punctuation">;</span> <span class="token comment">/* works for line-numbers below 1000 lines */</span> <span class="token property">letter-spacing</span><span class="token punctuation">:</span> -1px<span class="token punctuation">;</span> <span class="token property">border-right</span><span class="token punctuation">:</span> 1px solid #999<span class="token punctuation">;</span> <span class="token property">-webkit-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token property">-moz-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token property">-ms-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token property">user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token selector">.line-numbers-rows > span</span> <span class="token punctuation">&#123;</span>  <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">counter-increment</span><span class="token punctuation">:</span> linenumber<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token selector">.line-numbers-rows > span:before</span> <span class="token punctuation">&#123;</span>   <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">counter</span><span class="token punctuation">(</span>linenumber<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token property">color</span><span class="token punctuation">:</span> #999<span class="token punctuation">;</span>   <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>   <span class="token property">padding-right</span><span class="token punctuation">:</span> 0.8em<span class="token punctuation">;</span>   <span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;解决主题代码块没有行号的问题&quot;&gt;&lt;a href=&quot;#解决主题代码块没有行号的问题&quot; class=&quot;headerlink&quot; title=&quot;解决主题代码块没有行号的问题&quot;&gt;&lt;/a&gt;解决主题代码块没有行号的问题&lt;/h1&gt;&lt;p&gt;也是看了网上许多的解决方案,因为自己并不是很</summary>
      
    
    
    
    <category term="hexo主题" scheme="https://laobameishijia.github.io/category/hexo%E4%B8%BB%E9%A2%98/"/>
    
    
    <category term="代码块行数" scheme="https://laobameishijia.github.io/tag/%E4%BB%A3%E7%A0%81%E5%9D%97%E8%A1%8C%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言学习-call和ret指令</title>
    <link href="https://laobameishijia.github.io/2021/10/16/hui-bian-yu-yan-xue-xi-call-he-ret-zhi-ling/"/>
    <id>https://laobameishijia.github.io/2021/10/16/hui-bian-yu-yan-xue-xi-call-he-ret-zhi-ling/</id>
    <published>2021-10-16T09:25:00.000Z</published>
    <updated>2021-10-19T08:59:42.871Z</updated>
    
    <content type="html"><![CDATA[<h1 id="call和ret指令"><a href="#call和ret指令" class="headerlink" title="call和ret指令"></a>call和ret指令</h1><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211016111954.png" alt="思维导图"></p><p>关于使用栈来传递参数并用ret返回的实际例子还是需要多看才行。</p><h2 id="综合实验"><a href="#综合实验" class="headerlink" title="综合实验"></a>综合实验</h2><h3 id="显示字符串"><a href="#显示字符串" class="headerlink" title="显示字符串"></a>显示字符串</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">名称：show_str功能：在指定的位置,用指定的颜色,显示一个用0结束的字符串参数：dh 行号(0-24), dl 列号 0-79, cl颜色, ds:si指向字符串的首地址返回: 无应用举例：在屏幕的8行3列,用绿色显示出data段中的字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codedata segment    db 'Welcome to masm!',0data endscode segmentstart:    mov dh,8    mov dl,3    mov cl,2    mov ax,data    mov ds,ax    mov si,0    call show_str        mov ax,4c00h    int 21hshow_str:    push es    push bp    push bx    mov ax,0B800H    mov es,ax    ;找行号对应的内存地址    mov al,160    mul dh    mov bp,ax    sub bp,160    ;找列对应的内存地址    mov al,2    mul dl    mov di,ax    sub di,2    ;把颜色转移一下    mov bl,cl    push cxs:     mov cl,ds:[si]    mov ch,0    jcxz ok    mov es:[bp+di],cl    mov es:[bp+di+1],bl    add di,2    add si,1    jmp short sok:    pop cx    pop bx    pop bp    pop es    retcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211016112701.png" alt="显示字符串"></p><h3 id="解决除法溢出的问题"><a href="#解决除法溢出的问题" class="headerlink" title="解决除法溢出的问题"></a>解决除法溢出的问题</h3><p>用div指令做出发的时候可能产生除法溢出,比如:1000000/10就不能用div指令来算</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">名称：divdw功能：进行不会产生溢出的除法运算,被除数为dword,除数为word.结果为dword参数: ax dword的低16位 | dx dword高16位 | cx除数返回: dx 结果的高16位, ax 结果的低16位, cx 余数应用举例：计算 1000000/10(F4240H/0AH)结果: dx = 0001H  ax = 86A0H cx = 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codesgdatasg segmentdatasg endscodesg segmentstart:    mov ax,4240H    mov dx,000FH    mov cx,0AH    call divdw    mov ax,4c00h    int 21h;这里面就是因为 div 被除数默认放在ax | dx(高)和ax(低)中,所以比较麻烦;除数可以放在寄存器里也可以放在内存单元里，有8/16两种, 8-AL商 AH余数 || 16-AX商 DX余数;再就是因为数据运算要符合相同的类型,同为16或同为8,在寄存器里面换来换去的就比较麻烦divdw:    push ax    mov ax,dx    div cl    mov bl,al    mov bh,00H    mov al,ah    mov ah,00H;bx保留商,ax保留余数    pop si    mov dx,si    mov dx,ax    mov ax,si    div cx;32/16 ax余数,dx商    mov si,bx    mov bx,dx    mov dx,si    mov cx,bx    retcodesg endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行截图-1"><a href="#运行截图-1" class="headerlink" title="运行截图"></a>运行截图</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211016113513.png" alt="解决除法溢出的问题"></p><h3 id="数值显示"><a href="#数值显示" class="headerlink" title="数值显示"></a>数值显示</h3><p>将12666以字符串的形式显示到显示器上</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">名称：dtoc功能：将word型数据转变为十进制的字符串,字符串以0为结尾符参数：ax word型数据    ds:si指向字符串的首地址返回：无应用举例: 将12666以十进制的形式在屏幕的8行3列,用绿色显示出来<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="改进前代码"><a href="#改进前代码" class="headerlink" title="改进前代码"></a>改进前代码</h4><p>改进前,主要是利用在内存中的位置,来对字符串进行逆向的输出。因为算余数的话,顺序是66621得倒过来才行</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:code,ds:datadata segment    db 10 dup(0)data endscode segmentstart:    mov ax,12666    mov bx,data    mov ds,bx    mov si,0    call dtoc        mov dh,8    mov dl,3    mov cl,2    call show_str    mov ax,4c00h    int 21hdtoc:    mov dx,00    mov bh,00    mov bl,10;感觉逻辑没问题啊,商越界了 得用32/16的    div bx ;为什么会在这里卡住呢,感觉像是无限循环？？？    mov ch,00h    mov cl,dl    jcxz ok    add byte ptr cx,0030H    mov ds:[si],cx    inc si    jmp dtocok:    ;也不是不能操作栈,在之前push进去的,在这里都pop出来就不会有问题,要不然回影响ret指令pop IP    ;后面你可以再试试,这个程序还是有问题    sub si,1;运行完之后si=5,然而ds[si]此时刚好是0,所以你得减去个1才行    retshow_str:    push es    push bp    push bx    mov ax,0B800H    mov es,ax    ;找行号对应的内存地址    mov ah,00    mov al,160    mul dh    mov bp,ax    sub bp,160    ;找列对应的内存地址    mov ah,00    mov al,2    mul dl    mov di,ax    sub di,2    ;把颜色转移一下    mov bl,cl    push cxs:     mov cl,ds:[si]    mov ch,0    jcxz ok1    mov es:[bp+di],cl    mov es:[bp+di+1],bl    add di,2    sub si,1    jmp short sok1:    pop cx    pop bx    pop bp    pop es    ret        code endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="改进后代码"><a href="#改进后代码" class="headerlink" title="改进后代码"></a>改进后代码</h4><p>改进之后,利用了栈的特性,先将算出来的余数入栈,然后再出栈写到内存里.这样就刚好倒过来了。不过需要注意的是,<code>在子程序中push进去的,在ret之前都要pop出来哦！</code></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:code,ds:datadata segment    db 10 dup(0)data endscode segmentstart:    mov ax,12666    mov bx,data    mov ds,bx    mov si,0    call dtoc        mov dh,8    mov dl,3    mov cl,2    call show_str    mov ax,4c00h    int 21hdtoc:    mov dx,00    mov bh,00    mov bl,10;感觉逻辑没问题啊,商越界了 得用32/16的    div bx ;为什么会在这里卡住呢,感觉像是无限循环？？？    mov ch,00h    mov cl,dl    jcxz ok    add byte ptr cx,0030H    mov ds:[si],cx    inc si    jmp dtocok:    ;也不是不能操作栈,在之前push进去的,在这里都pop出来就不会有问题,要不然回影响ret指令pop IP    ;后面你可以再试试,这个程序还是有问题    sub si,1;运行完之后si=5,然而ds[si]此时刚好是0,所以你得减去个1才行    retshow_str:    push es    push bp    push bx    mov ax,0B800H    mov es,ax    ;找行号对应的内存地址    mov ah,00    mov al,160    mul dh    mov bp,ax    sub bp,160    ;找列对应的内存地址    mov ah,00    mov al,2    mul dl    mov di,ax    sub di,2    ;把颜色转移一下    mov bl,cl    push cxs:     mov cl,ds:[si]    mov ch,0    jcxz ok1    mov es:[bp+di],cl    mov es:[bp+di+1],bl    add di,2    sub si,1    jmp short sok1:    pop cx    pop bx    pop bp    pop es    ret        code endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行截图-2"><a href="#运行截图-2" class="headerlink" title="运行截图"></a>运行截图</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211016114256.png" alt="数值显示"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;call和ret指令&quot;&gt;&lt;a href=&quot;#call和ret指令&quot; class=&quot;headerlink&quot; title=&quot;call和ret指令&quot;&gt;&lt;/a&gt;call和ret指令&lt;/h1&gt;&lt;h2 id=&quot;思维导图&quot;&gt;&lt;a href=&quot;#思维导图&quot; class=&quot;head</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="汇编" scheme="https://laobameishijia.github.io/tag/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>美食篇-1-汉堡店</title>
    <link href="https://laobameishijia.github.io/2021/10/16/mei-shi-pian-1-han-bao-dian/"/>
    <id>https://laobameishijia.github.io/2021/10/16/mei-shi-pian-1-han-bao-dian/</id>
    <published>2021-10-16T09:25:00.000Z</published>
    <updated>2021-10-19T08:59:42.871Z</updated>
    
    <content type="html"><![CDATA[<h1 id="美食"><a href="#美食" class="headerlink" title="美食"></a>美食</h1><p>这次是跟舍友去吃的一个汉堡店,本来是想着能有那种美食视频上面看到的那样,有那种一口都塞不下的汉堡。地点就在川大望江校区地铁站的周边。</p><p>最主要是比较贵，我和室友一共花了<code>148</code>,就点了<code>两个汉堡</code>(具体价钱给忘了)`一盘鸡翅`(6个/32)</p><h2 id="汉堡"><a href="#汉堡" class="headerlink" title="汉堡"></a>汉堡</h2><p>结果这汉堡并不是很大,口感的话,我是觉得就一般,牛肉饼反而有一种腥味在。总体感觉就一般。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/D5181D27FB0D2ABF12A801D3EEE3666A.jpg" alt="汉堡1"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/C7B2046D0B0F24404CDB4355A0113227.jpg" alt="汉堡2"></p><h2 id="鸡翅"><a href="#鸡翅" class="headerlink" title="鸡翅"></a>鸡翅</h2><p>鸡翅的话,还凑合把,主要是有蜂蜜芥末的酱。个人比较喜欢</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/B977411C890AA8437C60E59E84F4538A.jpg" alt="鸡翅"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;美食&quot;&gt;&lt;a href=&quot;#美食&quot; class=&quot;headerlink&quot; title=&quot;美食&quot;&gt;&lt;/a&gt;美食&lt;/h1&gt;&lt;p&gt;这次是跟舍友去吃的一个汉堡店,本来是想着能有那种美食视频上面看到的那样,有那种一口都塞不下的汉堡。地点就在川大望江校区地铁站的周边。&lt;/p&gt;</summary>
      
    
    
    
    <category term="美食" scheme="https://laobameishijia.github.io/category/%E7%BE%8E%E9%A3%9F/"/>
    
    
    <category term="成都" scheme="https://laobameishijia.github.io/tag/%E6%88%90%E9%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>美食篇-2-美国烤肉</title>
    <link href="https://laobameishijia.github.io/2021/10/16/mei-shi-pian-2-mei-guo-kao-rou/"/>
    <id>https://laobameishijia.github.io/2021/10/16/mei-shi-pian-2-mei-guo-kao-rou/</id>
    <published>2021-10-16T09:25:00.000Z</published>
    <updated>2021-10-19T08:59:42.871Z</updated>
    
    <content type="html"><![CDATA[<h1 id="美食"><a href="#美食" class="headerlink" title="美食"></a>美食</h1><p>这次由我室友和我还有另外两个同学一同前往，这个也是贵,最后人均花了105,不过体验还算可以。点了四个菜？名字忘了,大体就是烤肉串、意面、洋葱炒牛绒外加那种饼可以卷起来吃、烤肉三拼(鸡肉、牛肉、猪肉)</p><p>也是想体验一把视频里大口吃肉的感觉,但是回想起来,之前寒假的时候,我爸炖了好多排骨,同样是大口吃肉,为什么当时我就没有胃口吃呢？<br>为了弥补之前的遗憾,下一个寒假,我一定要将烤肉吃腻。大院子加上碳烤,想想就很过瘾。</p><h1 id="照骗"><a href="#照骗" class="headerlink" title="照骗"></a>照骗</h1><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/6DFA58B31EAAC59588475432A6AC93D7.jpg" alt="1"><br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/0CD8EF7A1D8C4E7CCCB4C33B921C5F98.jpg" alt="这个意面真的贵"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;美食&quot;&gt;&lt;a href=&quot;#美食&quot; class=&quot;headerlink&quot; title=&quot;美食&quot;&gt;&lt;/a&gt;美食&lt;/h1&gt;&lt;p&gt;这次由我室友和我还有另外两个同学一同前往，这个也是贵,最后人均花了105,不过体验还算可以。点了四个菜？名字忘了,大体就是烤肉串、意面、洋葱</summary>
      
    
    
    
    <category term="美食" scheme="https://laobameishijia.github.io/category/%E7%BE%8E%E9%A3%9F/"/>
    
    
    <category term="成都" scheme="https://laobameishijia.github.io/tag/%E6%88%90%E9%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>美食篇-3-鸡毛店</title>
    <link href="https://laobameishijia.github.io/2021/10/16/mei-shi-pian-3-ji-mao-dian/"/>
    <id>https://laobameishijia.github.io/2021/10/16/mei-shi-pian-3-ji-mao-dian/</id>
    <published>2021-10-16T09:25:00.000Z</published>
    <updated>2021-10-19T08:59:42.875Z</updated>
    
    <content type="html"><![CDATA[<h1 id="美食"><a href="#美食" class="headerlink" title="美食"></a>美食</h1><p>这次由我室友和我还有另外两个同学一同前往，这个还算可以,最后人均花了65? 点了 酸菜鱼？毛血旺？其他的忘了,这都是后面整理的了。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QQ%E5%9B%BE%E7%89%8720211016180849.jpg" alt="照骗1"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;美食&quot;&gt;&lt;a href=&quot;#美食&quot; class=&quot;headerlink&quot; title=&quot;美食&quot;&gt;&lt;/a&gt;美食&lt;/h1&gt;&lt;p&gt;这次由我室友和我还有另外两个同学一同前往，这个还算可以,最后人均花了65? 点了 酸菜鱼？毛血旺？其他的忘了,这都是后面整理的了。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="美食" scheme="https://laobameishijia.github.io/category/%E7%BE%8E%E9%A3%9F/"/>
    
    
    <category term="成都" scheme="https://laobameishijia.github.io/tag/%E6%88%90%E9%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>美食篇-4-东北菜</title>
    <link href="https://laobameishijia.github.io/2021/10/16/mei-shi-pian-4-dong-bei-cai/"/>
    <id>https://laobameishijia.github.io/2021/10/16/mei-shi-pian-4-dong-bei-cai/</id>
    <published>2021-10-16T09:25:00.000Z</published>
    <updated>2021-10-19T08:59:42.875Z</updated>
    
    <content type="html"><![CDATA[<h1 id="美食"><a href="#美食" class="headerlink" title="美食"></a>美食</h1><p>这次由我和我的两个舍友,这家店相对来说比较实惠,个人感觉也比较好吃。可能是因为自己家乡也在北方的原因。</p><ul><li>地三鲜</li><li>锅包肉—感觉跟我爸弄得差不多~~~</li><li>饺子</li><li>炸茄盒</li><li><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QQ%E5%9B%BE%E7%89%8720211016181146.jpg" alt="东北菜"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;美食&quot;&gt;&lt;a href=&quot;#美食&quot; class=&quot;headerlink&quot; title=&quot;美食&quot;&gt;&lt;/a&gt;美食&lt;/h1&gt;&lt;p&gt;这次由我和我的两个舍友,这家店相对来说比较实惠,个人感觉也比较好吃。可能是因为自己家乡也在北方的原因。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;地三鲜&lt;/</summary>
      
    
    
    
    <category term="美食" scheme="https://laobameishijia.github.io/category/%E7%BE%8E%E9%A3%9F/"/>
    
    
    <category term="成都" scheme="https://laobameishijia.github.io/tag/%E6%88%90%E9%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>美食篇-5-麦当劳</title>
    <link href="https://laobameishijia.github.io/2021/10/16/mei-shi-pian-5-mai-dang-lao/"/>
    <id>https://laobameishijia.github.io/2021/10/16/mei-shi-pian-5-mai-dang-lao/</id>
    <published>2021-10-16T09:25:00.000Z</published>
    <updated>2021-10-19T08:59:42.875Z</updated>
    
    <content type="html"><![CDATA[<h1 id="美食"><a href="#美食" class="headerlink" title="美食"></a>美食</h1><p>这次是所有的舍友了,毕竟一个舍友请客,点的麦当劳,有汉堡、可乐、炸鸡、小龙虾和粉条、薯条、披萨~~ 如果要是硬要算人均的话,应该在50左右</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QQ%E5%9B%BE%E7%89%8720211016181638.jpg" alt="麦当劳"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;美食&quot;&gt;&lt;a href=&quot;#美食&quot; class=&quot;headerlink&quot; title=&quot;美食&quot;&gt;&lt;/a&gt;美食&lt;/h1&gt;&lt;p&gt;这次是所有的舍友了,毕竟一个舍友请客,点的麦当劳,有汉堡、可乐、炸鸡、小龙虾和粉条、薯条、披萨~~ 如果要是硬要算人均的话,应该在50左右&lt;</summary>
      
    
    
    
    <category term="美食" scheme="https://laobameishijia.github.io/category/%E7%BE%8E%E9%A3%9F/"/>
    
    
    <category term="成都" scheme="https://laobameishijia.github.io/tag/%E6%88%90%E9%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>美食篇-6-陶德砂锅</title>
    <link href="https://laobameishijia.github.io/2021/10/16/mei-shi-pian-6-tao-de-sha-guo/"/>
    <id>https://laobameishijia.github.io/2021/10/16/mei-shi-pian-6-tao-de-sha-guo/</id>
    <published>2021-10-16T09:25:00.000Z</published>
    <updated>2021-10-19T08:59:42.875Z</updated>
    
    <content type="html"><![CDATA[<h1 id="美食"><a href="#美食" class="headerlink" title="美食"></a>美食</h1><p>这次是舍友和我外加上两个大寝的舍友,这次的菜也非常好吃，人均55? 可惜照骗我只有一张了。有一个鲫鱼饺子、红烧猪蹄、还有一个肥肠、还有虾仁米线,还点了一些包子。</p><p>本来想尝尝肥肠的,因为之前看别人在视频里面吃的时候,我感觉很香。结果吃了一口,差点原地~~</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/1E5077B3A17D99CD7EDF42E4F291B254.jpg" alt="照片"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;美食&quot;&gt;&lt;a href=&quot;#美食&quot; class=&quot;headerlink&quot; title=&quot;美食&quot;&gt;&lt;/a&gt;美食&lt;/h1&gt;&lt;p&gt;这次是舍友和我外加上两个大寝的舍友,这次的菜也非常好吃，人均55? 可惜照骗我只有一张了。有一个鲫鱼饺子、红烧猪蹄、还有一个肥肠、还有虾仁米</summary>
      
    
    
    
    <category term="美食" scheme="https://laobameishijia.github.io/category/%E7%BE%8E%E9%A3%9F/"/>
    
    
    <category term="成都" scheme="https://laobameishijia.github.io/tag/%E6%88%90%E9%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言学习-数据处理的两个基本问题</title>
    <link href="https://laobameishijia.github.io/2021/10/13/hui-bian-yu-yan-xue-xi-shu-ju-chu-li-de-liang-ge-ji-ben-wen-ti/"/>
    <id>https://laobameishijia.github.io/2021/10/13/hui-bian-yu-yan-xue-xi-shu-ju-chu-li-de-liang-ge-ji-ben-wen-ti/</id>
    <published>2021-10-13T09:25:00.000Z</published>
    <updated>2021-10-19T08:59:42.871Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据处理的两个基本问题"><a href="#数据处理的两个基本问题" class="headerlink" title="数据处理的两个基本问题"></a>数据处理的两个基本问题</h1><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p>还是画这样的图，感觉思路清晰一些。新的东西并不多,大多感觉还是对以往问题的一个总结。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211013102156.png" alt="思维导图"></p><h2 id="综合实验"><a href="#综合实验" class="headerlink" title="综合实验"></a>综合实验</h2><p>编程,将data段中的数据按如下格式写入到table段中,并计算21年中的人均收入(取整),结果也按照下面的格式保存在table段中。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211013102611.png" alt="题干1"><br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211013102632.png" alt="题干2"></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>  具体的思路就是,利用内外循环,大循环循环00-10H-20H这样每一行的数据,小循环循环每个数据项</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>中具体的字节\字。同时利用idata和si</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">assume cs:codesg,ds:datadata segment    ;0    db '1975','1976','1977','1978','1979','1980','1981','1982','1983'    db '1984','1985','1986','1987','1988','1989','1990','1991','1992'    db '1993','1994','1995'    ;54H    dd 16,22,382,1356,2390,8000,160000,24486,50065,97479,140417,197514    dd 345980,590827,803530,1183000,1843000,2759000,3753000,4649000,5973000        ;A8H    dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793,4037,5635,8226    dw 11542,14430,15257,17800data endstable segment    db 21 dup ('year summ ne ?? ')table endscodesg segment;正好印证了两个重点的地方 1.数据在什么地方 2.数据的大小;算人均收入的那个还没有写--------------------------------------------------------start:    mov ax,data    mov ds,ax        mov ax,table    mov es,ax;这里经常把ax写成table了    mov bx,0;bx定位data段,bx year和收入都是四个字节可以公用,但是雇员数是两个字节的没办法公用    mov bp,0;bp定位es段    mov di,0;di用来在循环中服务于雇员数,因为它是两个字节,没办法跟year和outcome公用一个递增寄存器    mov cx,21    overall:        push cx        mov cx,2        mov si,0        year:            ;年份的4字节---两个字            mov ax,ds:[bx+si]            mov es:[bp+si],ax            add si,2            loop year        mov cx,2        mov si,0        outcome:            ;收入的4字节---两个字            mov ax,ds:[bx+54H+si]            mov es:[bp+5H+si],ax            add si,2            loop outcome        ;雇员数---一个字        mov ax,ds:[di+0A8H]        mov es:[bp+0AH],ax        ;计算人均收入        mov ax,es:[bp+5H];计算人均收入的,要用es的定位,那偏移量就得按照es的来。最开始写成ds的定位了[bx+54H]了        mov dx,es:[bp+5H+2]        div word ptr es:[bp+0AH]        mov es:[bp+0DH],ax        ;所有的空格        ;第一次没有考虑到空格是一个字节,这里不应该用16位的,应该用8位的        mov al,' '        mov es:[bp+4H],al        mov es:[bp+9H],al        mov es:[bp+0FH],al        pop cx        add di,2        add bx,4        add bp,16        loop overall    ;计算收入    mov ax,4c00h    int 21hcodesg endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据处理的两个基本问题&quot;&gt;&lt;a href=&quot;#数据处理的两个基本问题&quot; class=&quot;headerlink&quot; title=&quot;数据处理的两个基本问题&quot;&gt;&lt;/a&gt;数据处理的两个基本问题&lt;/h1&gt;&lt;h2 id=&quot;思维导图&quot;&gt;&lt;a href=&quot;#思维导图&quot; class=&quot;</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="汇编" scheme="https://laobameishijia.github.io/tag/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
</feed>
