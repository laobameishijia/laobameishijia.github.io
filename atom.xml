<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>老叭美食家</title>
  
  <subtitle>永远热爱生活</subtitle>
  <link href="https://laobameishijia.github.io/atom.xml" rel="self"/>
  
  <link href="https://laobameishijia.github.io/"/>
  <updated>2021-10-06T03:52:04.163Z</updated>
  <id>https://laobameishijia.github.io/</id>
  
  <author>
    <name>老叭美食家</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>汇编语言学习-第一个程序-1</title>
    <link href="https://laobameishijia.github.io/2021/10/06/hui-bian-yu-yan-xue-xi-di-yi-ge-cheng-xu-1/"/>
    <id>https://laobameishijia.github.io/2021/10/06/hui-bian-yu-yan-xue-xi-di-yi-ge-cheng-xu-1/</id>
    <published>2021-10-06T09:25:00.000Z</published>
    <updated>2021-10-06T03:52:04.163Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于汇编程序的执行问题"><a href="#关于汇编程序的执行问题" class="headerlink" title="关于汇编程序的执行问题"></a>关于汇编程序的执行问题</h1><p>在DOS中,可执行文件中的程序P1若要运行，必须有一个正在运行的程序p2,将p1从可执行文件中加载入内存,将CPU的控制权交给它.p1才能够运行,当p1运行完毕后,应该将cpu的控制权交还给使她得以运行的程序p2</p><h2 id="思考问题"><a href="#思考问题" class="headerlink" title="思考问题"></a>思考问题</h2><ul><li>在提示符<code>C:\masm</code>后面输入可执行文件的名字”1”,按下回车enter键，这时，思考问题4.1</li><li>1.exe运行</li><li>运行结束后，返回。再次显示提示符<code>C:masm</code>.思考问题4.2</li></ul><h3 id="4-1-此时-有一个正在运行的程序将1-exe中的程序加载入内存，这个正在运行的程序是什么？它将程序加载入内存后，如何使程序得以运行？"><a href="#4-1-此时-有一个正在运行的程序将1-exe中的程序加载入内存，这个正在运行的程序是什么？它将程序加载入内存后，如何使程序得以运行？" class="headerlink" title="4.1 此时,有一个正在运行的程序将1.exe中的程序加载入内存，这个正在运行的程序是什么？它将程序加载入内存后，如何使程序得以运行？"></a>4.1 此时,有一个正在运行的程序将1.exe中的程序加载入内存，这个正在运行的程序是什么？它将程序加载入内存后，如何使程序得以运行？</h3><p>操作系统是由多个功能模块组成的庞大、复杂的软件系统。任何通用的操作系统，都要提供一个成为shell的程序，用户使用这个程序来操作计算机系统进行工作。</p><p>DOS中有一个程序command.com，这个程序在DOS中成为命令解释器，也就是DOS系统的shell。</p><p>DOS启动时，先完成其他重要的初始化工作，然后运行command.com，command.com运行后，执行完其他相关的任务后，在屏幕上显示出当前盘符和当前路径组成的提示符，等待用户输入。</p><p>用户可以输入所要执行的命令，如：cd、dir、type等，这些命令由command执行，command执行完这些命令后，再次显示由当前盘符和当前路径组成的提示符，等待用户输入。</p><p>如果用户要执行一个程序，则输入该程序的可执行文件的名称，command首先根据文件名找到可执行文件，然后将这个可执行文件中的程序加载到内存中，设置CS:IP指向程序的入口。此后command暂时停止运行，CPU运行程序。程序运行结束后，返回到command中，command再次显示出由当前盘符和当前路径组成的提示符，等待用户输入。</p><p>在DOS中，command处理各种输入：命令或要执行的程序的文件名。我们就是用过command来进行工作的。</p><h3 id="4-2-程序运行结束后，返回到了哪里？"><a href="#4-2-程序运行结束后，返回到了哪里？" class="headerlink" title="4.2 程序运行结束后，返回到了哪里？"></a>4.2 程序运行结束后，返回到了哪里？</h3><p>程序运行结束后，返回到了command中。</p><h4 id="汇编程序从写出到执行的过程"><a href="#汇编程序从写出到执行的过程" class="headerlink" title="汇编程序从写出到执行的过程"></a>汇编程序从写出到执行的过程</h4><p>编程 -&gt; 1.asm -&gt; 编译 -&gt; 1.obj -&gt; 链接 -&gt; 1.exe -&gt; 加载 -&gt; 内存中的程序 -&gt; 运行</p><h2 id="观察下面程序执行过程中，寄存器和栈顶元素的变化"><a href="#观察下面程序执行过程中，寄存器和栈顶元素的变化" class="headerlink" title="观察下面程序执行过程中，寄存器和栈顶元素的变化"></a>观察下面程序执行过程中，寄存器和栈顶元素的变化</h2><pre class=" language-text"><code class="language-text">assume cs:codesegcodeseg segmentstart:  mov ax,2000H        mov ss,ax        mov sp,0        pop ax        pop bx        push ax        push bx        pop ax        pop bx        mov ax,4c00H    int 21hcodeseg endsend startend</code></pre><p>ax bx 各出入栈。IP和SP指针在变化，其余寄存器没看到变化。栈顶元素最后还是变化到跟初始状态下一致了</p><p>PSP的头两个字节时CD20,其中的内容为</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211006115030.png" alt="PSP"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于汇编程序的执行问题&quot;&gt;&lt;a href=&quot;#关于汇编程序的执行问题&quot; class=&quot;headerlink&quot; title=&quot;关于汇编程序的执行问题&quot;&gt;&lt;/a&gt;关于汇编程序的执行问题&lt;/h1&gt;&lt;p&gt;在DOS中,可执行文件中的程序P1若要运行，必须有一个正在运行的程序</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="汇编" scheme="https://laobameishijia.github.io/tag/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言学习-寄存器-3</title>
    <link href="https://laobameishijia.github.io/2021/10/04/hui-bian-yu-yan-xue-xi-ji-cun-qi-3/"/>
    <id>https://laobameishijia.github.io/2021/10/04/hui-bian-yu-yan-xue-xi-ji-cun-qi-3/</id>
    <published>2021-10-04T09:25:00.000Z</published>
    <updated>2021-10-06T03:52:04.163Z</updated>
    
    <content type="html"><![CDATA[<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><h2 id="基本指令-1-PUSH"><a href="#基本指令-1-PUSH" class="headerlink" title="基本指令 1 PUSH"></a>基本指令 1 PUSH</h2><p>对于push指令的执行</p><ul><li>SP = SP - 2, SS:SP指向当前栈顶前面的单元,以当前栈顶前面的单元为新的栈顶;</li><li>将ax中的内容送入SS:SP指向的内存单元处,SS:SP此时指向新栈顶</li></ul><p>具体的图就不画了</p><h2 id="基本指令-2-POP"><a href="#基本指令-2-POP" class="headerlink" title="基本指令 2 POP"></a>基本指令 2 POP</h2><p>关于pop指令的执行</p><ul><li>将SS:SP指向的内存单元处的数据送入ax中</li><li>SP = SP + 2, SS:SP 指向当前栈顶下面的单元，以当前栈顶下面的单元为新的栈顶。</li></ul><p><strong>注意</strong>: 栈里面的单元是以字为单位的(2个字节),字单元的地址是两个字节地址中的低地址</p><h2 id="栈顶的超界问题"><a href="#栈顶的超界问题" class="headerlink" title="栈顶的超界问题"></a>栈顶的超界问题</h2><p>对于8086CPU不保证对栈的操作不会越界。也就是说,8086CPU只知道栈顶在何出(由SS:SP指示),而不知道我们安排的栈空间有多大。这点好像CPU只知道执行的指令在何出(由CS:IP指示),而不知道要执行的指令有多少。从这两点上我们可以看出8086CPU的工作机理,它只<code>考虑当前的情况:当前的栈顶在何处、当前要执行的指令是哪一条</code></p><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><h3 id="寄存器清零"><a href="#寄存器清零" class="headerlink" title="寄存器清零"></a>寄存器清零</h3><p>两种方式:</p><ul><li>sub ax,ax 机器码为2个字节</li><li>mov ax,0 机器码为3个字节</li></ul><h3 id="内存空间"><a href="#内存空间" class="headerlink" title="内存空间"></a>内存空间</h3><p>一段内存,可以既是代码的存储空间,又是数据的存储空间,还可以是栈空间,也可以什么也不是.关键在于CPU中寄存器的设置，即CS\IP\SS\SP\DS的指向。</p><p>我们可以用一个段来此存放数据,将它定义为 数据段 </p><p>我们可以用一个段来此存放代码,将它定义为 代码段 </p><p>我们可以用一个段来此存放栈,将它定义为 栈段</p><p>对于数据段，将它的段地址放在DS中，用mov、add、sub等访问内存单元的指令时，CPU就将我们定义的数据段中的内容当作数据来访问。</p><p>对于代码段，将它的段地址放在CS中，将段中第一条指令的偏移地址放在IP中，这样CPU就能指向我们定义的代码段中的指令。</p><p>对于栈段，将它的段地址放在SS中，将栈顶单元的偏移地址放在SP中，这样CPU在需要进行栈操作的时候，就将我们定义的栈段当作栈空间来操作。</p><p>比如我们将10000H - 1001FH 安排为代码段，并在里面存储如下代码：</p><pre class=" language-text"><code class="language-text">mov ax, 1000Hmov ss, axmov sp, 0020Hmov ax, csmov ds, axmov ax, [0]add ax, [2]mov bx, [4]add bx, [6]push axpush bxpop axpop bx</code></pre><p>设置CS = 10000H,IP=0。这段代码将得到执行，可以看到，在这段代码中，我们又将10000H - 1001FH 安排为栈段和数据段。10000H - 1001FH 这段内存，既是代码段，又是栈段和数据段。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;栈&quot;&gt;&lt;a href=&quot;#栈&quot; class=&quot;headerlink&quot; title=&quot;栈&quot;&gt;&lt;/a&gt;栈&lt;/h1&gt;&lt;h2 id=&quot;基本指令-1-PUSH&quot;&gt;&lt;a href=&quot;#基本指令-1-PUSH&quot; class=&quot;headerlink&quot; title=&quot;基本指令 1 </summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="汇编" scheme="https://laobameishijia.github.io/tag/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言学习-寄存器-2</title>
    <link href="https://laobameishijia.github.io/2021/10/02/hui-bian-yu-yan-xue-xi-ji-cun-qi-2/"/>
    <id>https://laobameishijia.github.io/2021/10/02/hui-bian-yu-yan-xue-xi-ji-cun-qi-2/</id>
    <published>2021-10-02T09:25:00.000Z</published>
    <updated>2021-10-06T03:52:04.163Z</updated>
    
    <content type="html"><![CDATA[<h1 id="寄存器-2"><a href="#寄存器-2" class="headerlink" title="寄存器-2"></a>寄存器-2</h1><h2 id="字的存储"><a href="#字的存储" class="headerlink" title="字的存储"></a>字的存储</h2><p>字的存储没什么好说的，注意下低地址就行了</p><h2 id="指令操作单元之间的关系"><a href="#指令操作单元之间的关系" class="headerlink" title="指令操作单元之间的关系"></a>指令操作单元之间的关系</h2><h3 id="mov指令"><a href="#mov指令" class="headerlink" title="mov指令"></a>mov指令</h3><p>  8086CPU不支持将数据直接送入段寄存器的操作。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211002102608.png" alt="mov指令数据流向"></p><h3 id="sub、add指令"><a href="#sub、add指令" class="headerlink" title="sub、add指令"></a>sub、add指令</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211002102642.png" alt="指令数据流向"></p><h2 id="jmp指令跳转后，cs-code-segment-会发生变化"><a href="#jmp指令跳转后，cs-code-segment-会发生变化" class="headerlink" title="jmp指令跳转后，cs code segment 会发生变化"></a>jmp指令跳转后，cs <code>code segment</code> 会发生变化</h2><p>  初始情况下 CS=2000H，IP=0，DS=1000H, AX=0, BX=0</p><pre class=" language-text"><code class="language-text">20000H-20002H mov ax,6222H20003H-20007H jmp 0ff0:010020008H-20009H mov bx,ax10000H-10002H mov ax,2000H10003H-10004H mov ds,ax10005H-10007H mov ax,[0008]10008H-1000AH mov ax,[0002]</code></pre><p>  想说的就是，在执行完<code>jmp 0ff0:0100</code>时 <code>CS 2000H-&gt;0FF0H</code> , <code>IP 0003H-&gt; 0100H</code>,而且执行到<code>mov ax,[0002]</code>后不会再跳回来</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211002104344.png" alt="汇编执行图"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;寄存器-2&quot;&gt;&lt;a href=&quot;#寄存器-2&quot; class=&quot;headerlink&quot; title=&quot;寄存器-2&quot;&gt;&lt;/a&gt;寄存器-2&lt;/h1&gt;&lt;h2 id=&quot;字的存储&quot;&gt;&lt;a href=&quot;#字的存储&quot; class=&quot;headerlink&quot; title=&quot;字的存储&quot;</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="汇编" scheme="https://laobameishijia.github.io/tag/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言学习-寄存器</title>
    <link href="https://laobameishijia.github.io/2021/10/01/hui-bian-yu-yan-xue-xi-ji-cun-qi/"/>
    <id>https://laobameishijia.github.io/2021/10/01/hui-bian-yu-yan-xue-xi-ji-cun-qi/</id>
    <published>2021-10-01T09:25:00.000Z</published>
    <updated>2021-10-06T03:52:04.163Z</updated>
    
    <content type="html"><![CDATA[<h1 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h1><h2 id="第二章-寄存器"><a href="#第二章-寄存器" class="headerlink" title="第二章 寄存器"></a>第二章 寄存器</h2><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><ol><li><p><strong>使用debug指令，将上面的程序段写入内存，逐条执行，观察每条指令执行后，CPU中相关寄存器中的内容变化。</strong></p><p> 输入指令<br> <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211001094702.png" alt="20211001094702"></p><p> 修改cs ip 使用r指令<br> <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211001094920.png" alt="20211001094920"></p><p> 执行程序 使用t指令<br> <code>具体的过程就不截图了，是ax bx ip 三个寄存器之间值的变化</code></p></li><li><p><strong>利用了三条指令计算2的八次方</strong></p><pre class=" language-text"><code class="language-text">mov ax,1add ax,axjmp 2000:0003</code></pre><p>也是通过t 命令运行程序并观察寄存器中值的变化。</p></li><li><p><strong>查看内存中的内容</strong><br>查看主板上面的内容，我是没看见。不知道是不是因为使用的是DOSbox的原因<br> <img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211001102449.png" alt="20211001102449"></p></li><li><p><strong>向内存从B8100H 开始的单元中填写数据</strong></p><p>我盲猜，作者想让读者观察到的显示是有的内存地址(ROM)不能写，有的内存地址可以写</p><p>按照书上面写的8086PC机内存地址的空间分配图来说，b8100属于显存地址空间。<br>我输入过程中的感觉很奇怪，这里面的数据会自己变化</p><p>这里按道理来说b810:0000这个存储单元中存放的应该是20H才对，不知道为什么为了30H<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211001103438.png" alt="20211001103438"></p><p>同样都是使用d指令来查询内存中的内容，按道理来说1和2处显示的应该一样才对，3和4就刚好是一样的？？？<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211001103918.png" alt="20211001103918"></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;汇编语言&quot;&gt;&lt;a href=&quot;#汇编语言&quot; class=&quot;headerlink&quot; title=&quot;汇编语言&quot;&gt;&lt;/a&gt;汇编语言&lt;/h1&gt;&lt;h2 id=&quot;第二章-寄存器&quot;&gt;&lt;a href=&quot;#第二章-寄存器&quot; class=&quot;headerlink&quot; title=&quot;第二章</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="汇编" scheme="https://laobameishijia.github.io/tag/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>更新博客主题</title>
    <link href="https://laobameishijia.github.io/2021/09/30/geng-xin-bo-ke-zhu-ti/"/>
    <id>https://laobameishijia.github.io/2021/09/30/geng-xin-bo-ke-zhu-ti/</id>
    <published>2021-09-30T09:25:00.000Z</published>
    <updated>2021-10-06T03:52:04.163Z</updated>
    
    <content type="html"><![CDATA[<h1 id="更新博客主题"><a href="#更新博客主题" class="headerlink" title="更新博客主题"></a>更新博客主题</h1><p>保研之后，除了规划一下下一步的研究生学习生活，在无意中逛其他大神的博客的时候，无意间发现了这个非常好看的主题。于是就抽空更换了一下，因为之前自己在<code>GitHub page</code>上搭建过一次，这次遇到的困难并不算多。</p><h2 id="遇到的问题以及待办"><a href="#遇到的问题以及待办" class="headerlink" title="遇到的问题以及待办"></a>遇到的问题以及待办</h2><ul><li><p>长时间不写markdown了，以至于很多插件都不太会用了，</p></li><li><p>之前文章中的代码高亮问题，也不知道是因为插件bug的原因，就是代码块好像必须要用小写才行。也懒得改之前的了，<code>后面的文章一定要按照小写的来</code>。</p></li><li><p>之前文章中的目录就不需要了，这个主题有方便的目录</p></li></ul><h3 id="计划继续完善的东西"><a href="#计划继续完善的东西" class="headerlink" title="计划继续完善的东西"></a>计划继续完善的东西</h3><ul><li><input disabled="" type="checkbox"> 在gitee上面搭建一份一样的博客</li><li><input disabled="" type="checkbox"> 还是希望深入接触一下hexo博客，后面还是希望能增添一些属于自己的东西，毕竟是自己的博客嘛</li><li><input disabled="" type="checkbox"> 这段时间反正也是比较闲，就尽量把每天学到的内容总结一下，写上来把，也算是督促自己了</li><li><input disabled="" type="checkbox"> 主页当中的图片大小会影响到下面博客文章的展示排版</li><li><input disabled="" type="checkbox"> 主页轮播图中有的图片不显示，因为他直接把md文章前面写的那些img文件拼接到cdn后面了。后面有机会看着改一下。</li><li><input disabled="" type="checkbox"> 友情链接，那几个图片显示不了，也不知道是不是跨域问题。</li><li><input checked="" disabled="" type="checkbox"> 不知道他这个目录是怎么显示的，有的有，有的没有。搞清楚一下。<strong>文章TOC设置</strong></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;更新博客主题&quot;&gt;&lt;a href=&quot;#更新博客主题&quot; class=&quot;headerlink&quot; title=&quot;更新博客主题&quot;&gt;&lt;/a&gt;更新博客主题&lt;/h1&gt;&lt;p&gt;保研之后，除了规划一下下一步的研究生学习生活，在无意中逛其他大神的博客的时候，无意间发现了这个非常好看的主题</summary>
      
    
    
    
    <category term="瞎搞" scheme="https://laobameishijia.github.io/category/%E7%9E%8E%E6%90%9E/"/>
    
    
    <category term="博客主题" scheme="https://laobameishijia.github.io/tag/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98/"/>
    
    <category term="待办" scheme="https://laobameishijia.github.io/tag/%E5%BE%85%E5%8A%9E/"/>
    
  </entry>
  
  <entry>
    <title>研究生预备学习</title>
    <link href="https://laobameishijia.github.io/2021/09/30/yan-jiu-sheng-yu-bei-xue-xi-qing-dan/"/>
    <id>https://laobameishijia.github.io/2021/09/30/yan-jiu-sheng-yu-bei-xue-xi-qing-dan/</id>
    <published>2021-09-30T09:25:00.000Z</published>
    <updated>2021-10-06T03:52:04.163Z</updated>
    
    <content type="html"><![CDATA[<h1 id="研究生预备学习"><a href="#研究生预备学习" class="headerlink" title="研究生预备学习"></a>研究生预备学习</h1><h2 id="情况介绍"><a href="#情况介绍" class="headerlink" title="情况介绍"></a>情况介绍</h2><p>  不管是运气还是个人实力，最终还是被保研到了本校网络空间安全学院继续学习。自己也选择了最开始选择网安专业最希望自己成为的那种人（二进制逆向），也找了学院里面做相关研究的导师。但是自己在本科期间并没有很好的基础。所以决定利用大四的时间，多学习一些基础的知识，以应对繁重科研压力的研究生生活</p><h2 id="主要阅读的书籍清单"><a href="#主要阅读的书籍清单" class="headerlink" title="主要阅读的书籍清单"></a>主要阅读的书籍清单</h2><h3 id="基础书籍"><a href="#基础书籍" class="headerlink" title="基础书籍"></a>基础书籍</h3><ul><li><input disabled="" type="checkbox"> 汇编语言 王爽</li><li><input disabled="" type="checkbox"> 逆向工程核心原理</li><li><input disabled="" type="checkbox"> 程序是怎样跑起来的</li></ul><h3 id="进阶书籍"><a href="#进阶书籍" class="headerlink" title="进阶书籍"></a>进阶书籍</h3><p>还在想~~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;研究生预备学习&quot;&gt;&lt;a href=&quot;#研究生预备学习&quot; class=&quot;headerlink&quot; title=&quot;研究生预备学习&quot;&gt;&lt;/a&gt;研究生预备学习&lt;/h1&gt;&lt;h2 id=&quot;情况介绍&quot;&gt;&lt;a href=&quot;#情况介绍&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="生活" scheme="https://laobameishijia.github.io/category/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="学习计划" scheme="https://laobameishijia.github.io/tag/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    
    <category term="感想" scheme="https://laobameishijia.github.io/tag/%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>数据结构--线性表</title>
    <link href="https://laobameishijia.github.io/2021/07/02/shu-ju-jie-gou-xian-xing-biao-1/"/>
    <id>https://laobameishijia.github.io/2021/07/02/shu-ju-jie-gou-xian-xing-biao-1/</id>
    <published>2021-07-02T00:00:00.000Z</published>
    <updated>2021-10-06T03:52:04.163Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>直接放代码了，题目就是王道2022线性表那节的题目。</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 线性表.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。</span><span class="token comment" spellcheck="true">//</span><span class="token macro property"># <span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"># <span class="token directive keyword">define</span> LIST_INIT_SIZE 100 </span><span class="token comment" spellcheck="true">// 线性表存储空间的初始分配量</span><span class="token macro property"># <span class="token directive keyword">define</span> LISTINCREMENT 10</span><span class="token comment" spellcheck="true">//线性表存储空间的分配增量</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> elem<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存储空间基址</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前长度</span>    <span class="token keyword">int</span> listsize<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前分配的存储容量(以sizeof(int)为单位)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>SqList<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    初始化创建*/</span>bool <span class="token function">InitList_Sq</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>elem <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>LIST_INIT_SIZE <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> LIST_INIT_SIZE <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    L<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>listsize <span class="token operator">=</span> LIST_INIT_SIZE<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">ListPrint_Sq</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">printf_s</span><span class="token punctuation">(</span><span class="token string">"该顺序表为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> L<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf_s</span><span class="token punctuation">(</span><span class="token string">"%d->"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">printf_s</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    在固定位置插入元素*/</span>bool <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//在顺序线性表L中第i个位置之前插入新的元素e</span>    <span class="token comment" spellcheck="true">//i的合法值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span>L<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">></span> L<span class="token punctuation">.</span>listsize<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前存储空间已满，增加分配</span>        <span class="token keyword">int</span><span class="token operator">*</span> newbase <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>listsize <span class="token operator">+</span> LISTINCREMENT<span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>newbase<span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span>OVERFLOW<span class="token punctuation">)</span><span class="token punctuation">;</span>        L<span class="token punctuation">.</span>elem <span class="token operator">=</span> newbase<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//新基址</span>        L<span class="token punctuation">.</span>listsize  <span class="token operator">=</span> L<span class="token punctuation">.</span>listsize <span class="token operator">+</span> LISTINCREMENT<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> q <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//q为插入位置</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>L<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p <span class="token operator">>=</span> q<span class="token punctuation">;</span> <span class="token operator">--</span>p<span class="token punctuation">)</span>        <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//插入位置的元素后移</span>    <span class="token operator">*</span>q <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token operator">++</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    删除固定位置的元素*/</span>bool <span class="token function">ListDelete_Sq</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//在顺序线性表L中删除第i个元素，并用e返回值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span>L<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//被删除元素的位置</span>    e <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> q <span class="token operator">=</span> L<span class="token punctuation">.</span>elem <span class="token operator">+</span> L<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token operator">++</span>p<span class="token punctuation">;</span> p <span class="token operator">&lt;=</span> q<span class="token punctuation">;</span> <span class="token operator">++</span>p<span class="token punctuation">)</span> <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//被删除元素之后的元素左移</span>    <span class="token operator">--</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    删除顺序表中最小的元素 √*/</span>bool <span class="token function">ListDeleteMin_Sq</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">)</span> <span class="token operator">||</span> L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">printf_s</span><span class="token punctuation">(</span><span class="token string">"长度为零"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> q <span class="token operator">=</span> L<span class="token punctuation">.</span>elem <span class="token operator">+</span> L<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> L<span class="token punctuation">.</span>elem<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> tag <span class="token operator">=</span> L<span class="token punctuation">.</span>elem<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> p <span class="token operator">&lt;=</span> q<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">&lt;</span> <span class="token operator">*</span>tag<span class="token punctuation">)</span> tag <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    e <span class="token operator">=</span> <span class="token operator">*</span>tag<span class="token punctuation">;</span>    <span class="token operator">*</span>tag <span class="token operator">=</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    顺序表逆置 √*/</span>bool <span class="token function">ListReverse_Sq</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> temp<span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token operator">*</span>q<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// C++不允许空指针，定义只是定义int*,定义了并没有实际的指向。习惯上一定要进行初始指针的初始化操作。</span>    temp <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//也或者在这里直接用int类型的test即可。</span>    <span class="token keyword">int</span> test<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> L<span class="token punctuation">.</span>length<span class="token operator">/</span> <span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">;</span>        q <span class="token operator">=</span> L<span class="token punctuation">.</span>elem <span class="token operator">+</span> L<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span>        test <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>        <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>        <span class="token operator">*</span>q <span class="token operator">=</span> test<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    删除顺序表中所有值为x的元素 √     ----无论是有序表还是无序表用这个都行，有序表可以先找到所有的元素，然后一起移动，但是从时间复杂度上面来讲是一样的    从逻辑上讲，2这个值的确被删除了    但是从存储的结构上讲，2这个值还在存储空间里，只不过在逻辑上，这个位置已经是不合法的了。(改变了顺序表的长度)*/</span>bool <span class="token function">ListDeleValue</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">!=</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>length <span class="token operator">=</span> k<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    删除值在s和t之间的节点 √    跟上面的方法很像了*/</span>bool <span class="token function">ListDeleValueBetween</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">></span> t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf_s</span><span class="token punctuation">(</span><span class="token string">"请检查参数设置\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">&lt;</span>s <span class="token operator">||</span> <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">></span> t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>length <span class="token operator">=</span> k<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    删除有序线性表中所有的重复值*/</span>bool <span class="token function">ListDeleteDuplicateValueInOrder</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>length <span class="token operator">=</span> k<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    SqList test<span class="token punctuation">;</span>    <span class="token function">InitList_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//测试删除最小的元素</span>    <span class="token comment" spellcheck="true">//int tag;</span>    <span class="token comment" spellcheck="true">//ListDeleteMin_Sq(test, tag);</span>    <span class="token comment" spellcheck="true">//printf_s("%d", tag);</span>    <span class="token comment" spellcheck="true">//测试元素逆序</span>    <span class="token comment" spellcheck="true">//ListReverse_Sq(test);</span>    <span class="token comment" spellcheck="true">//ListPrint_Sq(test);</span>    <span class="token comment" spellcheck="true">//测试删除所有值为x的元素</span>    <span class="token comment" spellcheck="true">//ListDeleValue(test, 2);</span>    <span class="token comment" spellcheck="true">//ListPrint_Sq(test);</span>    <span class="token comment" spellcheck="true">//测试删除区间内的值</span>    <span class="token comment" spellcheck="true">//ListDeleValueBetween(test,2, 5);</span>    <span class="token comment" spellcheck="true">//ListPrint_Sq(test);</span>    <span class="token comment" spellcheck="true">//测试删除有序表中的重复值</span>    <span class="token function">ListDeleteDuplicateValueInOrder</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ListPrint_Sq</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单</span><span class="token comment" spellcheck="true">// 调试程序: F5 或调试 >“开始调试”菜单</span><span class="token comment" spellcheck="true">// 入门使用技巧: </span><span class="token comment" spellcheck="true">//   1. 使用解决方案资源管理器窗口添加/管理文件</span><span class="token comment" spellcheck="true">//   2. 使用团队资源管理器窗口连接到源代码管理</span><span class="token comment" spellcheck="true">//   3. 使用输出窗口查看生成输出和其他消息</span><span class="token comment" spellcheck="true">//   4. 使用错误列表窗口查看错误</span><span class="token comment" spellcheck="true">//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目</span><span class="token comment" spellcheck="true">//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件</span></code></pre>]]></content>
    
    
    <summary type="html">线性表之顺序表手敲代码</summary>
    
    
    
    <category term="数据结构" scheme="https://laobameishijia.github.io/category/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="考研" scheme="https://laobameishijia.github.io/tag/%E8%80%83%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>斐波拉契数列时间复杂度分析</title>
    <link href="https://laobameishijia.github.io/2021/06/30/fei-bo-la-qi-shu-lie-shi-jian-fu-za-du-fen-xi/"/>
    <id>https://laobameishijia.github.io/2021/06/30/fei-bo-la-qi-shu-lie-shi-jian-fu-za-du-fen-xi/</id>
    <published>2021-06-30T00:00:00.000Z</published>
    <updated>2021-10-06T03:52:04.163Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%E6%96%90%E6%B3%A2%E6%8B%89%E5%A5%91%E6%95%B0%E5%88%97%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90">斐波拉契数列时间复杂度分析</a><ul><li><a href="#%E9%80%92%E5%BD%92%E7%89%88">递归版</a><ul><li><a href="#%E8%AF%81%E6%98%8E1">证明1</a></li><li><a href="#%E8%AF%81%E6%98%8E2">证明2</a></li></ul></li></ul></li></ul><h1 id="斐波拉契数列时间复杂度分析"><a href="#斐波拉契数列时间复杂度分析" class="headerlink" title="斐波拉契数列时间复杂度分析"></a>斐波拉契数列时间复杂度分析</h1><h2 id="递归版"><a href="#递归版" class="headerlink" title="递归版"></a>递归版</h2><p>递归版本的时间复杂度分析，真的不知道怎么分析，需要根据<code>f(n) = f(n-1) + f(n-2)</code>推出通解。这显然是个数学问题。<br>不知道为什么他们会给出这结果，难道不管通项公式的后一项了？</p><p>通项公式如下:<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210630173631.png" alt="20210630173631"></p><h3 id="证明1"><a href="#证明1" class="headerlink" title="证明1"></a>证明1</h3><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210630173802.png" alt="20210630173802"></p><h3 id="证明2"><a href="#证明2" class="headerlink" title="证明2"></a>证明2</h3><p>还是看不太懂，为什么要给加法加个1呢？<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210630174145.png" alt="20210630174145"></p>]]></content>
    
    
    <summary type="html">关于斐波拉契数列递归和</summary>
    
    
    
    <category term="数据结构" scheme="https://laobameishijia.github.io/category/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="考研" scheme="https://laobameishijia.github.io/tag/%E8%80%83%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>实训day11</title>
    <link href="https://laobameishijia.github.io/2021/06/23/shi-xun-day11/"/>
    <id>https://laobameishijia.github.io/2021/06/23/shi-xun-day11/</id>
    <published>2021-06-23T00:00:00.000Z</published>
    <updated>2021-10-06T03:52:04.163Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#test">Test</a></li><li><a href="#%E4%BD%9C%E4%B8%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0">作业功能实现</a><ul><li><a href="#%E4%BF%AE%E6%94%B9%E4%BB%A3%E7%A0%81%E6%80%9D%E8%B7%AF">修改代码思路</a></li><li><a href="#%E9%97%AE%E9%A2%98">问题</a></li></ul></li></ul><h1 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h1><p>关于git 中rebase和merge的区别<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210621145651.png" alt="20210621145651"></p><h1 id="作业功能实现"><a href="#作业功能实现" class="headerlink" title="作业功能实现"></a>作业功能实现</h1><ul><li><input checked="" disabled="" type="checkbox"> 增加时间搜索</li><li><input checked="" disabled="" type="checkbox"> 增加时间更新修改</li><li><input checked="" disabled="" type="checkbox"> 增加个人页面 并且展示当前登录用户的名称和此用户的个人信息，增加修改</li><li><input disabled="" type="checkbox"> (扩展)用户可以自定义上传头像更新 实现退出效果</li></ul><h2 id="修改代码思路"><a href="#修改代码思路" class="headerlink" title="修改代码思路"></a>修改代码思路</h2><ul><li><input disabled="" type="checkbox"> 更改前端代码，增加相应的板块</li><li><input disabled="" type="checkbox"> Mapper 添加相应的查询</li><li><input disabled="" type="checkbox"> Controller接口</li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li><p><input checked="" disabled="" type="checkbox">  用户更新里面的时间输入框无法渲染,就像是个普通的input, —-是不是跟js代码的渲染顺序有关系？？？？</p><pre><code>在回调函数里面继续写js代码就行啦</code></pre></li><li><p><input checked="" disabled="" type="checkbox">  在用户个人页面把详细的信息以pojo对应的方式传进去</p></li><li><p><input checked="" disabled="" type="checkbox">  修改了代码后记得重新打包哦！！！  否则上传到服务器的包还是之前的jar包，就会恼火很长时间。</p></li></ul>]]></content>
    
    
    <summary type="html">云服务</summary>
    
    
    
    <category term="国信安" scheme="https://laobameishijia.github.io/category/%E5%9B%BD%E4%BF%A1%E5%AE%89/"/>
    
    
    <category term="实训" scheme="https://laobameishijia.github.io/tag/%E5%AE%9E%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>leetcode7/8-找链表交点/合并有序链表</title>
    <link href="https://laobameishijia.github.io/2021/06/15/leetcode78-zhao-lian-biao-jiao-dian-he-bing-you-xu-lian-biao/"/>
    <id>https://laobameishijia.github.io/2021/06/15/leetcode78-zhao-lian-biao-jiao-dian-he-bing-you-xu-lian-biao/</id>
    <published>2021-06-15T00:00:00.000Z</published>
    <updated>2021-10-06T03:52:04.163Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#leetcode7-%E6%89%BE%E9%93%BE%E8%A1%A8%E4%BA%A4%E7%82%B9">leetcode7-找链表交点</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a><ul><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li><li><a href="#%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90">复杂度分析</a></li></ul></li></ul></li><li><a href="#leetcode8-%E5%90%88%E5%B9%B6%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8">leetcode8-合并有序链表</a><ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0-1">题目描述</a></li><li><a href="#%E6%80%9D%E8%B7%AF-1">思路</a><ul><li><a href="#%E4%BB%A3%E7%A0%81-1">代码</a></li><li><a href="#%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-1">复杂度分析</a></li></ul></li></ul></li></ul><h1 id="leetcode7-找链表交点"><a href="#leetcode7-找链表交点" class="headerlink" title="leetcode7-找链表交点"></a>leetcode7-找链表交点</h1><p>这个题目又没有好好审题，我以为的交点可以是这样的</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210615113259.png" alt="20210615113259"></p><p>没想到交点以后的所有节点应该都是重合的！</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210615113350.png" alt="20210615113350"></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>如果有相交的结点D的话,每条链的头结点先走完自己的链表长度,然后回头走另外的一条链表,那么两结点一定为相交于D点,因为这时每个头结点走的距离是一样的,都是 AD + BD + DC,而他们每次又都是前进1,所以距离相同,速度又相同,固然一定会在相同的时间走到相同的结点上,即D点。</p><ul><li><p>如果不相交 ： 如果不相交的话 假设两个链表长度不相等 一个为A 一个为B ，指针第一次走完A会去走B,另一个走完B再去走A，两个指针走的路程都是A+B。会同时为NULL 跳出循环</p></li><li><p>如果不相交且链表长度相等: 那么一个指针走A,一个指针走B，它俩同时走到NULL，相等，跳出循环</p></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-C"><code class="language-C">struct ListNode *getIntersectionNode(struct ListNode *headA, struct ListNode *headB) &#123;    struct ListNode* A, * B;    A = headA;    B = headB;    while(A!=B)&#123;        A = A == NULL ? headB : A->next;        B = B == NULL ? headA : B->next;    &#125;    return A;&#125;</code></pre><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度 <code>O(N)</code> 最差依次访问一遍 <code>A+B</code> 中的所有节点 <br><br>空间复杂度 <code>O(1)</code> 就用两个指针</p><h1 id="leetcode8-合并有序链表"><a href="#leetcode8-合并有序链表" class="headerlink" title="leetcode8-合并有序链表"></a>leetcode8-合并有序链表</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><pre class=" language-C"><code class="language-C">输入两个递增排序的链表，合并这两个链表并使新链表中的节点仍然是递增排序的。示例1：输入：1->2->4, 1->3->4输出：1->1->2->3->4->4来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</code></pre><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>leetcode的题解</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20210615164632.png" alt="20210615164632"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class=" language-C"><code class="language-C">struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2)&#123;    struct ListNode* a, *b,*c,*d;    a = l1;    b = l2;    d = c = (struct ListNode*)malloc(sizeof(struct ListNode));    while(a&&b)&#123;        if(a->val < b->val) &#123;            c->next = a;            a = a->next;            c = c->next;        &#125;        else if(a->val>=b->val)&#123;            c->next = b;            b = b->next;            c = c->next;        &#125;    &#125;    if(a == NULL) c->next = b;    else c->next = a;    return d->next;&#125;</code></pre><h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度 <code>O(M+N)</code> M为l1链表的长度 N为l2链表的长度 <br><br>空间复杂度 O(1)</p>]]></content>
    
    
    <summary type="html">找链表交点/合并有序链表</summary>
    
    
    
    <category term="链表" scheme="https://laobameishijia.github.io/category/%E9%93%BE%E8%A1%A8/"/>
    
    
    <category term="leetcode" scheme="https://laobameishijia.github.io/tag/leetcode/"/>
    
  </entry>
  
</feed>
