<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>老叭美食家</title>
  
  <subtitle>永远热爱生活</subtitle>
  <link href="https://laobameishijia.github.io/atom.xml" rel="self"/>
  
  <link href="https://laobameishijia.github.io/"/>
  <updated>2021-10-17T01:54:52.277Z</updated>
  <id>https://laobameishijia.github.io/</id>
  
  <author>
    <name>老叭美食家</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>汇编语言学习-call和ret指令</title>
    <link href="https://laobameishijia.github.io/2021/10/16/hui-bian-yu-yan-xue-xi-call-he-ret-zhi-ling/"/>
    <id>https://laobameishijia.github.io/2021/10/16/hui-bian-yu-yan-xue-xi-call-he-ret-zhi-ling/</id>
    <published>2021-10-16T09:25:00.000Z</published>
    <updated>2021-10-17T01:54:52.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="call和ret指令"><a href="#call和ret指令" class="headerlink" title="call和ret指令"></a>call和ret指令</h1><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211016111954.png" alt="思维导图"></p><p>关于使用栈来传递参数并用ret返回的实际例子还是需要多看才行。</p><h2 id="综合实验"><a href="#综合实验" class="headerlink" title="综合实验"></a>综合实验</h2><h3 id="显示字符串"><a href="#显示字符串" class="headerlink" title="显示字符串"></a>显示字符串</h3><pre class=" language-text"><code class="language-text">名称：show_str功能：在指定的位置,用指定的颜色,显示一个用0结束的字符串参数：dh 行号(0-24), dl 列号 0-79, cl颜色, ds:si指向字符串的首地址返回: 无应用举例：在屏幕的8行3列,用绿色显示出data段中的字符串</code></pre><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class=" language-text"><code class="language-text">assume cs:codedata segment    db 'Welcome to masm!',0data endscode segmentstart:    mov dh,8    mov dl,3    mov cl,2    mov ax,data    mov ds,ax    mov si,0    call show_str        mov ax,4c00h    int 21hshow_str:    push es    push bp    push bx    mov ax,0B800H    mov es,ax    ;找行号对应的内存地址    mov al,160    mul dh    mov bp,ax    sub bp,160    ;找列对应的内存地址    mov al,2    mul dl    mov di,ax    sub di,2    ;把颜色转移一下    mov bl,cl    push cxs:     mov cl,ds:[si]    mov ch,0    jcxz ok    mov es:[bp+di],cl    mov es:[bp+di+1],bl    add di,2    add si,1    jmp short sok:    pop cx    pop bx    pop bp    pop es    retcode endsend start</code></pre><h4 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211016112701.png" alt="显示字符串"></p><h3 id="解决除法溢出的问题"><a href="#解决除法溢出的问题" class="headerlink" title="解决除法溢出的问题"></a>解决除法溢出的问题</h3><p>用div指令做出发的时候可能产生除法溢出,比如:1000000/10就不能用div指令来算</p><pre class=" language-text"><code class="language-text">名称：divdw功能：进行不会产生溢出的除法运算,被除数为dword,除数为word.结果为dword参数: ax dword的低16位 | dx dword高16位 | cx除数返回: dx 结果的高16位, ax 结果的低16位, cx 余数应用举例：计算 1000000/10(F4240H/0AH)结果: dx = 0001H  ax = 86A0H cx = 0</code></pre><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class=" language-text"><code class="language-text">assume cs:codesgdatasg segmentdatasg endscodesg segmentstart:    mov ax,4240H    mov dx,000FH    mov cx,0AH    call divdw    mov ax,4c00h    int 21h;这里面就是因为 div 被除数默认放在ax | dx(高)和ax(低)中,所以比较麻烦;除数可以放在寄存器里也可以放在内存单元里，有8/16两种, 8-AL商 AH余数 || 16-AX商 DX余数;再就是因为数据运算要符合相同的类型,同为16或同为8,在寄存器里面换来换去的就比较麻烦divdw:    push ax    mov ax,dx    div cl    mov bl,al    mov bh,00H    mov al,ah    mov ah,00H;bx保留商,ax保留余数    pop si    mov dx,si    mov dx,ax    mov ax,si    div cx;32/16 ax余数,dx商    mov si,bx    mov bx,dx    mov dx,si    mov cx,bx    retcodesg endsend start</code></pre><h4 id="运行截图-1"><a href="#运行截图-1" class="headerlink" title="运行截图"></a>运行截图</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211016113513.png" alt="解决除法溢出的问题"></p><h3 id="数值显示"><a href="#数值显示" class="headerlink" title="数值显示"></a>数值显示</h3><p>将12666以字符串的形式显示到显示器上</p><pre class=" language-text"><code class="language-text">名称：dtoc功能：将word型数据转变为十进制的字符串,字符串以0为结尾符参数：ax word型数据    ds:si指向字符串的首地址返回：无应用举例: 将12666以十进制的形式在屏幕的8行3列,用绿色显示出来</code></pre><h4 id="改进前代码"><a href="#改进前代码" class="headerlink" title="改进前代码"></a>改进前代码</h4><p>改进前,主要是利用在内存中的位置,来对字符串进行逆向的输出。因为算余数的话,顺序是66621得倒过来才行</p><pre class=" language-text"><code class="language-text">assume cs:code,ds:datadata segment    db 10 dup(0)data endscode segmentstart:    mov ax,12666    mov bx,data    mov ds,bx    mov si,0    call dtoc        mov dh,8    mov dl,3    mov cl,2    call show_str    mov ax,4c00h    int 21hdtoc:    mov dx,00    mov bh,00    mov bl,10;感觉逻辑没问题啊,商越界了 得用32/16的    div bx ;为什么会在这里卡住呢,感觉像是无限循环？？？    mov ch,00h    mov cl,dl    jcxz ok    add byte ptr cx,0030H    mov ds:[si],cx    inc si    jmp dtocok:    ;也不是不能操作栈,在之前push进去的,在这里都pop出来就不会有问题,要不然回影响ret指令pop IP    ;后面你可以再试试,这个程序还是有问题    sub si,1;运行完之后si=5,然而ds[si]此时刚好是0,所以你得减去个1才行    retshow_str:    push es    push bp    push bx    mov ax,0B800H    mov es,ax    ;找行号对应的内存地址    mov ah,00    mov al,160    mul dh    mov bp,ax    sub bp,160    ;找列对应的内存地址    mov ah,00    mov al,2    mul dl    mov di,ax    sub di,2    ;把颜色转移一下    mov bl,cl    push cxs:     mov cl,ds:[si]    mov ch,0    jcxz ok1    mov es:[bp+di],cl    mov es:[bp+di+1],bl    add di,2    sub si,1    jmp short sok1:    pop cx    pop bx    pop bp    pop es    ret        code endsend start</code></pre><h4 id="改进后代码"><a href="#改进后代码" class="headerlink" title="改进后代码"></a>改进后代码</h4><p>改进之后,利用了栈的特性,先将算出来的余数入栈,然后再出栈写到内存里.这样就刚好倒过来了。不过需要注意的是,<code>在子程序中push进去的,在ret之前都要pop出来哦！</code></p><pre class=" language-text"><code class="language-text">assume cs:code,ds:datadata segment    db 10 dup(0)data endscode segmentstart:    mov ax,12666    mov bx,data    mov ds,bx    mov si,0    call dtoc        mov dh,8    mov dl,3    mov cl,2    call show_str    mov ax,4c00h    int 21hdtoc:    mov dx,00    mov bh,00    mov bl,10;感觉逻辑没问题啊,商越界了 得用32/16的    div bx ;为什么会在这里卡住呢,感觉像是无限循环？？？    mov ch,00h    mov cl,dl    jcxz ok    add byte ptr cx,0030H    mov ds:[si],cx    inc si    jmp dtocok:    ;也不是不能操作栈,在之前push进去的,在这里都pop出来就不会有问题,要不然回影响ret指令pop IP    ;后面你可以再试试,这个程序还是有问题    sub si,1;运行完之后si=5,然而ds[si]此时刚好是0,所以你得减去个1才行    retshow_str:    push es    push bp    push bx    mov ax,0B800H    mov es,ax    ;找行号对应的内存地址    mov ah,00    mov al,160    mul dh    mov bp,ax    sub bp,160    ;找列对应的内存地址    mov ah,00    mov al,2    mul dl    mov di,ax    sub di,2    ;把颜色转移一下    mov bl,cl    push cxs:     mov cl,ds:[si]    mov ch,0    jcxz ok1    mov es:[bp+di],cl    mov es:[bp+di+1],bl    add di,2    sub si,1    jmp short sok1:    pop cx    pop bx    pop bp    pop es    ret        code endsend start</code></pre><h4 id="运行截图-2"><a href="#运行截图-2" class="headerlink" title="运行截图"></a>运行截图</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211016114256.png" alt="数值显示"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;call和ret指令&quot;&gt;&lt;a href=&quot;#call和ret指令&quot; class=&quot;headerlink&quot; title=&quot;call和ret指令&quot;&gt;&lt;/a&gt;call和ret指令&lt;/h1&gt;&lt;h2 id=&quot;思维导图&quot;&gt;&lt;a href=&quot;#思维导图&quot; class=&quot;head</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="汇编" scheme="https://laobameishijia.github.io/tag/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>美食篇-1-汉堡店</title>
    <link href="https://laobameishijia.github.io/2021/10/16/mei-shi-pian-1-han-bao-dian/"/>
    <id>https://laobameishijia.github.io/2021/10/16/mei-shi-pian-1-han-bao-dian/</id>
    <published>2021-10-16T09:25:00.000Z</published>
    <updated>2021-10-17T01:54:52.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="美食"><a href="#美食" class="headerlink" title="美食"></a>美食</h1><p>这次是跟舍友去吃的一个汉堡店,本来是想着能有那种美食视频上面看到的那样,有那种一口都塞不下的汉堡。地点就在川大望江校区地铁站的周边。</p><p>最主要是比较贵，我和室友一共花了<code>148</code>,就点了<code>两个汉堡</code>(具体价钱给忘了)`一盘鸡翅`(6个/32)</p><h2 id="汉堡"><a href="#汉堡" class="headerlink" title="汉堡"></a>汉堡</h2><p>结果这汉堡并不是很大,口感的话,我是觉得就一般,牛肉饼反而有一种腥味在。总体感觉就一般。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/D5181D27FB0D2ABF12A801D3EEE3666A.jpg" alt="汉堡1"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/C7B2046D0B0F24404CDB4355A0113227.jpg" alt="汉堡2"></p><h2 id="鸡翅"><a href="#鸡翅" class="headerlink" title="鸡翅"></a>鸡翅</h2><p>鸡翅的话,还凑合把,主要是有蜂蜜芥末的酱。个人比较喜欢</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/B977411C890AA8437C60E59E84F4538A.jpg" alt="鸡翅"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;美食&quot;&gt;&lt;a href=&quot;#美食&quot; class=&quot;headerlink&quot; title=&quot;美食&quot;&gt;&lt;/a&gt;美食&lt;/h1&gt;&lt;p&gt;这次是跟舍友去吃的一个汉堡店,本来是想着能有那种美食视频上面看到的那样,有那种一口都塞不下的汉堡。地点就在川大望江校区地铁站的周边。&lt;/p&gt;</summary>
      
    
    
    
    <category term="美食" scheme="https://laobameishijia.github.io/category/%E7%BE%8E%E9%A3%9F/"/>
    
    
    <category term="成都" scheme="https://laobameishijia.github.io/tag/%E6%88%90%E9%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>美食篇-2-美国烤肉</title>
    <link href="https://laobameishijia.github.io/2021/10/16/mei-shi-pian-2-mei-guo-kao-rou/"/>
    <id>https://laobameishijia.github.io/2021/10/16/mei-shi-pian-2-mei-guo-kao-rou/</id>
    <published>2021-10-16T09:25:00.000Z</published>
    <updated>2021-10-17T01:54:52.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="美食"><a href="#美食" class="headerlink" title="美食"></a>美食</h1><p>这次由我室友和我还有另外两个同学一同前往，这个也是贵,最后人均花了105,不过体验还算可以。点了四个菜？名字忘了,大体就是烤肉串、意面、洋葱炒牛绒外加那种饼可以卷起来吃、烤肉三拼(鸡肉、牛肉、猪肉)</p><p>也是想体验一把视频里大口吃肉的感觉,但是回想起来,之前寒假的时候,我爸炖了好多排骨,同样是大口吃肉,为什么当时我就没有胃口吃呢？<br>为了弥补之前的遗憾,下一个寒假,我一定要将烤肉吃腻。大院子加上碳烤,想想就很过瘾。</p><h1 id="照骗"><a href="#照骗" class="headerlink" title="照骗"></a>照骗</h1><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/6DFA58B31EAAC59588475432A6AC93D7.jpg" alt="1"><br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/0CD8EF7A1D8C4E7CCCB4C33B921C5F98.jpg" alt="这个意面真的贵"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;美食&quot;&gt;&lt;a href=&quot;#美食&quot; class=&quot;headerlink&quot; title=&quot;美食&quot;&gt;&lt;/a&gt;美食&lt;/h1&gt;&lt;p&gt;这次由我室友和我还有另外两个同学一同前往，这个也是贵,最后人均花了105,不过体验还算可以。点了四个菜？名字忘了,大体就是烤肉串、意面、洋葱</summary>
      
    
    
    
    <category term="美食" scheme="https://laobameishijia.github.io/category/%E7%BE%8E%E9%A3%9F/"/>
    
    
    <category term="成都" scheme="https://laobameishijia.github.io/tag/%E6%88%90%E9%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>美食篇-3-鸡毛店</title>
    <link href="https://laobameishijia.github.io/2021/10/16/mei-shi-pian-3-ji-mao-dian/"/>
    <id>https://laobameishijia.github.io/2021/10/16/mei-shi-pian-3-ji-mao-dian/</id>
    <published>2021-10-16T09:25:00.000Z</published>
    <updated>2021-10-17T01:54:52.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="美食"><a href="#美食" class="headerlink" title="美食"></a>美食</h1><p>这次由我室友和我还有另外两个同学一同前往，这个还算可以,最后人均花了65? 点了 酸菜鱼？毛血旺？其他的忘了,这都是后面整理的了。</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QQ%E5%9B%BE%E7%89%8720211016180849.jpg" alt="照骗1"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;美食&quot;&gt;&lt;a href=&quot;#美食&quot; class=&quot;headerlink&quot; title=&quot;美食&quot;&gt;&lt;/a&gt;美食&lt;/h1&gt;&lt;p&gt;这次由我室友和我还有另外两个同学一同前往，这个还算可以,最后人均花了65? 点了 酸菜鱼？毛血旺？其他的忘了,这都是后面整理的了。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="美食" scheme="https://laobameishijia.github.io/category/%E7%BE%8E%E9%A3%9F/"/>
    
    
    <category term="成都" scheme="https://laobameishijia.github.io/tag/%E6%88%90%E9%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>美食篇-4-东北菜</title>
    <link href="https://laobameishijia.github.io/2021/10/16/mei-shi-pian-4-dong-bei-cai/"/>
    <id>https://laobameishijia.github.io/2021/10/16/mei-shi-pian-4-dong-bei-cai/</id>
    <published>2021-10-16T09:25:00.000Z</published>
    <updated>2021-10-17T01:54:52.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="美食"><a href="#美食" class="headerlink" title="美食"></a>美食</h1><p>这次由我和我的两个舍友,这家店相对来说比较实惠,个人感觉也比较好吃。可能是因为自己家乡也在北方的原因。</p><ul><li>地三鲜</li><li>锅包肉—感觉跟我爸弄得差不多~~~</li><li>饺子</li><li>炸茄盒</li><li><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QQ%E5%9B%BE%E7%89%8720211016181146.jpg" alt="东北菜"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;美食&quot;&gt;&lt;a href=&quot;#美食&quot; class=&quot;headerlink&quot; title=&quot;美食&quot;&gt;&lt;/a&gt;美食&lt;/h1&gt;&lt;p&gt;这次由我和我的两个舍友,这家店相对来说比较实惠,个人感觉也比较好吃。可能是因为自己家乡也在北方的原因。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;地三鲜&lt;/</summary>
      
    
    
    
    <category term="美食" scheme="https://laobameishijia.github.io/category/%E7%BE%8E%E9%A3%9F/"/>
    
    
    <category term="成都" scheme="https://laobameishijia.github.io/tag/%E6%88%90%E9%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>美食篇-5-麦当劳</title>
    <link href="https://laobameishijia.github.io/2021/10/16/mei-shi-pian-5-mai-dang-lao/"/>
    <id>https://laobameishijia.github.io/2021/10/16/mei-shi-pian-5-mai-dang-lao/</id>
    <published>2021-10-16T09:25:00.000Z</published>
    <updated>2021-10-17T01:54:52.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="美食"><a href="#美食" class="headerlink" title="美食"></a>美食</h1><p>这次是所有的舍友了,毕竟一个舍友请客,点的麦当劳,有汉堡、可乐、炸鸡、小龙虾和粉条、薯条、披萨~~ 如果要是硬要算人均的话,应该在50左右</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/QQ%E5%9B%BE%E7%89%8720211016181638.jpg" alt="麦当劳"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;美食&quot;&gt;&lt;a href=&quot;#美食&quot; class=&quot;headerlink&quot; title=&quot;美食&quot;&gt;&lt;/a&gt;美食&lt;/h1&gt;&lt;p&gt;这次是所有的舍友了,毕竟一个舍友请客,点的麦当劳,有汉堡、可乐、炸鸡、小龙虾和粉条、薯条、披萨~~ 如果要是硬要算人均的话,应该在50左右&lt;</summary>
      
    
    
    
    <category term="美食" scheme="https://laobameishijia.github.io/category/%E7%BE%8E%E9%A3%9F/"/>
    
    
    <category term="成都" scheme="https://laobameishijia.github.io/tag/%E6%88%90%E9%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>美食篇-6-陶德砂锅</title>
    <link href="https://laobameishijia.github.io/2021/10/16/mei-shi-pian-6-tao-de-sha-guo/"/>
    <id>https://laobameishijia.github.io/2021/10/16/mei-shi-pian-6-tao-de-sha-guo/</id>
    <published>2021-10-16T09:25:00.000Z</published>
    <updated>2021-10-17T01:54:52.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="美食"><a href="#美食" class="headerlink" title="美食"></a>美食</h1><p>这次是舍友和我外加上两个大寝的舍友,这次的菜也非常好吃，人均55? 可惜照骗我只有一张了。有一个鲫鱼饺子、红烧猪蹄、还有一个肥肠、还有虾仁米线,还点了一些包子。</p><p>本来想尝尝肥肠的,因为之前看别人在视频里面吃的时候,我感觉很香。结果吃了一口,差点原地~~</p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/1E5077B3A17D99CD7EDF42E4F291B254.jpg" alt="照片"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;美食&quot;&gt;&lt;a href=&quot;#美食&quot; class=&quot;headerlink&quot; title=&quot;美食&quot;&gt;&lt;/a&gt;美食&lt;/h1&gt;&lt;p&gt;这次是舍友和我外加上两个大寝的舍友,这次的菜也非常好吃，人均55? 可惜照骗我只有一张了。有一个鲫鱼饺子、红烧猪蹄、还有一个肥肠、还有虾仁米</summary>
      
    
    
    
    <category term="美食" scheme="https://laobameishijia.github.io/category/%E7%BE%8E%E9%A3%9F/"/>
    
    
    <category term="成都" scheme="https://laobameishijia.github.io/tag/%E6%88%90%E9%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言学习-数据处理的两个基本问题</title>
    <link href="https://laobameishijia.github.io/2021/10/13/hui-bian-yu-yan-xue-xi-shu-ju-chu-li-de-liang-ge-ji-ben-wen-ti/"/>
    <id>https://laobameishijia.github.io/2021/10/13/hui-bian-yu-yan-xue-xi-shu-ju-chu-li-de-liang-ge-ji-ben-wen-ti/</id>
    <published>2021-10-13T09:25:00.000Z</published>
    <updated>2021-10-17T01:54:52.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据处理的两个基本问题"><a href="#数据处理的两个基本问题" class="headerlink" title="数据处理的两个基本问题"></a>数据处理的两个基本问题</h1><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p>还是画这样的图，感觉思路清晰一些。新的东西并不多,大多感觉还是对以往问题的一个总结。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211013102156.png" alt="思维导图"></p><h2 id="综合实验"><a href="#综合实验" class="headerlink" title="综合实验"></a>综合实验</h2><p>编程,将data段中的数据按如下格式写入到table段中,并计算21年中的人均收入(取整),结果也按照下面的格式保存在table段中。<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211013102611.png" alt="题干1"><br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211013102632.png" alt="题干2"></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>  具体的思路就是,利用内外循环,大循环循环00-10H-20H这样每一行的数据,小循环循环每个数据项</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>中具体的字节\字。同时利用idata和si</p><pre class=" language-text"><code class="language-text">assume cs:codesg,ds:datadata segment    ;0    db '1975','1976','1977','1978','1979','1980','1981','1982','1983'    db '1984','1985','1986','1987','1988','1989','1990','1991','1992'    db '1993','1994','1995'    ;54H    dd 16,22,382,1356,2390,8000,160000,24486,50065,97479,140417,197514    dd 345980,590827,803530,1183000,1843000,2759000,3753000,4649000,5973000        ;A8H    dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793,4037,5635,8226    dw 11542,14430,15257,17800data endstable segment    db 21 dup ('year summ ne ?? ')table endscodesg segment;正好印证了两个重点的地方 1.数据在什么地方 2.数据的大小;算人均收入的那个还没有写--------------------------------------------------------start:    mov ax,data    mov ds,ax        mov ax,table    mov es,ax;这里经常把ax写成table了    mov bx,0;bx定位data段,bx year和收入都是四个字节可以公用,但是雇员数是两个字节的没办法公用    mov bp,0;bp定位es段    mov di,0;di用来在循环中服务于雇员数,因为它是两个字节,没办法跟year和outcome公用一个递增寄存器    mov cx,21    overall:        push cx        mov cx,2        mov si,0        year:            ;年份的4字节---两个字            mov ax,ds:[bx+si]            mov es:[bp+si],ax            add si,2            loop year        mov cx,2        mov si,0        outcome:            ;收入的4字节---两个字            mov ax,ds:[bx+54H+si]            mov es:[bp+5H+si],ax            add si,2            loop outcome        ;雇员数---一个字        mov ax,ds:[di+0A8H]        mov es:[bp+0AH],ax        ;计算人均收入        mov ax,es:[bp+5H];计算人均收入的,要用es的定位,那偏移量就得按照es的来。最开始写成ds的定位了[bx+54H]了        mov dx,es:[bp+5H+2]        div word ptr es:[bp+0AH]        mov es:[bp+0DH],ax        ;所有的空格        ;第一次没有考虑到空格是一个字节,这里不应该用16位的,应该用8位的        mov al,' '        mov es:[bp+4H],al        mov es:[bp+9H],al        mov es:[bp+0FH],al        pop cx        add di,2        add bx,4        add bp,16        loop overall    ;计算收入    mov ax,4c00h    int 21hcodesg endsend start</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据处理的两个基本问题&quot;&gt;&lt;a href=&quot;#数据处理的两个基本问题&quot; class=&quot;headerlink&quot; title=&quot;数据处理的两个基本问题&quot;&gt;&lt;/a&gt;数据处理的两个基本问题&lt;/h1&gt;&lt;h2 id=&quot;思维导图&quot;&gt;&lt;a href=&quot;#思维导图&quot; class=&quot;</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="汇编" scheme="https://laobameishijia.github.io/tag/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言学习-转移指令原理</title>
    <link href="https://laobameishijia.github.io/2021/10/13/hui-bian-yu-yan-xue-xi-zhuan-yi-zhi-ling-yuan-li/"/>
    <id>https://laobameishijia.github.io/2021/10/13/hui-bian-yu-yan-xue-xi-zhuan-yi-zhi-ling-yuan-li/</id>
    <published>2021-10-13T09:25:00.000Z</published>
    <updated>2021-10-17T01:54:52.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="转移指令原理"><a href="#转移指令原理" class="headerlink" title="转移指令原理"></a>转移指令原理</h1><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211013193650.png" alt="思维导图"></p><h2 id="根据位移进行转移的意义"><a href="#根据位移进行转移的意义" class="headerlink" title="根据位移进行转移的意义"></a>根据位移进行转移的意义</h2><p>在对应的机器码中不包含转移的目的地址,而包含的是到目的地址的位移。这种设计,方便了程序段在内存中的浮动装配。使程序装在内存中的不同位置都可正确执行,因为在执行时,只涉及到位移,而不是地址。如果是地址的话,程序没有装载到对应的位置,就会造成程序没有办法正确执行。</p><h2 id="综合实验"><a href="#综合实验" class="headerlink" title="综合实验"></a>综合实验</h2><h3 id="实验8-分析一个奇怪的程序"><a href="#实验8-分析一个奇怪的程序" class="headerlink" title="实验8 分析一个奇怪的程序"></a>实验8 分析一个奇怪的程序</h3><p>分析下面的程序,在运行前思考:这个程序可以正确返回吗？</p><pre class=" language-text"><code class="language-text">assume cs:codesgcodesg segment    mov ax,4c00h    int 21h;反正就是刚好利用了jmp 的相对位移的特性.short 8位位移 = 标号处的地址-jmp指令后的第一个字节地址start:    mov ax,0s:    nop    nop    mov di,offset s    mov si,offset s2    mov ax,cs:[si]    mov cs:[di],axs0:    jmp short ss1:    mov ax,0    int 21h    mov ax,0s2:    jmp short s1    nopcodesg endsend start</code></pre><p>可以正确返回,刚好利用了jmp 的相对位移的特性.short 8位位移 = 标号处的地址-jmp指令后的第一个字节地址。当程序再次跳回到s标号处执行时,其第一条指令为 EBF6,就刚好是往上面跳到了 <code>mov ax,4c00h</code></p><h4 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h4><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211013194841.png" alt="实验8"></p><h3 id="实验9"><a href="#实验9" class="headerlink" title="实验9"></a>实验9</h3><p>在屏幕中间分别显示绿色\绿底红色\白底蓝色的字符串”welcome to masm!”.</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>感觉这个没用到这章讲的东西啊??!!，还是因为我水平不行？？</p><p><strong>我是真的憨憨,第一开始没有注意到题目中说的是要在屏幕中间显示</strong></p><h5 id="改进前-写了三个循环"><a href="#改进前-写了三个循环" class="headerlink" title="改进前,写了三个循环"></a>改进前,写了三个循环</h5><pre class=" language-text"><code class="language-text">assume cs:codesg,ds:datasgdatasg segment    db 'welcome to masm!'datasg endscodesg segmentstart:    mov ax,datasg    mov ds,ax    mov ax,0B800H    mov es,ax;1        mov bx,6E0H    mov si,0    mov di,80    mov cx,16s:      mov al,ds:[si]    mov es:[bx+di],al    mov byte ptr es:[bx+di+1],02H    add di,2    add si,1    loop s;2    mov bx,780H    mov si,0    mov di,80    mov cx,16s1:      mov al,ds:[si]    mov es:[bx+di],al    mov byte ptr es:[bx+di+1],24H    add di,2    add si,1    loop s1;3    mov bx,820H    mov si,0    mov di,80    mov cx,16s2:      mov al,ds:[si]    mov es:[bx+di],al    mov byte ptr es:[bx+di+1],71H    add di,2    add si,1    loop s2    mov ax,4c00h    int 21hcodesg endsend start</code></pre><h5 id="改进后-写成了一个循环"><a href="#改进后-写成了一个循环" class="headerlink" title="改进后,写成了一个循环"></a>改进后,写成了一个循环</h5><pre class=" language-text"><code class="language-text">assume cs:codesg,ds:datasgdatasg segment    db 'welcome to masm!'    db 02H,24H,71Hdatasg endscodesg segmentstart:    mov ax,datasg    mov ds,ax    mov ax,0B800H    mov es,ax;1        mov bx,6E0H    mov cx,3    mov bp,0all:    push cx    mov si,0    mov di,80    mov cx,16    s:          mov al,ds:[si]        mov es:[bx+di],al        mov al,ds:[bp+16]        mov es:[bx+di+1],al        add di,2        add si,1        loop s    add bp,1    add bx,160    pop cx    loop all; ;2;     mov bx,780H;     mov si,0;     mov di,80;     mov cx,16; s1:  ;     mov al,ds:[si];     mov es:[bx+di],al;     mov byte ptr es:[bx+di+1],24H;     add di,2;     add si,1;     loop s1; ;3;     mov bx,820H;     mov si,0;     mov di,80;     mov cx,16; s2:  ;     mov al,ds:[si];     mov es:[bx+di],al;     mov byte ptr es:[bx+di+1],71H;     add di,2;     add si,1;     loop s2    mov ax,4c00h    int 21hcodesg endsend start</code></pre><h4 id="运行截图-1"><a href="#运行截图-1" class="headerlink" title="运行截图"></a>运行截图</h4><p>这个运行结果，怎么有的时候行有的时候不行？之前运行的时候，第一行的welcome 显示成了 celcome或是1/4elcome很奇怪。但是后面就又正常了<br><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211013201157.png" alt="实验九"></p><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211013205518.png" alt="改正后"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;转移指令原理&quot;&gt;&lt;a href=&quot;#转移指令原理&quot; class=&quot;headerlink&quot; title=&quot;转移指令原理&quot;&gt;&lt;/a&gt;转移指令原理&lt;/h1&gt;&lt;h2 id=&quot;思维导图&quot;&gt;&lt;a href=&quot;#思维导图&quot; class=&quot;headerlink&quot; title=&quot;思</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="汇编" scheme="https://laobameishijia.github.io/tag/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言学习-更灵活的定位内存地址的方法</title>
    <link href="https://laobameishijia.github.io/2021/10/11/hui-bian-yu-yan-xue-xi-geng-ling-huo-de-ding-wei-nei-cun-di-zhi-de-fang-fa/"/>
    <id>https://laobameishijia.github.io/2021/10/11/hui-bian-yu-yan-xue-xi-geng-ling-huo-de-ding-wei-nei-cun-di-zhi-de-fang-fa/</id>
    <published>2021-10-11T09:25:00.000Z</published>
    <updated>2021-10-17T01:54:52.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><h2 id="编程1-将datasg段中每个单词的前四个字母改为大写字母"><a href="#编程1-将datasg段中每个单词的前四个字母改为大写字母" class="headerlink" title="编程1 将datasg段中每个单词的前四个字母改为大写字母"></a>编程1 将datasg段中每个单词的前四个字母改为大写字母</h2><pre class=" language-text"><code class="language-text">assume cs:codesg,ss:stacksg,ds:datasgstacksg segment    dw 0,0,0,0,0,0,0,0stacksg endsdatasg segment    db '1. display      '    db '2. brows        '    db '3. replace      '    db '4. modify       'datasg endscodesg segmentstart:    mov ax,stacksg    mov ss,ax    mov sp,16;初始化栈段        mov ax,datasg    mov ds,ax;初始化数据段        mov bx,0    mov cx,4s:    push cx    mov cx,4    mov si,0s0:    mov al,ds:[bx+3+si];这个地方必须要是 bx+(si/di)+(idata)这样的形式,()为可选内容    and al,11011111B;01100100 01000100--44      mov ds:[bx+3+si],al    inc si    loop s0    pop cx    add bx,16    loop s        mov ax,4c00h    int 21hcodesg endsend start</code></pre><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211011200251.png" alt="运行截图"></p><h3 id="出现的错误"><a href="#出现的错误" class="headerlink" title="出现的错误"></a>出现的错误</h3><ul><li><code>and al,11011111b</code>少打了一个1</li></ul><h2 id="编程2-将datasg中的第一个字符串转换成大写-第二个字符串转成小写"><a href="#编程2-将datasg中的第一个字符串转换成大写-第二个字符串转成小写" class="headerlink" title="编程2 将datasg中的第一个字符串转换成大写,第二个字符串转成小写"></a>编程2 将datasg中的第一个字符串转换成大写,第二个字符串转成小写</h2><pre class=" language-text"><code class="language-text">assume cs:codesg,ds:datasgdatasg segment    db 'BaSiC'    db 'iNfOrMaTiOn'datasg endscodesg segment    start:        mov ax,datasg        mov ds,ax                mov bx,1        mov cx,2    s:        mov al,ds:[bx]        and al,11011111b        mov ds:[bx],al        add bx,2        loop s                mov bx,6;这个bx要定位到 第二个字符串的第一个大写字母啊        mov cx,5    s0:        mov al,ds:[bx]        or al,00100000b        mov ds:[bx],al                add bx,2        loop s0        mov ax,4c00h        int 21hcodesg endsend start</code></pre><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211011203022.png" alt="运行截图"></p><h3 id="出现的错误-1"><a href="#出现的错误-1" class="headerlink" title="出现的错误"></a>出现的错误</h3><ul><li>第二个字符串定位是要在<code>第一个大写字母N</code></li></ul><h2 id="编程3-用si和di实现将字母串”welcome-to-masm-”复制到它后面的数据区中"><a href="#编程3-用si和di实现将字母串”welcome-to-masm-”复制到它后面的数据区中" class="headerlink" title="编程3 用si和di实现将字母串”welcome to masm!”复制到它后面的数据区中"></a>编程3 用si和di实现将字母串”welcome to masm!”复制到它后面的数据区中</h2><pre class=" language-text"><code class="language-text">assume  cs:codesg,ds:datasgdatasg segment    db 'welcome to masm!'    db '................'datasg endscodesg segmentstart:    mov ax,datasg    mov ds,ax    mov si,0    mov di,10h    mov bx,0    mov cx,8 s:     mov ax,ds:[bx+si]    mov ds:[bx+di],ax        add si,2    add di,2        loop s    mov ax,4c00h    int 21hcodesg endsend start</code></pre><p><img src="https://laoba-1304292449.cos.ap-chengdu.myqcloud.com/img/20211011204256.png" alt="运行截图"></p><h3 id="出现的错误-2"><a href="#出现的错误-2" class="headerlink" title="出现的错误"></a>出现的错误</h3><ul><li><code>assume codesg</code> 和<code>code segment</code> 不匹配</li><li>di寄存器写成bi</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这一章中,我们主要讲解了更为灵活的寻址方式的应用和一些编程方法,主要的内容有：</p><ul><li>寻址方式 [bx]–编程2[bx+idata] [bx+si]–编程3[bx+si+idata]–编程1</li><li>二重循环问题的处理,处理两个循环loop都使用cx寄存器的时候,会出现冲突的问题.解决的最佳方式就是将cx的值暂时存储到栈空间中,等到再次回到外层循环的时候,再将其出栈,以此实现将互不影响.这里也能体现处在<code>调用函数</code>掉用<code>被调用函数</code>的时候,将各个寄存器的值入栈,等到<code>被调用函数</code>返回时,再将各个寄存器的值初始化到调用<code>被调用函数</code>之前,这样就可以继续执行<code>调用函数</code>,而不产生影响.</li><li>栈的应用</li><li>大小写转换的方法<br>小写转大写 <code>and al,11011111b</code><br>大写转小写 <code>or al,00100000b</code></li><li>and | or 指令</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实验&quot;&gt;&lt;a href=&quot;#实验&quot; class=&quot;headerlink&quot; title=&quot;实验&quot;&gt;&lt;/a&gt;实验&lt;/h1&gt;&lt;h2 id=&quot;编程1-将datasg段中每个单词的前四个字母改为大写字母&quot;&gt;&lt;a href=&quot;#编程1-将datasg段中每个单词的前四个字母改</summary>
      
    
    
    
    <category term="研究生预备学习" scheme="https://laobameishijia.github.io/category/%E7%A0%94%E7%A9%B6%E7%94%9F%E9%A2%84%E5%A4%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="汇编" scheme="https://laobameishijia.github.io/tag/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
</feed>
